// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go
//
// Generated by this command:
//
//	mockgen -source ./clients.go -destination mocks/clients.go
//

// Package mock_v2alpha1 is a generated GoMock package.
package mock_v2alpha1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	v2alpha1 "github.com/solo-io/solo-apis/client-go/admin.gloo.solo.io/v2alpha1"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v2alpha1.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2alpha1.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// InsightsConfigs mocks base method.
func (m *MockClientset) InsightsConfigs() v2alpha1.InsightsConfigClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsightsConfigs")
	ret0, _ := ret[0].(v2alpha1.InsightsConfigClient)
	return ret0
}

// InsightsConfigs indicates an expected call of InsightsConfigs.
func (mr *MockClientsetMockRecorder) InsightsConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsightsConfigs", reflect.TypeOf((*MockClientset)(nil).InsightsConfigs))
}

// WaypointLifecycleManagers mocks base method.
func (m *MockClientset) WaypointLifecycleManagers() v2alpha1.WaypointLifecycleManagerClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaypointLifecycleManagers")
	ret0, _ := ret[0].(v2alpha1.WaypointLifecycleManagerClient)
	return ret0
}

// WaypointLifecycleManagers indicates an expected call of WaypointLifecycleManagers.
func (mr *MockClientsetMockRecorder) WaypointLifecycleManagers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaypointLifecycleManagers", reflect.TypeOf((*MockClientset)(nil).WaypointLifecycleManagers))
}

// MockWaypointLifecycleManagerReader is a mock of WaypointLifecycleManagerReader interface.
type MockWaypointLifecycleManagerReader struct {
	ctrl     *gomock.Controller
	recorder *MockWaypointLifecycleManagerReaderMockRecorder
}

// MockWaypointLifecycleManagerReaderMockRecorder is the mock recorder for MockWaypointLifecycleManagerReader.
type MockWaypointLifecycleManagerReaderMockRecorder struct {
	mock *MockWaypointLifecycleManagerReader
}

// NewMockWaypointLifecycleManagerReader creates a new mock instance.
func NewMockWaypointLifecycleManagerReader(ctrl *gomock.Controller) *MockWaypointLifecycleManagerReader {
	mock := &MockWaypointLifecycleManagerReader{ctrl: ctrl}
	mock.recorder = &MockWaypointLifecycleManagerReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWaypointLifecycleManagerReader) EXPECT() *MockWaypointLifecycleManagerReaderMockRecorder {
	return m.recorder
}

// GetWaypointLifecycleManager mocks base method.
func (m *MockWaypointLifecycleManagerReader) GetWaypointLifecycleManager(ctx context.Context, key client.ObjectKey) (*v2alpha1.WaypointLifecycleManager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWaypointLifecycleManager", ctx, key)
	ret0, _ := ret[0].(*v2alpha1.WaypointLifecycleManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWaypointLifecycleManager indicates an expected call of GetWaypointLifecycleManager.
func (mr *MockWaypointLifecycleManagerReaderMockRecorder) GetWaypointLifecycleManager(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWaypointLifecycleManager", reflect.TypeOf((*MockWaypointLifecycleManagerReader)(nil).GetWaypointLifecycleManager), ctx, key)
}

// ListWaypointLifecycleManager mocks base method.
func (m *MockWaypointLifecycleManagerReader) ListWaypointLifecycleManager(ctx context.Context, opts ...client.ListOption) (*v2alpha1.WaypointLifecycleManagerList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWaypointLifecycleManager", varargs...)
	ret0, _ := ret[0].(*v2alpha1.WaypointLifecycleManagerList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWaypointLifecycleManager indicates an expected call of ListWaypointLifecycleManager.
func (mr *MockWaypointLifecycleManagerReaderMockRecorder) ListWaypointLifecycleManager(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWaypointLifecycleManager", reflect.TypeOf((*MockWaypointLifecycleManagerReader)(nil).ListWaypointLifecycleManager), varargs...)
}

// MockWaypointLifecycleManagerWriter is a mock of WaypointLifecycleManagerWriter interface.
type MockWaypointLifecycleManagerWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWaypointLifecycleManagerWriterMockRecorder
}

// MockWaypointLifecycleManagerWriterMockRecorder is the mock recorder for MockWaypointLifecycleManagerWriter.
type MockWaypointLifecycleManagerWriterMockRecorder struct {
	mock *MockWaypointLifecycleManagerWriter
}

// NewMockWaypointLifecycleManagerWriter creates a new mock instance.
func NewMockWaypointLifecycleManagerWriter(ctrl *gomock.Controller) *MockWaypointLifecycleManagerWriter {
	mock := &MockWaypointLifecycleManagerWriter{ctrl: ctrl}
	mock.recorder = &MockWaypointLifecycleManagerWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWaypointLifecycleManagerWriter) EXPECT() *MockWaypointLifecycleManagerWriterMockRecorder {
	return m.recorder
}

// CreateWaypointLifecycleManager mocks base method.
func (m *MockWaypointLifecycleManagerWriter) CreateWaypointLifecycleManager(ctx context.Context, obj *v2alpha1.WaypointLifecycleManager, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWaypointLifecycleManager", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWaypointLifecycleManager indicates an expected call of CreateWaypointLifecycleManager.
func (mr *MockWaypointLifecycleManagerWriterMockRecorder) CreateWaypointLifecycleManager(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWaypointLifecycleManager", reflect.TypeOf((*MockWaypointLifecycleManagerWriter)(nil).CreateWaypointLifecycleManager), varargs...)
}

// DeleteAllOfWaypointLifecycleManager mocks base method.
func (m *MockWaypointLifecycleManagerWriter) DeleteAllOfWaypointLifecycleManager(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfWaypointLifecycleManager", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfWaypointLifecycleManager indicates an expected call of DeleteAllOfWaypointLifecycleManager.
func (mr *MockWaypointLifecycleManagerWriterMockRecorder) DeleteAllOfWaypointLifecycleManager(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfWaypointLifecycleManager", reflect.TypeOf((*MockWaypointLifecycleManagerWriter)(nil).DeleteAllOfWaypointLifecycleManager), varargs...)
}

// DeleteWaypointLifecycleManager mocks base method.
func (m *MockWaypointLifecycleManagerWriter) DeleteWaypointLifecycleManager(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWaypointLifecycleManager", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWaypointLifecycleManager indicates an expected call of DeleteWaypointLifecycleManager.
func (mr *MockWaypointLifecycleManagerWriterMockRecorder) DeleteWaypointLifecycleManager(ctx, key any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWaypointLifecycleManager", reflect.TypeOf((*MockWaypointLifecycleManagerWriter)(nil).DeleteWaypointLifecycleManager), varargs...)
}

// PatchWaypointLifecycleManager mocks base method.
func (m *MockWaypointLifecycleManagerWriter) PatchWaypointLifecycleManager(ctx context.Context, obj *v2alpha1.WaypointLifecycleManager, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWaypointLifecycleManager", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWaypointLifecycleManager indicates an expected call of PatchWaypointLifecycleManager.
func (mr *MockWaypointLifecycleManagerWriterMockRecorder) PatchWaypointLifecycleManager(ctx, obj, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWaypointLifecycleManager", reflect.TypeOf((*MockWaypointLifecycleManagerWriter)(nil).PatchWaypointLifecycleManager), varargs...)
}

// UpdateWaypointLifecycleManager mocks base method.
func (m *MockWaypointLifecycleManagerWriter) UpdateWaypointLifecycleManager(ctx context.Context, obj *v2alpha1.WaypointLifecycleManager, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWaypointLifecycleManager", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWaypointLifecycleManager indicates an expected call of UpdateWaypointLifecycleManager.
func (mr *MockWaypointLifecycleManagerWriterMockRecorder) UpdateWaypointLifecycleManager(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWaypointLifecycleManager", reflect.TypeOf((*MockWaypointLifecycleManagerWriter)(nil).UpdateWaypointLifecycleManager), varargs...)
}

// UpsertWaypointLifecycleManager mocks base method.
func (m *MockWaypointLifecycleManagerWriter) UpsertWaypointLifecycleManager(ctx context.Context, obj *v2alpha1.WaypointLifecycleManager, transitionFuncs ...v2alpha1.WaypointLifecycleManagerTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertWaypointLifecycleManager", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertWaypointLifecycleManager indicates an expected call of UpsertWaypointLifecycleManager.
func (mr *MockWaypointLifecycleManagerWriterMockRecorder) UpsertWaypointLifecycleManager(ctx, obj any, transitionFuncs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertWaypointLifecycleManager", reflect.TypeOf((*MockWaypointLifecycleManagerWriter)(nil).UpsertWaypointLifecycleManager), varargs...)
}

// MockWaypointLifecycleManagerStatusWriter is a mock of WaypointLifecycleManagerStatusWriter interface.
type MockWaypointLifecycleManagerStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWaypointLifecycleManagerStatusWriterMockRecorder
}

// MockWaypointLifecycleManagerStatusWriterMockRecorder is the mock recorder for MockWaypointLifecycleManagerStatusWriter.
type MockWaypointLifecycleManagerStatusWriterMockRecorder struct {
	mock *MockWaypointLifecycleManagerStatusWriter
}

// NewMockWaypointLifecycleManagerStatusWriter creates a new mock instance.
func NewMockWaypointLifecycleManagerStatusWriter(ctrl *gomock.Controller) *MockWaypointLifecycleManagerStatusWriter {
	mock := &MockWaypointLifecycleManagerStatusWriter{ctrl: ctrl}
	mock.recorder = &MockWaypointLifecycleManagerStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWaypointLifecycleManagerStatusWriter) EXPECT() *MockWaypointLifecycleManagerStatusWriterMockRecorder {
	return m.recorder
}

// PatchWaypointLifecycleManagerStatus mocks base method.
func (m *MockWaypointLifecycleManagerStatusWriter) PatchWaypointLifecycleManagerStatus(ctx context.Context, obj *v2alpha1.WaypointLifecycleManager, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWaypointLifecycleManagerStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWaypointLifecycleManagerStatus indicates an expected call of PatchWaypointLifecycleManagerStatus.
func (mr *MockWaypointLifecycleManagerStatusWriterMockRecorder) PatchWaypointLifecycleManagerStatus(ctx, obj, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWaypointLifecycleManagerStatus", reflect.TypeOf((*MockWaypointLifecycleManagerStatusWriter)(nil).PatchWaypointLifecycleManagerStatus), varargs...)
}

// UpdateWaypointLifecycleManagerStatus mocks base method.
func (m *MockWaypointLifecycleManagerStatusWriter) UpdateWaypointLifecycleManagerStatus(ctx context.Context, obj *v2alpha1.WaypointLifecycleManager, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWaypointLifecycleManagerStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWaypointLifecycleManagerStatus indicates an expected call of UpdateWaypointLifecycleManagerStatus.
func (mr *MockWaypointLifecycleManagerStatusWriterMockRecorder) UpdateWaypointLifecycleManagerStatus(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWaypointLifecycleManagerStatus", reflect.TypeOf((*MockWaypointLifecycleManagerStatusWriter)(nil).UpdateWaypointLifecycleManagerStatus), varargs...)
}

// MockWaypointLifecycleManagerClient is a mock of WaypointLifecycleManagerClient interface.
type MockWaypointLifecycleManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockWaypointLifecycleManagerClientMockRecorder
}

// MockWaypointLifecycleManagerClientMockRecorder is the mock recorder for MockWaypointLifecycleManagerClient.
type MockWaypointLifecycleManagerClientMockRecorder struct {
	mock *MockWaypointLifecycleManagerClient
}

// NewMockWaypointLifecycleManagerClient creates a new mock instance.
func NewMockWaypointLifecycleManagerClient(ctrl *gomock.Controller) *MockWaypointLifecycleManagerClient {
	mock := &MockWaypointLifecycleManagerClient{ctrl: ctrl}
	mock.recorder = &MockWaypointLifecycleManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWaypointLifecycleManagerClient) EXPECT() *MockWaypointLifecycleManagerClientMockRecorder {
	return m.recorder
}

// CreateWaypointLifecycleManager mocks base method.
func (m *MockWaypointLifecycleManagerClient) CreateWaypointLifecycleManager(ctx context.Context, obj *v2alpha1.WaypointLifecycleManager, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWaypointLifecycleManager", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWaypointLifecycleManager indicates an expected call of CreateWaypointLifecycleManager.
func (mr *MockWaypointLifecycleManagerClientMockRecorder) CreateWaypointLifecycleManager(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWaypointLifecycleManager", reflect.TypeOf((*MockWaypointLifecycleManagerClient)(nil).CreateWaypointLifecycleManager), varargs...)
}

// DeleteAllOfWaypointLifecycleManager mocks base method.
func (m *MockWaypointLifecycleManagerClient) DeleteAllOfWaypointLifecycleManager(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfWaypointLifecycleManager", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfWaypointLifecycleManager indicates an expected call of DeleteAllOfWaypointLifecycleManager.
func (mr *MockWaypointLifecycleManagerClientMockRecorder) DeleteAllOfWaypointLifecycleManager(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfWaypointLifecycleManager", reflect.TypeOf((*MockWaypointLifecycleManagerClient)(nil).DeleteAllOfWaypointLifecycleManager), varargs...)
}

// DeleteWaypointLifecycleManager mocks base method.
func (m *MockWaypointLifecycleManagerClient) DeleteWaypointLifecycleManager(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWaypointLifecycleManager", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWaypointLifecycleManager indicates an expected call of DeleteWaypointLifecycleManager.
func (mr *MockWaypointLifecycleManagerClientMockRecorder) DeleteWaypointLifecycleManager(ctx, key any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWaypointLifecycleManager", reflect.TypeOf((*MockWaypointLifecycleManagerClient)(nil).DeleteWaypointLifecycleManager), varargs...)
}

// GetWaypointLifecycleManager mocks base method.
func (m *MockWaypointLifecycleManagerClient) GetWaypointLifecycleManager(ctx context.Context, key client.ObjectKey) (*v2alpha1.WaypointLifecycleManager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWaypointLifecycleManager", ctx, key)
	ret0, _ := ret[0].(*v2alpha1.WaypointLifecycleManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWaypointLifecycleManager indicates an expected call of GetWaypointLifecycleManager.
func (mr *MockWaypointLifecycleManagerClientMockRecorder) GetWaypointLifecycleManager(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWaypointLifecycleManager", reflect.TypeOf((*MockWaypointLifecycleManagerClient)(nil).GetWaypointLifecycleManager), ctx, key)
}

// ListWaypointLifecycleManager mocks base method.
func (m *MockWaypointLifecycleManagerClient) ListWaypointLifecycleManager(ctx context.Context, opts ...client.ListOption) (*v2alpha1.WaypointLifecycleManagerList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWaypointLifecycleManager", varargs...)
	ret0, _ := ret[0].(*v2alpha1.WaypointLifecycleManagerList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWaypointLifecycleManager indicates an expected call of ListWaypointLifecycleManager.
func (mr *MockWaypointLifecycleManagerClientMockRecorder) ListWaypointLifecycleManager(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWaypointLifecycleManager", reflect.TypeOf((*MockWaypointLifecycleManagerClient)(nil).ListWaypointLifecycleManager), varargs...)
}

// PatchWaypointLifecycleManager mocks base method.
func (m *MockWaypointLifecycleManagerClient) PatchWaypointLifecycleManager(ctx context.Context, obj *v2alpha1.WaypointLifecycleManager, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWaypointLifecycleManager", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWaypointLifecycleManager indicates an expected call of PatchWaypointLifecycleManager.
func (mr *MockWaypointLifecycleManagerClientMockRecorder) PatchWaypointLifecycleManager(ctx, obj, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWaypointLifecycleManager", reflect.TypeOf((*MockWaypointLifecycleManagerClient)(nil).PatchWaypointLifecycleManager), varargs...)
}

// PatchWaypointLifecycleManagerStatus mocks base method.
func (m *MockWaypointLifecycleManagerClient) PatchWaypointLifecycleManagerStatus(ctx context.Context, obj *v2alpha1.WaypointLifecycleManager, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWaypointLifecycleManagerStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWaypointLifecycleManagerStatus indicates an expected call of PatchWaypointLifecycleManagerStatus.
func (mr *MockWaypointLifecycleManagerClientMockRecorder) PatchWaypointLifecycleManagerStatus(ctx, obj, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWaypointLifecycleManagerStatus", reflect.TypeOf((*MockWaypointLifecycleManagerClient)(nil).PatchWaypointLifecycleManagerStatus), varargs...)
}

// UpdateWaypointLifecycleManager mocks base method.
func (m *MockWaypointLifecycleManagerClient) UpdateWaypointLifecycleManager(ctx context.Context, obj *v2alpha1.WaypointLifecycleManager, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWaypointLifecycleManager", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWaypointLifecycleManager indicates an expected call of UpdateWaypointLifecycleManager.
func (mr *MockWaypointLifecycleManagerClientMockRecorder) UpdateWaypointLifecycleManager(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWaypointLifecycleManager", reflect.TypeOf((*MockWaypointLifecycleManagerClient)(nil).UpdateWaypointLifecycleManager), varargs...)
}

// UpdateWaypointLifecycleManagerStatus mocks base method.
func (m *MockWaypointLifecycleManagerClient) UpdateWaypointLifecycleManagerStatus(ctx context.Context, obj *v2alpha1.WaypointLifecycleManager, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWaypointLifecycleManagerStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWaypointLifecycleManagerStatus indicates an expected call of UpdateWaypointLifecycleManagerStatus.
func (mr *MockWaypointLifecycleManagerClientMockRecorder) UpdateWaypointLifecycleManagerStatus(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWaypointLifecycleManagerStatus", reflect.TypeOf((*MockWaypointLifecycleManagerClient)(nil).UpdateWaypointLifecycleManagerStatus), varargs...)
}

// UpsertWaypointLifecycleManager mocks base method.
func (m *MockWaypointLifecycleManagerClient) UpsertWaypointLifecycleManager(ctx context.Context, obj *v2alpha1.WaypointLifecycleManager, transitionFuncs ...v2alpha1.WaypointLifecycleManagerTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertWaypointLifecycleManager", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertWaypointLifecycleManager indicates an expected call of UpsertWaypointLifecycleManager.
func (mr *MockWaypointLifecycleManagerClientMockRecorder) UpsertWaypointLifecycleManager(ctx, obj any, transitionFuncs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertWaypointLifecycleManager", reflect.TypeOf((*MockWaypointLifecycleManagerClient)(nil).UpsertWaypointLifecycleManager), varargs...)
}

// MockMulticlusterWaypointLifecycleManagerClient is a mock of MulticlusterWaypointLifecycleManagerClient interface.
type MockMulticlusterWaypointLifecycleManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWaypointLifecycleManagerClientMockRecorder
}

// MockMulticlusterWaypointLifecycleManagerClientMockRecorder is the mock recorder for MockMulticlusterWaypointLifecycleManagerClient.
type MockMulticlusterWaypointLifecycleManagerClientMockRecorder struct {
	mock *MockMulticlusterWaypointLifecycleManagerClient
}

// NewMockMulticlusterWaypointLifecycleManagerClient creates a new mock instance.
func NewMockMulticlusterWaypointLifecycleManagerClient(ctrl *gomock.Controller) *MockMulticlusterWaypointLifecycleManagerClient {
	mock := &MockMulticlusterWaypointLifecycleManagerClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWaypointLifecycleManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterWaypointLifecycleManagerClient) EXPECT() *MockMulticlusterWaypointLifecycleManagerClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterWaypointLifecycleManagerClient) Cluster(cluster string) (v2alpha1.WaypointLifecycleManagerClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2alpha1.WaypointLifecycleManagerClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterWaypointLifecycleManagerClientMockRecorder) Cluster(cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterWaypointLifecycleManagerClient)(nil).Cluster), cluster)
}

// MockInsightsConfigReader is a mock of InsightsConfigReader interface.
type MockInsightsConfigReader struct {
	ctrl     *gomock.Controller
	recorder *MockInsightsConfigReaderMockRecorder
}

// MockInsightsConfigReaderMockRecorder is the mock recorder for MockInsightsConfigReader.
type MockInsightsConfigReaderMockRecorder struct {
	mock *MockInsightsConfigReader
}

// NewMockInsightsConfigReader creates a new mock instance.
func NewMockInsightsConfigReader(ctrl *gomock.Controller) *MockInsightsConfigReader {
	mock := &MockInsightsConfigReader{ctrl: ctrl}
	mock.recorder = &MockInsightsConfigReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInsightsConfigReader) EXPECT() *MockInsightsConfigReaderMockRecorder {
	return m.recorder
}

// GetInsightsConfig mocks base method.
func (m *MockInsightsConfigReader) GetInsightsConfig(ctx context.Context, key client.ObjectKey) (*v2alpha1.InsightsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightsConfig", ctx, key)
	ret0, _ := ret[0].(*v2alpha1.InsightsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightsConfig indicates an expected call of GetInsightsConfig.
func (mr *MockInsightsConfigReaderMockRecorder) GetInsightsConfig(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightsConfig", reflect.TypeOf((*MockInsightsConfigReader)(nil).GetInsightsConfig), ctx, key)
}

// ListInsightsConfig mocks base method.
func (m *MockInsightsConfigReader) ListInsightsConfig(ctx context.Context, opts ...client.ListOption) (*v2alpha1.InsightsConfigList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInsightsConfig", varargs...)
	ret0, _ := ret[0].(*v2alpha1.InsightsConfigList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInsightsConfig indicates an expected call of ListInsightsConfig.
func (mr *MockInsightsConfigReaderMockRecorder) ListInsightsConfig(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInsightsConfig", reflect.TypeOf((*MockInsightsConfigReader)(nil).ListInsightsConfig), varargs...)
}

// MockInsightsConfigWriter is a mock of InsightsConfigWriter interface.
type MockInsightsConfigWriter struct {
	ctrl     *gomock.Controller
	recorder *MockInsightsConfigWriterMockRecorder
}

// MockInsightsConfigWriterMockRecorder is the mock recorder for MockInsightsConfigWriter.
type MockInsightsConfigWriterMockRecorder struct {
	mock *MockInsightsConfigWriter
}

// NewMockInsightsConfigWriter creates a new mock instance.
func NewMockInsightsConfigWriter(ctrl *gomock.Controller) *MockInsightsConfigWriter {
	mock := &MockInsightsConfigWriter{ctrl: ctrl}
	mock.recorder = &MockInsightsConfigWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInsightsConfigWriter) EXPECT() *MockInsightsConfigWriterMockRecorder {
	return m.recorder
}

// CreateInsightsConfig mocks base method.
func (m *MockInsightsConfigWriter) CreateInsightsConfig(ctx context.Context, obj *v2alpha1.InsightsConfig, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInsightsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInsightsConfig indicates an expected call of CreateInsightsConfig.
func (mr *MockInsightsConfigWriterMockRecorder) CreateInsightsConfig(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInsightsConfig", reflect.TypeOf((*MockInsightsConfigWriter)(nil).CreateInsightsConfig), varargs...)
}

// DeleteAllOfInsightsConfig mocks base method.
func (m *MockInsightsConfigWriter) DeleteAllOfInsightsConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfInsightsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfInsightsConfig indicates an expected call of DeleteAllOfInsightsConfig.
func (mr *MockInsightsConfigWriterMockRecorder) DeleteAllOfInsightsConfig(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfInsightsConfig", reflect.TypeOf((*MockInsightsConfigWriter)(nil).DeleteAllOfInsightsConfig), varargs...)
}

// DeleteInsightsConfig mocks base method.
func (m *MockInsightsConfigWriter) DeleteInsightsConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInsightsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInsightsConfig indicates an expected call of DeleteInsightsConfig.
func (mr *MockInsightsConfigWriterMockRecorder) DeleteInsightsConfig(ctx, key any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInsightsConfig", reflect.TypeOf((*MockInsightsConfigWriter)(nil).DeleteInsightsConfig), varargs...)
}

// PatchInsightsConfig mocks base method.
func (m *MockInsightsConfigWriter) PatchInsightsConfig(ctx context.Context, obj *v2alpha1.InsightsConfig, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchInsightsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchInsightsConfig indicates an expected call of PatchInsightsConfig.
func (mr *MockInsightsConfigWriterMockRecorder) PatchInsightsConfig(ctx, obj, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchInsightsConfig", reflect.TypeOf((*MockInsightsConfigWriter)(nil).PatchInsightsConfig), varargs...)
}

// UpdateInsightsConfig mocks base method.
func (m *MockInsightsConfigWriter) UpdateInsightsConfig(ctx context.Context, obj *v2alpha1.InsightsConfig, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInsightsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInsightsConfig indicates an expected call of UpdateInsightsConfig.
func (mr *MockInsightsConfigWriterMockRecorder) UpdateInsightsConfig(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInsightsConfig", reflect.TypeOf((*MockInsightsConfigWriter)(nil).UpdateInsightsConfig), varargs...)
}

// UpsertInsightsConfig mocks base method.
func (m *MockInsightsConfigWriter) UpsertInsightsConfig(ctx context.Context, obj *v2alpha1.InsightsConfig, transitionFuncs ...v2alpha1.InsightsConfigTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertInsightsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertInsightsConfig indicates an expected call of UpsertInsightsConfig.
func (mr *MockInsightsConfigWriterMockRecorder) UpsertInsightsConfig(ctx, obj any, transitionFuncs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertInsightsConfig", reflect.TypeOf((*MockInsightsConfigWriter)(nil).UpsertInsightsConfig), varargs...)
}

// MockInsightsConfigStatusWriter is a mock of InsightsConfigStatusWriter interface.
type MockInsightsConfigStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockInsightsConfigStatusWriterMockRecorder
}

// MockInsightsConfigStatusWriterMockRecorder is the mock recorder for MockInsightsConfigStatusWriter.
type MockInsightsConfigStatusWriterMockRecorder struct {
	mock *MockInsightsConfigStatusWriter
}

// NewMockInsightsConfigStatusWriter creates a new mock instance.
func NewMockInsightsConfigStatusWriter(ctrl *gomock.Controller) *MockInsightsConfigStatusWriter {
	mock := &MockInsightsConfigStatusWriter{ctrl: ctrl}
	mock.recorder = &MockInsightsConfigStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInsightsConfigStatusWriter) EXPECT() *MockInsightsConfigStatusWriterMockRecorder {
	return m.recorder
}

// PatchInsightsConfigStatus mocks base method.
func (m *MockInsightsConfigStatusWriter) PatchInsightsConfigStatus(ctx context.Context, obj *v2alpha1.InsightsConfig, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchInsightsConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchInsightsConfigStatus indicates an expected call of PatchInsightsConfigStatus.
func (mr *MockInsightsConfigStatusWriterMockRecorder) PatchInsightsConfigStatus(ctx, obj, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchInsightsConfigStatus", reflect.TypeOf((*MockInsightsConfigStatusWriter)(nil).PatchInsightsConfigStatus), varargs...)
}

// UpdateInsightsConfigStatus mocks base method.
func (m *MockInsightsConfigStatusWriter) UpdateInsightsConfigStatus(ctx context.Context, obj *v2alpha1.InsightsConfig, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInsightsConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInsightsConfigStatus indicates an expected call of UpdateInsightsConfigStatus.
func (mr *MockInsightsConfigStatusWriterMockRecorder) UpdateInsightsConfigStatus(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInsightsConfigStatus", reflect.TypeOf((*MockInsightsConfigStatusWriter)(nil).UpdateInsightsConfigStatus), varargs...)
}

// MockInsightsConfigClient is a mock of InsightsConfigClient interface.
type MockInsightsConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockInsightsConfigClientMockRecorder
}

// MockInsightsConfigClientMockRecorder is the mock recorder for MockInsightsConfigClient.
type MockInsightsConfigClientMockRecorder struct {
	mock *MockInsightsConfigClient
}

// NewMockInsightsConfigClient creates a new mock instance.
func NewMockInsightsConfigClient(ctrl *gomock.Controller) *MockInsightsConfigClient {
	mock := &MockInsightsConfigClient{ctrl: ctrl}
	mock.recorder = &MockInsightsConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInsightsConfigClient) EXPECT() *MockInsightsConfigClientMockRecorder {
	return m.recorder
}

// CreateInsightsConfig mocks base method.
func (m *MockInsightsConfigClient) CreateInsightsConfig(ctx context.Context, obj *v2alpha1.InsightsConfig, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInsightsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInsightsConfig indicates an expected call of CreateInsightsConfig.
func (mr *MockInsightsConfigClientMockRecorder) CreateInsightsConfig(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInsightsConfig", reflect.TypeOf((*MockInsightsConfigClient)(nil).CreateInsightsConfig), varargs...)
}

// DeleteAllOfInsightsConfig mocks base method.
func (m *MockInsightsConfigClient) DeleteAllOfInsightsConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfInsightsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfInsightsConfig indicates an expected call of DeleteAllOfInsightsConfig.
func (mr *MockInsightsConfigClientMockRecorder) DeleteAllOfInsightsConfig(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfInsightsConfig", reflect.TypeOf((*MockInsightsConfigClient)(nil).DeleteAllOfInsightsConfig), varargs...)
}

// DeleteInsightsConfig mocks base method.
func (m *MockInsightsConfigClient) DeleteInsightsConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInsightsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInsightsConfig indicates an expected call of DeleteInsightsConfig.
func (mr *MockInsightsConfigClientMockRecorder) DeleteInsightsConfig(ctx, key any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInsightsConfig", reflect.TypeOf((*MockInsightsConfigClient)(nil).DeleteInsightsConfig), varargs...)
}

// GetInsightsConfig mocks base method.
func (m *MockInsightsConfigClient) GetInsightsConfig(ctx context.Context, key client.ObjectKey) (*v2alpha1.InsightsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightsConfig", ctx, key)
	ret0, _ := ret[0].(*v2alpha1.InsightsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightsConfig indicates an expected call of GetInsightsConfig.
func (mr *MockInsightsConfigClientMockRecorder) GetInsightsConfig(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightsConfig", reflect.TypeOf((*MockInsightsConfigClient)(nil).GetInsightsConfig), ctx, key)
}

// ListInsightsConfig mocks base method.
func (m *MockInsightsConfigClient) ListInsightsConfig(ctx context.Context, opts ...client.ListOption) (*v2alpha1.InsightsConfigList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInsightsConfig", varargs...)
	ret0, _ := ret[0].(*v2alpha1.InsightsConfigList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInsightsConfig indicates an expected call of ListInsightsConfig.
func (mr *MockInsightsConfigClientMockRecorder) ListInsightsConfig(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInsightsConfig", reflect.TypeOf((*MockInsightsConfigClient)(nil).ListInsightsConfig), varargs...)
}

// PatchInsightsConfig mocks base method.
func (m *MockInsightsConfigClient) PatchInsightsConfig(ctx context.Context, obj *v2alpha1.InsightsConfig, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchInsightsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchInsightsConfig indicates an expected call of PatchInsightsConfig.
func (mr *MockInsightsConfigClientMockRecorder) PatchInsightsConfig(ctx, obj, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchInsightsConfig", reflect.TypeOf((*MockInsightsConfigClient)(nil).PatchInsightsConfig), varargs...)
}

// PatchInsightsConfigStatus mocks base method.
func (m *MockInsightsConfigClient) PatchInsightsConfigStatus(ctx context.Context, obj *v2alpha1.InsightsConfig, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchInsightsConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchInsightsConfigStatus indicates an expected call of PatchInsightsConfigStatus.
func (mr *MockInsightsConfigClientMockRecorder) PatchInsightsConfigStatus(ctx, obj, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchInsightsConfigStatus", reflect.TypeOf((*MockInsightsConfigClient)(nil).PatchInsightsConfigStatus), varargs...)
}

// UpdateInsightsConfig mocks base method.
func (m *MockInsightsConfigClient) UpdateInsightsConfig(ctx context.Context, obj *v2alpha1.InsightsConfig, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInsightsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInsightsConfig indicates an expected call of UpdateInsightsConfig.
func (mr *MockInsightsConfigClientMockRecorder) UpdateInsightsConfig(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInsightsConfig", reflect.TypeOf((*MockInsightsConfigClient)(nil).UpdateInsightsConfig), varargs...)
}

// UpdateInsightsConfigStatus mocks base method.
func (m *MockInsightsConfigClient) UpdateInsightsConfigStatus(ctx context.Context, obj *v2alpha1.InsightsConfig, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInsightsConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInsightsConfigStatus indicates an expected call of UpdateInsightsConfigStatus.
func (mr *MockInsightsConfigClientMockRecorder) UpdateInsightsConfigStatus(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInsightsConfigStatus", reflect.TypeOf((*MockInsightsConfigClient)(nil).UpdateInsightsConfigStatus), varargs...)
}

// UpsertInsightsConfig mocks base method.
func (m *MockInsightsConfigClient) UpsertInsightsConfig(ctx context.Context, obj *v2alpha1.InsightsConfig, transitionFuncs ...v2alpha1.InsightsConfigTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertInsightsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertInsightsConfig indicates an expected call of UpsertInsightsConfig.
func (mr *MockInsightsConfigClientMockRecorder) UpsertInsightsConfig(ctx, obj any, transitionFuncs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertInsightsConfig", reflect.TypeOf((*MockInsightsConfigClient)(nil).UpsertInsightsConfig), varargs...)
}

// MockMulticlusterInsightsConfigClient is a mock of MulticlusterInsightsConfigClient interface.
type MockMulticlusterInsightsConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterInsightsConfigClientMockRecorder
}

// MockMulticlusterInsightsConfigClientMockRecorder is the mock recorder for MockMulticlusterInsightsConfigClient.
type MockMulticlusterInsightsConfigClientMockRecorder struct {
	mock *MockMulticlusterInsightsConfigClient
}

// NewMockMulticlusterInsightsConfigClient creates a new mock instance.
func NewMockMulticlusterInsightsConfigClient(ctrl *gomock.Controller) *MockMulticlusterInsightsConfigClient {
	mock := &MockMulticlusterInsightsConfigClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterInsightsConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterInsightsConfigClient) EXPECT() *MockMulticlusterInsightsConfigClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterInsightsConfigClient) Cluster(cluster string) (v2alpha1.InsightsConfigClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2alpha1.InsightsConfigClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterInsightsConfigClientMockRecorder) Cluster(cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterInsightsConfigClient)(nil).Cluster), cluster)
}
