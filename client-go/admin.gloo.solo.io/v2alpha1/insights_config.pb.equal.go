// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/admin/v2alpha1/insights_config.proto

package v2alpha1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *InsightsConfigSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*InsightsConfigSpec)
	if !ok {
		that2, ok := that.(InsightsConfigSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetDisabledInsights()) != len(target.GetDisabledInsights()) {
		return false
	}
	for idx, v := range m.GetDisabledInsights() {

		if strings.Compare(v, target.GetDisabledInsights()[idx]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *InsightsConfigStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*InsightsConfigStatus)
	if !ok {
		that2, ok := that.(InsightsConfigStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetCommon()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCommon()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCommon(), target.GetCommon()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *InsightsConfigReport) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*InsightsConfigReport)
	if !ok {
		that2, ok := that.(InsightsConfigReport)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetReport()).(equality.Equalizer); ok {
		if !h.Equal(target.GetReport()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetReport(), target.GetReport()) {
			return false
		}
	}

	return true
}
