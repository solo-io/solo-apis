// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/admin/v2alpha1/insights_config.proto

package v2alpha1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *InsightsConfigSpec) Clone() proto.Message {
	var target *InsightsConfigSpec
	if m == nil {
		return target
	}
	target = &InsightsConfigSpec{}

	if m.GetDisabledInsights() != nil {
		target.DisabledInsights = make([]string, len(m.GetDisabledInsights()))
		for idx, v := range m.GetDisabledInsights() {

			target.DisabledInsights[idx] = v

		}
	}

	return target
}

// Clone function
func (m *InsightsConfigStatus) Clone() proto.Message {
	var target *InsightsConfigStatus
	if m == nil {
		return target
	}
	target = &InsightsConfigStatus{}

	if h, ok := interface{}(m.GetCommon()).(clone.Cloner); ok {
		target.Common = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	} else {
		target.Common = proto.Clone(m.GetCommon()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	}

	return target
}

// Clone function
func (m *InsightsConfigReport) Clone() proto.Message {
	var target *InsightsConfigReport
	if m == nil {
		return target
	}
	target = &InsightsConfigReport{}

	if h, ok := interface{}(m.GetReport()).(clone.Cloner); ok {
		target.Report = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
	} else {
		target.Report = proto.Clone(m.GetReport()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
	}

	return target
}
