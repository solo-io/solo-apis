// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"

	v2alpha1 "github.com/solo-io/solo-apis/client-go/admin.gloo.solo.io/v2alpha1"
	controller "github.com/solo-io/solo-apis/client-go/admin.gloo.solo.io/v2alpha1/controller"
)

// MockMulticlusterWaypointLifecycleManagerReconciler is a mock of MulticlusterWaypointLifecycleManagerReconciler interface.
type MockMulticlusterWaypointLifecycleManagerReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWaypointLifecycleManagerReconcilerMockRecorder
}

// MockMulticlusterWaypointLifecycleManagerReconcilerMockRecorder is the mock recorder for MockMulticlusterWaypointLifecycleManagerReconciler.
type MockMulticlusterWaypointLifecycleManagerReconcilerMockRecorder struct {
	mock *MockMulticlusterWaypointLifecycleManagerReconciler
}

// NewMockMulticlusterWaypointLifecycleManagerReconciler creates a new mock instance.
func NewMockMulticlusterWaypointLifecycleManagerReconciler(ctrl *gomock.Controller) *MockMulticlusterWaypointLifecycleManagerReconciler {
	mock := &MockMulticlusterWaypointLifecycleManagerReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWaypointLifecycleManagerReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterWaypointLifecycleManagerReconciler) EXPECT() *MockMulticlusterWaypointLifecycleManagerReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWaypointLifecycleManager mocks base method.
func (m *MockMulticlusterWaypointLifecycleManagerReconciler) ReconcileWaypointLifecycleManager(clusterName string, obj *v2alpha1.WaypointLifecycleManager) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWaypointLifecycleManager", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileWaypointLifecycleManager indicates an expected call of ReconcileWaypointLifecycleManager.
func (mr *MockMulticlusterWaypointLifecycleManagerReconcilerMockRecorder) ReconcileWaypointLifecycleManager(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWaypointLifecycleManager", reflect.TypeOf((*MockMulticlusterWaypointLifecycleManagerReconciler)(nil).ReconcileWaypointLifecycleManager), clusterName, obj)
}

// MockMulticlusterWaypointLifecycleManagerDeletionReconciler is a mock of MulticlusterWaypointLifecycleManagerDeletionReconciler interface.
type MockMulticlusterWaypointLifecycleManagerDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWaypointLifecycleManagerDeletionReconcilerMockRecorder
}

// MockMulticlusterWaypointLifecycleManagerDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterWaypointLifecycleManagerDeletionReconciler.
type MockMulticlusterWaypointLifecycleManagerDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterWaypointLifecycleManagerDeletionReconciler
}

// NewMockMulticlusterWaypointLifecycleManagerDeletionReconciler creates a new mock instance.
func NewMockMulticlusterWaypointLifecycleManagerDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterWaypointLifecycleManagerDeletionReconciler {
	mock := &MockMulticlusterWaypointLifecycleManagerDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWaypointLifecycleManagerDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterWaypointLifecycleManagerDeletionReconciler) EXPECT() *MockMulticlusterWaypointLifecycleManagerDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWaypointLifecycleManagerDeletion mocks base method.
func (m *MockMulticlusterWaypointLifecycleManagerDeletionReconciler) ReconcileWaypointLifecycleManagerDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWaypointLifecycleManagerDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileWaypointLifecycleManagerDeletion indicates an expected call of ReconcileWaypointLifecycleManagerDeletion.
func (mr *MockMulticlusterWaypointLifecycleManagerDeletionReconcilerMockRecorder) ReconcileWaypointLifecycleManagerDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWaypointLifecycleManagerDeletion", reflect.TypeOf((*MockMulticlusterWaypointLifecycleManagerDeletionReconciler)(nil).ReconcileWaypointLifecycleManagerDeletion), clusterName, req)
}

// MockMulticlusterWaypointLifecycleManagerReconcileLoop is a mock of MulticlusterWaypointLifecycleManagerReconcileLoop interface.
type MockMulticlusterWaypointLifecycleManagerReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWaypointLifecycleManagerReconcileLoopMockRecorder
}

// MockMulticlusterWaypointLifecycleManagerReconcileLoopMockRecorder is the mock recorder for MockMulticlusterWaypointLifecycleManagerReconcileLoop.
type MockMulticlusterWaypointLifecycleManagerReconcileLoopMockRecorder struct {
	mock *MockMulticlusterWaypointLifecycleManagerReconcileLoop
}

// NewMockMulticlusterWaypointLifecycleManagerReconcileLoop creates a new mock instance.
func NewMockMulticlusterWaypointLifecycleManagerReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterWaypointLifecycleManagerReconcileLoop {
	mock := &MockMulticlusterWaypointLifecycleManagerReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWaypointLifecycleManagerReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterWaypointLifecycleManagerReconcileLoop) EXPECT() *MockMulticlusterWaypointLifecycleManagerReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterWaypointLifecycleManagerReconciler mocks base method.
func (m *MockMulticlusterWaypointLifecycleManagerReconcileLoop) AddMulticlusterWaypointLifecycleManagerReconciler(ctx context.Context, rec controller.MulticlusterWaypointLifecycleManagerReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterWaypointLifecycleManagerReconciler", varargs...)
}

// AddMulticlusterWaypointLifecycleManagerReconciler indicates an expected call of AddMulticlusterWaypointLifecycleManagerReconciler.
func (mr *MockMulticlusterWaypointLifecycleManagerReconcileLoopMockRecorder) AddMulticlusterWaypointLifecycleManagerReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterWaypointLifecycleManagerReconciler", reflect.TypeOf((*MockMulticlusterWaypointLifecycleManagerReconcileLoop)(nil).AddMulticlusterWaypointLifecycleManagerReconciler), varargs...)
}

// MockMulticlusterInsightsConfigReconciler is a mock of MulticlusterInsightsConfigReconciler interface.
type MockMulticlusterInsightsConfigReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterInsightsConfigReconcilerMockRecorder
}

// MockMulticlusterInsightsConfigReconcilerMockRecorder is the mock recorder for MockMulticlusterInsightsConfigReconciler.
type MockMulticlusterInsightsConfigReconcilerMockRecorder struct {
	mock *MockMulticlusterInsightsConfigReconciler
}

// NewMockMulticlusterInsightsConfigReconciler creates a new mock instance.
func NewMockMulticlusterInsightsConfigReconciler(ctrl *gomock.Controller) *MockMulticlusterInsightsConfigReconciler {
	mock := &MockMulticlusterInsightsConfigReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterInsightsConfigReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterInsightsConfigReconciler) EXPECT() *MockMulticlusterInsightsConfigReconcilerMockRecorder {
	return m.recorder
}

// ReconcileInsightsConfig mocks base method.
func (m *MockMulticlusterInsightsConfigReconciler) ReconcileInsightsConfig(clusterName string, obj *v2alpha1.InsightsConfig) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileInsightsConfig", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileInsightsConfig indicates an expected call of ReconcileInsightsConfig.
func (mr *MockMulticlusterInsightsConfigReconcilerMockRecorder) ReconcileInsightsConfig(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileInsightsConfig", reflect.TypeOf((*MockMulticlusterInsightsConfigReconciler)(nil).ReconcileInsightsConfig), clusterName, obj)
}

// MockMulticlusterInsightsConfigDeletionReconciler is a mock of MulticlusterInsightsConfigDeletionReconciler interface.
type MockMulticlusterInsightsConfigDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterInsightsConfigDeletionReconcilerMockRecorder
}

// MockMulticlusterInsightsConfigDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterInsightsConfigDeletionReconciler.
type MockMulticlusterInsightsConfigDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterInsightsConfigDeletionReconciler
}

// NewMockMulticlusterInsightsConfigDeletionReconciler creates a new mock instance.
func NewMockMulticlusterInsightsConfigDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterInsightsConfigDeletionReconciler {
	mock := &MockMulticlusterInsightsConfigDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterInsightsConfigDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterInsightsConfigDeletionReconciler) EXPECT() *MockMulticlusterInsightsConfigDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileInsightsConfigDeletion mocks base method.
func (m *MockMulticlusterInsightsConfigDeletionReconciler) ReconcileInsightsConfigDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileInsightsConfigDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileInsightsConfigDeletion indicates an expected call of ReconcileInsightsConfigDeletion.
func (mr *MockMulticlusterInsightsConfigDeletionReconcilerMockRecorder) ReconcileInsightsConfigDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileInsightsConfigDeletion", reflect.TypeOf((*MockMulticlusterInsightsConfigDeletionReconciler)(nil).ReconcileInsightsConfigDeletion), clusterName, req)
}

// MockMulticlusterInsightsConfigReconcileLoop is a mock of MulticlusterInsightsConfigReconcileLoop interface.
type MockMulticlusterInsightsConfigReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterInsightsConfigReconcileLoopMockRecorder
}

// MockMulticlusterInsightsConfigReconcileLoopMockRecorder is the mock recorder for MockMulticlusterInsightsConfigReconcileLoop.
type MockMulticlusterInsightsConfigReconcileLoopMockRecorder struct {
	mock *MockMulticlusterInsightsConfigReconcileLoop
}

// NewMockMulticlusterInsightsConfigReconcileLoop creates a new mock instance.
func NewMockMulticlusterInsightsConfigReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterInsightsConfigReconcileLoop {
	mock := &MockMulticlusterInsightsConfigReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterInsightsConfigReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterInsightsConfigReconcileLoop) EXPECT() *MockMulticlusterInsightsConfigReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterInsightsConfigReconciler mocks base method.
func (m *MockMulticlusterInsightsConfigReconcileLoop) AddMulticlusterInsightsConfigReconciler(ctx context.Context, rec controller.MulticlusterInsightsConfigReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterInsightsConfigReconciler", varargs...)
}

// AddMulticlusterInsightsConfigReconciler indicates an expected call of AddMulticlusterInsightsConfigReconciler.
func (mr *MockMulticlusterInsightsConfigReconcileLoopMockRecorder) AddMulticlusterInsightsConfigReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterInsightsConfigReconciler", reflect.TypeOf((*MockMulticlusterInsightsConfigReconcileLoop)(nil).AddMulticlusterInsightsConfigReconciler), varargs...)
}
