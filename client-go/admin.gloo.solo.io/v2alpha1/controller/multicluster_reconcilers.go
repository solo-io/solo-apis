// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	admin_gloo_solo_io_v2alpha1 "github.com/solo-io/solo-apis/client-go/admin.gloo.solo.io/v2alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the WaypointLifecycleManager Resource across clusters.
// implemented by the user
type MulticlusterWaypointLifecycleManagerReconciler interface {
	ReconcileWaypointLifecycleManager(clusterName string, obj *admin_gloo_solo_io_v2alpha1.WaypointLifecycleManager) (reconcile.Result, error)
}

// Reconcile deletion events for the WaypointLifecycleManager Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterWaypointLifecycleManagerDeletionReconciler interface {
	ReconcileWaypointLifecycleManagerDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterWaypointLifecycleManagerReconcilerFuncs struct {
	OnReconcileWaypointLifecycleManager         func(clusterName string, obj *admin_gloo_solo_io_v2alpha1.WaypointLifecycleManager) (reconcile.Result, error)
	OnReconcileWaypointLifecycleManagerDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterWaypointLifecycleManagerReconcilerFuncs) ReconcileWaypointLifecycleManager(clusterName string, obj *admin_gloo_solo_io_v2alpha1.WaypointLifecycleManager) (reconcile.Result, error) {
	if f.OnReconcileWaypointLifecycleManager == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileWaypointLifecycleManager(clusterName, obj)
}

func (f *MulticlusterWaypointLifecycleManagerReconcilerFuncs) ReconcileWaypointLifecycleManagerDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileWaypointLifecycleManagerDeletion == nil {
		return nil
	}
	return f.OnReconcileWaypointLifecycleManagerDeletion(clusterName, req)
}

type MulticlusterWaypointLifecycleManagerReconcileLoop interface {
	// AddMulticlusterWaypointLifecycleManagerReconciler adds a MulticlusterWaypointLifecycleManagerReconciler to the MulticlusterWaypointLifecycleManagerReconcileLoop.
	AddMulticlusterWaypointLifecycleManagerReconciler(ctx context.Context, rec MulticlusterWaypointLifecycleManagerReconciler, predicates ...predicate.Predicate)
}

type multiclusterWaypointLifecycleManagerReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterWaypointLifecycleManagerReconcileLoop) AddMulticlusterWaypointLifecycleManagerReconciler(ctx context.Context, rec MulticlusterWaypointLifecycleManagerReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericWaypointLifecycleManagerMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterWaypointLifecycleManagerReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterWaypointLifecycleManagerReconcileLoop {
	return &multiclusterWaypointLifecycleManagerReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &admin_gloo_solo_io_v2alpha1.WaypointLifecycleManager{}, options)}
}

type genericWaypointLifecycleManagerMulticlusterReconciler struct {
	reconciler MulticlusterWaypointLifecycleManagerReconciler
}

func (g genericWaypointLifecycleManagerMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterWaypointLifecycleManagerDeletionReconciler); ok {
		return deletionReconciler.ReconcileWaypointLifecycleManagerDeletion(cluster, req)
	}
	return nil
}

func (g genericWaypointLifecycleManagerMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*admin_gloo_solo_io_v2alpha1.WaypointLifecycleManager)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: WaypointLifecycleManager handler received event for %T", object)
	}
	return g.reconciler.ReconcileWaypointLifecycleManager(cluster, obj)
}

// Reconcile Upsert events for the InsightsConfig Resource across clusters.
// implemented by the user
type MulticlusterInsightsConfigReconciler interface {
	ReconcileInsightsConfig(clusterName string, obj *admin_gloo_solo_io_v2alpha1.InsightsConfig) (reconcile.Result, error)
}

// Reconcile deletion events for the InsightsConfig Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterInsightsConfigDeletionReconciler interface {
	ReconcileInsightsConfigDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterInsightsConfigReconcilerFuncs struct {
	OnReconcileInsightsConfig         func(clusterName string, obj *admin_gloo_solo_io_v2alpha1.InsightsConfig) (reconcile.Result, error)
	OnReconcileInsightsConfigDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterInsightsConfigReconcilerFuncs) ReconcileInsightsConfig(clusterName string, obj *admin_gloo_solo_io_v2alpha1.InsightsConfig) (reconcile.Result, error) {
	if f.OnReconcileInsightsConfig == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileInsightsConfig(clusterName, obj)
}

func (f *MulticlusterInsightsConfigReconcilerFuncs) ReconcileInsightsConfigDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileInsightsConfigDeletion == nil {
		return nil
	}
	return f.OnReconcileInsightsConfigDeletion(clusterName, req)
}

type MulticlusterInsightsConfigReconcileLoop interface {
	// AddMulticlusterInsightsConfigReconciler adds a MulticlusterInsightsConfigReconciler to the MulticlusterInsightsConfigReconcileLoop.
	AddMulticlusterInsightsConfigReconciler(ctx context.Context, rec MulticlusterInsightsConfigReconciler, predicates ...predicate.Predicate)
}

type multiclusterInsightsConfigReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterInsightsConfigReconcileLoop) AddMulticlusterInsightsConfigReconciler(ctx context.Context, rec MulticlusterInsightsConfigReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericInsightsConfigMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterInsightsConfigReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterInsightsConfigReconcileLoop {
	return &multiclusterInsightsConfigReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &admin_gloo_solo_io_v2alpha1.InsightsConfig{}, options)}
}

type genericInsightsConfigMulticlusterReconciler struct {
	reconciler MulticlusterInsightsConfigReconciler
}

func (g genericInsightsConfigMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterInsightsConfigDeletionReconciler); ok {
		return deletionReconciler.ReconcileInsightsConfigDeletion(cluster, req)
	}
	return nil
}

func (g genericInsightsConfigMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*admin_gloo_solo_io_v2alpha1.InsightsConfig)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: InsightsConfig handler received event for %T", object)
	}
	return g.reconciler.ReconcileInsightsConfig(cluster, obj)
}
