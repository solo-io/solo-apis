// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/admin/v2/dashboard.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *DashboardSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DashboardSpec)
	if !ok {
		that2, ok := that.(DashboardSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetAuthn()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAuthn()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAuthn(), target.GetAuthn()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetAuthz()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAuthz()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAuthz(), target.GetAuthz()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *MultiClusterRbac) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*MultiClusterRbac)
	if !ok {
		that2, ok := that.(MultiClusterRbac)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *SessionConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*SessionConfig)
	if !ok {
		that2, ok := that.(SessionConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetCookieOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCookieOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCookieOptions(), target.GetCookieOptions()) {
			return false
		}
	}

	switch m.Backend.(type) {

	case *SessionConfig_Cookie:
		if _, ok := target.Backend.(*SessionConfig_Cookie); !ok {
			return false
		}

		if h, ok := interface{}(m.GetCookie()).(equality.Equalizer); ok {
			if !h.Equal(target.GetCookie()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetCookie(), target.GetCookie()) {
				return false
			}
		}

	case *SessionConfig_Redis:
		if _, ok := target.Backend.(*SessionConfig_Redis); !ok {
			return false
		}

		if h, ok := interface{}(m.GetRedis()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRedis()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRedis(), target.GetRedis()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.Backend != target.Backend {
			return false
		}
	}

	return true
}

// Equal function
func (m *OidcConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*OidcConfig)
	if !ok {
		that2, ok := that.(OidcConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetClientId(), target.GetClientId()) != 0 {
		return false
	}

	if strings.Compare(m.GetClientSecretName(), target.GetClientSecretName()) != 0 {
		return false
	}

	if strings.Compare(m.GetIssuerUrl(), target.GetIssuerUrl()) != 0 {
		return false
	}

	if len(m.GetAuthEndpointQueryParams()) != len(target.GetAuthEndpointQueryParams()) {
		return false
	}
	for k, v := range m.GetAuthEndpointQueryParams() {

		if strings.Compare(v, target.GetAuthEndpointQueryParams()[k]) != 0 {
			return false
		}

	}

	if len(m.GetTokenEndpointQueryParams()) != len(target.GetTokenEndpointQueryParams()) {
		return false
	}
	for k, v := range m.GetTokenEndpointQueryParams() {

		if strings.Compare(v, target.GetTokenEndpointQueryParams()[k]) != 0 {
			return false
		}

	}

	if strings.Compare(m.GetAppUrl(), target.GetAppUrl()) != 0 {
		return false
	}

	if strings.Compare(m.GetCallbackPath(), target.GetCallbackPath()) != 0 {
		return false
	}

	if strings.Compare(m.GetLogoutPath(), target.GetLogoutPath()) != 0 {
		return false
	}

	if len(m.GetScopes()) != len(target.GetScopes()) {
		return false
	}
	for idx, v := range m.GetScopes() {

		if strings.Compare(v, target.GetScopes()[idx]) != 0 {
			return false
		}

	}

	if h, ok := interface{}(m.GetSession()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSession()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSession(), target.GetSession()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetDiscoveryOverride()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDiscoveryOverride()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDiscoveryOverride(), target.GetDiscoveryOverride()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetDiscoveryPollInterval()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDiscoveryPollInterval()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDiscoveryPollInterval(), target.GetDiscoveryPollInterval()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetJwksCacheRefreshPolicy()).(equality.Equalizer); ok {
		if !h.Equal(target.GetJwksCacheRefreshPolicy()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetJwksCacheRefreshPolicy(), target.GetJwksCacheRefreshPolicy()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetUserMapping()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUserMapping()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUserMapping(), target.GetUserMapping()) {
			return false
		}
	}

	if strings.Compare(m.GetCaCertConfigmapName(), target.GetCaCertConfigmapName()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *JwksOnDemandCacheRefreshPolicy) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*JwksOnDemandCacheRefreshPolicy)
	if !ok {
		that2, ok := that.(JwksOnDemandCacheRefreshPolicy)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.Policy.(type) {

	case *JwksOnDemandCacheRefreshPolicy_Never:
		if _, ok := target.Policy.(*JwksOnDemandCacheRefreshPolicy_Never); !ok {
			return false
		}

		if h, ok := interface{}(m.GetNever()).(equality.Equalizer); ok {
			if !h.Equal(target.GetNever()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetNever(), target.GetNever()) {
				return false
			}
		}

	case *JwksOnDemandCacheRefreshPolicy_Always:
		if _, ok := target.Policy.(*JwksOnDemandCacheRefreshPolicy_Always); !ok {
			return false
		}

		if h, ok := interface{}(m.GetAlways()).(equality.Equalizer); ok {
			if !h.Equal(target.GetAlways()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetAlways(), target.GetAlways()) {
				return false
			}
		}

	case *JwksOnDemandCacheRefreshPolicy_MaxIdpReqPerPollingInterval:
		if _, ok := target.Policy.(*JwksOnDemandCacheRefreshPolicy_MaxIdpReqPerPollingInterval); !ok {
			return false
		}

		if m.GetMaxIdpReqPerPollingInterval() != target.GetMaxIdpReqPerPollingInterval() {
			return false
		}

	default:
		// m is nil but target is not nil
		if m.Policy != target.Policy {
			return false
		}
	}

	return true
}

// Equal function
func (m *UserMapping) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UserMapping)
	if !ok {
		that2, ok := that.(UserMapping)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetUsernameClaim(), target.GetUsernameClaim()) != 0 {
		return false
	}

	if strings.Compare(m.GetUsernamePrefix(), target.GetUsernamePrefix()) != 0 {
		return false
	}

	if strings.Compare(m.GetGroupsClaim(), target.GetGroupsClaim()) != 0 {
		return false
	}

	if strings.Compare(m.GetGroupsPrefix(), target.GetGroupsPrefix()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *DashboardStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DashboardStatus)
	if !ok {
		that2, ok := that.(DashboardStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetObservedGeneration() != target.GetObservedGeneration() {
		return false
	}

	if m.GetState() != target.GetState() {
		return false
	}

	if len(m.GetErrors()) != len(target.GetErrors()) {
		return false
	}
	for idx, v := range m.GetErrors() {

		if strings.Compare(v, target.GetErrors()[idx]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *DashboardSpec_AuthnConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DashboardSpec_AuthnConfig)
	if !ok {
		that2, ok := that.(DashboardSpec_AuthnConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.Backend.(type) {

	case *DashboardSpec_AuthnConfig_Oidc:
		if _, ok := target.Backend.(*DashboardSpec_AuthnConfig_Oidc); !ok {
			return false
		}

		if h, ok := interface{}(m.GetOidc()).(equality.Equalizer); ok {
			if !h.Equal(target.GetOidc()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetOidc(), target.GetOidc()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.Backend != target.Backend {
			return false
		}
	}

	return true
}

// Equal function
func (m *DashboardSpec_AuthzConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DashboardSpec_AuthzConfig)
	if !ok {
		that2, ok := that.(DashboardSpec_AuthzConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.Backend.(type) {

	case *DashboardSpec_AuthzConfig_MultiClusterRbac:
		if _, ok := target.Backend.(*DashboardSpec_AuthzConfig_MultiClusterRbac); !ok {
			return false
		}

		if h, ok := interface{}(m.GetMultiClusterRbac()).(equality.Equalizer); ok {
			if !h.Equal(target.GetMultiClusterRbac()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetMultiClusterRbac(), target.GetMultiClusterRbac()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.Backend != target.Backend {
			return false
		}
	}

	return true
}

// Equal function
func (m *SessionConfig_CookieSession) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*SessionConfig_CookieSession)
	if !ok {
		that2, ok := that.(SessionConfig_CookieSession)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *SessionConfig_RedisSession) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*SessionConfig_RedisSession)
	if !ok {
		that2, ok := that.(SessionConfig_RedisSession)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetHost(), target.GetHost()) != 0 {
		return false
	}

	if m.GetDb() != target.GetDb() {
		return false
	}

	if m.GetPoolSize() != target.GetPoolSize() {
		return false
	}

	if strings.Compare(m.GetKeyPrefix(), target.GetKeyPrefix()) != 0 {
		return false
	}

	if strings.Compare(m.GetCookieName(), target.GetCookieName()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetAllowRefreshing()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAllowRefreshing()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAllowRefreshing(), target.GetAllowRefreshing()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *SessionConfig_CookieOptions) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*SessionConfig_CookieOptions)
	if !ok {
		that2, ok := that.(SessionConfig_CookieOptions)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetMaxAge()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxAge()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxAge(), target.GetMaxAge()) {
			return false
		}
	}

	if m.GetNotSecure() != target.GetNotSecure() {
		return false
	}

	if h, ok := interface{}(m.GetPath()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPath()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPath(), target.GetPath()) {
			return false
		}
	}

	if strings.Compare(m.GetDomain(), target.GetDomain()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *OidcConfig_DiscoveryOverride) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*OidcConfig_DiscoveryOverride)
	if !ok {
		that2, ok := that.(OidcConfig_DiscoveryOverride)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetAuthEndpoint(), target.GetAuthEndpoint()) != 0 {
		return false
	}

	if strings.Compare(m.GetTokenEndpoint(), target.GetTokenEndpoint()) != 0 {
		return false
	}

	if strings.Compare(m.GetJwksUri(), target.GetJwksUri()) != 0 {
		return false
	}

	if len(m.GetScopes()) != len(target.GetScopes()) {
		return false
	}
	for idx, v := range m.GetScopes() {

		if strings.Compare(v, target.GetScopes()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetResponseTypes()) != len(target.GetResponseTypes()) {
		return false
	}
	for idx, v := range m.GetResponseTypes() {

		if strings.Compare(v, target.GetResponseTypes()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetSubjects()) != len(target.GetSubjects()) {
		return false
	}
	for idx, v := range m.GetSubjects() {

		if strings.Compare(v, target.GetSubjects()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetIdTokenAlgs()) != len(target.GetIdTokenAlgs()) {
		return false
	}
	for idx, v := range m.GetIdTokenAlgs() {

		if strings.Compare(v, target.GetIdTokenAlgs()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetAuthMethods()) != len(target.GetAuthMethods()) {
		return false
	}
	for idx, v := range m.GetAuthMethods() {

		if strings.Compare(v, target.GetAuthMethods()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetClaims()) != len(target.GetClaims()) {
		return false
	}
	for idx, v := range m.GetClaims() {

		if strings.Compare(v, target.GetClaims()[idx]) != 0 {
			return false
		}

	}

	return true
}
