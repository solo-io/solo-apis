// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/admin/v2/root_trust_policy.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"

	github_com_solo_io_gloo_mesh_solo_apis_client_go_security_policy_gloo_solo_io_v2_tls "github.com/solo-io/solo-apis/client-go/security.policy.gloo.solo.io/v2/tls"

	github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *RootTrustPolicySpec) Clone() proto.Message {
	var target *RootTrustPolicySpec
	if m == nil {
		return target
	}
	target = &RootTrustPolicySpec{}

	if m.GetApplyToMeshes() != nil {
		target.ApplyToMeshes = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.MeshSelector, len(m.GetApplyToMeshes()))
		for idx, v := range m.GetApplyToMeshes() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ApplyToMeshes[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.MeshSelector)
			} else {
				target.ApplyToMeshes[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.MeshSelector)
			}

		}
	}

	if h, ok := interface{}(m.GetConfig()).(clone.Cloner); ok {
		target.Config = h.Clone().(*RootTrustPolicySpec_Config)
	} else {
		target.Config = proto.Clone(m.GetConfig()).(*RootTrustPolicySpec_Config)
	}

	return target
}

// Clone function
func (m *RootTrustPolicyStatus) Clone() proto.Message {
	var target *RootTrustPolicyStatus
	if m == nil {
		return target
	}
	target = &RootTrustPolicyStatus{}

	target.ObservedGeneration = m.GetObservedGeneration()

	target.State = m.GetState()

	return target
}

// Clone function
func (m *RootTrustPolicySpec_Config) Clone() proto.Message {
	var target *RootTrustPolicySpec_Config
	if m == nil {
		return target
	}
	target = &RootTrustPolicySpec_Config{}

	if h, ok := interface{}(m.GetIntermediateCertOptions()).(clone.Cloner); ok {
		target.IntermediateCertOptions = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_security_policy_gloo_solo_io_v2_tls.CommonCertOptions)
	} else {
		target.IntermediateCertOptions = proto.Clone(m.GetIntermediateCertOptions()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_security_policy_gloo_solo_io_v2_tls.CommonCertOptions)
	}

	target.AutoRestartPods = m.GetAutoRestartPods()

	if m.GetPassiveCertificateAuthorities() != nil {
		target.PassiveCertificateAuthorities = make([]*RootTrustPolicySpec_Config_MgmtServerCertificateAuthority, len(m.GetPassiveCertificateAuthorities()))
		for idx, v := range m.GetPassiveCertificateAuthorities() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.PassiveCertificateAuthorities[idx] = h.Clone().(*RootTrustPolicySpec_Config_MgmtServerCertificateAuthority)
			} else {
				target.PassiveCertificateAuthorities[idx] = proto.Clone(v).(*RootTrustPolicySpec_Config_MgmtServerCertificateAuthority)
			}

		}
	}

	switch m.CertificateAuthorityType.(type) {

	case *RootTrustPolicySpec_Config_MgmtServerCa:

		if h, ok := interface{}(m.GetMgmtServerCa()).(clone.Cloner); ok {
			target.CertificateAuthorityType = &RootTrustPolicySpec_Config_MgmtServerCa{
				MgmtServerCa: h.Clone().(*RootTrustPolicySpec_Config_MgmtServerCertificateAuthority),
			}
		} else {
			target.CertificateAuthorityType = &RootTrustPolicySpec_Config_MgmtServerCa{
				MgmtServerCa: proto.Clone(m.GetMgmtServerCa()).(*RootTrustPolicySpec_Config_MgmtServerCertificateAuthority),
			}
		}

	case *RootTrustPolicySpec_Config_AgentCa:

		if h, ok := interface{}(m.GetAgentCa()).(clone.Cloner); ok {
			target.CertificateAuthorityType = &RootTrustPolicySpec_Config_AgentCa{
				AgentCa: h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_security_policy_gloo_solo_io_v2_tls.AgentCertificateAuthority),
			}
		} else {
			target.CertificateAuthorityType = &RootTrustPolicySpec_Config_AgentCa{
				AgentCa: proto.Clone(m.GetAgentCa()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_security_policy_gloo_solo_io_v2_tls.AgentCertificateAuthority),
			}
		}

	}

	return target
}

// Clone function
func (m *RootTrustPolicySpec_Config_MgmtServerCertificateAuthority) Clone() proto.Message {
	var target *RootTrustPolicySpec_Config_MgmtServerCertificateAuthority
	if m == nil {
		return target
	}
	target = &RootTrustPolicySpec_Config_MgmtServerCertificateAuthority{}

	switch m.CaSource.(type) {

	case *RootTrustPolicySpec_Config_MgmtServerCertificateAuthority_Generated:

		if h, ok := interface{}(m.GetGenerated()).(clone.Cloner); ok {
			target.CaSource = &RootTrustPolicySpec_Config_MgmtServerCertificateAuthority_Generated{
				Generated: h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_security_policy_gloo_solo_io_v2_tls.CommonCertOptions),
			}
		} else {
			target.CaSource = &RootTrustPolicySpec_Config_MgmtServerCertificateAuthority_Generated{
				Generated: proto.Clone(m.GetGenerated()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_security_policy_gloo_solo_io_v2_tls.CommonCertOptions),
			}
		}

	case *RootTrustPolicySpec_Config_MgmtServerCertificateAuthority_SecretRef:

		if h, ok := interface{}(m.GetSecretRef()).(clone.Cloner); ok {
			target.CaSource = &RootTrustPolicySpec_Config_MgmtServerCertificateAuthority_SecretRef{
				SecretRef: h.Clone().(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ObjectRef),
			}
		} else {
			target.CaSource = &RootTrustPolicySpec_Config_MgmtServerCertificateAuthority_SecretRef{
				SecretRef: proto.Clone(m.GetSecretRef()).(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ObjectRef),
			}
		}

	}

	return target
}
