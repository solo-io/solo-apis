// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/admin/v2/istio_lifecycle_manager.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *IstioLifecycleManagerSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*IstioLifecycleManagerSpec)
	if !ok {
		that2, ok := that.(IstioLifecycleManagerSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetInstallations()) != len(target.GetInstallations()) {
		return false
	}
	for idx, v := range m.GetInstallations() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetInstallations()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetInstallations()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetHelmGlobal()).(equality.Equalizer); ok {
		if !h.Equal(target.GetHelmGlobal()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetHelmGlobal(), target.GetHelmGlobal()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *IstioClusterSelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*IstioClusterSelector)
	if !ok {
		that2, ok := that.(IstioClusterSelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if m.GetDefaultRevision() != target.GetDefaultRevision() {
		return false
	}

	if strings.Compare(m.GetTrustDomain(), target.GetTrustDomain()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *IstioController) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*IstioController)
	if !ok {
		that2, ok := that.(IstioController)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetWaitForResourcesTimeout(), target.GetWaitForResourcesTimeout()) != 0 {
		return false
	}

	if len(m.GetImagePullSecrets()) != len(target.GetImagePullSecrets()) {
		return false
	}
	for idx, v := range m.GetImagePullSecrets() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetImagePullSecrets()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetImagePullSecrets()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetResources()).(equality.Equalizer); ok {
		if !h.Equal(target.GetResources()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetResources(), target.GetResources()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetSecurityContext()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSecurityContext()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSecurityContext(), target.GetSecurityContext()) {
			return false
		}
	}

	if len(m.GetLabels()) != len(target.GetLabels()) {
		return false
	}
	for k, v := range m.GetLabels() {

		if strings.Compare(v, target.GetLabels()[k]) != 0 {
			return false
		}

	}

	if len(m.GetAnnotations()) != len(target.GetAnnotations()) {
		return false
	}
	for k, v := range m.GetAnnotations() {

		if strings.Compare(v, target.GetAnnotations()[k]) != 0 {
			return false
		}

	}

	if len(m.GetEnvVars()) != len(target.GetEnvVars()) {
		return false
	}
	for idx, v := range m.GetEnvVars() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetEnvVars()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetEnvVars()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *IstioInstallation) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*IstioInstallation)
	if !ok {
		that2, ok := that.(IstioInstallation)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetRevision(), target.GetRevision()) != 0 {
		return false
	}

	if len(m.GetClusters()) != len(target.GetClusters()) {
		return false
	}
	for idx, v := range m.GetClusters() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetClusters()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetClusters()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetIstioOperatorSpec()).(equality.Equalizer); ok {
		if !h.Equal(target.GetIstioOperatorSpec()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetIstioOperatorSpec(), target.GetIstioOperatorSpec()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetIstioController()).(equality.Equalizer); ok {
		if !h.Equal(target.GetIstioController()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetIstioController(), target.GetIstioController()) {
			return false
		}
	}

	if m.GetSkipUpgradeValidation() != target.GetSkipUpgradeValidation() {
		return false
	}

	return true
}

// Equal function
func (m *IstioLifecycleManagerStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*IstioLifecycleManagerStatus)
	if !ok {
		that2, ok := that.(IstioLifecycleManagerStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetClusters()) != len(target.GetClusters()) {
		return false
	}
	for k, v := range m.GetClusters() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetClusters()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetClusters()[k]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *IstioLifecycleManagerNewStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*IstioLifecycleManagerNewStatus)
	if !ok {
		that2, ok := that.(IstioLifecycleManagerNewStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *IstioLifecycleManagerReport) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*IstioLifecycleManagerReport)
	if !ok {
		that2, ok := that.(IstioLifecycleManagerReport)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *IstioLifecycleManagerStatus_ClusterStatuses) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*IstioLifecycleManagerStatus_ClusterStatuses)
	if !ok {
		that2, ok := that.(IstioLifecycleManagerStatus_ClusterStatuses)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetInstallations()) != len(target.GetInstallations()) {
		return false
	}
	for k, v := range m.GetInstallations() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetInstallations()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetInstallations()[k]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *IstioLifecycleManagerStatus_ClusterStatuses_InstallationStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*IstioLifecycleManagerStatus_ClusterStatuses_InstallationStatus)
	if !ok {
		that2, ok := that.(IstioLifecycleManagerStatus_ClusterStatuses_InstallationStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetState() != target.GetState() {
		return false
	}

	if strings.Compare(m.GetMessage(), target.GetMessage()) != 0 {
		return false
	}

	if strings.Compare(m.GetObservedRevision(), target.GetObservedRevision()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetObservedOperator()).(equality.Equalizer); ok {
		if !h.Equal(target.GetObservedOperator()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetObservedOperator(), target.GetObservedOperator()) {
			return false
		}
	}

	return true
}
