// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/policy/v2/extensions/wasm_deployment_policy.proto

package v2

import (
	reflect "reflect"
	sync "sync"

	any1 "github.com/golang/protobuf/ptypes/any"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1alpha3 "istio.io/api/networking/v1alpha3"

	v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// WasmDeploymentPolicy is used to deploy Wasm filters to workloads which have injected (sidecars) or are standalone proxies (gateways).
// WasmDeploymentPolicies are applied at the *Workload* level.
type WasmDeploymentPolicySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// select the workloads where access logs will be collected.
	// if left empty, will apply to all workloads in the workspace.
	ApplyToWorkloads []*v2.WorkloadSelector `protobuf:"bytes,1,rep,name=apply_to_workloads,json=applyToWorkloads,proto3" json:"apply_to_workloads,omitempty"`
	// The configuration of the specifying the WASM filters to apply to the selected workloads.
	Config *WasmDeploymentPolicySpec_Config `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *WasmDeploymentPolicySpec) Reset() {
	*x = WasmDeploymentPolicySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WasmDeploymentPolicySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasmDeploymentPolicySpec) ProtoMessage() {}

func (x *WasmDeploymentPolicySpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasmDeploymentPolicySpec.ProtoReflect.Descriptor instead.
func (*WasmDeploymentPolicySpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_rawDescGZIP(), []int{0}
}

func (x *WasmDeploymentPolicySpec) GetApplyToWorkloads() []*v2.WorkloadSelector {
	if x != nil {
		return x.ApplyToWorkloads
	}
	return nil
}

func (x *WasmDeploymentPolicySpec) GetConfig() *WasmDeploymentPolicySpec_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

// reflects the status of the WasmDeploymentPolicy
type WasmDeploymentPolicyStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *v2.Status `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	// The number of workloads selected by the policy.
	NumSelectedWorkloads uint32 `protobuf:"varint,2,opt,name=num_selected_workloads,json=numSelectedWorkloads,proto3" json:"num_selected_workloads,omitempty"`
}

func (x *WasmDeploymentPolicyStatus) Reset() {
	*x = WasmDeploymentPolicyStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WasmDeploymentPolicyStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasmDeploymentPolicyStatus) ProtoMessage() {}

func (x *WasmDeploymentPolicyStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasmDeploymentPolicyStatus.ProtoReflect.Descriptor instead.
func (*WasmDeploymentPolicyStatus) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_rawDescGZIP(), []int{1}
}

func (x *WasmDeploymentPolicyStatus) GetCommon() *v2.Status {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WasmDeploymentPolicyStatus) GetNumSelectedWorkloads() uint32 {
	if x != nil {
		return x.NumSelectedWorkloads
	}
	return 0
}

type WasmDeploymentPolicyReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workspaces map[string]*v2.Report `protobuf:"bytes,1,rep,name=workspaces,proto3" json:"workspaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A list of workloads selected by the policy.
	SelectedWorkloads []*v2.WorkloadReference `protobuf:"bytes,2,rep,name=selected_workloads,json=selectedWorkloads,proto3" json:"selected_workloads,omitempty"`
}

func (x *WasmDeploymentPolicyReport) Reset() {
	*x = WasmDeploymentPolicyReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WasmDeploymentPolicyReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasmDeploymentPolicyReport) ProtoMessage() {}

func (x *WasmDeploymentPolicyReport) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasmDeploymentPolicyReport.ProtoReflect.Descriptor instead.
func (*WasmDeploymentPolicyReport) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_rawDescGZIP(), []int{2}
}

func (x *WasmDeploymentPolicyReport) GetWorkspaces() map[string]*v2.Report {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

func (x *WasmDeploymentPolicyReport) GetSelectedWorkloads() []*v2.WorkloadReference {
	if x != nil {
		return x.SelectedWorkloads
	}
	return nil
}

type WasmDeploymentPolicySpec_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify WASM filter parameters.
	Filters []*WasmDeploymentPolicySpec_Config_WasmFilter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	// Weight is used to determine the order of WASM Filters when applying
	// multiple WasmDeployments to a single workload.
	// Deployed WASM filters will be sorted in order of
	// highest to lowest weight. WasmDeployments with equal weights will be
	// sorted non-deterministically.
	// Note that all WASM Filters are currently inserted just before the Envoy router filter
	// in the HTTP Connection Manager's HTTP Filter Chain.
	Weight uint32 `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *WasmDeploymentPolicySpec_Config) Reset() {
	*x = WasmDeploymentPolicySpec_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WasmDeploymentPolicySpec_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasmDeploymentPolicySpec_Config) ProtoMessage() {}

func (x *WasmDeploymentPolicySpec_Config) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasmDeploymentPolicySpec_Config.ProtoReflect.Descriptor instead.
func (*WasmDeploymentPolicySpec_Config) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_rawDescGZIP(), []int{0, 0}
}

func (x *WasmDeploymentPolicySpec_Config) GetFilters() []*WasmDeploymentPolicySpec_Config_WasmFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *WasmDeploymentPolicySpec_Config) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// Specify the WASM Filter to deploy.
type WasmDeploymentPolicySpec_Config_WasmFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Several options are available for providing a source of the WASM filter file.
	// An option must be specified in order to execute the WasmDeployment.
	//
	// Types that are assignable to FilterSource:
	//
	//	*WasmDeploymentPolicySpec_Config_WasmFilter_LocalPathSource
	//	*WasmDeploymentPolicySpec_Config_WasmFilter_HttpUriSource
	//	*WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource_
	FilterSource isWasmDeploymentPolicySpec_Config_WasmFilter_FilterSource `protobuf_oneof:"filter_source"`
	// Filter/service configuration used to configure or reconfigure a filter
	// (proxy_on_configuration).
	// Several options are available for providing a source of filter config (dynamic and static).
	//
	// Types that are assignable to FilterConfigSource:
	//
	//	*WasmDeploymentPolicySpec_Config_WasmFilter_StaticFilterConfig
	//	*WasmDeploymentPolicySpec_Config_WasmFilter_DynamicFilterConfig
	FilterConfigSource isWasmDeploymentPolicySpec_Config_WasmFilter_FilterConfigSource `protobuf_oneof:"filter_config_source"`
	// The `root id` must match the `root id` defined inside the filter.
	// If the user does not provide this field, Gloo Mesh will pull the image
	// and set it from the `filter_conf` contained in the image config.
	// Note that if the `filter_source` is not set to `wasm_image_source`, this field is required.
	RootId string `protobuf:"bytes,5,opt,name=root_id,json=rootId,proto3" json:"root_id,omitempty"`
	// An ID which will be used along with a hash of the wasm code
	// (or the name of the registered Null VM plugin) to determine which VM will be used to load the WASM filter.
	// All filters on the same proxy which use the same `vm_id` and code within will use the same VM.
	// May be left blank. Sharing a VM between plugins can reduce memory utilization and make sharing of data easier which may have security implications.
	VmId string `protobuf:"bytes,6,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	// The specific config generation context to which to attach the filter. Istio
	// generates envoy configuration in the context of a gateway,
	// inbound traffic to sidecar and outbound traffic from sidecar.
	// Uses the Istio default (`ANY`).
	FilterContext v1alpha3.EnvoyFilter_PatchContext `protobuf:"varint,7,opt,name=filter_context,json=filterContext,proto3,enum=istio.networking.v1alpha3.EnvoyFilter_PatchContext" json:"filter_context,omitempty"`
	// The filter in the Envoy HTTP Filter Chain immediately before which the WASM filter will be
	// inserted.
	// Defaults to `envoy.router`.
	InsertBeforeFilter string `protobuf:"bytes,9,opt,name=insert_before_filter,json=insertBeforeFilter,proto3" json:"insert_before_filter,omitempty"`
}

func (x *WasmDeploymentPolicySpec_Config_WasmFilter) Reset() {
	*x = WasmDeploymentPolicySpec_Config_WasmFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WasmDeploymentPolicySpec_Config_WasmFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasmDeploymentPolicySpec_Config_WasmFilter) ProtoMessage() {}

func (x *WasmDeploymentPolicySpec_Config_WasmFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasmDeploymentPolicySpec_Config_WasmFilter.ProtoReflect.Descriptor instead.
func (*WasmDeploymentPolicySpec_Config_WasmFilter) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *WasmDeploymentPolicySpec_Config_WasmFilter) GetFilterSource() isWasmDeploymentPolicySpec_Config_WasmFilter_FilterSource {
	if m != nil {
		return m.FilterSource
	}
	return nil
}

func (x *WasmDeploymentPolicySpec_Config_WasmFilter) GetLocalPathSource() string {
	if x, ok := x.GetFilterSource().(*WasmDeploymentPolicySpec_Config_WasmFilter_LocalPathSource); ok {
		return x.LocalPathSource
	}
	return ""
}

func (x *WasmDeploymentPolicySpec_Config_WasmFilter) GetHttpUriSource() *WasmDeploymentPolicySpec_Config_WasmFilter_UriSource {
	if x, ok := x.GetFilterSource().(*WasmDeploymentPolicySpec_Config_WasmFilter_HttpUriSource); ok {
		return x.HttpUriSource
	}
	return nil
}

func (x *WasmDeploymentPolicySpec_Config_WasmFilter) GetWasmImageSource() *WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource {
	if x, ok := x.GetFilterSource().(*WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource_); ok {
		return x.WasmImageSource
	}
	return nil
}

func (m *WasmDeploymentPolicySpec_Config_WasmFilter) GetFilterConfigSource() isWasmDeploymentPolicySpec_Config_WasmFilter_FilterConfigSource {
	if m != nil {
		return m.FilterConfigSource
	}
	return nil
}

func (x *WasmDeploymentPolicySpec_Config_WasmFilter) GetStaticFilterConfig() *any1.Any {
	if x, ok := x.GetFilterConfigSource().(*WasmDeploymentPolicySpec_Config_WasmFilter_StaticFilterConfig); ok {
		return x.StaticFilterConfig
	}
	return nil
}

func (x *WasmDeploymentPolicySpec_Config_WasmFilter) GetDynamicFilterConfig() string {
	if x, ok := x.GetFilterConfigSource().(*WasmDeploymentPolicySpec_Config_WasmFilter_DynamicFilterConfig); ok {
		return x.DynamicFilterConfig
	}
	return ""
}

func (x *WasmDeploymentPolicySpec_Config_WasmFilter) GetRootId() string {
	if x != nil {
		return x.RootId
	}
	return ""
}

func (x *WasmDeploymentPolicySpec_Config_WasmFilter) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *WasmDeploymentPolicySpec_Config_WasmFilter) GetFilterContext() v1alpha3.EnvoyFilter_PatchContext {
	if x != nil {
		return x.FilterContext
	}
	return v1alpha3.EnvoyFilter_ANY
}

func (x *WasmDeploymentPolicySpec_Config_WasmFilter) GetInsertBeforeFilter() string {
	if x != nil {
		return x.InsertBeforeFilter
	}
	return ""
}

type isWasmDeploymentPolicySpec_Config_WasmFilter_FilterSource interface {
	isWasmDeploymentPolicySpec_Config_WasmFilter_FilterSource()
}

type WasmDeploymentPolicySpec_Config_WasmFilter_LocalPathSource struct {
	// Select `local_path_source` to deploy the filter from a file accessible
	// to the workload proxy. Note that Gloo Mesh cannot verify
	// whether the target workload proxy containers contain the given path.
	// If filters do not load, please inspect the sidecar proxy logs.
	// @exclude TODO(ilackarms): see if we can somehow verify the filter exists in the proxy container and surface that on the WasmDeployment status
	LocalPathSource string `protobuf:"bytes,1,opt,name=local_path_source,json=localPathSource,proto3,oneof"`
}

type WasmDeploymentPolicySpec_Config_WasmFilter_HttpUriSource struct {
	// Select `http_uri_source` to deploy the filter from an HTTP/S URI accessible
	// to the workload proxy. Note that Gloo Mesh cannot verify
	// whether the target workload proxy containers have HTTP access the given URI.
	// If filters do not load, please inspect the sidecar proxy logs.
	// @exclude TODO(ilackarms): see if we can somehow verify the filter exists in the proxy container and surface that on the WasmDeployment status
	// @exclude TODO(ilackarms): we may need to provide options for customizing the Cluster given to envoy along with the HTTP Fetch URI. currently Gloo Mesh will create a simple plaintext HTTP cluster from the Host/Port specified in the URI.
	HttpUriSource *WasmDeploymentPolicySpec_Config_WasmFilter_UriSource `protobuf:"bytes,2,opt,name=http_uri_source,json=httpUriSource,proto3,oneof"`
}

type WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource_ struct {
	// fetch the image from a [WASM OCI Registry](https://webassemblyhub.io/)
	// Images can be built and pushed to registries using `meshctl` and `wasme`.
	WasmImageSource *WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource `protobuf:"bytes,3,opt,name=wasm_image_source,json=wasmImageSource,proto3,oneof"`
}

func (*WasmDeploymentPolicySpec_Config_WasmFilter_LocalPathSource) isWasmDeploymentPolicySpec_Config_WasmFilter_FilterSource() {
}

func (*WasmDeploymentPolicySpec_Config_WasmFilter_HttpUriSource) isWasmDeploymentPolicySpec_Config_WasmFilter_FilterSource() {
}

func (*WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource_) isWasmDeploymentPolicySpec_Config_WasmFilter_FilterSource() {
}

type isWasmDeploymentPolicySpec_Config_WasmFilter_FilterConfigSource interface {
	isWasmDeploymentPolicySpec_Config_WasmFilter_FilterConfigSource()
}

type WasmDeploymentPolicySpec_Config_WasmFilter_StaticFilterConfig struct {
	// Provide configuration as a static
	// `google.protobuf.Struct` is serialized as JSON before
	// passing it to the plugin. `google.protobuf.BytesValue` and
	// `google.protobuf.StringValue` are passed directly without the wrapper.
	// For information about the value format, see the [Google protocol buffer documentation](https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/any).
	StaticFilterConfig *any1.Any `protobuf:"bytes,4,opt,name=static_filter_config,json=staticFilterConfig,proto3,oneof"`
}

type WasmDeploymentPolicySpec_Config_WasmFilter_DynamicFilterConfig struct {
	// Provide configuration from a dynamic configuration source.
	// This is used to connect proxies to a user-provided configuration server
	// rather than using the WasmDeployment CR to update filter configuration.
	// NOTE: Not currently implemented. This field serves as a placeholder.
	// passing it to the plugin. `google.protobuf.BytesValue` and
	// `google.protobuf.StringValue` are passed directly without the wrapper.
	// @exclude TODO(ilackarms): implement with dynamic filter config source (FCDS) https://github.com/envoyproxy/envoy/issues/7867
	DynamicFilterConfig string `protobuf:"bytes,8,opt,name=dynamic_filter_config,json=dynamicFilterConfig,proto3,oneof"`
}

func (*WasmDeploymentPolicySpec_Config_WasmFilter_StaticFilterConfig) isWasmDeploymentPolicySpec_Config_WasmFilter_FilterConfigSource() {
}

func (*WasmDeploymentPolicySpec_Config_WasmFilter_DynamicFilterConfig) isWasmDeploymentPolicySpec_Config_WasmFilter_FilterConfigSource() {
}

// Specify options for fetching WASM Filters from an HTTP URI.
type WasmDeploymentPolicySpec_Config_WasmFilter_UriSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The HTTP URI from which to fetch the filter.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// Required. The Sha256 Checksum of the filter binary (will be verified by the proxy).
	Sha string `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
}

func (x *WasmDeploymentPolicySpec_Config_WasmFilter_UriSource) Reset() {
	*x = WasmDeploymentPolicySpec_Config_WasmFilter_UriSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WasmDeploymentPolicySpec_Config_WasmFilter_UriSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasmDeploymentPolicySpec_Config_WasmFilter_UriSource) ProtoMessage() {}

func (x *WasmDeploymentPolicySpec_Config_WasmFilter_UriSource) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasmDeploymentPolicySpec_Config_WasmFilter_UriSource.ProtoReflect.Descriptor instead.
func (*WasmDeploymentPolicySpec_Config_WasmFilter_UriSource) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *WasmDeploymentPolicySpec_Config_WasmFilter_UriSource) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *WasmDeploymentPolicySpec_Config_WasmFilter_UriSource) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

// Specify options for fetching WASM Filters from a [WASM-compatible OCI Registry](https://webassemblyhub.io/).
// Images can be built and pushed to registries using `meshctl` and `wasme`.
type WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full tag of the wasm image. It must include the registry address at the beginning, e.g. "webassemblyhub.io/ilackarms/helloworld:v0.1".
	WasmImageTag string `protobuf:"bytes,1,opt,name=wasm_image_tag,json=wasmImageTag,proto3" json:"wasm_image_tag,omitempty"`
}

func (x *WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource) Reset() {
	*x = WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource) ProtoMessage() {}

func (x *WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource.ProtoReflect.Descriptor instead.
func (*WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource) GetWasmImageTag() string {
	if x != nil {
		return x.WasmImageTag
	}
	return ""
}

var File_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_rawDesc = []byte{
	0x0a, 0x6a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x77, 0x61, 0x73, 0x6d, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x1a, 0x12, 0x65, 0x78,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x53, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d,
	0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c,
	0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x08,
	0x0a, 0x18, 0x57, 0x61, 0x73, 0x6d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x53, 0x0a, 0x12, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12,
	0x57, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x57, 0x61, 0x73, 0x6d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x9d, 0x07, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x64, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x57, 0x61, 0x73, 0x6d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x73, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x1a, 0x94, 0x06, 0x0a, 0x0a, 0x57, 0x61, 0x73, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x7e,
	0x0a, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x57, 0x61, 0x73, 0x6d, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x73, 0x6d, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x55, 0x72, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x0d, 0x68, 0x74, 0x74, 0x70, 0x55, 0x72, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x88,
	0x01, 0x0a, 0x11, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x57, 0x61, 0x73, 0x6d,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x73, 0x6d,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x73, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x77, 0x61, 0x73, 0x6d, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x14, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x01, 0x52,
	0x12, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x45, 0x6e, 0x76, 0x6f,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x2f, 0x0a, 0x09, 0x55, 0x72, 0x69, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x1a, 0x37, 0x0a, 0x0f, 0x57, 0x61, 0x73, 0x6d, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x61, 0x73,
	0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x77, 0x61, 0x73, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x42,
	0x0f, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x16, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x1a, 0x57, 0x61, 0x73,
	0x6d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16,
	0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x75,
	0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x22, 0xbb, 0x02, 0x0a, 0x1a, 0x57, 0x61, 0x73, 0x6d, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x6a, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x57, 0x61, 0x73, 0x6d, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x55, 0x0a,
	0x12, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x1a, 0x5a, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x5f, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68,
	0x2d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2f, 0x76, 0x32, 0xc0, 0xf5, 0x04, 0x01, 0xb8, 0xf5, 0x04, 0x01, 0xd0, 0xf5, 0x04,
	0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_rawDescData = file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_goTypes = []interface{}{
	(*WasmDeploymentPolicySpec)(nil),                                   // 0: extensions.policy.gloo.solo.io.WasmDeploymentPolicySpec
	(*WasmDeploymentPolicyStatus)(nil),                                 // 1: extensions.policy.gloo.solo.io.WasmDeploymentPolicyStatus
	(*WasmDeploymentPolicyReport)(nil),                                 // 2: extensions.policy.gloo.solo.io.WasmDeploymentPolicyReport
	(*WasmDeploymentPolicySpec_Config)(nil),                            // 3: extensions.policy.gloo.solo.io.WasmDeploymentPolicySpec.Config
	(*WasmDeploymentPolicySpec_Config_WasmFilter)(nil),                 // 4: extensions.policy.gloo.solo.io.WasmDeploymentPolicySpec.Config.WasmFilter
	(*WasmDeploymentPolicySpec_Config_WasmFilter_UriSource)(nil),       // 5: extensions.policy.gloo.solo.io.WasmDeploymentPolicySpec.Config.WasmFilter.UriSource
	(*WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource)(nil), // 6: extensions.policy.gloo.solo.io.WasmDeploymentPolicySpec.Config.WasmFilter.WasmImageSource
	nil,                                    // 7: extensions.policy.gloo.solo.io.WasmDeploymentPolicyReport.WorkspacesEntry
	(*v2.WorkloadSelector)(nil),            // 8: common.gloo.solo.io.WorkloadSelector
	(*v2.Status)(nil),                      // 9: common.gloo.solo.io.Status
	(*v2.WorkloadReference)(nil),           // 10: common.gloo.solo.io.WorkloadReference
	(*any1.Any)(nil),                       // 11: google.protobuf.Any
	(v1alpha3.EnvoyFilter_PatchContext)(0), // 12: istio.networking.v1alpha3.EnvoyFilter.PatchContext
	(*v2.Report)(nil),                      // 13: common.gloo.solo.io.Report
}
var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_depIdxs = []int32{
	8,  // 0: extensions.policy.gloo.solo.io.WasmDeploymentPolicySpec.apply_to_workloads:type_name -> common.gloo.solo.io.WorkloadSelector
	3,  // 1: extensions.policy.gloo.solo.io.WasmDeploymentPolicySpec.config:type_name -> extensions.policy.gloo.solo.io.WasmDeploymentPolicySpec.Config
	9,  // 2: extensions.policy.gloo.solo.io.WasmDeploymentPolicyStatus.common:type_name -> common.gloo.solo.io.Status
	7,  // 3: extensions.policy.gloo.solo.io.WasmDeploymentPolicyReport.workspaces:type_name -> extensions.policy.gloo.solo.io.WasmDeploymentPolicyReport.WorkspacesEntry
	10, // 4: extensions.policy.gloo.solo.io.WasmDeploymentPolicyReport.selected_workloads:type_name -> common.gloo.solo.io.WorkloadReference
	4,  // 5: extensions.policy.gloo.solo.io.WasmDeploymentPolicySpec.Config.filters:type_name -> extensions.policy.gloo.solo.io.WasmDeploymentPolicySpec.Config.WasmFilter
	5,  // 6: extensions.policy.gloo.solo.io.WasmDeploymentPolicySpec.Config.WasmFilter.http_uri_source:type_name -> extensions.policy.gloo.solo.io.WasmDeploymentPolicySpec.Config.WasmFilter.UriSource
	6,  // 7: extensions.policy.gloo.solo.io.WasmDeploymentPolicySpec.Config.WasmFilter.wasm_image_source:type_name -> extensions.policy.gloo.solo.io.WasmDeploymentPolicySpec.Config.WasmFilter.WasmImageSource
	11, // 8: extensions.policy.gloo.solo.io.WasmDeploymentPolicySpec.Config.WasmFilter.static_filter_config:type_name -> google.protobuf.Any
	12, // 9: extensions.policy.gloo.solo.io.WasmDeploymentPolicySpec.Config.WasmFilter.filter_context:type_name -> istio.networking.v1alpha3.EnvoyFilter.PatchContext
	13, // 10: extensions.policy.gloo.solo.io.WasmDeploymentPolicyReport.WorkspacesEntry.value:type_name -> common.gloo.solo.io.Report
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_init()
}
func file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_init() {
	if File_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WasmDeploymentPolicySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WasmDeploymentPolicyStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WasmDeploymentPolicyReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WasmDeploymentPolicySpec_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WasmDeploymentPolicySpec_Config_WasmFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WasmDeploymentPolicySpec_Config_WasmFilter_UriSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*WasmDeploymentPolicySpec_Config_WasmFilter_LocalPathSource)(nil),
		(*WasmDeploymentPolicySpec_Config_WasmFilter_HttpUriSource)(nil),
		(*WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource_)(nil),
		(*WasmDeploymentPolicySpec_Config_WasmFilter_StaticFilterConfig)(nil),
		(*WasmDeploymentPolicySpec_Config_WasmFilter_DynamicFilterConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto = out.File
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_extensions_wasm_deployment_policy_proto_depIdxs = nil
}
