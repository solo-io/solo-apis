// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/policy/v2/extensions/wasm_deployment_policy.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_golang_protobuf_ptypes_any "github.com/golang/protobuf/ptypes/any"

	github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *WasmDeploymentPolicySpec) Clone() proto.Message {
	var target *WasmDeploymentPolicySpec
	if m == nil {
		return target
	}
	target = &WasmDeploymentPolicySpec{}

	if m.GetApplyToWorkloads() != nil {
		target.ApplyToWorkloads = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkloadSelector, len(m.GetApplyToWorkloads()))
		for idx, v := range m.GetApplyToWorkloads() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ApplyToWorkloads[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkloadSelector)
			} else {
				target.ApplyToWorkloads[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkloadSelector)
			}

		}
	}

	if h, ok := interface{}(m.GetConfig()).(clone.Cloner); ok {
		target.Config = h.Clone().(*WasmDeploymentPolicySpec_Config)
	} else {
		target.Config = proto.Clone(m.GetConfig()).(*WasmDeploymentPolicySpec_Config)
	}

	return target
}

// Clone function
func (m *WasmDeploymentPolicyStatus) Clone() proto.Message {
	var target *WasmDeploymentPolicyStatus
	if m == nil {
		return target
	}
	target = &WasmDeploymentPolicyStatus{}

	if h, ok := interface{}(m.GetCommon()).(clone.Cloner); ok {
		target.Common = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	} else {
		target.Common = proto.Clone(m.GetCommon()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	}

	target.NumSelectedWorkloads = m.GetNumSelectedWorkloads()

	return target
}

// Clone function
func (m *WasmDeploymentPolicyReport) Clone() proto.Message {
	var target *WasmDeploymentPolicyReport
	if m == nil {
		return target
	}
	target = &WasmDeploymentPolicyReport{}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			}

		}
	}

	if m.GetSelectedWorkloads() != nil {
		target.SelectedWorkloads = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkloadReference, len(m.GetSelectedWorkloads()))
		for idx, v := range m.GetSelectedWorkloads() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SelectedWorkloads[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkloadReference)
			} else {
				target.SelectedWorkloads[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkloadReference)
			}

		}
	}

	return target
}

// Clone function
func (m *WasmDeploymentPolicySpec_Config) Clone() proto.Message {
	var target *WasmDeploymentPolicySpec_Config
	if m == nil {
		return target
	}
	target = &WasmDeploymentPolicySpec_Config{}

	if m.GetFilters() != nil {
		target.Filters = make([]*WasmDeploymentPolicySpec_Config_WasmFilter, len(m.GetFilters()))
		for idx, v := range m.GetFilters() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Filters[idx] = h.Clone().(*WasmDeploymentPolicySpec_Config_WasmFilter)
			} else {
				target.Filters[idx] = proto.Clone(v).(*WasmDeploymentPolicySpec_Config_WasmFilter)
			}

		}
	}

	target.Weight = m.GetWeight()

	return target
}

// Clone function
func (m *WasmDeploymentPolicySpec_Config_WasmFilter) Clone() proto.Message {
	var target *WasmDeploymentPolicySpec_Config_WasmFilter
	if m == nil {
		return target
	}
	target = &WasmDeploymentPolicySpec_Config_WasmFilter{}

	target.RootId = m.GetRootId()

	target.VmId = m.GetVmId()

	target.FilterContext = m.GetFilterContext()

	target.InsertBeforeFilter = m.GetInsertBeforeFilter()

	switch m.FilterSource.(type) {

	case *WasmDeploymentPolicySpec_Config_WasmFilter_LocalPathSource:

		target.FilterSource = &WasmDeploymentPolicySpec_Config_WasmFilter_LocalPathSource{
			LocalPathSource: m.GetLocalPathSource(),
		}

	case *WasmDeploymentPolicySpec_Config_WasmFilter_HttpUriSource:

		if h, ok := interface{}(m.GetHttpUriSource()).(clone.Cloner); ok {
			target.FilterSource = &WasmDeploymentPolicySpec_Config_WasmFilter_HttpUriSource{
				HttpUriSource: h.Clone().(*WasmDeploymentPolicySpec_Config_WasmFilter_UriSource),
			}
		} else {
			target.FilterSource = &WasmDeploymentPolicySpec_Config_WasmFilter_HttpUriSource{
				HttpUriSource: proto.Clone(m.GetHttpUriSource()).(*WasmDeploymentPolicySpec_Config_WasmFilter_UriSource),
			}
		}

	case *WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource_:

		if h, ok := interface{}(m.GetWasmImageSource()).(clone.Cloner); ok {
			target.FilterSource = &WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource_{
				WasmImageSource: h.Clone().(*WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource),
			}
		} else {
			target.FilterSource = &WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource_{
				WasmImageSource: proto.Clone(m.GetWasmImageSource()).(*WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource),
			}
		}

	}

	switch m.FilterConfigSource.(type) {

	case *WasmDeploymentPolicySpec_Config_WasmFilter_StaticFilterConfig:

		if h, ok := interface{}(m.GetStaticFilterConfig()).(clone.Cloner); ok {
			target.FilterConfigSource = &WasmDeploymentPolicySpec_Config_WasmFilter_StaticFilterConfig{
				StaticFilterConfig: h.Clone().(*github_com_golang_protobuf_ptypes_any.Any),
			}
		} else {
			target.FilterConfigSource = &WasmDeploymentPolicySpec_Config_WasmFilter_StaticFilterConfig{
				StaticFilterConfig: proto.Clone(m.GetStaticFilterConfig()).(*github_com_golang_protobuf_ptypes_any.Any),
			}
		}

	case *WasmDeploymentPolicySpec_Config_WasmFilter_DynamicFilterConfig:

		target.FilterConfigSource = &WasmDeploymentPolicySpec_Config_WasmFilter_DynamicFilterConfig{
			DynamicFilterConfig: m.GetDynamicFilterConfig(),
		}

	}

	return target
}

// Clone function
func (m *WasmDeploymentPolicySpec_Config_WasmFilter_UriSource) Clone() proto.Message {
	var target *WasmDeploymentPolicySpec_Config_WasmFilter_UriSource
	if m == nil {
		return target
	}
	target = &WasmDeploymentPolicySpec_Config_WasmFilter_UriSource{}

	target.Uri = m.GetUri()

	target.Sha = m.GetSha()

	return target
}

// Clone function
func (m *WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource) Clone() proto.Message {
	var target *WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource
	if m == nil {
		return target
	}
	target = &WasmDeploymentPolicySpec_Config_WasmFilter_WasmImageSource{}

	target.WasmImageTag = m.GetWasmImageTag()

	return target
}
