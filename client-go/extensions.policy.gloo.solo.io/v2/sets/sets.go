// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v2sets

import (
	extensions_policy_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/extensions.policy.gloo.solo.io/v2"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type WasmDeploymentPolicySet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy) bool) []*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy) bool) []*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy
	// Return the Set as a map of key to resource.
	Map() map[string]*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy
	// Insert a resource into the set.
	Insert(wasmDeploymentPolicy ...*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(wasmDeploymentPolicySet WasmDeploymentPolicySet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(wasmDeploymentPolicy ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(wasmDeploymentPolicy ezkube.ResourceId)
	// Return the union with the provided set
	Union(set WasmDeploymentPolicySet) WasmDeploymentPolicySet
	// Return the difference with the provided set
	Difference(set WasmDeploymentPolicySet) WasmDeploymentPolicySet
	// Return the intersection with the provided set
	Intersection(set WasmDeploymentPolicySet) WasmDeploymentPolicySet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another WasmDeploymentPolicySet
	Delta(newSet WasmDeploymentPolicySet) sksets.ResourceDelta
	// Create a deep copy of the current WasmDeploymentPolicySet
	Clone() WasmDeploymentPolicySet
}

func makeGenericWasmDeploymentPolicySet(wasmDeploymentPolicyList []*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range wasmDeploymentPolicyList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type wasmDeploymentPolicySet struct {
	set sksets.ResourceSet
}

func NewWasmDeploymentPolicySet(wasmDeploymentPolicyList ...*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy) WasmDeploymentPolicySet {
	return &wasmDeploymentPolicySet{set: makeGenericWasmDeploymentPolicySet(wasmDeploymentPolicyList)}
}

func NewWasmDeploymentPolicySetFromList(wasmDeploymentPolicyList *extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicyList) WasmDeploymentPolicySet {
	list := make([]*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy, 0, len(wasmDeploymentPolicyList.Items))
	for idx := range wasmDeploymentPolicyList.Items {
		list = append(list, &wasmDeploymentPolicyList.Items[idx])
	}
	return &wasmDeploymentPolicySet{set: makeGenericWasmDeploymentPolicySet(list)}
}

func (s *wasmDeploymentPolicySet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *wasmDeploymentPolicySet) List(filterResource ...func(*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy) bool) []*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy))
		})
	}

	objs := s.Generic().List(genericFilters...)
	wasmDeploymentPolicyList := make([]*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy, 0, len(objs))
	for _, obj := range objs {
		wasmDeploymentPolicyList = append(wasmDeploymentPolicyList, obj.(*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy))
	}
	return wasmDeploymentPolicyList
}

func (s *wasmDeploymentPolicySet) UnsortedList(filterResource ...func(*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy) bool) []*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy))
		})
	}

	var wasmDeploymentPolicyList []*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		wasmDeploymentPolicyList = append(wasmDeploymentPolicyList, obj.(*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy))
	}
	return wasmDeploymentPolicyList
}

func (s *wasmDeploymentPolicySet) Map() map[string]*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy {
	if s == nil {
		return nil
	}

	newMap := map[string]*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy)
	}
	return newMap
}

func (s *wasmDeploymentPolicySet) Insert(
	wasmDeploymentPolicyList ...*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range wasmDeploymentPolicyList {
		s.Generic().Insert(obj)
	}
}

func (s *wasmDeploymentPolicySet) Has(wasmDeploymentPolicy ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(wasmDeploymentPolicy)
}

func (s *wasmDeploymentPolicySet) Equal(
	wasmDeploymentPolicySet WasmDeploymentPolicySet,
) bool {
	if s == nil {
		return wasmDeploymentPolicySet == nil
	}
	return s.Generic().Equal(wasmDeploymentPolicySet.Generic())
}

func (s *wasmDeploymentPolicySet) Delete(WasmDeploymentPolicy ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(WasmDeploymentPolicy)
}

func (s *wasmDeploymentPolicySet) Union(set WasmDeploymentPolicySet) WasmDeploymentPolicySet {
	if s == nil {
		return set
	}
	return NewWasmDeploymentPolicySet(append(s.List(), set.List()...)...)
}

func (s *wasmDeploymentPolicySet) Difference(set WasmDeploymentPolicySet) WasmDeploymentPolicySet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &wasmDeploymentPolicySet{set: newSet}
}

func (s *wasmDeploymentPolicySet) Intersection(set WasmDeploymentPolicySet) WasmDeploymentPolicySet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var wasmDeploymentPolicyList []*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy
	for _, obj := range newSet.List() {
		wasmDeploymentPolicyList = append(wasmDeploymentPolicyList, obj.(*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy))
	}
	return NewWasmDeploymentPolicySet(wasmDeploymentPolicyList...)
}

func (s *wasmDeploymentPolicySet) Find(id ezkube.ResourceId) (*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find WasmDeploymentPolicy %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy), nil
}

func (s *wasmDeploymentPolicySet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *wasmDeploymentPolicySet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *wasmDeploymentPolicySet) Delta(newSet WasmDeploymentPolicySet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *wasmDeploymentPolicySet) Clone() WasmDeploymentPolicySet {
	if s == nil {
		return nil
	}
	return &wasmDeploymentPolicySet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}
