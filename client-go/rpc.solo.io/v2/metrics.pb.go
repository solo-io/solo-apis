// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: github.com/solo-io/solo-apis/api/rpc.solo.io/v2/metrics.proto

package v2

import (
	context "context"
	reflect "reflect"
	sync "sync"

	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request for metrics aggregated for a network node over time.
type NodeMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of workloads whose metrics should be retrieved.
	// Leave empty to retrieve metrics for all workloads.
	WorkloadIds []string `protobuf:"bytes,1,rep,name=workload_ids,json=workloadIds,proto3" json:"workload_ids,omitempty"`
	// The time which the metrics represent. Defaults to the present time if not specified.
	// For information about the value format, see the [Google protocol buffer documentation](https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/timestamp).
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// The duration over which the metrics are computed, floored to the minute.
	// I.e. metrics are returned for the the time window defined by [`time - window`, `time`].
	// Defaults to 5 minutes.
	// For information about the value format, see the [Google protocol buffer documentation](https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/duration).
	Window *duration.Duration `protobuf:"bytes,3,opt,name=window,proto3" json:"window,omitempty"`
	// The duration for each sample in the range, floored to the minute.
	// I.e. metrics are returned for the the time window defined by [`time - window`, `time`].
	// If omitted, defaults to the value of `window`, which represents a request for a single sample.
	// For information about the value format, see the [Google protocol buffer documentation](https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/duration).
	Step *duration.Duration `protobuf:"bytes,4,opt,name=step,proto3" json:"step,omitempty"`
	// Return Istio metrics, false by default
	IstioMetrics bool `protobuf:"varint,5,opt,name=istio_metrics,json=istioMetrics,proto3" json:"istio_metrics,omitempty"`
	// Return Cilium metrics, false by default
	CiliumMetrics bool `protobuf:"varint,6,opt,name=cilium_metrics,json=ciliumMetrics,proto3" json:"cilium_metrics,omitempty"`
	// Return TCP metrics, false by default
	TcpMetrics bool `protobuf:"varint,7,opt,name=tcp_metrics,json=tcpMetrics,proto3" json:"tcp_metrics,omitempty"`
}

func (x *NodeMetricsRequest) Reset() {
	*x = NodeMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMetricsRequest) ProtoMessage() {}

func (x *NodeMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMetricsRequest.ProtoReflect.Descriptor instead.
func (*NodeMetricsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *NodeMetricsRequest) GetWorkloadIds() []string {
	if x != nil {
		return x.WorkloadIds
	}
	return nil
}

func (x *NodeMetricsRequest) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *NodeMetricsRequest) GetWindow() *duration.Duration {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *NodeMetricsRequest) GetStep() *duration.Duration {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *NodeMetricsRequest) GetIstioMetrics() bool {
	if x != nil {
		return x.IstioMetrics
	}
	return false
}

func (x *NodeMetricsRequest) GetCiliumMetrics() bool {
	if x != nil {
		return x.CiliumMetrics
	}
	return false
}

func (x *NodeMetricsRequest) GetTcpMetrics() bool {
	if x != nil {
		return x.TcpMetrics
	}
	return false
}

// Metrics aggregated for one or more network nodes over time.
type NodeMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metrics for each selected node.
	NodeMetrics []*NodeMetricsResponse_NodeMetrics `protobuf:"bytes,1,rep,name=node_metrics,json=nodeMetrics,proto3" json:"node_metrics,omitempty"`
}

func (x *NodeMetricsResponse) Reset() {
	*x = NodeMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMetricsResponse) ProtoMessage() {}

func (x *NodeMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMetricsResponse.ProtoReflect.Descriptor instead.
func (*NodeMetricsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *NodeMetricsResponse) GetNodeMetrics() []*NodeMetricsResponse_NodeMetrics {
	if x != nil {
		return x.NodeMetrics
	}
	return nil
}

// Request for metrics aggregated for one or more network edges over time.
type EdgeMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Select the edges (i.e. (source, target) workload pairs) whose metrics should be retrieved.
	// Leave empty to retrieve metrics for all edges.
	EdgeSelectors []*EdgeSelector `protobuf:"bytes,1,rep,name=edge_selectors,json=edgeSelectors,proto3" json:"edge_selectors,omitempty"`
	// The time which the metrics represent. Defaults to the present time if not specified.
	// For information about the value format, see the [Google protocol buffer documentation](https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/timestamp).
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// The duration over which the metrics are computed, floored to the minute.
	// I.e. metrics are returned for the the time window defined by [`time - window`, `time`].
	// Defaults to 5 minutes.
	// For information about the value format, see the [Google protocol buffer documentation](https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/duration).
	Window *duration.Duration `protobuf:"bytes,3,opt,name=window,proto3" json:"window,omitempty"`
	// The duration for each sample in the range, floored to the minute.
	// I.e. metrics are returned for the the time window defined by [`time - window`, `time`].
	// Defaults to 2 minutes.
	// For information about the value format, see the [Google protocol buffer documentation](https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/duration).
	Step *duration.Duration `protobuf:"bytes,4,opt,name=step,proto3" json:"step,omitempty"`
	// Return Istio metrics, false by default
	IstioMetrics bool `protobuf:"varint,5,opt,name=istio_metrics,json=istioMetrics,proto3" json:"istio_metrics,omitempty"`
	// Return Cilium metrics, false by default
	CiliumMetrics bool `protobuf:"varint,6,opt,name=cilium_metrics,json=ciliumMetrics,proto3" json:"cilium_metrics,omitempty"`
	// Return TCP metrics, false by default
	TcpMetrics bool `protobuf:"varint,7,opt,name=tcp_metrics,json=tcpMetrics,proto3" json:"tcp_metrics,omitempty"`
}

func (x *EdgeMetricsRequest) Reset() {
	*x = EdgeMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeMetricsRequest) ProtoMessage() {}

func (x *EdgeMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeMetricsRequest.ProtoReflect.Descriptor instead.
func (*EdgeMetricsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *EdgeMetricsRequest) GetEdgeSelectors() []*EdgeSelector {
	if x != nil {
		return x.EdgeSelectors
	}
	return nil
}

func (x *EdgeMetricsRequest) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *EdgeMetricsRequest) GetWindow() *duration.Duration {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *EdgeMetricsRequest) GetStep() *duration.Duration {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *EdgeMetricsRequest) GetIstioMetrics() bool {
	if x != nil {
		return x.IstioMetrics
	}
	return false
}

func (x *EdgeMetricsRequest) GetCiliumMetrics() bool {
	if x != nil {
		return x.CiliumMetrics
	}
	return false
}

func (x *EdgeMetricsRequest) GetTcpMetrics() bool {
	if x != nil {
		return x.TcpMetrics
	}
	return false
}

// Metrics aggregated for a network edge over time.
type EdgeMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metrics over time for a set of network edges.
	EdgeMetrics []*EdgeMetricsResponse_EdgeMetrics `protobuf:"bytes,1,rep,name=edge_metrics,json=edgeMetrics,proto3" json:"edge_metrics,omitempty"`
}

func (x *EdgeMetricsResponse) Reset() {
	*x = EdgeMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeMetricsResponse) ProtoMessage() {}

func (x *EdgeMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeMetricsResponse.ProtoReflect.Descriptor instead.
func (*EdgeMetricsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDescGZIP(), []int{3}
}

func (x *EdgeMetricsResponse) GetEdgeMetrics() []*EdgeMetricsResponse_EdgeMetrics {
	if x != nil {
		return x.EdgeMetrics
	}
	return nil
}

// Select the workloads whose metrics should be retrieved.
// Leave empty to retrieve metrics for all workloads.
type EdgeSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify the source workload. If omitted, retrieve edges targeting this workload and originating from any workload.
	SourceWorkloadId string `protobuf:"bytes,1,opt,name=source_workload_id,json=sourceWorkloadId,proto3" json:"source_workload_id,omitempty"`
	// Specify the target workload. If omitted, retrieve edges originating from this workload and targeting any workload.
	TargetWorkloadId string `protobuf:"bytes,2,opt,name=target_workload_id,json=targetWorkloadId,proto3" json:"target_workload_id,omitempty"`
}

func (x *EdgeSelector) Reset() {
	*x = EdgeSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeSelector) ProtoMessage() {}

func (x *EdgeSelector) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeSelector.ProtoReflect.Descriptor instead.
func (*EdgeSelector) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDescGZIP(), []int{4}
}

func (x *EdgeSelector) GetSourceWorkloadId() string {
	if x != nil {
		return x.SourceWorkloadId
	}
	return ""
}

func (x *EdgeSelector) GetTargetWorkloadId() string {
	if x != nil {
		return x.TargetWorkloadId
	}
	return ""
}

// HTTP Metrics sampled over time.
type HttpMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For information about the value format, see the [Google protocol buffer documentation](https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/timestamp).
	Timestamps []*timestamp.Timestamp `protobuf:"bytes,1,rep,name=timestamps,proto3" json:"timestamps,omitempty"`
	// The number of requests.
	RequestCount []uint64 `protobuf:"varint,2,rep,packed,name=request_count,json=requestCount,proto3" json:"request_count,omitempty"`
	// The number of successful requests.
	SuccessCount []uint64 `protobuf:"varint,3,rep,packed,name=success_count,json=successCount,proto3" json:"success_count,omitempty"`
	// The number of failed requests.
	FailureCount []uint64 `protobuf:"varint,4,rep,packed,name=failure_count,json=failureCount,proto3" json:"failure_count,omitempty"`
	// Percentiles for request latencies, measured in milliseconds.
	RequestLatencies *HttpMetrics_RequestLatencies `protobuf:"bytes,5,opt,name=request_latencies,json=requestLatencies,proto3" json:"request_latencies,omitempty"`
	// Describes the security policy, if any, applied to this network edge.
	Security *HttpMetrics_Security `protobuf:"bytes,6,opt,name=security,proto3" json:"security,omitempty"`
}

func (x *HttpMetrics) Reset() {
	*x = HttpMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpMetrics) ProtoMessage() {}

func (x *HttpMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpMetrics.ProtoReflect.Descriptor instead.
func (*HttpMetrics) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDescGZIP(), []int{5}
}

func (x *HttpMetrics) GetTimestamps() []*timestamp.Timestamp {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *HttpMetrics) GetRequestCount() []uint64 {
	if x != nil {
		return x.RequestCount
	}
	return nil
}

func (x *HttpMetrics) GetSuccessCount() []uint64 {
	if x != nil {
		return x.SuccessCount
	}
	return nil
}

func (x *HttpMetrics) GetFailureCount() []uint64 {
	if x != nil {
		return x.FailureCount
	}
	return nil
}

func (x *HttpMetrics) GetRequestLatencies() *HttpMetrics_RequestLatencies {
	if x != nil {
		return x.RequestLatencies
	}
	return nil
}

func (x *HttpMetrics) GetSecurity() *HttpMetrics_Security {
	if x != nil {
		return x.Security
	}
	return nil
}

type TcpMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For information about the value format, see the [Google protocol buffer documentation](https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/timestamp).
	Timestamps    []*timestamp.Timestamp `protobuf:"bytes,1,rep,name=timestamps,proto3" json:"timestamps,omitempty"`
	BytesSent     []uint64               `protobuf:"varint,2,rep,packed,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	BytesReceived []uint64               `protobuf:"varint,3,rep,packed,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	// Describes the security policy, if any, applied to this network edge.
	Security *TcpMetrics_Security `protobuf:"bytes,4,opt,name=security,proto3" json:"security,omitempty"`
}

func (x *TcpMetrics) Reset() {
	*x = TcpMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpMetrics) ProtoMessage() {}

func (x *TcpMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpMetrics.ProtoReflect.Descriptor instead.
func (*TcpMetrics) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDescGZIP(), []int{6}
}

func (x *TcpMetrics) GetTimestamps() []*timestamp.Timestamp {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *TcpMetrics) GetBytesSent() []uint64 {
	if x != nil {
		return x.BytesSent
	}
	return nil
}

func (x *TcpMetrics) GetBytesReceived() []uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return nil
}

func (x *TcpMetrics) GetSecurity() *TcpMetrics_Security {
	if x != nil {
		return x.Security
	}
	return nil
}

type CiliumMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For information about the value format, see the [Google protocol buffer documentation](https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/timestamp).
	Timestamps        []*timestamp.Timestamp `protobuf:"bytes,1,rep,name=timestamps,proto3" json:"timestamps,omitempty"`
	ForwardedSent     []uint64               `protobuf:"varint,2,rep,packed,name=forwarded_sent,json=forwardedSent,proto3" json:"forwarded_sent,omitempty"`
	ForwardedReceived []uint64               `protobuf:"varint,3,rep,packed,name=forwarded_received,json=forwardedReceived,proto3" json:"forwarded_received,omitempty"`
	PolicyDrops       []uint64               `protobuf:"varint,6,rep,packed,name=policy_drops,json=policyDrops,proto3" json:"policy_drops,omitempty"`
}

func (x *CiliumMetrics) Reset() {
	*x = CiliumMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiliumMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiliumMetrics) ProtoMessage() {}

func (x *CiliumMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiliumMetrics.ProtoReflect.Descriptor instead.
func (*CiliumMetrics) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDescGZIP(), []int{7}
}

func (x *CiliumMetrics) GetTimestamps() []*timestamp.Timestamp {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *CiliumMetrics) GetForwardedSent() []uint64 {
	if x != nil {
		return x.ForwardedSent
	}
	return nil
}

func (x *CiliumMetrics) GetForwardedReceived() []uint64 {
	if x != nil {
		return x.ForwardedReceived
	}
	return nil
}

func (x *CiliumMetrics) GetPolicyDrops() []uint64 {
	if x != nil {
		return x.PolicyDrops
	}
	return nil
}

// Metrics for single node.
type NodeMetricsResponse_NodeMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for the workload associated with the metrics.
	WorkloadId string `protobuf:"bytes,1,opt,name=workload_id,json=workloadId,proto3" json:"workload_id,omitempty"`
	// HTTP Metrics over time for all requests originating from a single workload.
	OutgoingMetrics *HttpMetrics `protobuf:"bytes,2,opt,name=outgoing_metrics,json=outgoingMetrics,proto3" json:"outgoing_metrics,omitempty"`
	// HTTP Metrics over time for all requests targeting a single workload.
	IncomingMetrics *HttpMetrics   `protobuf:"bytes,3,opt,name=incoming_metrics,json=incomingMetrics,proto3" json:"incoming_metrics,omitempty"`
	TcpMetrics      *TcpMetrics    `protobuf:"bytes,4,opt,name=tcp_metrics,json=tcpMetrics,proto3" json:"tcp_metrics,omitempty"`
	CiliumMetrics   *CiliumMetrics `protobuf:"bytes,5,opt,name=cilium_metrics,json=ciliumMetrics,proto3" json:"cilium_metrics,omitempty"`
	// Counts of active ejections for outgoing requests originating from this service.
	// Sidecars must be annotated to record outlier detection in order to populate this data.
	// The key of each k/v pair is a combination of the service/namespace/owner that the ejections are tied to.
	// Due to system limitations, we cannot differentiate between workloads of the ejected service.
	// For example, we could say that the reviews service has ejections, but we wouldn't know if it's
	// Caused by reviews-v1, reviews-v2, or both.
	// This is not included in the metrics struct because it is not temporal - active ejections either exist,
	// or they aren't active anymore. Also this data is node-only.
	ActiveEjectionCounts map[string]int32 `protobuf:"bytes,6,rep,name=active_ejection_counts,json=activeEjectionCounts,proto3" json:"active_ejection_counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *NodeMetricsResponse_NodeMetrics) Reset() {
	*x = NodeMetricsResponse_NodeMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMetricsResponse_NodeMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMetricsResponse_NodeMetrics) ProtoMessage() {}

func (x *NodeMetricsResponse_NodeMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMetricsResponse_NodeMetrics.ProtoReflect.Descriptor instead.
func (*NodeMetricsResponse_NodeMetrics) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDescGZIP(), []int{1, 0}
}

func (x *NodeMetricsResponse_NodeMetrics) GetWorkloadId() string {
	if x != nil {
		return x.WorkloadId
	}
	return ""
}

func (x *NodeMetricsResponse_NodeMetrics) GetOutgoingMetrics() *HttpMetrics {
	if x != nil {
		return x.OutgoingMetrics
	}
	return nil
}

func (x *NodeMetricsResponse_NodeMetrics) GetIncomingMetrics() *HttpMetrics {
	if x != nil {
		return x.IncomingMetrics
	}
	return nil
}

func (x *NodeMetricsResponse_NodeMetrics) GetTcpMetrics() *TcpMetrics {
	if x != nil {
		return x.TcpMetrics
	}
	return nil
}

func (x *NodeMetricsResponse_NodeMetrics) GetCiliumMetrics() *CiliumMetrics {
	if x != nil {
		return x.CiliumMetrics
	}
	return nil
}

func (x *NodeMetricsResponse_NodeMetrics) GetActiveEjectionCounts() map[string]int32 {
	if x != nil {
		return x.ActiveEjectionCounts
	}
	return nil
}

// Metrics over time for a single network edge.
type EdgeMetricsResponse_EdgeMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for the source workload.
	SourceWorkloadId string `protobuf:"bytes,1,opt,name=source_workload_id,json=sourceWorkloadId,proto3" json:"source_workload_id,omitempty"`
	// Identifier for the target workload.
	TargetWorkloadId string `protobuf:"bytes,2,opt,name=target_workload_id,json=targetWorkloadId,proto3" json:"target_workload_id,omitempty"`
	// HTTP Metrics over time for a network edge with a single source and target.
	HttpMetrics *HttpMetrics `protobuf:"bytes,3,opt,name=http_metrics,json=httpMetrics,proto3" json:"http_metrics,omitempty"`
	// TCP Metrics over time for a network edge with a single source and target
	TcpMetrics *TcpMetrics `protobuf:"bytes,4,opt,name=tcp_metrics,json=tcpMetrics,proto3" json:"tcp_metrics,omitempty"`
	// Cilium Metrics over time for a network edge with a single source and target
	CiliumMetrics *CiliumMetrics `protobuf:"bytes,5,opt,name=cilium_metrics,json=ciliumMetrics,proto3" json:"cilium_metrics,omitempty"`
}

func (x *EdgeMetricsResponse_EdgeMetrics) Reset() {
	*x = EdgeMetricsResponse_EdgeMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeMetricsResponse_EdgeMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeMetricsResponse_EdgeMetrics) ProtoMessage() {}

func (x *EdgeMetricsResponse_EdgeMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeMetricsResponse_EdgeMetrics.ProtoReflect.Descriptor instead.
func (*EdgeMetricsResponse_EdgeMetrics) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDescGZIP(), []int{3, 0}
}

func (x *EdgeMetricsResponse_EdgeMetrics) GetSourceWorkloadId() string {
	if x != nil {
		return x.SourceWorkloadId
	}
	return ""
}

func (x *EdgeMetricsResponse_EdgeMetrics) GetTargetWorkloadId() string {
	if x != nil {
		return x.TargetWorkloadId
	}
	return ""
}

func (x *EdgeMetricsResponse_EdgeMetrics) GetHttpMetrics() *HttpMetrics {
	if x != nil {
		return x.HttpMetrics
	}
	return nil
}

func (x *EdgeMetricsResponse_EdgeMetrics) GetTcpMetrics() *TcpMetrics {
	if x != nil {
		return x.TcpMetrics
	}
	return nil
}

func (x *EdgeMetricsResponse_EdgeMetrics) GetCiliumMetrics() *CiliumMetrics {
	if x != nil {
		return x.CiliumMetrics
	}
	return nil
}

// Percentiles for request latencies, measured in milliseconds.
type HttpMetrics_RequestLatencies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 99th percentile request latency.
	P99 []uint64 `protobuf:"varint,1,rep,packed,name=p99,proto3" json:"p99,omitempty"`
	// 90th percentile request latency.
	P90 []uint64 `protobuf:"varint,2,rep,packed,name=p90,proto3" json:"p90,omitempty"`
	// 50th percentile request latency.
	P50 []uint64 `protobuf:"varint,3,rep,packed,name=p50,proto3" json:"p50,omitempty"`
}

func (x *HttpMetrics_RequestLatencies) Reset() {
	*x = HttpMetrics_RequestLatencies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpMetrics_RequestLatencies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpMetrics_RequestLatencies) ProtoMessage() {}

func (x *HttpMetrics_RequestLatencies) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpMetrics_RequestLatencies.ProtoReflect.Descriptor instead.
func (*HttpMetrics_RequestLatencies) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDescGZIP(), []int{5, 0}
}

func (x *HttpMetrics_RequestLatencies) GetP99() []uint64 {
	if x != nil {
		return x.P99
	}
	return nil
}

func (x *HttpMetrics_RequestLatencies) GetP90() []uint64 {
	if x != nil {
		return x.P90
	}
	return nil
}

func (x *HttpMetrics_RequestLatencies) GetP50() []uint64 {
	if x != nil {
		return x.P50
	}
	return nil
}

// Describes the security policy, if any, applied to this network edge.
type HttpMetrics_Security struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes the security policy of the connection.
	SecurityPolicy string `protobuf:"bytes,1,opt,name=security_policy,json=securityPolicy,proto3" json:"security_policy,omitempty"`
	// The identity of the source workload, only populated if mTLS is enabled."
	SourcePrincipal string `protobuf:"bytes,2,opt,name=source_principal,json=sourcePrincipal,proto3" json:"source_principal,omitempty"`
	// The identity of the destination, only populated if mTLS is enabled.
	DestinationPrincipal string `protobuf:"bytes,3,opt,name=destination_principal,json=destinationPrincipal,proto3" json:"destination_principal,omitempty"`
}

func (x *HttpMetrics_Security) Reset() {
	*x = HttpMetrics_Security{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpMetrics_Security) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpMetrics_Security) ProtoMessage() {}

func (x *HttpMetrics_Security) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpMetrics_Security.ProtoReflect.Descriptor instead.
func (*HttpMetrics_Security) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDescGZIP(), []int{5, 1}
}

func (x *HttpMetrics_Security) GetSecurityPolicy() string {
	if x != nil {
		return x.SecurityPolicy
	}
	return ""
}

func (x *HttpMetrics_Security) GetSourcePrincipal() string {
	if x != nil {
		return x.SourcePrincipal
	}
	return ""
}

func (x *HttpMetrics_Security) GetDestinationPrincipal() string {
	if x != nil {
		return x.DestinationPrincipal
	}
	return ""
}

// Describes the security policy, if any, applied to this network edge.
type TcpMetrics_Security struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes the security policy of the connection.
	SecurityPolicy string `protobuf:"bytes,1,opt,name=security_policy,json=securityPolicy,proto3" json:"security_policy,omitempty"`
	// The identity of the source workload, only populated if mTLS is enabled."
	SourcePrincipal string `protobuf:"bytes,2,opt,name=source_principal,json=sourcePrincipal,proto3" json:"source_principal,omitempty"`
	// The identity of the destination, only populated if mTLS is enabled.
	DestinationPrincipal string `protobuf:"bytes,3,opt,name=destination_principal,json=destinationPrincipal,proto3" json:"destination_principal,omitempty"`
}

func (x *TcpMetrics_Security) Reset() {
	*x = TcpMetrics_Security{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpMetrics_Security) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpMetrics_Security) ProtoMessage() {}

func (x *TcpMetrics_Security) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpMetrics_Security.ProtoReflect.Descriptor instead.
func (*TcpMetrics_Security) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDescGZIP(), []int{6, 0}
}

func (x *TcpMetrics_Security) GetSecurityPolicy() string {
	if x != nil {
		return x.SecurityPolicy
	}
	return ""
}

func (x *TcpMetrics_Security) GetSourcePrincipal() string {
	if x != nil {
		return x.SourcePrincipal
	}
	return ""
}

func (x *TcpMetrics_Security) GetDestinationPrincipal() string {
	if x != nil {
		return x.DestinationPrincipal
	}
	return ""
}

var File_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDesc = []byte{
	0x0a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x70,
	0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x72, 0x70, 0x63, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x02, 0x0a, 0x12, 0x4e, 0x6f, 0x64, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x73,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x74, 0x69, 0x6f,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x69, 0x6c, 0x69, 0x75,
	0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x63, 0x69, 0x6c, 0x69, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x63, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x63, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22,
	0xe5, 0x04, 0x0a, 0x13, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x6e, 0x6f, 0x64,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0xfc, 0x03, 0x0a, 0x0b, 0x4e, 0x6f, 0x64,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x10, 0x6f, 0x75, 0x74,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x6f,
	0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x43,
	0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x74, 0x63, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x63, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x0a, 0x74, 0x63, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x41, 0x0a,
	0x0e, 0x63, 0x69, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x69, 0x6c, 0x69, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x0d, 0x63, 0x69, 0x6c, 0x69, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x7c, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x47,
	0x0a, 0x19, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd5, 0x02, 0x0a, 0x12, 0x45, 0x64, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x0e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0d, 0x65, 0x64, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x74, 0x69, 0x6f,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x69, 0x6c, 0x69, 0x75,
	0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x63, 0x69, 0x6c, 0x69, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x63, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x63, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22,
	0x8c, 0x03, 0x0a, 0x13, 0x45, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x65, 0x64, 0x67, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x45, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x65, 0x64, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0xa3, 0x02, 0x0a, 0x0b, 0x45, 0x64, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x74, 0x63, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x63, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x0a, 0x74, 0x63, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x63,
	0x69, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x43, 0x69, 0x6c, 0x69, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x0d, 0x63, 0x69, 0x6c, 0x69, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x6a,
	0x0a, 0x0c, 0x45, 0x64, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x22, 0xaf, 0x04, 0x0a, 0x0b, 0x48,
	0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x10, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x48, 0x0a, 0x10,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x39, 0x39, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x70,
	0x39, 0x39, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x39, 0x30, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x03, 0x70, 0x39, 0x30, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x35, 0x30, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x03, 0x70, 0x35, 0x30, 0x1a, 0x93, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x22, 0xe2, 0x02, 0x0a,
	0x0a, 0x54, 0x63, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3c, 0x0a,
	0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x63,
	0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x93, 0x01, 0x0a, 0x08,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x15,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x22, 0xc4, 0x01, 0x0a, 0x0d, 0x43, 0x69, 0x6c, 0x69, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x32, 0x8f, 0x02, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x7e, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x7e, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x45, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f,
	0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x70,
	0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDescData = file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_goTypes = []interface{}{
	(*NodeMetricsRequest)(nil),              // 0: rpc.solo.io.NodeMetricsRequest
	(*NodeMetricsResponse)(nil),             // 1: rpc.solo.io.NodeMetricsResponse
	(*EdgeMetricsRequest)(nil),              // 2: rpc.solo.io.EdgeMetricsRequest
	(*EdgeMetricsResponse)(nil),             // 3: rpc.solo.io.EdgeMetricsResponse
	(*EdgeSelector)(nil),                    // 4: rpc.solo.io.EdgeSelector
	(*HttpMetrics)(nil),                     // 5: rpc.solo.io.HttpMetrics
	(*TcpMetrics)(nil),                      // 6: rpc.solo.io.TcpMetrics
	(*CiliumMetrics)(nil),                   // 7: rpc.solo.io.CiliumMetrics
	(*NodeMetricsResponse_NodeMetrics)(nil), // 8: rpc.solo.io.NodeMetricsResponse.NodeMetrics
	nil,                                     // 9: rpc.solo.io.NodeMetricsResponse.NodeMetrics.ActiveEjectionCountsEntry
	(*EdgeMetricsResponse_EdgeMetrics)(nil), // 10: rpc.solo.io.EdgeMetricsResponse.EdgeMetrics
	(*HttpMetrics_RequestLatencies)(nil),    // 11: rpc.solo.io.HttpMetrics.RequestLatencies
	(*HttpMetrics_Security)(nil),            // 12: rpc.solo.io.HttpMetrics.Security
	(*TcpMetrics_Security)(nil),             // 13: rpc.solo.io.TcpMetrics.Security
	(*timestamp.Timestamp)(nil),             // 14: google.protobuf.Timestamp
	(*duration.Duration)(nil),               // 15: google.protobuf.Duration
}
var file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_depIdxs = []int32{
	14, // 0: rpc.solo.io.NodeMetricsRequest.time:type_name -> google.protobuf.Timestamp
	15, // 1: rpc.solo.io.NodeMetricsRequest.window:type_name -> google.protobuf.Duration
	15, // 2: rpc.solo.io.NodeMetricsRequest.step:type_name -> google.protobuf.Duration
	8,  // 3: rpc.solo.io.NodeMetricsResponse.node_metrics:type_name -> rpc.solo.io.NodeMetricsResponse.NodeMetrics
	4,  // 4: rpc.solo.io.EdgeMetricsRequest.edge_selectors:type_name -> rpc.solo.io.EdgeSelector
	14, // 5: rpc.solo.io.EdgeMetricsRequest.time:type_name -> google.protobuf.Timestamp
	15, // 6: rpc.solo.io.EdgeMetricsRequest.window:type_name -> google.protobuf.Duration
	15, // 7: rpc.solo.io.EdgeMetricsRequest.step:type_name -> google.protobuf.Duration
	10, // 8: rpc.solo.io.EdgeMetricsResponse.edge_metrics:type_name -> rpc.solo.io.EdgeMetricsResponse.EdgeMetrics
	14, // 9: rpc.solo.io.HttpMetrics.timestamps:type_name -> google.protobuf.Timestamp
	11, // 10: rpc.solo.io.HttpMetrics.request_latencies:type_name -> rpc.solo.io.HttpMetrics.RequestLatencies
	12, // 11: rpc.solo.io.HttpMetrics.security:type_name -> rpc.solo.io.HttpMetrics.Security
	14, // 12: rpc.solo.io.TcpMetrics.timestamps:type_name -> google.protobuf.Timestamp
	13, // 13: rpc.solo.io.TcpMetrics.security:type_name -> rpc.solo.io.TcpMetrics.Security
	14, // 14: rpc.solo.io.CiliumMetrics.timestamps:type_name -> google.protobuf.Timestamp
	5,  // 15: rpc.solo.io.NodeMetricsResponse.NodeMetrics.outgoing_metrics:type_name -> rpc.solo.io.HttpMetrics
	5,  // 16: rpc.solo.io.NodeMetricsResponse.NodeMetrics.incoming_metrics:type_name -> rpc.solo.io.HttpMetrics
	6,  // 17: rpc.solo.io.NodeMetricsResponse.NodeMetrics.tcp_metrics:type_name -> rpc.solo.io.TcpMetrics
	7,  // 18: rpc.solo.io.NodeMetricsResponse.NodeMetrics.cilium_metrics:type_name -> rpc.solo.io.CiliumMetrics
	9,  // 19: rpc.solo.io.NodeMetricsResponse.NodeMetrics.active_ejection_counts:type_name -> rpc.solo.io.NodeMetricsResponse.NodeMetrics.ActiveEjectionCountsEntry
	5,  // 20: rpc.solo.io.EdgeMetricsResponse.EdgeMetrics.http_metrics:type_name -> rpc.solo.io.HttpMetrics
	6,  // 21: rpc.solo.io.EdgeMetricsResponse.EdgeMetrics.tcp_metrics:type_name -> rpc.solo.io.TcpMetrics
	7,  // 22: rpc.solo.io.EdgeMetricsResponse.EdgeMetrics.cilium_metrics:type_name -> rpc.solo.io.CiliumMetrics
	0,  // 23: rpc.solo.io.MetricsSource.GetNodeMetrics:input_type -> rpc.solo.io.NodeMetricsRequest
	2,  // 24: rpc.solo.io.MetricsSource.GetEdgeMetrics:input_type -> rpc.solo.io.EdgeMetricsRequest
	1,  // 25: rpc.solo.io.MetricsSource.GetNodeMetrics:output_type -> rpc.solo.io.NodeMetricsResponse
	3,  // 26: rpc.solo.io.MetricsSource.GetEdgeMetrics:output_type -> rpc.solo.io.EdgeMetricsResponse
	25, // [25:27] is the sub-list for method output_type
	23, // [23:25] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_init() }
func file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_init() {
	if File_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiliumMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeMetricsResponse_NodeMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeMetricsResponse_EdgeMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpMetrics_RequestLatencies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpMetrics_Security); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpMetrics_Security); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto = out.File
	file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_metrics_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MetricsSourceClient is the client API for MetricsSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetricsSourceClient interface {
	GetNodeMetrics(ctx context.Context, in *NodeMetricsRequest, opts ...grpc.CallOption) (*NodeMetricsResponse, error)
	GetEdgeMetrics(ctx context.Context, in *EdgeMetricsRequest, opts ...grpc.CallOption) (*EdgeMetricsResponse, error)
}

type metricsSourceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsSourceClient(cc grpc.ClientConnInterface) MetricsSourceClient {
	return &metricsSourceClient{cc}
}

func (c *metricsSourceClient) GetNodeMetrics(ctx context.Context, in *NodeMetricsRequest, opts ...grpc.CallOption) (*NodeMetricsResponse, error) {
	out := new(NodeMetricsResponse)
	err := c.cc.Invoke(ctx, "/rpc.solo.io.MetricsSource/GetNodeMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsSourceClient) GetEdgeMetrics(ctx context.Context, in *EdgeMetricsRequest, opts ...grpc.CallOption) (*EdgeMetricsResponse, error) {
	out := new(EdgeMetricsResponse)
	err := c.cc.Invoke(ctx, "/rpc.solo.io.MetricsSource/GetEdgeMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsSourceServer is the server API for MetricsSource service.
type MetricsSourceServer interface {
	GetNodeMetrics(context.Context, *NodeMetricsRequest) (*NodeMetricsResponse, error)
	GetEdgeMetrics(context.Context, *EdgeMetricsRequest) (*EdgeMetricsResponse, error)
}

// UnimplementedMetricsSourceServer can be embedded to have forward compatible implementations.
type UnimplementedMetricsSourceServer struct {
}

func (*UnimplementedMetricsSourceServer) GetNodeMetrics(context.Context, *NodeMetricsRequest) (*NodeMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeMetrics not implemented")
}
func (*UnimplementedMetricsSourceServer) GetEdgeMetrics(context.Context, *EdgeMetricsRequest) (*EdgeMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEdgeMetrics not implemented")
}

func RegisterMetricsSourceServer(s *grpc.Server, srv MetricsSourceServer) {
	s.RegisterService(&_MetricsSource_serviceDesc, srv)
}

func _MetricsSource_GetNodeMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsSourceServer).GetNodeMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.solo.io.MetricsSource/GetNodeMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsSourceServer).GetNodeMetrics(ctx, req.(*NodeMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsSource_GetEdgeMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsSourceServer).GetEdgeMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.solo.io.MetricsSource/GetEdgeMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsSourceServer).GetEdgeMetrics(ctx, req.(*EdgeMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetricsSource_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.solo.io.MetricsSource",
	HandlerType: (*MetricsSourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeMetrics",
			Handler:    _MetricsSource_GetNodeMetrics_Handler,
		},
		{
			MethodName: "GetEdgeMetrics",
			Handler:    _MetricsSource_GetEdgeMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/solo-io/solo-apis/api/rpc.solo.io/v2/metrics.proto",
}
