// The logging service provides structured retrieval of event logs captured by Gloo Platform. For more information, see the [access logging documentation]({{< link path="/observability/dataplane/service-mesh/access-logs/" >}}).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: github.com/solo-io/solo-apis/api/rpc.solo.io/v2/access_logging.proto

package v2

import (
	context "context"
	reflect "reflect"
	sync "sync"

	v3 "github.com/envoyproxy/go-control-plane/envoy/data/accesslog/v3"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"

	v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Stream Envoy access logs as they are captured.
type WatchAccessLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workloads for which to stream access logs.
	// Leave empty to stream access logs for all workloads.
	WorkloadSelectors []*v2.ObjectSelector `protobuf:"bytes,1,rep,name=workload_selectors,json=workloadSelectors,proto3" json:"workload_selectors,omitempty"`
}

func (x *WatchAccessLogsRequest) Reset() {
	*x = WatchAccessLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchAccessLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchAccessLogsRequest) ProtoMessage() {}

func (x *WatchAccessLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchAccessLogsRequest.ProtoReflect.Descriptor instead.
func (*WatchAccessLogsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_rawDescGZIP(), []int{0}
}

func (x *WatchAccessLogsRequest) GetWorkloadSelectors() []*v2.ObjectSelector {
	if x != nil {
		return x.WorkloadSelectors
	}
	return nil
}

// Retrieve Envoy access logs for a workload.
type GetAccessLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workloads from which to get access logs.
	// Leave empty to get access logs for all workloads.
	WorkloadSelectors []*v2.ObjectSelector `protobuf:"bytes,1,rep,name=workload_selectors,json=workloadSelectors,proto3" json:"workload_selectors,omitempty"`
	// Maximum number of access logs to get. If empty, the default value of 20 is used.
	// For information about the value format, see the [Google protocol buffer documentation](https://protobuf.dev/reference/protobuf/google.protobuf/#u-int32-value).
	RetrievalNumber *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=retrieval_number,json=retrievalNumber,proto3" json:"retrieval_number,omitempty"`
}

func (x *GetAccessLogsRequest) Reset() {
	*x = GetAccessLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccessLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessLogsRequest) ProtoMessage() {}

func (x *GetAccessLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessLogsRequest.ProtoReflect.Descriptor instead.
func (*GetAccessLogsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_rawDescGZIP(), []int{1}
}

func (x *GetAccessLogsRequest) GetWorkloadSelectors() []*v2.ObjectSelector {
	if x != nil {
		return x.WorkloadSelectors
	}
	return nil
}

func (x *GetAccessLogsRequest) GetRetrievalNumber() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RetrievalNumber
	}
	return nil
}

// Envoy access logs to collect.
type AccessLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata for the workload for which to record access logs.
	WorkloadMetadata *AccessLog_WorkloadMetadata `protobuf:"bytes,1,opt,name=workload_metadata,json=workloadMetadata,proto3" json:"workload_metadata,omitempty"`
	// An Envoy HTTP access log. For more information, see the
	// [Envoy API reference documentation](https://www.envoyproxy.io/docs/envoy/latest/api-v3/data/accesslog/v3/accesslog.proto#data-accesslog-v3-httpaccesslogentry).
	HttpAccessLog *v3.HTTPAccessLogEntry `protobuf:"bytes,2,opt,name=http_access_log,json=httpAccessLog,proto3" json:"http_access_log,omitempty"`
}

func (x *AccessLog) Reset() {
	*x = AccessLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog) ProtoMessage() {}

func (x *AccessLog) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog.ProtoReflect.Descriptor instead.
func (*AccessLog) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_rawDescGZIP(), []int{2}
}

func (x *AccessLog) GetWorkloadMetadata() *AccessLog_WorkloadMetadata {
	if x != nil {
		return x.WorkloadMetadata
	}
	return nil
}

func (x *AccessLog) GetHttpAccessLog() *v3.HTTPAccessLogEntry {
	if x != nil {
		return x.HttpAccessLog
	}
	return nil
}

// Envoy access logs to collect.
type AccessLogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An Envoy access log. For more information, see the [Envoy API reference documentation](https://www.envoyproxy.io/docs/envoy/latest/api-v3/data/accesslog/v3/accesslog.proto).
	AccessLogs []*AccessLog `protobuf:"bytes,1,rep,name=access_logs,json=accessLogs,proto3" json:"access_logs,omitempty"`
}

func (x *AccessLogs) Reset() {
	*x = AccessLogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessLogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLogs) ProtoMessage() {}

func (x *AccessLogs) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLogs.ProtoReflect.Descriptor instead.
func (*AccessLogs) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_rawDescGZIP(), []int{3}
}

func (x *AccessLogs) GetAccessLogs() []*AccessLog {
	if x != nil {
		return x.AccessLogs
	}
	return nil
}

// Metadata for the workload for which to record access logs.
type AccessLog_WorkloadMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workload name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace that the workload is in.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Cluster that the workload is in.
	Cluster string `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Labels for the workload.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AccessLog_WorkloadMetadata) Reset() {
	*x = AccessLog_WorkloadMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessLog_WorkloadMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_WorkloadMetadata) ProtoMessage() {}

func (x *AccessLog_WorkloadMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_WorkloadMetadata.ProtoReflect.Descriptor instead.
func (*AccessLog_WorkloadMetadata) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_rawDescGZIP(), []int{2, 0}
}

func (x *AccessLog_WorkloadMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccessLog_WorkloadMetadata) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *AccessLog_WorkloadMetadata) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *AccessLog_WorkloadMetadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

var File_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_rawDesc = []byte{
	0x0a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x70,
	0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0b, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x1a, 0x4c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2d, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x52, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f,
	0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32,
	0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6c,
	0x0a, 0x16, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xb3, 0x01, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x9f, 0x03, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x12, 0x54, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x67, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x68, 0x74,
	0x74, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x1a, 0xe6, 0x01, 0x0a, 0x10,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x45, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x32, 0xac, 0x01, 0x0a, 0x07,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x0f, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x23, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4d, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x21, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0x00, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f,
	0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x70,
	0x63, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_rawDescData = file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_goTypes = []interface{}{
	(*WatchAccessLogsRequest)(nil),     // 0: rpc.solo.io.WatchAccessLogsRequest
	(*GetAccessLogsRequest)(nil),       // 1: rpc.solo.io.GetAccessLogsRequest
	(*AccessLog)(nil),                  // 2: rpc.solo.io.AccessLog
	(*AccessLogs)(nil),                 // 3: rpc.solo.io.AccessLogs
	(*AccessLog_WorkloadMetadata)(nil), // 4: rpc.solo.io.AccessLog.WorkloadMetadata
	nil,                                // 5: rpc.solo.io.AccessLog.WorkloadMetadata.LabelsEntry
	(*v2.ObjectSelector)(nil),          // 6: common.gloo.solo.io.ObjectSelector
	(*wrapperspb.UInt32Value)(nil),     // 7: google.protobuf.UInt32Value
	(*v3.HTTPAccessLogEntry)(nil),      // 8: envoy.data.accesslog.v3.HTTPAccessLogEntry
}
var file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_depIdxs = []int32{
	6, // 0: rpc.solo.io.WatchAccessLogsRequest.workload_selectors:type_name -> common.gloo.solo.io.ObjectSelector
	6, // 1: rpc.solo.io.GetAccessLogsRequest.workload_selectors:type_name -> common.gloo.solo.io.ObjectSelector
	7, // 2: rpc.solo.io.GetAccessLogsRequest.retrieval_number:type_name -> google.protobuf.UInt32Value
	4, // 3: rpc.solo.io.AccessLog.workload_metadata:type_name -> rpc.solo.io.AccessLog.WorkloadMetadata
	8, // 4: rpc.solo.io.AccessLog.http_access_log:type_name -> envoy.data.accesslog.v3.HTTPAccessLogEntry
	2, // 5: rpc.solo.io.AccessLogs.access_logs:type_name -> rpc.solo.io.AccessLog
	5, // 6: rpc.solo.io.AccessLog.WorkloadMetadata.labels:type_name -> rpc.solo.io.AccessLog.WorkloadMetadata.LabelsEntry
	0, // 7: rpc.solo.io.Logging.WatchAccessLogs:input_type -> rpc.solo.io.WatchAccessLogsRequest
	1, // 8: rpc.solo.io.Logging.GetAccessLogs:input_type -> rpc.solo.io.GetAccessLogsRequest
	2, // 9: rpc.solo.io.Logging.WatchAccessLogs:output_type -> rpc.solo.io.AccessLog
	3, // 10: rpc.solo.io.Logging.GetAccessLogs:output_type -> rpc.solo.io.AccessLogs
	9, // [9:11] is the sub-list for method output_type
	7, // [7:9] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_init()
}
func file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_init() {
	if File_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAccessLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccessLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessLogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessLog_WorkloadMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto = out.File
	file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_solo_apis_api_rpc_solo_io_v2_access_logging_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LoggingClient is the client API for Logging service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoggingClient interface {
	// Stream Envoy access logs as they are captured.
	WatchAccessLogs(ctx context.Context, in *WatchAccessLogsRequest, opts ...grpc.CallOption) (Logging_WatchAccessLogsClient, error)
	// Retrieve Envoy access logs for a workload.
	GetAccessLogs(ctx context.Context, in *GetAccessLogsRequest, opts ...grpc.CallOption) (*AccessLogs, error)
}

type loggingClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggingClient(cc grpc.ClientConnInterface) LoggingClient {
	return &loggingClient{cc}
}

func (c *loggingClient) WatchAccessLogs(ctx context.Context, in *WatchAccessLogsRequest, opts ...grpc.CallOption) (Logging_WatchAccessLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Logging_serviceDesc.Streams[0], "/rpc.solo.io.Logging/WatchAccessLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &loggingWatchAccessLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Logging_WatchAccessLogsClient interface {
	Recv() (*AccessLog, error)
	grpc.ClientStream
}

type loggingWatchAccessLogsClient struct {
	grpc.ClientStream
}

func (x *loggingWatchAccessLogsClient) Recv() (*AccessLog, error) {
	m := new(AccessLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *loggingClient) GetAccessLogs(ctx context.Context, in *GetAccessLogsRequest, opts ...grpc.CallOption) (*AccessLogs, error) {
	out := new(AccessLogs)
	err := c.cc.Invoke(ctx, "/rpc.solo.io.Logging/GetAccessLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggingServer is the server API for Logging service.
type LoggingServer interface {
	// Stream Envoy access logs as they are captured.
	WatchAccessLogs(*WatchAccessLogsRequest, Logging_WatchAccessLogsServer) error
	// Retrieve Envoy access logs for a workload.
	GetAccessLogs(context.Context, *GetAccessLogsRequest) (*AccessLogs, error)
}

// UnimplementedLoggingServer can be embedded to have forward compatible implementations.
type UnimplementedLoggingServer struct {
}

func (*UnimplementedLoggingServer) WatchAccessLogs(*WatchAccessLogsRequest, Logging_WatchAccessLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchAccessLogs not implemented")
}
func (*UnimplementedLoggingServer) GetAccessLogs(context.Context, *GetAccessLogsRequest) (*AccessLogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessLogs not implemented")
}

func RegisterLoggingServer(s *grpc.Server, srv LoggingServer) {
	s.RegisterService(&_Logging_serviceDesc, srv)
}

func _Logging_WatchAccessLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchAccessLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LoggingServer).WatchAccessLogs(m, &loggingWatchAccessLogsServer{stream})
}

type Logging_WatchAccessLogsServer interface {
	Send(*AccessLog) error
	grpc.ServerStream
}

type loggingWatchAccessLogsServer struct {
	grpc.ServerStream
}

func (x *loggingWatchAccessLogsServer) Send(m *AccessLog) error {
	return x.ServerStream.SendMsg(m)
}

func _Logging_GetAccessLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggingServer).GetAccessLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.solo.io.Logging/GetAccessLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggingServer).GetAccessLogs(ctx, req.(*GetAccessLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logging_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.solo.io.Logging",
	HandlerType: (*LoggingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccessLogs",
			Handler:    _Logging_GetAccessLogs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchAccessLogs",
			Handler:       _Logging_WatchAccessLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/solo-io/solo-apis/api/rpc.solo.io/v2/access_logging.proto",
}
