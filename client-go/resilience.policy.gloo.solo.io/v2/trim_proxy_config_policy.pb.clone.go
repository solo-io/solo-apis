// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/policy/v2/resilience/trim_proxy_config_policy.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *TrimProxyConfigPolicySpec) Clone() proto.Message {
	var target *TrimProxyConfigPolicySpec
	if m == nil {
		return target
	}
	target = &TrimProxyConfigPolicySpec{}

	if m.GetApplyToWorkloads() != nil {
		target.ApplyToWorkloads = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkloadSelector, len(m.GetApplyToWorkloads()))
		for idx, v := range m.GetApplyToWorkloads() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ApplyToWorkloads[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkloadSelector)
			} else {
				target.ApplyToWorkloads[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkloadSelector)
			}

		}
	}

	if h, ok := interface{}(m.GetConfig()).(clone.Cloner); ok {
		target.Config = h.Clone().(*TrimProxyConfigPolicySpec_Config)
	} else {
		target.Config = proto.Clone(m.GetConfig()).(*TrimProxyConfigPolicySpec_Config)
	}

	return target
}

// Clone function
func (m *TrimProxyConfigPolicyStatus) Clone() proto.Message {
	var target *TrimProxyConfigPolicyStatus
	if m == nil {
		return target
	}
	target = &TrimProxyConfigPolicyStatus{}

	if h, ok := interface{}(m.GetCommon()).(clone.Cloner); ok {
		target.Common = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	} else {
		target.Common = proto.Clone(m.GetCommon()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	}

	target.NumSelectedWorkloads = m.GetNumSelectedWorkloads()

	target.NumIncludedHosts = m.GetNumIncludedHosts()

	return target
}

// Clone function
func (m *TrimProxyConfigPolicyReport) Clone() proto.Message {
	var target *TrimProxyConfigPolicyReport
	if m == nil {
		return target
	}
	target = &TrimProxyConfigPolicyReport{}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			}

		}
	}

	if m.GetSelectedWorkloads() != nil {
		target.SelectedWorkloads = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkloadReference, len(m.GetSelectedWorkloads()))
		for idx, v := range m.GetSelectedWorkloads() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SelectedWorkloads[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkloadReference)
			} else {
				target.SelectedWorkloads[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkloadReference)
			}

		}
	}

	if m.GetIncludedHosts() != nil {
		target.IncludedHosts = make([]string, len(m.GetIncludedHosts()))
		for idx, v := range m.GetIncludedHosts() {

			target.IncludedHosts[idx] = v

		}
	}

	return target
}

// Clone function
func (m *TrimProxyConfigPolicySpec_Config) Clone() proto.Message {
	var target *TrimProxyConfigPolicySpec_Config
	if m == nil {
		return target
	}
	target = &TrimProxyConfigPolicySpec_Config{}

	if m.GetIncludedDestinations() != nil {
		target.IncludedDestinations = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.DestinationSelector, len(m.GetIncludedDestinations()))
		for idx, v := range m.GetIncludedDestinations() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.IncludedDestinations[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.DestinationSelector)
			} else {
				target.IncludedDestinations[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.DestinationSelector)
			}

		}
	}

	return target
}
