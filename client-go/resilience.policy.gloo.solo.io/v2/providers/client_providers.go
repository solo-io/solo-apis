// Code generated by skv2. DO NOT EDIT.

package v2

import (
	resilience_policy_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/resilience.policy.gloo.solo.io/v2"

	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

/*
  The intention of these providers are to be used for Mocking.
  They expose the Clients as interfaces, as well as factories to provide mocked versions
  of the clients when they require building within a component.

  See package `github.com/solo-io/skv2/pkg/multicluster/register` for example
*/

// Provider for GraphQLPersistedQueryCachePolicyClient from Clientset
func GraphQLPersistedQueryCachePolicyClientFromClientsetProvider(clients resilience_policy_gloo_solo_io_v2.Clientset) resilience_policy_gloo_solo_io_v2.GraphQLPersistedQueryCachePolicyClient {
	return clients.GraphQLPersistedQueryCachePolicies()
}

// Provider for GraphQLPersistedQueryCachePolicy Client from Client
func GraphQLPersistedQueryCachePolicyClientProvider(client client.Client) resilience_policy_gloo_solo_io_v2.GraphQLPersistedQueryCachePolicyClient {
	return resilience_policy_gloo_solo_io_v2.NewGraphQLPersistedQueryCachePolicyClient(client)
}

type GraphQLPersistedQueryCachePolicyClientFactory func(client client.Client) resilience_policy_gloo_solo_io_v2.GraphQLPersistedQueryCachePolicyClient

func GraphQLPersistedQueryCachePolicyClientFactoryProvider() GraphQLPersistedQueryCachePolicyClientFactory {
	return GraphQLPersistedQueryCachePolicyClientProvider
}

type GraphQLPersistedQueryCachePolicyClientFromConfigFactory func(cfg *rest.Config) (resilience_policy_gloo_solo_io_v2.GraphQLPersistedQueryCachePolicyClient, error)

func GraphQLPersistedQueryCachePolicyClientFromConfigFactoryProvider() GraphQLPersistedQueryCachePolicyClientFromConfigFactory {
	return func(cfg *rest.Config) (resilience_policy_gloo_solo_io_v2.GraphQLPersistedQueryCachePolicyClient, error) {
		clients, err := resilience_policy_gloo_solo_io_v2.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.GraphQLPersistedQueryCachePolicies(), nil
	}
}

// Provider for FailoverPolicyClient from Clientset
func FailoverPolicyClientFromClientsetProvider(clients resilience_policy_gloo_solo_io_v2.Clientset) resilience_policy_gloo_solo_io_v2.FailoverPolicyClient {
	return clients.FailoverPolicies()
}

// Provider for FailoverPolicy Client from Client
func FailoverPolicyClientProvider(client client.Client) resilience_policy_gloo_solo_io_v2.FailoverPolicyClient {
	return resilience_policy_gloo_solo_io_v2.NewFailoverPolicyClient(client)
}

type FailoverPolicyClientFactory func(client client.Client) resilience_policy_gloo_solo_io_v2.FailoverPolicyClient

func FailoverPolicyClientFactoryProvider() FailoverPolicyClientFactory {
	return FailoverPolicyClientProvider
}

type FailoverPolicyClientFromConfigFactory func(cfg *rest.Config) (resilience_policy_gloo_solo_io_v2.FailoverPolicyClient, error)

func FailoverPolicyClientFromConfigFactoryProvider() FailoverPolicyClientFromConfigFactory {
	return func(cfg *rest.Config) (resilience_policy_gloo_solo_io_v2.FailoverPolicyClient, error) {
		clients, err := resilience_policy_gloo_solo_io_v2.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.FailoverPolicies(), nil
	}
}

// Provider for OutlierDetectionPolicyClient from Clientset
func OutlierDetectionPolicyClientFromClientsetProvider(clients resilience_policy_gloo_solo_io_v2.Clientset) resilience_policy_gloo_solo_io_v2.OutlierDetectionPolicyClient {
	return clients.OutlierDetectionPolicies()
}

// Provider for OutlierDetectionPolicy Client from Client
func OutlierDetectionPolicyClientProvider(client client.Client) resilience_policy_gloo_solo_io_v2.OutlierDetectionPolicyClient {
	return resilience_policy_gloo_solo_io_v2.NewOutlierDetectionPolicyClient(client)
}

type OutlierDetectionPolicyClientFactory func(client client.Client) resilience_policy_gloo_solo_io_v2.OutlierDetectionPolicyClient

func OutlierDetectionPolicyClientFactoryProvider() OutlierDetectionPolicyClientFactory {
	return OutlierDetectionPolicyClientProvider
}

type OutlierDetectionPolicyClientFromConfigFactory func(cfg *rest.Config) (resilience_policy_gloo_solo_io_v2.OutlierDetectionPolicyClient, error)

func OutlierDetectionPolicyClientFromConfigFactoryProvider() OutlierDetectionPolicyClientFromConfigFactory {
	return func(cfg *rest.Config) (resilience_policy_gloo_solo_io_v2.OutlierDetectionPolicyClient, error) {
		clients, err := resilience_policy_gloo_solo_io_v2.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.OutlierDetectionPolicies(), nil
	}
}

// Provider for AdaptiveRequestConcurrencyPolicyClient from Clientset
func AdaptiveRequestConcurrencyPolicyClientFromClientsetProvider(clients resilience_policy_gloo_solo_io_v2.Clientset) resilience_policy_gloo_solo_io_v2.AdaptiveRequestConcurrencyPolicyClient {
	return clients.AdaptiveRequestConcurrencyPolicies()
}

// Provider for AdaptiveRequestConcurrencyPolicy Client from Client
func AdaptiveRequestConcurrencyPolicyClientProvider(client client.Client) resilience_policy_gloo_solo_io_v2.AdaptiveRequestConcurrencyPolicyClient {
	return resilience_policy_gloo_solo_io_v2.NewAdaptiveRequestConcurrencyPolicyClient(client)
}

type AdaptiveRequestConcurrencyPolicyClientFactory func(client client.Client) resilience_policy_gloo_solo_io_v2.AdaptiveRequestConcurrencyPolicyClient

func AdaptiveRequestConcurrencyPolicyClientFactoryProvider() AdaptiveRequestConcurrencyPolicyClientFactory {
	return AdaptiveRequestConcurrencyPolicyClientProvider
}

type AdaptiveRequestConcurrencyPolicyClientFromConfigFactory func(cfg *rest.Config) (resilience_policy_gloo_solo_io_v2.AdaptiveRequestConcurrencyPolicyClient, error)

func AdaptiveRequestConcurrencyPolicyClientFromConfigFactoryProvider() AdaptiveRequestConcurrencyPolicyClientFromConfigFactory {
	return func(cfg *rest.Config) (resilience_policy_gloo_solo_io_v2.AdaptiveRequestConcurrencyPolicyClient, error) {
		clients, err := resilience_policy_gloo_solo_io_v2.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.AdaptiveRequestConcurrencyPolicies(), nil
	}
}

// Provider for FaultInjectionPolicyClient from Clientset
func FaultInjectionPolicyClientFromClientsetProvider(clients resilience_policy_gloo_solo_io_v2.Clientset) resilience_policy_gloo_solo_io_v2.FaultInjectionPolicyClient {
	return clients.FaultInjectionPolicies()
}

// Provider for FaultInjectionPolicy Client from Client
func FaultInjectionPolicyClientProvider(client client.Client) resilience_policy_gloo_solo_io_v2.FaultInjectionPolicyClient {
	return resilience_policy_gloo_solo_io_v2.NewFaultInjectionPolicyClient(client)
}

type FaultInjectionPolicyClientFactory func(client client.Client) resilience_policy_gloo_solo_io_v2.FaultInjectionPolicyClient

func FaultInjectionPolicyClientFactoryProvider() FaultInjectionPolicyClientFactory {
	return FaultInjectionPolicyClientProvider
}

type FaultInjectionPolicyClientFromConfigFactory func(cfg *rest.Config) (resilience_policy_gloo_solo_io_v2.FaultInjectionPolicyClient, error)

func FaultInjectionPolicyClientFromConfigFactoryProvider() FaultInjectionPolicyClientFromConfigFactory {
	return func(cfg *rest.Config) (resilience_policy_gloo_solo_io_v2.FaultInjectionPolicyClient, error) {
		clients, err := resilience_policy_gloo_solo_io_v2.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.FaultInjectionPolicies(), nil
	}
}

// Provider for RetryTimeoutPolicyClient from Clientset
func RetryTimeoutPolicyClientFromClientsetProvider(clients resilience_policy_gloo_solo_io_v2.Clientset) resilience_policy_gloo_solo_io_v2.RetryTimeoutPolicyClient {
	return clients.RetryTimeoutPolicies()
}

// Provider for RetryTimeoutPolicy Client from Client
func RetryTimeoutPolicyClientProvider(client client.Client) resilience_policy_gloo_solo_io_v2.RetryTimeoutPolicyClient {
	return resilience_policy_gloo_solo_io_v2.NewRetryTimeoutPolicyClient(client)
}

type RetryTimeoutPolicyClientFactory func(client client.Client) resilience_policy_gloo_solo_io_v2.RetryTimeoutPolicyClient

func RetryTimeoutPolicyClientFactoryProvider() RetryTimeoutPolicyClientFactory {
	return RetryTimeoutPolicyClientProvider
}

type RetryTimeoutPolicyClientFromConfigFactory func(cfg *rest.Config) (resilience_policy_gloo_solo_io_v2.RetryTimeoutPolicyClient, error)

func RetryTimeoutPolicyClientFromConfigFactoryProvider() RetryTimeoutPolicyClientFromConfigFactory {
	return func(cfg *rest.Config) (resilience_policy_gloo_solo_io_v2.RetryTimeoutPolicyClient, error) {
		clients, err := resilience_policy_gloo_solo_io_v2.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.RetryTimeoutPolicies(), nil
	}
}

// Provider for ConnectionPolicyClient from Clientset
func ConnectionPolicyClientFromClientsetProvider(clients resilience_policy_gloo_solo_io_v2.Clientset) resilience_policy_gloo_solo_io_v2.ConnectionPolicyClient {
	return clients.ConnectionPolicies()
}

// Provider for ConnectionPolicy Client from Client
func ConnectionPolicyClientProvider(client client.Client) resilience_policy_gloo_solo_io_v2.ConnectionPolicyClient {
	return resilience_policy_gloo_solo_io_v2.NewConnectionPolicyClient(client)
}

type ConnectionPolicyClientFactory func(client client.Client) resilience_policy_gloo_solo_io_v2.ConnectionPolicyClient

func ConnectionPolicyClientFactoryProvider() ConnectionPolicyClientFactory {
	return ConnectionPolicyClientProvider
}

type ConnectionPolicyClientFromConfigFactory func(cfg *rest.Config) (resilience_policy_gloo_solo_io_v2.ConnectionPolicyClient, error)

func ConnectionPolicyClientFromConfigFactoryProvider() ConnectionPolicyClientFromConfigFactory {
	return func(cfg *rest.Config) (resilience_policy_gloo_solo_io_v2.ConnectionPolicyClient, error) {
		clients, err := resilience_policy_gloo_solo_io_v2.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.ConnectionPolicies(), nil
	}
}

// Provider for TrimProxyConfigPolicyClient from Clientset
func TrimProxyConfigPolicyClientFromClientsetProvider(clients resilience_policy_gloo_solo_io_v2.Clientset) resilience_policy_gloo_solo_io_v2.TrimProxyConfigPolicyClient {
	return clients.TrimProxyConfigPolicies()
}

// Provider for TrimProxyConfigPolicy Client from Client
func TrimProxyConfigPolicyClientProvider(client client.Client) resilience_policy_gloo_solo_io_v2.TrimProxyConfigPolicyClient {
	return resilience_policy_gloo_solo_io_v2.NewTrimProxyConfigPolicyClient(client)
}

type TrimProxyConfigPolicyClientFactory func(client client.Client) resilience_policy_gloo_solo_io_v2.TrimProxyConfigPolicyClient

func TrimProxyConfigPolicyClientFactoryProvider() TrimProxyConfigPolicyClientFactory {
	return TrimProxyConfigPolicyClientProvider
}

type TrimProxyConfigPolicyClientFromConfigFactory func(cfg *rest.Config) (resilience_policy_gloo_solo_io_v2.TrimProxyConfigPolicyClient, error)

func TrimProxyConfigPolicyClientFromConfigFactoryProvider() TrimProxyConfigPolicyClientFromConfigFactory {
	return func(cfg *rest.Config) (resilience_policy_gloo_solo_io_v2.TrimProxyConfigPolicyClient, error) {
		clients, err := resilience_policy_gloo_solo_io_v2.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.TrimProxyConfigPolicies(), nil
	}
}

// Provider for ActiveHealthCheckPolicyClient from Clientset
func ActiveHealthCheckPolicyClientFromClientsetProvider(clients resilience_policy_gloo_solo_io_v2.Clientset) resilience_policy_gloo_solo_io_v2.ActiveHealthCheckPolicyClient {
	return clients.ActiveHealthCheckPolicies()
}

// Provider for ActiveHealthCheckPolicy Client from Client
func ActiveHealthCheckPolicyClientProvider(client client.Client) resilience_policy_gloo_solo_io_v2.ActiveHealthCheckPolicyClient {
	return resilience_policy_gloo_solo_io_v2.NewActiveHealthCheckPolicyClient(client)
}

type ActiveHealthCheckPolicyClientFactory func(client client.Client) resilience_policy_gloo_solo_io_v2.ActiveHealthCheckPolicyClient

func ActiveHealthCheckPolicyClientFactoryProvider() ActiveHealthCheckPolicyClientFactory {
	return ActiveHealthCheckPolicyClientProvider
}

type ActiveHealthCheckPolicyClientFromConfigFactory func(cfg *rest.Config) (resilience_policy_gloo_solo_io_v2.ActiveHealthCheckPolicyClient, error)

func ActiveHealthCheckPolicyClientFromConfigFactoryProvider() ActiveHealthCheckPolicyClientFromConfigFactory {
	return func(cfg *rest.Config) (resilience_policy_gloo_solo_io_v2.ActiveHealthCheckPolicyClient, error) {
		clients, err := resilience_policy_gloo_solo_io_v2.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.ActiveHealthCheckPolicies(), nil
	}
}

// Provider for ListenerConnectionPolicyClient from Clientset
func ListenerConnectionPolicyClientFromClientsetProvider(clients resilience_policy_gloo_solo_io_v2.Clientset) resilience_policy_gloo_solo_io_v2.ListenerConnectionPolicyClient {
	return clients.ListenerConnectionPolicies()
}

// Provider for ListenerConnectionPolicy Client from Client
func ListenerConnectionPolicyClientProvider(client client.Client) resilience_policy_gloo_solo_io_v2.ListenerConnectionPolicyClient {
	return resilience_policy_gloo_solo_io_v2.NewListenerConnectionPolicyClient(client)
}

type ListenerConnectionPolicyClientFactory func(client client.Client) resilience_policy_gloo_solo_io_v2.ListenerConnectionPolicyClient

func ListenerConnectionPolicyClientFactoryProvider() ListenerConnectionPolicyClientFactory {
	return ListenerConnectionPolicyClientProvider
}

type ListenerConnectionPolicyClientFromConfigFactory func(cfg *rest.Config) (resilience_policy_gloo_solo_io_v2.ListenerConnectionPolicyClient, error)

func ListenerConnectionPolicyClientFromConfigFactoryProvider() ListenerConnectionPolicyClientFromConfigFactory {
	return func(cfg *rest.Config) (resilience_policy_gloo_solo_io_v2.ListenerConnectionPolicyClient, error) {
		clients, err := resilience_policy_gloo_solo_io_v2.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.ListenerConnectionPolicies(), nil
	}
}
