// Code generated by MockGen. DO NOT EDIT.
// Source: ./sets.go

// Package mock_v2sets is a generated GoMock package.
package mock_v2sets

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sets "github.com/solo-io/skv2/contrib/pkg/sets"
	ezkube "github.com/solo-io/skv2/pkg/ezkube"
	sets0 "k8s.io/apimachinery/pkg/util/sets"

	v2 "github.com/solo-io/solo-apis/client-go/resilience.policy.gloo.solo.io/v2"
	v2sets "github.com/solo-io/solo-apis/client-go/resilience.policy.gloo.solo.io/v2/sets"
)

// MockGraphQLPersistedQueryCachePolicySet is a mock of GraphQLPersistedQueryCachePolicySet interface.
type MockGraphQLPersistedQueryCachePolicySet struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLPersistedQueryCachePolicySetMockRecorder
}

// MockGraphQLPersistedQueryCachePolicySetMockRecorder is the mock recorder for MockGraphQLPersistedQueryCachePolicySet.
type MockGraphQLPersistedQueryCachePolicySetMockRecorder struct {
	mock *MockGraphQLPersistedQueryCachePolicySet
}

// NewMockGraphQLPersistedQueryCachePolicySet creates a new mock instance.
func NewMockGraphQLPersistedQueryCachePolicySet(ctrl *gomock.Controller) *MockGraphQLPersistedQueryCachePolicySet {
	mock := &MockGraphQLPersistedQueryCachePolicySet{ctrl: ctrl}
	mock.recorder = &MockGraphQLPersistedQueryCachePolicySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLPersistedQueryCachePolicySet) EXPECT() *MockGraphQLPersistedQueryCachePolicySetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicySet) Clone() v2sets.GraphQLPersistedQueryCachePolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.GraphQLPersistedQueryCachePolicySet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockGraphQLPersistedQueryCachePolicySetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicySet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicySet) Delete(graphQLPersistedQueryCachePolicy ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", graphQLPersistedQueryCachePolicy)
}

// Delete indicates an expected call of Delete.
func (mr *MockGraphQLPersistedQueryCachePolicySetMockRecorder) Delete(graphQLPersistedQueryCachePolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicySet)(nil).Delete), graphQLPersistedQueryCachePolicy)
}

// Delta mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicySet) Delta(newSet v2sets.GraphQLPersistedQueryCachePolicySet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockGraphQLPersistedQueryCachePolicySetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicySet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicySet) Difference(set v2sets.GraphQLPersistedQueryCachePolicySet) v2sets.GraphQLPersistedQueryCachePolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.GraphQLPersistedQueryCachePolicySet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockGraphQLPersistedQueryCachePolicySetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicySet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicySet) Equal(graphQLPersistedQueryCachePolicySet v2sets.GraphQLPersistedQueryCachePolicySet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", graphQLPersistedQueryCachePolicySet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockGraphQLPersistedQueryCachePolicySetMockRecorder) Equal(graphQLPersistedQueryCachePolicySet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicySet)(nil).Equal), graphQLPersistedQueryCachePolicySet)
}

// Find mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicySet) Find(id ezkube.ResourceId) (*v2.GraphQLPersistedQueryCachePolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.GraphQLPersistedQueryCachePolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockGraphQLPersistedQueryCachePolicySetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicySet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicySet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockGraphQLPersistedQueryCachePolicySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicySet)(nil).Generic))
}

// Has mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicySet) Has(graphQLPersistedQueryCachePolicy ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", graphQLPersistedQueryCachePolicy)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockGraphQLPersistedQueryCachePolicySetMockRecorder) Has(graphQLPersistedQueryCachePolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicySet)(nil).Has), graphQLPersistedQueryCachePolicy)
}

// Insert mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicySet) Insert(graphQLPersistedQueryCachePolicy ...*v2.GraphQLPersistedQueryCachePolicy) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range graphQLPersistedQueryCachePolicy {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockGraphQLPersistedQueryCachePolicySetMockRecorder) Insert(graphQLPersistedQueryCachePolicy ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicySet)(nil).Insert), graphQLPersistedQueryCachePolicy...)
}

// Intersection mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicySet) Intersection(set v2sets.GraphQLPersistedQueryCachePolicySet) v2sets.GraphQLPersistedQueryCachePolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.GraphQLPersistedQueryCachePolicySet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockGraphQLPersistedQueryCachePolicySetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicySet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicySet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockGraphQLPersistedQueryCachePolicySetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicySet)(nil).Keys))
}

// Length mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicySet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockGraphQLPersistedQueryCachePolicySetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicySet)(nil).Length))
}

// List mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicySet) List(filterResource ...func(*v2.GraphQLPersistedQueryCachePolicy) bool) []*v2.GraphQLPersistedQueryCachePolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.GraphQLPersistedQueryCachePolicy)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockGraphQLPersistedQueryCachePolicySetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicySet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicySet) Map() map[string]*v2.GraphQLPersistedQueryCachePolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.GraphQLPersistedQueryCachePolicy)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockGraphQLPersistedQueryCachePolicySetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicySet)(nil).Map))
}

// Union mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicySet) Union(set v2sets.GraphQLPersistedQueryCachePolicySet) v2sets.GraphQLPersistedQueryCachePolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.GraphQLPersistedQueryCachePolicySet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockGraphQLPersistedQueryCachePolicySetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicySet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicySet) UnsortedList(filterResource ...func(*v2.GraphQLPersistedQueryCachePolicy) bool) []*v2.GraphQLPersistedQueryCachePolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.GraphQLPersistedQueryCachePolicy)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockGraphQLPersistedQueryCachePolicySetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicySet)(nil).UnsortedList), filterResource...)
}

// MockFailoverPolicySet is a mock of FailoverPolicySet interface.
type MockFailoverPolicySet struct {
	ctrl     *gomock.Controller
	recorder *MockFailoverPolicySetMockRecorder
}

// MockFailoverPolicySetMockRecorder is the mock recorder for MockFailoverPolicySet.
type MockFailoverPolicySetMockRecorder struct {
	mock *MockFailoverPolicySet
}

// NewMockFailoverPolicySet creates a new mock instance.
func NewMockFailoverPolicySet(ctrl *gomock.Controller) *MockFailoverPolicySet {
	mock := &MockFailoverPolicySet{ctrl: ctrl}
	mock.recorder = &MockFailoverPolicySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailoverPolicySet) EXPECT() *MockFailoverPolicySetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockFailoverPolicySet) Clone() v2sets.FailoverPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.FailoverPolicySet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockFailoverPolicySetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockFailoverPolicySet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockFailoverPolicySet) Delete(failoverPolicy ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", failoverPolicy)
}

// Delete indicates an expected call of Delete.
func (mr *MockFailoverPolicySetMockRecorder) Delete(failoverPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFailoverPolicySet)(nil).Delete), failoverPolicy)
}

// Delta mocks base method.
func (m *MockFailoverPolicySet) Delta(newSet v2sets.FailoverPolicySet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockFailoverPolicySetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockFailoverPolicySet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockFailoverPolicySet) Difference(set v2sets.FailoverPolicySet) v2sets.FailoverPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.FailoverPolicySet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockFailoverPolicySetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockFailoverPolicySet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockFailoverPolicySet) Equal(failoverPolicySet v2sets.FailoverPolicySet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", failoverPolicySet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockFailoverPolicySetMockRecorder) Equal(failoverPolicySet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockFailoverPolicySet)(nil).Equal), failoverPolicySet)
}

// Find mocks base method.
func (m *MockFailoverPolicySet) Find(id ezkube.ResourceId) (*v2.FailoverPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.FailoverPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockFailoverPolicySetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockFailoverPolicySet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockFailoverPolicySet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockFailoverPolicySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockFailoverPolicySet)(nil).Generic))
}

// Has mocks base method.
func (m *MockFailoverPolicySet) Has(failoverPolicy ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", failoverPolicy)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockFailoverPolicySetMockRecorder) Has(failoverPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockFailoverPolicySet)(nil).Has), failoverPolicy)
}

// Insert mocks base method.
func (m *MockFailoverPolicySet) Insert(failoverPolicy ...*v2.FailoverPolicy) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range failoverPolicy {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockFailoverPolicySetMockRecorder) Insert(failoverPolicy ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockFailoverPolicySet)(nil).Insert), failoverPolicy...)
}

// Intersection mocks base method.
func (m *MockFailoverPolicySet) Intersection(set v2sets.FailoverPolicySet) v2sets.FailoverPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.FailoverPolicySet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockFailoverPolicySetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockFailoverPolicySet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockFailoverPolicySet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockFailoverPolicySetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockFailoverPolicySet)(nil).Keys))
}

// Length mocks base method.
func (m *MockFailoverPolicySet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockFailoverPolicySetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockFailoverPolicySet)(nil).Length))
}

// List mocks base method.
func (m *MockFailoverPolicySet) List(filterResource ...func(*v2.FailoverPolicy) bool) []*v2.FailoverPolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.FailoverPolicy)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockFailoverPolicySetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFailoverPolicySet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockFailoverPolicySet) Map() map[string]*v2.FailoverPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.FailoverPolicy)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockFailoverPolicySetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockFailoverPolicySet)(nil).Map))
}

// Union mocks base method.
func (m *MockFailoverPolicySet) Union(set v2sets.FailoverPolicySet) v2sets.FailoverPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.FailoverPolicySet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockFailoverPolicySetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockFailoverPolicySet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockFailoverPolicySet) UnsortedList(filterResource ...func(*v2.FailoverPolicy) bool) []*v2.FailoverPolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.FailoverPolicy)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockFailoverPolicySetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockFailoverPolicySet)(nil).UnsortedList), filterResource...)
}

// MockOutlierDetectionPolicySet is a mock of OutlierDetectionPolicySet interface.
type MockOutlierDetectionPolicySet struct {
	ctrl     *gomock.Controller
	recorder *MockOutlierDetectionPolicySetMockRecorder
}

// MockOutlierDetectionPolicySetMockRecorder is the mock recorder for MockOutlierDetectionPolicySet.
type MockOutlierDetectionPolicySetMockRecorder struct {
	mock *MockOutlierDetectionPolicySet
}

// NewMockOutlierDetectionPolicySet creates a new mock instance.
func NewMockOutlierDetectionPolicySet(ctrl *gomock.Controller) *MockOutlierDetectionPolicySet {
	mock := &MockOutlierDetectionPolicySet{ctrl: ctrl}
	mock.recorder = &MockOutlierDetectionPolicySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutlierDetectionPolicySet) EXPECT() *MockOutlierDetectionPolicySetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockOutlierDetectionPolicySet) Clone() v2sets.OutlierDetectionPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.OutlierDetectionPolicySet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockOutlierDetectionPolicySetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockOutlierDetectionPolicySet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockOutlierDetectionPolicySet) Delete(outlierDetectionPolicy ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", outlierDetectionPolicy)
}

// Delete indicates an expected call of Delete.
func (mr *MockOutlierDetectionPolicySetMockRecorder) Delete(outlierDetectionPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOutlierDetectionPolicySet)(nil).Delete), outlierDetectionPolicy)
}

// Delta mocks base method.
func (m *MockOutlierDetectionPolicySet) Delta(newSet v2sets.OutlierDetectionPolicySet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockOutlierDetectionPolicySetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockOutlierDetectionPolicySet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockOutlierDetectionPolicySet) Difference(set v2sets.OutlierDetectionPolicySet) v2sets.OutlierDetectionPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.OutlierDetectionPolicySet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockOutlierDetectionPolicySetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockOutlierDetectionPolicySet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockOutlierDetectionPolicySet) Equal(outlierDetectionPolicySet v2sets.OutlierDetectionPolicySet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", outlierDetectionPolicySet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockOutlierDetectionPolicySetMockRecorder) Equal(outlierDetectionPolicySet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockOutlierDetectionPolicySet)(nil).Equal), outlierDetectionPolicySet)
}

// Find mocks base method.
func (m *MockOutlierDetectionPolicySet) Find(id ezkube.ResourceId) (*v2.OutlierDetectionPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.OutlierDetectionPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockOutlierDetectionPolicySetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockOutlierDetectionPolicySet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockOutlierDetectionPolicySet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockOutlierDetectionPolicySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockOutlierDetectionPolicySet)(nil).Generic))
}

// Has mocks base method.
func (m *MockOutlierDetectionPolicySet) Has(outlierDetectionPolicy ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", outlierDetectionPolicy)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockOutlierDetectionPolicySetMockRecorder) Has(outlierDetectionPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockOutlierDetectionPolicySet)(nil).Has), outlierDetectionPolicy)
}

// Insert mocks base method.
func (m *MockOutlierDetectionPolicySet) Insert(outlierDetectionPolicy ...*v2.OutlierDetectionPolicy) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range outlierDetectionPolicy {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockOutlierDetectionPolicySetMockRecorder) Insert(outlierDetectionPolicy ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockOutlierDetectionPolicySet)(nil).Insert), outlierDetectionPolicy...)
}

// Intersection mocks base method.
func (m *MockOutlierDetectionPolicySet) Intersection(set v2sets.OutlierDetectionPolicySet) v2sets.OutlierDetectionPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.OutlierDetectionPolicySet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockOutlierDetectionPolicySetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockOutlierDetectionPolicySet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockOutlierDetectionPolicySet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockOutlierDetectionPolicySetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockOutlierDetectionPolicySet)(nil).Keys))
}

// Length mocks base method.
func (m *MockOutlierDetectionPolicySet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockOutlierDetectionPolicySetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockOutlierDetectionPolicySet)(nil).Length))
}

// List mocks base method.
func (m *MockOutlierDetectionPolicySet) List(filterResource ...func(*v2.OutlierDetectionPolicy) bool) []*v2.OutlierDetectionPolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.OutlierDetectionPolicy)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockOutlierDetectionPolicySetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOutlierDetectionPolicySet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockOutlierDetectionPolicySet) Map() map[string]*v2.OutlierDetectionPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.OutlierDetectionPolicy)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockOutlierDetectionPolicySetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockOutlierDetectionPolicySet)(nil).Map))
}

// Union mocks base method.
func (m *MockOutlierDetectionPolicySet) Union(set v2sets.OutlierDetectionPolicySet) v2sets.OutlierDetectionPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.OutlierDetectionPolicySet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockOutlierDetectionPolicySetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockOutlierDetectionPolicySet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockOutlierDetectionPolicySet) UnsortedList(filterResource ...func(*v2.OutlierDetectionPolicy) bool) []*v2.OutlierDetectionPolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.OutlierDetectionPolicy)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockOutlierDetectionPolicySetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockOutlierDetectionPolicySet)(nil).UnsortedList), filterResource...)
}

// MockAdaptiveRequestConcurrencyPolicySet is a mock of AdaptiveRequestConcurrencyPolicySet interface.
type MockAdaptiveRequestConcurrencyPolicySet struct {
	ctrl     *gomock.Controller
	recorder *MockAdaptiveRequestConcurrencyPolicySetMockRecorder
}

// MockAdaptiveRequestConcurrencyPolicySetMockRecorder is the mock recorder for MockAdaptiveRequestConcurrencyPolicySet.
type MockAdaptiveRequestConcurrencyPolicySetMockRecorder struct {
	mock *MockAdaptiveRequestConcurrencyPolicySet
}

// NewMockAdaptiveRequestConcurrencyPolicySet creates a new mock instance.
func NewMockAdaptiveRequestConcurrencyPolicySet(ctrl *gomock.Controller) *MockAdaptiveRequestConcurrencyPolicySet {
	mock := &MockAdaptiveRequestConcurrencyPolicySet{ctrl: ctrl}
	mock.recorder = &MockAdaptiveRequestConcurrencyPolicySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdaptiveRequestConcurrencyPolicySet) EXPECT() *MockAdaptiveRequestConcurrencyPolicySetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicySet) Clone() v2sets.AdaptiveRequestConcurrencyPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.AdaptiveRequestConcurrencyPolicySet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockAdaptiveRequestConcurrencyPolicySetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicySet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicySet) Delete(adaptiveRequestConcurrencyPolicy ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", adaptiveRequestConcurrencyPolicy)
}

// Delete indicates an expected call of Delete.
func (mr *MockAdaptiveRequestConcurrencyPolicySetMockRecorder) Delete(adaptiveRequestConcurrencyPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicySet)(nil).Delete), adaptiveRequestConcurrencyPolicy)
}

// Delta mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicySet) Delta(newSet v2sets.AdaptiveRequestConcurrencyPolicySet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockAdaptiveRequestConcurrencyPolicySetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicySet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicySet) Difference(set v2sets.AdaptiveRequestConcurrencyPolicySet) v2sets.AdaptiveRequestConcurrencyPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.AdaptiveRequestConcurrencyPolicySet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockAdaptiveRequestConcurrencyPolicySetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicySet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicySet) Equal(adaptiveRequestConcurrencyPolicySet v2sets.AdaptiveRequestConcurrencyPolicySet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", adaptiveRequestConcurrencyPolicySet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockAdaptiveRequestConcurrencyPolicySetMockRecorder) Equal(adaptiveRequestConcurrencyPolicySet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicySet)(nil).Equal), adaptiveRequestConcurrencyPolicySet)
}

// Find mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicySet) Find(id ezkube.ResourceId) (*v2.AdaptiveRequestConcurrencyPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.AdaptiveRequestConcurrencyPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockAdaptiveRequestConcurrencyPolicySetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicySet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicySet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockAdaptiveRequestConcurrencyPolicySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicySet)(nil).Generic))
}

// Has mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicySet) Has(adaptiveRequestConcurrencyPolicy ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", adaptiveRequestConcurrencyPolicy)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockAdaptiveRequestConcurrencyPolicySetMockRecorder) Has(adaptiveRequestConcurrencyPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicySet)(nil).Has), adaptiveRequestConcurrencyPolicy)
}

// Insert mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicySet) Insert(adaptiveRequestConcurrencyPolicy ...*v2.AdaptiveRequestConcurrencyPolicy) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range adaptiveRequestConcurrencyPolicy {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockAdaptiveRequestConcurrencyPolicySetMockRecorder) Insert(adaptiveRequestConcurrencyPolicy ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicySet)(nil).Insert), adaptiveRequestConcurrencyPolicy...)
}

// Intersection mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicySet) Intersection(set v2sets.AdaptiveRequestConcurrencyPolicySet) v2sets.AdaptiveRequestConcurrencyPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.AdaptiveRequestConcurrencyPolicySet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockAdaptiveRequestConcurrencyPolicySetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicySet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicySet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockAdaptiveRequestConcurrencyPolicySetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicySet)(nil).Keys))
}

// Length mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicySet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockAdaptiveRequestConcurrencyPolicySetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicySet)(nil).Length))
}

// List mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicySet) List(filterResource ...func(*v2.AdaptiveRequestConcurrencyPolicy) bool) []*v2.AdaptiveRequestConcurrencyPolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.AdaptiveRequestConcurrencyPolicy)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockAdaptiveRequestConcurrencyPolicySetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicySet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicySet) Map() map[string]*v2.AdaptiveRequestConcurrencyPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.AdaptiveRequestConcurrencyPolicy)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockAdaptiveRequestConcurrencyPolicySetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicySet)(nil).Map))
}

// Union mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicySet) Union(set v2sets.AdaptiveRequestConcurrencyPolicySet) v2sets.AdaptiveRequestConcurrencyPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.AdaptiveRequestConcurrencyPolicySet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockAdaptiveRequestConcurrencyPolicySetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicySet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicySet) UnsortedList(filterResource ...func(*v2.AdaptiveRequestConcurrencyPolicy) bool) []*v2.AdaptiveRequestConcurrencyPolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.AdaptiveRequestConcurrencyPolicy)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockAdaptiveRequestConcurrencyPolicySetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicySet)(nil).UnsortedList), filterResource...)
}

// MockFaultInjectionPolicySet is a mock of FaultInjectionPolicySet interface.
type MockFaultInjectionPolicySet struct {
	ctrl     *gomock.Controller
	recorder *MockFaultInjectionPolicySetMockRecorder
}

// MockFaultInjectionPolicySetMockRecorder is the mock recorder for MockFaultInjectionPolicySet.
type MockFaultInjectionPolicySetMockRecorder struct {
	mock *MockFaultInjectionPolicySet
}

// NewMockFaultInjectionPolicySet creates a new mock instance.
func NewMockFaultInjectionPolicySet(ctrl *gomock.Controller) *MockFaultInjectionPolicySet {
	mock := &MockFaultInjectionPolicySet{ctrl: ctrl}
	mock.recorder = &MockFaultInjectionPolicySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFaultInjectionPolicySet) EXPECT() *MockFaultInjectionPolicySetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockFaultInjectionPolicySet) Clone() v2sets.FaultInjectionPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.FaultInjectionPolicySet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockFaultInjectionPolicySetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockFaultInjectionPolicySet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockFaultInjectionPolicySet) Delete(faultInjectionPolicy ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", faultInjectionPolicy)
}

// Delete indicates an expected call of Delete.
func (mr *MockFaultInjectionPolicySetMockRecorder) Delete(faultInjectionPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFaultInjectionPolicySet)(nil).Delete), faultInjectionPolicy)
}

// Delta mocks base method.
func (m *MockFaultInjectionPolicySet) Delta(newSet v2sets.FaultInjectionPolicySet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockFaultInjectionPolicySetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockFaultInjectionPolicySet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockFaultInjectionPolicySet) Difference(set v2sets.FaultInjectionPolicySet) v2sets.FaultInjectionPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.FaultInjectionPolicySet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockFaultInjectionPolicySetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockFaultInjectionPolicySet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockFaultInjectionPolicySet) Equal(faultInjectionPolicySet v2sets.FaultInjectionPolicySet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", faultInjectionPolicySet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockFaultInjectionPolicySetMockRecorder) Equal(faultInjectionPolicySet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockFaultInjectionPolicySet)(nil).Equal), faultInjectionPolicySet)
}

// Find mocks base method.
func (m *MockFaultInjectionPolicySet) Find(id ezkube.ResourceId) (*v2.FaultInjectionPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.FaultInjectionPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockFaultInjectionPolicySetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockFaultInjectionPolicySet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockFaultInjectionPolicySet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockFaultInjectionPolicySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockFaultInjectionPolicySet)(nil).Generic))
}

// Has mocks base method.
func (m *MockFaultInjectionPolicySet) Has(faultInjectionPolicy ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", faultInjectionPolicy)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockFaultInjectionPolicySetMockRecorder) Has(faultInjectionPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockFaultInjectionPolicySet)(nil).Has), faultInjectionPolicy)
}

// Insert mocks base method.
func (m *MockFaultInjectionPolicySet) Insert(faultInjectionPolicy ...*v2.FaultInjectionPolicy) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range faultInjectionPolicy {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockFaultInjectionPolicySetMockRecorder) Insert(faultInjectionPolicy ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockFaultInjectionPolicySet)(nil).Insert), faultInjectionPolicy...)
}

// Intersection mocks base method.
func (m *MockFaultInjectionPolicySet) Intersection(set v2sets.FaultInjectionPolicySet) v2sets.FaultInjectionPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.FaultInjectionPolicySet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockFaultInjectionPolicySetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockFaultInjectionPolicySet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockFaultInjectionPolicySet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockFaultInjectionPolicySetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockFaultInjectionPolicySet)(nil).Keys))
}

// Length mocks base method.
func (m *MockFaultInjectionPolicySet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockFaultInjectionPolicySetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockFaultInjectionPolicySet)(nil).Length))
}

// List mocks base method.
func (m *MockFaultInjectionPolicySet) List(filterResource ...func(*v2.FaultInjectionPolicy) bool) []*v2.FaultInjectionPolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.FaultInjectionPolicy)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockFaultInjectionPolicySetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFaultInjectionPolicySet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockFaultInjectionPolicySet) Map() map[string]*v2.FaultInjectionPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.FaultInjectionPolicy)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockFaultInjectionPolicySetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockFaultInjectionPolicySet)(nil).Map))
}

// Union mocks base method.
func (m *MockFaultInjectionPolicySet) Union(set v2sets.FaultInjectionPolicySet) v2sets.FaultInjectionPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.FaultInjectionPolicySet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockFaultInjectionPolicySetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockFaultInjectionPolicySet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockFaultInjectionPolicySet) UnsortedList(filterResource ...func(*v2.FaultInjectionPolicy) bool) []*v2.FaultInjectionPolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.FaultInjectionPolicy)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockFaultInjectionPolicySetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockFaultInjectionPolicySet)(nil).UnsortedList), filterResource...)
}

// MockRetryTimeoutPolicySet is a mock of RetryTimeoutPolicySet interface.
type MockRetryTimeoutPolicySet struct {
	ctrl     *gomock.Controller
	recorder *MockRetryTimeoutPolicySetMockRecorder
}

// MockRetryTimeoutPolicySetMockRecorder is the mock recorder for MockRetryTimeoutPolicySet.
type MockRetryTimeoutPolicySetMockRecorder struct {
	mock *MockRetryTimeoutPolicySet
}

// NewMockRetryTimeoutPolicySet creates a new mock instance.
func NewMockRetryTimeoutPolicySet(ctrl *gomock.Controller) *MockRetryTimeoutPolicySet {
	mock := &MockRetryTimeoutPolicySet{ctrl: ctrl}
	mock.recorder = &MockRetryTimeoutPolicySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryTimeoutPolicySet) EXPECT() *MockRetryTimeoutPolicySetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockRetryTimeoutPolicySet) Clone() v2sets.RetryTimeoutPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.RetryTimeoutPolicySet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockRetryTimeoutPolicySetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockRetryTimeoutPolicySet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockRetryTimeoutPolicySet) Delete(retryTimeoutPolicy ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", retryTimeoutPolicy)
}

// Delete indicates an expected call of Delete.
func (mr *MockRetryTimeoutPolicySetMockRecorder) Delete(retryTimeoutPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRetryTimeoutPolicySet)(nil).Delete), retryTimeoutPolicy)
}

// Delta mocks base method.
func (m *MockRetryTimeoutPolicySet) Delta(newSet v2sets.RetryTimeoutPolicySet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockRetryTimeoutPolicySetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockRetryTimeoutPolicySet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockRetryTimeoutPolicySet) Difference(set v2sets.RetryTimeoutPolicySet) v2sets.RetryTimeoutPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.RetryTimeoutPolicySet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockRetryTimeoutPolicySetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockRetryTimeoutPolicySet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockRetryTimeoutPolicySet) Equal(retryTimeoutPolicySet v2sets.RetryTimeoutPolicySet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", retryTimeoutPolicySet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockRetryTimeoutPolicySetMockRecorder) Equal(retryTimeoutPolicySet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockRetryTimeoutPolicySet)(nil).Equal), retryTimeoutPolicySet)
}

// Find mocks base method.
func (m *MockRetryTimeoutPolicySet) Find(id ezkube.ResourceId) (*v2.RetryTimeoutPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.RetryTimeoutPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRetryTimeoutPolicySetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRetryTimeoutPolicySet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockRetryTimeoutPolicySet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockRetryTimeoutPolicySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockRetryTimeoutPolicySet)(nil).Generic))
}

// Has mocks base method.
func (m *MockRetryTimeoutPolicySet) Has(retryTimeoutPolicy ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", retryTimeoutPolicy)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockRetryTimeoutPolicySetMockRecorder) Has(retryTimeoutPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockRetryTimeoutPolicySet)(nil).Has), retryTimeoutPolicy)
}

// Insert mocks base method.
func (m *MockRetryTimeoutPolicySet) Insert(retryTimeoutPolicy ...*v2.RetryTimeoutPolicy) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range retryTimeoutPolicy {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockRetryTimeoutPolicySetMockRecorder) Insert(retryTimeoutPolicy ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRetryTimeoutPolicySet)(nil).Insert), retryTimeoutPolicy...)
}

// Intersection mocks base method.
func (m *MockRetryTimeoutPolicySet) Intersection(set v2sets.RetryTimeoutPolicySet) v2sets.RetryTimeoutPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.RetryTimeoutPolicySet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockRetryTimeoutPolicySetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockRetryTimeoutPolicySet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockRetryTimeoutPolicySet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockRetryTimeoutPolicySetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockRetryTimeoutPolicySet)(nil).Keys))
}

// Length mocks base method.
func (m *MockRetryTimeoutPolicySet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockRetryTimeoutPolicySetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockRetryTimeoutPolicySet)(nil).Length))
}

// List mocks base method.
func (m *MockRetryTimeoutPolicySet) List(filterResource ...func(*v2.RetryTimeoutPolicy) bool) []*v2.RetryTimeoutPolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.RetryTimeoutPolicy)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockRetryTimeoutPolicySetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRetryTimeoutPolicySet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockRetryTimeoutPolicySet) Map() map[string]*v2.RetryTimeoutPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.RetryTimeoutPolicy)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockRetryTimeoutPolicySetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockRetryTimeoutPolicySet)(nil).Map))
}

// Union mocks base method.
func (m *MockRetryTimeoutPolicySet) Union(set v2sets.RetryTimeoutPolicySet) v2sets.RetryTimeoutPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.RetryTimeoutPolicySet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockRetryTimeoutPolicySetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockRetryTimeoutPolicySet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockRetryTimeoutPolicySet) UnsortedList(filterResource ...func(*v2.RetryTimeoutPolicy) bool) []*v2.RetryTimeoutPolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.RetryTimeoutPolicy)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockRetryTimeoutPolicySetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockRetryTimeoutPolicySet)(nil).UnsortedList), filterResource...)
}

// MockConnectionPolicySet is a mock of ConnectionPolicySet interface.
type MockConnectionPolicySet struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionPolicySetMockRecorder
}

// MockConnectionPolicySetMockRecorder is the mock recorder for MockConnectionPolicySet.
type MockConnectionPolicySetMockRecorder struct {
	mock *MockConnectionPolicySet
}

// NewMockConnectionPolicySet creates a new mock instance.
func NewMockConnectionPolicySet(ctrl *gomock.Controller) *MockConnectionPolicySet {
	mock := &MockConnectionPolicySet{ctrl: ctrl}
	mock.recorder = &MockConnectionPolicySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionPolicySet) EXPECT() *MockConnectionPolicySetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockConnectionPolicySet) Clone() v2sets.ConnectionPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.ConnectionPolicySet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockConnectionPolicySetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockConnectionPolicySet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockConnectionPolicySet) Delete(connectionPolicy ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", connectionPolicy)
}

// Delete indicates an expected call of Delete.
func (mr *MockConnectionPolicySetMockRecorder) Delete(connectionPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockConnectionPolicySet)(nil).Delete), connectionPolicy)
}

// Delta mocks base method.
func (m *MockConnectionPolicySet) Delta(newSet v2sets.ConnectionPolicySet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockConnectionPolicySetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockConnectionPolicySet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockConnectionPolicySet) Difference(set v2sets.ConnectionPolicySet) v2sets.ConnectionPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.ConnectionPolicySet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockConnectionPolicySetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockConnectionPolicySet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockConnectionPolicySet) Equal(connectionPolicySet v2sets.ConnectionPolicySet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", connectionPolicySet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockConnectionPolicySetMockRecorder) Equal(connectionPolicySet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockConnectionPolicySet)(nil).Equal), connectionPolicySet)
}

// Find mocks base method.
func (m *MockConnectionPolicySet) Find(id ezkube.ResourceId) (*v2.ConnectionPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.ConnectionPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockConnectionPolicySetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockConnectionPolicySet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockConnectionPolicySet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockConnectionPolicySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockConnectionPolicySet)(nil).Generic))
}

// Has mocks base method.
func (m *MockConnectionPolicySet) Has(connectionPolicy ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", connectionPolicy)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockConnectionPolicySetMockRecorder) Has(connectionPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockConnectionPolicySet)(nil).Has), connectionPolicy)
}

// Insert mocks base method.
func (m *MockConnectionPolicySet) Insert(connectionPolicy ...*v2.ConnectionPolicy) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range connectionPolicy {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockConnectionPolicySetMockRecorder) Insert(connectionPolicy ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockConnectionPolicySet)(nil).Insert), connectionPolicy...)
}

// Intersection mocks base method.
func (m *MockConnectionPolicySet) Intersection(set v2sets.ConnectionPolicySet) v2sets.ConnectionPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.ConnectionPolicySet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockConnectionPolicySetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockConnectionPolicySet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockConnectionPolicySet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockConnectionPolicySetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockConnectionPolicySet)(nil).Keys))
}

// Length mocks base method.
func (m *MockConnectionPolicySet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockConnectionPolicySetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockConnectionPolicySet)(nil).Length))
}

// List mocks base method.
func (m *MockConnectionPolicySet) List(filterResource ...func(*v2.ConnectionPolicy) bool) []*v2.ConnectionPolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.ConnectionPolicy)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockConnectionPolicySetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockConnectionPolicySet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockConnectionPolicySet) Map() map[string]*v2.ConnectionPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.ConnectionPolicy)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockConnectionPolicySetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockConnectionPolicySet)(nil).Map))
}

// Union mocks base method.
func (m *MockConnectionPolicySet) Union(set v2sets.ConnectionPolicySet) v2sets.ConnectionPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.ConnectionPolicySet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockConnectionPolicySetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockConnectionPolicySet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockConnectionPolicySet) UnsortedList(filterResource ...func(*v2.ConnectionPolicy) bool) []*v2.ConnectionPolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.ConnectionPolicy)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockConnectionPolicySetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockConnectionPolicySet)(nil).UnsortedList), filterResource...)
}

// MockTrimProxyConfigPolicySet is a mock of TrimProxyConfigPolicySet interface.
type MockTrimProxyConfigPolicySet struct {
	ctrl     *gomock.Controller
	recorder *MockTrimProxyConfigPolicySetMockRecorder
}

// MockTrimProxyConfigPolicySetMockRecorder is the mock recorder for MockTrimProxyConfigPolicySet.
type MockTrimProxyConfigPolicySetMockRecorder struct {
	mock *MockTrimProxyConfigPolicySet
}

// NewMockTrimProxyConfigPolicySet creates a new mock instance.
func NewMockTrimProxyConfigPolicySet(ctrl *gomock.Controller) *MockTrimProxyConfigPolicySet {
	mock := &MockTrimProxyConfigPolicySet{ctrl: ctrl}
	mock.recorder = &MockTrimProxyConfigPolicySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrimProxyConfigPolicySet) EXPECT() *MockTrimProxyConfigPolicySetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockTrimProxyConfigPolicySet) Clone() v2sets.TrimProxyConfigPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.TrimProxyConfigPolicySet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockTrimProxyConfigPolicySetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockTrimProxyConfigPolicySet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockTrimProxyConfigPolicySet) Delete(trimProxyConfigPolicy ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", trimProxyConfigPolicy)
}

// Delete indicates an expected call of Delete.
func (mr *MockTrimProxyConfigPolicySetMockRecorder) Delete(trimProxyConfigPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTrimProxyConfigPolicySet)(nil).Delete), trimProxyConfigPolicy)
}

// Delta mocks base method.
func (m *MockTrimProxyConfigPolicySet) Delta(newSet v2sets.TrimProxyConfigPolicySet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockTrimProxyConfigPolicySetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockTrimProxyConfigPolicySet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockTrimProxyConfigPolicySet) Difference(set v2sets.TrimProxyConfigPolicySet) v2sets.TrimProxyConfigPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.TrimProxyConfigPolicySet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockTrimProxyConfigPolicySetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockTrimProxyConfigPolicySet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockTrimProxyConfigPolicySet) Equal(trimProxyConfigPolicySet v2sets.TrimProxyConfigPolicySet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", trimProxyConfigPolicySet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockTrimProxyConfigPolicySetMockRecorder) Equal(trimProxyConfigPolicySet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockTrimProxyConfigPolicySet)(nil).Equal), trimProxyConfigPolicySet)
}

// Find mocks base method.
func (m *MockTrimProxyConfigPolicySet) Find(id ezkube.ResourceId) (*v2.TrimProxyConfigPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.TrimProxyConfigPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockTrimProxyConfigPolicySetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockTrimProxyConfigPolicySet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockTrimProxyConfigPolicySet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockTrimProxyConfigPolicySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockTrimProxyConfigPolicySet)(nil).Generic))
}

// Has mocks base method.
func (m *MockTrimProxyConfigPolicySet) Has(trimProxyConfigPolicy ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", trimProxyConfigPolicy)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockTrimProxyConfigPolicySetMockRecorder) Has(trimProxyConfigPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockTrimProxyConfigPolicySet)(nil).Has), trimProxyConfigPolicy)
}

// Insert mocks base method.
func (m *MockTrimProxyConfigPolicySet) Insert(trimProxyConfigPolicy ...*v2.TrimProxyConfigPolicy) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range trimProxyConfigPolicy {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockTrimProxyConfigPolicySetMockRecorder) Insert(trimProxyConfigPolicy ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTrimProxyConfigPolicySet)(nil).Insert), trimProxyConfigPolicy...)
}

// Intersection mocks base method.
func (m *MockTrimProxyConfigPolicySet) Intersection(set v2sets.TrimProxyConfigPolicySet) v2sets.TrimProxyConfigPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.TrimProxyConfigPolicySet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockTrimProxyConfigPolicySetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockTrimProxyConfigPolicySet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockTrimProxyConfigPolicySet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockTrimProxyConfigPolicySetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockTrimProxyConfigPolicySet)(nil).Keys))
}

// Length mocks base method.
func (m *MockTrimProxyConfigPolicySet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockTrimProxyConfigPolicySetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockTrimProxyConfigPolicySet)(nil).Length))
}

// List mocks base method.
func (m *MockTrimProxyConfigPolicySet) List(filterResource ...func(*v2.TrimProxyConfigPolicy) bool) []*v2.TrimProxyConfigPolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.TrimProxyConfigPolicy)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockTrimProxyConfigPolicySetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTrimProxyConfigPolicySet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockTrimProxyConfigPolicySet) Map() map[string]*v2.TrimProxyConfigPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.TrimProxyConfigPolicy)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockTrimProxyConfigPolicySetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockTrimProxyConfigPolicySet)(nil).Map))
}

// Union mocks base method.
func (m *MockTrimProxyConfigPolicySet) Union(set v2sets.TrimProxyConfigPolicySet) v2sets.TrimProxyConfigPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.TrimProxyConfigPolicySet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockTrimProxyConfigPolicySetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockTrimProxyConfigPolicySet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockTrimProxyConfigPolicySet) UnsortedList(filterResource ...func(*v2.TrimProxyConfigPolicy) bool) []*v2.TrimProxyConfigPolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.TrimProxyConfigPolicy)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockTrimProxyConfigPolicySetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockTrimProxyConfigPolicySet)(nil).UnsortedList), filterResource...)
}

// MockActiveHealthCheckPolicySet is a mock of ActiveHealthCheckPolicySet interface.
type MockActiveHealthCheckPolicySet struct {
	ctrl     *gomock.Controller
	recorder *MockActiveHealthCheckPolicySetMockRecorder
}

// MockActiveHealthCheckPolicySetMockRecorder is the mock recorder for MockActiveHealthCheckPolicySet.
type MockActiveHealthCheckPolicySetMockRecorder struct {
	mock *MockActiveHealthCheckPolicySet
}

// NewMockActiveHealthCheckPolicySet creates a new mock instance.
func NewMockActiveHealthCheckPolicySet(ctrl *gomock.Controller) *MockActiveHealthCheckPolicySet {
	mock := &MockActiveHealthCheckPolicySet{ctrl: ctrl}
	mock.recorder = &MockActiveHealthCheckPolicySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActiveHealthCheckPolicySet) EXPECT() *MockActiveHealthCheckPolicySetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockActiveHealthCheckPolicySet) Clone() v2sets.ActiveHealthCheckPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.ActiveHealthCheckPolicySet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockActiveHealthCheckPolicySetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockActiveHealthCheckPolicySet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockActiveHealthCheckPolicySet) Delete(activeHealthCheckPolicy ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", activeHealthCheckPolicy)
}

// Delete indicates an expected call of Delete.
func (mr *MockActiveHealthCheckPolicySetMockRecorder) Delete(activeHealthCheckPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockActiveHealthCheckPolicySet)(nil).Delete), activeHealthCheckPolicy)
}

// Delta mocks base method.
func (m *MockActiveHealthCheckPolicySet) Delta(newSet v2sets.ActiveHealthCheckPolicySet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockActiveHealthCheckPolicySetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockActiveHealthCheckPolicySet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockActiveHealthCheckPolicySet) Difference(set v2sets.ActiveHealthCheckPolicySet) v2sets.ActiveHealthCheckPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.ActiveHealthCheckPolicySet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockActiveHealthCheckPolicySetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockActiveHealthCheckPolicySet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockActiveHealthCheckPolicySet) Equal(activeHealthCheckPolicySet v2sets.ActiveHealthCheckPolicySet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", activeHealthCheckPolicySet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockActiveHealthCheckPolicySetMockRecorder) Equal(activeHealthCheckPolicySet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockActiveHealthCheckPolicySet)(nil).Equal), activeHealthCheckPolicySet)
}

// Find mocks base method.
func (m *MockActiveHealthCheckPolicySet) Find(id ezkube.ResourceId) (*v2.ActiveHealthCheckPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.ActiveHealthCheckPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockActiveHealthCheckPolicySetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockActiveHealthCheckPolicySet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockActiveHealthCheckPolicySet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockActiveHealthCheckPolicySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockActiveHealthCheckPolicySet)(nil).Generic))
}

// Has mocks base method.
func (m *MockActiveHealthCheckPolicySet) Has(activeHealthCheckPolicy ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", activeHealthCheckPolicy)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockActiveHealthCheckPolicySetMockRecorder) Has(activeHealthCheckPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockActiveHealthCheckPolicySet)(nil).Has), activeHealthCheckPolicy)
}

// Insert mocks base method.
func (m *MockActiveHealthCheckPolicySet) Insert(activeHealthCheckPolicy ...*v2.ActiveHealthCheckPolicy) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range activeHealthCheckPolicy {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockActiveHealthCheckPolicySetMockRecorder) Insert(activeHealthCheckPolicy ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockActiveHealthCheckPolicySet)(nil).Insert), activeHealthCheckPolicy...)
}

// Intersection mocks base method.
func (m *MockActiveHealthCheckPolicySet) Intersection(set v2sets.ActiveHealthCheckPolicySet) v2sets.ActiveHealthCheckPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.ActiveHealthCheckPolicySet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockActiveHealthCheckPolicySetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockActiveHealthCheckPolicySet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockActiveHealthCheckPolicySet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockActiveHealthCheckPolicySetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockActiveHealthCheckPolicySet)(nil).Keys))
}

// Length mocks base method.
func (m *MockActiveHealthCheckPolicySet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockActiveHealthCheckPolicySetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockActiveHealthCheckPolicySet)(nil).Length))
}

// List mocks base method.
func (m *MockActiveHealthCheckPolicySet) List(filterResource ...func(*v2.ActiveHealthCheckPolicy) bool) []*v2.ActiveHealthCheckPolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.ActiveHealthCheckPolicy)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockActiveHealthCheckPolicySetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockActiveHealthCheckPolicySet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockActiveHealthCheckPolicySet) Map() map[string]*v2.ActiveHealthCheckPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.ActiveHealthCheckPolicy)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockActiveHealthCheckPolicySetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockActiveHealthCheckPolicySet)(nil).Map))
}

// Union mocks base method.
func (m *MockActiveHealthCheckPolicySet) Union(set v2sets.ActiveHealthCheckPolicySet) v2sets.ActiveHealthCheckPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.ActiveHealthCheckPolicySet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockActiveHealthCheckPolicySetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockActiveHealthCheckPolicySet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockActiveHealthCheckPolicySet) UnsortedList(filterResource ...func(*v2.ActiveHealthCheckPolicy) bool) []*v2.ActiveHealthCheckPolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.ActiveHealthCheckPolicy)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockActiveHealthCheckPolicySetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockActiveHealthCheckPolicySet)(nil).UnsortedList), filterResource...)
}

// MockListenerConnectionPolicySet is a mock of ListenerConnectionPolicySet interface.
type MockListenerConnectionPolicySet struct {
	ctrl     *gomock.Controller
	recorder *MockListenerConnectionPolicySetMockRecorder
}

// MockListenerConnectionPolicySetMockRecorder is the mock recorder for MockListenerConnectionPolicySet.
type MockListenerConnectionPolicySetMockRecorder struct {
	mock *MockListenerConnectionPolicySet
}

// NewMockListenerConnectionPolicySet creates a new mock instance.
func NewMockListenerConnectionPolicySet(ctrl *gomock.Controller) *MockListenerConnectionPolicySet {
	mock := &MockListenerConnectionPolicySet{ctrl: ctrl}
	mock.recorder = &MockListenerConnectionPolicySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListenerConnectionPolicySet) EXPECT() *MockListenerConnectionPolicySetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockListenerConnectionPolicySet) Clone() v2sets.ListenerConnectionPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.ListenerConnectionPolicySet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockListenerConnectionPolicySetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockListenerConnectionPolicySet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockListenerConnectionPolicySet) Delete(listenerConnectionPolicy ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", listenerConnectionPolicy)
}

// Delete indicates an expected call of Delete.
func (mr *MockListenerConnectionPolicySetMockRecorder) Delete(listenerConnectionPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockListenerConnectionPolicySet)(nil).Delete), listenerConnectionPolicy)
}

// Delta mocks base method.
func (m *MockListenerConnectionPolicySet) Delta(newSet v2sets.ListenerConnectionPolicySet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockListenerConnectionPolicySetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockListenerConnectionPolicySet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockListenerConnectionPolicySet) Difference(set v2sets.ListenerConnectionPolicySet) v2sets.ListenerConnectionPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.ListenerConnectionPolicySet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockListenerConnectionPolicySetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockListenerConnectionPolicySet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockListenerConnectionPolicySet) Equal(listenerConnectionPolicySet v2sets.ListenerConnectionPolicySet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", listenerConnectionPolicySet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockListenerConnectionPolicySetMockRecorder) Equal(listenerConnectionPolicySet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockListenerConnectionPolicySet)(nil).Equal), listenerConnectionPolicySet)
}

// Find mocks base method.
func (m *MockListenerConnectionPolicySet) Find(id ezkube.ResourceId) (*v2.ListenerConnectionPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.ListenerConnectionPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockListenerConnectionPolicySetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockListenerConnectionPolicySet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockListenerConnectionPolicySet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockListenerConnectionPolicySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockListenerConnectionPolicySet)(nil).Generic))
}

// Has mocks base method.
func (m *MockListenerConnectionPolicySet) Has(listenerConnectionPolicy ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", listenerConnectionPolicy)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockListenerConnectionPolicySetMockRecorder) Has(listenerConnectionPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockListenerConnectionPolicySet)(nil).Has), listenerConnectionPolicy)
}

// Insert mocks base method.
func (m *MockListenerConnectionPolicySet) Insert(listenerConnectionPolicy ...*v2.ListenerConnectionPolicy) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range listenerConnectionPolicy {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockListenerConnectionPolicySetMockRecorder) Insert(listenerConnectionPolicy ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockListenerConnectionPolicySet)(nil).Insert), listenerConnectionPolicy...)
}

// Intersection mocks base method.
func (m *MockListenerConnectionPolicySet) Intersection(set v2sets.ListenerConnectionPolicySet) v2sets.ListenerConnectionPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.ListenerConnectionPolicySet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockListenerConnectionPolicySetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockListenerConnectionPolicySet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockListenerConnectionPolicySet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockListenerConnectionPolicySetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockListenerConnectionPolicySet)(nil).Keys))
}

// Length mocks base method.
func (m *MockListenerConnectionPolicySet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockListenerConnectionPolicySetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockListenerConnectionPolicySet)(nil).Length))
}

// List mocks base method.
func (m *MockListenerConnectionPolicySet) List(filterResource ...func(*v2.ListenerConnectionPolicy) bool) []*v2.ListenerConnectionPolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.ListenerConnectionPolicy)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockListenerConnectionPolicySetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockListenerConnectionPolicySet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockListenerConnectionPolicySet) Map() map[string]*v2.ListenerConnectionPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.ListenerConnectionPolicy)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockListenerConnectionPolicySetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockListenerConnectionPolicySet)(nil).Map))
}

// Union mocks base method.
func (m *MockListenerConnectionPolicySet) Union(set v2sets.ListenerConnectionPolicySet) v2sets.ListenerConnectionPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.ListenerConnectionPolicySet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockListenerConnectionPolicySetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockListenerConnectionPolicySet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockListenerConnectionPolicySet) UnsortedList(filterResource ...func(*v2.ListenerConnectionPolicy) bool) []*v2.ListenerConnectionPolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.ListenerConnectionPolicy)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockListenerConnectionPolicySetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockListenerConnectionPolicySet)(nil).UnsortedList), filterResource...)
}
