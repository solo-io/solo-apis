// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"

	v2 "github.com/solo-io/solo-apis/client-go/resilience.policy.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/client-go/resilience.policy.gloo.solo.io/v2/controller"
)

// MockGraphQLPersistedQueryCachePolicyReconciler is a mock of GraphQLPersistedQueryCachePolicyReconciler interface.
type MockGraphQLPersistedQueryCachePolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLPersistedQueryCachePolicyReconcilerMockRecorder
}

// MockGraphQLPersistedQueryCachePolicyReconcilerMockRecorder is the mock recorder for MockGraphQLPersistedQueryCachePolicyReconciler.
type MockGraphQLPersistedQueryCachePolicyReconcilerMockRecorder struct {
	mock *MockGraphQLPersistedQueryCachePolicyReconciler
}

// NewMockGraphQLPersistedQueryCachePolicyReconciler creates a new mock instance.
func NewMockGraphQLPersistedQueryCachePolicyReconciler(ctrl *gomock.Controller) *MockGraphQLPersistedQueryCachePolicyReconciler {
	mock := &MockGraphQLPersistedQueryCachePolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockGraphQLPersistedQueryCachePolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLPersistedQueryCachePolicyReconciler) EXPECT() *MockGraphQLPersistedQueryCachePolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLPersistedQueryCachePolicy mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicyReconciler) ReconcileGraphQLPersistedQueryCachePolicy(obj *v2.GraphQLPersistedQueryCachePolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLPersistedQueryCachePolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGraphQLPersistedQueryCachePolicy indicates an expected call of ReconcileGraphQLPersistedQueryCachePolicy.
func (mr *MockGraphQLPersistedQueryCachePolicyReconcilerMockRecorder) ReconcileGraphQLPersistedQueryCachePolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLPersistedQueryCachePolicy", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicyReconciler)(nil).ReconcileGraphQLPersistedQueryCachePolicy), obj)
}

// MockGraphQLPersistedQueryCachePolicyDeletionReconciler is a mock of GraphQLPersistedQueryCachePolicyDeletionReconciler interface.
type MockGraphQLPersistedQueryCachePolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLPersistedQueryCachePolicyDeletionReconcilerMockRecorder
}

// MockGraphQLPersistedQueryCachePolicyDeletionReconcilerMockRecorder is the mock recorder for MockGraphQLPersistedQueryCachePolicyDeletionReconciler.
type MockGraphQLPersistedQueryCachePolicyDeletionReconcilerMockRecorder struct {
	mock *MockGraphQLPersistedQueryCachePolicyDeletionReconciler
}

// NewMockGraphQLPersistedQueryCachePolicyDeletionReconciler creates a new mock instance.
func NewMockGraphQLPersistedQueryCachePolicyDeletionReconciler(ctrl *gomock.Controller) *MockGraphQLPersistedQueryCachePolicyDeletionReconciler {
	mock := &MockGraphQLPersistedQueryCachePolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockGraphQLPersistedQueryCachePolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLPersistedQueryCachePolicyDeletionReconciler) EXPECT() *MockGraphQLPersistedQueryCachePolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLPersistedQueryCachePolicyDeletion mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicyDeletionReconciler) ReconcileGraphQLPersistedQueryCachePolicyDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLPersistedQueryCachePolicyDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGraphQLPersistedQueryCachePolicyDeletion indicates an expected call of ReconcileGraphQLPersistedQueryCachePolicyDeletion.
func (mr *MockGraphQLPersistedQueryCachePolicyDeletionReconcilerMockRecorder) ReconcileGraphQLPersistedQueryCachePolicyDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLPersistedQueryCachePolicyDeletion", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicyDeletionReconciler)(nil).ReconcileGraphQLPersistedQueryCachePolicyDeletion), req)
}

// MockGraphQLPersistedQueryCachePolicyFinalizer is a mock of GraphQLPersistedQueryCachePolicyFinalizer interface.
type MockGraphQLPersistedQueryCachePolicyFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLPersistedQueryCachePolicyFinalizerMockRecorder
}

// MockGraphQLPersistedQueryCachePolicyFinalizerMockRecorder is the mock recorder for MockGraphQLPersistedQueryCachePolicyFinalizer.
type MockGraphQLPersistedQueryCachePolicyFinalizerMockRecorder struct {
	mock *MockGraphQLPersistedQueryCachePolicyFinalizer
}

// NewMockGraphQLPersistedQueryCachePolicyFinalizer creates a new mock instance.
func NewMockGraphQLPersistedQueryCachePolicyFinalizer(ctrl *gomock.Controller) *MockGraphQLPersistedQueryCachePolicyFinalizer {
	mock := &MockGraphQLPersistedQueryCachePolicyFinalizer{ctrl: ctrl}
	mock.recorder = &MockGraphQLPersistedQueryCachePolicyFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLPersistedQueryCachePolicyFinalizer) EXPECT() *MockGraphQLPersistedQueryCachePolicyFinalizerMockRecorder {
	return m.recorder
}

// FinalizeGraphQLPersistedQueryCachePolicy mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicyFinalizer) FinalizeGraphQLPersistedQueryCachePolicy(obj *v2.GraphQLPersistedQueryCachePolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeGraphQLPersistedQueryCachePolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeGraphQLPersistedQueryCachePolicy indicates an expected call of FinalizeGraphQLPersistedQueryCachePolicy.
func (mr *MockGraphQLPersistedQueryCachePolicyFinalizerMockRecorder) FinalizeGraphQLPersistedQueryCachePolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeGraphQLPersistedQueryCachePolicy", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicyFinalizer)(nil).FinalizeGraphQLPersistedQueryCachePolicy), obj)
}

// GraphQLPersistedQueryCachePolicyFinalizerName mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicyFinalizer) GraphQLPersistedQueryCachePolicyFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphQLPersistedQueryCachePolicyFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GraphQLPersistedQueryCachePolicyFinalizerName indicates an expected call of GraphQLPersistedQueryCachePolicyFinalizerName.
func (mr *MockGraphQLPersistedQueryCachePolicyFinalizerMockRecorder) GraphQLPersistedQueryCachePolicyFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphQLPersistedQueryCachePolicyFinalizerName", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicyFinalizer)(nil).GraphQLPersistedQueryCachePolicyFinalizerName))
}

// ReconcileGraphQLPersistedQueryCachePolicy mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicyFinalizer) ReconcileGraphQLPersistedQueryCachePolicy(obj *v2.GraphQLPersistedQueryCachePolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLPersistedQueryCachePolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGraphQLPersistedQueryCachePolicy indicates an expected call of ReconcileGraphQLPersistedQueryCachePolicy.
func (mr *MockGraphQLPersistedQueryCachePolicyFinalizerMockRecorder) ReconcileGraphQLPersistedQueryCachePolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLPersistedQueryCachePolicy", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicyFinalizer)(nil).ReconcileGraphQLPersistedQueryCachePolicy), obj)
}

// MockGraphQLPersistedQueryCachePolicyReconcileLoop is a mock of GraphQLPersistedQueryCachePolicyReconcileLoop interface.
type MockGraphQLPersistedQueryCachePolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLPersistedQueryCachePolicyReconcileLoopMockRecorder
}

// MockGraphQLPersistedQueryCachePolicyReconcileLoopMockRecorder is the mock recorder for MockGraphQLPersistedQueryCachePolicyReconcileLoop.
type MockGraphQLPersistedQueryCachePolicyReconcileLoopMockRecorder struct {
	mock *MockGraphQLPersistedQueryCachePolicyReconcileLoop
}

// NewMockGraphQLPersistedQueryCachePolicyReconcileLoop creates a new mock instance.
func NewMockGraphQLPersistedQueryCachePolicyReconcileLoop(ctrl *gomock.Controller) *MockGraphQLPersistedQueryCachePolicyReconcileLoop {
	mock := &MockGraphQLPersistedQueryCachePolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockGraphQLPersistedQueryCachePolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLPersistedQueryCachePolicyReconcileLoop) EXPECT() *MockGraphQLPersistedQueryCachePolicyReconcileLoopMockRecorder {
	return m.recorder
}

// RunGraphQLPersistedQueryCachePolicyReconciler mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicyReconcileLoop) RunGraphQLPersistedQueryCachePolicyReconciler(ctx context.Context, rec controller.GraphQLPersistedQueryCachePolicyReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunGraphQLPersistedQueryCachePolicyReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunGraphQLPersistedQueryCachePolicyReconciler indicates an expected call of RunGraphQLPersistedQueryCachePolicyReconciler.
func (mr *MockGraphQLPersistedQueryCachePolicyReconcileLoopMockRecorder) RunGraphQLPersistedQueryCachePolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunGraphQLPersistedQueryCachePolicyReconciler", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicyReconcileLoop)(nil).RunGraphQLPersistedQueryCachePolicyReconciler), varargs...)
}

// MockFailoverPolicyReconciler is a mock of FailoverPolicyReconciler interface.
type MockFailoverPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockFailoverPolicyReconcilerMockRecorder
}

// MockFailoverPolicyReconcilerMockRecorder is the mock recorder for MockFailoverPolicyReconciler.
type MockFailoverPolicyReconcilerMockRecorder struct {
	mock *MockFailoverPolicyReconciler
}

// NewMockFailoverPolicyReconciler creates a new mock instance.
func NewMockFailoverPolicyReconciler(ctrl *gomock.Controller) *MockFailoverPolicyReconciler {
	mock := &MockFailoverPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockFailoverPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailoverPolicyReconciler) EXPECT() *MockFailoverPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileFailoverPolicy mocks base method.
func (m *MockFailoverPolicyReconciler) ReconcileFailoverPolicy(obj *v2.FailoverPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileFailoverPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileFailoverPolicy indicates an expected call of ReconcileFailoverPolicy.
func (mr *MockFailoverPolicyReconcilerMockRecorder) ReconcileFailoverPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileFailoverPolicy", reflect.TypeOf((*MockFailoverPolicyReconciler)(nil).ReconcileFailoverPolicy), obj)
}

// MockFailoverPolicyDeletionReconciler is a mock of FailoverPolicyDeletionReconciler interface.
type MockFailoverPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockFailoverPolicyDeletionReconcilerMockRecorder
}

// MockFailoverPolicyDeletionReconcilerMockRecorder is the mock recorder for MockFailoverPolicyDeletionReconciler.
type MockFailoverPolicyDeletionReconcilerMockRecorder struct {
	mock *MockFailoverPolicyDeletionReconciler
}

// NewMockFailoverPolicyDeletionReconciler creates a new mock instance.
func NewMockFailoverPolicyDeletionReconciler(ctrl *gomock.Controller) *MockFailoverPolicyDeletionReconciler {
	mock := &MockFailoverPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockFailoverPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailoverPolicyDeletionReconciler) EXPECT() *MockFailoverPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileFailoverPolicyDeletion mocks base method.
func (m *MockFailoverPolicyDeletionReconciler) ReconcileFailoverPolicyDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileFailoverPolicyDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileFailoverPolicyDeletion indicates an expected call of ReconcileFailoverPolicyDeletion.
func (mr *MockFailoverPolicyDeletionReconcilerMockRecorder) ReconcileFailoverPolicyDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileFailoverPolicyDeletion", reflect.TypeOf((*MockFailoverPolicyDeletionReconciler)(nil).ReconcileFailoverPolicyDeletion), req)
}

// MockFailoverPolicyFinalizer is a mock of FailoverPolicyFinalizer interface.
type MockFailoverPolicyFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockFailoverPolicyFinalizerMockRecorder
}

// MockFailoverPolicyFinalizerMockRecorder is the mock recorder for MockFailoverPolicyFinalizer.
type MockFailoverPolicyFinalizerMockRecorder struct {
	mock *MockFailoverPolicyFinalizer
}

// NewMockFailoverPolicyFinalizer creates a new mock instance.
func NewMockFailoverPolicyFinalizer(ctrl *gomock.Controller) *MockFailoverPolicyFinalizer {
	mock := &MockFailoverPolicyFinalizer{ctrl: ctrl}
	mock.recorder = &MockFailoverPolicyFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailoverPolicyFinalizer) EXPECT() *MockFailoverPolicyFinalizerMockRecorder {
	return m.recorder
}

// FailoverPolicyFinalizerName mocks base method.
func (m *MockFailoverPolicyFinalizer) FailoverPolicyFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailoverPolicyFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FailoverPolicyFinalizerName indicates an expected call of FailoverPolicyFinalizerName.
func (mr *MockFailoverPolicyFinalizerMockRecorder) FailoverPolicyFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailoverPolicyFinalizerName", reflect.TypeOf((*MockFailoverPolicyFinalizer)(nil).FailoverPolicyFinalizerName))
}

// FinalizeFailoverPolicy mocks base method.
func (m *MockFailoverPolicyFinalizer) FinalizeFailoverPolicy(obj *v2.FailoverPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeFailoverPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeFailoverPolicy indicates an expected call of FinalizeFailoverPolicy.
func (mr *MockFailoverPolicyFinalizerMockRecorder) FinalizeFailoverPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeFailoverPolicy", reflect.TypeOf((*MockFailoverPolicyFinalizer)(nil).FinalizeFailoverPolicy), obj)
}

// ReconcileFailoverPolicy mocks base method.
func (m *MockFailoverPolicyFinalizer) ReconcileFailoverPolicy(obj *v2.FailoverPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileFailoverPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileFailoverPolicy indicates an expected call of ReconcileFailoverPolicy.
func (mr *MockFailoverPolicyFinalizerMockRecorder) ReconcileFailoverPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileFailoverPolicy", reflect.TypeOf((*MockFailoverPolicyFinalizer)(nil).ReconcileFailoverPolicy), obj)
}

// MockFailoverPolicyReconcileLoop is a mock of FailoverPolicyReconcileLoop interface.
type MockFailoverPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockFailoverPolicyReconcileLoopMockRecorder
}

// MockFailoverPolicyReconcileLoopMockRecorder is the mock recorder for MockFailoverPolicyReconcileLoop.
type MockFailoverPolicyReconcileLoopMockRecorder struct {
	mock *MockFailoverPolicyReconcileLoop
}

// NewMockFailoverPolicyReconcileLoop creates a new mock instance.
func NewMockFailoverPolicyReconcileLoop(ctrl *gomock.Controller) *MockFailoverPolicyReconcileLoop {
	mock := &MockFailoverPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockFailoverPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailoverPolicyReconcileLoop) EXPECT() *MockFailoverPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// RunFailoverPolicyReconciler mocks base method.
func (m *MockFailoverPolicyReconcileLoop) RunFailoverPolicyReconciler(ctx context.Context, rec controller.FailoverPolicyReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunFailoverPolicyReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunFailoverPolicyReconciler indicates an expected call of RunFailoverPolicyReconciler.
func (mr *MockFailoverPolicyReconcileLoopMockRecorder) RunFailoverPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunFailoverPolicyReconciler", reflect.TypeOf((*MockFailoverPolicyReconcileLoop)(nil).RunFailoverPolicyReconciler), varargs...)
}

// MockOutlierDetectionPolicyReconciler is a mock of OutlierDetectionPolicyReconciler interface.
type MockOutlierDetectionPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockOutlierDetectionPolicyReconcilerMockRecorder
}

// MockOutlierDetectionPolicyReconcilerMockRecorder is the mock recorder for MockOutlierDetectionPolicyReconciler.
type MockOutlierDetectionPolicyReconcilerMockRecorder struct {
	mock *MockOutlierDetectionPolicyReconciler
}

// NewMockOutlierDetectionPolicyReconciler creates a new mock instance.
func NewMockOutlierDetectionPolicyReconciler(ctrl *gomock.Controller) *MockOutlierDetectionPolicyReconciler {
	mock := &MockOutlierDetectionPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockOutlierDetectionPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutlierDetectionPolicyReconciler) EXPECT() *MockOutlierDetectionPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileOutlierDetectionPolicy mocks base method.
func (m *MockOutlierDetectionPolicyReconciler) ReconcileOutlierDetectionPolicy(obj *v2.OutlierDetectionPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileOutlierDetectionPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileOutlierDetectionPolicy indicates an expected call of ReconcileOutlierDetectionPolicy.
func (mr *MockOutlierDetectionPolicyReconcilerMockRecorder) ReconcileOutlierDetectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileOutlierDetectionPolicy", reflect.TypeOf((*MockOutlierDetectionPolicyReconciler)(nil).ReconcileOutlierDetectionPolicy), obj)
}

// MockOutlierDetectionPolicyDeletionReconciler is a mock of OutlierDetectionPolicyDeletionReconciler interface.
type MockOutlierDetectionPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockOutlierDetectionPolicyDeletionReconcilerMockRecorder
}

// MockOutlierDetectionPolicyDeletionReconcilerMockRecorder is the mock recorder for MockOutlierDetectionPolicyDeletionReconciler.
type MockOutlierDetectionPolicyDeletionReconcilerMockRecorder struct {
	mock *MockOutlierDetectionPolicyDeletionReconciler
}

// NewMockOutlierDetectionPolicyDeletionReconciler creates a new mock instance.
func NewMockOutlierDetectionPolicyDeletionReconciler(ctrl *gomock.Controller) *MockOutlierDetectionPolicyDeletionReconciler {
	mock := &MockOutlierDetectionPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockOutlierDetectionPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutlierDetectionPolicyDeletionReconciler) EXPECT() *MockOutlierDetectionPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileOutlierDetectionPolicyDeletion mocks base method.
func (m *MockOutlierDetectionPolicyDeletionReconciler) ReconcileOutlierDetectionPolicyDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileOutlierDetectionPolicyDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileOutlierDetectionPolicyDeletion indicates an expected call of ReconcileOutlierDetectionPolicyDeletion.
func (mr *MockOutlierDetectionPolicyDeletionReconcilerMockRecorder) ReconcileOutlierDetectionPolicyDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileOutlierDetectionPolicyDeletion", reflect.TypeOf((*MockOutlierDetectionPolicyDeletionReconciler)(nil).ReconcileOutlierDetectionPolicyDeletion), req)
}

// MockOutlierDetectionPolicyFinalizer is a mock of OutlierDetectionPolicyFinalizer interface.
type MockOutlierDetectionPolicyFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockOutlierDetectionPolicyFinalizerMockRecorder
}

// MockOutlierDetectionPolicyFinalizerMockRecorder is the mock recorder for MockOutlierDetectionPolicyFinalizer.
type MockOutlierDetectionPolicyFinalizerMockRecorder struct {
	mock *MockOutlierDetectionPolicyFinalizer
}

// NewMockOutlierDetectionPolicyFinalizer creates a new mock instance.
func NewMockOutlierDetectionPolicyFinalizer(ctrl *gomock.Controller) *MockOutlierDetectionPolicyFinalizer {
	mock := &MockOutlierDetectionPolicyFinalizer{ctrl: ctrl}
	mock.recorder = &MockOutlierDetectionPolicyFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutlierDetectionPolicyFinalizer) EXPECT() *MockOutlierDetectionPolicyFinalizerMockRecorder {
	return m.recorder
}

// FinalizeOutlierDetectionPolicy mocks base method.
func (m *MockOutlierDetectionPolicyFinalizer) FinalizeOutlierDetectionPolicy(obj *v2.OutlierDetectionPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeOutlierDetectionPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeOutlierDetectionPolicy indicates an expected call of FinalizeOutlierDetectionPolicy.
func (mr *MockOutlierDetectionPolicyFinalizerMockRecorder) FinalizeOutlierDetectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeOutlierDetectionPolicy", reflect.TypeOf((*MockOutlierDetectionPolicyFinalizer)(nil).FinalizeOutlierDetectionPolicy), obj)
}

// OutlierDetectionPolicyFinalizerName mocks base method.
func (m *MockOutlierDetectionPolicyFinalizer) OutlierDetectionPolicyFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutlierDetectionPolicyFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// OutlierDetectionPolicyFinalizerName indicates an expected call of OutlierDetectionPolicyFinalizerName.
func (mr *MockOutlierDetectionPolicyFinalizerMockRecorder) OutlierDetectionPolicyFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutlierDetectionPolicyFinalizerName", reflect.TypeOf((*MockOutlierDetectionPolicyFinalizer)(nil).OutlierDetectionPolicyFinalizerName))
}

// ReconcileOutlierDetectionPolicy mocks base method.
func (m *MockOutlierDetectionPolicyFinalizer) ReconcileOutlierDetectionPolicy(obj *v2.OutlierDetectionPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileOutlierDetectionPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileOutlierDetectionPolicy indicates an expected call of ReconcileOutlierDetectionPolicy.
func (mr *MockOutlierDetectionPolicyFinalizerMockRecorder) ReconcileOutlierDetectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileOutlierDetectionPolicy", reflect.TypeOf((*MockOutlierDetectionPolicyFinalizer)(nil).ReconcileOutlierDetectionPolicy), obj)
}

// MockOutlierDetectionPolicyReconcileLoop is a mock of OutlierDetectionPolicyReconcileLoop interface.
type MockOutlierDetectionPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockOutlierDetectionPolicyReconcileLoopMockRecorder
}

// MockOutlierDetectionPolicyReconcileLoopMockRecorder is the mock recorder for MockOutlierDetectionPolicyReconcileLoop.
type MockOutlierDetectionPolicyReconcileLoopMockRecorder struct {
	mock *MockOutlierDetectionPolicyReconcileLoop
}

// NewMockOutlierDetectionPolicyReconcileLoop creates a new mock instance.
func NewMockOutlierDetectionPolicyReconcileLoop(ctrl *gomock.Controller) *MockOutlierDetectionPolicyReconcileLoop {
	mock := &MockOutlierDetectionPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockOutlierDetectionPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutlierDetectionPolicyReconcileLoop) EXPECT() *MockOutlierDetectionPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// RunOutlierDetectionPolicyReconciler mocks base method.
func (m *MockOutlierDetectionPolicyReconcileLoop) RunOutlierDetectionPolicyReconciler(ctx context.Context, rec controller.OutlierDetectionPolicyReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunOutlierDetectionPolicyReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunOutlierDetectionPolicyReconciler indicates an expected call of RunOutlierDetectionPolicyReconciler.
func (mr *MockOutlierDetectionPolicyReconcileLoopMockRecorder) RunOutlierDetectionPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunOutlierDetectionPolicyReconciler", reflect.TypeOf((*MockOutlierDetectionPolicyReconcileLoop)(nil).RunOutlierDetectionPolicyReconciler), varargs...)
}

// MockAdaptiveRequestConcurrencyPolicyReconciler is a mock of AdaptiveRequestConcurrencyPolicyReconciler interface.
type MockAdaptiveRequestConcurrencyPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockAdaptiveRequestConcurrencyPolicyReconcilerMockRecorder
}

// MockAdaptiveRequestConcurrencyPolicyReconcilerMockRecorder is the mock recorder for MockAdaptiveRequestConcurrencyPolicyReconciler.
type MockAdaptiveRequestConcurrencyPolicyReconcilerMockRecorder struct {
	mock *MockAdaptiveRequestConcurrencyPolicyReconciler
}

// NewMockAdaptiveRequestConcurrencyPolicyReconciler creates a new mock instance.
func NewMockAdaptiveRequestConcurrencyPolicyReconciler(ctrl *gomock.Controller) *MockAdaptiveRequestConcurrencyPolicyReconciler {
	mock := &MockAdaptiveRequestConcurrencyPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockAdaptiveRequestConcurrencyPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdaptiveRequestConcurrencyPolicyReconciler) EXPECT() *MockAdaptiveRequestConcurrencyPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileAdaptiveRequestConcurrencyPolicy mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicyReconciler) ReconcileAdaptiveRequestConcurrencyPolicy(obj *v2.AdaptiveRequestConcurrencyPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileAdaptiveRequestConcurrencyPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileAdaptiveRequestConcurrencyPolicy indicates an expected call of ReconcileAdaptiveRequestConcurrencyPolicy.
func (mr *MockAdaptiveRequestConcurrencyPolicyReconcilerMockRecorder) ReconcileAdaptiveRequestConcurrencyPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileAdaptiveRequestConcurrencyPolicy", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicyReconciler)(nil).ReconcileAdaptiveRequestConcurrencyPolicy), obj)
}

// MockAdaptiveRequestConcurrencyPolicyDeletionReconciler is a mock of AdaptiveRequestConcurrencyPolicyDeletionReconciler interface.
type MockAdaptiveRequestConcurrencyPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockAdaptiveRequestConcurrencyPolicyDeletionReconcilerMockRecorder
}

// MockAdaptiveRequestConcurrencyPolicyDeletionReconcilerMockRecorder is the mock recorder for MockAdaptiveRequestConcurrencyPolicyDeletionReconciler.
type MockAdaptiveRequestConcurrencyPolicyDeletionReconcilerMockRecorder struct {
	mock *MockAdaptiveRequestConcurrencyPolicyDeletionReconciler
}

// NewMockAdaptiveRequestConcurrencyPolicyDeletionReconciler creates a new mock instance.
func NewMockAdaptiveRequestConcurrencyPolicyDeletionReconciler(ctrl *gomock.Controller) *MockAdaptiveRequestConcurrencyPolicyDeletionReconciler {
	mock := &MockAdaptiveRequestConcurrencyPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockAdaptiveRequestConcurrencyPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdaptiveRequestConcurrencyPolicyDeletionReconciler) EXPECT() *MockAdaptiveRequestConcurrencyPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileAdaptiveRequestConcurrencyPolicyDeletion mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicyDeletionReconciler) ReconcileAdaptiveRequestConcurrencyPolicyDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileAdaptiveRequestConcurrencyPolicyDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileAdaptiveRequestConcurrencyPolicyDeletion indicates an expected call of ReconcileAdaptiveRequestConcurrencyPolicyDeletion.
func (mr *MockAdaptiveRequestConcurrencyPolicyDeletionReconcilerMockRecorder) ReconcileAdaptiveRequestConcurrencyPolicyDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileAdaptiveRequestConcurrencyPolicyDeletion", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicyDeletionReconciler)(nil).ReconcileAdaptiveRequestConcurrencyPolicyDeletion), req)
}

// MockAdaptiveRequestConcurrencyPolicyFinalizer is a mock of AdaptiveRequestConcurrencyPolicyFinalizer interface.
type MockAdaptiveRequestConcurrencyPolicyFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockAdaptiveRequestConcurrencyPolicyFinalizerMockRecorder
}

// MockAdaptiveRequestConcurrencyPolicyFinalizerMockRecorder is the mock recorder for MockAdaptiveRequestConcurrencyPolicyFinalizer.
type MockAdaptiveRequestConcurrencyPolicyFinalizerMockRecorder struct {
	mock *MockAdaptiveRequestConcurrencyPolicyFinalizer
}

// NewMockAdaptiveRequestConcurrencyPolicyFinalizer creates a new mock instance.
func NewMockAdaptiveRequestConcurrencyPolicyFinalizer(ctrl *gomock.Controller) *MockAdaptiveRequestConcurrencyPolicyFinalizer {
	mock := &MockAdaptiveRequestConcurrencyPolicyFinalizer{ctrl: ctrl}
	mock.recorder = &MockAdaptiveRequestConcurrencyPolicyFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdaptiveRequestConcurrencyPolicyFinalizer) EXPECT() *MockAdaptiveRequestConcurrencyPolicyFinalizerMockRecorder {
	return m.recorder
}

// AdaptiveRequestConcurrencyPolicyFinalizerName mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicyFinalizer) AdaptiveRequestConcurrencyPolicyFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdaptiveRequestConcurrencyPolicyFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// AdaptiveRequestConcurrencyPolicyFinalizerName indicates an expected call of AdaptiveRequestConcurrencyPolicyFinalizerName.
func (mr *MockAdaptiveRequestConcurrencyPolicyFinalizerMockRecorder) AdaptiveRequestConcurrencyPolicyFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdaptiveRequestConcurrencyPolicyFinalizerName", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicyFinalizer)(nil).AdaptiveRequestConcurrencyPolicyFinalizerName))
}

// FinalizeAdaptiveRequestConcurrencyPolicy mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicyFinalizer) FinalizeAdaptiveRequestConcurrencyPolicy(obj *v2.AdaptiveRequestConcurrencyPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeAdaptiveRequestConcurrencyPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeAdaptiveRequestConcurrencyPolicy indicates an expected call of FinalizeAdaptiveRequestConcurrencyPolicy.
func (mr *MockAdaptiveRequestConcurrencyPolicyFinalizerMockRecorder) FinalizeAdaptiveRequestConcurrencyPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeAdaptiveRequestConcurrencyPolicy", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicyFinalizer)(nil).FinalizeAdaptiveRequestConcurrencyPolicy), obj)
}

// ReconcileAdaptiveRequestConcurrencyPolicy mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicyFinalizer) ReconcileAdaptiveRequestConcurrencyPolicy(obj *v2.AdaptiveRequestConcurrencyPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileAdaptiveRequestConcurrencyPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileAdaptiveRequestConcurrencyPolicy indicates an expected call of ReconcileAdaptiveRequestConcurrencyPolicy.
func (mr *MockAdaptiveRequestConcurrencyPolicyFinalizerMockRecorder) ReconcileAdaptiveRequestConcurrencyPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileAdaptiveRequestConcurrencyPolicy", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicyFinalizer)(nil).ReconcileAdaptiveRequestConcurrencyPolicy), obj)
}

// MockAdaptiveRequestConcurrencyPolicyReconcileLoop is a mock of AdaptiveRequestConcurrencyPolicyReconcileLoop interface.
type MockAdaptiveRequestConcurrencyPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockAdaptiveRequestConcurrencyPolicyReconcileLoopMockRecorder
}

// MockAdaptiveRequestConcurrencyPolicyReconcileLoopMockRecorder is the mock recorder for MockAdaptiveRequestConcurrencyPolicyReconcileLoop.
type MockAdaptiveRequestConcurrencyPolicyReconcileLoopMockRecorder struct {
	mock *MockAdaptiveRequestConcurrencyPolicyReconcileLoop
}

// NewMockAdaptiveRequestConcurrencyPolicyReconcileLoop creates a new mock instance.
func NewMockAdaptiveRequestConcurrencyPolicyReconcileLoop(ctrl *gomock.Controller) *MockAdaptiveRequestConcurrencyPolicyReconcileLoop {
	mock := &MockAdaptiveRequestConcurrencyPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockAdaptiveRequestConcurrencyPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdaptiveRequestConcurrencyPolicyReconcileLoop) EXPECT() *MockAdaptiveRequestConcurrencyPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// RunAdaptiveRequestConcurrencyPolicyReconciler mocks base method.
func (m *MockAdaptiveRequestConcurrencyPolicyReconcileLoop) RunAdaptiveRequestConcurrencyPolicyReconciler(ctx context.Context, rec controller.AdaptiveRequestConcurrencyPolicyReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunAdaptiveRequestConcurrencyPolicyReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunAdaptiveRequestConcurrencyPolicyReconciler indicates an expected call of RunAdaptiveRequestConcurrencyPolicyReconciler.
func (mr *MockAdaptiveRequestConcurrencyPolicyReconcileLoopMockRecorder) RunAdaptiveRequestConcurrencyPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAdaptiveRequestConcurrencyPolicyReconciler", reflect.TypeOf((*MockAdaptiveRequestConcurrencyPolicyReconcileLoop)(nil).RunAdaptiveRequestConcurrencyPolicyReconciler), varargs...)
}

// MockFaultInjectionPolicyReconciler is a mock of FaultInjectionPolicyReconciler interface.
type MockFaultInjectionPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockFaultInjectionPolicyReconcilerMockRecorder
}

// MockFaultInjectionPolicyReconcilerMockRecorder is the mock recorder for MockFaultInjectionPolicyReconciler.
type MockFaultInjectionPolicyReconcilerMockRecorder struct {
	mock *MockFaultInjectionPolicyReconciler
}

// NewMockFaultInjectionPolicyReconciler creates a new mock instance.
func NewMockFaultInjectionPolicyReconciler(ctrl *gomock.Controller) *MockFaultInjectionPolicyReconciler {
	mock := &MockFaultInjectionPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockFaultInjectionPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFaultInjectionPolicyReconciler) EXPECT() *MockFaultInjectionPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileFaultInjectionPolicy mocks base method.
func (m *MockFaultInjectionPolicyReconciler) ReconcileFaultInjectionPolicy(obj *v2.FaultInjectionPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileFaultInjectionPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileFaultInjectionPolicy indicates an expected call of ReconcileFaultInjectionPolicy.
func (mr *MockFaultInjectionPolicyReconcilerMockRecorder) ReconcileFaultInjectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileFaultInjectionPolicy", reflect.TypeOf((*MockFaultInjectionPolicyReconciler)(nil).ReconcileFaultInjectionPolicy), obj)
}

// MockFaultInjectionPolicyDeletionReconciler is a mock of FaultInjectionPolicyDeletionReconciler interface.
type MockFaultInjectionPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockFaultInjectionPolicyDeletionReconcilerMockRecorder
}

// MockFaultInjectionPolicyDeletionReconcilerMockRecorder is the mock recorder for MockFaultInjectionPolicyDeletionReconciler.
type MockFaultInjectionPolicyDeletionReconcilerMockRecorder struct {
	mock *MockFaultInjectionPolicyDeletionReconciler
}

// NewMockFaultInjectionPolicyDeletionReconciler creates a new mock instance.
func NewMockFaultInjectionPolicyDeletionReconciler(ctrl *gomock.Controller) *MockFaultInjectionPolicyDeletionReconciler {
	mock := &MockFaultInjectionPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockFaultInjectionPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFaultInjectionPolicyDeletionReconciler) EXPECT() *MockFaultInjectionPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileFaultInjectionPolicyDeletion mocks base method.
func (m *MockFaultInjectionPolicyDeletionReconciler) ReconcileFaultInjectionPolicyDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileFaultInjectionPolicyDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileFaultInjectionPolicyDeletion indicates an expected call of ReconcileFaultInjectionPolicyDeletion.
func (mr *MockFaultInjectionPolicyDeletionReconcilerMockRecorder) ReconcileFaultInjectionPolicyDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileFaultInjectionPolicyDeletion", reflect.TypeOf((*MockFaultInjectionPolicyDeletionReconciler)(nil).ReconcileFaultInjectionPolicyDeletion), req)
}

// MockFaultInjectionPolicyFinalizer is a mock of FaultInjectionPolicyFinalizer interface.
type MockFaultInjectionPolicyFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockFaultInjectionPolicyFinalizerMockRecorder
}

// MockFaultInjectionPolicyFinalizerMockRecorder is the mock recorder for MockFaultInjectionPolicyFinalizer.
type MockFaultInjectionPolicyFinalizerMockRecorder struct {
	mock *MockFaultInjectionPolicyFinalizer
}

// NewMockFaultInjectionPolicyFinalizer creates a new mock instance.
func NewMockFaultInjectionPolicyFinalizer(ctrl *gomock.Controller) *MockFaultInjectionPolicyFinalizer {
	mock := &MockFaultInjectionPolicyFinalizer{ctrl: ctrl}
	mock.recorder = &MockFaultInjectionPolicyFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFaultInjectionPolicyFinalizer) EXPECT() *MockFaultInjectionPolicyFinalizerMockRecorder {
	return m.recorder
}

// FaultInjectionPolicyFinalizerName mocks base method.
func (m *MockFaultInjectionPolicyFinalizer) FaultInjectionPolicyFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FaultInjectionPolicyFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FaultInjectionPolicyFinalizerName indicates an expected call of FaultInjectionPolicyFinalizerName.
func (mr *MockFaultInjectionPolicyFinalizerMockRecorder) FaultInjectionPolicyFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FaultInjectionPolicyFinalizerName", reflect.TypeOf((*MockFaultInjectionPolicyFinalizer)(nil).FaultInjectionPolicyFinalizerName))
}

// FinalizeFaultInjectionPolicy mocks base method.
func (m *MockFaultInjectionPolicyFinalizer) FinalizeFaultInjectionPolicy(obj *v2.FaultInjectionPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeFaultInjectionPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeFaultInjectionPolicy indicates an expected call of FinalizeFaultInjectionPolicy.
func (mr *MockFaultInjectionPolicyFinalizerMockRecorder) FinalizeFaultInjectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeFaultInjectionPolicy", reflect.TypeOf((*MockFaultInjectionPolicyFinalizer)(nil).FinalizeFaultInjectionPolicy), obj)
}

// ReconcileFaultInjectionPolicy mocks base method.
func (m *MockFaultInjectionPolicyFinalizer) ReconcileFaultInjectionPolicy(obj *v2.FaultInjectionPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileFaultInjectionPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileFaultInjectionPolicy indicates an expected call of ReconcileFaultInjectionPolicy.
func (mr *MockFaultInjectionPolicyFinalizerMockRecorder) ReconcileFaultInjectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileFaultInjectionPolicy", reflect.TypeOf((*MockFaultInjectionPolicyFinalizer)(nil).ReconcileFaultInjectionPolicy), obj)
}

// MockFaultInjectionPolicyReconcileLoop is a mock of FaultInjectionPolicyReconcileLoop interface.
type MockFaultInjectionPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockFaultInjectionPolicyReconcileLoopMockRecorder
}

// MockFaultInjectionPolicyReconcileLoopMockRecorder is the mock recorder for MockFaultInjectionPolicyReconcileLoop.
type MockFaultInjectionPolicyReconcileLoopMockRecorder struct {
	mock *MockFaultInjectionPolicyReconcileLoop
}

// NewMockFaultInjectionPolicyReconcileLoop creates a new mock instance.
func NewMockFaultInjectionPolicyReconcileLoop(ctrl *gomock.Controller) *MockFaultInjectionPolicyReconcileLoop {
	mock := &MockFaultInjectionPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockFaultInjectionPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFaultInjectionPolicyReconcileLoop) EXPECT() *MockFaultInjectionPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// RunFaultInjectionPolicyReconciler mocks base method.
func (m *MockFaultInjectionPolicyReconcileLoop) RunFaultInjectionPolicyReconciler(ctx context.Context, rec controller.FaultInjectionPolicyReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunFaultInjectionPolicyReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunFaultInjectionPolicyReconciler indicates an expected call of RunFaultInjectionPolicyReconciler.
func (mr *MockFaultInjectionPolicyReconcileLoopMockRecorder) RunFaultInjectionPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunFaultInjectionPolicyReconciler", reflect.TypeOf((*MockFaultInjectionPolicyReconcileLoop)(nil).RunFaultInjectionPolicyReconciler), varargs...)
}

// MockRetryTimeoutPolicyReconciler is a mock of RetryTimeoutPolicyReconciler interface.
type MockRetryTimeoutPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockRetryTimeoutPolicyReconcilerMockRecorder
}

// MockRetryTimeoutPolicyReconcilerMockRecorder is the mock recorder for MockRetryTimeoutPolicyReconciler.
type MockRetryTimeoutPolicyReconcilerMockRecorder struct {
	mock *MockRetryTimeoutPolicyReconciler
}

// NewMockRetryTimeoutPolicyReconciler creates a new mock instance.
func NewMockRetryTimeoutPolicyReconciler(ctrl *gomock.Controller) *MockRetryTimeoutPolicyReconciler {
	mock := &MockRetryTimeoutPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockRetryTimeoutPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryTimeoutPolicyReconciler) EXPECT() *MockRetryTimeoutPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRetryTimeoutPolicy mocks base method.
func (m *MockRetryTimeoutPolicyReconciler) ReconcileRetryTimeoutPolicy(obj *v2.RetryTimeoutPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRetryTimeoutPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRetryTimeoutPolicy indicates an expected call of ReconcileRetryTimeoutPolicy.
func (mr *MockRetryTimeoutPolicyReconcilerMockRecorder) ReconcileRetryTimeoutPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRetryTimeoutPolicy", reflect.TypeOf((*MockRetryTimeoutPolicyReconciler)(nil).ReconcileRetryTimeoutPolicy), obj)
}

// MockRetryTimeoutPolicyDeletionReconciler is a mock of RetryTimeoutPolicyDeletionReconciler interface.
type MockRetryTimeoutPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockRetryTimeoutPolicyDeletionReconcilerMockRecorder
}

// MockRetryTimeoutPolicyDeletionReconcilerMockRecorder is the mock recorder for MockRetryTimeoutPolicyDeletionReconciler.
type MockRetryTimeoutPolicyDeletionReconcilerMockRecorder struct {
	mock *MockRetryTimeoutPolicyDeletionReconciler
}

// NewMockRetryTimeoutPolicyDeletionReconciler creates a new mock instance.
func NewMockRetryTimeoutPolicyDeletionReconciler(ctrl *gomock.Controller) *MockRetryTimeoutPolicyDeletionReconciler {
	mock := &MockRetryTimeoutPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockRetryTimeoutPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryTimeoutPolicyDeletionReconciler) EXPECT() *MockRetryTimeoutPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRetryTimeoutPolicyDeletion mocks base method.
func (m *MockRetryTimeoutPolicyDeletionReconciler) ReconcileRetryTimeoutPolicyDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRetryTimeoutPolicyDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileRetryTimeoutPolicyDeletion indicates an expected call of ReconcileRetryTimeoutPolicyDeletion.
func (mr *MockRetryTimeoutPolicyDeletionReconcilerMockRecorder) ReconcileRetryTimeoutPolicyDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRetryTimeoutPolicyDeletion", reflect.TypeOf((*MockRetryTimeoutPolicyDeletionReconciler)(nil).ReconcileRetryTimeoutPolicyDeletion), req)
}

// MockRetryTimeoutPolicyFinalizer is a mock of RetryTimeoutPolicyFinalizer interface.
type MockRetryTimeoutPolicyFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockRetryTimeoutPolicyFinalizerMockRecorder
}

// MockRetryTimeoutPolicyFinalizerMockRecorder is the mock recorder for MockRetryTimeoutPolicyFinalizer.
type MockRetryTimeoutPolicyFinalizerMockRecorder struct {
	mock *MockRetryTimeoutPolicyFinalizer
}

// NewMockRetryTimeoutPolicyFinalizer creates a new mock instance.
func NewMockRetryTimeoutPolicyFinalizer(ctrl *gomock.Controller) *MockRetryTimeoutPolicyFinalizer {
	mock := &MockRetryTimeoutPolicyFinalizer{ctrl: ctrl}
	mock.recorder = &MockRetryTimeoutPolicyFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryTimeoutPolicyFinalizer) EXPECT() *MockRetryTimeoutPolicyFinalizerMockRecorder {
	return m.recorder
}

// FinalizeRetryTimeoutPolicy mocks base method.
func (m *MockRetryTimeoutPolicyFinalizer) FinalizeRetryTimeoutPolicy(obj *v2.RetryTimeoutPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeRetryTimeoutPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeRetryTimeoutPolicy indicates an expected call of FinalizeRetryTimeoutPolicy.
func (mr *MockRetryTimeoutPolicyFinalizerMockRecorder) FinalizeRetryTimeoutPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeRetryTimeoutPolicy", reflect.TypeOf((*MockRetryTimeoutPolicyFinalizer)(nil).FinalizeRetryTimeoutPolicy), obj)
}

// ReconcileRetryTimeoutPolicy mocks base method.
func (m *MockRetryTimeoutPolicyFinalizer) ReconcileRetryTimeoutPolicy(obj *v2.RetryTimeoutPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRetryTimeoutPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRetryTimeoutPolicy indicates an expected call of ReconcileRetryTimeoutPolicy.
func (mr *MockRetryTimeoutPolicyFinalizerMockRecorder) ReconcileRetryTimeoutPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRetryTimeoutPolicy", reflect.TypeOf((*MockRetryTimeoutPolicyFinalizer)(nil).ReconcileRetryTimeoutPolicy), obj)
}

// RetryTimeoutPolicyFinalizerName mocks base method.
func (m *MockRetryTimeoutPolicyFinalizer) RetryTimeoutPolicyFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryTimeoutPolicyFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// RetryTimeoutPolicyFinalizerName indicates an expected call of RetryTimeoutPolicyFinalizerName.
func (mr *MockRetryTimeoutPolicyFinalizerMockRecorder) RetryTimeoutPolicyFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryTimeoutPolicyFinalizerName", reflect.TypeOf((*MockRetryTimeoutPolicyFinalizer)(nil).RetryTimeoutPolicyFinalizerName))
}

// MockRetryTimeoutPolicyReconcileLoop is a mock of RetryTimeoutPolicyReconcileLoop interface.
type MockRetryTimeoutPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockRetryTimeoutPolicyReconcileLoopMockRecorder
}

// MockRetryTimeoutPolicyReconcileLoopMockRecorder is the mock recorder for MockRetryTimeoutPolicyReconcileLoop.
type MockRetryTimeoutPolicyReconcileLoopMockRecorder struct {
	mock *MockRetryTimeoutPolicyReconcileLoop
}

// NewMockRetryTimeoutPolicyReconcileLoop creates a new mock instance.
func NewMockRetryTimeoutPolicyReconcileLoop(ctrl *gomock.Controller) *MockRetryTimeoutPolicyReconcileLoop {
	mock := &MockRetryTimeoutPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockRetryTimeoutPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryTimeoutPolicyReconcileLoop) EXPECT() *MockRetryTimeoutPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// RunRetryTimeoutPolicyReconciler mocks base method.
func (m *MockRetryTimeoutPolicyReconcileLoop) RunRetryTimeoutPolicyReconciler(ctx context.Context, rec controller.RetryTimeoutPolicyReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunRetryTimeoutPolicyReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunRetryTimeoutPolicyReconciler indicates an expected call of RunRetryTimeoutPolicyReconciler.
func (mr *MockRetryTimeoutPolicyReconcileLoopMockRecorder) RunRetryTimeoutPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunRetryTimeoutPolicyReconciler", reflect.TypeOf((*MockRetryTimeoutPolicyReconcileLoop)(nil).RunRetryTimeoutPolicyReconciler), varargs...)
}

// MockConnectionPolicyReconciler is a mock of ConnectionPolicyReconciler interface.
type MockConnectionPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionPolicyReconcilerMockRecorder
}

// MockConnectionPolicyReconcilerMockRecorder is the mock recorder for MockConnectionPolicyReconciler.
type MockConnectionPolicyReconcilerMockRecorder struct {
	mock *MockConnectionPolicyReconciler
}

// NewMockConnectionPolicyReconciler creates a new mock instance.
func NewMockConnectionPolicyReconciler(ctrl *gomock.Controller) *MockConnectionPolicyReconciler {
	mock := &MockConnectionPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockConnectionPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionPolicyReconciler) EXPECT() *MockConnectionPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileConnectionPolicy mocks base method.
func (m *MockConnectionPolicyReconciler) ReconcileConnectionPolicy(obj *v2.ConnectionPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileConnectionPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileConnectionPolicy indicates an expected call of ReconcileConnectionPolicy.
func (mr *MockConnectionPolicyReconcilerMockRecorder) ReconcileConnectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileConnectionPolicy", reflect.TypeOf((*MockConnectionPolicyReconciler)(nil).ReconcileConnectionPolicy), obj)
}

// MockConnectionPolicyDeletionReconciler is a mock of ConnectionPolicyDeletionReconciler interface.
type MockConnectionPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionPolicyDeletionReconcilerMockRecorder
}

// MockConnectionPolicyDeletionReconcilerMockRecorder is the mock recorder for MockConnectionPolicyDeletionReconciler.
type MockConnectionPolicyDeletionReconcilerMockRecorder struct {
	mock *MockConnectionPolicyDeletionReconciler
}

// NewMockConnectionPolicyDeletionReconciler creates a new mock instance.
func NewMockConnectionPolicyDeletionReconciler(ctrl *gomock.Controller) *MockConnectionPolicyDeletionReconciler {
	mock := &MockConnectionPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockConnectionPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionPolicyDeletionReconciler) EXPECT() *MockConnectionPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileConnectionPolicyDeletion mocks base method.
func (m *MockConnectionPolicyDeletionReconciler) ReconcileConnectionPolicyDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileConnectionPolicyDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileConnectionPolicyDeletion indicates an expected call of ReconcileConnectionPolicyDeletion.
func (mr *MockConnectionPolicyDeletionReconcilerMockRecorder) ReconcileConnectionPolicyDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileConnectionPolicyDeletion", reflect.TypeOf((*MockConnectionPolicyDeletionReconciler)(nil).ReconcileConnectionPolicyDeletion), req)
}

// MockConnectionPolicyFinalizer is a mock of ConnectionPolicyFinalizer interface.
type MockConnectionPolicyFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionPolicyFinalizerMockRecorder
}

// MockConnectionPolicyFinalizerMockRecorder is the mock recorder for MockConnectionPolicyFinalizer.
type MockConnectionPolicyFinalizerMockRecorder struct {
	mock *MockConnectionPolicyFinalizer
}

// NewMockConnectionPolicyFinalizer creates a new mock instance.
func NewMockConnectionPolicyFinalizer(ctrl *gomock.Controller) *MockConnectionPolicyFinalizer {
	mock := &MockConnectionPolicyFinalizer{ctrl: ctrl}
	mock.recorder = &MockConnectionPolicyFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionPolicyFinalizer) EXPECT() *MockConnectionPolicyFinalizerMockRecorder {
	return m.recorder
}

// ConnectionPolicyFinalizerName mocks base method.
func (m *MockConnectionPolicyFinalizer) ConnectionPolicyFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionPolicyFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConnectionPolicyFinalizerName indicates an expected call of ConnectionPolicyFinalizerName.
func (mr *MockConnectionPolicyFinalizerMockRecorder) ConnectionPolicyFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionPolicyFinalizerName", reflect.TypeOf((*MockConnectionPolicyFinalizer)(nil).ConnectionPolicyFinalizerName))
}

// FinalizeConnectionPolicy mocks base method.
func (m *MockConnectionPolicyFinalizer) FinalizeConnectionPolicy(obj *v2.ConnectionPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeConnectionPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeConnectionPolicy indicates an expected call of FinalizeConnectionPolicy.
func (mr *MockConnectionPolicyFinalizerMockRecorder) FinalizeConnectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeConnectionPolicy", reflect.TypeOf((*MockConnectionPolicyFinalizer)(nil).FinalizeConnectionPolicy), obj)
}

// ReconcileConnectionPolicy mocks base method.
func (m *MockConnectionPolicyFinalizer) ReconcileConnectionPolicy(obj *v2.ConnectionPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileConnectionPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileConnectionPolicy indicates an expected call of ReconcileConnectionPolicy.
func (mr *MockConnectionPolicyFinalizerMockRecorder) ReconcileConnectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileConnectionPolicy", reflect.TypeOf((*MockConnectionPolicyFinalizer)(nil).ReconcileConnectionPolicy), obj)
}

// MockConnectionPolicyReconcileLoop is a mock of ConnectionPolicyReconcileLoop interface.
type MockConnectionPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionPolicyReconcileLoopMockRecorder
}

// MockConnectionPolicyReconcileLoopMockRecorder is the mock recorder for MockConnectionPolicyReconcileLoop.
type MockConnectionPolicyReconcileLoopMockRecorder struct {
	mock *MockConnectionPolicyReconcileLoop
}

// NewMockConnectionPolicyReconcileLoop creates a new mock instance.
func NewMockConnectionPolicyReconcileLoop(ctrl *gomock.Controller) *MockConnectionPolicyReconcileLoop {
	mock := &MockConnectionPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockConnectionPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionPolicyReconcileLoop) EXPECT() *MockConnectionPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// RunConnectionPolicyReconciler mocks base method.
func (m *MockConnectionPolicyReconcileLoop) RunConnectionPolicyReconciler(ctx context.Context, rec controller.ConnectionPolicyReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunConnectionPolicyReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunConnectionPolicyReconciler indicates an expected call of RunConnectionPolicyReconciler.
func (mr *MockConnectionPolicyReconcileLoopMockRecorder) RunConnectionPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunConnectionPolicyReconciler", reflect.TypeOf((*MockConnectionPolicyReconcileLoop)(nil).RunConnectionPolicyReconciler), varargs...)
}

// MockTrimProxyConfigPolicyReconciler is a mock of TrimProxyConfigPolicyReconciler interface.
type MockTrimProxyConfigPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockTrimProxyConfigPolicyReconcilerMockRecorder
}

// MockTrimProxyConfigPolicyReconcilerMockRecorder is the mock recorder for MockTrimProxyConfigPolicyReconciler.
type MockTrimProxyConfigPolicyReconcilerMockRecorder struct {
	mock *MockTrimProxyConfigPolicyReconciler
}

// NewMockTrimProxyConfigPolicyReconciler creates a new mock instance.
func NewMockTrimProxyConfigPolicyReconciler(ctrl *gomock.Controller) *MockTrimProxyConfigPolicyReconciler {
	mock := &MockTrimProxyConfigPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockTrimProxyConfigPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrimProxyConfigPolicyReconciler) EXPECT() *MockTrimProxyConfigPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileTrimProxyConfigPolicy mocks base method.
func (m *MockTrimProxyConfigPolicyReconciler) ReconcileTrimProxyConfigPolicy(obj *v2.TrimProxyConfigPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTrimProxyConfigPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileTrimProxyConfigPolicy indicates an expected call of ReconcileTrimProxyConfigPolicy.
func (mr *MockTrimProxyConfigPolicyReconcilerMockRecorder) ReconcileTrimProxyConfigPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTrimProxyConfigPolicy", reflect.TypeOf((*MockTrimProxyConfigPolicyReconciler)(nil).ReconcileTrimProxyConfigPolicy), obj)
}

// MockTrimProxyConfigPolicyDeletionReconciler is a mock of TrimProxyConfigPolicyDeletionReconciler interface.
type MockTrimProxyConfigPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockTrimProxyConfigPolicyDeletionReconcilerMockRecorder
}

// MockTrimProxyConfigPolicyDeletionReconcilerMockRecorder is the mock recorder for MockTrimProxyConfigPolicyDeletionReconciler.
type MockTrimProxyConfigPolicyDeletionReconcilerMockRecorder struct {
	mock *MockTrimProxyConfigPolicyDeletionReconciler
}

// NewMockTrimProxyConfigPolicyDeletionReconciler creates a new mock instance.
func NewMockTrimProxyConfigPolicyDeletionReconciler(ctrl *gomock.Controller) *MockTrimProxyConfigPolicyDeletionReconciler {
	mock := &MockTrimProxyConfigPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockTrimProxyConfigPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrimProxyConfigPolicyDeletionReconciler) EXPECT() *MockTrimProxyConfigPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileTrimProxyConfigPolicyDeletion mocks base method.
func (m *MockTrimProxyConfigPolicyDeletionReconciler) ReconcileTrimProxyConfigPolicyDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTrimProxyConfigPolicyDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileTrimProxyConfigPolicyDeletion indicates an expected call of ReconcileTrimProxyConfigPolicyDeletion.
func (mr *MockTrimProxyConfigPolicyDeletionReconcilerMockRecorder) ReconcileTrimProxyConfigPolicyDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTrimProxyConfigPolicyDeletion", reflect.TypeOf((*MockTrimProxyConfigPolicyDeletionReconciler)(nil).ReconcileTrimProxyConfigPolicyDeletion), req)
}

// MockTrimProxyConfigPolicyFinalizer is a mock of TrimProxyConfigPolicyFinalizer interface.
type MockTrimProxyConfigPolicyFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockTrimProxyConfigPolicyFinalizerMockRecorder
}

// MockTrimProxyConfigPolicyFinalizerMockRecorder is the mock recorder for MockTrimProxyConfigPolicyFinalizer.
type MockTrimProxyConfigPolicyFinalizerMockRecorder struct {
	mock *MockTrimProxyConfigPolicyFinalizer
}

// NewMockTrimProxyConfigPolicyFinalizer creates a new mock instance.
func NewMockTrimProxyConfigPolicyFinalizer(ctrl *gomock.Controller) *MockTrimProxyConfigPolicyFinalizer {
	mock := &MockTrimProxyConfigPolicyFinalizer{ctrl: ctrl}
	mock.recorder = &MockTrimProxyConfigPolicyFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrimProxyConfigPolicyFinalizer) EXPECT() *MockTrimProxyConfigPolicyFinalizerMockRecorder {
	return m.recorder
}

// FinalizeTrimProxyConfigPolicy mocks base method.
func (m *MockTrimProxyConfigPolicyFinalizer) FinalizeTrimProxyConfigPolicy(obj *v2.TrimProxyConfigPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeTrimProxyConfigPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeTrimProxyConfigPolicy indicates an expected call of FinalizeTrimProxyConfigPolicy.
func (mr *MockTrimProxyConfigPolicyFinalizerMockRecorder) FinalizeTrimProxyConfigPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeTrimProxyConfigPolicy", reflect.TypeOf((*MockTrimProxyConfigPolicyFinalizer)(nil).FinalizeTrimProxyConfigPolicy), obj)
}

// ReconcileTrimProxyConfigPolicy mocks base method.
func (m *MockTrimProxyConfigPolicyFinalizer) ReconcileTrimProxyConfigPolicy(obj *v2.TrimProxyConfigPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTrimProxyConfigPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileTrimProxyConfigPolicy indicates an expected call of ReconcileTrimProxyConfigPolicy.
func (mr *MockTrimProxyConfigPolicyFinalizerMockRecorder) ReconcileTrimProxyConfigPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTrimProxyConfigPolicy", reflect.TypeOf((*MockTrimProxyConfigPolicyFinalizer)(nil).ReconcileTrimProxyConfigPolicy), obj)
}

// TrimProxyConfigPolicyFinalizerName mocks base method.
func (m *MockTrimProxyConfigPolicyFinalizer) TrimProxyConfigPolicyFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrimProxyConfigPolicyFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// TrimProxyConfigPolicyFinalizerName indicates an expected call of TrimProxyConfigPolicyFinalizerName.
func (mr *MockTrimProxyConfigPolicyFinalizerMockRecorder) TrimProxyConfigPolicyFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrimProxyConfigPolicyFinalizerName", reflect.TypeOf((*MockTrimProxyConfigPolicyFinalizer)(nil).TrimProxyConfigPolicyFinalizerName))
}

// MockTrimProxyConfigPolicyReconcileLoop is a mock of TrimProxyConfigPolicyReconcileLoop interface.
type MockTrimProxyConfigPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockTrimProxyConfigPolicyReconcileLoopMockRecorder
}

// MockTrimProxyConfigPolicyReconcileLoopMockRecorder is the mock recorder for MockTrimProxyConfigPolicyReconcileLoop.
type MockTrimProxyConfigPolicyReconcileLoopMockRecorder struct {
	mock *MockTrimProxyConfigPolicyReconcileLoop
}

// NewMockTrimProxyConfigPolicyReconcileLoop creates a new mock instance.
func NewMockTrimProxyConfigPolicyReconcileLoop(ctrl *gomock.Controller) *MockTrimProxyConfigPolicyReconcileLoop {
	mock := &MockTrimProxyConfigPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockTrimProxyConfigPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrimProxyConfigPolicyReconcileLoop) EXPECT() *MockTrimProxyConfigPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// RunTrimProxyConfigPolicyReconciler mocks base method.
func (m *MockTrimProxyConfigPolicyReconcileLoop) RunTrimProxyConfigPolicyReconciler(ctx context.Context, rec controller.TrimProxyConfigPolicyReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunTrimProxyConfigPolicyReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTrimProxyConfigPolicyReconciler indicates an expected call of RunTrimProxyConfigPolicyReconciler.
func (mr *MockTrimProxyConfigPolicyReconcileLoopMockRecorder) RunTrimProxyConfigPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTrimProxyConfigPolicyReconciler", reflect.TypeOf((*MockTrimProxyConfigPolicyReconcileLoop)(nil).RunTrimProxyConfigPolicyReconciler), varargs...)
}

// MockActiveHealthCheckPolicyReconciler is a mock of ActiveHealthCheckPolicyReconciler interface.
type MockActiveHealthCheckPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockActiveHealthCheckPolicyReconcilerMockRecorder
}

// MockActiveHealthCheckPolicyReconcilerMockRecorder is the mock recorder for MockActiveHealthCheckPolicyReconciler.
type MockActiveHealthCheckPolicyReconcilerMockRecorder struct {
	mock *MockActiveHealthCheckPolicyReconciler
}

// NewMockActiveHealthCheckPolicyReconciler creates a new mock instance.
func NewMockActiveHealthCheckPolicyReconciler(ctrl *gomock.Controller) *MockActiveHealthCheckPolicyReconciler {
	mock := &MockActiveHealthCheckPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockActiveHealthCheckPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActiveHealthCheckPolicyReconciler) EXPECT() *MockActiveHealthCheckPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileActiveHealthCheckPolicy mocks base method.
func (m *MockActiveHealthCheckPolicyReconciler) ReconcileActiveHealthCheckPolicy(obj *v2.ActiveHealthCheckPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileActiveHealthCheckPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileActiveHealthCheckPolicy indicates an expected call of ReconcileActiveHealthCheckPolicy.
func (mr *MockActiveHealthCheckPolicyReconcilerMockRecorder) ReconcileActiveHealthCheckPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileActiveHealthCheckPolicy", reflect.TypeOf((*MockActiveHealthCheckPolicyReconciler)(nil).ReconcileActiveHealthCheckPolicy), obj)
}

// MockActiveHealthCheckPolicyDeletionReconciler is a mock of ActiveHealthCheckPolicyDeletionReconciler interface.
type MockActiveHealthCheckPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockActiveHealthCheckPolicyDeletionReconcilerMockRecorder
}

// MockActiveHealthCheckPolicyDeletionReconcilerMockRecorder is the mock recorder for MockActiveHealthCheckPolicyDeletionReconciler.
type MockActiveHealthCheckPolicyDeletionReconcilerMockRecorder struct {
	mock *MockActiveHealthCheckPolicyDeletionReconciler
}

// NewMockActiveHealthCheckPolicyDeletionReconciler creates a new mock instance.
func NewMockActiveHealthCheckPolicyDeletionReconciler(ctrl *gomock.Controller) *MockActiveHealthCheckPolicyDeletionReconciler {
	mock := &MockActiveHealthCheckPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockActiveHealthCheckPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActiveHealthCheckPolicyDeletionReconciler) EXPECT() *MockActiveHealthCheckPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileActiveHealthCheckPolicyDeletion mocks base method.
func (m *MockActiveHealthCheckPolicyDeletionReconciler) ReconcileActiveHealthCheckPolicyDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileActiveHealthCheckPolicyDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileActiveHealthCheckPolicyDeletion indicates an expected call of ReconcileActiveHealthCheckPolicyDeletion.
func (mr *MockActiveHealthCheckPolicyDeletionReconcilerMockRecorder) ReconcileActiveHealthCheckPolicyDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileActiveHealthCheckPolicyDeletion", reflect.TypeOf((*MockActiveHealthCheckPolicyDeletionReconciler)(nil).ReconcileActiveHealthCheckPolicyDeletion), req)
}

// MockActiveHealthCheckPolicyFinalizer is a mock of ActiveHealthCheckPolicyFinalizer interface.
type MockActiveHealthCheckPolicyFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockActiveHealthCheckPolicyFinalizerMockRecorder
}

// MockActiveHealthCheckPolicyFinalizerMockRecorder is the mock recorder for MockActiveHealthCheckPolicyFinalizer.
type MockActiveHealthCheckPolicyFinalizerMockRecorder struct {
	mock *MockActiveHealthCheckPolicyFinalizer
}

// NewMockActiveHealthCheckPolicyFinalizer creates a new mock instance.
func NewMockActiveHealthCheckPolicyFinalizer(ctrl *gomock.Controller) *MockActiveHealthCheckPolicyFinalizer {
	mock := &MockActiveHealthCheckPolicyFinalizer{ctrl: ctrl}
	mock.recorder = &MockActiveHealthCheckPolicyFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActiveHealthCheckPolicyFinalizer) EXPECT() *MockActiveHealthCheckPolicyFinalizerMockRecorder {
	return m.recorder
}

// ActiveHealthCheckPolicyFinalizerName mocks base method.
func (m *MockActiveHealthCheckPolicyFinalizer) ActiveHealthCheckPolicyFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveHealthCheckPolicyFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ActiveHealthCheckPolicyFinalizerName indicates an expected call of ActiveHealthCheckPolicyFinalizerName.
func (mr *MockActiveHealthCheckPolicyFinalizerMockRecorder) ActiveHealthCheckPolicyFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveHealthCheckPolicyFinalizerName", reflect.TypeOf((*MockActiveHealthCheckPolicyFinalizer)(nil).ActiveHealthCheckPolicyFinalizerName))
}

// FinalizeActiveHealthCheckPolicy mocks base method.
func (m *MockActiveHealthCheckPolicyFinalizer) FinalizeActiveHealthCheckPolicy(obj *v2.ActiveHealthCheckPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeActiveHealthCheckPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeActiveHealthCheckPolicy indicates an expected call of FinalizeActiveHealthCheckPolicy.
func (mr *MockActiveHealthCheckPolicyFinalizerMockRecorder) FinalizeActiveHealthCheckPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeActiveHealthCheckPolicy", reflect.TypeOf((*MockActiveHealthCheckPolicyFinalizer)(nil).FinalizeActiveHealthCheckPolicy), obj)
}

// ReconcileActiveHealthCheckPolicy mocks base method.
func (m *MockActiveHealthCheckPolicyFinalizer) ReconcileActiveHealthCheckPolicy(obj *v2.ActiveHealthCheckPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileActiveHealthCheckPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileActiveHealthCheckPolicy indicates an expected call of ReconcileActiveHealthCheckPolicy.
func (mr *MockActiveHealthCheckPolicyFinalizerMockRecorder) ReconcileActiveHealthCheckPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileActiveHealthCheckPolicy", reflect.TypeOf((*MockActiveHealthCheckPolicyFinalizer)(nil).ReconcileActiveHealthCheckPolicy), obj)
}

// MockActiveHealthCheckPolicyReconcileLoop is a mock of ActiveHealthCheckPolicyReconcileLoop interface.
type MockActiveHealthCheckPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockActiveHealthCheckPolicyReconcileLoopMockRecorder
}

// MockActiveHealthCheckPolicyReconcileLoopMockRecorder is the mock recorder for MockActiveHealthCheckPolicyReconcileLoop.
type MockActiveHealthCheckPolicyReconcileLoopMockRecorder struct {
	mock *MockActiveHealthCheckPolicyReconcileLoop
}

// NewMockActiveHealthCheckPolicyReconcileLoop creates a new mock instance.
func NewMockActiveHealthCheckPolicyReconcileLoop(ctrl *gomock.Controller) *MockActiveHealthCheckPolicyReconcileLoop {
	mock := &MockActiveHealthCheckPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockActiveHealthCheckPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActiveHealthCheckPolicyReconcileLoop) EXPECT() *MockActiveHealthCheckPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// RunActiveHealthCheckPolicyReconciler mocks base method.
func (m *MockActiveHealthCheckPolicyReconcileLoop) RunActiveHealthCheckPolicyReconciler(ctx context.Context, rec controller.ActiveHealthCheckPolicyReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunActiveHealthCheckPolicyReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunActiveHealthCheckPolicyReconciler indicates an expected call of RunActiveHealthCheckPolicyReconciler.
func (mr *MockActiveHealthCheckPolicyReconcileLoopMockRecorder) RunActiveHealthCheckPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunActiveHealthCheckPolicyReconciler", reflect.TypeOf((*MockActiveHealthCheckPolicyReconcileLoop)(nil).RunActiveHealthCheckPolicyReconciler), varargs...)
}

// MockListenerConnectionPolicyReconciler is a mock of ListenerConnectionPolicyReconciler interface.
type MockListenerConnectionPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockListenerConnectionPolicyReconcilerMockRecorder
}

// MockListenerConnectionPolicyReconcilerMockRecorder is the mock recorder for MockListenerConnectionPolicyReconciler.
type MockListenerConnectionPolicyReconcilerMockRecorder struct {
	mock *MockListenerConnectionPolicyReconciler
}

// NewMockListenerConnectionPolicyReconciler creates a new mock instance.
func NewMockListenerConnectionPolicyReconciler(ctrl *gomock.Controller) *MockListenerConnectionPolicyReconciler {
	mock := &MockListenerConnectionPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockListenerConnectionPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListenerConnectionPolicyReconciler) EXPECT() *MockListenerConnectionPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileListenerConnectionPolicy mocks base method.
func (m *MockListenerConnectionPolicyReconciler) ReconcileListenerConnectionPolicy(obj *v2.ListenerConnectionPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileListenerConnectionPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileListenerConnectionPolicy indicates an expected call of ReconcileListenerConnectionPolicy.
func (mr *MockListenerConnectionPolicyReconcilerMockRecorder) ReconcileListenerConnectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileListenerConnectionPolicy", reflect.TypeOf((*MockListenerConnectionPolicyReconciler)(nil).ReconcileListenerConnectionPolicy), obj)
}

// MockListenerConnectionPolicyDeletionReconciler is a mock of ListenerConnectionPolicyDeletionReconciler interface.
type MockListenerConnectionPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockListenerConnectionPolicyDeletionReconcilerMockRecorder
}

// MockListenerConnectionPolicyDeletionReconcilerMockRecorder is the mock recorder for MockListenerConnectionPolicyDeletionReconciler.
type MockListenerConnectionPolicyDeletionReconcilerMockRecorder struct {
	mock *MockListenerConnectionPolicyDeletionReconciler
}

// NewMockListenerConnectionPolicyDeletionReconciler creates a new mock instance.
func NewMockListenerConnectionPolicyDeletionReconciler(ctrl *gomock.Controller) *MockListenerConnectionPolicyDeletionReconciler {
	mock := &MockListenerConnectionPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockListenerConnectionPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListenerConnectionPolicyDeletionReconciler) EXPECT() *MockListenerConnectionPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileListenerConnectionPolicyDeletion mocks base method.
func (m *MockListenerConnectionPolicyDeletionReconciler) ReconcileListenerConnectionPolicyDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileListenerConnectionPolicyDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileListenerConnectionPolicyDeletion indicates an expected call of ReconcileListenerConnectionPolicyDeletion.
func (mr *MockListenerConnectionPolicyDeletionReconcilerMockRecorder) ReconcileListenerConnectionPolicyDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileListenerConnectionPolicyDeletion", reflect.TypeOf((*MockListenerConnectionPolicyDeletionReconciler)(nil).ReconcileListenerConnectionPolicyDeletion), req)
}

// MockListenerConnectionPolicyFinalizer is a mock of ListenerConnectionPolicyFinalizer interface.
type MockListenerConnectionPolicyFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockListenerConnectionPolicyFinalizerMockRecorder
}

// MockListenerConnectionPolicyFinalizerMockRecorder is the mock recorder for MockListenerConnectionPolicyFinalizer.
type MockListenerConnectionPolicyFinalizerMockRecorder struct {
	mock *MockListenerConnectionPolicyFinalizer
}

// NewMockListenerConnectionPolicyFinalizer creates a new mock instance.
func NewMockListenerConnectionPolicyFinalizer(ctrl *gomock.Controller) *MockListenerConnectionPolicyFinalizer {
	mock := &MockListenerConnectionPolicyFinalizer{ctrl: ctrl}
	mock.recorder = &MockListenerConnectionPolicyFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListenerConnectionPolicyFinalizer) EXPECT() *MockListenerConnectionPolicyFinalizerMockRecorder {
	return m.recorder
}

// FinalizeListenerConnectionPolicy mocks base method.
func (m *MockListenerConnectionPolicyFinalizer) FinalizeListenerConnectionPolicy(obj *v2.ListenerConnectionPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeListenerConnectionPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeListenerConnectionPolicy indicates an expected call of FinalizeListenerConnectionPolicy.
func (mr *MockListenerConnectionPolicyFinalizerMockRecorder) FinalizeListenerConnectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeListenerConnectionPolicy", reflect.TypeOf((*MockListenerConnectionPolicyFinalizer)(nil).FinalizeListenerConnectionPolicy), obj)
}

// ListenerConnectionPolicyFinalizerName mocks base method.
func (m *MockListenerConnectionPolicyFinalizer) ListenerConnectionPolicyFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenerConnectionPolicyFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ListenerConnectionPolicyFinalizerName indicates an expected call of ListenerConnectionPolicyFinalizerName.
func (mr *MockListenerConnectionPolicyFinalizerMockRecorder) ListenerConnectionPolicyFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenerConnectionPolicyFinalizerName", reflect.TypeOf((*MockListenerConnectionPolicyFinalizer)(nil).ListenerConnectionPolicyFinalizerName))
}

// ReconcileListenerConnectionPolicy mocks base method.
func (m *MockListenerConnectionPolicyFinalizer) ReconcileListenerConnectionPolicy(obj *v2.ListenerConnectionPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileListenerConnectionPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileListenerConnectionPolicy indicates an expected call of ReconcileListenerConnectionPolicy.
func (mr *MockListenerConnectionPolicyFinalizerMockRecorder) ReconcileListenerConnectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileListenerConnectionPolicy", reflect.TypeOf((*MockListenerConnectionPolicyFinalizer)(nil).ReconcileListenerConnectionPolicy), obj)
}

// MockListenerConnectionPolicyReconcileLoop is a mock of ListenerConnectionPolicyReconcileLoop interface.
type MockListenerConnectionPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockListenerConnectionPolicyReconcileLoopMockRecorder
}

// MockListenerConnectionPolicyReconcileLoopMockRecorder is the mock recorder for MockListenerConnectionPolicyReconcileLoop.
type MockListenerConnectionPolicyReconcileLoopMockRecorder struct {
	mock *MockListenerConnectionPolicyReconcileLoop
}

// NewMockListenerConnectionPolicyReconcileLoop creates a new mock instance.
func NewMockListenerConnectionPolicyReconcileLoop(ctrl *gomock.Controller) *MockListenerConnectionPolicyReconcileLoop {
	mock := &MockListenerConnectionPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockListenerConnectionPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListenerConnectionPolicyReconcileLoop) EXPECT() *MockListenerConnectionPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// RunListenerConnectionPolicyReconciler mocks base method.
func (m *MockListenerConnectionPolicyReconcileLoop) RunListenerConnectionPolicyReconciler(ctx context.Context, rec controller.ListenerConnectionPolicyReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunListenerConnectionPolicyReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunListenerConnectionPolicyReconciler indicates an expected call of RunListenerConnectionPolicyReconciler.
func (mr *MockListenerConnectionPolicyReconcileLoopMockRecorder) RunListenerConnectionPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunListenerConnectionPolicyReconciler", reflect.TypeOf((*MockListenerConnectionPolicyReconcileLoop)(nil).RunListenerConnectionPolicyReconciler), varargs...)
}
