// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"

	v2 "github.com/solo-io/solo-apis/client-go/resilience.policy.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/client-go/resilience.policy.gloo.solo.io/v2/controller"
)

// MockMulticlusterGraphQLPersistedQueryCachePolicyReconciler is a mock of MulticlusterGraphQLPersistedQueryCachePolicyReconciler interface.
type MockMulticlusterGraphQLPersistedQueryCachePolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGraphQLPersistedQueryCachePolicyReconcilerMockRecorder
}

// MockMulticlusterGraphQLPersistedQueryCachePolicyReconcilerMockRecorder is the mock recorder for MockMulticlusterGraphQLPersistedQueryCachePolicyReconciler.
type MockMulticlusterGraphQLPersistedQueryCachePolicyReconcilerMockRecorder struct {
	mock *MockMulticlusterGraphQLPersistedQueryCachePolicyReconciler
}

// NewMockMulticlusterGraphQLPersistedQueryCachePolicyReconciler creates a new mock instance.
func NewMockMulticlusterGraphQLPersistedQueryCachePolicyReconciler(ctrl *gomock.Controller) *MockMulticlusterGraphQLPersistedQueryCachePolicyReconciler {
	mock := &MockMulticlusterGraphQLPersistedQueryCachePolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGraphQLPersistedQueryCachePolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGraphQLPersistedQueryCachePolicyReconciler) EXPECT() *MockMulticlusterGraphQLPersistedQueryCachePolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLPersistedQueryCachePolicy mocks base method.
func (m *MockMulticlusterGraphQLPersistedQueryCachePolicyReconciler) ReconcileGraphQLPersistedQueryCachePolicy(clusterName string, obj *v2.GraphQLPersistedQueryCachePolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLPersistedQueryCachePolicy", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGraphQLPersistedQueryCachePolicy indicates an expected call of ReconcileGraphQLPersistedQueryCachePolicy.
func (mr *MockMulticlusterGraphQLPersistedQueryCachePolicyReconcilerMockRecorder) ReconcileGraphQLPersistedQueryCachePolicy(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLPersistedQueryCachePolicy", reflect.TypeOf((*MockMulticlusterGraphQLPersistedQueryCachePolicyReconciler)(nil).ReconcileGraphQLPersistedQueryCachePolicy), clusterName, obj)
}

// MockMulticlusterGraphQLPersistedQueryCachePolicyDeletionReconciler is a mock of MulticlusterGraphQLPersistedQueryCachePolicyDeletionReconciler interface.
type MockMulticlusterGraphQLPersistedQueryCachePolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGraphQLPersistedQueryCachePolicyDeletionReconcilerMockRecorder
}

// MockMulticlusterGraphQLPersistedQueryCachePolicyDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterGraphQLPersistedQueryCachePolicyDeletionReconciler.
type MockMulticlusterGraphQLPersistedQueryCachePolicyDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterGraphQLPersistedQueryCachePolicyDeletionReconciler
}

// NewMockMulticlusterGraphQLPersistedQueryCachePolicyDeletionReconciler creates a new mock instance.
func NewMockMulticlusterGraphQLPersistedQueryCachePolicyDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterGraphQLPersistedQueryCachePolicyDeletionReconciler {
	mock := &MockMulticlusterGraphQLPersistedQueryCachePolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGraphQLPersistedQueryCachePolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGraphQLPersistedQueryCachePolicyDeletionReconciler) EXPECT() *MockMulticlusterGraphQLPersistedQueryCachePolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLPersistedQueryCachePolicyDeletion mocks base method.
func (m *MockMulticlusterGraphQLPersistedQueryCachePolicyDeletionReconciler) ReconcileGraphQLPersistedQueryCachePolicyDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLPersistedQueryCachePolicyDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGraphQLPersistedQueryCachePolicyDeletion indicates an expected call of ReconcileGraphQLPersistedQueryCachePolicyDeletion.
func (mr *MockMulticlusterGraphQLPersistedQueryCachePolicyDeletionReconcilerMockRecorder) ReconcileGraphQLPersistedQueryCachePolicyDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLPersistedQueryCachePolicyDeletion", reflect.TypeOf((*MockMulticlusterGraphQLPersistedQueryCachePolicyDeletionReconciler)(nil).ReconcileGraphQLPersistedQueryCachePolicyDeletion), clusterName, req)
}

// MockMulticlusterGraphQLPersistedQueryCachePolicyReconcileLoop is a mock of MulticlusterGraphQLPersistedQueryCachePolicyReconcileLoop interface.
type MockMulticlusterGraphQLPersistedQueryCachePolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGraphQLPersistedQueryCachePolicyReconcileLoopMockRecorder
}

// MockMulticlusterGraphQLPersistedQueryCachePolicyReconcileLoopMockRecorder is the mock recorder for MockMulticlusterGraphQLPersistedQueryCachePolicyReconcileLoop.
type MockMulticlusterGraphQLPersistedQueryCachePolicyReconcileLoopMockRecorder struct {
	mock *MockMulticlusterGraphQLPersistedQueryCachePolicyReconcileLoop
}

// NewMockMulticlusterGraphQLPersistedQueryCachePolicyReconcileLoop creates a new mock instance.
func NewMockMulticlusterGraphQLPersistedQueryCachePolicyReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterGraphQLPersistedQueryCachePolicyReconcileLoop {
	mock := &MockMulticlusterGraphQLPersistedQueryCachePolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGraphQLPersistedQueryCachePolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGraphQLPersistedQueryCachePolicyReconcileLoop) EXPECT() *MockMulticlusterGraphQLPersistedQueryCachePolicyReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterGraphQLPersistedQueryCachePolicyReconciler mocks base method.
func (m *MockMulticlusterGraphQLPersistedQueryCachePolicyReconcileLoop) AddMulticlusterGraphQLPersistedQueryCachePolicyReconciler(ctx context.Context, rec controller.MulticlusterGraphQLPersistedQueryCachePolicyReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterGraphQLPersistedQueryCachePolicyReconciler", varargs...)
}

// AddMulticlusterGraphQLPersistedQueryCachePolicyReconciler indicates an expected call of AddMulticlusterGraphQLPersistedQueryCachePolicyReconciler.
func (mr *MockMulticlusterGraphQLPersistedQueryCachePolicyReconcileLoopMockRecorder) AddMulticlusterGraphQLPersistedQueryCachePolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterGraphQLPersistedQueryCachePolicyReconciler", reflect.TypeOf((*MockMulticlusterGraphQLPersistedQueryCachePolicyReconcileLoop)(nil).AddMulticlusterGraphQLPersistedQueryCachePolicyReconciler), varargs...)
}

// MockMulticlusterFailoverPolicyReconciler is a mock of MulticlusterFailoverPolicyReconciler interface.
type MockMulticlusterFailoverPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterFailoverPolicyReconcilerMockRecorder
}

// MockMulticlusterFailoverPolicyReconcilerMockRecorder is the mock recorder for MockMulticlusterFailoverPolicyReconciler.
type MockMulticlusterFailoverPolicyReconcilerMockRecorder struct {
	mock *MockMulticlusterFailoverPolicyReconciler
}

// NewMockMulticlusterFailoverPolicyReconciler creates a new mock instance.
func NewMockMulticlusterFailoverPolicyReconciler(ctrl *gomock.Controller) *MockMulticlusterFailoverPolicyReconciler {
	mock := &MockMulticlusterFailoverPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterFailoverPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterFailoverPolicyReconciler) EXPECT() *MockMulticlusterFailoverPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileFailoverPolicy mocks base method.
func (m *MockMulticlusterFailoverPolicyReconciler) ReconcileFailoverPolicy(clusterName string, obj *v2.FailoverPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileFailoverPolicy", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileFailoverPolicy indicates an expected call of ReconcileFailoverPolicy.
func (mr *MockMulticlusterFailoverPolicyReconcilerMockRecorder) ReconcileFailoverPolicy(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileFailoverPolicy", reflect.TypeOf((*MockMulticlusterFailoverPolicyReconciler)(nil).ReconcileFailoverPolicy), clusterName, obj)
}

// MockMulticlusterFailoverPolicyDeletionReconciler is a mock of MulticlusterFailoverPolicyDeletionReconciler interface.
type MockMulticlusterFailoverPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterFailoverPolicyDeletionReconcilerMockRecorder
}

// MockMulticlusterFailoverPolicyDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterFailoverPolicyDeletionReconciler.
type MockMulticlusterFailoverPolicyDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterFailoverPolicyDeletionReconciler
}

// NewMockMulticlusterFailoverPolicyDeletionReconciler creates a new mock instance.
func NewMockMulticlusterFailoverPolicyDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterFailoverPolicyDeletionReconciler {
	mock := &MockMulticlusterFailoverPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterFailoverPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterFailoverPolicyDeletionReconciler) EXPECT() *MockMulticlusterFailoverPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileFailoverPolicyDeletion mocks base method.
func (m *MockMulticlusterFailoverPolicyDeletionReconciler) ReconcileFailoverPolicyDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileFailoverPolicyDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileFailoverPolicyDeletion indicates an expected call of ReconcileFailoverPolicyDeletion.
func (mr *MockMulticlusterFailoverPolicyDeletionReconcilerMockRecorder) ReconcileFailoverPolicyDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileFailoverPolicyDeletion", reflect.TypeOf((*MockMulticlusterFailoverPolicyDeletionReconciler)(nil).ReconcileFailoverPolicyDeletion), clusterName, req)
}

// MockMulticlusterFailoverPolicyReconcileLoop is a mock of MulticlusterFailoverPolicyReconcileLoop interface.
type MockMulticlusterFailoverPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterFailoverPolicyReconcileLoopMockRecorder
}

// MockMulticlusterFailoverPolicyReconcileLoopMockRecorder is the mock recorder for MockMulticlusterFailoverPolicyReconcileLoop.
type MockMulticlusterFailoverPolicyReconcileLoopMockRecorder struct {
	mock *MockMulticlusterFailoverPolicyReconcileLoop
}

// NewMockMulticlusterFailoverPolicyReconcileLoop creates a new mock instance.
func NewMockMulticlusterFailoverPolicyReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterFailoverPolicyReconcileLoop {
	mock := &MockMulticlusterFailoverPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterFailoverPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterFailoverPolicyReconcileLoop) EXPECT() *MockMulticlusterFailoverPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterFailoverPolicyReconciler mocks base method.
func (m *MockMulticlusterFailoverPolicyReconcileLoop) AddMulticlusterFailoverPolicyReconciler(ctx context.Context, rec controller.MulticlusterFailoverPolicyReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterFailoverPolicyReconciler", varargs...)
}

// AddMulticlusterFailoverPolicyReconciler indicates an expected call of AddMulticlusterFailoverPolicyReconciler.
func (mr *MockMulticlusterFailoverPolicyReconcileLoopMockRecorder) AddMulticlusterFailoverPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterFailoverPolicyReconciler", reflect.TypeOf((*MockMulticlusterFailoverPolicyReconcileLoop)(nil).AddMulticlusterFailoverPolicyReconciler), varargs...)
}

// MockMulticlusterOutlierDetectionPolicyReconciler is a mock of MulticlusterOutlierDetectionPolicyReconciler interface.
type MockMulticlusterOutlierDetectionPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterOutlierDetectionPolicyReconcilerMockRecorder
}

// MockMulticlusterOutlierDetectionPolicyReconcilerMockRecorder is the mock recorder for MockMulticlusterOutlierDetectionPolicyReconciler.
type MockMulticlusterOutlierDetectionPolicyReconcilerMockRecorder struct {
	mock *MockMulticlusterOutlierDetectionPolicyReconciler
}

// NewMockMulticlusterOutlierDetectionPolicyReconciler creates a new mock instance.
func NewMockMulticlusterOutlierDetectionPolicyReconciler(ctrl *gomock.Controller) *MockMulticlusterOutlierDetectionPolicyReconciler {
	mock := &MockMulticlusterOutlierDetectionPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterOutlierDetectionPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterOutlierDetectionPolicyReconciler) EXPECT() *MockMulticlusterOutlierDetectionPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileOutlierDetectionPolicy mocks base method.
func (m *MockMulticlusterOutlierDetectionPolicyReconciler) ReconcileOutlierDetectionPolicy(clusterName string, obj *v2.OutlierDetectionPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileOutlierDetectionPolicy", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileOutlierDetectionPolicy indicates an expected call of ReconcileOutlierDetectionPolicy.
func (mr *MockMulticlusterOutlierDetectionPolicyReconcilerMockRecorder) ReconcileOutlierDetectionPolicy(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileOutlierDetectionPolicy", reflect.TypeOf((*MockMulticlusterOutlierDetectionPolicyReconciler)(nil).ReconcileOutlierDetectionPolicy), clusterName, obj)
}

// MockMulticlusterOutlierDetectionPolicyDeletionReconciler is a mock of MulticlusterOutlierDetectionPolicyDeletionReconciler interface.
type MockMulticlusterOutlierDetectionPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterOutlierDetectionPolicyDeletionReconcilerMockRecorder
}

// MockMulticlusterOutlierDetectionPolicyDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterOutlierDetectionPolicyDeletionReconciler.
type MockMulticlusterOutlierDetectionPolicyDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterOutlierDetectionPolicyDeletionReconciler
}

// NewMockMulticlusterOutlierDetectionPolicyDeletionReconciler creates a new mock instance.
func NewMockMulticlusterOutlierDetectionPolicyDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterOutlierDetectionPolicyDeletionReconciler {
	mock := &MockMulticlusterOutlierDetectionPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterOutlierDetectionPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterOutlierDetectionPolicyDeletionReconciler) EXPECT() *MockMulticlusterOutlierDetectionPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileOutlierDetectionPolicyDeletion mocks base method.
func (m *MockMulticlusterOutlierDetectionPolicyDeletionReconciler) ReconcileOutlierDetectionPolicyDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileOutlierDetectionPolicyDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileOutlierDetectionPolicyDeletion indicates an expected call of ReconcileOutlierDetectionPolicyDeletion.
func (mr *MockMulticlusterOutlierDetectionPolicyDeletionReconcilerMockRecorder) ReconcileOutlierDetectionPolicyDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileOutlierDetectionPolicyDeletion", reflect.TypeOf((*MockMulticlusterOutlierDetectionPolicyDeletionReconciler)(nil).ReconcileOutlierDetectionPolicyDeletion), clusterName, req)
}

// MockMulticlusterOutlierDetectionPolicyReconcileLoop is a mock of MulticlusterOutlierDetectionPolicyReconcileLoop interface.
type MockMulticlusterOutlierDetectionPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterOutlierDetectionPolicyReconcileLoopMockRecorder
}

// MockMulticlusterOutlierDetectionPolicyReconcileLoopMockRecorder is the mock recorder for MockMulticlusterOutlierDetectionPolicyReconcileLoop.
type MockMulticlusterOutlierDetectionPolicyReconcileLoopMockRecorder struct {
	mock *MockMulticlusterOutlierDetectionPolicyReconcileLoop
}

// NewMockMulticlusterOutlierDetectionPolicyReconcileLoop creates a new mock instance.
func NewMockMulticlusterOutlierDetectionPolicyReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterOutlierDetectionPolicyReconcileLoop {
	mock := &MockMulticlusterOutlierDetectionPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterOutlierDetectionPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterOutlierDetectionPolicyReconcileLoop) EXPECT() *MockMulticlusterOutlierDetectionPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterOutlierDetectionPolicyReconciler mocks base method.
func (m *MockMulticlusterOutlierDetectionPolicyReconcileLoop) AddMulticlusterOutlierDetectionPolicyReconciler(ctx context.Context, rec controller.MulticlusterOutlierDetectionPolicyReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterOutlierDetectionPolicyReconciler", varargs...)
}

// AddMulticlusterOutlierDetectionPolicyReconciler indicates an expected call of AddMulticlusterOutlierDetectionPolicyReconciler.
func (mr *MockMulticlusterOutlierDetectionPolicyReconcileLoopMockRecorder) AddMulticlusterOutlierDetectionPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterOutlierDetectionPolicyReconciler", reflect.TypeOf((*MockMulticlusterOutlierDetectionPolicyReconcileLoop)(nil).AddMulticlusterOutlierDetectionPolicyReconciler), varargs...)
}

// MockMulticlusterAdaptiveRequestConcurrencyPolicyReconciler is a mock of MulticlusterAdaptiveRequestConcurrencyPolicyReconciler interface.
type MockMulticlusterAdaptiveRequestConcurrencyPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterAdaptiveRequestConcurrencyPolicyReconcilerMockRecorder
}

// MockMulticlusterAdaptiveRequestConcurrencyPolicyReconcilerMockRecorder is the mock recorder for MockMulticlusterAdaptiveRequestConcurrencyPolicyReconciler.
type MockMulticlusterAdaptiveRequestConcurrencyPolicyReconcilerMockRecorder struct {
	mock *MockMulticlusterAdaptiveRequestConcurrencyPolicyReconciler
}

// NewMockMulticlusterAdaptiveRequestConcurrencyPolicyReconciler creates a new mock instance.
func NewMockMulticlusterAdaptiveRequestConcurrencyPolicyReconciler(ctrl *gomock.Controller) *MockMulticlusterAdaptiveRequestConcurrencyPolicyReconciler {
	mock := &MockMulticlusterAdaptiveRequestConcurrencyPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterAdaptiveRequestConcurrencyPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterAdaptiveRequestConcurrencyPolicyReconciler) EXPECT() *MockMulticlusterAdaptiveRequestConcurrencyPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileAdaptiveRequestConcurrencyPolicy mocks base method.
func (m *MockMulticlusterAdaptiveRequestConcurrencyPolicyReconciler) ReconcileAdaptiveRequestConcurrencyPolicy(clusterName string, obj *v2.AdaptiveRequestConcurrencyPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileAdaptiveRequestConcurrencyPolicy", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileAdaptiveRequestConcurrencyPolicy indicates an expected call of ReconcileAdaptiveRequestConcurrencyPolicy.
func (mr *MockMulticlusterAdaptiveRequestConcurrencyPolicyReconcilerMockRecorder) ReconcileAdaptiveRequestConcurrencyPolicy(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileAdaptiveRequestConcurrencyPolicy", reflect.TypeOf((*MockMulticlusterAdaptiveRequestConcurrencyPolicyReconciler)(nil).ReconcileAdaptiveRequestConcurrencyPolicy), clusterName, obj)
}

// MockMulticlusterAdaptiveRequestConcurrencyPolicyDeletionReconciler is a mock of MulticlusterAdaptiveRequestConcurrencyPolicyDeletionReconciler interface.
type MockMulticlusterAdaptiveRequestConcurrencyPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterAdaptiveRequestConcurrencyPolicyDeletionReconcilerMockRecorder
}

// MockMulticlusterAdaptiveRequestConcurrencyPolicyDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterAdaptiveRequestConcurrencyPolicyDeletionReconciler.
type MockMulticlusterAdaptiveRequestConcurrencyPolicyDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterAdaptiveRequestConcurrencyPolicyDeletionReconciler
}

// NewMockMulticlusterAdaptiveRequestConcurrencyPolicyDeletionReconciler creates a new mock instance.
func NewMockMulticlusterAdaptiveRequestConcurrencyPolicyDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterAdaptiveRequestConcurrencyPolicyDeletionReconciler {
	mock := &MockMulticlusterAdaptiveRequestConcurrencyPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterAdaptiveRequestConcurrencyPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterAdaptiveRequestConcurrencyPolicyDeletionReconciler) EXPECT() *MockMulticlusterAdaptiveRequestConcurrencyPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileAdaptiveRequestConcurrencyPolicyDeletion mocks base method.
func (m *MockMulticlusterAdaptiveRequestConcurrencyPolicyDeletionReconciler) ReconcileAdaptiveRequestConcurrencyPolicyDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileAdaptiveRequestConcurrencyPolicyDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileAdaptiveRequestConcurrencyPolicyDeletion indicates an expected call of ReconcileAdaptiveRequestConcurrencyPolicyDeletion.
func (mr *MockMulticlusterAdaptiveRequestConcurrencyPolicyDeletionReconcilerMockRecorder) ReconcileAdaptiveRequestConcurrencyPolicyDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileAdaptiveRequestConcurrencyPolicyDeletion", reflect.TypeOf((*MockMulticlusterAdaptiveRequestConcurrencyPolicyDeletionReconciler)(nil).ReconcileAdaptiveRequestConcurrencyPolicyDeletion), clusterName, req)
}

// MockMulticlusterAdaptiveRequestConcurrencyPolicyReconcileLoop is a mock of MulticlusterAdaptiveRequestConcurrencyPolicyReconcileLoop interface.
type MockMulticlusterAdaptiveRequestConcurrencyPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterAdaptiveRequestConcurrencyPolicyReconcileLoopMockRecorder
}

// MockMulticlusterAdaptiveRequestConcurrencyPolicyReconcileLoopMockRecorder is the mock recorder for MockMulticlusterAdaptiveRequestConcurrencyPolicyReconcileLoop.
type MockMulticlusterAdaptiveRequestConcurrencyPolicyReconcileLoopMockRecorder struct {
	mock *MockMulticlusterAdaptiveRequestConcurrencyPolicyReconcileLoop
}

// NewMockMulticlusterAdaptiveRequestConcurrencyPolicyReconcileLoop creates a new mock instance.
func NewMockMulticlusterAdaptiveRequestConcurrencyPolicyReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterAdaptiveRequestConcurrencyPolicyReconcileLoop {
	mock := &MockMulticlusterAdaptiveRequestConcurrencyPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterAdaptiveRequestConcurrencyPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterAdaptiveRequestConcurrencyPolicyReconcileLoop) EXPECT() *MockMulticlusterAdaptiveRequestConcurrencyPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterAdaptiveRequestConcurrencyPolicyReconciler mocks base method.
func (m *MockMulticlusterAdaptiveRequestConcurrencyPolicyReconcileLoop) AddMulticlusterAdaptiveRequestConcurrencyPolicyReconciler(ctx context.Context, rec controller.MulticlusterAdaptiveRequestConcurrencyPolicyReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterAdaptiveRequestConcurrencyPolicyReconciler", varargs...)
}

// AddMulticlusterAdaptiveRequestConcurrencyPolicyReconciler indicates an expected call of AddMulticlusterAdaptiveRequestConcurrencyPolicyReconciler.
func (mr *MockMulticlusterAdaptiveRequestConcurrencyPolicyReconcileLoopMockRecorder) AddMulticlusterAdaptiveRequestConcurrencyPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterAdaptiveRequestConcurrencyPolicyReconciler", reflect.TypeOf((*MockMulticlusterAdaptiveRequestConcurrencyPolicyReconcileLoop)(nil).AddMulticlusterAdaptiveRequestConcurrencyPolicyReconciler), varargs...)
}

// MockMulticlusterFaultInjectionPolicyReconciler is a mock of MulticlusterFaultInjectionPolicyReconciler interface.
type MockMulticlusterFaultInjectionPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterFaultInjectionPolicyReconcilerMockRecorder
}

// MockMulticlusterFaultInjectionPolicyReconcilerMockRecorder is the mock recorder for MockMulticlusterFaultInjectionPolicyReconciler.
type MockMulticlusterFaultInjectionPolicyReconcilerMockRecorder struct {
	mock *MockMulticlusterFaultInjectionPolicyReconciler
}

// NewMockMulticlusterFaultInjectionPolicyReconciler creates a new mock instance.
func NewMockMulticlusterFaultInjectionPolicyReconciler(ctrl *gomock.Controller) *MockMulticlusterFaultInjectionPolicyReconciler {
	mock := &MockMulticlusterFaultInjectionPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterFaultInjectionPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterFaultInjectionPolicyReconciler) EXPECT() *MockMulticlusterFaultInjectionPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileFaultInjectionPolicy mocks base method.
func (m *MockMulticlusterFaultInjectionPolicyReconciler) ReconcileFaultInjectionPolicy(clusterName string, obj *v2.FaultInjectionPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileFaultInjectionPolicy", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileFaultInjectionPolicy indicates an expected call of ReconcileFaultInjectionPolicy.
func (mr *MockMulticlusterFaultInjectionPolicyReconcilerMockRecorder) ReconcileFaultInjectionPolicy(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileFaultInjectionPolicy", reflect.TypeOf((*MockMulticlusterFaultInjectionPolicyReconciler)(nil).ReconcileFaultInjectionPolicy), clusterName, obj)
}

// MockMulticlusterFaultInjectionPolicyDeletionReconciler is a mock of MulticlusterFaultInjectionPolicyDeletionReconciler interface.
type MockMulticlusterFaultInjectionPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterFaultInjectionPolicyDeletionReconcilerMockRecorder
}

// MockMulticlusterFaultInjectionPolicyDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterFaultInjectionPolicyDeletionReconciler.
type MockMulticlusterFaultInjectionPolicyDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterFaultInjectionPolicyDeletionReconciler
}

// NewMockMulticlusterFaultInjectionPolicyDeletionReconciler creates a new mock instance.
func NewMockMulticlusterFaultInjectionPolicyDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterFaultInjectionPolicyDeletionReconciler {
	mock := &MockMulticlusterFaultInjectionPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterFaultInjectionPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterFaultInjectionPolicyDeletionReconciler) EXPECT() *MockMulticlusterFaultInjectionPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileFaultInjectionPolicyDeletion mocks base method.
func (m *MockMulticlusterFaultInjectionPolicyDeletionReconciler) ReconcileFaultInjectionPolicyDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileFaultInjectionPolicyDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileFaultInjectionPolicyDeletion indicates an expected call of ReconcileFaultInjectionPolicyDeletion.
func (mr *MockMulticlusterFaultInjectionPolicyDeletionReconcilerMockRecorder) ReconcileFaultInjectionPolicyDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileFaultInjectionPolicyDeletion", reflect.TypeOf((*MockMulticlusterFaultInjectionPolicyDeletionReconciler)(nil).ReconcileFaultInjectionPolicyDeletion), clusterName, req)
}

// MockMulticlusterFaultInjectionPolicyReconcileLoop is a mock of MulticlusterFaultInjectionPolicyReconcileLoop interface.
type MockMulticlusterFaultInjectionPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterFaultInjectionPolicyReconcileLoopMockRecorder
}

// MockMulticlusterFaultInjectionPolicyReconcileLoopMockRecorder is the mock recorder for MockMulticlusterFaultInjectionPolicyReconcileLoop.
type MockMulticlusterFaultInjectionPolicyReconcileLoopMockRecorder struct {
	mock *MockMulticlusterFaultInjectionPolicyReconcileLoop
}

// NewMockMulticlusterFaultInjectionPolicyReconcileLoop creates a new mock instance.
func NewMockMulticlusterFaultInjectionPolicyReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterFaultInjectionPolicyReconcileLoop {
	mock := &MockMulticlusterFaultInjectionPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterFaultInjectionPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterFaultInjectionPolicyReconcileLoop) EXPECT() *MockMulticlusterFaultInjectionPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterFaultInjectionPolicyReconciler mocks base method.
func (m *MockMulticlusterFaultInjectionPolicyReconcileLoop) AddMulticlusterFaultInjectionPolicyReconciler(ctx context.Context, rec controller.MulticlusterFaultInjectionPolicyReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterFaultInjectionPolicyReconciler", varargs...)
}

// AddMulticlusterFaultInjectionPolicyReconciler indicates an expected call of AddMulticlusterFaultInjectionPolicyReconciler.
func (mr *MockMulticlusterFaultInjectionPolicyReconcileLoopMockRecorder) AddMulticlusterFaultInjectionPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterFaultInjectionPolicyReconciler", reflect.TypeOf((*MockMulticlusterFaultInjectionPolicyReconcileLoop)(nil).AddMulticlusterFaultInjectionPolicyReconciler), varargs...)
}

// MockMulticlusterRetryTimeoutPolicyReconciler is a mock of MulticlusterRetryTimeoutPolicyReconciler interface.
type MockMulticlusterRetryTimeoutPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRetryTimeoutPolicyReconcilerMockRecorder
}

// MockMulticlusterRetryTimeoutPolicyReconcilerMockRecorder is the mock recorder for MockMulticlusterRetryTimeoutPolicyReconciler.
type MockMulticlusterRetryTimeoutPolicyReconcilerMockRecorder struct {
	mock *MockMulticlusterRetryTimeoutPolicyReconciler
}

// NewMockMulticlusterRetryTimeoutPolicyReconciler creates a new mock instance.
func NewMockMulticlusterRetryTimeoutPolicyReconciler(ctrl *gomock.Controller) *MockMulticlusterRetryTimeoutPolicyReconciler {
	mock := &MockMulticlusterRetryTimeoutPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRetryTimeoutPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRetryTimeoutPolicyReconciler) EXPECT() *MockMulticlusterRetryTimeoutPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRetryTimeoutPolicy mocks base method.
func (m *MockMulticlusterRetryTimeoutPolicyReconciler) ReconcileRetryTimeoutPolicy(clusterName string, obj *v2.RetryTimeoutPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRetryTimeoutPolicy", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRetryTimeoutPolicy indicates an expected call of ReconcileRetryTimeoutPolicy.
func (mr *MockMulticlusterRetryTimeoutPolicyReconcilerMockRecorder) ReconcileRetryTimeoutPolicy(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRetryTimeoutPolicy", reflect.TypeOf((*MockMulticlusterRetryTimeoutPolicyReconciler)(nil).ReconcileRetryTimeoutPolicy), clusterName, obj)
}

// MockMulticlusterRetryTimeoutPolicyDeletionReconciler is a mock of MulticlusterRetryTimeoutPolicyDeletionReconciler interface.
type MockMulticlusterRetryTimeoutPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRetryTimeoutPolicyDeletionReconcilerMockRecorder
}

// MockMulticlusterRetryTimeoutPolicyDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterRetryTimeoutPolicyDeletionReconciler.
type MockMulticlusterRetryTimeoutPolicyDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterRetryTimeoutPolicyDeletionReconciler
}

// NewMockMulticlusterRetryTimeoutPolicyDeletionReconciler creates a new mock instance.
func NewMockMulticlusterRetryTimeoutPolicyDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterRetryTimeoutPolicyDeletionReconciler {
	mock := &MockMulticlusterRetryTimeoutPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRetryTimeoutPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRetryTimeoutPolicyDeletionReconciler) EXPECT() *MockMulticlusterRetryTimeoutPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRetryTimeoutPolicyDeletion mocks base method.
func (m *MockMulticlusterRetryTimeoutPolicyDeletionReconciler) ReconcileRetryTimeoutPolicyDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRetryTimeoutPolicyDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileRetryTimeoutPolicyDeletion indicates an expected call of ReconcileRetryTimeoutPolicyDeletion.
func (mr *MockMulticlusterRetryTimeoutPolicyDeletionReconcilerMockRecorder) ReconcileRetryTimeoutPolicyDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRetryTimeoutPolicyDeletion", reflect.TypeOf((*MockMulticlusterRetryTimeoutPolicyDeletionReconciler)(nil).ReconcileRetryTimeoutPolicyDeletion), clusterName, req)
}

// MockMulticlusterRetryTimeoutPolicyReconcileLoop is a mock of MulticlusterRetryTimeoutPolicyReconcileLoop interface.
type MockMulticlusterRetryTimeoutPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRetryTimeoutPolicyReconcileLoopMockRecorder
}

// MockMulticlusterRetryTimeoutPolicyReconcileLoopMockRecorder is the mock recorder for MockMulticlusterRetryTimeoutPolicyReconcileLoop.
type MockMulticlusterRetryTimeoutPolicyReconcileLoopMockRecorder struct {
	mock *MockMulticlusterRetryTimeoutPolicyReconcileLoop
}

// NewMockMulticlusterRetryTimeoutPolicyReconcileLoop creates a new mock instance.
func NewMockMulticlusterRetryTimeoutPolicyReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterRetryTimeoutPolicyReconcileLoop {
	mock := &MockMulticlusterRetryTimeoutPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRetryTimeoutPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRetryTimeoutPolicyReconcileLoop) EXPECT() *MockMulticlusterRetryTimeoutPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterRetryTimeoutPolicyReconciler mocks base method.
func (m *MockMulticlusterRetryTimeoutPolicyReconcileLoop) AddMulticlusterRetryTimeoutPolicyReconciler(ctx context.Context, rec controller.MulticlusterRetryTimeoutPolicyReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterRetryTimeoutPolicyReconciler", varargs...)
}

// AddMulticlusterRetryTimeoutPolicyReconciler indicates an expected call of AddMulticlusterRetryTimeoutPolicyReconciler.
func (mr *MockMulticlusterRetryTimeoutPolicyReconcileLoopMockRecorder) AddMulticlusterRetryTimeoutPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterRetryTimeoutPolicyReconciler", reflect.TypeOf((*MockMulticlusterRetryTimeoutPolicyReconcileLoop)(nil).AddMulticlusterRetryTimeoutPolicyReconciler), varargs...)
}

// MockMulticlusterConnectionPolicyReconciler is a mock of MulticlusterConnectionPolicyReconciler interface.
type MockMulticlusterConnectionPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterConnectionPolicyReconcilerMockRecorder
}

// MockMulticlusterConnectionPolicyReconcilerMockRecorder is the mock recorder for MockMulticlusterConnectionPolicyReconciler.
type MockMulticlusterConnectionPolicyReconcilerMockRecorder struct {
	mock *MockMulticlusterConnectionPolicyReconciler
}

// NewMockMulticlusterConnectionPolicyReconciler creates a new mock instance.
func NewMockMulticlusterConnectionPolicyReconciler(ctrl *gomock.Controller) *MockMulticlusterConnectionPolicyReconciler {
	mock := &MockMulticlusterConnectionPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterConnectionPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterConnectionPolicyReconciler) EXPECT() *MockMulticlusterConnectionPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileConnectionPolicy mocks base method.
func (m *MockMulticlusterConnectionPolicyReconciler) ReconcileConnectionPolicy(clusterName string, obj *v2.ConnectionPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileConnectionPolicy", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileConnectionPolicy indicates an expected call of ReconcileConnectionPolicy.
func (mr *MockMulticlusterConnectionPolicyReconcilerMockRecorder) ReconcileConnectionPolicy(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileConnectionPolicy", reflect.TypeOf((*MockMulticlusterConnectionPolicyReconciler)(nil).ReconcileConnectionPolicy), clusterName, obj)
}

// MockMulticlusterConnectionPolicyDeletionReconciler is a mock of MulticlusterConnectionPolicyDeletionReconciler interface.
type MockMulticlusterConnectionPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterConnectionPolicyDeletionReconcilerMockRecorder
}

// MockMulticlusterConnectionPolicyDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterConnectionPolicyDeletionReconciler.
type MockMulticlusterConnectionPolicyDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterConnectionPolicyDeletionReconciler
}

// NewMockMulticlusterConnectionPolicyDeletionReconciler creates a new mock instance.
func NewMockMulticlusterConnectionPolicyDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterConnectionPolicyDeletionReconciler {
	mock := &MockMulticlusterConnectionPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterConnectionPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterConnectionPolicyDeletionReconciler) EXPECT() *MockMulticlusterConnectionPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileConnectionPolicyDeletion mocks base method.
func (m *MockMulticlusterConnectionPolicyDeletionReconciler) ReconcileConnectionPolicyDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileConnectionPolicyDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileConnectionPolicyDeletion indicates an expected call of ReconcileConnectionPolicyDeletion.
func (mr *MockMulticlusterConnectionPolicyDeletionReconcilerMockRecorder) ReconcileConnectionPolicyDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileConnectionPolicyDeletion", reflect.TypeOf((*MockMulticlusterConnectionPolicyDeletionReconciler)(nil).ReconcileConnectionPolicyDeletion), clusterName, req)
}

// MockMulticlusterConnectionPolicyReconcileLoop is a mock of MulticlusterConnectionPolicyReconcileLoop interface.
type MockMulticlusterConnectionPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterConnectionPolicyReconcileLoopMockRecorder
}

// MockMulticlusterConnectionPolicyReconcileLoopMockRecorder is the mock recorder for MockMulticlusterConnectionPolicyReconcileLoop.
type MockMulticlusterConnectionPolicyReconcileLoopMockRecorder struct {
	mock *MockMulticlusterConnectionPolicyReconcileLoop
}

// NewMockMulticlusterConnectionPolicyReconcileLoop creates a new mock instance.
func NewMockMulticlusterConnectionPolicyReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterConnectionPolicyReconcileLoop {
	mock := &MockMulticlusterConnectionPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterConnectionPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterConnectionPolicyReconcileLoop) EXPECT() *MockMulticlusterConnectionPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterConnectionPolicyReconciler mocks base method.
func (m *MockMulticlusterConnectionPolicyReconcileLoop) AddMulticlusterConnectionPolicyReconciler(ctx context.Context, rec controller.MulticlusterConnectionPolicyReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterConnectionPolicyReconciler", varargs...)
}

// AddMulticlusterConnectionPolicyReconciler indicates an expected call of AddMulticlusterConnectionPolicyReconciler.
func (mr *MockMulticlusterConnectionPolicyReconcileLoopMockRecorder) AddMulticlusterConnectionPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterConnectionPolicyReconciler", reflect.TypeOf((*MockMulticlusterConnectionPolicyReconcileLoop)(nil).AddMulticlusterConnectionPolicyReconciler), varargs...)
}

// MockMulticlusterTrimProxyConfigPolicyReconciler is a mock of MulticlusterTrimProxyConfigPolicyReconciler interface.
type MockMulticlusterTrimProxyConfigPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTrimProxyConfigPolicyReconcilerMockRecorder
}

// MockMulticlusterTrimProxyConfigPolicyReconcilerMockRecorder is the mock recorder for MockMulticlusterTrimProxyConfigPolicyReconciler.
type MockMulticlusterTrimProxyConfigPolicyReconcilerMockRecorder struct {
	mock *MockMulticlusterTrimProxyConfigPolicyReconciler
}

// NewMockMulticlusterTrimProxyConfigPolicyReconciler creates a new mock instance.
func NewMockMulticlusterTrimProxyConfigPolicyReconciler(ctrl *gomock.Controller) *MockMulticlusterTrimProxyConfigPolicyReconciler {
	mock := &MockMulticlusterTrimProxyConfigPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTrimProxyConfigPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterTrimProxyConfigPolicyReconciler) EXPECT() *MockMulticlusterTrimProxyConfigPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileTrimProxyConfigPolicy mocks base method.
func (m *MockMulticlusterTrimProxyConfigPolicyReconciler) ReconcileTrimProxyConfigPolicy(clusterName string, obj *v2.TrimProxyConfigPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTrimProxyConfigPolicy", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileTrimProxyConfigPolicy indicates an expected call of ReconcileTrimProxyConfigPolicy.
func (mr *MockMulticlusterTrimProxyConfigPolicyReconcilerMockRecorder) ReconcileTrimProxyConfigPolicy(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTrimProxyConfigPolicy", reflect.TypeOf((*MockMulticlusterTrimProxyConfigPolicyReconciler)(nil).ReconcileTrimProxyConfigPolicy), clusterName, obj)
}

// MockMulticlusterTrimProxyConfigPolicyDeletionReconciler is a mock of MulticlusterTrimProxyConfigPolicyDeletionReconciler interface.
type MockMulticlusterTrimProxyConfigPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTrimProxyConfigPolicyDeletionReconcilerMockRecorder
}

// MockMulticlusterTrimProxyConfigPolicyDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterTrimProxyConfigPolicyDeletionReconciler.
type MockMulticlusterTrimProxyConfigPolicyDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterTrimProxyConfigPolicyDeletionReconciler
}

// NewMockMulticlusterTrimProxyConfigPolicyDeletionReconciler creates a new mock instance.
func NewMockMulticlusterTrimProxyConfigPolicyDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterTrimProxyConfigPolicyDeletionReconciler {
	mock := &MockMulticlusterTrimProxyConfigPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTrimProxyConfigPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterTrimProxyConfigPolicyDeletionReconciler) EXPECT() *MockMulticlusterTrimProxyConfigPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileTrimProxyConfigPolicyDeletion mocks base method.
func (m *MockMulticlusterTrimProxyConfigPolicyDeletionReconciler) ReconcileTrimProxyConfigPolicyDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTrimProxyConfigPolicyDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileTrimProxyConfigPolicyDeletion indicates an expected call of ReconcileTrimProxyConfigPolicyDeletion.
func (mr *MockMulticlusterTrimProxyConfigPolicyDeletionReconcilerMockRecorder) ReconcileTrimProxyConfigPolicyDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTrimProxyConfigPolicyDeletion", reflect.TypeOf((*MockMulticlusterTrimProxyConfigPolicyDeletionReconciler)(nil).ReconcileTrimProxyConfigPolicyDeletion), clusterName, req)
}

// MockMulticlusterTrimProxyConfigPolicyReconcileLoop is a mock of MulticlusterTrimProxyConfigPolicyReconcileLoop interface.
type MockMulticlusterTrimProxyConfigPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTrimProxyConfigPolicyReconcileLoopMockRecorder
}

// MockMulticlusterTrimProxyConfigPolicyReconcileLoopMockRecorder is the mock recorder for MockMulticlusterTrimProxyConfigPolicyReconcileLoop.
type MockMulticlusterTrimProxyConfigPolicyReconcileLoopMockRecorder struct {
	mock *MockMulticlusterTrimProxyConfigPolicyReconcileLoop
}

// NewMockMulticlusterTrimProxyConfigPolicyReconcileLoop creates a new mock instance.
func NewMockMulticlusterTrimProxyConfigPolicyReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterTrimProxyConfigPolicyReconcileLoop {
	mock := &MockMulticlusterTrimProxyConfigPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTrimProxyConfigPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterTrimProxyConfigPolicyReconcileLoop) EXPECT() *MockMulticlusterTrimProxyConfigPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterTrimProxyConfigPolicyReconciler mocks base method.
func (m *MockMulticlusterTrimProxyConfigPolicyReconcileLoop) AddMulticlusterTrimProxyConfigPolicyReconciler(ctx context.Context, rec controller.MulticlusterTrimProxyConfigPolicyReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterTrimProxyConfigPolicyReconciler", varargs...)
}

// AddMulticlusterTrimProxyConfigPolicyReconciler indicates an expected call of AddMulticlusterTrimProxyConfigPolicyReconciler.
func (mr *MockMulticlusterTrimProxyConfigPolicyReconcileLoopMockRecorder) AddMulticlusterTrimProxyConfigPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterTrimProxyConfigPolicyReconciler", reflect.TypeOf((*MockMulticlusterTrimProxyConfigPolicyReconcileLoop)(nil).AddMulticlusterTrimProxyConfigPolicyReconciler), varargs...)
}

// MockMulticlusterActiveHealthCheckPolicyReconciler is a mock of MulticlusterActiveHealthCheckPolicyReconciler interface.
type MockMulticlusterActiveHealthCheckPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterActiveHealthCheckPolicyReconcilerMockRecorder
}

// MockMulticlusterActiveHealthCheckPolicyReconcilerMockRecorder is the mock recorder for MockMulticlusterActiveHealthCheckPolicyReconciler.
type MockMulticlusterActiveHealthCheckPolicyReconcilerMockRecorder struct {
	mock *MockMulticlusterActiveHealthCheckPolicyReconciler
}

// NewMockMulticlusterActiveHealthCheckPolicyReconciler creates a new mock instance.
func NewMockMulticlusterActiveHealthCheckPolicyReconciler(ctrl *gomock.Controller) *MockMulticlusterActiveHealthCheckPolicyReconciler {
	mock := &MockMulticlusterActiveHealthCheckPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterActiveHealthCheckPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterActiveHealthCheckPolicyReconciler) EXPECT() *MockMulticlusterActiveHealthCheckPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileActiveHealthCheckPolicy mocks base method.
func (m *MockMulticlusterActiveHealthCheckPolicyReconciler) ReconcileActiveHealthCheckPolicy(clusterName string, obj *v2.ActiveHealthCheckPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileActiveHealthCheckPolicy", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileActiveHealthCheckPolicy indicates an expected call of ReconcileActiveHealthCheckPolicy.
func (mr *MockMulticlusterActiveHealthCheckPolicyReconcilerMockRecorder) ReconcileActiveHealthCheckPolicy(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileActiveHealthCheckPolicy", reflect.TypeOf((*MockMulticlusterActiveHealthCheckPolicyReconciler)(nil).ReconcileActiveHealthCheckPolicy), clusterName, obj)
}

// MockMulticlusterActiveHealthCheckPolicyDeletionReconciler is a mock of MulticlusterActiveHealthCheckPolicyDeletionReconciler interface.
type MockMulticlusterActiveHealthCheckPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterActiveHealthCheckPolicyDeletionReconcilerMockRecorder
}

// MockMulticlusterActiveHealthCheckPolicyDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterActiveHealthCheckPolicyDeletionReconciler.
type MockMulticlusterActiveHealthCheckPolicyDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterActiveHealthCheckPolicyDeletionReconciler
}

// NewMockMulticlusterActiveHealthCheckPolicyDeletionReconciler creates a new mock instance.
func NewMockMulticlusterActiveHealthCheckPolicyDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterActiveHealthCheckPolicyDeletionReconciler {
	mock := &MockMulticlusterActiveHealthCheckPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterActiveHealthCheckPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterActiveHealthCheckPolicyDeletionReconciler) EXPECT() *MockMulticlusterActiveHealthCheckPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileActiveHealthCheckPolicyDeletion mocks base method.
func (m *MockMulticlusterActiveHealthCheckPolicyDeletionReconciler) ReconcileActiveHealthCheckPolicyDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileActiveHealthCheckPolicyDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileActiveHealthCheckPolicyDeletion indicates an expected call of ReconcileActiveHealthCheckPolicyDeletion.
func (mr *MockMulticlusterActiveHealthCheckPolicyDeletionReconcilerMockRecorder) ReconcileActiveHealthCheckPolicyDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileActiveHealthCheckPolicyDeletion", reflect.TypeOf((*MockMulticlusterActiveHealthCheckPolicyDeletionReconciler)(nil).ReconcileActiveHealthCheckPolicyDeletion), clusterName, req)
}

// MockMulticlusterActiveHealthCheckPolicyReconcileLoop is a mock of MulticlusterActiveHealthCheckPolicyReconcileLoop interface.
type MockMulticlusterActiveHealthCheckPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterActiveHealthCheckPolicyReconcileLoopMockRecorder
}

// MockMulticlusterActiveHealthCheckPolicyReconcileLoopMockRecorder is the mock recorder for MockMulticlusterActiveHealthCheckPolicyReconcileLoop.
type MockMulticlusterActiveHealthCheckPolicyReconcileLoopMockRecorder struct {
	mock *MockMulticlusterActiveHealthCheckPolicyReconcileLoop
}

// NewMockMulticlusterActiveHealthCheckPolicyReconcileLoop creates a new mock instance.
func NewMockMulticlusterActiveHealthCheckPolicyReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterActiveHealthCheckPolicyReconcileLoop {
	mock := &MockMulticlusterActiveHealthCheckPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterActiveHealthCheckPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterActiveHealthCheckPolicyReconcileLoop) EXPECT() *MockMulticlusterActiveHealthCheckPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterActiveHealthCheckPolicyReconciler mocks base method.
func (m *MockMulticlusterActiveHealthCheckPolicyReconcileLoop) AddMulticlusterActiveHealthCheckPolicyReconciler(ctx context.Context, rec controller.MulticlusterActiveHealthCheckPolicyReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterActiveHealthCheckPolicyReconciler", varargs...)
}

// AddMulticlusterActiveHealthCheckPolicyReconciler indicates an expected call of AddMulticlusterActiveHealthCheckPolicyReconciler.
func (mr *MockMulticlusterActiveHealthCheckPolicyReconcileLoopMockRecorder) AddMulticlusterActiveHealthCheckPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterActiveHealthCheckPolicyReconciler", reflect.TypeOf((*MockMulticlusterActiveHealthCheckPolicyReconcileLoop)(nil).AddMulticlusterActiveHealthCheckPolicyReconciler), varargs...)
}

// MockMulticlusterListenerConnectionPolicyReconciler is a mock of MulticlusterListenerConnectionPolicyReconciler interface.
type MockMulticlusterListenerConnectionPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterListenerConnectionPolicyReconcilerMockRecorder
}

// MockMulticlusterListenerConnectionPolicyReconcilerMockRecorder is the mock recorder for MockMulticlusterListenerConnectionPolicyReconciler.
type MockMulticlusterListenerConnectionPolicyReconcilerMockRecorder struct {
	mock *MockMulticlusterListenerConnectionPolicyReconciler
}

// NewMockMulticlusterListenerConnectionPolicyReconciler creates a new mock instance.
func NewMockMulticlusterListenerConnectionPolicyReconciler(ctrl *gomock.Controller) *MockMulticlusterListenerConnectionPolicyReconciler {
	mock := &MockMulticlusterListenerConnectionPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterListenerConnectionPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterListenerConnectionPolicyReconciler) EXPECT() *MockMulticlusterListenerConnectionPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileListenerConnectionPolicy mocks base method.
func (m *MockMulticlusterListenerConnectionPolicyReconciler) ReconcileListenerConnectionPolicy(clusterName string, obj *v2.ListenerConnectionPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileListenerConnectionPolicy", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileListenerConnectionPolicy indicates an expected call of ReconcileListenerConnectionPolicy.
func (mr *MockMulticlusterListenerConnectionPolicyReconcilerMockRecorder) ReconcileListenerConnectionPolicy(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileListenerConnectionPolicy", reflect.TypeOf((*MockMulticlusterListenerConnectionPolicyReconciler)(nil).ReconcileListenerConnectionPolicy), clusterName, obj)
}

// MockMulticlusterListenerConnectionPolicyDeletionReconciler is a mock of MulticlusterListenerConnectionPolicyDeletionReconciler interface.
type MockMulticlusterListenerConnectionPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterListenerConnectionPolicyDeletionReconcilerMockRecorder
}

// MockMulticlusterListenerConnectionPolicyDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterListenerConnectionPolicyDeletionReconciler.
type MockMulticlusterListenerConnectionPolicyDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterListenerConnectionPolicyDeletionReconciler
}

// NewMockMulticlusterListenerConnectionPolicyDeletionReconciler creates a new mock instance.
func NewMockMulticlusterListenerConnectionPolicyDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterListenerConnectionPolicyDeletionReconciler {
	mock := &MockMulticlusterListenerConnectionPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterListenerConnectionPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterListenerConnectionPolicyDeletionReconciler) EXPECT() *MockMulticlusterListenerConnectionPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileListenerConnectionPolicyDeletion mocks base method.
func (m *MockMulticlusterListenerConnectionPolicyDeletionReconciler) ReconcileListenerConnectionPolicyDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileListenerConnectionPolicyDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileListenerConnectionPolicyDeletion indicates an expected call of ReconcileListenerConnectionPolicyDeletion.
func (mr *MockMulticlusterListenerConnectionPolicyDeletionReconcilerMockRecorder) ReconcileListenerConnectionPolicyDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileListenerConnectionPolicyDeletion", reflect.TypeOf((*MockMulticlusterListenerConnectionPolicyDeletionReconciler)(nil).ReconcileListenerConnectionPolicyDeletion), clusterName, req)
}

// MockMulticlusterListenerConnectionPolicyReconcileLoop is a mock of MulticlusterListenerConnectionPolicyReconcileLoop interface.
type MockMulticlusterListenerConnectionPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterListenerConnectionPolicyReconcileLoopMockRecorder
}

// MockMulticlusterListenerConnectionPolicyReconcileLoopMockRecorder is the mock recorder for MockMulticlusterListenerConnectionPolicyReconcileLoop.
type MockMulticlusterListenerConnectionPolicyReconcileLoopMockRecorder struct {
	mock *MockMulticlusterListenerConnectionPolicyReconcileLoop
}

// NewMockMulticlusterListenerConnectionPolicyReconcileLoop creates a new mock instance.
func NewMockMulticlusterListenerConnectionPolicyReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterListenerConnectionPolicyReconcileLoop {
	mock := &MockMulticlusterListenerConnectionPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterListenerConnectionPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterListenerConnectionPolicyReconcileLoop) EXPECT() *MockMulticlusterListenerConnectionPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterListenerConnectionPolicyReconciler mocks base method.
func (m *MockMulticlusterListenerConnectionPolicyReconcileLoop) AddMulticlusterListenerConnectionPolicyReconciler(ctx context.Context, rec controller.MulticlusterListenerConnectionPolicyReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterListenerConnectionPolicyReconciler", varargs...)
}

// AddMulticlusterListenerConnectionPolicyReconciler indicates an expected call of AddMulticlusterListenerConnectionPolicyReconciler.
func (mr *MockMulticlusterListenerConnectionPolicyReconcileLoopMockRecorder) AddMulticlusterListenerConnectionPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterListenerConnectionPolicyReconciler", reflect.TypeOf((*MockMulticlusterListenerConnectionPolicyReconcileLoop)(nil).AddMulticlusterListenerConnectionPolicyReconciler), varargs...)
}
