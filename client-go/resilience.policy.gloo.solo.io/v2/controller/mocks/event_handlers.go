// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v2 "github.com/solo-io/solo-apis/client-go/resilience.policy.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/client-go/resilience.policy.gloo.solo.io/v2/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockGraphQLPersistedQueryCachePolicyEventHandler is a mock of GraphQLPersistedQueryCachePolicyEventHandler interface.
type MockGraphQLPersistedQueryCachePolicyEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLPersistedQueryCachePolicyEventHandlerMockRecorder
}

// MockGraphQLPersistedQueryCachePolicyEventHandlerMockRecorder is the mock recorder for MockGraphQLPersistedQueryCachePolicyEventHandler.
type MockGraphQLPersistedQueryCachePolicyEventHandlerMockRecorder struct {
	mock *MockGraphQLPersistedQueryCachePolicyEventHandler
}

// NewMockGraphQLPersistedQueryCachePolicyEventHandler creates a new mock instance.
func NewMockGraphQLPersistedQueryCachePolicyEventHandler(ctrl *gomock.Controller) *MockGraphQLPersistedQueryCachePolicyEventHandler {
	mock := &MockGraphQLPersistedQueryCachePolicyEventHandler{ctrl: ctrl}
	mock.recorder = &MockGraphQLPersistedQueryCachePolicyEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLPersistedQueryCachePolicyEventHandler) EXPECT() *MockGraphQLPersistedQueryCachePolicyEventHandlerMockRecorder {
	return m.recorder
}

// CreateGraphQLPersistedQueryCachePolicy mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicyEventHandler) CreateGraphQLPersistedQueryCachePolicy(obj *v2.GraphQLPersistedQueryCachePolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGraphQLPersistedQueryCachePolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGraphQLPersistedQueryCachePolicy indicates an expected call of CreateGraphQLPersistedQueryCachePolicy.
func (mr *MockGraphQLPersistedQueryCachePolicyEventHandlerMockRecorder) CreateGraphQLPersistedQueryCachePolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphQLPersistedQueryCachePolicy", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicyEventHandler)(nil).CreateGraphQLPersistedQueryCachePolicy), obj)
}

// DeleteGraphQLPersistedQueryCachePolicy mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicyEventHandler) DeleteGraphQLPersistedQueryCachePolicy(obj *v2.GraphQLPersistedQueryCachePolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGraphQLPersistedQueryCachePolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGraphQLPersistedQueryCachePolicy indicates an expected call of DeleteGraphQLPersistedQueryCachePolicy.
func (mr *MockGraphQLPersistedQueryCachePolicyEventHandlerMockRecorder) DeleteGraphQLPersistedQueryCachePolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphQLPersistedQueryCachePolicy", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicyEventHandler)(nil).DeleteGraphQLPersistedQueryCachePolicy), obj)
}

// GenericGraphQLPersistedQueryCachePolicy mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicyEventHandler) GenericGraphQLPersistedQueryCachePolicy(obj *v2.GraphQLPersistedQueryCachePolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericGraphQLPersistedQueryCachePolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericGraphQLPersistedQueryCachePolicy indicates an expected call of GenericGraphQLPersistedQueryCachePolicy.
func (mr *MockGraphQLPersistedQueryCachePolicyEventHandlerMockRecorder) GenericGraphQLPersistedQueryCachePolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericGraphQLPersistedQueryCachePolicy", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicyEventHandler)(nil).GenericGraphQLPersistedQueryCachePolicy), obj)
}

// UpdateGraphQLPersistedQueryCachePolicy mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicyEventHandler) UpdateGraphQLPersistedQueryCachePolicy(old, new *v2.GraphQLPersistedQueryCachePolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGraphQLPersistedQueryCachePolicy", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLPersistedQueryCachePolicy indicates an expected call of UpdateGraphQLPersistedQueryCachePolicy.
func (mr *MockGraphQLPersistedQueryCachePolicyEventHandlerMockRecorder) UpdateGraphQLPersistedQueryCachePolicy(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLPersistedQueryCachePolicy", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicyEventHandler)(nil).UpdateGraphQLPersistedQueryCachePolicy), old, new)
}

// MockGraphQLPersistedQueryCachePolicyEventWatcher is a mock of GraphQLPersistedQueryCachePolicyEventWatcher interface.
type MockGraphQLPersistedQueryCachePolicyEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLPersistedQueryCachePolicyEventWatcherMockRecorder
}

// MockGraphQLPersistedQueryCachePolicyEventWatcherMockRecorder is the mock recorder for MockGraphQLPersistedQueryCachePolicyEventWatcher.
type MockGraphQLPersistedQueryCachePolicyEventWatcherMockRecorder struct {
	mock *MockGraphQLPersistedQueryCachePolicyEventWatcher
}

// NewMockGraphQLPersistedQueryCachePolicyEventWatcher creates a new mock instance.
func NewMockGraphQLPersistedQueryCachePolicyEventWatcher(ctrl *gomock.Controller) *MockGraphQLPersistedQueryCachePolicyEventWatcher {
	mock := &MockGraphQLPersistedQueryCachePolicyEventWatcher{ctrl: ctrl}
	mock.recorder = &MockGraphQLPersistedQueryCachePolicyEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLPersistedQueryCachePolicyEventWatcher) EXPECT() *MockGraphQLPersistedQueryCachePolicyEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockGraphQLPersistedQueryCachePolicyEventWatcher) AddEventHandler(ctx context.Context, h controller.GraphQLPersistedQueryCachePolicyEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockGraphQLPersistedQueryCachePolicyEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockGraphQLPersistedQueryCachePolicyEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockFailoverPolicyEventHandler is a mock of FailoverPolicyEventHandler interface.
type MockFailoverPolicyEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFailoverPolicyEventHandlerMockRecorder
}

// MockFailoverPolicyEventHandlerMockRecorder is the mock recorder for MockFailoverPolicyEventHandler.
type MockFailoverPolicyEventHandlerMockRecorder struct {
	mock *MockFailoverPolicyEventHandler
}

// NewMockFailoverPolicyEventHandler creates a new mock instance.
func NewMockFailoverPolicyEventHandler(ctrl *gomock.Controller) *MockFailoverPolicyEventHandler {
	mock := &MockFailoverPolicyEventHandler{ctrl: ctrl}
	mock.recorder = &MockFailoverPolicyEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailoverPolicyEventHandler) EXPECT() *MockFailoverPolicyEventHandlerMockRecorder {
	return m.recorder
}

// CreateFailoverPolicy mocks base method.
func (m *MockFailoverPolicyEventHandler) CreateFailoverPolicy(obj *v2.FailoverPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFailoverPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFailoverPolicy indicates an expected call of CreateFailoverPolicy.
func (mr *MockFailoverPolicyEventHandlerMockRecorder) CreateFailoverPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFailoverPolicy", reflect.TypeOf((*MockFailoverPolicyEventHandler)(nil).CreateFailoverPolicy), obj)
}

// DeleteFailoverPolicy mocks base method.
func (m *MockFailoverPolicyEventHandler) DeleteFailoverPolicy(obj *v2.FailoverPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFailoverPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFailoverPolicy indicates an expected call of DeleteFailoverPolicy.
func (mr *MockFailoverPolicyEventHandlerMockRecorder) DeleteFailoverPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFailoverPolicy", reflect.TypeOf((*MockFailoverPolicyEventHandler)(nil).DeleteFailoverPolicy), obj)
}

// GenericFailoverPolicy mocks base method.
func (m *MockFailoverPolicyEventHandler) GenericFailoverPolicy(obj *v2.FailoverPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericFailoverPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericFailoverPolicy indicates an expected call of GenericFailoverPolicy.
func (mr *MockFailoverPolicyEventHandlerMockRecorder) GenericFailoverPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericFailoverPolicy", reflect.TypeOf((*MockFailoverPolicyEventHandler)(nil).GenericFailoverPolicy), obj)
}

// UpdateFailoverPolicy mocks base method.
func (m *MockFailoverPolicyEventHandler) UpdateFailoverPolicy(old, new *v2.FailoverPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFailoverPolicy", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFailoverPolicy indicates an expected call of UpdateFailoverPolicy.
func (mr *MockFailoverPolicyEventHandlerMockRecorder) UpdateFailoverPolicy(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFailoverPolicy", reflect.TypeOf((*MockFailoverPolicyEventHandler)(nil).UpdateFailoverPolicy), old, new)
}

// MockFailoverPolicyEventWatcher is a mock of FailoverPolicyEventWatcher interface.
type MockFailoverPolicyEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockFailoverPolicyEventWatcherMockRecorder
}

// MockFailoverPolicyEventWatcherMockRecorder is the mock recorder for MockFailoverPolicyEventWatcher.
type MockFailoverPolicyEventWatcherMockRecorder struct {
	mock *MockFailoverPolicyEventWatcher
}

// NewMockFailoverPolicyEventWatcher creates a new mock instance.
func NewMockFailoverPolicyEventWatcher(ctrl *gomock.Controller) *MockFailoverPolicyEventWatcher {
	mock := &MockFailoverPolicyEventWatcher{ctrl: ctrl}
	mock.recorder = &MockFailoverPolicyEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailoverPolicyEventWatcher) EXPECT() *MockFailoverPolicyEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockFailoverPolicyEventWatcher) AddEventHandler(ctx context.Context, h controller.FailoverPolicyEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockFailoverPolicyEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockFailoverPolicyEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockOutlierDetectionPolicyEventHandler is a mock of OutlierDetectionPolicyEventHandler interface.
type MockOutlierDetectionPolicyEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOutlierDetectionPolicyEventHandlerMockRecorder
}

// MockOutlierDetectionPolicyEventHandlerMockRecorder is the mock recorder for MockOutlierDetectionPolicyEventHandler.
type MockOutlierDetectionPolicyEventHandlerMockRecorder struct {
	mock *MockOutlierDetectionPolicyEventHandler
}

// NewMockOutlierDetectionPolicyEventHandler creates a new mock instance.
func NewMockOutlierDetectionPolicyEventHandler(ctrl *gomock.Controller) *MockOutlierDetectionPolicyEventHandler {
	mock := &MockOutlierDetectionPolicyEventHandler{ctrl: ctrl}
	mock.recorder = &MockOutlierDetectionPolicyEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutlierDetectionPolicyEventHandler) EXPECT() *MockOutlierDetectionPolicyEventHandlerMockRecorder {
	return m.recorder
}

// CreateOutlierDetectionPolicy mocks base method.
func (m *MockOutlierDetectionPolicyEventHandler) CreateOutlierDetectionPolicy(obj *v2.OutlierDetectionPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOutlierDetectionPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOutlierDetectionPolicy indicates an expected call of CreateOutlierDetectionPolicy.
func (mr *MockOutlierDetectionPolicyEventHandlerMockRecorder) CreateOutlierDetectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOutlierDetectionPolicy", reflect.TypeOf((*MockOutlierDetectionPolicyEventHandler)(nil).CreateOutlierDetectionPolicy), obj)
}

// DeleteOutlierDetectionPolicy mocks base method.
func (m *MockOutlierDetectionPolicyEventHandler) DeleteOutlierDetectionPolicy(obj *v2.OutlierDetectionPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutlierDetectionPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOutlierDetectionPolicy indicates an expected call of DeleteOutlierDetectionPolicy.
func (mr *MockOutlierDetectionPolicyEventHandlerMockRecorder) DeleteOutlierDetectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutlierDetectionPolicy", reflect.TypeOf((*MockOutlierDetectionPolicyEventHandler)(nil).DeleteOutlierDetectionPolicy), obj)
}

// GenericOutlierDetectionPolicy mocks base method.
func (m *MockOutlierDetectionPolicyEventHandler) GenericOutlierDetectionPolicy(obj *v2.OutlierDetectionPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericOutlierDetectionPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericOutlierDetectionPolicy indicates an expected call of GenericOutlierDetectionPolicy.
func (mr *MockOutlierDetectionPolicyEventHandlerMockRecorder) GenericOutlierDetectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericOutlierDetectionPolicy", reflect.TypeOf((*MockOutlierDetectionPolicyEventHandler)(nil).GenericOutlierDetectionPolicy), obj)
}

// UpdateOutlierDetectionPolicy mocks base method.
func (m *MockOutlierDetectionPolicyEventHandler) UpdateOutlierDetectionPolicy(old, new *v2.OutlierDetectionPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOutlierDetectionPolicy", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOutlierDetectionPolicy indicates an expected call of UpdateOutlierDetectionPolicy.
func (mr *MockOutlierDetectionPolicyEventHandlerMockRecorder) UpdateOutlierDetectionPolicy(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOutlierDetectionPolicy", reflect.TypeOf((*MockOutlierDetectionPolicyEventHandler)(nil).UpdateOutlierDetectionPolicy), old, new)
}

// MockOutlierDetectionPolicyEventWatcher is a mock of OutlierDetectionPolicyEventWatcher interface.
type MockOutlierDetectionPolicyEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockOutlierDetectionPolicyEventWatcherMockRecorder
}

// MockOutlierDetectionPolicyEventWatcherMockRecorder is the mock recorder for MockOutlierDetectionPolicyEventWatcher.
type MockOutlierDetectionPolicyEventWatcherMockRecorder struct {
	mock *MockOutlierDetectionPolicyEventWatcher
}

// NewMockOutlierDetectionPolicyEventWatcher creates a new mock instance.
func NewMockOutlierDetectionPolicyEventWatcher(ctrl *gomock.Controller) *MockOutlierDetectionPolicyEventWatcher {
	mock := &MockOutlierDetectionPolicyEventWatcher{ctrl: ctrl}
	mock.recorder = &MockOutlierDetectionPolicyEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutlierDetectionPolicyEventWatcher) EXPECT() *MockOutlierDetectionPolicyEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockOutlierDetectionPolicyEventWatcher) AddEventHandler(ctx context.Context, h controller.OutlierDetectionPolicyEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockOutlierDetectionPolicyEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockOutlierDetectionPolicyEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockFaultInjectionPolicyEventHandler is a mock of FaultInjectionPolicyEventHandler interface.
type MockFaultInjectionPolicyEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFaultInjectionPolicyEventHandlerMockRecorder
}

// MockFaultInjectionPolicyEventHandlerMockRecorder is the mock recorder for MockFaultInjectionPolicyEventHandler.
type MockFaultInjectionPolicyEventHandlerMockRecorder struct {
	mock *MockFaultInjectionPolicyEventHandler
}

// NewMockFaultInjectionPolicyEventHandler creates a new mock instance.
func NewMockFaultInjectionPolicyEventHandler(ctrl *gomock.Controller) *MockFaultInjectionPolicyEventHandler {
	mock := &MockFaultInjectionPolicyEventHandler{ctrl: ctrl}
	mock.recorder = &MockFaultInjectionPolicyEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFaultInjectionPolicyEventHandler) EXPECT() *MockFaultInjectionPolicyEventHandlerMockRecorder {
	return m.recorder
}

// CreateFaultInjectionPolicy mocks base method.
func (m *MockFaultInjectionPolicyEventHandler) CreateFaultInjectionPolicy(obj *v2.FaultInjectionPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFaultInjectionPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFaultInjectionPolicy indicates an expected call of CreateFaultInjectionPolicy.
func (mr *MockFaultInjectionPolicyEventHandlerMockRecorder) CreateFaultInjectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFaultInjectionPolicy", reflect.TypeOf((*MockFaultInjectionPolicyEventHandler)(nil).CreateFaultInjectionPolicy), obj)
}

// DeleteFaultInjectionPolicy mocks base method.
func (m *MockFaultInjectionPolicyEventHandler) DeleteFaultInjectionPolicy(obj *v2.FaultInjectionPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFaultInjectionPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFaultInjectionPolicy indicates an expected call of DeleteFaultInjectionPolicy.
func (mr *MockFaultInjectionPolicyEventHandlerMockRecorder) DeleteFaultInjectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFaultInjectionPolicy", reflect.TypeOf((*MockFaultInjectionPolicyEventHandler)(nil).DeleteFaultInjectionPolicy), obj)
}

// GenericFaultInjectionPolicy mocks base method.
func (m *MockFaultInjectionPolicyEventHandler) GenericFaultInjectionPolicy(obj *v2.FaultInjectionPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericFaultInjectionPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericFaultInjectionPolicy indicates an expected call of GenericFaultInjectionPolicy.
func (mr *MockFaultInjectionPolicyEventHandlerMockRecorder) GenericFaultInjectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericFaultInjectionPolicy", reflect.TypeOf((*MockFaultInjectionPolicyEventHandler)(nil).GenericFaultInjectionPolicy), obj)
}

// UpdateFaultInjectionPolicy mocks base method.
func (m *MockFaultInjectionPolicyEventHandler) UpdateFaultInjectionPolicy(old, new *v2.FaultInjectionPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFaultInjectionPolicy", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFaultInjectionPolicy indicates an expected call of UpdateFaultInjectionPolicy.
func (mr *MockFaultInjectionPolicyEventHandlerMockRecorder) UpdateFaultInjectionPolicy(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFaultInjectionPolicy", reflect.TypeOf((*MockFaultInjectionPolicyEventHandler)(nil).UpdateFaultInjectionPolicy), old, new)
}

// MockFaultInjectionPolicyEventWatcher is a mock of FaultInjectionPolicyEventWatcher interface.
type MockFaultInjectionPolicyEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockFaultInjectionPolicyEventWatcherMockRecorder
}

// MockFaultInjectionPolicyEventWatcherMockRecorder is the mock recorder for MockFaultInjectionPolicyEventWatcher.
type MockFaultInjectionPolicyEventWatcherMockRecorder struct {
	mock *MockFaultInjectionPolicyEventWatcher
}

// NewMockFaultInjectionPolicyEventWatcher creates a new mock instance.
func NewMockFaultInjectionPolicyEventWatcher(ctrl *gomock.Controller) *MockFaultInjectionPolicyEventWatcher {
	mock := &MockFaultInjectionPolicyEventWatcher{ctrl: ctrl}
	mock.recorder = &MockFaultInjectionPolicyEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFaultInjectionPolicyEventWatcher) EXPECT() *MockFaultInjectionPolicyEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockFaultInjectionPolicyEventWatcher) AddEventHandler(ctx context.Context, h controller.FaultInjectionPolicyEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockFaultInjectionPolicyEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockFaultInjectionPolicyEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockRetryTimeoutPolicyEventHandler is a mock of RetryTimeoutPolicyEventHandler interface.
type MockRetryTimeoutPolicyEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRetryTimeoutPolicyEventHandlerMockRecorder
}

// MockRetryTimeoutPolicyEventHandlerMockRecorder is the mock recorder for MockRetryTimeoutPolicyEventHandler.
type MockRetryTimeoutPolicyEventHandlerMockRecorder struct {
	mock *MockRetryTimeoutPolicyEventHandler
}

// NewMockRetryTimeoutPolicyEventHandler creates a new mock instance.
func NewMockRetryTimeoutPolicyEventHandler(ctrl *gomock.Controller) *MockRetryTimeoutPolicyEventHandler {
	mock := &MockRetryTimeoutPolicyEventHandler{ctrl: ctrl}
	mock.recorder = &MockRetryTimeoutPolicyEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryTimeoutPolicyEventHandler) EXPECT() *MockRetryTimeoutPolicyEventHandlerMockRecorder {
	return m.recorder
}

// CreateRetryTimeoutPolicy mocks base method.
func (m *MockRetryTimeoutPolicyEventHandler) CreateRetryTimeoutPolicy(obj *v2.RetryTimeoutPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRetryTimeoutPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRetryTimeoutPolicy indicates an expected call of CreateRetryTimeoutPolicy.
func (mr *MockRetryTimeoutPolicyEventHandlerMockRecorder) CreateRetryTimeoutPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRetryTimeoutPolicy", reflect.TypeOf((*MockRetryTimeoutPolicyEventHandler)(nil).CreateRetryTimeoutPolicy), obj)
}

// DeleteRetryTimeoutPolicy mocks base method.
func (m *MockRetryTimeoutPolicyEventHandler) DeleteRetryTimeoutPolicy(obj *v2.RetryTimeoutPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRetryTimeoutPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRetryTimeoutPolicy indicates an expected call of DeleteRetryTimeoutPolicy.
func (mr *MockRetryTimeoutPolicyEventHandlerMockRecorder) DeleteRetryTimeoutPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetryTimeoutPolicy", reflect.TypeOf((*MockRetryTimeoutPolicyEventHandler)(nil).DeleteRetryTimeoutPolicy), obj)
}

// GenericRetryTimeoutPolicy mocks base method.
func (m *MockRetryTimeoutPolicyEventHandler) GenericRetryTimeoutPolicy(obj *v2.RetryTimeoutPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericRetryTimeoutPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericRetryTimeoutPolicy indicates an expected call of GenericRetryTimeoutPolicy.
func (mr *MockRetryTimeoutPolicyEventHandlerMockRecorder) GenericRetryTimeoutPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericRetryTimeoutPolicy", reflect.TypeOf((*MockRetryTimeoutPolicyEventHandler)(nil).GenericRetryTimeoutPolicy), obj)
}

// UpdateRetryTimeoutPolicy mocks base method.
func (m *MockRetryTimeoutPolicyEventHandler) UpdateRetryTimeoutPolicy(old, new *v2.RetryTimeoutPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRetryTimeoutPolicy", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRetryTimeoutPolicy indicates an expected call of UpdateRetryTimeoutPolicy.
func (mr *MockRetryTimeoutPolicyEventHandlerMockRecorder) UpdateRetryTimeoutPolicy(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRetryTimeoutPolicy", reflect.TypeOf((*MockRetryTimeoutPolicyEventHandler)(nil).UpdateRetryTimeoutPolicy), old, new)
}

// MockRetryTimeoutPolicyEventWatcher is a mock of RetryTimeoutPolicyEventWatcher interface.
type MockRetryTimeoutPolicyEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockRetryTimeoutPolicyEventWatcherMockRecorder
}

// MockRetryTimeoutPolicyEventWatcherMockRecorder is the mock recorder for MockRetryTimeoutPolicyEventWatcher.
type MockRetryTimeoutPolicyEventWatcherMockRecorder struct {
	mock *MockRetryTimeoutPolicyEventWatcher
}

// NewMockRetryTimeoutPolicyEventWatcher creates a new mock instance.
func NewMockRetryTimeoutPolicyEventWatcher(ctrl *gomock.Controller) *MockRetryTimeoutPolicyEventWatcher {
	mock := &MockRetryTimeoutPolicyEventWatcher{ctrl: ctrl}
	mock.recorder = &MockRetryTimeoutPolicyEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryTimeoutPolicyEventWatcher) EXPECT() *MockRetryTimeoutPolicyEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockRetryTimeoutPolicyEventWatcher) AddEventHandler(ctx context.Context, h controller.RetryTimeoutPolicyEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockRetryTimeoutPolicyEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockRetryTimeoutPolicyEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockConnectionPolicyEventHandler is a mock of ConnectionPolicyEventHandler interface.
type MockConnectionPolicyEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionPolicyEventHandlerMockRecorder
}

// MockConnectionPolicyEventHandlerMockRecorder is the mock recorder for MockConnectionPolicyEventHandler.
type MockConnectionPolicyEventHandlerMockRecorder struct {
	mock *MockConnectionPolicyEventHandler
}

// NewMockConnectionPolicyEventHandler creates a new mock instance.
func NewMockConnectionPolicyEventHandler(ctrl *gomock.Controller) *MockConnectionPolicyEventHandler {
	mock := &MockConnectionPolicyEventHandler{ctrl: ctrl}
	mock.recorder = &MockConnectionPolicyEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionPolicyEventHandler) EXPECT() *MockConnectionPolicyEventHandlerMockRecorder {
	return m.recorder
}

// CreateConnectionPolicy mocks base method.
func (m *MockConnectionPolicyEventHandler) CreateConnectionPolicy(obj *v2.ConnectionPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnectionPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateConnectionPolicy indicates an expected call of CreateConnectionPolicy.
func (mr *MockConnectionPolicyEventHandlerMockRecorder) CreateConnectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectionPolicy", reflect.TypeOf((*MockConnectionPolicyEventHandler)(nil).CreateConnectionPolicy), obj)
}

// DeleteConnectionPolicy mocks base method.
func (m *MockConnectionPolicyEventHandler) DeleteConnectionPolicy(obj *v2.ConnectionPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnectionPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConnectionPolicy indicates an expected call of DeleteConnectionPolicy.
func (mr *MockConnectionPolicyEventHandlerMockRecorder) DeleteConnectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectionPolicy", reflect.TypeOf((*MockConnectionPolicyEventHandler)(nil).DeleteConnectionPolicy), obj)
}

// GenericConnectionPolicy mocks base method.
func (m *MockConnectionPolicyEventHandler) GenericConnectionPolicy(obj *v2.ConnectionPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericConnectionPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericConnectionPolicy indicates an expected call of GenericConnectionPolicy.
func (mr *MockConnectionPolicyEventHandlerMockRecorder) GenericConnectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericConnectionPolicy", reflect.TypeOf((*MockConnectionPolicyEventHandler)(nil).GenericConnectionPolicy), obj)
}

// UpdateConnectionPolicy mocks base method.
func (m *MockConnectionPolicyEventHandler) UpdateConnectionPolicy(old, new *v2.ConnectionPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnectionPolicy", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConnectionPolicy indicates an expected call of UpdateConnectionPolicy.
func (mr *MockConnectionPolicyEventHandlerMockRecorder) UpdateConnectionPolicy(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectionPolicy", reflect.TypeOf((*MockConnectionPolicyEventHandler)(nil).UpdateConnectionPolicy), old, new)
}

// MockConnectionPolicyEventWatcher is a mock of ConnectionPolicyEventWatcher interface.
type MockConnectionPolicyEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionPolicyEventWatcherMockRecorder
}

// MockConnectionPolicyEventWatcherMockRecorder is the mock recorder for MockConnectionPolicyEventWatcher.
type MockConnectionPolicyEventWatcherMockRecorder struct {
	mock *MockConnectionPolicyEventWatcher
}

// NewMockConnectionPolicyEventWatcher creates a new mock instance.
func NewMockConnectionPolicyEventWatcher(ctrl *gomock.Controller) *MockConnectionPolicyEventWatcher {
	mock := &MockConnectionPolicyEventWatcher{ctrl: ctrl}
	mock.recorder = &MockConnectionPolicyEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionPolicyEventWatcher) EXPECT() *MockConnectionPolicyEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockConnectionPolicyEventWatcher) AddEventHandler(ctx context.Context, h controller.ConnectionPolicyEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockConnectionPolicyEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockConnectionPolicyEventWatcher)(nil).AddEventHandler), varargs...)
}
