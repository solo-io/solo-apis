// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/policy/v2/resilience/listener_connection_policy.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_golang_protobuf_ptypes_wrappers "github.com/golang/protobuf/ptypes/wrappers"

	github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *ListenerConnectionPolicySpec) Clone() proto.Message {
	var target *ListenerConnectionPolicySpec
	if m == nil {
		return target
	}
	target = &ListenerConnectionPolicySpec{}

	if m.GetApplyToListeners() != nil {
		target.ApplyToListeners = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ListenerSelector, len(m.GetApplyToListeners()))
		for idx, v := range m.GetApplyToListeners() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ApplyToListeners[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ListenerSelector)
			} else {
				target.ApplyToListeners[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ListenerSelector)
			}

		}
	}

	if h, ok := interface{}(m.GetConfig()).(clone.Cloner); ok {
		target.Config = h.Clone().(*ListenerConnectionPolicySpec_Config)
	} else {
		target.Config = proto.Clone(m.GetConfig()).(*ListenerConnectionPolicySpec_Config)
	}

	return target
}

// Clone function
func (m *ListenerConnectionPolicyStatus) Clone() proto.Message {
	var target *ListenerConnectionPolicyStatus
	if m == nil {
		return target
	}
	target = &ListenerConnectionPolicyStatus{}

	if h, ok := interface{}(m.GetCommon()).(clone.Cloner); ok {
		target.Common = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	} else {
		target.Common = proto.Clone(m.GetCommon()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	}

	target.NumSelectedListeners = m.GetNumSelectedListeners()

	return target
}

// Clone function
func (m *ListenerConnectionPolicyReport) Clone() proto.Message {
	var target *ListenerConnectionPolicyReport
	if m == nil {
		return target
	}
	target = &ListenerConnectionPolicyReport{}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			}

		}
	}

	if m.GetSelectedListeners() != nil {
		target.SelectedListeners = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ListenerPortReference, len(m.GetSelectedListeners()))
		for idx, v := range m.GetSelectedListeners() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SelectedListeners[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ListenerPortReference)
			} else {
				target.SelectedListeners[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ListenerPortReference)
			}

		}
	}

	return target
}

// Clone function
func (m *ListenerConnectionPolicySpec_Config) Clone() proto.Message {
	var target *ListenerConnectionPolicySpec_Config
	if m == nil {
		return target
	}
	target = &ListenerConnectionPolicySpec_Config{}

	if h, ok := interface{}(m.GetPerConnectionBufferLimitBytes()).(clone.Cloner); ok {
		target.PerConnectionBufferLimitBytes = h.Clone().(*github_com_golang_protobuf_ptypes_wrappers.UInt32Value)
	} else {
		target.PerConnectionBufferLimitBytes = proto.Clone(m.GetPerConnectionBufferLimitBytes()).(*github_com_golang_protobuf_ptypes_wrappers.UInt32Value)
	}

	return target
}
