// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/policy/v2/resilience/adaptive_request_concurrency_policy.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"

	google_golang_org_protobuf_types_known_wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *AdaptiveRequestConcurrencyPolicySpec) Clone() proto.Message {
	var target *AdaptiveRequestConcurrencyPolicySpec
	if m == nil {
		return target
	}
	target = &AdaptiveRequestConcurrencyPolicySpec{}

	if m.GetApplyToDestinations() != nil {
		target.ApplyToDestinations = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.DestinationSelector, len(m.GetApplyToDestinations()))
		for idx, v := range m.GetApplyToDestinations() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ApplyToDestinations[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.DestinationSelector)
			} else {
				target.ApplyToDestinations[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.DestinationSelector)
			}

		}
	}

	if h, ok := interface{}(m.GetConfig()).(clone.Cloner); ok {
		target.Config = h.Clone().(*AdaptiveRequestConcurrencyPolicySpec_Config)
	} else {
		target.Config = proto.Clone(m.GetConfig()).(*AdaptiveRequestConcurrencyPolicySpec_Config)
	}

	return target
}

// Clone function
func (m *AdaptiveRequestConcurrencyPolicyStatus) Clone() proto.Message {
	var target *AdaptiveRequestConcurrencyPolicyStatus
	if m == nil {
		return target
	}
	target = &AdaptiveRequestConcurrencyPolicyStatus{}

	if h, ok := interface{}(m.GetCommon()).(clone.Cloner); ok {
		target.Common = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	} else {
		target.Common = proto.Clone(m.GetCommon()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	}

	target.NumSelectedDestinations = m.GetNumSelectedDestinations()

	return target
}

// Clone function
func (m *AdaptiveRequestConcurrencyPolicyReport) Clone() proto.Message {
	var target *AdaptiveRequestConcurrencyPolicyReport
	if m == nil {
		return target
	}
	target = &AdaptiveRequestConcurrencyPolicyReport{}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			}

		}
	}

	if m.GetSelectedDestinations() != nil {
		target.SelectedDestinations = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.DestinationReference, len(m.GetSelectedDestinations()))
		for idx, v := range m.GetSelectedDestinations() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SelectedDestinations[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.DestinationReference)
			} else {
				target.SelectedDestinations[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.DestinationReference)
			}

		}
	}

	return target
}

// Clone function
func (m *AdaptiveRequestConcurrencyPolicySpec_Config) Clone() proto.Message {
	var target *AdaptiveRequestConcurrencyPolicySpec_Config
	if m == nil {
		return target
	}
	target = &AdaptiveRequestConcurrencyPolicySpec_Config{}

	if h, ok := interface{}(m.GetSampleAggregatePercentile()).(clone.Cloner); ok {
		target.SampleAggregatePercentile = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.DoubleValue)
	} else {
		target.SampleAggregatePercentile = proto.Clone(m.GetSampleAggregatePercentile()).(*google_golang_org_protobuf_types_known_wrapperspb.DoubleValue)
	}

	if h, ok := interface{}(m.GetMaxConcurrencyLimit()).(clone.Cloner); ok {
		target.MaxConcurrencyLimit = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	} else {
		target.MaxConcurrencyLimit = proto.Clone(m.GetMaxConcurrencyLimit()).(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	}

	target.ConcurrencyUpdateIntervalMillis = m.GetConcurrencyUpdateIntervalMillis()

	if h, ok := interface{}(m.GetMinRttCalcParams()).(clone.Cloner); ok {
		target.MinRttCalcParams = h.Clone().(*AdaptiveRequestConcurrencyPolicySpec_Config_MinRoundtripTimeCalculationParams)
	} else {
		target.MinRttCalcParams = proto.Clone(m.GetMinRttCalcParams()).(*AdaptiveRequestConcurrencyPolicySpec_Config_MinRoundtripTimeCalculationParams)
	}

	target.ConcurrencyLimitExceededStatus = m.GetConcurrencyLimitExceededStatus()

	return target
}

// Clone function
func (m *AdaptiveRequestConcurrencyPolicySpec_Config_MinRoundtripTimeCalculationParams) Clone() proto.Message {
	var target *AdaptiveRequestConcurrencyPolicySpec_Config_MinRoundtripTimeCalculationParams
	if m == nil {
		return target
	}
	target = &AdaptiveRequestConcurrencyPolicySpec_Config_MinRoundtripTimeCalculationParams{}

	target.IntervalMillis = m.GetIntervalMillis()

	if h, ok := interface{}(m.GetRequestCount()).(clone.Cloner); ok {
		target.RequestCount = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	} else {
		target.RequestCount = proto.Clone(m.GetRequestCount()).(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	}

	if h, ok := interface{}(m.GetMinConcurrency()).(clone.Cloner); ok {
		target.MinConcurrency = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	} else {
		target.MinConcurrency = proto.Clone(m.GetMinConcurrency()).(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	}

	if h, ok := interface{}(m.GetJitterPercentile()).(clone.Cloner); ok {
		target.JitterPercentile = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.DoubleValue)
	} else {
		target.JitterPercentile = proto.Clone(m.GetJitterPercentile()).(*google_golang_org_protobuf_types_known_wrapperspb.DoubleValue)
	}

	if h, ok := interface{}(m.GetBufferPercentile()).(clone.Cloner); ok {
		target.BufferPercentile = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.DoubleValue)
	} else {
		target.BufferPercentile = proto.Clone(m.GetBufferPercentile()).(*google_golang_org_protobuf_types_known_wrapperspb.DoubleValue)
	}

	return target
}
