// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v2 is a generated GoMock package.
package mock_v2

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	v2 "github.com/solo-io/solo-apis/client-go/infrastructure.gloo.solo.io/v2"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v2.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// CloudProviders mocks base method.
func (m *MockClientset) CloudProviders() v2.CloudProviderClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudProviders")
	ret0, _ := ret[0].(v2.CloudProviderClient)
	return ret0
}

// CloudProviders indicates an expected call of CloudProviders.
func (mr *MockClientsetMockRecorder) CloudProviders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudProviders", reflect.TypeOf((*MockClientset)(nil).CloudProviders))
}

// CloudResources mocks base method.
func (m *MockClientset) CloudResources() v2.CloudResourcesClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudResources")
	ret0, _ := ret[0].(v2.CloudResourcesClient)
	return ret0
}

// CloudResources indicates an expected call of CloudResources.
func (mr *MockClientsetMockRecorder) CloudResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudResources", reflect.TypeOf((*MockClientset)(nil).CloudResources))
}

// MockCloudProviderReader is a mock of CloudProviderReader interface.
type MockCloudProviderReader struct {
	ctrl     *gomock.Controller
	recorder *MockCloudProviderReaderMockRecorder
}

// MockCloudProviderReaderMockRecorder is the mock recorder for MockCloudProviderReader.
type MockCloudProviderReaderMockRecorder struct {
	mock *MockCloudProviderReader
}

// NewMockCloudProviderReader creates a new mock instance.
func NewMockCloudProviderReader(ctrl *gomock.Controller) *MockCloudProviderReader {
	mock := &MockCloudProviderReader{ctrl: ctrl}
	mock.recorder = &MockCloudProviderReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudProviderReader) EXPECT() *MockCloudProviderReaderMockRecorder {
	return m.recorder
}

// GetCloudProvider mocks base method.
func (m *MockCloudProviderReader) GetCloudProvider(ctx context.Context, key client.ObjectKey) (*v2.CloudProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudProvider", ctx, key)
	ret0, _ := ret[0].(*v2.CloudProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudProvider indicates an expected call of GetCloudProvider.
func (mr *MockCloudProviderReaderMockRecorder) GetCloudProvider(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudProvider", reflect.TypeOf((*MockCloudProviderReader)(nil).GetCloudProvider), ctx, key)
}

// ListCloudProvider mocks base method.
func (m *MockCloudProviderReader) ListCloudProvider(ctx context.Context, opts ...client.ListOption) (*v2.CloudProviderList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCloudProvider", varargs...)
	ret0, _ := ret[0].(*v2.CloudProviderList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCloudProvider indicates an expected call of ListCloudProvider.
func (mr *MockCloudProviderReaderMockRecorder) ListCloudProvider(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudProvider", reflect.TypeOf((*MockCloudProviderReader)(nil).ListCloudProvider), varargs...)
}

// MockCloudProviderWriter is a mock of CloudProviderWriter interface.
type MockCloudProviderWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCloudProviderWriterMockRecorder
}

// MockCloudProviderWriterMockRecorder is the mock recorder for MockCloudProviderWriter.
type MockCloudProviderWriterMockRecorder struct {
	mock *MockCloudProviderWriter
}

// NewMockCloudProviderWriter creates a new mock instance.
func NewMockCloudProviderWriter(ctrl *gomock.Controller) *MockCloudProviderWriter {
	mock := &MockCloudProviderWriter{ctrl: ctrl}
	mock.recorder = &MockCloudProviderWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudProviderWriter) EXPECT() *MockCloudProviderWriterMockRecorder {
	return m.recorder
}

// CreateCloudProvider mocks base method.
func (m *MockCloudProviderWriter) CreateCloudProvider(ctx context.Context, obj *v2.CloudProvider, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCloudProvider", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCloudProvider indicates an expected call of CreateCloudProvider.
func (mr *MockCloudProviderWriterMockRecorder) CreateCloudProvider(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudProvider", reflect.TypeOf((*MockCloudProviderWriter)(nil).CreateCloudProvider), varargs...)
}

// DeleteAllOfCloudProvider mocks base method.
func (m *MockCloudProviderWriter) DeleteAllOfCloudProvider(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfCloudProvider", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfCloudProvider indicates an expected call of DeleteAllOfCloudProvider.
func (mr *MockCloudProviderWriterMockRecorder) DeleteAllOfCloudProvider(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfCloudProvider", reflect.TypeOf((*MockCloudProviderWriter)(nil).DeleteAllOfCloudProvider), varargs...)
}

// DeleteCloudProvider mocks base method.
func (m *MockCloudProviderWriter) DeleteCloudProvider(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCloudProvider", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCloudProvider indicates an expected call of DeleteCloudProvider.
func (mr *MockCloudProviderWriterMockRecorder) DeleteCloudProvider(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCloudProvider", reflect.TypeOf((*MockCloudProviderWriter)(nil).DeleteCloudProvider), varargs...)
}

// PatchCloudProvider mocks base method.
func (m *MockCloudProviderWriter) PatchCloudProvider(ctx context.Context, obj *v2.CloudProvider, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCloudProvider", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCloudProvider indicates an expected call of PatchCloudProvider.
func (mr *MockCloudProviderWriterMockRecorder) PatchCloudProvider(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCloudProvider", reflect.TypeOf((*MockCloudProviderWriter)(nil).PatchCloudProvider), varargs...)
}

// UpdateCloudProvider mocks base method.
func (m *MockCloudProviderWriter) UpdateCloudProvider(ctx context.Context, obj *v2.CloudProvider, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCloudProvider", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCloudProvider indicates an expected call of UpdateCloudProvider.
func (mr *MockCloudProviderWriterMockRecorder) UpdateCloudProvider(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudProvider", reflect.TypeOf((*MockCloudProviderWriter)(nil).UpdateCloudProvider), varargs...)
}

// UpsertCloudProvider mocks base method.
func (m *MockCloudProviderWriter) UpsertCloudProvider(ctx context.Context, obj *v2.CloudProvider, transitionFuncs ...v2.CloudProviderTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertCloudProvider", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCloudProvider indicates an expected call of UpsertCloudProvider.
func (mr *MockCloudProviderWriterMockRecorder) UpsertCloudProvider(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCloudProvider", reflect.TypeOf((*MockCloudProviderWriter)(nil).UpsertCloudProvider), varargs...)
}

// MockCloudProviderStatusWriter is a mock of CloudProviderStatusWriter interface.
type MockCloudProviderStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCloudProviderStatusWriterMockRecorder
}

// MockCloudProviderStatusWriterMockRecorder is the mock recorder for MockCloudProviderStatusWriter.
type MockCloudProviderStatusWriterMockRecorder struct {
	mock *MockCloudProviderStatusWriter
}

// NewMockCloudProviderStatusWriter creates a new mock instance.
func NewMockCloudProviderStatusWriter(ctrl *gomock.Controller) *MockCloudProviderStatusWriter {
	mock := &MockCloudProviderStatusWriter{ctrl: ctrl}
	mock.recorder = &MockCloudProviderStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudProviderStatusWriter) EXPECT() *MockCloudProviderStatusWriterMockRecorder {
	return m.recorder
}

// PatchCloudProviderStatus mocks base method.
func (m *MockCloudProviderStatusWriter) PatchCloudProviderStatus(ctx context.Context, obj *v2.CloudProvider, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCloudProviderStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCloudProviderStatus indicates an expected call of PatchCloudProviderStatus.
func (mr *MockCloudProviderStatusWriterMockRecorder) PatchCloudProviderStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCloudProviderStatus", reflect.TypeOf((*MockCloudProviderStatusWriter)(nil).PatchCloudProviderStatus), varargs...)
}

// UpdateCloudProviderStatus mocks base method.
func (m *MockCloudProviderStatusWriter) UpdateCloudProviderStatus(ctx context.Context, obj *v2.CloudProvider, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCloudProviderStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCloudProviderStatus indicates an expected call of UpdateCloudProviderStatus.
func (mr *MockCloudProviderStatusWriterMockRecorder) UpdateCloudProviderStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudProviderStatus", reflect.TypeOf((*MockCloudProviderStatusWriter)(nil).UpdateCloudProviderStatus), varargs...)
}

// MockCloudProviderClient is a mock of CloudProviderClient interface.
type MockCloudProviderClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudProviderClientMockRecorder
}

// MockCloudProviderClientMockRecorder is the mock recorder for MockCloudProviderClient.
type MockCloudProviderClientMockRecorder struct {
	mock *MockCloudProviderClient
}

// NewMockCloudProviderClient creates a new mock instance.
func NewMockCloudProviderClient(ctrl *gomock.Controller) *MockCloudProviderClient {
	mock := &MockCloudProviderClient{ctrl: ctrl}
	mock.recorder = &MockCloudProviderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudProviderClient) EXPECT() *MockCloudProviderClientMockRecorder {
	return m.recorder
}

// CreateCloudProvider mocks base method.
func (m *MockCloudProviderClient) CreateCloudProvider(ctx context.Context, obj *v2.CloudProvider, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCloudProvider", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCloudProvider indicates an expected call of CreateCloudProvider.
func (mr *MockCloudProviderClientMockRecorder) CreateCloudProvider(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudProvider", reflect.TypeOf((*MockCloudProviderClient)(nil).CreateCloudProvider), varargs...)
}

// DeleteAllOfCloudProvider mocks base method.
func (m *MockCloudProviderClient) DeleteAllOfCloudProvider(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfCloudProvider", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfCloudProvider indicates an expected call of DeleteAllOfCloudProvider.
func (mr *MockCloudProviderClientMockRecorder) DeleteAllOfCloudProvider(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfCloudProvider", reflect.TypeOf((*MockCloudProviderClient)(nil).DeleteAllOfCloudProvider), varargs...)
}

// DeleteCloudProvider mocks base method.
func (m *MockCloudProviderClient) DeleteCloudProvider(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCloudProvider", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCloudProvider indicates an expected call of DeleteCloudProvider.
func (mr *MockCloudProviderClientMockRecorder) DeleteCloudProvider(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCloudProvider", reflect.TypeOf((*MockCloudProviderClient)(nil).DeleteCloudProvider), varargs...)
}

// GetCloudProvider mocks base method.
func (m *MockCloudProviderClient) GetCloudProvider(ctx context.Context, key client.ObjectKey) (*v2.CloudProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudProvider", ctx, key)
	ret0, _ := ret[0].(*v2.CloudProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudProvider indicates an expected call of GetCloudProvider.
func (mr *MockCloudProviderClientMockRecorder) GetCloudProvider(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudProvider", reflect.TypeOf((*MockCloudProviderClient)(nil).GetCloudProvider), ctx, key)
}

// ListCloudProvider mocks base method.
func (m *MockCloudProviderClient) ListCloudProvider(ctx context.Context, opts ...client.ListOption) (*v2.CloudProviderList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCloudProvider", varargs...)
	ret0, _ := ret[0].(*v2.CloudProviderList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCloudProvider indicates an expected call of ListCloudProvider.
func (mr *MockCloudProviderClientMockRecorder) ListCloudProvider(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudProvider", reflect.TypeOf((*MockCloudProviderClient)(nil).ListCloudProvider), varargs...)
}

// PatchCloudProvider mocks base method.
func (m *MockCloudProviderClient) PatchCloudProvider(ctx context.Context, obj *v2.CloudProvider, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCloudProvider", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCloudProvider indicates an expected call of PatchCloudProvider.
func (mr *MockCloudProviderClientMockRecorder) PatchCloudProvider(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCloudProvider", reflect.TypeOf((*MockCloudProviderClient)(nil).PatchCloudProvider), varargs...)
}

// PatchCloudProviderStatus mocks base method.
func (m *MockCloudProviderClient) PatchCloudProviderStatus(ctx context.Context, obj *v2.CloudProvider, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCloudProviderStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCloudProviderStatus indicates an expected call of PatchCloudProviderStatus.
func (mr *MockCloudProviderClientMockRecorder) PatchCloudProviderStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCloudProviderStatus", reflect.TypeOf((*MockCloudProviderClient)(nil).PatchCloudProviderStatus), varargs...)
}

// UpdateCloudProvider mocks base method.
func (m *MockCloudProviderClient) UpdateCloudProvider(ctx context.Context, obj *v2.CloudProvider, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCloudProvider", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCloudProvider indicates an expected call of UpdateCloudProvider.
func (mr *MockCloudProviderClientMockRecorder) UpdateCloudProvider(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudProvider", reflect.TypeOf((*MockCloudProviderClient)(nil).UpdateCloudProvider), varargs...)
}

// UpdateCloudProviderStatus mocks base method.
func (m *MockCloudProviderClient) UpdateCloudProviderStatus(ctx context.Context, obj *v2.CloudProvider, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCloudProviderStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCloudProviderStatus indicates an expected call of UpdateCloudProviderStatus.
func (mr *MockCloudProviderClientMockRecorder) UpdateCloudProviderStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudProviderStatus", reflect.TypeOf((*MockCloudProviderClient)(nil).UpdateCloudProviderStatus), varargs...)
}

// UpsertCloudProvider mocks base method.
func (m *MockCloudProviderClient) UpsertCloudProvider(ctx context.Context, obj *v2.CloudProvider, transitionFuncs ...v2.CloudProviderTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertCloudProvider", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCloudProvider indicates an expected call of UpsertCloudProvider.
func (mr *MockCloudProviderClientMockRecorder) UpsertCloudProvider(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCloudProvider", reflect.TypeOf((*MockCloudProviderClient)(nil).UpsertCloudProvider), varargs...)
}

// MockMulticlusterCloudProviderClient is a mock of MulticlusterCloudProviderClient interface.
type MockMulticlusterCloudProviderClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterCloudProviderClientMockRecorder
}

// MockMulticlusterCloudProviderClientMockRecorder is the mock recorder for MockMulticlusterCloudProviderClient.
type MockMulticlusterCloudProviderClientMockRecorder struct {
	mock *MockMulticlusterCloudProviderClient
}

// NewMockMulticlusterCloudProviderClient creates a new mock instance.
func NewMockMulticlusterCloudProviderClient(ctrl *gomock.Controller) *MockMulticlusterCloudProviderClient {
	mock := &MockMulticlusterCloudProviderClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterCloudProviderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterCloudProviderClient) EXPECT() *MockMulticlusterCloudProviderClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterCloudProviderClient) Cluster(cluster string) (v2.CloudProviderClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.CloudProviderClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterCloudProviderClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterCloudProviderClient)(nil).Cluster), cluster)
}

// MockCloudResourcesReader is a mock of CloudResourcesReader interface.
type MockCloudResourcesReader struct {
	ctrl     *gomock.Controller
	recorder *MockCloudResourcesReaderMockRecorder
}

// MockCloudResourcesReaderMockRecorder is the mock recorder for MockCloudResourcesReader.
type MockCloudResourcesReaderMockRecorder struct {
	mock *MockCloudResourcesReader
}

// NewMockCloudResourcesReader creates a new mock instance.
func NewMockCloudResourcesReader(ctrl *gomock.Controller) *MockCloudResourcesReader {
	mock := &MockCloudResourcesReader{ctrl: ctrl}
	mock.recorder = &MockCloudResourcesReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudResourcesReader) EXPECT() *MockCloudResourcesReaderMockRecorder {
	return m.recorder
}

// GetCloudResources mocks base method.
func (m *MockCloudResourcesReader) GetCloudResources(ctx context.Context, key client.ObjectKey) (*v2.CloudResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudResources", ctx, key)
	ret0, _ := ret[0].(*v2.CloudResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudResources indicates an expected call of GetCloudResources.
func (mr *MockCloudResourcesReaderMockRecorder) GetCloudResources(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudResources", reflect.TypeOf((*MockCloudResourcesReader)(nil).GetCloudResources), ctx, key)
}

// ListCloudResources mocks base method.
func (m *MockCloudResourcesReader) ListCloudResources(ctx context.Context, opts ...client.ListOption) (*v2.CloudResourcesList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCloudResources", varargs...)
	ret0, _ := ret[0].(*v2.CloudResourcesList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCloudResources indicates an expected call of ListCloudResources.
func (mr *MockCloudResourcesReaderMockRecorder) ListCloudResources(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudResources", reflect.TypeOf((*MockCloudResourcesReader)(nil).ListCloudResources), varargs...)
}

// MockCloudResourcesWriter is a mock of CloudResourcesWriter interface.
type MockCloudResourcesWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCloudResourcesWriterMockRecorder
}

// MockCloudResourcesWriterMockRecorder is the mock recorder for MockCloudResourcesWriter.
type MockCloudResourcesWriterMockRecorder struct {
	mock *MockCloudResourcesWriter
}

// NewMockCloudResourcesWriter creates a new mock instance.
func NewMockCloudResourcesWriter(ctrl *gomock.Controller) *MockCloudResourcesWriter {
	mock := &MockCloudResourcesWriter{ctrl: ctrl}
	mock.recorder = &MockCloudResourcesWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudResourcesWriter) EXPECT() *MockCloudResourcesWriterMockRecorder {
	return m.recorder
}

// CreateCloudResources mocks base method.
func (m *MockCloudResourcesWriter) CreateCloudResources(ctx context.Context, obj *v2.CloudResources, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCloudResources", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCloudResources indicates an expected call of CreateCloudResources.
func (mr *MockCloudResourcesWriterMockRecorder) CreateCloudResources(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudResources", reflect.TypeOf((*MockCloudResourcesWriter)(nil).CreateCloudResources), varargs...)
}

// DeleteAllOfCloudResources mocks base method.
func (m *MockCloudResourcesWriter) DeleteAllOfCloudResources(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfCloudResources", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfCloudResources indicates an expected call of DeleteAllOfCloudResources.
func (mr *MockCloudResourcesWriterMockRecorder) DeleteAllOfCloudResources(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfCloudResources", reflect.TypeOf((*MockCloudResourcesWriter)(nil).DeleteAllOfCloudResources), varargs...)
}

// DeleteCloudResources mocks base method.
func (m *MockCloudResourcesWriter) DeleteCloudResources(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCloudResources", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCloudResources indicates an expected call of DeleteCloudResources.
func (mr *MockCloudResourcesWriterMockRecorder) DeleteCloudResources(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCloudResources", reflect.TypeOf((*MockCloudResourcesWriter)(nil).DeleteCloudResources), varargs...)
}

// PatchCloudResources mocks base method.
func (m *MockCloudResourcesWriter) PatchCloudResources(ctx context.Context, obj *v2.CloudResources, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCloudResources", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCloudResources indicates an expected call of PatchCloudResources.
func (mr *MockCloudResourcesWriterMockRecorder) PatchCloudResources(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCloudResources", reflect.TypeOf((*MockCloudResourcesWriter)(nil).PatchCloudResources), varargs...)
}

// UpdateCloudResources mocks base method.
func (m *MockCloudResourcesWriter) UpdateCloudResources(ctx context.Context, obj *v2.CloudResources, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCloudResources", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCloudResources indicates an expected call of UpdateCloudResources.
func (mr *MockCloudResourcesWriterMockRecorder) UpdateCloudResources(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudResources", reflect.TypeOf((*MockCloudResourcesWriter)(nil).UpdateCloudResources), varargs...)
}

// UpsertCloudResources mocks base method.
func (m *MockCloudResourcesWriter) UpsertCloudResources(ctx context.Context, obj *v2.CloudResources, transitionFuncs ...v2.CloudResourcesTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertCloudResources", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCloudResources indicates an expected call of UpsertCloudResources.
func (mr *MockCloudResourcesWriterMockRecorder) UpsertCloudResources(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCloudResources", reflect.TypeOf((*MockCloudResourcesWriter)(nil).UpsertCloudResources), varargs...)
}

// MockCloudResourcesStatusWriter is a mock of CloudResourcesStatusWriter interface.
type MockCloudResourcesStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCloudResourcesStatusWriterMockRecorder
}

// MockCloudResourcesStatusWriterMockRecorder is the mock recorder for MockCloudResourcesStatusWriter.
type MockCloudResourcesStatusWriterMockRecorder struct {
	mock *MockCloudResourcesStatusWriter
}

// NewMockCloudResourcesStatusWriter creates a new mock instance.
func NewMockCloudResourcesStatusWriter(ctrl *gomock.Controller) *MockCloudResourcesStatusWriter {
	mock := &MockCloudResourcesStatusWriter{ctrl: ctrl}
	mock.recorder = &MockCloudResourcesStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudResourcesStatusWriter) EXPECT() *MockCloudResourcesStatusWriterMockRecorder {
	return m.recorder
}

// PatchCloudResourcesStatus mocks base method.
func (m *MockCloudResourcesStatusWriter) PatchCloudResourcesStatus(ctx context.Context, obj *v2.CloudResources, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCloudResourcesStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCloudResourcesStatus indicates an expected call of PatchCloudResourcesStatus.
func (mr *MockCloudResourcesStatusWriterMockRecorder) PatchCloudResourcesStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCloudResourcesStatus", reflect.TypeOf((*MockCloudResourcesStatusWriter)(nil).PatchCloudResourcesStatus), varargs...)
}

// UpdateCloudResourcesStatus mocks base method.
func (m *MockCloudResourcesStatusWriter) UpdateCloudResourcesStatus(ctx context.Context, obj *v2.CloudResources, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCloudResourcesStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCloudResourcesStatus indicates an expected call of UpdateCloudResourcesStatus.
func (mr *MockCloudResourcesStatusWriterMockRecorder) UpdateCloudResourcesStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudResourcesStatus", reflect.TypeOf((*MockCloudResourcesStatusWriter)(nil).UpdateCloudResourcesStatus), varargs...)
}

// MockCloudResourcesClient is a mock of CloudResourcesClient interface.
type MockCloudResourcesClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudResourcesClientMockRecorder
}

// MockCloudResourcesClientMockRecorder is the mock recorder for MockCloudResourcesClient.
type MockCloudResourcesClientMockRecorder struct {
	mock *MockCloudResourcesClient
}

// NewMockCloudResourcesClient creates a new mock instance.
func NewMockCloudResourcesClient(ctrl *gomock.Controller) *MockCloudResourcesClient {
	mock := &MockCloudResourcesClient{ctrl: ctrl}
	mock.recorder = &MockCloudResourcesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudResourcesClient) EXPECT() *MockCloudResourcesClientMockRecorder {
	return m.recorder
}

// CreateCloudResources mocks base method.
func (m *MockCloudResourcesClient) CreateCloudResources(ctx context.Context, obj *v2.CloudResources, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCloudResources", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCloudResources indicates an expected call of CreateCloudResources.
func (mr *MockCloudResourcesClientMockRecorder) CreateCloudResources(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudResources", reflect.TypeOf((*MockCloudResourcesClient)(nil).CreateCloudResources), varargs...)
}

// DeleteAllOfCloudResources mocks base method.
func (m *MockCloudResourcesClient) DeleteAllOfCloudResources(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfCloudResources", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfCloudResources indicates an expected call of DeleteAllOfCloudResources.
func (mr *MockCloudResourcesClientMockRecorder) DeleteAllOfCloudResources(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfCloudResources", reflect.TypeOf((*MockCloudResourcesClient)(nil).DeleteAllOfCloudResources), varargs...)
}

// DeleteCloudResources mocks base method.
func (m *MockCloudResourcesClient) DeleteCloudResources(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCloudResources", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCloudResources indicates an expected call of DeleteCloudResources.
func (mr *MockCloudResourcesClientMockRecorder) DeleteCloudResources(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCloudResources", reflect.TypeOf((*MockCloudResourcesClient)(nil).DeleteCloudResources), varargs...)
}

// GetCloudResources mocks base method.
func (m *MockCloudResourcesClient) GetCloudResources(ctx context.Context, key client.ObjectKey) (*v2.CloudResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudResources", ctx, key)
	ret0, _ := ret[0].(*v2.CloudResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudResources indicates an expected call of GetCloudResources.
func (mr *MockCloudResourcesClientMockRecorder) GetCloudResources(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudResources", reflect.TypeOf((*MockCloudResourcesClient)(nil).GetCloudResources), ctx, key)
}

// ListCloudResources mocks base method.
func (m *MockCloudResourcesClient) ListCloudResources(ctx context.Context, opts ...client.ListOption) (*v2.CloudResourcesList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCloudResources", varargs...)
	ret0, _ := ret[0].(*v2.CloudResourcesList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCloudResources indicates an expected call of ListCloudResources.
func (mr *MockCloudResourcesClientMockRecorder) ListCloudResources(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudResources", reflect.TypeOf((*MockCloudResourcesClient)(nil).ListCloudResources), varargs...)
}

// PatchCloudResources mocks base method.
func (m *MockCloudResourcesClient) PatchCloudResources(ctx context.Context, obj *v2.CloudResources, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCloudResources", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCloudResources indicates an expected call of PatchCloudResources.
func (mr *MockCloudResourcesClientMockRecorder) PatchCloudResources(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCloudResources", reflect.TypeOf((*MockCloudResourcesClient)(nil).PatchCloudResources), varargs...)
}

// PatchCloudResourcesStatus mocks base method.
func (m *MockCloudResourcesClient) PatchCloudResourcesStatus(ctx context.Context, obj *v2.CloudResources, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCloudResourcesStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCloudResourcesStatus indicates an expected call of PatchCloudResourcesStatus.
func (mr *MockCloudResourcesClientMockRecorder) PatchCloudResourcesStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCloudResourcesStatus", reflect.TypeOf((*MockCloudResourcesClient)(nil).PatchCloudResourcesStatus), varargs...)
}

// UpdateCloudResources mocks base method.
func (m *MockCloudResourcesClient) UpdateCloudResources(ctx context.Context, obj *v2.CloudResources, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCloudResources", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCloudResources indicates an expected call of UpdateCloudResources.
func (mr *MockCloudResourcesClientMockRecorder) UpdateCloudResources(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudResources", reflect.TypeOf((*MockCloudResourcesClient)(nil).UpdateCloudResources), varargs...)
}

// UpdateCloudResourcesStatus mocks base method.
func (m *MockCloudResourcesClient) UpdateCloudResourcesStatus(ctx context.Context, obj *v2.CloudResources, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCloudResourcesStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCloudResourcesStatus indicates an expected call of UpdateCloudResourcesStatus.
func (mr *MockCloudResourcesClientMockRecorder) UpdateCloudResourcesStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudResourcesStatus", reflect.TypeOf((*MockCloudResourcesClient)(nil).UpdateCloudResourcesStatus), varargs...)
}

// UpsertCloudResources mocks base method.
func (m *MockCloudResourcesClient) UpsertCloudResources(ctx context.Context, obj *v2.CloudResources, transitionFuncs ...v2.CloudResourcesTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertCloudResources", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCloudResources indicates an expected call of UpsertCloudResources.
func (mr *MockCloudResourcesClientMockRecorder) UpsertCloudResources(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCloudResources", reflect.TypeOf((*MockCloudResourcesClient)(nil).UpsertCloudResources), varargs...)
}

// MockMulticlusterCloudResourcesClient is a mock of MulticlusterCloudResourcesClient interface.
type MockMulticlusterCloudResourcesClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterCloudResourcesClientMockRecorder
}

// MockMulticlusterCloudResourcesClientMockRecorder is the mock recorder for MockMulticlusterCloudResourcesClient.
type MockMulticlusterCloudResourcesClientMockRecorder struct {
	mock *MockMulticlusterCloudResourcesClient
}

// NewMockMulticlusterCloudResourcesClient creates a new mock instance.
func NewMockMulticlusterCloudResourcesClient(ctrl *gomock.Controller) *MockMulticlusterCloudResourcesClient {
	mock := &MockMulticlusterCloudResourcesClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterCloudResourcesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterCloudResourcesClient) EXPECT() *MockMulticlusterCloudResourcesClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterCloudResourcesClient) Cluster(cluster string) (v2.CloudResourcesClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.CloudResourcesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterCloudResourcesClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterCloudResourcesClient)(nil).Cluster), cluster)
}
