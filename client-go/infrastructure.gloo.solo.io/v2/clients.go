// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v2

import (
	"context"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the infrastructure.gloo.solo.io/v2 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the infrastructure.gloo.solo.io/v2 APIs
type Clientset interface {
	// clienset for the infrastructure.gloo.solo.io/v2/v2 APIs
	CloudProviders() CloudProviderClient
	// clienset for the infrastructure.gloo.solo.io/v2/v2 APIs
	CloudResources() CloudResourcesClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := SchemeBuilder.AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the infrastructure.gloo.solo.io/v2/v2 APIs
func (c *clientSet) CloudProviders() CloudProviderClient {
	return NewCloudProviderClient(c.client)
}

// clienset for the infrastructure.gloo.solo.io/v2/v2 APIs
func (c *clientSet) CloudResources() CloudResourcesClient {
	return NewCloudResourcesClient(c.client)
}

// Reader knows how to read and list CloudProviders.
type CloudProviderReader interface {
	// Get retrieves a CloudProvider for the given object key
	GetCloudProvider(ctx context.Context, key client.ObjectKey) (*CloudProvider, error)

	// List retrieves list of CloudProviders for a given namespace and list options.
	ListCloudProvider(ctx context.Context, opts ...client.ListOption) (*CloudProviderList, error)
}

// CloudProviderTransitionFunction instructs the CloudProviderWriter how to transition between an existing
// CloudProvider object and a desired on an Upsert
type CloudProviderTransitionFunction func(existing, desired *CloudProvider) error

// Writer knows how to create, delete, and update CloudProviders.
type CloudProviderWriter interface {
	// Create saves the CloudProvider object.
	CreateCloudProvider(ctx context.Context, obj *CloudProvider, opts ...client.CreateOption) error

	// Delete deletes the CloudProvider object.
	DeleteCloudProvider(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given CloudProvider object.
	UpdateCloudProvider(ctx context.Context, obj *CloudProvider, opts ...client.UpdateOption) error

	// Patch patches the given CloudProvider object.
	PatchCloudProvider(ctx context.Context, obj *CloudProvider, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all CloudProvider objects matching the given options.
	DeleteAllOfCloudProvider(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the CloudProvider object.
	UpsertCloudProvider(ctx context.Context, obj *CloudProvider, transitionFuncs ...CloudProviderTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a CloudProvider object.
type CloudProviderStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given CloudProvider object.
	UpdateCloudProviderStatus(ctx context.Context, obj *CloudProvider, opts ...client.UpdateOption) error

	// Patch patches the given CloudProvider object's subresource.
	PatchCloudProviderStatus(ctx context.Context, obj *CloudProvider, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on CloudProviders.
type CloudProviderClient interface {
	CloudProviderReader
	CloudProviderWriter
	CloudProviderStatusWriter
}

type cloudProviderClient struct {
	client client.Client
}

func NewCloudProviderClient(client client.Client) *cloudProviderClient {
	return &cloudProviderClient{client: client}
}

func (c *cloudProviderClient) GetCloudProvider(ctx context.Context, key client.ObjectKey) (*CloudProvider, error) {
	obj := &CloudProvider{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *cloudProviderClient) ListCloudProvider(ctx context.Context, opts ...client.ListOption) (*CloudProviderList, error) {
	list := &CloudProviderList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *cloudProviderClient) CreateCloudProvider(ctx context.Context, obj *CloudProvider, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *cloudProviderClient) DeleteCloudProvider(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &CloudProvider{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *cloudProviderClient) UpdateCloudProvider(ctx context.Context, obj *CloudProvider, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *cloudProviderClient) PatchCloudProvider(ctx context.Context, obj *CloudProvider, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *cloudProviderClient) DeleteAllOfCloudProvider(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &CloudProvider{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *cloudProviderClient) UpsertCloudProvider(ctx context.Context, obj *CloudProvider, transitionFuncs ...CloudProviderTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*CloudProvider), desired.(*CloudProvider)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *cloudProviderClient) UpdateCloudProviderStatus(ctx context.Context, obj *CloudProvider, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *cloudProviderClient) PatchCloudProviderStatus(ctx context.Context, obj *CloudProvider, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides CloudProviderClients for multiple clusters.
type MulticlusterCloudProviderClient interface {
	// Cluster returns a CloudProviderClient for the given cluster
	Cluster(cluster string) (CloudProviderClient, error)
}

type multiclusterCloudProviderClient struct {
	client multicluster.Client
}

func NewMulticlusterCloudProviderClient(client multicluster.Client) MulticlusterCloudProviderClient {
	return &multiclusterCloudProviderClient{client: client}
}

func (m *multiclusterCloudProviderClient) Cluster(cluster string) (CloudProviderClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewCloudProviderClient(client), nil
}

// Reader knows how to read and list CloudResourcess.
type CloudResourcesReader interface {
	// Get retrieves a CloudResources for the given object key
	GetCloudResources(ctx context.Context, key client.ObjectKey) (*CloudResources, error)

	// List retrieves list of CloudResourcess for a given namespace and list options.
	ListCloudResources(ctx context.Context, opts ...client.ListOption) (*CloudResourcesList, error)
}

// CloudResourcesTransitionFunction instructs the CloudResourcesWriter how to transition between an existing
// CloudResources object and a desired on an Upsert
type CloudResourcesTransitionFunction func(existing, desired *CloudResources) error

// Writer knows how to create, delete, and update CloudResourcess.
type CloudResourcesWriter interface {
	// Create saves the CloudResources object.
	CreateCloudResources(ctx context.Context, obj *CloudResources, opts ...client.CreateOption) error

	// Delete deletes the CloudResources object.
	DeleteCloudResources(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given CloudResources object.
	UpdateCloudResources(ctx context.Context, obj *CloudResources, opts ...client.UpdateOption) error

	// Patch patches the given CloudResources object.
	PatchCloudResources(ctx context.Context, obj *CloudResources, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all CloudResources objects matching the given options.
	DeleteAllOfCloudResources(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the CloudResources object.
	UpsertCloudResources(ctx context.Context, obj *CloudResources, transitionFuncs ...CloudResourcesTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a CloudResources object.
type CloudResourcesStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given CloudResources object.
	UpdateCloudResourcesStatus(ctx context.Context, obj *CloudResources, opts ...client.UpdateOption) error

	// Patch patches the given CloudResources object's subresource.
	PatchCloudResourcesStatus(ctx context.Context, obj *CloudResources, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on CloudResourcess.
type CloudResourcesClient interface {
	CloudResourcesReader
	CloudResourcesWriter
	CloudResourcesStatusWriter
}

type cloudResourcesClient struct {
	client client.Client
}

func NewCloudResourcesClient(client client.Client) *cloudResourcesClient {
	return &cloudResourcesClient{client: client}
}

func (c *cloudResourcesClient) GetCloudResources(ctx context.Context, key client.ObjectKey) (*CloudResources, error) {
	obj := &CloudResources{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *cloudResourcesClient) ListCloudResources(ctx context.Context, opts ...client.ListOption) (*CloudResourcesList, error) {
	list := &CloudResourcesList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *cloudResourcesClient) CreateCloudResources(ctx context.Context, obj *CloudResources, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *cloudResourcesClient) DeleteCloudResources(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &CloudResources{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *cloudResourcesClient) UpdateCloudResources(ctx context.Context, obj *CloudResources, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *cloudResourcesClient) PatchCloudResources(ctx context.Context, obj *CloudResources, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *cloudResourcesClient) DeleteAllOfCloudResources(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &CloudResources{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *cloudResourcesClient) UpsertCloudResources(ctx context.Context, obj *CloudResources, transitionFuncs ...CloudResourcesTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*CloudResources), desired.(*CloudResources)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *cloudResourcesClient) UpdateCloudResourcesStatus(ctx context.Context, obj *CloudResources, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *cloudResourcesClient) PatchCloudResourcesStatus(ctx context.Context, obj *CloudResources, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides CloudResourcesClients for multiple clusters.
type MulticlusterCloudResourcesClient interface {
	// Cluster returns a CloudResourcesClient for the given cluster
	Cluster(cluster string) (CloudResourcesClient, error)
}

type multiclusterCloudResourcesClient struct {
	client multicluster.Client
}

func NewMulticlusterCloudResourcesClient(client multicluster.Client) MulticlusterCloudResourcesClient {
	return &multiclusterCloudResourcesClient{client: client}
}

func (m *multiclusterCloudResourcesClient) Cluster(cluster string) (CloudResourcesClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewCloudResourcesClient(client), nil
}
