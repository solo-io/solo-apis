// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	infrastructure_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/infrastructure.gloo.solo.io/v2"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the CloudProvider Resource
// DEPRECATED: Prefer reconciler pattern.
type CloudProviderEventHandler interface {
	CreateCloudProvider(obj *infrastructure_gloo_solo_io_v2.CloudProvider) error
	UpdateCloudProvider(old, new *infrastructure_gloo_solo_io_v2.CloudProvider) error
	DeleteCloudProvider(obj *infrastructure_gloo_solo_io_v2.CloudProvider) error
	GenericCloudProvider(obj *infrastructure_gloo_solo_io_v2.CloudProvider) error
}

type CloudProviderEventHandlerFuncs struct {
	OnCreate  func(obj *infrastructure_gloo_solo_io_v2.CloudProvider) error
	OnUpdate  func(old, new *infrastructure_gloo_solo_io_v2.CloudProvider) error
	OnDelete  func(obj *infrastructure_gloo_solo_io_v2.CloudProvider) error
	OnGeneric func(obj *infrastructure_gloo_solo_io_v2.CloudProvider) error
}

func (f *CloudProviderEventHandlerFuncs) CreateCloudProvider(obj *infrastructure_gloo_solo_io_v2.CloudProvider) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *CloudProviderEventHandlerFuncs) DeleteCloudProvider(obj *infrastructure_gloo_solo_io_v2.CloudProvider) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *CloudProviderEventHandlerFuncs) UpdateCloudProvider(objOld, objNew *infrastructure_gloo_solo_io_v2.CloudProvider) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *CloudProviderEventHandlerFuncs) GenericCloudProvider(obj *infrastructure_gloo_solo_io_v2.CloudProvider) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type CloudProviderEventWatcher interface {
	AddEventHandler(ctx context.Context, h CloudProviderEventHandler, predicates ...predicate.Predicate) error
}

type cloudProviderEventWatcher struct {
	watcher events.EventWatcher
}

func NewCloudProviderEventWatcher(name string, mgr manager.Manager) CloudProviderEventWatcher {
	return &cloudProviderEventWatcher{
		watcher: events.NewWatcher(name, mgr, &infrastructure_gloo_solo_io_v2.CloudProvider{}),
	}
}

func (c *cloudProviderEventWatcher) AddEventHandler(ctx context.Context, h CloudProviderEventHandler, predicates ...predicate.Predicate) error {
	handler := genericCloudProviderHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericCloudProviderHandler implements a generic events.EventHandler
type genericCloudProviderHandler struct {
	handler CloudProviderEventHandler
}

func (h genericCloudProviderHandler) Create(object client.Object) error {
	obj, ok := object.(*infrastructure_gloo_solo_io_v2.CloudProvider)
	if !ok {
		return errors.Errorf("internal error: CloudProvider handler received event for %T", object)
	}
	return h.handler.CreateCloudProvider(obj)
}

func (h genericCloudProviderHandler) Delete(object client.Object) error {
	obj, ok := object.(*infrastructure_gloo_solo_io_v2.CloudProvider)
	if !ok {
		return errors.Errorf("internal error: CloudProvider handler received event for %T", object)
	}
	return h.handler.DeleteCloudProvider(obj)
}

func (h genericCloudProviderHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*infrastructure_gloo_solo_io_v2.CloudProvider)
	if !ok {
		return errors.Errorf("internal error: CloudProvider handler received event for %T", old)
	}
	objNew, ok := new.(*infrastructure_gloo_solo_io_v2.CloudProvider)
	if !ok {
		return errors.Errorf("internal error: CloudProvider handler received event for %T", new)
	}
	return h.handler.UpdateCloudProvider(objOld, objNew)
}

func (h genericCloudProviderHandler) Generic(object client.Object) error {
	obj, ok := object.(*infrastructure_gloo_solo_io_v2.CloudProvider)
	if !ok {
		return errors.Errorf("internal error: CloudProvider handler received event for %T", object)
	}
	return h.handler.GenericCloudProvider(obj)
}

// Handle events for the CloudResources Resource
// DEPRECATED: Prefer reconciler pattern.
type CloudResourcesEventHandler interface {
	CreateCloudResources(obj *infrastructure_gloo_solo_io_v2.CloudResources) error
	UpdateCloudResources(old, new *infrastructure_gloo_solo_io_v2.CloudResources) error
	DeleteCloudResources(obj *infrastructure_gloo_solo_io_v2.CloudResources) error
	GenericCloudResources(obj *infrastructure_gloo_solo_io_v2.CloudResources) error
}

type CloudResourcesEventHandlerFuncs struct {
	OnCreate  func(obj *infrastructure_gloo_solo_io_v2.CloudResources) error
	OnUpdate  func(old, new *infrastructure_gloo_solo_io_v2.CloudResources) error
	OnDelete  func(obj *infrastructure_gloo_solo_io_v2.CloudResources) error
	OnGeneric func(obj *infrastructure_gloo_solo_io_v2.CloudResources) error
}

func (f *CloudResourcesEventHandlerFuncs) CreateCloudResources(obj *infrastructure_gloo_solo_io_v2.CloudResources) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *CloudResourcesEventHandlerFuncs) DeleteCloudResources(obj *infrastructure_gloo_solo_io_v2.CloudResources) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *CloudResourcesEventHandlerFuncs) UpdateCloudResources(objOld, objNew *infrastructure_gloo_solo_io_v2.CloudResources) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *CloudResourcesEventHandlerFuncs) GenericCloudResources(obj *infrastructure_gloo_solo_io_v2.CloudResources) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type CloudResourcesEventWatcher interface {
	AddEventHandler(ctx context.Context, h CloudResourcesEventHandler, predicates ...predicate.Predicate) error
}

type cloudResourcesEventWatcher struct {
	watcher events.EventWatcher
}

func NewCloudResourcesEventWatcher(name string, mgr manager.Manager) CloudResourcesEventWatcher {
	return &cloudResourcesEventWatcher{
		watcher: events.NewWatcher(name, mgr, &infrastructure_gloo_solo_io_v2.CloudResources{}),
	}
}

func (c *cloudResourcesEventWatcher) AddEventHandler(ctx context.Context, h CloudResourcesEventHandler, predicates ...predicate.Predicate) error {
	handler := genericCloudResourcesHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericCloudResourcesHandler implements a generic events.EventHandler
type genericCloudResourcesHandler struct {
	handler CloudResourcesEventHandler
}

func (h genericCloudResourcesHandler) Create(object client.Object) error {
	obj, ok := object.(*infrastructure_gloo_solo_io_v2.CloudResources)
	if !ok {
		return errors.Errorf("internal error: CloudResources handler received event for %T", object)
	}
	return h.handler.CreateCloudResources(obj)
}

func (h genericCloudResourcesHandler) Delete(object client.Object) error {
	obj, ok := object.(*infrastructure_gloo_solo_io_v2.CloudResources)
	if !ok {
		return errors.Errorf("internal error: CloudResources handler received event for %T", object)
	}
	return h.handler.DeleteCloudResources(obj)
}

func (h genericCloudResourcesHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*infrastructure_gloo_solo_io_v2.CloudResources)
	if !ok {
		return errors.Errorf("internal error: CloudResources handler received event for %T", old)
	}
	objNew, ok := new.(*infrastructure_gloo_solo_io_v2.CloudResources)
	if !ok {
		return errors.Errorf("internal error: CloudResources handler received event for %T", new)
	}
	return h.handler.UpdateCloudResources(objOld, objNew)
}

func (h genericCloudResourcesHandler) Generic(object client.Object) error {
	obj, ok := object.(*infrastructure_gloo_solo_io_v2.CloudResources)
	if !ok {
		return errors.Errorf("internal error: CloudResources handler received event for %T", object)
	}
	return h.handler.GenericCloudResources(obj)
}
