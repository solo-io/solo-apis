// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	infrastructure_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/infrastructure.gloo.solo.io/v2"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the CloudProvider Resource.
// implemented by the user
type CloudProviderReconciler interface {
	ReconcileCloudProvider(obj *infrastructure_gloo_solo_io_v2.CloudProvider) (reconcile.Result, error)
}

// Reconcile deletion events for the CloudProvider Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type CloudProviderDeletionReconciler interface {
	ReconcileCloudProviderDeletion(req reconcile.Request) error
}

type CloudProviderReconcilerFuncs struct {
	OnReconcileCloudProvider         func(obj *infrastructure_gloo_solo_io_v2.CloudProvider) (reconcile.Result, error)
	OnReconcileCloudProviderDeletion func(req reconcile.Request) error
}

func (f *CloudProviderReconcilerFuncs) ReconcileCloudProvider(obj *infrastructure_gloo_solo_io_v2.CloudProvider) (reconcile.Result, error) {
	if f.OnReconcileCloudProvider == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileCloudProvider(obj)
}

func (f *CloudProviderReconcilerFuncs) ReconcileCloudProviderDeletion(req reconcile.Request) error {
	if f.OnReconcileCloudProviderDeletion == nil {
		return nil
	}
	return f.OnReconcileCloudProviderDeletion(req)
}

// Reconcile and finalize the CloudProvider Resource
// implemented by the user
type CloudProviderFinalizer interface {
	CloudProviderReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	CloudProviderFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeCloudProvider(obj *infrastructure_gloo_solo_io_v2.CloudProvider) error
}

type CloudProviderReconcileLoop interface {
	RunCloudProviderReconciler(ctx context.Context, rec CloudProviderReconciler, predicates ...predicate.Predicate) error
}

type cloudProviderReconcileLoop struct {
	loop reconcile.Loop
}

func NewCloudProviderReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) CloudProviderReconcileLoop {
	return &cloudProviderReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &infrastructure_gloo_solo_io_v2.CloudProvider{}, options),
	}
}

func (c *cloudProviderReconcileLoop) RunCloudProviderReconciler(ctx context.Context, reconciler CloudProviderReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericCloudProviderReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(CloudProviderFinalizer); ok {
		reconcilerWrapper = genericCloudProviderFinalizer{
			genericCloudProviderReconciler: genericReconciler,
			finalizingReconciler:           finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericCloudProviderHandler implements a generic reconcile.Reconciler
type genericCloudProviderReconciler struct {
	reconciler CloudProviderReconciler
}

func (r genericCloudProviderReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*infrastructure_gloo_solo_io_v2.CloudProvider)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: CloudProvider handler received event for %T", object)
	}
	return r.reconciler.ReconcileCloudProvider(obj)
}

func (r genericCloudProviderReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(CloudProviderDeletionReconciler); ok {
		return deletionReconciler.ReconcileCloudProviderDeletion(request)
	}
	return nil
}

// genericCloudProviderFinalizer implements a generic reconcile.FinalizingReconciler
type genericCloudProviderFinalizer struct {
	genericCloudProviderReconciler
	finalizingReconciler CloudProviderFinalizer
}

func (r genericCloudProviderFinalizer) FinalizerName() string {
	return r.finalizingReconciler.CloudProviderFinalizerName()
}

func (r genericCloudProviderFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*infrastructure_gloo_solo_io_v2.CloudProvider)
	if !ok {
		return errors.Errorf("internal error: CloudProvider handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeCloudProvider(obj)
}

// Reconcile Upsert events for the CloudResources Resource.
// implemented by the user
type CloudResourcesReconciler interface {
	ReconcileCloudResources(obj *infrastructure_gloo_solo_io_v2.CloudResources) (reconcile.Result, error)
}

// Reconcile deletion events for the CloudResources Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type CloudResourcesDeletionReconciler interface {
	ReconcileCloudResourcesDeletion(req reconcile.Request) error
}

type CloudResourcesReconcilerFuncs struct {
	OnReconcileCloudResources         func(obj *infrastructure_gloo_solo_io_v2.CloudResources) (reconcile.Result, error)
	OnReconcileCloudResourcesDeletion func(req reconcile.Request) error
}

func (f *CloudResourcesReconcilerFuncs) ReconcileCloudResources(obj *infrastructure_gloo_solo_io_v2.CloudResources) (reconcile.Result, error) {
	if f.OnReconcileCloudResources == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileCloudResources(obj)
}

func (f *CloudResourcesReconcilerFuncs) ReconcileCloudResourcesDeletion(req reconcile.Request) error {
	if f.OnReconcileCloudResourcesDeletion == nil {
		return nil
	}
	return f.OnReconcileCloudResourcesDeletion(req)
}

// Reconcile and finalize the CloudResources Resource
// implemented by the user
type CloudResourcesFinalizer interface {
	CloudResourcesReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	CloudResourcesFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeCloudResources(obj *infrastructure_gloo_solo_io_v2.CloudResources) error
}

type CloudResourcesReconcileLoop interface {
	RunCloudResourcesReconciler(ctx context.Context, rec CloudResourcesReconciler, predicates ...predicate.Predicate) error
}

type cloudResourcesReconcileLoop struct {
	loop reconcile.Loop
}

func NewCloudResourcesReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) CloudResourcesReconcileLoop {
	return &cloudResourcesReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &infrastructure_gloo_solo_io_v2.CloudResources{}, options),
	}
}

func (c *cloudResourcesReconcileLoop) RunCloudResourcesReconciler(ctx context.Context, reconciler CloudResourcesReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericCloudResourcesReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(CloudResourcesFinalizer); ok {
		reconcilerWrapper = genericCloudResourcesFinalizer{
			genericCloudResourcesReconciler: genericReconciler,
			finalizingReconciler:            finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericCloudResourcesHandler implements a generic reconcile.Reconciler
type genericCloudResourcesReconciler struct {
	reconciler CloudResourcesReconciler
}

func (r genericCloudResourcesReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*infrastructure_gloo_solo_io_v2.CloudResources)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: CloudResources handler received event for %T", object)
	}
	return r.reconciler.ReconcileCloudResources(obj)
}

func (r genericCloudResourcesReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(CloudResourcesDeletionReconciler); ok {
		return deletionReconciler.ReconcileCloudResourcesDeletion(request)
	}
	return nil
}

// genericCloudResourcesFinalizer implements a generic reconcile.FinalizingReconciler
type genericCloudResourcesFinalizer struct {
	genericCloudResourcesReconciler
	finalizingReconciler CloudResourcesFinalizer
}

func (r genericCloudResourcesFinalizer) FinalizerName() string {
	return r.finalizingReconciler.CloudResourcesFinalizerName()
}

func (r genericCloudResourcesFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*infrastructure_gloo_solo_io_v2.CloudResources)
	if !ok {
		return errors.Errorf("internal error: CloudResources handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeCloudResources(obj)
}
