// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go
//
// Generated by this command:
//
//	mockgen -source ./event_handlers.go -destination mocks/event_handlers.go
//

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"

	v2 "github.com/solo-io/solo-apis/client-go/infrastructure.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/client-go/infrastructure.gloo.solo.io/v2/controller"
)

// MockCloudProviderEventHandler is a mock of CloudProviderEventHandler interface.
type MockCloudProviderEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCloudProviderEventHandlerMockRecorder
}

// MockCloudProviderEventHandlerMockRecorder is the mock recorder for MockCloudProviderEventHandler.
type MockCloudProviderEventHandlerMockRecorder struct {
	mock *MockCloudProviderEventHandler
}

// NewMockCloudProviderEventHandler creates a new mock instance.
func NewMockCloudProviderEventHandler(ctrl *gomock.Controller) *MockCloudProviderEventHandler {
	mock := &MockCloudProviderEventHandler{ctrl: ctrl}
	mock.recorder = &MockCloudProviderEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudProviderEventHandler) EXPECT() *MockCloudProviderEventHandlerMockRecorder {
	return m.recorder
}

// CreateCloudProvider mocks base method.
func (m *MockCloudProviderEventHandler) CreateCloudProvider(obj *v2.CloudProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCloudProvider", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCloudProvider indicates an expected call of CreateCloudProvider.
func (mr *MockCloudProviderEventHandlerMockRecorder) CreateCloudProvider(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudProvider", reflect.TypeOf((*MockCloudProviderEventHandler)(nil).CreateCloudProvider), obj)
}

// DeleteCloudProvider mocks base method.
func (m *MockCloudProviderEventHandler) DeleteCloudProvider(obj *v2.CloudProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCloudProvider", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCloudProvider indicates an expected call of DeleteCloudProvider.
func (mr *MockCloudProviderEventHandlerMockRecorder) DeleteCloudProvider(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCloudProvider", reflect.TypeOf((*MockCloudProviderEventHandler)(nil).DeleteCloudProvider), obj)
}

// GenericCloudProvider mocks base method.
func (m *MockCloudProviderEventHandler) GenericCloudProvider(obj *v2.CloudProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericCloudProvider", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericCloudProvider indicates an expected call of GenericCloudProvider.
func (mr *MockCloudProviderEventHandlerMockRecorder) GenericCloudProvider(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericCloudProvider", reflect.TypeOf((*MockCloudProviderEventHandler)(nil).GenericCloudProvider), obj)
}

// UpdateCloudProvider mocks base method.
func (m *MockCloudProviderEventHandler) UpdateCloudProvider(old, new *v2.CloudProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCloudProvider", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCloudProvider indicates an expected call of UpdateCloudProvider.
func (mr *MockCloudProviderEventHandlerMockRecorder) UpdateCloudProvider(old, new any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudProvider", reflect.TypeOf((*MockCloudProviderEventHandler)(nil).UpdateCloudProvider), old, new)
}

// MockCloudProviderEventWatcher is a mock of CloudProviderEventWatcher interface.
type MockCloudProviderEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockCloudProviderEventWatcherMockRecorder
}

// MockCloudProviderEventWatcherMockRecorder is the mock recorder for MockCloudProviderEventWatcher.
type MockCloudProviderEventWatcherMockRecorder struct {
	mock *MockCloudProviderEventWatcher
}

// NewMockCloudProviderEventWatcher creates a new mock instance.
func NewMockCloudProviderEventWatcher(ctrl *gomock.Controller) *MockCloudProviderEventWatcher {
	mock := &MockCloudProviderEventWatcher{ctrl: ctrl}
	mock.recorder = &MockCloudProviderEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudProviderEventWatcher) EXPECT() *MockCloudProviderEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockCloudProviderEventWatcher) AddEventHandler(ctx context.Context, h controller.CloudProviderEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockCloudProviderEventWatcherMockRecorder) AddEventHandler(ctx, h any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockCloudProviderEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockCloudResourcesEventHandler is a mock of CloudResourcesEventHandler interface.
type MockCloudResourcesEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCloudResourcesEventHandlerMockRecorder
}

// MockCloudResourcesEventHandlerMockRecorder is the mock recorder for MockCloudResourcesEventHandler.
type MockCloudResourcesEventHandlerMockRecorder struct {
	mock *MockCloudResourcesEventHandler
}

// NewMockCloudResourcesEventHandler creates a new mock instance.
func NewMockCloudResourcesEventHandler(ctrl *gomock.Controller) *MockCloudResourcesEventHandler {
	mock := &MockCloudResourcesEventHandler{ctrl: ctrl}
	mock.recorder = &MockCloudResourcesEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudResourcesEventHandler) EXPECT() *MockCloudResourcesEventHandlerMockRecorder {
	return m.recorder
}

// CreateCloudResources mocks base method.
func (m *MockCloudResourcesEventHandler) CreateCloudResources(obj *v2.CloudResources) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCloudResources", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCloudResources indicates an expected call of CreateCloudResources.
func (mr *MockCloudResourcesEventHandlerMockRecorder) CreateCloudResources(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudResources", reflect.TypeOf((*MockCloudResourcesEventHandler)(nil).CreateCloudResources), obj)
}

// DeleteCloudResources mocks base method.
func (m *MockCloudResourcesEventHandler) DeleteCloudResources(obj *v2.CloudResources) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCloudResources", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCloudResources indicates an expected call of DeleteCloudResources.
func (mr *MockCloudResourcesEventHandlerMockRecorder) DeleteCloudResources(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCloudResources", reflect.TypeOf((*MockCloudResourcesEventHandler)(nil).DeleteCloudResources), obj)
}

// GenericCloudResources mocks base method.
func (m *MockCloudResourcesEventHandler) GenericCloudResources(obj *v2.CloudResources) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericCloudResources", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericCloudResources indicates an expected call of GenericCloudResources.
func (mr *MockCloudResourcesEventHandlerMockRecorder) GenericCloudResources(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericCloudResources", reflect.TypeOf((*MockCloudResourcesEventHandler)(nil).GenericCloudResources), obj)
}

// UpdateCloudResources mocks base method.
func (m *MockCloudResourcesEventHandler) UpdateCloudResources(old, new *v2.CloudResources) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCloudResources", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCloudResources indicates an expected call of UpdateCloudResources.
func (mr *MockCloudResourcesEventHandlerMockRecorder) UpdateCloudResources(old, new any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudResources", reflect.TypeOf((*MockCloudResourcesEventHandler)(nil).UpdateCloudResources), old, new)
}

// MockCloudResourcesEventWatcher is a mock of CloudResourcesEventWatcher interface.
type MockCloudResourcesEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockCloudResourcesEventWatcherMockRecorder
}

// MockCloudResourcesEventWatcherMockRecorder is the mock recorder for MockCloudResourcesEventWatcher.
type MockCloudResourcesEventWatcherMockRecorder struct {
	mock *MockCloudResourcesEventWatcher
}

// NewMockCloudResourcesEventWatcher creates a new mock instance.
func NewMockCloudResourcesEventWatcher(ctrl *gomock.Controller) *MockCloudResourcesEventWatcher {
	mock := &MockCloudResourcesEventWatcher{ctrl: ctrl}
	mock.recorder = &MockCloudResourcesEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudResourcesEventWatcher) EXPECT() *MockCloudResourcesEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockCloudResourcesEventWatcher) AddEventHandler(ctx context.Context, h controller.CloudResourcesEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockCloudResourcesEventWatcherMockRecorder) AddEventHandler(ctx, h any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockCloudResourcesEventWatcher)(nil).AddEventHandler), varargs...)
}
