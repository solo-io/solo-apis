// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"

	v2 "github.com/solo-io/solo-apis/client-go/infrastructure.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/client-go/infrastructure.gloo.solo.io/v2/controller"
)

// MockMulticlusterCloudProviderReconciler is a mock of MulticlusterCloudProviderReconciler interface.
type MockMulticlusterCloudProviderReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterCloudProviderReconcilerMockRecorder
}

// MockMulticlusterCloudProviderReconcilerMockRecorder is the mock recorder for MockMulticlusterCloudProviderReconciler.
type MockMulticlusterCloudProviderReconcilerMockRecorder struct {
	mock *MockMulticlusterCloudProviderReconciler
}

// NewMockMulticlusterCloudProviderReconciler creates a new mock instance.
func NewMockMulticlusterCloudProviderReconciler(ctrl *gomock.Controller) *MockMulticlusterCloudProviderReconciler {
	mock := &MockMulticlusterCloudProviderReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterCloudProviderReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterCloudProviderReconciler) EXPECT() *MockMulticlusterCloudProviderReconcilerMockRecorder {
	return m.recorder
}

// ReconcileCloudProvider mocks base method.
func (m *MockMulticlusterCloudProviderReconciler) ReconcileCloudProvider(clusterName string, obj *v2.CloudProvider) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCloudProvider", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileCloudProvider indicates an expected call of ReconcileCloudProvider.
func (mr *MockMulticlusterCloudProviderReconcilerMockRecorder) ReconcileCloudProvider(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCloudProvider", reflect.TypeOf((*MockMulticlusterCloudProviderReconciler)(nil).ReconcileCloudProvider), clusterName, obj)
}

// MockMulticlusterCloudProviderDeletionReconciler is a mock of MulticlusterCloudProviderDeletionReconciler interface.
type MockMulticlusterCloudProviderDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterCloudProviderDeletionReconcilerMockRecorder
}

// MockMulticlusterCloudProviderDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterCloudProviderDeletionReconciler.
type MockMulticlusterCloudProviderDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterCloudProviderDeletionReconciler
}

// NewMockMulticlusterCloudProviderDeletionReconciler creates a new mock instance.
func NewMockMulticlusterCloudProviderDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterCloudProviderDeletionReconciler {
	mock := &MockMulticlusterCloudProviderDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterCloudProviderDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterCloudProviderDeletionReconciler) EXPECT() *MockMulticlusterCloudProviderDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileCloudProviderDeletion mocks base method.
func (m *MockMulticlusterCloudProviderDeletionReconciler) ReconcileCloudProviderDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCloudProviderDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileCloudProviderDeletion indicates an expected call of ReconcileCloudProviderDeletion.
func (mr *MockMulticlusterCloudProviderDeletionReconcilerMockRecorder) ReconcileCloudProviderDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCloudProviderDeletion", reflect.TypeOf((*MockMulticlusterCloudProviderDeletionReconciler)(nil).ReconcileCloudProviderDeletion), clusterName, req)
}

// MockMulticlusterCloudProviderReconcileLoop is a mock of MulticlusterCloudProviderReconcileLoop interface.
type MockMulticlusterCloudProviderReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterCloudProviderReconcileLoopMockRecorder
}

// MockMulticlusterCloudProviderReconcileLoopMockRecorder is the mock recorder for MockMulticlusterCloudProviderReconcileLoop.
type MockMulticlusterCloudProviderReconcileLoopMockRecorder struct {
	mock *MockMulticlusterCloudProviderReconcileLoop
}

// NewMockMulticlusterCloudProviderReconcileLoop creates a new mock instance.
func NewMockMulticlusterCloudProviderReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterCloudProviderReconcileLoop {
	mock := &MockMulticlusterCloudProviderReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterCloudProviderReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterCloudProviderReconcileLoop) EXPECT() *MockMulticlusterCloudProviderReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterCloudProviderReconciler mocks base method.
func (m *MockMulticlusterCloudProviderReconcileLoop) AddMulticlusterCloudProviderReconciler(ctx context.Context, rec controller.MulticlusterCloudProviderReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterCloudProviderReconciler", varargs...)
}

// AddMulticlusterCloudProviderReconciler indicates an expected call of AddMulticlusterCloudProviderReconciler.
func (mr *MockMulticlusterCloudProviderReconcileLoopMockRecorder) AddMulticlusterCloudProviderReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterCloudProviderReconciler", reflect.TypeOf((*MockMulticlusterCloudProviderReconcileLoop)(nil).AddMulticlusterCloudProviderReconciler), varargs...)
}

// MockMulticlusterCloudResourcesReconciler is a mock of MulticlusterCloudResourcesReconciler interface.
type MockMulticlusterCloudResourcesReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterCloudResourcesReconcilerMockRecorder
}

// MockMulticlusterCloudResourcesReconcilerMockRecorder is the mock recorder for MockMulticlusterCloudResourcesReconciler.
type MockMulticlusterCloudResourcesReconcilerMockRecorder struct {
	mock *MockMulticlusterCloudResourcesReconciler
}

// NewMockMulticlusterCloudResourcesReconciler creates a new mock instance.
func NewMockMulticlusterCloudResourcesReconciler(ctrl *gomock.Controller) *MockMulticlusterCloudResourcesReconciler {
	mock := &MockMulticlusterCloudResourcesReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterCloudResourcesReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterCloudResourcesReconciler) EXPECT() *MockMulticlusterCloudResourcesReconcilerMockRecorder {
	return m.recorder
}

// ReconcileCloudResources mocks base method.
func (m *MockMulticlusterCloudResourcesReconciler) ReconcileCloudResources(clusterName string, obj *v2.CloudResources) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCloudResources", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileCloudResources indicates an expected call of ReconcileCloudResources.
func (mr *MockMulticlusterCloudResourcesReconcilerMockRecorder) ReconcileCloudResources(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCloudResources", reflect.TypeOf((*MockMulticlusterCloudResourcesReconciler)(nil).ReconcileCloudResources), clusterName, obj)
}

// MockMulticlusterCloudResourcesDeletionReconciler is a mock of MulticlusterCloudResourcesDeletionReconciler interface.
type MockMulticlusterCloudResourcesDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterCloudResourcesDeletionReconcilerMockRecorder
}

// MockMulticlusterCloudResourcesDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterCloudResourcesDeletionReconciler.
type MockMulticlusterCloudResourcesDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterCloudResourcesDeletionReconciler
}

// NewMockMulticlusterCloudResourcesDeletionReconciler creates a new mock instance.
func NewMockMulticlusterCloudResourcesDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterCloudResourcesDeletionReconciler {
	mock := &MockMulticlusterCloudResourcesDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterCloudResourcesDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterCloudResourcesDeletionReconciler) EXPECT() *MockMulticlusterCloudResourcesDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileCloudResourcesDeletion mocks base method.
func (m *MockMulticlusterCloudResourcesDeletionReconciler) ReconcileCloudResourcesDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCloudResourcesDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileCloudResourcesDeletion indicates an expected call of ReconcileCloudResourcesDeletion.
func (mr *MockMulticlusterCloudResourcesDeletionReconcilerMockRecorder) ReconcileCloudResourcesDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCloudResourcesDeletion", reflect.TypeOf((*MockMulticlusterCloudResourcesDeletionReconciler)(nil).ReconcileCloudResourcesDeletion), clusterName, req)
}

// MockMulticlusterCloudResourcesReconcileLoop is a mock of MulticlusterCloudResourcesReconcileLoop interface.
type MockMulticlusterCloudResourcesReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterCloudResourcesReconcileLoopMockRecorder
}

// MockMulticlusterCloudResourcesReconcileLoopMockRecorder is the mock recorder for MockMulticlusterCloudResourcesReconcileLoop.
type MockMulticlusterCloudResourcesReconcileLoopMockRecorder struct {
	mock *MockMulticlusterCloudResourcesReconcileLoop
}

// NewMockMulticlusterCloudResourcesReconcileLoop creates a new mock instance.
func NewMockMulticlusterCloudResourcesReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterCloudResourcesReconcileLoop {
	mock := &MockMulticlusterCloudResourcesReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterCloudResourcesReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterCloudResourcesReconcileLoop) EXPECT() *MockMulticlusterCloudResourcesReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterCloudResourcesReconciler mocks base method.
func (m *MockMulticlusterCloudResourcesReconcileLoop) AddMulticlusterCloudResourcesReconciler(ctx context.Context, rec controller.MulticlusterCloudResourcesReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterCloudResourcesReconciler", varargs...)
}

// AddMulticlusterCloudResourcesReconciler indicates an expected call of AddMulticlusterCloudResourcesReconciler.
func (mr *MockMulticlusterCloudResourcesReconcileLoopMockRecorder) AddMulticlusterCloudResourcesReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterCloudResourcesReconciler", reflect.TypeOf((*MockMulticlusterCloudResourcesReconcileLoop)(nil).AddMulticlusterCloudResourcesReconciler), varargs...)
}
