// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"

	v2 "github.com/solo-io/solo-apis/client-go/infrastructure.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/client-go/infrastructure.gloo.solo.io/v2/controller"
)

// MockCloudProviderReconciler is a mock of CloudProviderReconciler interface.
type MockCloudProviderReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockCloudProviderReconcilerMockRecorder
}

// MockCloudProviderReconcilerMockRecorder is the mock recorder for MockCloudProviderReconciler.
type MockCloudProviderReconcilerMockRecorder struct {
	mock *MockCloudProviderReconciler
}

// NewMockCloudProviderReconciler creates a new mock instance.
func NewMockCloudProviderReconciler(ctrl *gomock.Controller) *MockCloudProviderReconciler {
	mock := &MockCloudProviderReconciler{ctrl: ctrl}
	mock.recorder = &MockCloudProviderReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudProviderReconciler) EXPECT() *MockCloudProviderReconcilerMockRecorder {
	return m.recorder
}

// ReconcileCloudProvider mocks base method.
func (m *MockCloudProviderReconciler) ReconcileCloudProvider(obj *v2.CloudProvider) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCloudProvider", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileCloudProvider indicates an expected call of ReconcileCloudProvider.
func (mr *MockCloudProviderReconcilerMockRecorder) ReconcileCloudProvider(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCloudProvider", reflect.TypeOf((*MockCloudProviderReconciler)(nil).ReconcileCloudProvider), obj)
}

// MockCloudProviderDeletionReconciler is a mock of CloudProviderDeletionReconciler interface.
type MockCloudProviderDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockCloudProviderDeletionReconcilerMockRecorder
}

// MockCloudProviderDeletionReconcilerMockRecorder is the mock recorder for MockCloudProviderDeletionReconciler.
type MockCloudProviderDeletionReconcilerMockRecorder struct {
	mock *MockCloudProviderDeletionReconciler
}

// NewMockCloudProviderDeletionReconciler creates a new mock instance.
func NewMockCloudProviderDeletionReconciler(ctrl *gomock.Controller) *MockCloudProviderDeletionReconciler {
	mock := &MockCloudProviderDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockCloudProviderDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudProviderDeletionReconciler) EXPECT() *MockCloudProviderDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileCloudProviderDeletion mocks base method.
func (m *MockCloudProviderDeletionReconciler) ReconcileCloudProviderDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCloudProviderDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileCloudProviderDeletion indicates an expected call of ReconcileCloudProviderDeletion.
func (mr *MockCloudProviderDeletionReconcilerMockRecorder) ReconcileCloudProviderDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCloudProviderDeletion", reflect.TypeOf((*MockCloudProviderDeletionReconciler)(nil).ReconcileCloudProviderDeletion), req)
}

// MockCloudProviderFinalizer is a mock of CloudProviderFinalizer interface.
type MockCloudProviderFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockCloudProviderFinalizerMockRecorder
}

// MockCloudProviderFinalizerMockRecorder is the mock recorder for MockCloudProviderFinalizer.
type MockCloudProviderFinalizerMockRecorder struct {
	mock *MockCloudProviderFinalizer
}

// NewMockCloudProviderFinalizer creates a new mock instance.
func NewMockCloudProviderFinalizer(ctrl *gomock.Controller) *MockCloudProviderFinalizer {
	mock := &MockCloudProviderFinalizer{ctrl: ctrl}
	mock.recorder = &MockCloudProviderFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudProviderFinalizer) EXPECT() *MockCloudProviderFinalizerMockRecorder {
	return m.recorder
}

// CloudProviderFinalizerName mocks base method.
func (m *MockCloudProviderFinalizer) CloudProviderFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudProviderFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// CloudProviderFinalizerName indicates an expected call of CloudProviderFinalizerName.
func (mr *MockCloudProviderFinalizerMockRecorder) CloudProviderFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudProviderFinalizerName", reflect.TypeOf((*MockCloudProviderFinalizer)(nil).CloudProviderFinalizerName))
}

// FinalizeCloudProvider mocks base method.
func (m *MockCloudProviderFinalizer) FinalizeCloudProvider(obj *v2.CloudProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeCloudProvider", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeCloudProvider indicates an expected call of FinalizeCloudProvider.
func (mr *MockCloudProviderFinalizerMockRecorder) FinalizeCloudProvider(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeCloudProvider", reflect.TypeOf((*MockCloudProviderFinalizer)(nil).FinalizeCloudProvider), obj)
}

// ReconcileCloudProvider mocks base method.
func (m *MockCloudProviderFinalizer) ReconcileCloudProvider(obj *v2.CloudProvider) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCloudProvider", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileCloudProvider indicates an expected call of ReconcileCloudProvider.
func (mr *MockCloudProviderFinalizerMockRecorder) ReconcileCloudProvider(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCloudProvider", reflect.TypeOf((*MockCloudProviderFinalizer)(nil).ReconcileCloudProvider), obj)
}

// MockCloudProviderReconcileLoop is a mock of CloudProviderReconcileLoop interface.
type MockCloudProviderReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockCloudProviderReconcileLoopMockRecorder
}

// MockCloudProviderReconcileLoopMockRecorder is the mock recorder for MockCloudProviderReconcileLoop.
type MockCloudProviderReconcileLoopMockRecorder struct {
	mock *MockCloudProviderReconcileLoop
}

// NewMockCloudProviderReconcileLoop creates a new mock instance.
func NewMockCloudProviderReconcileLoop(ctrl *gomock.Controller) *MockCloudProviderReconcileLoop {
	mock := &MockCloudProviderReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockCloudProviderReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudProviderReconcileLoop) EXPECT() *MockCloudProviderReconcileLoopMockRecorder {
	return m.recorder
}

// RunCloudProviderReconciler mocks base method.
func (m *MockCloudProviderReconcileLoop) RunCloudProviderReconciler(ctx context.Context, rec controller.CloudProviderReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunCloudProviderReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCloudProviderReconciler indicates an expected call of RunCloudProviderReconciler.
func (mr *MockCloudProviderReconcileLoopMockRecorder) RunCloudProviderReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCloudProviderReconciler", reflect.TypeOf((*MockCloudProviderReconcileLoop)(nil).RunCloudProviderReconciler), varargs...)
}

// MockCloudResourcesReconciler is a mock of CloudResourcesReconciler interface.
type MockCloudResourcesReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockCloudResourcesReconcilerMockRecorder
}

// MockCloudResourcesReconcilerMockRecorder is the mock recorder for MockCloudResourcesReconciler.
type MockCloudResourcesReconcilerMockRecorder struct {
	mock *MockCloudResourcesReconciler
}

// NewMockCloudResourcesReconciler creates a new mock instance.
func NewMockCloudResourcesReconciler(ctrl *gomock.Controller) *MockCloudResourcesReconciler {
	mock := &MockCloudResourcesReconciler{ctrl: ctrl}
	mock.recorder = &MockCloudResourcesReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudResourcesReconciler) EXPECT() *MockCloudResourcesReconcilerMockRecorder {
	return m.recorder
}

// ReconcileCloudResources mocks base method.
func (m *MockCloudResourcesReconciler) ReconcileCloudResources(obj *v2.CloudResources) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCloudResources", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileCloudResources indicates an expected call of ReconcileCloudResources.
func (mr *MockCloudResourcesReconcilerMockRecorder) ReconcileCloudResources(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCloudResources", reflect.TypeOf((*MockCloudResourcesReconciler)(nil).ReconcileCloudResources), obj)
}

// MockCloudResourcesDeletionReconciler is a mock of CloudResourcesDeletionReconciler interface.
type MockCloudResourcesDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockCloudResourcesDeletionReconcilerMockRecorder
}

// MockCloudResourcesDeletionReconcilerMockRecorder is the mock recorder for MockCloudResourcesDeletionReconciler.
type MockCloudResourcesDeletionReconcilerMockRecorder struct {
	mock *MockCloudResourcesDeletionReconciler
}

// NewMockCloudResourcesDeletionReconciler creates a new mock instance.
func NewMockCloudResourcesDeletionReconciler(ctrl *gomock.Controller) *MockCloudResourcesDeletionReconciler {
	mock := &MockCloudResourcesDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockCloudResourcesDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudResourcesDeletionReconciler) EXPECT() *MockCloudResourcesDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileCloudResourcesDeletion mocks base method.
func (m *MockCloudResourcesDeletionReconciler) ReconcileCloudResourcesDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCloudResourcesDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileCloudResourcesDeletion indicates an expected call of ReconcileCloudResourcesDeletion.
func (mr *MockCloudResourcesDeletionReconcilerMockRecorder) ReconcileCloudResourcesDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCloudResourcesDeletion", reflect.TypeOf((*MockCloudResourcesDeletionReconciler)(nil).ReconcileCloudResourcesDeletion), req)
}

// MockCloudResourcesFinalizer is a mock of CloudResourcesFinalizer interface.
type MockCloudResourcesFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockCloudResourcesFinalizerMockRecorder
}

// MockCloudResourcesFinalizerMockRecorder is the mock recorder for MockCloudResourcesFinalizer.
type MockCloudResourcesFinalizerMockRecorder struct {
	mock *MockCloudResourcesFinalizer
}

// NewMockCloudResourcesFinalizer creates a new mock instance.
func NewMockCloudResourcesFinalizer(ctrl *gomock.Controller) *MockCloudResourcesFinalizer {
	mock := &MockCloudResourcesFinalizer{ctrl: ctrl}
	mock.recorder = &MockCloudResourcesFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudResourcesFinalizer) EXPECT() *MockCloudResourcesFinalizerMockRecorder {
	return m.recorder
}

// CloudResourcesFinalizerName mocks base method.
func (m *MockCloudResourcesFinalizer) CloudResourcesFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudResourcesFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// CloudResourcesFinalizerName indicates an expected call of CloudResourcesFinalizerName.
func (mr *MockCloudResourcesFinalizerMockRecorder) CloudResourcesFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudResourcesFinalizerName", reflect.TypeOf((*MockCloudResourcesFinalizer)(nil).CloudResourcesFinalizerName))
}

// FinalizeCloudResources mocks base method.
func (m *MockCloudResourcesFinalizer) FinalizeCloudResources(obj *v2.CloudResources) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeCloudResources", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeCloudResources indicates an expected call of FinalizeCloudResources.
func (mr *MockCloudResourcesFinalizerMockRecorder) FinalizeCloudResources(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeCloudResources", reflect.TypeOf((*MockCloudResourcesFinalizer)(nil).FinalizeCloudResources), obj)
}

// ReconcileCloudResources mocks base method.
func (m *MockCloudResourcesFinalizer) ReconcileCloudResources(obj *v2.CloudResources) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCloudResources", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileCloudResources indicates an expected call of ReconcileCloudResources.
func (mr *MockCloudResourcesFinalizerMockRecorder) ReconcileCloudResources(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCloudResources", reflect.TypeOf((*MockCloudResourcesFinalizer)(nil).ReconcileCloudResources), obj)
}

// MockCloudResourcesReconcileLoop is a mock of CloudResourcesReconcileLoop interface.
type MockCloudResourcesReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockCloudResourcesReconcileLoopMockRecorder
}

// MockCloudResourcesReconcileLoopMockRecorder is the mock recorder for MockCloudResourcesReconcileLoop.
type MockCloudResourcesReconcileLoopMockRecorder struct {
	mock *MockCloudResourcesReconcileLoop
}

// NewMockCloudResourcesReconcileLoop creates a new mock instance.
func NewMockCloudResourcesReconcileLoop(ctrl *gomock.Controller) *MockCloudResourcesReconcileLoop {
	mock := &MockCloudResourcesReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockCloudResourcesReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudResourcesReconcileLoop) EXPECT() *MockCloudResourcesReconcileLoopMockRecorder {
	return m.recorder
}

// RunCloudResourcesReconciler mocks base method.
func (m *MockCloudResourcesReconcileLoop) RunCloudResourcesReconciler(ctx context.Context, rec controller.CloudResourcesReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunCloudResourcesReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCloudResourcesReconciler indicates an expected call of RunCloudResourcesReconciler.
func (mr *MockCloudResourcesReconcileLoopMockRecorder) RunCloudResourcesReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCloudResourcesReconciler", reflect.TypeOf((*MockCloudResourcesReconcileLoop)(nil).RunCloudResourcesReconciler), varargs...)
}
