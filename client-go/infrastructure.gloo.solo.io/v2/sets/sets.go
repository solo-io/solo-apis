// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v2sets

import (
	infrastructure_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/infrastructure.gloo.solo.io/v2"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type CloudProviderSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*infrastructure_gloo_solo_io_v2.CloudProvider) bool) []*infrastructure_gloo_solo_io_v2.CloudProvider
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*infrastructure_gloo_solo_io_v2.CloudProvider) bool) []*infrastructure_gloo_solo_io_v2.CloudProvider
	// Return the Set as a map of key to resource.
	Map() map[string]*infrastructure_gloo_solo_io_v2.CloudProvider
	// Insert a resource into the set.
	Insert(cloudProvider ...*infrastructure_gloo_solo_io_v2.CloudProvider)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(cloudProviderSet CloudProviderSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(cloudProvider ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(cloudProvider ezkube.ResourceId)
	// Return the union with the provided set
	Union(set CloudProviderSet) CloudProviderSet
	// Return the difference with the provided set
	Difference(set CloudProviderSet) CloudProviderSet
	// Return the intersection with the provided set
	Intersection(set CloudProviderSet) CloudProviderSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*infrastructure_gloo_solo_io_v2.CloudProvider, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another CloudProviderSet
	Delta(newSet CloudProviderSet) sksets.ResourceDelta
	// Create a deep copy of the current CloudProviderSet
	Clone() CloudProviderSet
}

func makeGenericCloudProviderSet(cloudProviderList []*infrastructure_gloo_solo_io_v2.CloudProvider) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range cloudProviderList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type cloudProviderSet struct {
	set sksets.ResourceSet
}

func NewCloudProviderSet(cloudProviderList ...*infrastructure_gloo_solo_io_v2.CloudProvider) CloudProviderSet {
	return &cloudProviderSet{set: makeGenericCloudProviderSet(cloudProviderList)}
}

func NewCloudProviderSetFromList(cloudProviderList *infrastructure_gloo_solo_io_v2.CloudProviderList) CloudProviderSet {
	list := make([]*infrastructure_gloo_solo_io_v2.CloudProvider, 0, len(cloudProviderList.Items))
	for idx := range cloudProviderList.Items {
		list = append(list, &cloudProviderList.Items[idx])
	}
	return &cloudProviderSet{set: makeGenericCloudProviderSet(list)}
}

func (s *cloudProviderSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *cloudProviderSet) List(filterResource ...func(*infrastructure_gloo_solo_io_v2.CloudProvider) bool) []*infrastructure_gloo_solo_io_v2.CloudProvider {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*infrastructure_gloo_solo_io_v2.CloudProvider))
		})
	}

	objs := s.Generic().List(genericFilters...)
	cloudProviderList := make([]*infrastructure_gloo_solo_io_v2.CloudProvider, 0, len(objs))
	for _, obj := range objs {
		cloudProviderList = append(cloudProviderList, obj.(*infrastructure_gloo_solo_io_v2.CloudProvider))
	}
	return cloudProviderList
}

func (s *cloudProviderSet) UnsortedList(filterResource ...func(*infrastructure_gloo_solo_io_v2.CloudProvider) bool) []*infrastructure_gloo_solo_io_v2.CloudProvider {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*infrastructure_gloo_solo_io_v2.CloudProvider))
		})
	}

	var cloudProviderList []*infrastructure_gloo_solo_io_v2.CloudProvider
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		cloudProviderList = append(cloudProviderList, obj.(*infrastructure_gloo_solo_io_v2.CloudProvider))
	}
	return cloudProviderList
}

func (s *cloudProviderSet) Map() map[string]*infrastructure_gloo_solo_io_v2.CloudProvider {
	if s == nil {
		return nil
	}

	newMap := map[string]*infrastructure_gloo_solo_io_v2.CloudProvider{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*infrastructure_gloo_solo_io_v2.CloudProvider)
	}
	return newMap
}

func (s *cloudProviderSet) Insert(
	cloudProviderList ...*infrastructure_gloo_solo_io_v2.CloudProvider,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range cloudProviderList {
		s.Generic().Insert(obj)
	}
}

func (s *cloudProviderSet) Has(cloudProvider ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(cloudProvider)
}

func (s *cloudProviderSet) Equal(
	cloudProviderSet CloudProviderSet,
) bool {
	if s == nil {
		return cloudProviderSet == nil
	}
	return s.Generic().Equal(cloudProviderSet.Generic())
}

func (s *cloudProviderSet) Delete(CloudProvider ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(CloudProvider)
}

func (s *cloudProviderSet) Union(set CloudProviderSet) CloudProviderSet {
	if s == nil {
		return set
	}
	return NewCloudProviderSet(append(s.List(), set.List()...)...)
}

func (s *cloudProviderSet) Difference(set CloudProviderSet) CloudProviderSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &cloudProviderSet{set: newSet}
}

func (s *cloudProviderSet) Intersection(set CloudProviderSet) CloudProviderSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var cloudProviderList []*infrastructure_gloo_solo_io_v2.CloudProvider
	for _, obj := range newSet.List() {
		cloudProviderList = append(cloudProviderList, obj.(*infrastructure_gloo_solo_io_v2.CloudProvider))
	}
	return NewCloudProviderSet(cloudProviderList...)
}

func (s *cloudProviderSet) Find(id ezkube.ResourceId) (*infrastructure_gloo_solo_io_v2.CloudProvider, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find CloudProvider %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&infrastructure_gloo_solo_io_v2.CloudProvider{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*infrastructure_gloo_solo_io_v2.CloudProvider), nil
}

func (s *cloudProviderSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *cloudProviderSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *cloudProviderSet) Delta(newSet CloudProviderSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *cloudProviderSet) Clone() CloudProviderSet {
	if s == nil {
		return nil
	}
	return &cloudProviderSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type CloudResourcesSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*infrastructure_gloo_solo_io_v2.CloudResources) bool) []*infrastructure_gloo_solo_io_v2.CloudResources
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*infrastructure_gloo_solo_io_v2.CloudResources) bool) []*infrastructure_gloo_solo_io_v2.CloudResources
	// Return the Set as a map of key to resource.
	Map() map[string]*infrastructure_gloo_solo_io_v2.CloudResources
	// Insert a resource into the set.
	Insert(cloudResources ...*infrastructure_gloo_solo_io_v2.CloudResources)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(cloudResourcesSet CloudResourcesSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(cloudResources ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(cloudResources ezkube.ResourceId)
	// Return the union with the provided set
	Union(set CloudResourcesSet) CloudResourcesSet
	// Return the difference with the provided set
	Difference(set CloudResourcesSet) CloudResourcesSet
	// Return the intersection with the provided set
	Intersection(set CloudResourcesSet) CloudResourcesSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*infrastructure_gloo_solo_io_v2.CloudResources, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another CloudResourcesSet
	Delta(newSet CloudResourcesSet) sksets.ResourceDelta
	// Create a deep copy of the current CloudResourcesSet
	Clone() CloudResourcesSet
}

func makeGenericCloudResourcesSet(cloudResourcesList []*infrastructure_gloo_solo_io_v2.CloudResources) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range cloudResourcesList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type cloudResourcesSet struct {
	set sksets.ResourceSet
}

func NewCloudResourcesSet(cloudResourcesList ...*infrastructure_gloo_solo_io_v2.CloudResources) CloudResourcesSet {
	return &cloudResourcesSet{set: makeGenericCloudResourcesSet(cloudResourcesList)}
}

func NewCloudResourcesSetFromList(cloudResourcesList *infrastructure_gloo_solo_io_v2.CloudResourcesList) CloudResourcesSet {
	list := make([]*infrastructure_gloo_solo_io_v2.CloudResources, 0, len(cloudResourcesList.Items))
	for idx := range cloudResourcesList.Items {
		list = append(list, &cloudResourcesList.Items[idx])
	}
	return &cloudResourcesSet{set: makeGenericCloudResourcesSet(list)}
}

func (s *cloudResourcesSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *cloudResourcesSet) List(filterResource ...func(*infrastructure_gloo_solo_io_v2.CloudResources) bool) []*infrastructure_gloo_solo_io_v2.CloudResources {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*infrastructure_gloo_solo_io_v2.CloudResources))
		})
	}

	objs := s.Generic().List(genericFilters...)
	cloudResourcesList := make([]*infrastructure_gloo_solo_io_v2.CloudResources, 0, len(objs))
	for _, obj := range objs {
		cloudResourcesList = append(cloudResourcesList, obj.(*infrastructure_gloo_solo_io_v2.CloudResources))
	}
	return cloudResourcesList
}

func (s *cloudResourcesSet) UnsortedList(filterResource ...func(*infrastructure_gloo_solo_io_v2.CloudResources) bool) []*infrastructure_gloo_solo_io_v2.CloudResources {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*infrastructure_gloo_solo_io_v2.CloudResources))
		})
	}

	var cloudResourcesList []*infrastructure_gloo_solo_io_v2.CloudResources
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		cloudResourcesList = append(cloudResourcesList, obj.(*infrastructure_gloo_solo_io_v2.CloudResources))
	}
	return cloudResourcesList
}

func (s *cloudResourcesSet) Map() map[string]*infrastructure_gloo_solo_io_v2.CloudResources {
	if s == nil {
		return nil
	}

	newMap := map[string]*infrastructure_gloo_solo_io_v2.CloudResources{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*infrastructure_gloo_solo_io_v2.CloudResources)
	}
	return newMap
}

func (s *cloudResourcesSet) Insert(
	cloudResourcesList ...*infrastructure_gloo_solo_io_v2.CloudResources,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range cloudResourcesList {
		s.Generic().Insert(obj)
	}
}

func (s *cloudResourcesSet) Has(cloudResources ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(cloudResources)
}

func (s *cloudResourcesSet) Equal(
	cloudResourcesSet CloudResourcesSet,
) bool {
	if s == nil {
		return cloudResourcesSet == nil
	}
	return s.Generic().Equal(cloudResourcesSet.Generic())
}

func (s *cloudResourcesSet) Delete(CloudResources ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(CloudResources)
}

func (s *cloudResourcesSet) Union(set CloudResourcesSet) CloudResourcesSet {
	if s == nil {
		return set
	}
	return NewCloudResourcesSet(append(s.List(), set.List()...)...)
}

func (s *cloudResourcesSet) Difference(set CloudResourcesSet) CloudResourcesSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &cloudResourcesSet{set: newSet}
}

func (s *cloudResourcesSet) Intersection(set CloudResourcesSet) CloudResourcesSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var cloudResourcesList []*infrastructure_gloo_solo_io_v2.CloudResources
	for _, obj := range newSet.List() {
		cloudResourcesList = append(cloudResourcesList, obj.(*infrastructure_gloo_solo_io_v2.CloudResources))
	}
	return NewCloudResourcesSet(cloudResourcesList...)
}

func (s *cloudResourcesSet) Find(id ezkube.ResourceId) (*infrastructure_gloo_solo_io_v2.CloudResources, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find CloudResources %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&infrastructure_gloo_solo_io_v2.CloudResources{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*infrastructure_gloo_solo_io_v2.CloudResources), nil
}

func (s *cloudResourcesSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *cloudResourcesSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *cloudResourcesSet) Delta(newSet CloudResourcesSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *cloudResourcesSet) Clone() CloudResourcesSet {
	if s == nil {
		return nil
	}
	return &cloudResourcesSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}
