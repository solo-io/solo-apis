// Code generated by MockGen. DO NOT EDIT.
// Source: ./sets.go
//
// Generated by this command:
//
//	mockgen -source ./sets.go -destination mocks/sets.go
//

// Package mock_v2sets is a generated GoMock package.
package mock_v2sets

import (
	reflect "reflect"

	sets "github.com/solo-io/skv2/contrib/pkg/sets"
	ezkube "github.com/solo-io/skv2/pkg/ezkube"
	gomock "go.uber.org/mock/gomock"
	sets0 "k8s.io/apimachinery/pkg/util/sets"

	v2 "github.com/solo-io/solo-apis/client-go/infrastructure.gloo.solo.io/v2"
	v2sets "github.com/solo-io/solo-apis/client-go/infrastructure.gloo.solo.io/v2/sets"
)

// MockCloudProviderSet is a mock of CloudProviderSet interface.
type MockCloudProviderSet struct {
	ctrl     *gomock.Controller
	recorder *MockCloudProviderSetMockRecorder
}

// MockCloudProviderSetMockRecorder is the mock recorder for MockCloudProviderSet.
type MockCloudProviderSetMockRecorder struct {
	mock *MockCloudProviderSet
}

// NewMockCloudProviderSet creates a new mock instance.
func NewMockCloudProviderSet(ctrl *gomock.Controller) *MockCloudProviderSet {
	mock := &MockCloudProviderSet{ctrl: ctrl}
	mock.recorder = &MockCloudProviderSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudProviderSet) EXPECT() *MockCloudProviderSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockCloudProviderSet) Clone() v2sets.CloudProviderSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.CloudProviderSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockCloudProviderSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockCloudProviderSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockCloudProviderSet) Delete(cloudProvider ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", cloudProvider)
}

// Delete indicates an expected call of Delete.
func (mr *MockCloudProviderSetMockRecorder) Delete(cloudProvider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCloudProviderSet)(nil).Delete), cloudProvider)
}

// Delta mocks base method.
func (m *MockCloudProviderSet) Delta(newSet v2sets.CloudProviderSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockCloudProviderSetMockRecorder) Delta(newSet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockCloudProviderSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockCloudProviderSet) Difference(set v2sets.CloudProviderSet) v2sets.CloudProviderSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.CloudProviderSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockCloudProviderSetMockRecorder) Difference(set any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockCloudProviderSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockCloudProviderSet) Equal(cloudProviderSet v2sets.CloudProviderSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", cloudProviderSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockCloudProviderSetMockRecorder) Equal(cloudProviderSet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockCloudProviderSet)(nil).Equal), cloudProviderSet)
}

// Find mocks base method.
func (m *MockCloudProviderSet) Find(id ezkube.ResourceId) (*v2.CloudProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.CloudProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCloudProviderSetMockRecorder) Find(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCloudProviderSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockCloudProviderSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockCloudProviderSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockCloudProviderSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockCloudProviderSet) Has(cloudProvider ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", cloudProvider)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockCloudProviderSetMockRecorder) Has(cloudProvider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockCloudProviderSet)(nil).Has), cloudProvider)
}

// Insert mocks base method.
func (m *MockCloudProviderSet) Insert(cloudProvider ...*v2.CloudProvider) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range cloudProvider {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockCloudProviderSetMockRecorder) Insert(cloudProvider ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCloudProviderSet)(nil).Insert), cloudProvider...)
}

// Intersection mocks base method.
func (m *MockCloudProviderSet) Intersection(set v2sets.CloudProviderSet) v2sets.CloudProviderSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.CloudProviderSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockCloudProviderSetMockRecorder) Intersection(set any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockCloudProviderSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockCloudProviderSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockCloudProviderSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockCloudProviderSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockCloudProviderSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockCloudProviderSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockCloudProviderSet)(nil).Length))
}

// List mocks base method.
func (m *MockCloudProviderSet) List(filterResource ...func(*v2.CloudProvider) bool) []*v2.CloudProvider {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.CloudProvider)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockCloudProviderSetMockRecorder) List(filterResource ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCloudProviderSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockCloudProviderSet) Map() map[string]*v2.CloudProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.CloudProvider)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockCloudProviderSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockCloudProviderSet)(nil).Map))
}

// Union mocks base method.
func (m *MockCloudProviderSet) Union(set v2sets.CloudProviderSet) v2sets.CloudProviderSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.CloudProviderSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockCloudProviderSetMockRecorder) Union(set any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockCloudProviderSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockCloudProviderSet) UnsortedList(filterResource ...func(*v2.CloudProvider) bool) []*v2.CloudProvider {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.CloudProvider)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockCloudProviderSetMockRecorder) UnsortedList(filterResource ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockCloudProviderSet)(nil).UnsortedList), filterResource...)
}

// MockCloudResourcesSet is a mock of CloudResourcesSet interface.
type MockCloudResourcesSet struct {
	ctrl     *gomock.Controller
	recorder *MockCloudResourcesSetMockRecorder
}

// MockCloudResourcesSetMockRecorder is the mock recorder for MockCloudResourcesSet.
type MockCloudResourcesSetMockRecorder struct {
	mock *MockCloudResourcesSet
}

// NewMockCloudResourcesSet creates a new mock instance.
func NewMockCloudResourcesSet(ctrl *gomock.Controller) *MockCloudResourcesSet {
	mock := &MockCloudResourcesSet{ctrl: ctrl}
	mock.recorder = &MockCloudResourcesSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudResourcesSet) EXPECT() *MockCloudResourcesSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockCloudResourcesSet) Clone() v2sets.CloudResourcesSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.CloudResourcesSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockCloudResourcesSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockCloudResourcesSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockCloudResourcesSet) Delete(cloudResources ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", cloudResources)
}

// Delete indicates an expected call of Delete.
func (mr *MockCloudResourcesSetMockRecorder) Delete(cloudResources any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCloudResourcesSet)(nil).Delete), cloudResources)
}

// Delta mocks base method.
func (m *MockCloudResourcesSet) Delta(newSet v2sets.CloudResourcesSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockCloudResourcesSetMockRecorder) Delta(newSet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockCloudResourcesSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockCloudResourcesSet) Difference(set v2sets.CloudResourcesSet) v2sets.CloudResourcesSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.CloudResourcesSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockCloudResourcesSetMockRecorder) Difference(set any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockCloudResourcesSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockCloudResourcesSet) Equal(cloudResourcesSet v2sets.CloudResourcesSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", cloudResourcesSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockCloudResourcesSetMockRecorder) Equal(cloudResourcesSet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockCloudResourcesSet)(nil).Equal), cloudResourcesSet)
}

// Find mocks base method.
func (m *MockCloudResourcesSet) Find(id ezkube.ResourceId) (*v2.CloudResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.CloudResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCloudResourcesSetMockRecorder) Find(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCloudResourcesSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockCloudResourcesSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockCloudResourcesSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockCloudResourcesSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockCloudResourcesSet) Has(cloudResources ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", cloudResources)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockCloudResourcesSetMockRecorder) Has(cloudResources any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockCloudResourcesSet)(nil).Has), cloudResources)
}

// Insert mocks base method.
func (m *MockCloudResourcesSet) Insert(cloudResources ...*v2.CloudResources) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range cloudResources {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockCloudResourcesSetMockRecorder) Insert(cloudResources ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCloudResourcesSet)(nil).Insert), cloudResources...)
}

// Intersection mocks base method.
func (m *MockCloudResourcesSet) Intersection(set v2sets.CloudResourcesSet) v2sets.CloudResourcesSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.CloudResourcesSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockCloudResourcesSetMockRecorder) Intersection(set any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockCloudResourcesSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockCloudResourcesSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockCloudResourcesSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockCloudResourcesSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockCloudResourcesSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockCloudResourcesSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockCloudResourcesSet)(nil).Length))
}

// List mocks base method.
func (m *MockCloudResourcesSet) List(filterResource ...func(*v2.CloudResources) bool) []*v2.CloudResources {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.CloudResources)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockCloudResourcesSetMockRecorder) List(filterResource ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCloudResourcesSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockCloudResourcesSet) Map() map[string]*v2.CloudResources {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.CloudResources)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockCloudResourcesSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockCloudResourcesSet)(nil).Map))
}

// Union mocks base method.
func (m *MockCloudResourcesSet) Union(set v2sets.CloudResourcesSet) v2sets.CloudResourcesSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.CloudResourcesSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockCloudResourcesSetMockRecorder) Union(set any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockCloudResourcesSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockCloudResourcesSet) UnsortedList(filterResource ...func(*v2.CloudResources) bool) []*v2.CloudResources {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.CloudResources)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockCloudResourcesSetMockRecorder) UnsortedList(filterResource ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockCloudResourcesSet)(nil).UnsortedList), filterResource...)
}
