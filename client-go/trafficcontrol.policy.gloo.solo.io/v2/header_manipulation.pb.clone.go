// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/policy/v2/trafficcontrol/header_manipulation.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *HeaderManipulationPolicySpec) Clone() proto.Message {
	var target *HeaderManipulationPolicySpec
	if m == nil {
		return target
	}
	target = &HeaderManipulationPolicySpec{}

	if m.GetApplyToRoutes() != nil {
		target.ApplyToRoutes = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.RouteSelector, len(m.GetApplyToRoutes()))
		for idx, v := range m.GetApplyToRoutes() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ApplyToRoutes[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.RouteSelector)
			} else {
				target.ApplyToRoutes[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.RouteSelector)
			}

		}
	}

	if h, ok := interface{}(m.GetConfig()).(clone.Cloner); ok {
		target.Config = h.Clone().(*HeaderManipulationPolicySpec_Config)
	} else {
		target.Config = proto.Clone(m.GetConfig()).(*HeaderManipulationPolicySpec_Config)
	}

	if m.GetApplyToRouteDestinations() != nil {
		target.ApplyToRouteDestinations = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.RouteDestinationSelector, len(m.GetApplyToRouteDestinations()))
		for idx, v := range m.GetApplyToRouteDestinations() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ApplyToRouteDestinations[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.RouteDestinationSelector)
			} else {
				target.ApplyToRouteDestinations[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.RouteDestinationSelector)
			}

		}
	}

	return target
}

// Clone function
func (m *HeaderManipulationPolicyStatus) Clone() proto.Message {
	var target *HeaderManipulationPolicyStatus
	if m == nil {
		return target
	}
	target = &HeaderManipulationPolicyStatus{}

	if h, ok := interface{}(m.GetCommon()).(clone.Cloner); ok {
		target.Common = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	} else {
		target.Common = proto.Clone(m.GetCommon()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	}

	target.NumSelectedRoutes = m.GetNumSelectedRoutes()

	return target
}

// Clone function
func (m *HeaderManipulationPolicyReport) Clone() proto.Message {
	var target *HeaderManipulationPolicyReport
	if m == nil {
		return target
	}
	target = &HeaderManipulationPolicyReport{}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			}

		}
	}

	if m.GetSelectedRoutes() != nil {
		target.SelectedRoutes = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.RouteReference, len(m.GetSelectedRoutes()))
		for idx, v := range m.GetSelectedRoutes() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SelectedRoutes[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.RouteReference)
			} else {
				target.SelectedRoutes[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.RouteReference)
			}

		}
	}

	return target
}

// Clone function
func (m *HeaderManipulationPolicySpec_Config) Clone() proto.Message {
	var target *HeaderManipulationPolicySpec_Config
	if m == nil {
		return target
	}
	target = &HeaderManipulationPolicySpec_Config{}

	if m.GetRemoveResponseHeaders() != nil {
		target.RemoveResponseHeaders = make([]string, len(m.GetRemoveResponseHeaders()))
		for idx, v := range m.GetRemoveResponseHeaders() {

			target.RemoveResponseHeaders[idx] = v

		}
	}

	if m.GetAppendResponseHeaders() != nil {
		target.AppendResponseHeaders = make(map[string]string, len(m.GetAppendResponseHeaders()))
		for k, v := range m.GetAppendResponseHeaders() {

			target.AppendResponseHeaders[k] = v

		}
	}

	if m.GetRemoveRequestHeaders() != nil {
		target.RemoveRequestHeaders = make([]string, len(m.GetRemoveRequestHeaders()))
		for idx, v := range m.GetRemoveRequestHeaders() {

			target.RemoveRequestHeaders[idx] = v

		}
	}

	if m.GetAppendRequestHeaders() != nil {
		target.AppendRequestHeaders = make(map[string]string, len(m.GetAppendRequestHeaders()))
		for k, v := range m.GetAppendRequestHeaders() {

			target.AppendRequestHeaders[k] = v

		}
	}

	return target
}
