// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v2 is a generated GoMock package.
package mock_v2

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v2 "github.com/solo-io/solo-apis/client-go/trafficcontrol.policy.gloo.solo.io/v2"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v2.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// HTTPBufferPolicies mocks base method.
func (m *MockClientset) HTTPBufferPolicies() v2.HTTPBufferPolicyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPBufferPolicies")
	ret0, _ := ret[0].(v2.HTTPBufferPolicyClient)
	return ret0
}

// HTTPBufferPolicies indicates an expected call of HTTPBufferPolicies.
func (mr *MockClientsetMockRecorder) HTTPBufferPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPBufferPolicies", reflect.TypeOf((*MockClientset)(nil).HTTPBufferPolicies))
}

// HeaderManipulationPolicies mocks base method.
func (m *MockClientset) HeaderManipulationPolicies() v2.HeaderManipulationPolicyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeaderManipulationPolicies")
	ret0, _ := ret[0].(v2.HeaderManipulationPolicyClient)
	return ret0
}

// HeaderManipulationPolicies indicates an expected call of HeaderManipulationPolicies.
func (mr *MockClientsetMockRecorder) HeaderManipulationPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeaderManipulationPolicies", reflect.TypeOf((*MockClientset)(nil).HeaderManipulationPolicies))
}

// MirrorPolicies mocks base method.
func (m *MockClientset) MirrorPolicies() v2.MirrorPolicyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MirrorPolicies")
	ret0, _ := ret[0].(v2.MirrorPolicyClient)
	return ret0
}

// MirrorPolicies indicates an expected call of MirrorPolicies.
func (mr *MockClientsetMockRecorder) MirrorPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MirrorPolicies", reflect.TypeOf((*MockClientset)(nil).MirrorPolicies))
}

// ProxyProtocolPolicies mocks base method.
func (m *MockClientset) ProxyProtocolPolicies() v2.ProxyProtocolPolicyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProxyProtocolPolicies")
	ret0, _ := ret[0].(v2.ProxyProtocolPolicyClient)
	return ret0
}

// ProxyProtocolPolicies indicates an expected call of ProxyProtocolPolicies.
func (mr *MockClientsetMockRecorder) ProxyProtocolPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyProtocolPolicies", reflect.TypeOf((*MockClientset)(nil).ProxyProtocolPolicies))
}

// RateLimitClientConfigs mocks base method.
func (m *MockClientset) RateLimitClientConfigs() v2.RateLimitClientConfigClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RateLimitClientConfigs")
	ret0, _ := ret[0].(v2.RateLimitClientConfigClient)
	return ret0
}

// RateLimitClientConfigs indicates an expected call of RateLimitClientConfigs.
func (mr *MockClientsetMockRecorder) RateLimitClientConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RateLimitClientConfigs", reflect.TypeOf((*MockClientset)(nil).RateLimitClientConfigs))
}

// RateLimitPolicies mocks base method.
func (m *MockClientset) RateLimitPolicies() v2.RateLimitPolicyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RateLimitPolicies")
	ret0, _ := ret[0].(v2.RateLimitPolicyClient)
	return ret0
}

// RateLimitPolicies indicates an expected call of RateLimitPolicies.
func (mr *MockClientsetMockRecorder) RateLimitPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RateLimitPolicies", reflect.TypeOf((*MockClientset)(nil).RateLimitPolicies))
}

// TransformationPolicies mocks base method.
func (m *MockClientset) TransformationPolicies() v2.TransformationPolicyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransformationPolicies")
	ret0, _ := ret[0].(v2.TransformationPolicyClient)
	return ret0
}

// TransformationPolicies indicates an expected call of TransformationPolicies.
func (mr *MockClientsetMockRecorder) TransformationPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransformationPolicies", reflect.TypeOf((*MockClientset)(nil).TransformationPolicies))
}

// MockMirrorPolicyReader is a mock of MirrorPolicyReader interface.
type MockMirrorPolicyReader struct {
	ctrl     *gomock.Controller
	recorder *MockMirrorPolicyReaderMockRecorder
}

// MockMirrorPolicyReaderMockRecorder is the mock recorder for MockMirrorPolicyReader.
type MockMirrorPolicyReaderMockRecorder struct {
	mock *MockMirrorPolicyReader
}

// NewMockMirrorPolicyReader creates a new mock instance.
func NewMockMirrorPolicyReader(ctrl *gomock.Controller) *MockMirrorPolicyReader {
	mock := &MockMirrorPolicyReader{ctrl: ctrl}
	mock.recorder = &MockMirrorPolicyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMirrorPolicyReader) EXPECT() *MockMirrorPolicyReaderMockRecorder {
	return m.recorder
}

// GetMirrorPolicy mocks base method.
func (m *MockMirrorPolicyReader) GetMirrorPolicy(ctx context.Context, key client.ObjectKey) (*v2.MirrorPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMirrorPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.MirrorPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMirrorPolicy indicates an expected call of GetMirrorPolicy.
func (mr *MockMirrorPolicyReaderMockRecorder) GetMirrorPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMirrorPolicy", reflect.TypeOf((*MockMirrorPolicyReader)(nil).GetMirrorPolicy), ctx, key)
}

// ListMirrorPolicy mocks base method.
func (m *MockMirrorPolicyReader) ListMirrorPolicy(ctx context.Context, opts ...client.ListOption) (*v2.MirrorPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMirrorPolicy", varargs...)
	ret0, _ := ret[0].(*v2.MirrorPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMirrorPolicy indicates an expected call of ListMirrorPolicy.
func (mr *MockMirrorPolicyReaderMockRecorder) ListMirrorPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMirrorPolicy", reflect.TypeOf((*MockMirrorPolicyReader)(nil).ListMirrorPolicy), varargs...)
}

// MockMirrorPolicyWriter is a mock of MirrorPolicyWriter interface.
type MockMirrorPolicyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMirrorPolicyWriterMockRecorder
}

// MockMirrorPolicyWriterMockRecorder is the mock recorder for MockMirrorPolicyWriter.
type MockMirrorPolicyWriterMockRecorder struct {
	mock *MockMirrorPolicyWriter
}

// NewMockMirrorPolicyWriter creates a new mock instance.
func NewMockMirrorPolicyWriter(ctrl *gomock.Controller) *MockMirrorPolicyWriter {
	mock := &MockMirrorPolicyWriter{ctrl: ctrl}
	mock.recorder = &MockMirrorPolicyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMirrorPolicyWriter) EXPECT() *MockMirrorPolicyWriterMockRecorder {
	return m.recorder
}

// CreateMirrorPolicy mocks base method.
func (m *MockMirrorPolicyWriter) CreateMirrorPolicy(ctx context.Context, obj *v2.MirrorPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMirrorPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMirrorPolicy indicates an expected call of CreateMirrorPolicy.
func (mr *MockMirrorPolicyWriterMockRecorder) CreateMirrorPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMirrorPolicy", reflect.TypeOf((*MockMirrorPolicyWriter)(nil).CreateMirrorPolicy), varargs...)
}

// DeleteAllOfMirrorPolicy mocks base method.
func (m *MockMirrorPolicyWriter) DeleteAllOfMirrorPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMirrorPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMirrorPolicy indicates an expected call of DeleteAllOfMirrorPolicy.
func (mr *MockMirrorPolicyWriterMockRecorder) DeleteAllOfMirrorPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMirrorPolicy", reflect.TypeOf((*MockMirrorPolicyWriter)(nil).DeleteAllOfMirrorPolicy), varargs...)
}

// DeleteMirrorPolicy mocks base method.
func (m *MockMirrorPolicyWriter) DeleteMirrorPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMirrorPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMirrorPolicy indicates an expected call of DeleteMirrorPolicy.
func (mr *MockMirrorPolicyWriterMockRecorder) DeleteMirrorPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMirrorPolicy", reflect.TypeOf((*MockMirrorPolicyWriter)(nil).DeleteMirrorPolicy), varargs...)
}

// PatchMirrorPolicy mocks base method.
func (m *MockMirrorPolicyWriter) PatchMirrorPolicy(ctx context.Context, obj *v2.MirrorPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMirrorPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMirrorPolicy indicates an expected call of PatchMirrorPolicy.
func (mr *MockMirrorPolicyWriterMockRecorder) PatchMirrorPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMirrorPolicy", reflect.TypeOf((*MockMirrorPolicyWriter)(nil).PatchMirrorPolicy), varargs...)
}

// UpdateMirrorPolicy mocks base method.
func (m *MockMirrorPolicyWriter) UpdateMirrorPolicy(ctx context.Context, obj *v2.MirrorPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMirrorPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMirrorPolicy indicates an expected call of UpdateMirrorPolicy.
func (mr *MockMirrorPolicyWriterMockRecorder) UpdateMirrorPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMirrorPolicy", reflect.TypeOf((*MockMirrorPolicyWriter)(nil).UpdateMirrorPolicy), varargs...)
}

// UpsertMirrorPolicy mocks base method.
func (m *MockMirrorPolicyWriter) UpsertMirrorPolicy(ctx context.Context, obj *v2.MirrorPolicy, transitionFuncs ...v2.MirrorPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMirrorPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMirrorPolicy indicates an expected call of UpsertMirrorPolicy.
func (mr *MockMirrorPolicyWriterMockRecorder) UpsertMirrorPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMirrorPolicy", reflect.TypeOf((*MockMirrorPolicyWriter)(nil).UpsertMirrorPolicy), varargs...)
}

// MockMirrorPolicyStatusWriter is a mock of MirrorPolicyStatusWriter interface.
type MockMirrorPolicyStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMirrorPolicyStatusWriterMockRecorder
}

// MockMirrorPolicyStatusWriterMockRecorder is the mock recorder for MockMirrorPolicyStatusWriter.
type MockMirrorPolicyStatusWriterMockRecorder struct {
	mock *MockMirrorPolicyStatusWriter
}

// NewMockMirrorPolicyStatusWriter creates a new mock instance.
func NewMockMirrorPolicyStatusWriter(ctrl *gomock.Controller) *MockMirrorPolicyStatusWriter {
	mock := &MockMirrorPolicyStatusWriter{ctrl: ctrl}
	mock.recorder = &MockMirrorPolicyStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMirrorPolicyStatusWriter) EXPECT() *MockMirrorPolicyStatusWriterMockRecorder {
	return m.recorder
}

// PatchMirrorPolicyStatus mocks base method.
func (m *MockMirrorPolicyStatusWriter) PatchMirrorPolicyStatus(ctx context.Context, obj *v2.MirrorPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMirrorPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMirrorPolicyStatus indicates an expected call of PatchMirrorPolicyStatus.
func (mr *MockMirrorPolicyStatusWriterMockRecorder) PatchMirrorPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMirrorPolicyStatus", reflect.TypeOf((*MockMirrorPolicyStatusWriter)(nil).PatchMirrorPolicyStatus), varargs...)
}

// UpdateMirrorPolicyStatus mocks base method.
func (m *MockMirrorPolicyStatusWriter) UpdateMirrorPolicyStatus(ctx context.Context, obj *v2.MirrorPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMirrorPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMirrorPolicyStatus indicates an expected call of UpdateMirrorPolicyStatus.
func (mr *MockMirrorPolicyStatusWriterMockRecorder) UpdateMirrorPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMirrorPolicyStatus", reflect.TypeOf((*MockMirrorPolicyStatusWriter)(nil).UpdateMirrorPolicyStatus), varargs...)
}

// MockMirrorPolicyClient is a mock of MirrorPolicyClient interface.
type MockMirrorPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMirrorPolicyClientMockRecorder
}

// MockMirrorPolicyClientMockRecorder is the mock recorder for MockMirrorPolicyClient.
type MockMirrorPolicyClientMockRecorder struct {
	mock *MockMirrorPolicyClient
}

// NewMockMirrorPolicyClient creates a new mock instance.
func NewMockMirrorPolicyClient(ctrl *gomock.Controller) *MockMirrorPolicyClient {
	mock := &MockMirrorPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMirrorPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMirrorPolicyClient) EXPECT() *MockMirrorPolicyClientMockRecorder {
	return m.recorder
}

// CreateMirrorPolicy mocks base method.
func (m *MockMirrorPolicyClient) CreateMirrorPolicy(ctx context.Context, obj *v2.MirrorPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMirrorPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMirrorPolicy indicates an expected call of CreateMirrorPolicy.
func (mr *MockMirrorPolicyClientMockRecorder) CreateMirrorPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMirrorPolicy", reflect.TypeOf((*MockMirrorPolicyClient)(nil).CreateMirrorPolicy), varargs...)
}

// DeleteAllOfMirrorPolicy mocks base method.
func (m *MockMirrorPolicyClient) DeleteAllOfMirrorPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMirrorPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMirrorPolicy indicates an expected call of DeleteAllOfMirrorPolicy.
func (mr *MockMirrorPolicyClientMockRecorder) DeleteAllOfMirrorPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMirrorPolicy", reflect.TypeOf((*MockMirrorPolicyClient)(nil).DeleteAllOfMirrorPolicy), varargs...)
}

// DeleteMirrorPolicy mocks base method.
func (m *MockMirrorPolicyClient) DeleteMirrorPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMirrorPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMirrorPolicy indicates an expected call of DeleteMirrorPolicy.
func (mr *MockMirrorPolicyClientMockRecorder) DeleteMirrorPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMirrorPolicy", reflect.TypeOf((*MockMirrorPolicyClient)(nil).DeleteMirrorPolicy), varargs...)
}

// GetMirrorPolicy mocks base method.
func (m *MockMirrorPolicyClient) GetMirrorPolicy(ctx context.Context, key client.ObjectKey) (*v2.MirrorPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMirrorPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.MirrorPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMirrorPolicy indicates an expected call of GetMirrorPolicy.
func (mr *MockMirrorPolicyClientMockRecorder) GetMirrorPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMirrorPolicy", reflect.TypeOf((*MockMirrorPolicyClient)(nil).GetMirrorPolicy), ctx, key)
}

// ListMirrorPolicy mocks base method.
func (m *MockMirrorPolicyClient) ListMirrorPolicy(ctx context.Context, opts ...client.ListOption) (*v2.MirrorPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMirrorPolicy", varargs...)
	ret0, _ := ret[0].(*v2.MirrorPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMirrorPolicy indicates an expected call of ListMirrorPolicy.
func (mr *MockMirrorPolicyClientMockRecorder) ListMirrorPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMirrorPolicy", reflect.TypeOf((*MockMirrorPolicyClient)(nil).ListMirrorPolicy), varargs...)
}

// PatchMirrorPolicy mocks base method.
func (m *MockMirrorPolicyClient) PatchMirrorPolicy(ctx context.Context, obj *v2.MirrorPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMirrorPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMirrorPolicy indicates an expected call of PatchMirrorPolicy.
func (mr *MockMirrorPolicyClientMockRecorder) PatchMirrorPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMirrorPolicy", reflect.TypeOf((*MockMirrorPolicyClient)(nil).PatchMirrorPolicy), varargs...)
}

// PatchMirrorPolicyStatus mocks base method.
func (m *MockMirrorPolicyClient) PatchMirrorPolicyStatus(ctx context.Context, obj *v2.MirrorPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMirrorPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMirrorPolicyStatus indicates an expected call of PatchMirrorPolicyStatus.
func (mr *MockMirrorPolicyClientMockRecorder) PatchMirrorPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMirrorPolicyStatus", reflect.TypeOf((*MockMirrorPolicyClient)(nil).PatchMirrorPolicyStatus), varargs...)
}

// UpdateMirrorPolicy mocks base method.
func (m *MockMirrorPolicyClient) UpdateMirrorPolicy(ctx context.Context, obj *v2.MirrorPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMirrorPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMirrorPolicy indicates an expected call of UpdateMirrorPolicy.
func (mr *MockMirrorPolicyClientMockRecorder) UpdateMirrorPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMirrorPolicy", reflect.TypeOf((*MockMirrorPolicyClient)(nil).UpdateMirrorPolicy), varargs...)
}

// UpdateMirrorPolicyStatus mocks base method.
func (m *MockMirrorPolicyClient) UpdateMirrorPolicyStatus(ctx context.Context, obj *v2.MirrorPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMirrorPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMirrorPolicyStatus indicates an expected call of UpdateMirrorPolicyStatus.
func (mr *MockMirrorPolicyClientMockRecorder) UpdateMirrorPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMirrorPolicyStatus", reflect.TypeOf((*MockMirrorPolicyClient)(nil).UpdateMirrorPolicyStatus), varargs...)
}

// UpsertMirrorPolicy mocks base method.
func (m *MockMirrorPolicyClient) UpsertMirrorPolicy(ctx context.Context, obj *v2.MirrorPolicy, transitionFuncs ...v2.MirrorPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMirrorPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMirrorPolicy indicates an expected call of UpsertMirrorPolicy.
func (mr *MockMirrorPolicyClientMockRecorder) UpsertMirrorPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMirrorPolicy", reflect.TypeOf((*MockMirrorPolicyClient)(nil).UpsertMirrorPolicy), varargs...)
}

// MockMulticlusterMirrorPolicyClient is a mock of MulticlusterMirrorPolicyClient interface.
type MockMulticlusterMirrorPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMirrorPolicyClientMockRecorder
}

// MockMulticlusterMirrorPolicyClientMockRecorder is the mock recorder for MockMulticlusterMirrorPolicyClient.
type MockMulticlusterMirrorPolicyClientMockRecorder struct {
	mock *MockMulticlusterMirrorPolicyClient
}

// NewMockMulticlusterMirrorPolicyClient creates a new mock instance.
func NewMockMulticlusterMirrorPolicyClient(ctrl *gomock.Controller) *MockMulticlusterMirrorPolicyClient {
	mock := &MockMulticlusterMirrorPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMirrorPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterMirrorPolicyClient) EXPECT() *MockMulticlusterMirrorPolicyClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterMirrorPolicyClient) Cluster(cluster string) (v2.MirrorPolicyClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.MirrorPolicyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterMirrorPolicyClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterMirrorPolicyClient)(nil).Cluster), cluster)
}

// MockRateLimitPolicyReader is a mock of RateLimitPolicyReader interface.
type MockRateLimitPolicyReader struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitPolicyReaderMockRecorder
}

// MockRateLimitPolicyReaderMockRecorder is the mock recorder for MockRateLimitPolicyReader.
type MockRateLimitPolicyReaderMockRecorder struct {
	mock *MockRateLimitPolicyReader
}

// NewMockRateLimitPolicyReader creates a new mock instance.
func NewMockRateLimitPolicyReader(ctrl *gomock.Controller) *MockRateLimitPolicyReader {
	mock := &MockRateLimitPolicyReader{ctrl: ctrl}
	mock.recorder = &MockRateLimitPolicyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimitPolicyReader) EXPECT() *MockRateLimitPolicyReaderMockRecorder {
	return m.recorder
}

// GetRateLimitPolicy mocks base method.
func (m *MockRateLimitPolicyReader) GetRateLimitPolicy(ctx context.Context, key client.ObjectKey) (*v2.RateLimitPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateLimitPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.RateLimitPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateLimitPolicy indicates an expected call of GetRateLimitPolicy.
func (mr *MockRateLimitPolicyReaderMockRecorder) GetRateLimitPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimitPolicy", reflect.TypeOf((*MockRateLimitPolicyReader)(nil).GetRateLimitPolicy), ctx, key)
}

// ListRateLimitPolicy mocks base method.
func (m *MockRateLimitPolicyReader) ListRateLimitPolicy(ctx context.Context, opts ...client.ListOption) (*v2.RateLimitPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRateLimitPolicy", varargs...)
	ret0, _ := ret[0].(*v2.RateLimitPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRateLimitPolicy indicates an expected call of ListRateLimitPolicy.
func (mr *MockRateLimitPolicyReaderMockRecorder) ListRateLimitPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRateLimitPolicy", reflect.TypeOf((*MockRateLimitPolicyReader)(nil).ListRateLimitPolicy), varargs...)
}

// MockRateLimitPolicyWriter is a mock of RateLimitPolicyWriter interface.
type MockRateLimitPolicyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitPolicyWriterMockRecorder
}

// MockRateLimitPolicyWriterMockRecorder is the mock recorder for MockRateLimitPolicyWriter.
type MockRateLimitPolicyWriterMockRecorder struct {
	mock *MockRateLimitPolicyWriter
}

// NewMockRateLimitPolicyWriter creates a new mock instance.
func NewMockRateLimitPolicyWriter(ctrl *gomock.Controller) *MockRateLimitPolicyWriter {
	mock := &MockRateLimitPolicyWriter{ctrl: ctrl}
	mock.recorder = &MockRateLimitPolicyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimitPolicyWriter) EXPECT() *MockRateLimitPolicyWriterMockRecorder {
	return m.recorder
}

// CreateRateLimitPolicy mocks base method.
func (m *MockRateLimitPolicyWriter) CreateRateLimitPolicy(ctx context.Context, obj *v2.RateLimitPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRateLimitPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRateLimitPolicy indicates an expected call of CreateRateLimitPolicy.
func (mr *MockRateLimitPolicyWriterMockRecorder) CreateRateLimitPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRateLimitPolicy", reflect.TypeOf((*MockRateLimitPolicyWriter)(nil).CreateRateLimitPolicy), varargs...)
}

// DeleteAllOfRateLimitPolicy mocks base method.
func (m *MockRateLimitPolicyWriter) DeleteAllOfRateLimitPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfRateLimitPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfRateLimitPolicy indicates an expected call of DeleteAllOfRateLimitPolicy.
func (mr *MockRateLimitPolicyWriterMockRecorder) DeleteAllOfRateLimitPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfRateLimitPolicy", reflect.TypeOf((*MockRateLimitPolicyWriter)(nil).DeleteAllOfRateLimitPolicy), varargs...)
}

// DeleteRateLimitPolicy mocks base method.
func (m *MockRateLimitPolicyWriter) DeleteRateLimitPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRateLimitPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRateLimitPolicy indicates an expected call of DeleteRateLimitPolicy.
func (mr *MockRateLimitPolicyWriterMockRecorder) DeleteRateLimitPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRateLimitPolicy", reflect.TypeOf((*MockRateLimitPolicyWriter)(nil).DeleteRateLimitPolicy), varargs...)
}

// PatchRateLimitPolicy mocks base method.
func (m *MockRateLimitPolicyWriter) PatchRateLimitPolicy(ctx context.Context, obj *v2.RateLimitPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRateLimitPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRateLimitPolicy indicates an expected call of PatchRateLimitPolicy.
func (mr *MockRateLimitPolicyWriterMockRecorder) PatchRateLimitPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRateLimitPolicy", reflect.TypeOf((*MockRateLimitPolicyWriter)(nil).PatchRateLimitPolicy), varargs...)
}

// UpdateRateLimitPolicy mocks base method.
func (m *MockRateLimitPolicyWriter) UpdateRateLimitPolicy(ctx context.Context, obj *v2.RateLimitPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRateLimitPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRateLimitPolicy indicates an expected call of UpdateRateLimitPolicy.
func (mr *MockRateLimitPolicyWriterMockRecorder) UpdateRateLimitPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateLimitPolicy", reflect.TypeOf((*MockRateLimitPolicyWriter)(nil).UpdateRateLimitPolicy), varargs...)
}

// UpsertRateLimitPolicy mocks base method.
func (m *MockRateLimitPolicyWriter) UpsertRateLimitPolicy(ctx context.Context, obj *v2.RateLimitPolicy, transitionFuncs ...v2.RateLimitPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertRateLimitPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRateLimitPolicy indicates an expected call of UpsertRateLimitPolicy.
func (mr *MockRateLimitPolicyWriterMockRecorder) UpsertRateLimitPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRateLimitPolicy", reflect.TypeOf((*MockRateLimitPolicyWriter)(nil).UpsertRateLimitPolicy), varargs...)
}

// MockRateLimitPolicyStatusWriter is a mock of RateLimitPolicyStatusWriter interface.
type MockRateLimitPolicyStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitPolicyStatusWriterMockRecorder
}

// MockRateLimitPolicyStatusWriterMockRecorder is the mock recorder for MockRateLimitPolicyStatusWriter.
type MockRateLimitPolicyStatusWriterMockRecorder struct {
	mock *MockRateLimitPolicyStatusWriter
}

// NewMockRateLimitPolicyStatusWriter creates a new mock instance.
func NewMockRateLimitPolicyStatusWriter(ctrl *gomock.Controller) *MockRateLimitPolicyStatusWriter {
	mock := &MockRateLimitPolicyStatusWriter{ctrl: ctrl}
	mock.recorder = &MockRateLimitPolicyStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimitPolicyStatusWriter) EXPECT() *MockRateLimitPolicyStatusWriterMockRecorder {
	return m.recorder
}

// PatchRateLimitPolicyStatus mocks base method.
func (m *MockRateLimitPolicyStatusWriter) PatchRateLimitPolicyStatus(ctx context.Context, obj *v2.RateLimitPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRateLimitPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRateLimitPolicyStatus indicates an expected call of PatchRateLimitPolicyStatus.
func (mr *MockRateLimitPolicyStatusWriterMockRecorder) PatchRateLimitPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRateLimitPolicyStatus", reflect.TypeOf((*MockRateLimitPolicyStatusWriter)(nil).PatchRateLimitPolicyStatus), varargs...)
}

// UpdateRateLimitPolicyStatus mocks base method.
func (m *MockRateLimitPolicyStatusWriter) UpdateRateLimitPolicyStatus(ctx context.Context, obj *v2.RateLimitPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRateLimitPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRateLimitPolicyStatus indicates an expected call of UpdateRateLimitPolicyStatus.
func (mr *MockRateLimitPolicyStatusWriterMockRecorder) UpdateRateLimitPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateLimitPolicyStatus", reflect.TypeOf((*MockRateLimitPolicyStatusWriter)(nil).UpdateRateLimitPolicyStatus), varargs...)
}

// MockRateLimitPolicyClient is a mock of RateLimitPolicyClient interface.
type MockRateLimitPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitPolicyClientMockRecorder
}

// MockRateLimitPolicyClientMockRecorder is the mock recorder for MockRateLimitPolicyClient.
type MockRateLimitPolicyClientMockRecorder struct {
	mock *MockRateLimitPolicyClient
}

// NewMockRateLimitPolicyClient creates a new mock instance.
func NewMockRateLimitPolicyClient(ctrl *gomock.Controller) *MockRateLimitPolicyClient {
	mock := &MockRateLimitPolicyClient{ctrl: ctrl}
	mock.recorder = &MockRateLimitPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimitPolicyClient) EXPECT() *MockRateLimitPolicyClientMockRecorder {
	return m.recorder
}

// CreateRateLimitPolicy mocks base method.
func (m *MockRateLimitPolicyClient) CreateRateLimitPolicy(ctx context.Context, obj *v2.RateLimitPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRateLimitPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRateLimitPolicy indicates an expected call of CreateRateLimitPolicy.
func (mr *MockRateLimitPolicyClientMockRecorder) CreateRateLimitPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRateLimitPolicy", reflect.TypeOf((*MockRateLimitPolicyClient)(nil).CreateRateLimitPolicy), varargs...)
}

// DeleteAllOfRateLimitPolicy mocks base method.
func (m *MockRateLimitPolicyClient) DeleteAllOfRateLimitPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfRateLimitPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfRateLimitPolicy indicates an expected call of DeleteAllOfRateLimitPolicy.
func (mr *MockRateLimitPolicyClientMockRecorder) DeleteAllOfRateLimitPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfRateLimitPolicy", reflect.TypeOf((*MockRateLimitPolicyClient)(nil).DeleteAllOfRateLimitPolicy), varargs...)
}

// DeleteRateLimitPolicy mocks base method.
func (m *MockRateLimitPolicyClient) DeleteRateLimitPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRateLimitPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRateLimitPolicy indicates an expected call of DeleteRateLimitPolicy.
func (mr *MockRateLimitPolicyClientMockRecorder) DeleteRateLimitPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRateLimitPolicy", reflect.TypeOf((*MockRateLimitPolicyClient)(nil).DeleteRateLimitPolicy), varargs...)
}

// GetRateLimitPolicy mocks base method.
func (m *MockRateLimitPolicyClient) GetRateLimitPolicy(ctx context.Context, key client.ObjectKey) (*v2.RateLimitPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateLimitPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.RateLimitPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateLimitPolicy indicates an expected call of GetRateLimitPolicy.
func (mr *MockRateLimitPolicyClientMockRecorder) GetRateLimitPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimitPolicy", reflect.TypeOf((*MockRateLimitPolicyClient)(nil).GetRateLimitPolicy), ctx, key)
}

// ListRateLimitPolicy mocks base method.
func (m *MockRateLimitPolicyClient) ListRateLimitPolicy(ctx context.Context, opts ...client.ListOption) (*v2.RateLimitPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRateLimitPolicy", varargs...)
	ret0, _ := ret[0].(*v2.RateLimitPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRateLimitPolicy indicates an expected call of ListRateLimitPolicy.
func (mr *MockRateLimitPolicyClientMockRecorder) ListRateLimitPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRateLimitPolicy", reflect.TypeOf((*MockRateLimitPolicyClient)(nil).ListRateLimitPolicy), varargs...)
}

// PatchRateLimitPolicy mocks base method.
func (m *MockRateLimitPolicyClient) PatchRateLimitPolicy(ctx context.Context, obj *v2.RateLimitPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRateLimitPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRateLimitPolicy indicates an expected call of PatchRateLimitPolicy.
func (mr *MockRateLimitPolicyClientMockRecorder) PatchRateLimitPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRateLimitPolicy", reflect.TypeOf((*MockRateLimitPolicyClient)(nil).PatchRateLimitPolicy), varargs...)
}

// PatchRateLimitPolicyStatus mocks base method.
func (m *MockRateLimitPolicyClient) PatchRateLimitPolicyStatus(ctx context.Context, obj *v2.RateLimitPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRateLimitPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRateLimitPolicyStatus indicates an expected call of PatchRateLimitPolicyStatus.
func (mr *MockRateLimitPolicyClientMockRecorder) PatchRateLimitPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRateLimitPolicyStatus", reflect.TypeOf((*MockRateLimitPolicyClient)(nil).PatchRateLimitPolicyStatus), varargs...)
}

// UpdateRateLimitPolicy mocks base method.
func (m *MockRateLimitPolicyClient) UpdateRateLimitPolicy(ctx context.Context, obj *v2.RateLimitPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRateLimitPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRateLimitPolicy indicates an expected call of UpdateRateLimitPolicy.
func (mr *MockRateLimitPolicyClientMockRecorder) UpdateRateLimitPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateLimitPolicy", reflect.TypeOf((*MockRateLimitPolicyClient)(nil).UpdateRateLimitPolicy), varargs...)
}

// UpdateRateLimitPolicyStatus mocks base method.
func (m *MockRateLimitPolicyClient) UpdateRateLimitPolicyStatus(ctx context.Context, obj *v2.RateLimitPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRateLimitPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRateLimitPolicyStatus indicates an expected call of UpdateRateLimitPolicyStatus.
func (mr *MockRateLimitPolicyClientMockRecorder) UpdateRateLimitPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateLimitPolicyStatus", reflect.TypeOf((*MockRateLimitPolicyClient)(nil).UpdateRateLimitPolicyStatus), varargs...)
}

// UpsertRateLimitPolicy mocks base method.
func (m *MockRateLimitPolicyClient) UpsertRateLimitPolicy(ctx context.Context, obj *v2.RateLimitPolicy, transitionFuncs ...v2.RateLimitPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertRateLimitPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRateLimitPolicy indicates an expected call of UpsertRateLimitPolicy.
func (mr *MockRateLimitPolicyClientMockRecorder) UpsertRateLimitPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRateLimitPolicy", reflect.TypeOf((*MockRateLimitPolicyClient)(nil).UpsertRateLimitPolicy), varargs...)
}

// MockMulticlusterRateLimitPolicyClient is a mock of MulticlusterRateLimitPolicyClient interface.
type MockMulticlusterRateLimitPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRateLimitPolicyClientMockRecorder
}

// MockMulticlusterRateLimitPolicyClientMockRecorder is the mock recorder for MockMulticlusterRateLimitPolicyClient.
type MockMulticlusterRateLimitPolicyClientMockRecorder struct {
	mock *MockMulticlusterRateLimitPolicyClient
}

// NewMockMulticlusterRateLimitPolicyClient creates a new mock instance.
func NewMockMulticlusterRateLimitPolicyClient(ctrl *gomock.Controller) *MockMulticlusterRateLimitPolicyClient {
	mock := &MockMulticlusterRateLimitPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRateLimitPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRateLimitPolicyClient) EXPECT() *MockMulticlusterRateLimitPolicyClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterRateLimitPolicyClient) Cluster(cluster string) (v2.RateLimitPolicyClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.RateLimitPolicyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterRateLimitPolicyClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterRateLimitPolicyClient)(nil).Cluster), cluster)
}

// MockRateLimitClientConfigReader is a mock of RateLimitClientConfigReader interface.
type MockRateLimitClientConfigReader struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitClientConfigReaderMockRecorder
}

// MockRateLimitClientConfigReaderMockRecorder is the mock recorder for MockRateLimitClientConfigReader.
type MockRateLimitClientConfigReaderMockRecorder struct {
	mock *MockRateLimitClientConfigReader
}

// NewMockRateLimitClientConfigReader creates a new mock instance.
func NewMockRateLimitClientConfigReader(ctrl *gomock.Controller) *MockRateLimitClientConfigReader {
	mock := &MockRateLimitClientConfigReader{ctrl: ctrl}
	mock.recorder = &MockRateLimitClientConfigReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimitClientConfigReader) EXPECT() *MockRateLimitClientConfigReaderMockRecorder {
	return m.recorder
}

// GetRateLimitClientConfig mocks base method.
func (m *MockRateLimitClientConfigReader) GetRateLimitClientConfig(ctx context.Context, key client.ObjectKey) (*v2.RateLimitClientConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateLimitClientConfig", ctx, key)
	ret0, _ := ret[0].(*v2.RateLimitClientConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateLimitClientConfig indicates an expected call of GetRateLimitClientConfig.
func (mr *MockRateLimitClientConfigReaderMockRecorder) GetRateLimitClientConfig(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimitClientConfig", reflect.TypeOf((*MockRateLimitClientConfigReader)(nil).GetRateLimitClientConfig), ctx, key)
}

// ListRateLimitClientConfig mocks base method.
func (m *MockRateLimitClientConfigReader) ListRateLimitClientConfig(ctx context.Context, opts ...client.ListOption) (*v2.RateLimitClientConfigList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRateLimitClientConfig", varargs...)
	ret0, _ := ret[0].(*v2.RateLimitClientConfigList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRateLimitClientConfig indicates an expected call of ListRateLimitClientConfig.
func (mr *MockRateLimitClientConfigReaderMockRecorder) ListRateLimitClientConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRateLimitClientConfig", reflect.TypeOf((*MockRateLimitClientConfigReader)(nil).ListRateLimitClientConfig), varargs...)
}

// MockRateLimitClientConfigWriter is a mock of RateLimitClientConfigWriter interface.
type MockRateLimitClientConfigWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitClientConfigWriterMockRecorder
}

// MockRateLimitClientConfigWriterMockRecorder is the mock recorder for MockRateLimitClientConfigWriter.
type MockRateLimitClientConfigWriterMockRecorder struct {
	mock *MockRateLimitClientConfigWriter
}

// NewMockRateLimitClientConfigWriter creates a new mock instance.
func NewMockRateLimitClientConfigWriter(ctrl *gomock.Controller) *MockRateLimitClientConfigWriter {
	mock := &MockRateLimitClientConfigWriter{ctrl: ctrl}
	mock.recorder = &MockRateLimitClientConfigWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimitClientConfigWriter) EXPECT() *MockRateLimitClientConfigWriterMockRecorder {
	return m.recorder
}

// CreateRateLimitClientConfig mocks base method.
func (m *MockRateLimitClientConfigWriter) CreateRateLimitClientConfig(ctx context.Context, obj *v2.RateLimitClientConfig, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRateLimitClientConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRateLimitClientConfig indicates an expected call of CreateRateLimitClientConfig.
func (mr *MockRateLimitClientConfigWriterMockRecorder) CreateRateLimitClientConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRateLimitClientConfig", reflect.TypeOf((*MockRateLimitClientConfigWriter)(nil).CreateRateLimitClientConfig), varargs...)
}

// DeleteAllOfRateLimitClientConfig mocks base method.
func (m *MockRateLimitClientConfigWriter) DeleteAllOfRateLimitClientConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfRateLimitClientConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfRateLimitClientConfig indicates an expected call of DeleteAllOfRateLimitClientConfig.
func (mr *MockRateLimitClientConfigWriterMockRecorder) DeleteAllOfRateLimitClientConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfRateLimitClientConfig", reflect.TypeOf((*MockRateLimitClientConfigWriter)(nil).DeleteAllOfRateLimitClientConfig), varargs...)
}

// DeleteRateLimitClientConfig mocks base method.
func (m *MockRateLimitClientConfigWriter) DeleteRateLimitClientConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRateLimitClientConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRateLimitClientConfig indicates an expected call of DeleteRateLimitClientConfig.
func (mr *MockRateLimitClientConfigWriterMockRecorder) DeleteRateLimitClientConfig(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRateLimitClientConfig", reflect.TypeOf((*MockRateLimitClientConfigWriter)(nil).DeleteRateLimitClientConfig), varargs...)
}

// PatchRateLimitClientConfig mocks base method.
func (m *MockRateLimitClientConfigWriter) PatchRateLimitClientConfig(ctx context.Context, obj *v2.RateLimitClientConfig, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRateLimitClientConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRateLimitClientConfig indicates an expected call of PatchRateLimitClientConfig.
func (mr *MockRateLimitClientConfigWriterMockRecorder) PatchRateLimitClientConfig(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRateLimitClientConfig", reflect.TypeOf((*MockRateLimitClientConfigWriter)(nil).PatchRateLimitClientConfig), varargs...)
}

// UpdateRateLimitClientConfig mocks base method.
func (m *MockRateLimitClientConfigWriter) UpdateRateLimitClientConfig(ctx context.Context, obj *v2.RateLimitClientConfig, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRateLimitClientConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRateLimitClientConfig indicates an expected call of UpdateRateLimitClientConfig.
func (mr *MockRateLimitClientConfigWriterMockRecorder) UpdateRateLimitClientConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateLimitClientConfig", reflect.TypeOf((*MockRateLimitClientConfigWriter)(nil).UpdateRateLimitClientConfig), varargs...)
}

// UpsertRateLimitClientConfig mocks base method.
func (m *MockRateLimitClientConfigWriter) UpsertRateLimitClientConfig(ctx context.Context, obj *v2.RateLimitClientConfig, transitionFuncs ...v2.RateLimitClientConfigTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertRateLimitClientConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRateLimitClientConfig indicates an expected call of UpsertRateLimitClientConfig.
func (mr *MockRateLimitClientConfigWriterMockRecorder) UpsertRateLimitClientConfig(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRateLimitClientConfig", reflect.TypeOf((*MockRateLimitClientConfigWriter)(nil).UpsertRateLimitClientConfig), varargs...)
}

// MockRateLimitClientConfigStatusWriter is a mock of RateLimitClientConfigStatusWriter interface.
type MockRateLimitClientConfigStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitClientConfigStatusWriterMockRecorder
}

// MockRateLimitClientConfigStatusWriterMockRecorder is the mock recorder for MockRateLimitClientConfigStatusWriter.
type MockRateLimitClientConfigStatusWriterMockRecorder struct {
	mock *MockRateLimitClientConfigStatusWriter
}

// NewMockRateLimitClientConfigStatusWriter creates a new mock instance.
func NewMockRateLimitClientConfigStatusWriter(ctrl *gomock.Controller) *MockRateLimitClientConfigStatusWriter {
	mock := &MockRateLimitClientConfigStatusWriter{ctrl: ctrl}
	mock.recorder = &MockRateLimitClientConfigStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimitClientConfigStatusWriter) EXPECT() *MockRateLimitClientConfigStatusWriterMockRecorder {
	return m.recorder
}

// PatchRateLimitClientConfigStatus mocks base method.
func (m *MockRateLimitClientConfigStatusWriter) PatchRateLimitClientConfigStatus(ctx context.Context, obj *v2.RateLimitClientConfig, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRateLimitClientConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRateLimitClientConfigStatus indicates an expected call of PatchRateLimitClientConfigStatus.
func (mr *MockRateLimitClientConfigStatusWriterMockRecorder) PatchRateLimitClientConfigStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRateLimitClientConfigStatus", reflect.TypeOf((*MockRateLimitClientConfigStatusWriter)(nil).PatchRateLimitClientConfigStatus), varargs...)
}

// UpdateRateLimitClientConfigStatus mocks base method.
func (m *MockRateLimitClientConfigStatusWriter) UpdateRateLimitClientConfigStatus(ctx context.Context, obj *v2.RateLimitClientConfig, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRateLimitClientConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRateLimitClientConfigStatus indicates an expected call of UpdateRateLimitClientConfigStatus.
func (mr *MockRateLimitClientConfigStatusWriterMockRecorder) UpdateRateLimitClientConfigStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateLimitClientConfigStatus", reflect.TypeOf((*MockRateLimitClientConfigStatusWriter)(nil).UpdateRateLimitClientConfigStatus), varargs...)
}

// MockRateLimitClientConfigClient is a mock of RateLimitClientConfigClient interface.
type MockRateLimitClientConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitClientConfigClientMockRecorder
}

// MockRateLimitClientConfigClientMockRecorder is the mock recorder for MockRateLimitClientConfigClient.
type MockRateLimitClientConfigClientMockRecorder struct {
	mock *MockRateLimitClientConfigClient
}

// NewMockRateLimitClientConfigClient creates a new mock instance.
func NewMockRateLimitClientConfigClient(ctrl *gomock.Controller) *MockRateLimitClientConfigClient {
	mock := &MockRateLimitClientConfigClient{ctrl: ctrl}
	mock.recorder = &MockRateLimitClientConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimitClientConfigClient) EXPECT() *MockRateLimitClientConfigClientMockRecorder {
	return m.recorder
}

// CreateRateLimitClientConfig mocks base method.
func (m *MockRateLimitClientConfigClient) CreateRateLimitClientConfig(ctx context.Context, obj *v2.RateLimitClientConfig, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRateLimitClientConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRateLimitClientConfig indicates an expected call of CreateRateLimitClientConfig.
func (mr *MockRateLimitClientConfigClientMockRecorder) CreateRateLimitClientConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRateLimitClientConfig", reflect.TypeOf((*MockRateLimitClientConfigClient)(nil).CreateRateLimitClientConfig), varargs...)
}

// DeleteAllOfRateLimitClientConfig mocks base method.
func (m *MockRateLimitClientConfigClient) DeleteAllOfRateLimitClientConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfRateLimitClientConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfRateLimitClientConfig indicates an expected call of DeleteAllOfRateLimitClientConfig.
func (mr *MockRateLimitClientConfigClientMockRecorder) DeleteAllOfRateLimitClientConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfRateLimitClientConfig", reflect.TypeOf((*MockRateLimitClientConfigClient)(nil).DeleteAllOfRateLimitClientConfig), varargs...)
}

// DeleteRateLimitClientConfig mocks base method.
func (m *MockRateLimitClientConfigClient) DeleteRateLimitClientConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRateLimitClientConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRateLimitClientConfig indicates an expected call of DeleteRateLimitClientConfig.
func (mr *MockRateLimitClientConfigClientMockRecorder) DeleteRateLimitClientConfig(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRateLimitClientConfig", reflect.TypeOf((*MockRateLimitClientConfigClient)(nil).DeleteRateLimitClientConfig), varargs...)
}

// GetRateLimitClientConfig mocks base method.
func (m *MockRateLimitClientConfigClient) GetRateLimitClientConfig(ctx context.Context, key client.ObjectKey) (*v2.RateLimitClientConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateLimitClientConfig", ctx, key)
	ret0, _ := ret[0].(*v2.RateLimitClientConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateLimitClientConfig indicates an expected call of GetRateLimitClientConfig.
func (mr *MockRateLimitClientConfigClientMockRecorder) GetRateLimitClientConfig(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimitClientConfig", reflect.TypeOf((*MockRateLimitClientConfigClient)(nil).GetRateLimitClientConfig), ctx, key)
}

// ListRateLimitClientConfig mocks base method.
func (m *MockRateLimitClientConfigClient) ListRateLimitClientConfig(ctx context.Context, opts ...client.ListOption) (*v2.RateLimitClientConfigList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRateLimitClientConfig", varargs...)
	ret0, _ := ret[0].(*v2.RateLimitClientConfigList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRateLimitClientConfig indicates an expected call of ListRateLimitClientConfig.
func (mr *MockRateLimitClientConfigClientMockRecorder) ListRateLimitClientConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRateLimitClientConfig", reflect.TypeOf((*MockRateLimitClientConfigClient)(nil).ListRateLimitClientConfig), varargs...)
}

// PatchRateLimitClientConfig mocks base method.
func (m *MockRateLimitClientConfigClient) PatchRateLimitClientConfig(ctx context.Context, obj *v2.RateLimitClientConfig, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRateLimitClientConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRateLimitClientConfig indicates an expected call of PatchRateLimitClientConfig.
func (mr *MockRateLimitClientConfigClientMockRecorder) PatchRateLimitClientConfig(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRateLimitClientConfig", reflect.TypeOf((*MockRateLimitClientConfigClient)(nil).PatchRateLimitClientConfig), varargs...)
}

// PatchRateLimitClientConfigStatus mocks base method.
func (m *MockRateLimitClientConfigClient) PatchRateLimitClientConfigStatus(ctx context.Context, obj *v2.RateLimitClientConfig, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRateLimitClientConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRateLimitClientConfigStatus indicates an expected call of PatchRateLimitClientConfigStatus.
func (mr *MockRateLimitClientConfigClientMockRecorder) PatchRateLimitClientConfigStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRateLimitClientConfigStatus", reflect.TypeOf((*MockRateLimitClientConfigClient)(nil).PatchRateLimitClientConfigStatus), varargs...)
}

// UpdateRateLimitClientConfig mocks base method.
func (m *MockRateLimitClientConfigClient) UpdateRateLimitClientConfig(ctx context.Context, obj *v2.RateLimitClientConfig, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRateLimitClientConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRateLimitClientConfig indicates an expected call of UpdateRateLimitClientConfig.
func (mr *MockRateLimitClientConfigClientMockRecorder) UpdateRateLimitClientConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateLimitClientConfig", reflect.TypeOf((*MockRateLimitClientConfigClient)(nil).UpdateRateLimitClientConfig), varargs...)
}

// UpdateRateLimitClientConfigStatus mocks base method.
func (m *MockRateLimitClientConfigClient) UpdateRateLimitClientConfigStatus(ctx context.Context, obj *v2.RateLimitClientConfig, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRateLimitClientConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRateLimitClientConfigStatus indicates an expected call of UpdateRateLimitClientConfigStatus.
func (mr *MockRateLimitClientConfigClientMockRecorder) UpdateRateLimitClientConfigStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateLimitClientConfigStatus", reflect.TypeOf((*MockRateLimitClientConfigClient)(nil).UpdateRateLimitClientConfigStatus), varargs...)
}

// UpsertRateLimitClientConfig mocks base method.
func (m *MockRateLimitClientConfigClient) UpsertRateLimitClientConfig(ctx context.Context, obj *v2.RateLimitClientConfig, transitionFuncs ...v2.RateLimitClientConfigTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertRateLimitClientConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRateLimitClientConfig indicates an expected call of UpsertRateLimitClientConfig.
func (mr *MockRateLimitClientConfigClientMockRecorder) UpsertRateLimitClientConfig(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRateLimitClientConfig", reflect.TypeOf((*MockRateLimitClientConfigClient)(nil).UpsertRateLimitClientConfig), varargs...)
}

// MockMulticlusterRateLimitClientConfigClient is a mock of MulticlusterRateLimitClientConfigClient interface.
type MockMulticlusterRateLimitClientConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRateLimitClientConfigClientMockRecorder
}

// MockMulticlusterRateLimitClientConfigClientMockRecorder is the mock recorder for MockMulticlusterRateLimitClientConfigClient.
type MockMulticlusterRateLimitClientConfigClientMockRecorder struct {
	mock *MockMulticlusterRateLimitClientConfigClient
}

// NewMockMulticlusterRateLimitClientConfigClient creates a new mock instance.
func NewMockMulticlusterRateLimitClientConfigClient(ctrl *gomock.Controller) *MockMulticlusterRateLimitClientConfigClient {
	mock := &MockMulticlusterRateLimitClientConfigClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRateLimitClientConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRateLimitClientConfigClient) EXPECT() *MockMulticlusterRateLimitClientConfigClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterRateLimitClientConfigClient) Cluster(cluster string) (v2.RateLimitClientConfigClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.RateLimitClientConfigClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterRateLimitClientConfigClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterRateLimitClientConfigClient)(nil).Cluster), cluster)
}

// MockHeaderManipulationPolicyReader is a mock of HeaderManipulationPolicyReader interface.
type MockHeaderManipulationPolicyReader struct {
	ctrl     *gomock.Controller
	recorder *MockHeaderManipulationPolicyReaderMockRecorder
}

// MockHeaderManipulationPolicyReaderMockRecorder is the mock recorder for MockHeaderManipulationPolicyReader.
type MockHeaderManipulationPolicyReaderMockRecorder struct {
	mock *MockHeaderManipulationPolicyReader
}

// NewMockHeaderManipulationPolicyReader creates a new mock instance.
func NewMockHeaderManipulationPolicyReader(ctrl *gomock.Controller) *MockHeaderManipulationPolicyReader {
	mock := &MockHeaderManipulationPolicyReader{ctrl: ctrl}
	mock.recorder = &MockHeaderManipulationPolicyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeaderManipulationPolicyReader) EXPECT() *MockHeaderManipulationPolicyReaderMockRecorder {
	return m.recorder
}

// GetHeaderManipulationPolicy mocks base method.
func (m *MockHeaderManipulationPolicyReader) GetHeaderManipulationPolicy(ctx context.Context, key client.ObjectKey) (*v2.HeaderManipulationPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderManipulationPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.HeaderManipulationPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderManipulationPolicy indicates an expected call of GetHeaderManipulationPolicy.
func (mr *MockHeaderManipulationPolicyReaderMockRecorder) GetHeaderManipulationPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderManipulationPolicy", reflect.TypeOf((*MockHeaderManipulationPolicyReader)(nil).GetHeaderManipulationPolicy), ctx, key)
}

// ListHeaderManipulationPolicy mocks base method.
func (m *MockHeaderManipulationPolicyReader) ListHeaderManipulationPolicy(ctx context.Context, opts ...client.ListOption) (*v2.HeaderManipulationPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHeaderManipulationPolicy", varargs...)
	ret0, _ := ret[0].(*v2.HeaderManipulationPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHeaderManipulationPolicy indicates an expected call of ListHeaderManipulationPolicy.
func (mr *MockHeaderManipulationPolicyReaderMockRecorder) ListHeaderManipulationPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHeaderManipulationPolicy", reflect.TypeOf((*MockHeaderManipulationPolicyReader)(nil).ListHeaderManipulationPolicy), varargs...)
}

// MockHeaderManipulationPolicyWriter is a mock of HeaderManipulationPolicyWriter interface.
type MockHeaderManipulationPolicyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockHeaderManipulationPolicyWriterMockRecorder
}

// MockHeaderManipulationPolicyWriterMockRecorder is the mock recorder for MockHeaderManipulationPolicyWriter.
type MockHeaderManipulationPolicyWriterMockRecorder struct {
	mock *MockHeaderManipulationPolicyWriter
}

// NewMockHeaderManipulationPolicyWriter creates a new mock instance.
func NewMockHeaderManipulationPolicyWriter(ctrl *gomock.Controller) *MockHeaderManipulationPolicyWriter {
	mock := &MockHeaderManipulationPolicyWriter{ctrl: ctrl}
	mock.recorder = &MockHeaderManipulationPolicyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeaderManipulationPolicyWriter) EXPECT() *MockHeaderManipulationPolicyWriterMockRecorder {
	return m.recorder
}

// CreateHeaderManipulationPolicy mocks base method.
func (m *MockHeaderManipulationPolicyWriter) CreateHeaderManipulationPolicy(ctx context.Context, obj *v2.HeaderManipulationPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateHeaderManipulationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHeaderManipulationPolicy indicates an expected call of CreateHeaderManipulationPolicy.
func (mr *MockHeaderManipulationPolicyWriterMockRecorder) CreateHeaderManipulationPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHeaderManipulationPolicy", reflect.TypeOf((*MockHeaderManipulationPolicyWriter)(nil).CreateHeaderManipulationPolicy), varargs...)
}

// DeleteAllOfHeaderManipulationPolicy mocks base method.
func (m *MockHeaderManipulationPolicyWriter) DeleteAllOfHeaderManipulationPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfHeaderManipulationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfHeaderManipulationPolicy indicates an expected call of DeleteAllOfHeaderManipulationPolicy.
func (mr *MockHeaderManipulationPolicyWriterMockRecorder) DeleteAllOfHeaderManipulationPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfHeaderManipulationPolicy", reflect.TypeOf((*MockHeaderManipulationPolicyWriter)(nil).DeleteAllOfHeaderManipulationPolicy), varargs...)
}

// DeleteHeaderManipulationPolicy mocks base method.
func (m *MockHeaderManipulationPolicyWriter) DeleteHeaderManipulationPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteHeaderManipulationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHeaderManipulationPolicy indicates an expected call of DeleteHeaderManipulationPolicy.
func (mr *MockHeaderManipulationPolicyWriterMockRecorder) DeleteHeaderManipulationPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHeaderManipulationPolicy", reflect.TypeOf((*MockHeaderManipulationPolicyWriter)(nil).DeleteHeaderManipulationPolicy), varargs...)
}

// PatchHeaderManipulationPolicy mocks base method.
func (m *MockHeaderManipulationPolicyWriter) PatchHeaderManipulationPolicy(ctx context.Context, obj *v2.HeaderManipulationPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchHeaderManipulationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchHeaderManipulationPolicy indicates an expected call of PatchHeaderManipulationPolicy.
func (mr *MockHeaderManipulationPolicyWriterMockRecorder) PatchHeaderManipulationPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchHeaderManipulationPolicy", reflect.TypeOf((*MockHeaderManipulationPolicyWriter)(nil).PatchHeaderManipulationPolicy), varargs...)
}

// UpdateHeaderManipulationPolicy mocks base method.
func (m *MockHeaderManipulationPolicyWriter) UpdateHeaderManipulationPolicy(ctx context.Context, obj *v2.HeaderManipulationPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateHeaderManipulationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHeaderManipulationPolicy indicates an expected call of UpdateHeaderManipulationPolicy.
func (mr *MockHeaderManipulationPolicyWriterMockRecorder) UpdateHeaderManipulationPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHeaderManipulationPolicy", reflect.TypeOf((*MockHeaderManipulationPolicyWriter)(nil).UpdateHeaderManipulationPolicy), varargs...)
}

// UpsertHeaderManipulationPolicy mocks base method.
func (m *MockHeaderManipulationPolicyWriter) UpsertHeaderManipulationPolicy(ctx context.Context, obj *v2.HeaderManipulationPolicy, transitionFuncs ...v2.HeaderManipulationPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertHeaderManipulationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertHeaderManipulationPolicy indicates an expected call of UpsertHeaderManipulationPolicy.
func (mr *MockHeaderManipulationPolicyWriterMockRecorder) UpsertHeaderManipulationPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertHeaderManipulationPolicy", reflect.TypeOf((*MockHeaderManipulationPolicyWriter)(nil).UpsertHeaderManipulationPolicy), varargs...)
}

// MockHeaderManipulationPolicyStatusWriter is a mock of HeaderManipulationPolicyStatusWriter interface.
type MockHeaderManipulationPolicyStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockHeaderManipulationPolicyStatusWriterMockRecorder
}

// MockHeaderManipulationPolicyStatusWriterMockRecorder is the mock recorder for MockHeaderManipulationPolicyStatusWriter.
type MockHeaderManipulationPolicyStatusWriterMockRecorder struct {
	mock *MockHeaderManipulationPolicyStatusWriter
}

// NewMockHeaderManipulationPolicyStatusWriter creates a new mock instance.
func NewMockHeaderManipulationPolicyStatusWriter(ctrl *gomock.Controller) *MockHeaderManipulationPolicyStatusWriter {
	mock := &MockHeaderManipulationPolicyStatusWriter{ctrl: ctrl}
	mock.recorder = &MockHeaderManipulationPolicyStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeaderManipulationPolicyStatusWriter) EXPECT() *MockHeaderManipulationPolicyStatusWriterMockRecorder {
	return m.recorder
}

// PatchHeaderManipulationPolicyStatus mocks base method.
func (m *MockHeaderManipulationPolicyStatusWriter) PatchHeaderManipulationPolicyStatus(ctx context.Context, obj *v2.HeaderManipulationPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchHeaderManipulationPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchHeaderManipulationPolicyStatus indicates an expected call of PatchHeaderManipulationPolicyStatus.
func (mr *MockHeaderManipulationPolicyStatusWriterMockRecorder) PatchHeaderManipulationPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchHeaderManipulationPolicyStatus", reflect.TypeOf((*MockHeaderManipulationPolicyStatusWriter)(nil).PatchHeaderManipulationPolicyStatus), varargs...)
}

// UpdateHeaderManipulationPolicyStatus mocks base method.
func (m *MockHeaderManipulationPolicyStatusWriter) UpdateHeaderManipulationPolicyStatus(ctx context.Context, obj *v2.HeaderManipulationPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateHeaderManipulationPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHeaderManipulationPolicyStatus indicates an expected call of UpdateHeaderManipulationPolicyStatus.
func (mr *MockHeaderManipulationPolicyStatusWriterMockRecorder) UpdateHeaderManipulationPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHeaderManipulationPolicyStatus", reflect.TypeOf((*MockHeaderManipulationPolicyStatusWriter)(nil).UpdateHeaderManipulationPolicyStatus), varargs...)
}

// MockHeaderManipulationPolicyClient is a mock of HeaderManipulationPolicyClient interface.
type MockHeaderManipulationPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockHeaderManipulationPolicyClientMockRecorder
}

// MockHeaderManipulationPolicyClientMockRecorder is the mock recorder for MockHeaderManipulationPolicyClient.
type MockHeaderManipulationPolicyClientMockRecorder struct {
	mock *MockHeaderManipulationPolicyClient
}

// NewMockHeaderManipulationPolicyClient creates a new mock instance.
func NewMockHeaderManipulationPolicyClient(ctrl *gomock.Controller) *MockHeaderManipulationPolicyClient {
	mock := &MockHeaderManipulationPolicyClient{ctrl: ctrl}
	mock.recorder = &MockHeaderManipulationPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeaderManipulationPolicyClient) EXPECT() *MockHeaderManipulationPolicyClientMockRecorder {
	return m.recorder
}

// CreateHeaderManipulationPolicy mocks base method.
func (m *MockHeaderManipulationPolicyClient) CreateHeaderManipulationPolicy(ctx context.Context, obj *v2.HeaderManipulationPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateHeaderManipulationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHeaderManipulationPolicy indicates an expected call of CreateHeaderManipulationPolicy.
func (mr *MockHeaderManipulationPolicyClientMockRecorder) CreateHeaderManipulationPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHeaderManipulationPolicy", reflect.TypeOf((*MockHeaderManipulationPolicyClient)(nil).CreateHeaderManipulationPolicy), varargs...)
}

// DeleteAllOfHeaderManipulationPolicy mocks base method.
func (m *MockHeaderManipulationPolicyClient) DeleteAllOfHeaderManipulationPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfHeaderManipulationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfHeaderManipulationPolicy indicates an expected call of DeleteAllOfHeaderManipulationPolicy.
func (mr *MockHeaderManipulationPolicyClientMockRecorder) DeleteAllOfHeaderManipulationPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfHeaderManipulationPolicy", reflect.TypeOf((*MockHeaderManipulationPolicyClient)(nil).DeleteAllOfHeaderManipulationPolicy), varargs...)
}

// DeleteHeaderManipulationPolicy mocks base method.
func (m *MockHeaderManipulationPolicyClient) DeleteHeaderManipulationPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteHeaderManipulationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHeaderManipulationPolicy indicates an expected call of DeleteHeaderManipulationPolicy.
func (mr *MockHeaderManipulationPolicyClientMockRecorder) DeleteHeaderManipulationPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHeaderManipulationPolicy", reflect.TypeOf((*MockHeaderManipulationPolicyClient)(nil).DeleteHeaderManipulationPolicy), varargs...)
}

// GetHeaderManipulationPolicy mocks base method.
func (m *MockHeaderManipulationPolicyClient) GetHeaderManipulationPolicy(ctx context.Context, key client.ObjectKey) (*v2.HeaderManipulationPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderManipulationPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.HeaderManipulationPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderManipulationPolicy indicates an expected call of GetHeaderManipulationPolicy.
func (mr *MockHeaderManipulationPolicyClientMockRecorder) GetHeaderManipulationPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderManipulationPolicy", reflect.TypeOf((*MockHeaderManipulationPolicyClient)(nil).GetHeaderManipulationPolicy), ctx, key)
}

// ListHeaderManipulationPolicy mocks base method.
func (m *MockHeaderManipulationPolicyClient) ListHeaderManipulationPolicy(ctx context.Context, opts ...client.ListOption) (*v2.HeaderManipulationPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHeaderManipulationPolicy", varargs...)
	ret0, _ := ret[0].(*v2.HeaderManipulationPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHeaderManipulationPolicy indicates an expected call of ListHeaderManipulationPolicy.
func (mr *MockHeaderManipulationPolicyClientMockRecorder) ListHeaderManipulationPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHeaderManipulationPolicy", reflect.TypeOf((*MockHeaderManipulationPolicyClient)(nil).ListHeaderManipulationPolicy), varargs...)
}

// PatchHeaderManipulationPolicy mocks base method.
func (m *MockHeaderManipulationPolicyClient) PatchHeaderManipulationPolicy(ctx context.Context, obj *v2.HeaderManipulationPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchHeaderManipulationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchHeaderManipulationPolicy indicates an expected call of PatchHeaderManipulationPolicy.
func (mr *MockHeaderManipulationPolicyClientMockRecorder) PatchHeaderManipulationPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchHeaderManipulationPolicy", reflect.TypeOf((*MockHeaderManipulationPolicyClient)(nil).PatchHeaderManipulationPolicy), varargs...)
}

// PatchHeaderManipulationPolicyStatus mocks base method.
func (m *MockHeaderManipulationPolicyClient) PatchHeaderManipulationPolicyStatus(ctx context.Context, obj *v2.HeaderManipulationPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchHeaderManipulationPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchHeaderManipulationPolicyStatus indicates an expected call of PatchHeaderManipulationPolicyStatus.
func (mr *MockHeaderManipulationPolicyClientMockRecorder) PatchHeaderManipulationPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchHeaderManipulationPolicyStatus", reflect.TypeOf((*MockHeaderManipulationPolicyClient)(nil).PatchHeaderManipulationPolicyStatus), varargs...)
}

// UpdateHeaderManipulationPolicy mocks base method.
func (m *MockHeaderManipulationPolicyClient) UpdateHeaderManipulationPolicy(ctx context.Context, obj *v2.HeaderManipulationPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateHeaderManipulationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHeaderManipulationPolicy indicates an expected call of UpdateHeaderManipulationPolicy.
func (mr *MockHeaderManipulationPolicyClientMockRecorder) UpdateHeaderManipulationPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHeaderManipulationPolicy", reflect.TypeOf((*MockHeaderManipulationPolicyClient)(nil).UpdateHeaderManipulationPolicy), varargs...)
}

// UpdateHeaderManipulationPolicyStatus mocks base method.
func (m *MockHeaderManipulationPolicyClient) UpdateHeaderManipulationPolicyStatus(ctx context.Context, obj *v2.HeaderManipulationPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateHeaderManipulationPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHeaderManipulationPolicyStatus indicates an expected call of UpdateHeaderManipulationPolicyStatus.
func (mr *MockHeaderManipulationPolicyClientMockRecorder) UpdateHeaderManipulationPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHeaderManipulationPolicyStatus", reflect.TypeOf((*MockHeaderManipulationPolicyClient)(nil).UpdateHeaderManipulationPolicyStatus), varargs...)
}

// UpsertHeaderManipulationPolicy mocks base method.
func (m *MockHeaderManipulationPolicyClient) UpsertHeaderManipulationPolicy(ctx context.Context, obj *v2.HeaderManipulationPolicy, transitionFuncs ...v2.HeaderManipulationPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertHeaderManipulationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertHeaderManipulationPolicy indicates an expected call of UpsertHeaderManipulationPolicy.
func (mr *MockHeaderManipulationPolicyClientMockRecorder) UpsertHeaderManipulationPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertHeaderManipulationPolicy", reflect.TypeOf((*MockHeaderManipulationPolicyClient)(nil).UpsertHeaderManipulationPolicy), varargs...)
}

// MockMulticlusterHeaderManipulationPolicyClient is a mock of MulticlusterHeaderManipulationPolicyClient interface.
type MockMulticlusterHeaderManipulationPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterHeaderManipulationPolicyClientMockRecorder
}

// MockMulticlusterHeaderManipulationPolicyClientMockRecorder is the mock recorder for MockMulticlusterHeaderManipulationPolicyClient.
type MockMulticlusterHeaderManipulationPolicyClientMockRecorder struct {
	mock *MockMulticlusterHeaderManipulationPolicyClient
}

// NewMockMulticlusterHeaderManipulationPolicyClient creates a new mock instance.
func NewMockMulticlusterHeaderManipulationPolicyClient(ctrl *gomock.Controller) *MockMulticlusterHeaderManipulationPolicyClient {
	mock := &MockMulticlusterHeaderManipulationPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterHeaderManipulationPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterHeaderManipulationPolicyClient) EXPECT() *MockMulticlusterHeaderManipulationPolicyClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterHeaderManipulationPolicyClient) Cluster(cluster string) (v2.HeaderManipulationPolicyClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.HeaderManipulationPolicyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterHeaderManipulationPolicyClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterHeaderManipulationPolicyClient)(nil).Cluster), cluster)
}

// MockTransformationPolicyReader is a mock of TransformationPolicyReader interface.
type MockTransformationPolicyReader struct {
	ctrl     *gomock.Controller
	recorder *MockTransformationPolicyReaderMockRecorder
}

// MockTransformationPolicyReaderMockRecorder is the mock recorder for MockTransformationPolicyReader.
type MockTransformationPolicyReaderMockRecorder struct {
	mock *MockTransformationPolicyReader
}

// NewMockTransformationPolicyReader creates a new mock instance.
func NewMockTransformationPolicyReader(ctrl *gomock.Controller) *MockTransformationPolicyReader {
	mock := &MockTransformationPolicyReader{ctrl: ctrl}
	mock.recorder = &MockTransformationPolicyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransformationPolicyReader) EXPECT() *MockTransformationPolicyReaderMockRecorder {
	return m.recorder
}

// GetTransformationPolicy mocks base method.
func (m *MockTransformationPolicyReader) GetTransformationPolicy(ctx context.Context, key client.ObjectKey) (*v2.TransformationPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransformationPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.TransformationPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransformationPolicy indicates an expected call of GetTransformationPolicy.
func (mr *MockTransformationPolicyReaderMockRecorder) GetTransformationPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransformationPolicy", reflect.TypeOf((*MockTransformationPolicyReader)(nil).GetTransformationPolicy), ctx, key)
}

// ListTransformationPolicy mocks base method.
func (m *MockTransformationPolicyReader) ListTransformationPolicy(ctx context.Context, opts ...client.ListOption) (*v2.TransformationPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTransformationPolicy", varargs...)
	ret0, _ := ret[0].(*v2.TransformationPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransformationPolicy indicates an expected call of ListTransformationPolicy.
func (mr *MockTransformationPolicyReaderMockRecorder) ListTransformationPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransformationPolicy", reflect.TypeOf((*MockTransformationPolicyReader)(nil).ListTransformationPolicy), varargs...)
}

// MockTransformationPolicyWriter is a mock of TransformationPolicyWriter interface.
type MockTransformationPolicyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTransformationPolicyWriterMockRecorder
}

// MockTransformationPolicyWriterMockRecorder is the mock recorder for MockTransformationPolicyWriter.
type MockTransformationPolicyWriterMockRecorder struct {
	mock *MockTransformationPolicyWriter
}

// NewMockTransformationPolicyWriter creates a new mock instance.
func NewMockTransformationPolicyWriter(ctrl *gomock.Controller) *MockTransformationPolicyWriter {
	mock := &MockTransformationPolicyWriter{ctrl: ctrl}
	mock.recorder = &MockTransformationPolicyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransformationPolicyWriter) EXPECT() *MockTransformationPolicyWriterMockRecorder {
	return m.recorder
}

// CreateTransformationPolicy mocks base method.
func (m *MockTransformationPolicyWriter) CreateTransformationPolicy(ctx context.Context, obj *v2.TransformationPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTransformationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransformationPolicy indicates an expected call of CreateTransformationPolicy.
func (mr *MockTransformationPolicyWriterMockRecorder) CreateTransformationPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransformationPolicy", reflect.TypeOf((*MockTransformationPolicyWriter)(nil).CreateTransformationPolicy), varargs...)
}

// DeleteAllOfTransformationPolicy mocks base method.
func (m *MockTransformationPolicyWriter) DeleteAllOfTransformationPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfTransformationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfTransformationPolicy indicates an expected call of DeleteAllOfTransformationPolicy.
func (mr *MockTransformationPolicyWriterMockRecorder) DeleteAllOfTransformationPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfTransformationPolicy", reflect.TypeOf((*MockTransformationPolicyWriter)(nil).DeleteAllOfTransformationPolicy), varargs...)
}

// DeleteTransformationPolicy mocks base method.
func (m *MockTransformationPolicyWriter) DeleteTransformationPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTransformationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransformationPolicy indicates an expected call of DeleteTransformationPolicy.
func (mr *MockTransformationPolicyWriterMockRecorder) DeleteTransformationPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransformationPolicy", reflect.TypeOf((*MockTransformationPolicyWriter)(nil).DeleteTransformationPolicy), varargs...)
}

// PatchTransformationPolicy mocks base method.
func (m *MockTransformationPolicyWriter) PatchTransformationPolicy(ctx context.Context, obj *v2.TransformationPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTransformationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTransformationPolicy indicates an expected call of PatchTransformationPolicy.
func (mr *MockTransformationPolicyWriterMockRecorder) PatchTransformationPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTransformationPolicy", reflect.TypeOf((*MockTransformationPolicyWriter)(nil).PatchTransformationPolicy), varargs...)
}

// UpdateTransformationPolicy mocks base method.
func (m *MockTransformationPolicyWriter) UpdateTransformationPolicy(ctx context.Context, obj *v2.TransformationPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTransformationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransformationPolicy indicates an expected call of UpdateTransformationPolicy.
func (mr *MockTransformationPolicyWriterMockRecorder) UpdateTransformationPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransformationPolicy", reflect.TypeOf((*MockTransformationPolicyWriter)(nil).UpdateTransformationPolicy), varargs...)
}

// UpsertTransformationPolicy mocks base method.
func (m *MockTransformationPolicyWriter) UpsertTransformationPolicy(ctx context.Context, obj *v2.TransformationPolicy, transitionFuncs ...v2.TransformationPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertTransformationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTransformationPolicy indicates an expected call of UpsertTransformationPolicy.
func (mr *MockTransformationPolicyWriterMockRecorder) UpsertTransformationPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTransformationPolicy", reflect.TypeOf((*MockTransformationPolicyWriter)(nil).UpsertTransformationPolicy), varargs...)
}

// MockTransformationPolicyStatusWriter is a mock of TransformationPolicyStatusWriter interface.
type MockTransformationPolicyStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTransformationPolicyStatusWriterMockRecorder
}

// MockTransformationPolicyStatusWriterMockRecorder is the mock recorder for MockTransformationPolicyStatusWriter.
type MockTransformationPolicyStatusWriterMockRecorder struct {
	mock *MockTransformationPolicyStatusWriter
}

// NewMockTransformationPolicyStatusWriter creates a new mock instance.
func NewMockTransformationPolicyStatusWriter(ctrl *gomock.Controller) *MockTransformationPolicyStatusWriter {
	mock := &MockTransformationPolicyStatusWriter{ctrl: ctrl}
	mock.recorder = &MockTransformationPolicyStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransformationPolicyStatusWriter) EXPECT() *MockTransformationPolicyStatusWriterMockRecorder {
	return m.recorder
}

// PatchTransformationPolicyStatus mocks base method.
func (m *MockTransformationPolicyStatusWriter) PatchTransformationPolicyStatus(ctx context.Context, obj *v2.TransformationPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTransformationPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTransformationPolicyStatus indicates an expected call of PatchTransformationPolicyStatus.
func (mr *MockTransformationPolicyStatusWriterMockRecorder) PatchTransformationPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTransformationPolicyStatus", reflect.TypeOf((*MockTransformationPolicyStatusWriter)(nil).PatchTransformationPolicyStatus), varargs...)
}

// UpdateTransformationPolicyStatus mocks base method.
func (m *MockTransformationPolicyStatusWriter) UpdateTransformationPolicyStatus(ctx context.Context, obj *v2.TransformationPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTransformationPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransformationPolicyStatus indicates an expected call of UpdateTransformationPolicyStatus.
func (mr *MockTransformationPolicyStatusWriterMockRecorder) UpdateTransformationPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransformationPolicyStatus", reflect.TypeOf((*MockTransformationPolicyStatusWriter)(nil).UpdateTransformationPolicyStatus), varargs...)
}

// MockTransformationPolicyClient is a mock of TransformationPolicyClient interface.
type MockTransformationPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockTransformationPolicyClientMockRecorder
}

// MockTransformationPolicyClientMockRecorder is the mock recorder for MockTransformationPolicyClient.
type MockTransformationPolicyClientMockRecorder struct {
	mock *MockTransformationPolicyClient
}

// NewMockTransformationPolicyClient creates a new mock instance.
func NewMockTransformationPolicyClient(ctrl *gomock.Controller) *MockTransformationPolicyClient {
	mock := &MockTransformationPolicyClient{ctrl: ctrl}
	mock.recorder = &MockTransformationPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransformationPolicyClient) EXPECT() *MockTransformationPolicyClientMockRecorder {
	return m.recorder
}

// CreateTransformationPolicy mocks base method.
func (m *MockTransformationPolicyClient) CreateTransformationPolicy(ctx context.Context, obj *v2.TransformationPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTransformationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransformationPolicy indicates an expected call of CreateTransformationPolicy.
func (mr *MockTransformationPolicyClientMockRecorder) CreateTransformationPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransformationPolicy", reflect.TypeOf((*MockTransformationPolicyClient)(nil).CreateTransformationPolicy), varargs...)
}

// DeleteAllOfTransformationPolicy mocks base method.
func (m *MockTransformationPolicyClient) DeleteAllOfTransformationPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfTransformationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfTransformationPolicy indicates an expected call of DeleteAllOfTransformationPolicy.
func (mr *MockTransformationPolicyClientMockRecorder) DeleteAllOfTransformationPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfTransformationPolicy", reflect.TypeOf((*MockTransformationPolicyClient)(nil).DeleteAllOfTransformationPolicy), varargs...)
}

// DeleteTransformationPolicy mocks base method.
func (m *MockTransformationPolicyClient) DeleteTransformationPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTransformationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransformationPolicy indicates an expected call of DeleteTransformationPolicy.
func (mr *MockTransformationPolicyClientMockRecorder) DeleteTransformationPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransformationPolicy", reflect.TypeOf((*MockTransformationPolicyClient)(nil).DeleteTransformationPolicy), varargs...)
}

// GetTransformationPolicy mocks base method.
func (m *MockTransformationPolicyClient) GetTransformationPolicy(ctx context.Context, key client.ObjectKey) (*v2.TransformationPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransformationPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.TransformationPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransformationPolicy indicates an expected call of GetTransformationPolicy.
func (mr *MockTransformationPolicyClientMockRecorder) GetTransformationPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransformationPolicy", reflect.TypeOf((*MockTransformationPolicyClient)(nil).GetTransformationPolicy), ctx, key)
}

// ListTransformationPolicy mocks base method.
func (m *MockTransformationPolicyClient) ListTransformationPolicy(ctx context.Context, opts ...client.ListOption) (*v2.TransformationPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTransformationPolicy", varargs...)
	ret0, _ := ret[0].(*v2.TransformationPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransformationPolicy indicates an expected call of ListTransformationPolicy.
func (mr *MockTransformationPolicyClientMockRecorder) ListTransformationPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransformationPolicy", reflect.TypeOf((*MockTransformationPolicyClient)(nil).ListTransformationPolicy), varargs...)
}

// PatchTransformationPolicy mocks base method.
func (m *MockTransformationPolicyClient) PatchTransformationPolicy(ctx context.Context, obj *v2.TransformationPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTransformationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTransformationPolicy indicates an expected call of PatchTransformationPolicy.
func (mr *MockTransformationPolicyClientMockRecorder) PatchTransformationPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTransformationPolicy", reflect.TypeOf((*MockTransformationPolicyClient)(nil).PatchTransformationPolicy), varargs...)
}

// PatchTransformationPolicyStatus mocks base method.
func (m *MockTransformationPolicyClient) PatchTransformationPolicyStatus(ctx context.Context, obj *v2.TransformationPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTransformationPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTransformationPolicyStatus indicates an expected call of PatchTransformationPolicyStatus.
func (mr *MockTransformationPolicyClientMockRecorder) PatchTransformationPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTransformationPolicyStatus", reflect.TypeOf((*MockTransformationPolicyClient)(nil).PatchTransformationPolicyStatus), varargs...)
}

// UpdateTransformationPolicy mocks base method.
func (m *MockTransformationPolicyClient) UpdateTransformationPolicy(ctx context.Context, obj *v2.TransformationPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTransformationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransformationPolicy indicates an expected call of UpdateTransformationPolicy.
func (mr *MockTransformationPolicyClientMockRecorder) UpdateTransformationPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransformationPolicy", reflect.TypeOf((*MockTransformationPolicyClient)(nil).UpdateTransformationPolicy), varargs...)
}

// UpdateTransformationPolicyStatus mocks base method.
func (m *MockTransformationPolicyClient) UpdateTransformationPolicyStatus(ctx context.Context, obj *v2.TransformationPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTransformationPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransformationPolicyStatus indicates an expected call of UpdateTransformationPolicyStatus.
func (mr *MockTransformationPolicyClientMockRecorder) UpdateTransformationPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransformationPolicyStatus", reflect.TypeOf((*MockTransformationPolicyClient)(nil).UpdateTransformationPolicyStatus), varargs...)
}

// UpsertTransformationPolicy mocks base method.
func (m *MockTransformationPolicyClient) UpsertTransformationPolicy(ctx context.Context, obj *v2.TransformationPolicy, transitionFuncs ...v2.TransformationPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertTransformationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTransformationPolicy indicates an expected call of UpsertTransformationPolicy.
func (mr *MockTransformationPolicyClientMockRecorder) UpsertTransformationPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTransformationPolicy", reflect.TypeOf((*MockTransformationPolicyClient)(nil).UpsertTransformationPolicy), varargs...)
}

// MockMulticlusterTransformationPolicyClient is a mock of MulticlusterTransformationPolicyClient interface.
type MockMulticlusterTransformationPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTransformationPolicyClientMockRecorder
}

// MockMulticlusterTransformationPolicyClientMockRecorder is the mock recorder for MockMulticlusterTransformationPolicyClient.
type MockMulticlusterTransformationPolicyClientMockRecorder struct {
	mock *MockMulticlusterTransformationPolicyClient
}

// NewMockMulticlusterTransformationPolicyClient creates a new mock instance.
func NewMockMulticlusterTransformationPolicyClient(ctrl *gomock.Controller) *MockMulticlusterTransformationPolicyClient {
	mock := &MockMulticlusterTransformationPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTransformationPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterTransformationPolicyClient) EXPECT() *MockMulticlusterTransformationPolicyClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterTransformationPolicyClient) Cluster(cluster string) (v2.TransformationPolicyClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.TransformationPolicyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterTransformationPolicyClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterTransformationPolicyClient)(nil).Cluster), cluster)
}

// MockProxyProtocolPolicyReader is a mock of ProxyProtocolPolicyReader interface.
type MockProxyProtocolPolicyReader struct {
	ctrl     *gomock.Controller
	recorder *MockProxyProtocolPolicyReaderMockRecorder
}

// MockProxyProtocolPolicyReaderMockRecorder is the mock recorder for MockProxyProtocolPolicyReader.
type MockProxyProtocolPolicyReaderMockRecorder struct {
	mock *MockProxyProtocolPolicyReader
}

// NewMockProxyProtocolPolicyReader creates a new mock instance.
func NewMockProxyProtocolPolicyReader(ctrl *gomock.Controller) *MockProxyProtocolPolicyReader {
	mock := &MockProxyProtocolPolicyReader{ctrl: ctrl}
	mock.recorder = &MockProxyProtocolPolicyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxyProtocolPolicyReader) EXPECT() *MockProxyProtocolPolicyReaderMockRecorder {
	return m.recorder
}

// GetProxyProtocolPolicy mocks base method.
func (m *MockProxyProtocolPolicyReader) GetProxyProtocolPolicy(ctx context.Context, key client.ObjectKey) (*v2.ProxyProtocolPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProxyProtocolPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.ProxyProtocolPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProxyProtocolPolicy indicates an expected call of GetProxyProtocolPolicy.
func (mr *MockProxyProtocolPolicyReaderMockRecorder) GetProxyProtocolPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProxyProtocolPolicy", reflect.TypeOf((*MockProxyProtocolPolicyReader)(nil).GetProxyProtocolPolicy), ctx, key)
}

// ListProxyProtocolPolicy mocks base method.
func (m *MockProxyProtocolPolicyReader) ListProxyProtocolPolicy(ctx context.Context, opts ...client.ListOption) (*v2.ProxyProtocolPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProxyProtocolPolicy", varargs...)
	ret0, _ := ret[0].(*v2.ProxyProtocolPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProxyProtocolPolicy indicates an expected call of ListProxyProtocolPolicy.
func (mr *MockProxyProtocolPolicyReaderMockRecorder) ListProxyProtocolPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProxyProtocolPolicy", reflect.TypeOf((*MockProxyProtocolPolicyReader)(nil).ListProxyProtocolPolicy), varargs...)
}

// MockProxyProtocolPolicyWriter is a mock of ProxyProtocolPolicyWriter interface.
type MockProxyProtocolPolicyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockProxyProtocolPolicyWriterMockRecorder
}

// MockProxyProtocolPolicyWriterMockRecorder is the mock recorder for MockProxyProtocolPolicyWriter.
type MockProxyProtocolPolicyWriterMockRecorder struct {
	mock *MockProxyProtocolPolicyWriter
}

// NewMockProxyProtocolPolicyWriter creates a new mock instance.
func NewMockProxyProtocolPolicyWriter(ctrl *gomock.Controller) *MockProxyProtocolPolicyWriter {
	mock := &MockProxyProtocolPolicyWriter{ctrl: ctrl}
	mock.recorder = &MockProxyProtocolPolicyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxyProtocolPolicyWriter) EXPECT() *MockProxyProtocolPolicyWriterMockRecorder {
	return m.recorder
}

// CreateProxyProtocolPolicy mocks base method.
func (m *MockProxyProtocolPolicyWriter) CreateProxyProtocolPolicy(ctx context.Context, obj *v2.ProxyProtocolPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProxyProtocolPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProxyProtocolPolicy indicates an expected call of CreateProxyProtocolPolicy.
func (mr *MockProxyProtocolPolicyWriterMockRecorder) CreateProxyProtocolPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProxyProtocolPolicy", reflect.TypeOf((*MockProxyProtocolPolicyWriter)(nil).CreateProxyProtocolPolicy), varargs...)
}

// DeleteAllOfProxyProtocolPolicy mocks base method.
func (m *MockProxyProtocolPolicyWriter) DeleteAllOfProxyProtocolPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfProxyProtocolPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfProxyProtocolPolicy indicates an expected call of DeleteAllOfProxyProtocolPolicy.
func (mr *MockProxyProtocolPolicyWriterMockRecorder) DeleteAllOfProxyProtocolPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfProxyProtocolPolicy", reflect.TypeOf((*MockProxyProtocolPolicyWriter)(nil).DeleteAllOfProxyProtocolPolicy), varargs...)
}

// DeleteProxyProtocolPolicy mocks base method.
func (m *MockProxyProtocolPolicyWriter) DeleteProxyProtocolPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProxyProtocolPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProxyProtocolPolicy indicates an expected call of DeleteProxyProtocolPolicy.
func (mr *MockProxyProtocolPolicyWriterMockRecorder) DeleteProxyProtocolPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProxyProtocolPolicy", reflect.TypeOf((*MockProxyProtocolPolicyWriter)(nil).DeleteProxyProtocolPolicy), varargs...)
}

// PatchProxyProtocolPolicy mocks base method.
func (m *MockProxyProtocolPolicyWriter) PatchProxyProtocolPolicy(ctx context.Context, obj *v2.ProxyProtocolPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchProxyProtocolPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchProxyProtocolPolicy indicates an expected call of PatchProxyProtocolPolicy.
func (mr *MockProxyProtocolPolicyWriterMockRecorder) PatchProxyProtocolPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchProxyProtocolPolicy", reflect.TypeOf((*MockProxyProtocolPolicyWriter)(nil).PatchProxyProtocolPolicy), varargs...)
}

// UpdateProxyProtocolPolicy mocks base method.
func (m *MockProxyProtocolPolicyWriter) UpdateProxyProtocolPolicy(ctx context.Context, obj *v2.ProxyProtocolPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProxyProtocolPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProxyProtocolPolicy indicates an expected call of UpdateProxyProtocolPolicy.
func (mr *MockProxyProtocolPolicyWriterMockRecorder) UpdateProxyProtocolPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProxyProtocolPolicy", reflect.TypeOf((*MockProxyProtocolPolicyWriter)(nil).UpdateProxyProtocolPolicy), varargs...)
}

// UpsertProxyProtocolPolicy mocks base method.
func (m *MockProxyProtocolPolicyWriter) UpsertProxyProtocolPolicy(ctx context.Context, obj *v2.ProxyProtocolPolicy, transitionFuncs ...v2.ProxyProtocolPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertProxyProtocolPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertProxyProtocolPolicy indicates an expected call of UpsertProxyProtocolPolicy.
func (mr *MockProxyProtocolPolicyWriterMockRecorder) UpsertProxyProtocolPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertProxyProtocolPolicy", reflect.TypeOf((*MockProxyProtocolPolicyWriter)(nil).UpsertProxyProtocolPolicy), varargs...)
}

// MockProxyProtocolPolicyStatusWriter is a mock of ProxyProtocolPolicyStatusWriter interface.
type MockProxyProtocolPolicyStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockProxyProtocolPolicyStatusWriterMockRecorder
}

// MockProxyProtocolPolicyStatusWriterMockRecorder is the mock recorder for MockProxyProtocolPolicyStatusWriter.
type MockProxyProtocolPolicyStatusWriterMockRecorder struct {
	mock *MockProxyProtocolPolicyStatusWriter
}

// NewMockProxyProtocolPolicyStatusWriter creates a new mock instance.
func NewMockProxyProtocolPolicyStatusWriter(ctrl *gomock.Controller) *MockProxyProtocolPolicyStatusWriter {
	mock := &MockProxyProtocolPolicyStatusWriter{ctrl: ctrl}
	mock.recorder = &MockProxyProtocolPolicyStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxyProtocolPolicyStatusWriter) EXPECT() *MockProxyProtocolPolicyStatusWriterMockRecorder {
	return m.recorder
}

// PatchProxyProtocolPolicyStatus mocks base method.
func (m *MockProxyProtocolPolicyStatusWriter) PatchProxyProtocolPolicyStatus(ctx context.Context, obj *v2.ProxyProtocolPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchProxyProtocolPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchProxyProtocolPolicyStatus indicates an expected call of PatchProxyProtocolPolicyStatus.
func (mr *MockProxyProtocolPolicyStatusWriterMockRecorder) PatchProxyProtocolPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchProxyProtocolPolicyStatus", reflect.TypeOf((*MockProxyProtocolPolicyStatusWriter)(nil).PatchProxyProtocolPolicyStatus), varargs...)
}

// UpdateProxyProtocolPolicyStatus mocks base method.
func (m *MockProxyProtocolPolicyStatusWriter) UpdateProxyProtocolPolicyStatus(ctx context.Context, obj *v2.ProxyProtocolPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProxyProtocolPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProxyProtocolPolicyStatus indicates an expected call of UpdateProxyProtocolPolicyStatus.
func (mr *MockProxyProtocolPolicyStatusWriterMockRecorder) UpdateProxyProtocolPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProxyProtocolPolicyStatus", reflect.TypeOf((*MockProxyProtocolPolicyStatusWriter)(nil).UpdateProxyProtocolPolicyStatus), varargs...)
}

// MockProxyProtocolPolicyClient is a mock of ProxyProtocolPolicyClient interface.
type MockProxyProtocolPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockProxyProtocolPolicyClientMockRecorder
}

// MockProxyProtocolPolicyClientMockRecorder is the mock recorder for MockProxyProtocolPolicyClient.
type MockProxyProtocolPolicyClientMockRecorder struct {
	mock *MockProxyProtocolPolicyClient
}

// NewMockProxyProtocolPolicyClient creates a new mock instance.
func NewMockProxyProtocolPolicyClient(ctrl *gomock.Controller) *MockProxyProtocolPolicyClient {
	mock := &MockProxyProtocolPolicyClient{ctrl: ctrl}
	mock.recorder = &MockProxyProtocolPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxyProtocolPolicyClient) EXPECT() *MockProxyProtocolPolicyClientMockRecorder {
	return m.recorder
}

// CreateProxyProtocolPolicy mocks base method.
func (m *MockProxyProtocolPolicyClient) CreateProxyProtocolPolicy(ctx context.Context, obj *v2.ProxyProtocolPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProxyProtocolPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProxyProtocolPolicy indicates an expected call of CreateProxyProtocolPolicy.
func (mr *MockProxyProtocolPolicyClientMockRecorder) CreateProxyProtocolPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProxyProtocolPolicy", reflect.TypeOf((*MockProxyProtocolPolicyClient)(nil).CreateProxyProtocolPolicy), varargs...)
}

// DeleteAllOfProxyProtocolPolicy mocks base method.
func (m *MockProxyProtocolPolicyClient) DeleteAllOfProxyProtocolPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfProxyProtocolPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfProxyProtocolPolicy indicates an expected call of DeleteAllOfProxyProtocolPolicy.
func (mr *MockProxyProtocolPolicyClientMockRecorder) DeleteAllOfProxyProtocolPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfProxyProtocolPolicy", reflect.TypeOf((*MockProxyProtocolPolicyClient)(nil).DeleteAllOfProxyProtocolPolicy), varargs...)
}

// DeleteProxyProtocolPolicy mocks base method.
func (m *MockProxyProtocolPolicyClient) DeleteProxyProtocolPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProxyProtocolPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProxyProtocolPolicy indicates an expected call of DeleteProxyProtocolPolicy.
func (mr *MockProxyProtocolPolicyClientMockRecorder) DeleteProxyProtocolPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProxyProtocolPolicy", reflect.TypeOf((*MockProxyProtocolPolicyClient)(nil).DeleteProxyProtocolPolicy), varargs...)
}

// GetProxyProtocolPolicy mocks base method.
func (m *MockProxyProtocolPolicyClient) GetProxyProtocolPolicy(ctx context.Context, key client.ObjectKey) (*v2.ProxyProtocolPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProxyProtocolPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.ProxyProtocolPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProxyProtocolPolicy indicates an expected call of GetProxyProtocolPolicy.
func (mr *MockProxyProtocolPolicyClientMockRecorder) GetProxyProtocolPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProxyProtocolPolicy", reflect.TypeOf((*MockProxyProtocolPolicyClient)(nil).GetProxyProtocolPolicy), ctx, key)
}

// ListProxyProtocolPolicy mocks base method.
func (m *MockProxyProtocolPolicyClient) ListProxyProtocolPolicy(ctx context.Context, opts ...client.ListOption) (*v2.ProxyProtocolPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProxyProtocolPolicy", varargs...)
	ret0, _ := ret[0].(*v2.ProxyProtocolPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProxyProtocolPolicy indicates an expected call of ListProxyProtocolPolicy.
func (mr *MockProxyProtocolPolicyClientMockRecorder) ListProxyProtocolPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProxyProtocolPolicy", reflect.TypeOf((*MockProxyProtocolPolicyClient)(nil).ListProxyProtocolPolicy), varargs...)
}

// PatchProxyProtocolPolicy mocks base method.
func (m *MockProxyProtocolPolicyClient) PatchProxyProtocolPolicy(ctx context.Context, obj *v2.ProxyProtocolPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchProxyProtocolPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchProxyProtocolPolicy indicates an expected call of PatchProxyProtocolPolicy.
func (mr *MockProxyProtocolPolicyClientMockRecorder) PatchProxyProtocolPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchProxyProtocolPolicy", reflect.TypeOf((*MockProxyProtocolPolicyClient)(nil).PatchProxyProtocolPolicy), varargs...)
}

// PatchProxyProtocolPolicyStatus mocks base method.
func (m *MockProxyProtocolPolicyClient) PatchProxyProtocolPolicyStatus(ctx context.Context, obj *v2.ProxyProtocolPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchProxyProtocolPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchProxyProtocolPolicyStatus indicates an expected call of PatchProxyProtocolPolicyStatus.
func (mr *MockProxyProtocolPolicyClientMockRecorder) PatchProxyProtocolPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchProxyProtocolPolicyStatus", reflect.TypeOf((*MockProxyProtocolPolicyClient)(nil).PatchProxyProtocolPolicyStatus), varargs...)
}

// UpdateProxyProtocolPolicy mocks base method.
func (m *MockProxyProtocolPolicyClient) UpdateProxyProtocolPolicy(ctx context.Context, obj *v2.ProxyProtocolPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProxyProtocolPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProxyProtocolPolicy indicates an expected call of UpdateProxyProtocolPolicy.
func (mr *MockProxyProtocolPolicyClientMockRecorder) UpdateProxyProtocolPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProxyProtocolPolicy", reflect.TypeOf((*MockProxyProtocolPolicyClient)(nil).UpdateProxyProtocolPolicy), varargs...)
}

// UpdateProxyProtocolPolicyStatus mocks base method.
func (m *MockProxyProtocolPolicyClient) UpdateProxyProtocolPolicyStatus(ctx context.Context, obj *v2.ProxyProtocolPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProxyProtocolPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProxyProtocolPolicyStatus indicates an expected call of UpdateProxyProtocolPolicyStatus.
func (mr *MockProxyProtocolPolicyClientMockRecorder) UpdateProxyProtocolPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProxyProtocolPolicyStatus", reflect.TypeOf((*MockProxyProtocolPolicyClient)(nil).UpdateProxyProtocolPolicyStatus), varargs...)
}

// UpsertProxyProtocolPolicy mocks base method.
func (m *MockProxyProtocolPolicyClient) UpsertProxyProtocolPolicy(ctx context.Context, obj *v2.ProxyProtocolPolicy, transitionFuncs ...v2.ProxyProtocolPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertProxyProtocolPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertProxyProtocolPolicy indicates an expected call of UpsertProxyProtocolPolicy.
func (mr *MockProxyProtocolPolicyClientMockRecorder) UpsertProxyProtocolPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertProxyProtocolPolicy", reflect.TypeOf((*MockProxyProtocolPolicyClient)(nil).UpsertProxyProtocolPolicy), varargs...)
}

// MockMulticlusterProxyProtocolPolicyClient is a mock of MulticlusterProxyProtocolPolicyClient interface.
type MockMulticlusterProxyProtocolPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterProxyProtocolPolicyClientMockRecorder
}

// MockMulticlusterProxyProtocolPolicyClientMockRecorder is the mock recorder for MockMulticlusterProxyProtocolPolicyClient.
type MockMulticlusterProxyProtocolPolicyClientMockRecorder struct {
	mock *MockMulticlusterProxyProtocolPolicyClient
}

// NewMockMulticlusterProxyProtocolPolicyClient creates a new mock instance.
func NewMockMulticlusterProxyProtocolPolicyClient(ctrl *gomock.Controller) *MockMulticlusterProxyProtocolPolicyClient {
	mock := &MockMulticlusterProxyProtocolPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterProxyProtocolPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterProxyProtocolPolicyClient) EXPECT() *MockMulticlusterProxyProtocolPolicyClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterProxyProtocolPolicyClient) Cluster(cluster string) (v2.ProxyProtocolPolicyClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.ProxyProtocolPolicyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterProxyProtocolPolicyClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterProxyProtocolPolicyClient)(nil).Cluster), cluster)
}

// MockHTTPBufferPolicyReader is a mock of HTTPBufferPolicyReader interface.
type MockHTTPBufferPolicyReader struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPBufferPolicyReaderMockRecorder
}

// MockHTTPBufferPolicyReaderMockRecorder is the mock recorder for MockHTTPBufferPolicyReader.
type MockHTTPBufferPolicyReaderMockRecorder struct {
	mock *MockHTTPBufferPolicyReader
}

// NewMockHTTPBufferPolicyReader creates a new mock instance.
func NewMockHTTPBufferPolicyReader(ctrl *gomock.Controller) *MockHTTPBufferPolicyReader {
	mock := &MockHTTPBufferPolicyReader{ctrl: ctrl}
	mock.recorder = &MockHTTPBufferPolicyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPBufferPolicyReader) EXPECT() *MockHTTPBufferPolicyReaderMockRecorder {
	return m.recorder
}

// GetHTTPBufferPolicy mocks base method.
func (m *MockHTTPBufferPolicyReader) GetHTTPBufferPolicy(ctx context.Context, key client.ObjectKey) (*v2.HTTPBufferPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPBufferPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.HTTPBufferPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHTTPBufferPolicy indicates an expected call of GetHTTPBufferPolicy.
func (mr *MockHTTPBufferPolicyReaderMockRecorder) GetHTTPBufferPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPBufferPolicy", reflect.TypeOf((*MockHTTPBufferPolicyReader)(nil).GetHTTPBufferPolicy), ctx, key)
}

// ListHTTPBufferPolicy mocks base method.
func (m *MockHTTPBufferPolicyReader) ListHTTPBufferPolicy(ctx context.Context, opts ...client.ListOption) (*v2.HTTPBufferPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHTTPBufferPolicy", varargs...)
	ret0, _ := ret[0].(*v2.HTTPBufferPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHTTPBufferPolicy indicates an expected call of ListHTTPBufferPolicy.
func (mr *MockHTTPBufferPolicyReaderMockRecorder) ListHTTPBufferPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHTTPBufferPolicy", reflect.TypeOf((*MockHTTPBufferPolicyReader)(nil).ListHTTPBufferPolicy), varargs...)
}

// MockHTTPBufferPolicyWriter is a mock of HTTPBufferPolicyWriter interface.
type MockHTTPBufferPolicyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPBufferPolicyWriterMockRecorder
}

// MockHTTPBufferPolicyWriterMockRecorder is the mock recorder for MockHTTPBufferPolicyWriter.
type MockHTTPBufferPolicyWriterMockRecorder struct {
	mock *MockHTTPBufferPolicyWriter
}

// NewMockHTTPBufferPolicyWriter creates a new mock instance.
func NewMockHTTPBufferPolicyWriter(ctrl *gomock.Controller) *MockHTTPBufferPolicyWriter {
	mock := &MockHTTPBufferPolicyWriter{ctrl: ctrl}
	mock.recorder = &MockHTTPBufferPolicyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPBufferPolicyWriter) EXPECT() *MockHTTPBufferPolicyWriterMockRecorder {
	return m.recorder
}

// CreateHTTPBufferPolicy mocks base method.
func (m *MockHTTPBufferPolicyWriter) CreateHTTPBufferPolicy(ctx context.Context, obj *v2.HTTPBufferPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateHTTPBufferPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHTTPBufferPolicy indicates an expected call of CreateHTTPBufferPolicy.
func (mr *MockHTTPBufferPolicyWriterMockRecorder) CreateHTTPBufferPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHTTPBufferPolicy", reflect.TypeOf((*MockHTTPBufferPolicyWriter)(nil).CreateHTTPBufferPolicy), varargs...)
}

// DeleteAllOfHTTPBufferPolicy mocks base method.
func (m *MockHTTPBufferPolicyWriter) DeleteAllOfHTTPBufferPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfHTTPBufferPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfHTTPBufferPolicy indicates an expected call of DeleteAllOfHTTPBufferPolicy.
func (mr *MockHTTPBufferPolicyWriterMockRecorder) DeleteAllOfHTTPBufferPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfHTTPBufferPolicy", reflect.TypeOf((*MockHTTPBufferPolicyWriter)(nil).DeleteAllOfHTTPBufferPolicy), varargs...)
}

// DeleteHTTPBufferPolicy mocks base method.
func (m *MockHTTPBufferPolicyWriter) DeleteHTTPBufferPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteHTTPBufferPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHTTPBufferPolicy indicates an expected call of DeleteHTTPBufferPolicy.
func (mr *MockHTTPBufferPolicyWriterMockRecorder) DeleteHTTPBufferPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHTTPBufferPolicy", reflect.TypeOf((*MockHTTPBufferPolicyWriter)(nil).DeleteHTTPBufferPolicy), varargs...)
}

// PatchHTTPBufferPolicy mocks base method.
func (m *MockHTTPBufferPolicyWriter) PatchHTTPBufferPolicy(ctx context.Context, obj *v2.HTTPBufferPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchHTTPBufferPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchHTTPBufferPolicy indicates an expected call of PatchHTTPBufferPolicy.
func (mr *MockHTTPBufferPolicyWriterMockRecorder) PatchHTTPBufferPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchHTTPBufferPolicy", reflect.TypeOf((*MockHTTPBufferPolicyWriter)(nil).PatchHTTPBufferPolicy), varargs...)
}

// UpdateHTTPBufferPolicy mocks base method.
func (m *MockHTTPBufferPolicyWriter) UpdateHTTPBufferPolicy(ctx context.Context, obj *v2.HTTPBufferPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateHTTPBufferPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHTTPBufferPolicy indicates an expected call of UpdateHTTPBufferPolicy.
func (mr *MockHTTPBufferPolicyWriterMockRecorder) UpdateHTTPBufferPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHTTPBufferPolicy", reflect.TypeOf((*MockHTTPBufferPolicyWriter)(nil).UpdateHTTPBufferPolicy), varargs...)
}

// UpsertHTTPBufferPolicy mocks base method.
func (m *MockHTTPBufferPolicyWriter) UpsertHTTPBufferPolicy(ctx context.Context, obj *v2.HTTPBufferPolicy, transitionFuncs ...v2.HTTPBufferPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertHTTPBufferPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertHTTPBufferPolicy indicates an expected call of UpsertHTTPBufferPolicy.
func (mr *MockHTTPBufferPolicyWriterMockRecorder) UpsertHTTPBufferPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertHTTPBufferPolicy", reflect.TypeOf((*MockHTTPBufferPolicyWriter)(nil).UpsertHTTPBufferPolicy), varargs...)
}

// MockHTTPBufferPolicyStatusWriter is a mock of HTTPBufferPolicyStatusWriter interface.
type MockHTTPBufferPolicyStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPBufferPolicyStatusWriterMockRecorder
}

// MockHTTPBufferPolicyStatusWriterMockRecorder is the mock recorder for MockHTTPBufferPolicyStatusWriter.
type MockHTTPBufferPolicyStatusWriterMockRecorder struct {
	mock *MockHTTPBufferPolicyStatusWriter
}

// NewMockHTTPBufferPolicyStatusWriter creates a new mock instance.
func NewMockHTTPBufferPolicyStatusWriter(ctrl *gomock.Controller) *MockHTTPBufferPolicyStatusWriter {
	mock := &MockHTTPBufferPolicyStatusWriter{ctrl: ctrl}
	mock.recorder = &MockHTTPBufferPolicyStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPBufferPolicyStatusWriter) EXPECT() *MockHTTPBufferPolicyStatusWriterMockRecorder {
	return m.recorder
}

// PatchHTTPBufferPolicyStatus mocks base method.
func (m *MockHTTPBufferPolicyStatusWriter) PatchHTTPBufferPolicyStatus(ctx context.Context, obj *v2.HTTPBufferPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchHTTPBufferPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchHTTPBufferPolicyStatus indicates an expected call of PatchHTTPBufferPolicyStatus.
func (mr *MockHTTPBufferPolicyStatusWriterMockRecorder) PatchHTTPBufferPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchHTTPBufferPolicyStatus", reflect.TypeOf((*MockHTTPBufferPolicyStatusWriter)(nil).PatchHTTPBufferPolicyStatus), varargs...)
}

// UpdateHTTPBufferPolicyStatus mocks base method.
func (m *MockHTTPBufferPolicyStatusWriter) UpdateHTTPBufferPolicyStatus(ctx context.Context, obj *v2.HTTPBufferPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateHTTPBufferPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHTTPBufferPolicyStatus indicates an expected call of UpdateHTTPBufferPolicyStatus.
func (mr *MockHTTPBufferPolicyStatusWriterMockRecorder) UpdateHTTPBufferPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHTTPBufferPolicyStatus", reflect.TypeOf((*MockHTTPBufferPolicyStatusWriter)(nil).UpdateHTTPBufferPolicyStatus), varargs...)
}

// MockHTTPBufferPolicyClient is a mock of HTTPBufferPolicyClient interface.
type MockHTTPBufferPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPBufferPolicyClientMockRecorder
}

// MockHTTPBufferPolicyClientMockRecorder is the mock recorder for MockHTTPBufferPolicyClient.
type MockHTTPBufferPolicyClientMockRecorder struct {
	mock *MockHTTPBufferPolicyClient
}

// NewMockHTTPBufferPolicyClient creates a new mock instance.
func NewMockHTTPBufferPolicyClient(ctrl *gomock.Controller) *MockHTTPBufferPolicyClient {
	mock := &MockHTTPBufferPolicyClient{ctrl: ctrl}
	mock.recorder = &MockHTTPBufferPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPBufferPolicyClient) EXPECT() *MockHTTPBufferPolicyClientMockRecorder {
	return m.recorder
}

// CreateHTTPBufferPolicy mocks base method.
func (m *MockHTTPBufferPolicyClient) CreateHTTPBufferPolicy(ctx context.Context, obj *v2.HTTPBufferPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateHTTPBufferPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHTTPBufferPolicy indicates an expected call of CreateHTTPBufferPolicy.
func (mr *MockHTTPBufferPolicyClientMockRecorder) CreateHTTPBufferPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHTTPBufferPolicy", reflect.TypeOf((*MockHTTPBufferPolicyClient)(nil).CreateHTTPBufferPolicy), varargs...)
}

// DeleteAllOfHTTPBufferPolicy mocks base method.
func (m *MockHTTPBufferPolicyClient) DeleteAllOfHTTPBufferPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfHTTPBufferPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfHTTPBufferPolicy indicates an expected call of DeleteAllOfHTTPBufferPolicy.
func (mr *MockHTTPBufferPolicyClientMockRecorder) DeleteAllOfHTTPBufferPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfHTTPBufferPolicy", reflect.TypeOf((*MockHTTPBufferPolicyClient)(nil).DeleteAllOfHTTPBufferPolicy), varargs...)
}

// DeleteHTTPBufferPolicy mocks base method.
func (m *MockHTTPBufferPolicyClient) DeleteHTTPBufferPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteHTTPBufferPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHTTPBufferPolicy indicates an expected call of DeleteHTTPBufferPolicy.
func (mr *MockHTTPBufferPolicyClientMockRecorder) DeleteHTTPBufferPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHTTPBufferPolicy", reflect.TypeOf((*MockHTTPBufferPolicyClient)(nil).DeleteHTTPBufferPolicy), varargs...)
}

// GetHTTPBufferPolicy mocks base method.
func (m *MockHTTPBufferPolicyClient) GetHTTPBufferPolicy(ctx context.Context, key client.ObjectKey) (*v2.HTTPBufferPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPBufferPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.HTTPBufferPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHTTPBufferPolicy indicates an expected call of GetHTTPBufferPolicy.
func (mr *MockHTTPBufferPolicyClientMockRecorder) GetHTTPBufferPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPBufferPolicy", reflect.TypeOf((*MockHTTPBufferPolicyClient)(nil).GetHTTPBufferPolicy), ctx, key)
}

// ListHTTPBufferPolicy mocks base method.
func (m *MockHTTPBufferPolicyClient) ListHTTPBufferPolicy(ctx context.Context, opts ...client.ListOption) (*v2.HTTPBufferPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHTTPBufferPolicy", varargs...)
	ret0, _ := ret[0].(*v2.HTTPBufferPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHTTPBufferPolicy indicates an expected call of ListHTTPBufferPolicy.
func (mr *MockHTTPBufferPolicyClientMockRecorder) ListHTTPBufferPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHTTPBufferPolicy", reflect.TypeOf((*MockHTTPBufferPolicyClient)(nil).ListHTTPBufferPolicy), varargs...)
}

// PatchHTTPBufferPolicy mocks base method.
func (m *MockHTTPBufferPolicyClient) PatchHTTPBufferPolicy(ctx context.Context, obj *v2.HTTPBufferPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchHTTPBufferPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchHTTPBufferPolicy indicates an expected call of PatchHTTPBufferPolicy.
func (mr *MockHTTPBufferPolicyClientMockRecorder) PatchHTTPBufferPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchHTTPBufferPolicy", reflect.TypeOf((*MockHTTPBufferPolicyClient)(nil).PatchHTTPBufferPolicy), varargs...)
}

// PatchHTTPBufferPolicyStatus mocks base method.
func (m *MockHTTPBufferPolicyClient) PatchHTTPBufferPolicyStatus(ctx context.Context, obj *v2.HTTPBufferPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchHTTPBufferPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchHTTPBufferPolicyStatus indicates an expected call of PatchHTTPBufferPolicyStatus.
func (mr *MockHTTPBufferPolicyClientMockRecorder) PatchHTTPBufferPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchHTTPBufferPolicyStatus", reflect.TypeOf((*MockHTTPBufferPolicyClient)(nil).PatchHTTPBufferPolicyStatus), varargs...)
}

// UpdateHTTPBufferPolicy mocks base method.
func (m *MockHTTPBufferPolicyClient) UpdateHTTPBufferPolicy(ctx context.Context, obj *v2.HTTPBufferPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateHTTPBufferPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHTTPBufferPolicy indicates an expected call of UpdateHTTPBufferPolicy.
func (mr *MockHTTPBufferPolicyClientMockRecorder) UpdateHTTPBufferPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHTTPBufferPolicy", reflect.TypeOf((*MockHTTPBufferPolicyClient)(nil).UpdateHTTPBufferPolicy), varargs...)
}

// UpdateHTTPBufferPolicyStatus mocks base method.
func (m *MockHTTPBufferPolicyClient) UpdateHTTPBufferPolicyStatus(ctx context.Context, obj *v2.HTTPBufferPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateHTTPBufferPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHTTPBufferPolicyStatus indicates an expected call of UpdateHTTPBufferPolicyStatus.
func (mr *MockHTTPBufferPolicyClientMockRecorder) UpdateHTTPBufferPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHTTPBufferPolicyStatus", reflect.TypeOf((*MockHTTPBufferPolicyClient)(nil).UpdateHTTPBufferPolicyStatus), varargs...)
}

// UpsertHTTPBufferPolicy mocks base method.
func (m *MockHTTPBufferPolicyClient) UpsertHTTPBufferPolicy(ctx context.Context, obj *v2.HTTPBufferPolicy, transitionFuncs ...v2.HTTPBufferPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertHTTPBufferPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertHTTPBufferPolicy indicates an expected call of UpsertHTTPBufferPolicy.
func (mr *MockHTTPBufferPolicyClientMockRecorder) UpsertHTTPBufferPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertHTTPBufferPolicy", reflect.TypeOf((*MockHTTPBufferPolicyClient)(nil).UpsertHTTPBufferPolicy), varargs...)
}

// MockMulticlusterHTTPBufferPolicyClient is a mock of MulticlusterHTTPBufferPolicyClient interface.
type MockMulticlusterHTTPBufferPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterHTTPBufferPolicyClientMockRecorder
}

// MockMulticlusterHTTPBufferPolicyClientMockRecorder is the mock recorder for MockMulticlusterHTTPBufferPolicyClient.
type MockMulticlusterHTTPBufferPolicyClientMockRecorder struct {
	mock *MockMulticlusterHTTPBufferPolicyClient
}

// NewMockMulticlusterHTTPBufferPolicyClient creates a new mock instance.
func NewMockMulticlusterHTTPBufferPolicyClient(ctrl *gomock.Controller) *MockMulticlusterHTTPBufferPolicyClient {
	mock := &MockMulticlusterHTTPBufferPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterHTTPBufferPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterHTTPBufferPolicyClient) EXPECT() *MockMulticlusterHTTPBufferPolicyClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterHTTPBufferPolicyClient) Cluster(cluster string) (v2.HTTPBufferPolicyClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.HTTPBufferPolicyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterHTTPBufferPolicyClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterHTTPBufferPolicyClient)(nil).Cluster), cluster)
}
