// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/policy/v2/trafficcontrol/load_balancer_policy.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *LoadBalancerPolicySpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*LoadBalancerPolicySpec)
	if !ok {
		that2, ok := that.(LoadBalancerPolicySpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetApplyToDestinations()) != len(target.GetApplyToDestinations()) {
		return false
	}
	for idx, v := range m.GetApplyToDestinations() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetApplyToDestinations()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetApplyToDestinations()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetConfig(), target.GetConfig()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *LoadBalancerPolicyStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*LoadBalancerPolicyStatus)
	if !ok {
		that2, ok := that.(LoadBalancerPolicyStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetCommon()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCommon()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCommon(), target.GetCommon()) {
			return false
		}
	}

	if m.GetNumSelectedDestinationPorts() != target.GetNumSelectedDestinationPorts() {
		return false
	}

	return true
}

// Equal function
func (m *LoadBalancerPolicyReport) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*LoadBalancerPolicyReport)
	if !ok {
		that2, ok := that.(LoadBalancerPolicyReport)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetWorkspaces()) != len(target.GetWorkspaces()) {
		return false
	}
	for k, v := range m.GetWorkspaces() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetWorkspaces()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetWorkspaces()[k]) {
				return false
			}
		}

	}

	if len(m.GetSelectedDestinationPorts()) != len(target.GetSelectedDestinationPorts()) {
		return false
	}
	for idx, v := range m.GetSelectedDestinationPorts() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetSelectedDestinationPorts()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetSelectedDestinationPorts()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *LoadBalancerPolicySpec_Config) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*LoadBalancerPolicySpec_Config)
	if !ok {
		that2, ok := that.(LoadBalancerPolicySpec_Config)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetWarmupDurationSecs()).(equality.Equalizer); ok {
		if !h.Equal(target.GetWarmupDurationSecs()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetWarmupDurationSecs(), target.GetWarmupDurationSecs()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetHealthyPanicThreshold()).(equality.Equalizer); ok {
		if !h.Equal(target.GetHealthyPanicThreshold()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetHealthyPanicThreshold(), target.GetHealthyPanicThreshold()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetUpdateMergeWindow()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUpdateMergeWindow()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUpdateMergeWindow(), target.GetUpdateMergeWindow()) {
			return false
		}
	}

	switch m.LbPolicy.(type) {

	case *LoadBalancerPolicySpec_Config_Simple:
		if _, ok := target.LbPolicy.(*LoadBalancerPolicySpec_Config_Simple); !ok {
			return false
		}

		if m.GetSimple() != target.GetSimple() {
			return false
		}

	case *LoadBalancerPolicySpec_Config_ConsistentHash:
		if _, ok := target.LbPolicy.(*LoadBalancerPolicySpec_Config_ConsistentHash); !ok {
			return false
		}

		if h, ok := interface{}(m.GetConsistentHash()).(equality.Equalizer); ok {
			if !h.Equal(target.GetConsistentHash()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetConsistentHash(), target.GetConsistentHash()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.LbPolicy != target.LbPolicy {
			return false
		}
	}

	return true
}

// Equal function
func (m *LoadBalancerPolicySpec_Config_ConsistentHashLB) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*LoadBalancerPolicySpec_Config_ConsistentHashLB)
	if !ok {
		that2, ok := that.(LoadBalancerPolicySpec_Config_ConsistentHashLB)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.HashKey.(type) {

	case *LoadBalancerPolicySpec_Config_ConsistentHashLB_HttpHeaderName:
		if _, ok := target.HashKey.(*LoadBalancerPolicySpec_Config_ConsistentHashLB_HttpHeaderName); !ok {
			return false
		}

		if strings.Compare(m.GetHttpHeaderName(), target.GetHttpHeaderName()) != 0 {
			return false
		}

	case *LoadBalancerPolicySpec_Config_ConsistentHashLB_HttpCookie:
		if _, ok := target.HashKey.(*LoadBalancerPolicySpec_Config_ConsistentHashLB_HttpCookie); !ok {
			return false
		}

		if h, ok := interface{}(m.GetHttpCookie()).(equality.Equalizer); ok {
			if !h.Equal(target.GetHttpCookie()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetHttpCookie(), target.GetHttpCookie()) {
				return false
			}
		}

	case *LoadBalancerPolicySpec_Config_ConsistentHashLB_UseSourceIp:
		if _, ok := target.HashKey.(*LoadBalancerPolicySpec_Config_ConsistentHashLB_UseSourceIp); !ok {
			return false
		}

		if m.GetUseSourceIp() != target.GetUseSourceIp() {
			return false
		}

	case *LoadBalancerPolicySpec_Config_ConsistentHashLB_HttpQueryParameterName:
		if _, ok := target.HashKey.(*LoadBalancerPolicySpec_Config_ConsistentHashLB_HttpQueryParameterName); !ok {
			return false
		}

		if strings.Compare(m.GetHttpQueryParameterName(), target.GetHttpQueryParameterName()) != 0 {
			return false
		}

	default:
		// m is nil but target is not nil
		if m.HashKey != target.HashKey {
			return false
		}
	}

	return true
}

// Equal function
func (m *LoadBalancerPolicySpec_Config_ConsistentHashLB_HTTPCookie) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*LoadBalancerPolicySpec_Config_ConsistentHashLB_HTTPCookie)
	if !ok {
		that2, ok := that.(LoadBalancerPolicySpec_Config_ConsistentHashLB_HTTPCookie)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetPath(), target.GetPath()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetTtl()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTtl()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTtl(), target.GetTtl()) {
			return false
		}
	}

	return true
}
