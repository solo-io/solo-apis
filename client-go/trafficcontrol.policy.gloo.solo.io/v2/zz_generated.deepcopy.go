// Code generated by skv2. DO NOT EDIT.

// This file contains generated Deepcopy methods for trafficcontrol.policy.gloo.solo.io/v2 resources

package v2

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// Generated Deepcopy methods for MirrorPolicy

func (in *MirrorPolicy) DeepCopyInto(out *MirrorPolicy) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)

	// deepcopy spec
	in.Spec.DeepCopyInto(&out.Spec)
	// deepcopy status
	in.Status.DeepCopyInto(&out.Status)

	return
}

func (in *MirrorPolicy) DeepCopy() *MirrorPolicy {
	if in == nil {
		return nil
	}
	out := new(MirrorPolicy)
	in.DeepCopyInto(out)
	return out
}

func (in *MirrorPolicy) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

func (in *MirrorPolicyList) DeepCopyInto(out *MirrorPolicyList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MirrorPolicy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

func (in *MirrorPolicyList) DeepCopy() *MirrorPolicyList {
	if in == nil {
		return nil
	}
	out := new(MirrorPolicyList)
	in.DeepCopyInto(out)
	return out
}

func (in *MirrorPolicyList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// Generated Deepcopy methods for RateLimitPolicy

func (in *RateLimitPolicy) DeepCopyInto(out *RateLimitPolicy) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)

	// deepcopy spec
	in.Spec.DeepCopyInto(&out.Spec)
	// deepcopy status
	in.Status.DeepCopyInto(&out.Status)

	return
}

func (in *RateLimitPolicy) DeepCopy() *RateLimitPolicy {
	if in == nil {
		return nil
	}
	out := new(RateLimitPolicy)
	in.DeepCopyInto(out)
	return out
}

func (in *RateLimitPolicy) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

func (in *RateLimitPolicyList) DeepCopyInto(out *RateLimitPolicyList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RateLimitPolicy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

func (in *RateLimitPolicyList) DeepCopy() *RateLimitPolicyList {
	if in == nil {
		return nil
	}
	out := new(RateLimitPolicyList)
	in.DeepCopyInto(out)
	return out
}

func (in *RateLimitPolicyList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// Generated Deepcopy methods for RateLimitClientConfig

func (in *RateLimitClientConfig) DeepCopyInto(out *RateLimitClientConfig) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)

	// deepcopy spec
	in.Spec.DeepCopyInto(&out.Spec)
	// deepcopy status
	in.Status.DeepCopyInto(&out.Status)

	return
}

func (in *RateLimitClientConfig) DeepCopy() *RateLimitClientConfig {
	if in == nil {
		return nil
	}
	out := new(RateLimitClientConfig)
	in.DeepCopyInto(out)
	return out
}

func (in *RateLimitClientConfig) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

func (in *RateLimitClientConfigList) DeepCopyInto(out *RateLimitClientConfigList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RateLimitClientConfig, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

func (in *RateLimitClientConfigList) DeepCopy() *RateLimitClientConfigList {
	if in == nil {
		return nil
	}
	out := new(RateLimitClientConfigList)
	in.DeepCopyInto(out)
	return out
}

func (in *RateLimitClientConfigList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// Generated Deepcopy methods for HeaderManipulationPolicy

func (in *HeaderManipulationPolicy) DeepCopyInto(out *HeaderManipulationPolicy) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)

	// deepcopy spec
	in.Spec.DeepCopyInto(&out.Spec)
	// deepcopy status
	in.Status.DeepCopyInto(&out.Status)

	return
}

func (in *HeaderManipulationPolicy) DeepCopy() *HeaderManipulationPolicy {
	if in == nil {
		return nil
	}
	out := new(HeaderManipulationPolicy)
	in.DeepCopyInto(out)
	return out
}

func (in *HeaderManipulationPolicy) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

func (in *HeaderManipulationPolicyList) DeepCopyInto(out *HeaderManipulationPolicyList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]HeaderManipulationPolicy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

func (in *HeaderManipulationPolicyList) DeepCopy() *HeaderManipulationPolicyList {
	if in == nil {
		return nil
	}
	out := new(HeaderManipulationPolicyList)
	in.DeepCopyInto(out)
	return out
}

func (in *HeaderManipulationPolicyList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// Generated Deepcopy methods for TransformationPolicy

func (in *TransformationPolicy) DeepCopyInto(out *TransformationPolicy) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)

	// deepcopy spec
	in.Spec.DeepCopyInto(&out.Spec)
	// deepcopy status
	in.Status.DeepCopyInto(&out.Status)

	return
}

func (in *TransformationPolicy) DeepCopy() *TransformationPolicy {
	if in == nil {
		return nil
	}
	out := new(TransformationPolicy)
	in.DeepCopyInto(out)
	return out
}

func (in *TransformationPolicy) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

func (in *TransformationPolicyList) DeepCopyInto(out *TransformationPolicyList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]TransformationPolicy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

func (in *TransformationPolicyList) DeepCopy() *TransformationPolicyList {
	if in == nil {
		return nil
	}
	out := new(TransformationPolicyList)
	in.DeepCopyInto(out)
	return out
}

func (in *TransformationPolicyList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// Generated Deepcopy methods for LoadBalancerPolicy

func (in *LoadBalancerPolicy) DeepCopyInto(out *LoadBalancerPolicy) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)

	// deepcopy spec
	in.Spec.DeepCopyInto(&out.Spec)
	// deepcopy status
	in.Status.DeepCopyInto(&out.Status)

	return
}

func (in *LoadBalancerPolicy) DeepCopy() *LoadBalancerPolicy {
	if in == nil {
		return nil
	}
	out := new(LoadBalancerPolicy)
	in.DeepCopyInto(out)
	return out
}

func (in *LoadBalancerPolicy) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

func (in *LoadBalancerPolicyList) DeepCopyInto(out *LoadBalancerPolicyList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]LoadBalancerPolicy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

func (in *LoadBalancerPolicyList) DeepCopy() *LoadBalancerPolicyList {
	if in == nil {
		return nil
	}
	out := new(LoadBalancerPolicyList)
	in.DeepCopyInto(out)
	return out
}

func (in *LoadBalancerPolicyList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// Generated Deepcopy methods for ProxyProtocolPolicy

func (in *ProxyProtocolPolicy) DeepCopyInto(out *ProxyProtocolPolicy) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)

	// deepcopy spec
	in.Spec.DeepCopyInto(&out.Spec)
	// deepcopy status
	in.Status.DeepCopyInto(&out.Status)

	return
}

func (in *ProxyProtocolPolicy) DeepCopy() *ProxyProtocolPolicy {
	if in == nil {
		return nil
	}
	out := new(ProxyProtocolPolicy)
	in.DeepCopyInto(out)
	return out
}

func (in *ProxyProtocolPolicy) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

func (in *ProxyProtocolPolicyList) DeepCopyInto(out *ProxyProtocolPolicyList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ProxyProtocolPolicy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

func (in *ProxyProtocolPolicyList) DeepCopy() *ProxyProtocolPolicyList {
	if in == nil {
		return nil
	}
	out := new(ProxyProtocolPolicyList)
	in.DeepCopyInto(out)
	return out
}

func (in *ProxyProtocolPolicyList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// Generated Deepcopy methods for HTTPBufferPolicy

func (in *HTTPBufferPolicy) DeepCopyInto(out *HTTPBufferPolicy) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)

	// deepcopy spec
	in.Spec.DeepCopyInto(&out.Spec)
	// deepcopy status
	in.Status.DeepCopyInto(&out.Status)

	return
}

func (in *HTTPBufferPolicy) DeepCopy() *HTTPBufferPolicy {
	if in == nil {
		return nil
	}
	out := new(HTTPBufferPolicy)
	in.DeepCopyInto(out)
	return out
}

func (in *HTTPBufferPolicy) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

func (in *HTTPBufferPolicyList) DeepCopyInto(out *HTTPBufferPolicyList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]HTTPBufferPolicy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

func (in *HTTPBufferPolicyList) DeepCopy() *HTTPBufferPolicyList {
	if in == nil {
		return nil
	}
	out := new(HTTPBufferPolicyList)
	in.DeepCopyInto(out)
	return out
}

func (in *HTTPBufferPolicyList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}
