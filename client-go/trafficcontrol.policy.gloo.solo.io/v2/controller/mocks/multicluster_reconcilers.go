// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go
//
// Generated by this command:
//
//	mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go
//

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	gomock "go.uber.org/mock/gomock"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"

	v2 "github.com/solo-io/solo-apis/client-go/trafficcontrol.policy.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/client-go/trafficcontrol.policy.gloo.solo.io/v2/controller"
)

// MockMulticlusterMirrorPolicyReconciler is a mock of MulticlusterMirrorPolicyReconciler interface.
type MockMulticlusterMirrorPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMirrorPolicyReconcilerMockRecorder
}

// MockMulticlusterMirrorPolicyReconcilerMockRecorder is the mock recorder for MockMulticlusterMirrorPolicyReconciler.
type MockMulticlusterMirrorPolicyReconcilerMockRecorder struct {
	mock *MockMulticlusterMirrorPolicyReconciler
}

// NewMockMulticlusterMirrorPolicyReconciler creates a new mock instance.
func NewMockMulticlusterMirrorPolicyReconciler(ctrl *gomock.Controller) *MockMulticlusterMirrorPolicyReconciler {
	mock := &MockMulticlusterMirrorPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMirrorPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterMirrorPolicyReconciler) EXPECT() *MockMulticlusterMirrorPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMirrorPolicy mocks base method.
func (m *MockMulticlusterMirrorPolicyReconciler) ReconcileMirrorPolicy(clusterName string, obj *v2.MirrorPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMirrorPolicy", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileMirrorPolicy indicates an expected call of ReconcileMirrorPolicy.
func (mr *MockMulticlusterMirrorPolicyReconcilerMockRecorder) ReconcileMirrorPolicy(clusterName, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMirrorPolicy", reflect.TypeOf((*MockMulticlusterMirrorPolicyReconciler)(nil).ReconcileMirrorPolicy), clusterName, obj)
}

// MockMulticlusterMirrorPolicyDeletionReconciler is a mock of MulticlusterMirrorPolicyDeletionReconciler interface.
type MockMulticlusterMirrorPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMirrorPolicyDeletionReconcilerMockRecorder
}

// MockMulticlusterMirrorPolicyDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterMirrorPolicyDeletionReconciler.
type MockMulticlusterMirrorPolicyDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterMirrorPolicyDeletionReconciler
}

// NewMockMulticlusterMirrorPolicyDeletionReconciler creates a new mock instance.
func NewMockMulticlusterMirrorPolicyDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterMirrorPolicyDeletionReconciler {
	mock := &MockMulticlusterMirrorPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMirrorPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterMirrorPolicyDeletionReconciler) EXPECT() *MockMulticlusterMirrorPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMirrorPolicyDeletion mocks base method.
func (m *MockMulticlusterMirrorPolicyDeletionReconciler) ReconcileMirrorPolicyDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMirrorPolicyDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileMirrorPolicyDeletion indicates an expected call of ReconcileMirrorPolicyDeletion.
func (mr *MockMulticlusterMirrorPolicyDeletionReconcilerMockRecorder) ReconcileMirrorPolicyDeletion(clusterName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMirrorPolicyDeletion", reflect.TypeOf((*MockMulticlusterMirrorPolicyDeletionReconciler)(nil).ReconcileMirrorPolicyDeletion), clusterName, req)
}

// MockMulticlusterMirrorPolicyReconcileLoop is a mock of MulticlusterMirrorPolicyReconcileLoop interface.
type MockMulticlusterMirrorPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMirrorPolicyReconcileLoopMockRecorder
}

// MockMulticlusterMirrorPolicyReconcileLoopMockRecorder is the mock recorder for MockMulticlusterMirrorPolicyReconcileLoop.
type MockMulticlusterMirrorPolicyReconcileLoopMockRecorder struct {
	mock *MockMulticlusterMirrorPolicyReconcileLoop
}

// NewMockMulticlusterMirrorPolicyReconcileLoop creates a new mock instance.
func NewMockMulticlusterMirrorPolicyReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterMirrorPolicyReconcileLoop {
	mock := &MockMulticlusterMirrorPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMirrorPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterMirrorPolicyReconcileLoop) EXPECT() *MockMulticlusterMirrorPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterMirrorPolicyReconciler mocks base method.
func (m *MockMulticlusterMirrorPolicyReconcileLoop) AddMulticlusterMirrorPolicyReconciler(ctx context.Context, rec controller.MulticlusterMirrorPolicyReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterMirrorPolicyReconciler", varargs...)
}

// AddMulticlusterMirrorPolicyReconciler indicates an expected call of AddMulticlusterMirrorPolicyReconciler.
func (mr *MockMulticlusterMirrorPolicyReconcileLoopMockRecorder) AddMulticlusterMirrorPolicyReconciler(ctx, rec any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterMirrorPolicyReconciler", reflect.TypeOf((*MockMulticlusterMirrorPolicyReconcileLoop)(nil).AddMulticlusterMirrorPolicyReconciler), varargs...)
}

// MockMulticlusterRateLimitPolicyReconciler is a mock of MulticlusterRateLimitPolicyReconciler interface.
type MockMulticlusterRateLimitPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRateLimitPolicyReconcilerMockRecorder
}

// MockMulticlusterRateLimitPolicyReconcilerMockRecorder is the mock recorder for MockMulticlusterRateLimitPolicyReconciler.
type MockMulticlusterRateLimitPolicyReconcilerMockRecorder struct {
	mock *MockMulticlusterRateLimitPolicyReconciler
}

// NewMockMulticlusterRateLimitPolicyReconciler creates a new mock instance.
func NewMockMulticlusterRateLimitPolicyReconciler(ctrl *gomock.Controller) *MockMulticlusterRateLimitPolicyReconciler {
	mock := &MockMulticlusterRateLimitPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRateLimitPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRateLimitPolicyReconciler) EXPECT() *MockMulticlusterRateLimitPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRateLimitPolicy mocks base method.
func (m *MockMulticlusterRateLimitPolicyReconciler) ReconcileRateLimitPolicy(clusterName string, obj *v2.RateLimitPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRateLimitPolicy", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRateLimitPolicy indicates an expected call of ReconcileRateLimitPolicy.
func (mr *MockMulticlusterRateLimitPolicyReconcilerMockRecorder) ReconcileRateLimitPolicy(clusterName, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRateLimitPolicy", reflect.TypeOf((*MockMulticlusterRateLimitPolicyReconciler)(nil).ReconcileRateLimitPolicy), clusterName, obj)
}

// MockMulticlusterRateLimitPolicyDeletionReconciler is a mock of MulticlusterRateLimitPolicyDeletionReconciler interface.
type MockMulticlusterRateLimitPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRateLimitPolicyDeletionReconcilerMockRecorder
}

// MockMulticlusterRateLimitPolicyDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterRateLimitPolicyDeletionReconciler.
type MockMulticlusterRateLimitPolicyDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterRateLimitPolicyDeletionReconciler
}

// NewMockMulticlusterRateLimitPolicyDeletionReconciler creates a new mock instance.
func NewMockMulticlusterRateLimitPolicyDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterRateLimitPolicyDeletionReconciler {
	mock := &MockMulticlusterRateLimitPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRateLimitPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRateLimitPolicyDeletionReconciler) EXPECT() *MockMulticlusterRateLimitPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRateLimitPolicyDeletion mocks base method.
func (m *MockMulticlusterRateLimitPolicyDeletionReconciler) ReconcileRateLimitPolicyDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRateLimitPolicyDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileRateLimitPolicyDeletion indicates an expected call of ReconcileRateLimitPolicyDeletion.
func (mr *MockMulticlusterRateLimitPolicyDeletionReconcilerMockRecorder) ReconcileRateLimitPolicyDeletion(clusterName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRateLimitPolicyDeletion", reflect.TypeOf((*MockMulticlusterRateLimitPolicyDeletionReconciler)(nil).ReconcileRateLimitPolicyDeletion), clusterName, req)
}

// MockMulticlusterRateLimitPolicyReconcileLoop is a mock of MulticlusterRateLimitPolicyReconcileLoop interface.
type MockMulticlusterRateLimitPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRateLimitPolicyReconcileLoopMockRecorder
}

// MockMulticlusterRateLimitPolicyReconcileLoopMockRecorder is the mock recorder for MockMulticlusterRateLimitPolicyReconcileLoop.
type MockMulticlusterRateLimitPolicyReconcileLoopMockRecorder struct {
	mock *MockMulticlusterRateLimitPolicyReconcileLoop
}

// NewMockMulticlusterRateLimitPolicyReconcileLoop creates a new mock instance.
func NewMockMulticlusterRateLimitPolicyReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterRateLimitPolicyReconcileLoop {
	mock := &MockMulticlusterRateLimitPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRateLimitPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRateLimitPolicyReconcileLoop) EXPECT() *MockMulticlusterRateLimitPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterRateLimitPolicyReconciler mocks base method.
func (m *MockMulticlusterRateLimitPolicyReconcileLoop) AddMulticlusterRateLimitPolicyReconciler(ctx context.Context, rec controller.MulticlusterRateLimitPolicyReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterRateLimitPolicyReconciler", varargs...)
}

// AddMulticlusterRateLimitPolicyReconciler indicates an expected call of AddMulticlusterRateLimitPolicyReconciler.
func (mr *MockMulticlusterRateLimitPolicyReconcileLoopMockRecorder) AddMulticlusterRateLimitPolicyReconciler(ctx, rec any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterRateLimitPolicyReconciler", reflect.TypeOf((*MockMulticlusterRateLimitPolicyReconcileLoop)(nil).AddMulticlusterRateLimitPolicyReconciler), varargs...)
}

// MockMulticlusterRateLimitClientConfigReconciler is a mock of MulticlusterRateLimitClientConfigReconciler interface.
type MockMulticlusterRateLimitClientConfigReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRateLimitClientConfigReconcilerMockRecorder
}

// MockMulticlusterRateLimitClientConfigReconcilerMockRecorder is the mock recorder for MockMulticlusterRateLimitClientConfigReconciler.
type MockMulticlusterRateLimitClientConfigReconcilerMockRecorder struct {
	mock *MockMulticlusterRateLimitClientConfigReconciler
}

// NewMockMulticlusterRateLimitClientConfigReconciler creates a new mock instance.
func NewMockMulticlusterRateLimitClientConfigReconciler(ctrl *gomock.Controller) *MockMulticlusterRateLimitClientConfigReconciler {
	mock := &MockMulticlusterRateLimitClientConfigReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRateLimitClientConfigReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRateLimitClientConfigReconciler) EXPECT() *MockMulticlusterRateLimitClientConfigReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRateLimitClientConfig mocks base method.
func (m *MockMulticlusterRateLimitClientConfigReconciler) ReconcileRateLimitClientConfig(clusterName string, obj *v2.RateLimitClientConfig) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRateLimitClientConfig", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRateLimitClientConfig indicates an expected call of ReconcileRateLimitClientConfig.
func (mr *MockMulticlusterRateLimitClientConfigReconcilerMockRecorder) ReconcileRateLimitClientConfig(clusterName, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRateLimitClientConfig", reflect.TypeOf((*MockMulticlusterRateLimitClientConfigReconciler)(nil).ReconcileRateLimitClientConfig), clusterName, obj)
}

// MockMulticlusterRateLimitClientConfigDeletionReconciler is a mock of MulticlusterRateLimitClientConfigDeletionReconciler interface.
type MockMulticlusterRateLimitClientConfigDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRateLimitClientConfigDeletionReconcilerMockRecorder
}

// MockMulticlusterRateLimitClientConfigDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterRateLimitClientConfigDeletionReconciler.
type MockMulticlusterRateLimitClientConfigDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterRateLimitClientConfigDeletionReconciler
}

// NewMockMulticlusterRateLimitClientConfigDeletionReconciler creates a new mock instance.
func NewMockMulticlusterRateLimitClientConfigDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterRateLimitClientConfigDeletionReconciler {
	mock := &MockMulticlusterRateLimitClientConfigDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRateLimitClientConfigDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRateLimitClientConfigDeletionReconciler) EXPECT() *MockMulticlusterRateLimitClientConfigDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRateLimitClientConfigDeletion mocks base method.
func (m *MockMulticlusterRateLimitClientConfigDeletionReconciler) ReconcileRateLimitClientConfigDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRateLimitClientConfigDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileRateLimitClientConfigDeletion indicates an expected call of ReconcileRateLimitClientConfigDeletion.
func (mr *MockMulticlusterRateLimitClientConfigDeletionReconcilerMockRecorder) ReconcileRateLimitClientConfigDeletion(clusterName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRateLimitClientConfigDeletion", reflect.TypeOf((*MockMulticlusterRateLimitClientConfigDeletionReconciler)(nil).ReconcileRateLimitClientConfigDeletion), clusterName, req)
}

// MockMulticlusterRateLimitClientConfigReconcileLoop is a mock of MulticlusterRateLimitClientConfigReconcileLoop interface.
type MockMulticlusterRateLimitClientConfigReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRateLimitClientConfigReconcileLoopMockRecorder
}

// MockMulticlusterRateLimitClientConfigReconcileLoopMockRecorder is the mock recorder for MockMulticlusterRateLimitClientConfigReconcileLoop.
type MockMulticlusterRateLimitClientConfigReconcileLoopMockRecorder struct {
	mock *MockMulticlusterRateLimitClientConfigReconcileLoop
}

// NewMockMulticlusterRateLimitClientConfigReconcileLoop creates a new mock instance.
func NewMockMulticlusterRateLimitClientConfigReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterRateLimitClientConfigReconcileLoop {
	mock := &MockMulticlusterRateLimitClientConfigReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRateLimitClientConfigReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRateLimitClientConfigReconcileLoop) EXPECT() *MockMulticlusterRateLimitClientConfigReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterRateLimitClientConfigReconciler mocks base method.
func (m *MockMulticlusterRateLimitClientConfigReconcileLoop) AddMulticlusterRateLimitClientConfigReconciler(ctx context.Context, rec controller.MulticlusterRateLimitClientConfigReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterRateLimitClientConfigReconciler", varargs...)
}

// AddMulticlusterRateLimitClientConfigReconciler indicates an expected call of AddMulticlusterRateLimitClientConfigReconciler.
func (mr *MockMulticlusterRateLimitClientConfigReconcileLoopMockRecorder) AddMulticlusterRateLimitClientConfigReconciler(ctx, rec any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterRateLimitClientConfigReconciler", reflect.TypeOf((*MockMulticlusterRateLimitClientConfigReconcileLoop)(nil).AddMulticlusterRateLimitClientConfigReconciler), varargs...)
}

// MockMulticlusterHeaderManipulationPolicyReconciler is a mock of MulticlusterHeaderManipulationPolicyReconciler interface.
type MockMulticlusterHeaderManipulationPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterHeaderManipulationPolicyReconcilerMockRecorder
}

// MockMulticlusterHeaderManipulationPolicyReconcilerMockRecorder is the mock recorder for MockMulticlusterHeaderManipulationPolicyReconciler.
type MockMulticlusterHeaderManipulationPolicyReconcilerMockRecorder struct {
	mock *MockMulticlusterHeaderManipulationPolicyReconciler
}

// NewMockMulticlusterHeaderManipulationPolicyReconciler creates a new mock instance.
func NewMockMulticlusterHeaderManipulationPolicyReconciler(ctrl *gomock.Controller) *MockMulticlusterHeaderManipulationPolicyReconciler {
	mock := &MockMulticlusterHeaderManipulationPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterHeaderManipulationPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterHeaderManipulationPolicyReconciler) EXPECT() *MockMulticlusterHeaderManipulationPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileHeaderManipulationPolicy mocks base method.
func (m *MockMulticlusterHeaderManipulationPolicyReconciler) ReconcileHeaderManipulationPolicy(clusterName string, obj *v2.HeaderManipulationPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileHeaderManipulationPolicy", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileHeaderManipulationPolicy indicates an expected call of ReconcileHeaderManipulationPolicy.
func (mr *MockMulticlusterHeaderManipulationPolicyReconcilerMockRecorder) ReconcileHeaderManipulationPolicy(clusterName, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileHeaderManipulationPolicy", reflect.TypeOf((*MockMulticlusterHeaderManipulationPolicyReconciler)(nil).ReconcileHeaderManipulationPolicy), clusterName, obj)
}

// MockMulticlusterHeaderManipulationPolicyDeletionReconciler is a mock of MulticlusterHeaderManipulationPolicyDeletionReconciler interface.
type MockMulticlusterHeaderManipulationPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterHeaderManipulationPolicyDeletionReconcilerMockRecorder
}

// MockMulticlusterHeaderManipulationPolicyDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterHeaderManipulationPolicyDeletionReconciler.
type MockMulticlusterHeaderManipulationPolicyDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterHeaderManipulationPolicyDeletionReconciler
}

// NewMockMulticlusterHeaderManipulationPolicyDeletionReconciler creates a new mock instance.
func NewMockMulticlusterHeaderManipulationPolicyDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterHeaderManipulationPolicyDeletionReconciler {
	mock := &MockMulticlusterHeaderManipulationPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterHeaderManipulationPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterHeaderManipulationPolicyDeletionReconciler) EXPECT() *MockMulticlusterHeaderManipulationPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileHeaderManipulationPolicyDeletion mocks base method.
func (m *MockMulticlusterHeaderManipulationPolicyDeletionReconciler) ReconcileHeaderManipulationPolicyDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileHeaderManipulationPolicyDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileHeaderManipulationPolicyDeletion indicates an expected call of ReconcileHeaderManipulationPolicyDeletion.
func (mr *MockMulticlusterHeaderManipulationPolicyDeletionReconcilerMockRecorder) ReconcileHeaderManipulationPolicyDeletion(clusterName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileHeaderManipulationPolicyDeletion", reflect.TypeOf((*MockMulticlusterHeaderManipulationPolicyDeletionReconciler)(nil).ReconcileHeaderManipulationPolicyDeletion), clusterName, req)
}

// MockMulticlusterHeaderManipulationPolicyReconcileLoop is a mock of MulticlusterHeaderManipulationPolicyReconcileLoop interface.
type MockMulticlusterHeaderManipulationPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterHeaderManipulationPolicyReconcileLoopMockRecorder
}

// MockMulticlusterHeaderManipulationPolicyReconcileLoopMockRecorder is the mock recorder for MockMulticlusterHeaderManipulationPolicyReconcileLoop.
type MockMulticlusterHeaderManipulationPolicyReconcileLoopMockRecorder struct {
	mock *MockMulticlusterHeaderManipulationPolicyReconcileLoop
}

// NewMockMulticlusterHeaderManipulationPolicyReconcileLoop creates a new mock instance.
func NewMockMulticlusterHeaderManipulationPolicyReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterHeaderManipulationPolicyReconcileLoop {
	mock := &MockMulticlusterHeaderManipulationPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterHeaderManipulationPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterHeaderManipulationPolicyReconcileLoop) EXPECT() *MockMulticlusterHeaderManipulationPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterHeaderManipulationPolicyReconciler mocks base method.
func (m *MockMulticlusterHeaderManipulationPolicyReconcileLoop) AddMulticlusterHeaderManipulationPolicyReconciler(ctx context.Context, rec controller.MulticlusterHeaderManipulationPolicyReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterHeaderManipulationPolicyReconciler", varargs...)
}

// AddMulticlusterHeaderManipulationPolicyReconciler indicates an expected call of AddMulticlusterHeaderManipulationPolicyReconciler.
func (mr *MockMulticlusterHeaderManipulationPolicyReconcileLoopMockRecorder) AddMulticlusterHeaderManipulationPolicyReconciler(ctx, rec any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterHeaderManipulationPolicyReconciler", reflect.TypeOf((*MockMulticlusterHeaderManipulationPolicyReconcileLoop)(nil).AddMulticlusterHeaderManipulationPolicyReconciler), varargs...)
}

// MockMulticlusterTransformationPolicyReconciler is a mock of MulticlusterTransformationPolicyReconciler interface.
type MockMulticlusterTransformationPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTransformationPolicyReconcilerMockRecorder
}

// MockMulticlusterTransformationPolicyReconcilerMockRecorder is the mock recorder for MockMulticlusterTransformationPolicyReconciler.
type MockMulticlusterTransformationPolicyReconcilerMockRecorder struct {
	mock *MockMulticlusterTransformationPolicyReconciler
}

// NewMockMulticlusterTransformationPolicyReconciler creates a new mock instance.
func NewMockMulticlusterTransformationPolicyReconciler(ctrl *gomock.Controller) *MockMulticlusterTransformationPolicyReconciler {
	mock := &MockMulticlusterTransformationPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTransformationPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterTransformationPolicyReconciler) EXPECT() *MockMulticlusterTransformationPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileTransformationPolicy mocks base method.
func (m *MockMulticlusterTransformationPolicyReconciler) ReconcileTransformationPolicy(clusterName string, obj *v2.TransformationPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTransformationPolicy", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileTransformationPolicy indicates an expected call of ReconcileTransformationPolicy.
func (mr *MockMulticlusterTransformationPolicyReconcilerMockRecorder) ReconcileTransformationPolicy(clusterName, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTransformationPolicy", reflect.TypeOf((*MockMulticlusterTransformationPolicyReconciler)(nil).ReconcileTransformationPolicy), clusterName, obj)
}

// MockMulticlusterTransformationPolicyDeletionReconciler is a mock of MulticlusterTransformationPolicyDeletionReconciler interface.
type MockMulticlusterTransformationPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTransformationPolicyDeletionReconcilerMockRecorder
}

// MockMulticlusterTransformationPolicyDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterTransformationPolicyDeletionReconciler.
type MockMulticlusterTransformationPolicyDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterTransformationPolicyDeletionReconciler
}

// NewMockMulticlusterTransformationPolicyDeletionReconciler creates a new mock instance.
func NewMockMulticlusterTransformationPolicyDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterTransformationPolicyDeletionReconciler {
	mock := &MockMulticlusterTransformationPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTransformationPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterTransformationPolicyDeletionReconciler) EXPECT() *MockMulticlusterTransformationPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileTransformationPolicyDeletion mocks base method.
func (m *MockMulticlusterTransformationPolicyDeletionReconciler) ReconcileTransformationPolicyDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTransformationPolicyDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileTransformationPolicyDeletion indicates an expected call of ReconcileTransformationPolicyDeletion.
func (mr *MockMulticlusterTransformationPolicyDeletionReconcilerMockRecorder) ReconcileTransformationPolicyDeletion(clusterName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTransformationPolicyDeletion", reflect.TypeOf((*MockMulticlusterTransformationPolicyDeletionReconciler)(nil).ReconcileTransformationPolicyDeletion), clusterName, req)
}

// MockMulticlusterTransformationPolicyReconcileLoop is a mock of MulticlusterTransformationPolicyReconcileLoop interface.
type MockMulticlusterTransformationPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTransformationPolicyReconcileLoopMockRecorder
}

// MockMulticlusterTransformationPolicyReconcileLoopMockRecorder is the mock recorder for MockMulticlusterTransformationPolicyReconcileLoop.
type MockMulticlusterTransformationPolicyReconcileLoopMockRecorder struct {
	mock *MockMulticlusterTransformationPolicyReconcileLoop
}

// NewMockMulticlusterTransformationPolicyReconcileLoop creates a new mock instance.
func NewMockMulticlusterTransformationPolicyReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterTransformationPolicyReconcileLoop {
	mock := &MockMulticlusterTransformationPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTransformationPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterTransformationPolicyReconcileLoop) EXPECT() *MockMulticlusterTransformationPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterTransformationPolicyReconciler mocks base method.
func (m *MockMulticlusterTransformationPolicyReconcileLoop) AddMulticlusterTransformationPolicyReconciler(ctx context.Context, rec controller.MulticlusterTransformationPolicyReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterTransformationPolicyReconciler", varargs...)
}

// AddMulticlusterTransformationPolicyReconciler indicates an expected call of AddMulticlusterTransformationPolicyReconciler.
func (mr *MockMulticlusterTransformationPolicyReconcileLoopMockRecorder) AddMulticlusterTransformationPolicyReconciler(ctx, rec any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterTransformationPolicyReconciler", reflect.TypeOf((*MockMulticlusterTransformationPolicyReconcileLoop)(nil).AddMulticlusterTransformationPolicyReconciler), varargs...)
}

// MockMulticlusterLoadBalancerPolicyReconciler is a mock of MulticlusterLoadBalancerPolicyReconciler interface.
type MockMulticlusterLoadBalancerPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterLoadBalancerPolicyReconcilerMockRecorder
}

// MockMulticlusterLoadBalancerPolicyReconcilerMockRecorder is the mock recorder for MockMulticlusterLoadBalancerPolicyReconciler.
type MockMulticlusterLoadBalancerPolicyReconcilerMockRecorder struct {
	mock *MockMulticlusterLoadBalancerPolicyReconciler
}

// NewMockMulticlusterLoadBalancerPolicyReconciler creates a new mock instance.
func NewMockMulticlusterLoadBalancerPolicyReconciler(ctrl *gomock.Controller) *MockMulticlusterLoadBalancerPolicyReconciler {
	mock := &MockMulticlusterLoadBalancerPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterLoadBalancerPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterLoadBalancerPolicyReconciler) EXPECT() *MockMulticlusterLoadBalancerPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileLoadBalancerPolicy mocks base method.
func (m *MockMulticlusterLoadBalancerPolicyReconciler) ReconcileLoadBalancerPolicy(clusterName string, obj *v2.LoadBalancerPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileLoadBalancerPolicy", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileLoadBalancerPolicy indicates an expected call of ReconcileLoadBalancerPolicy.
func (mr *MockMulticlusterLoadBalancerPolicyReconcilerMockRecorder) ReconcileLoadBalancerPolicy(clusterName, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileLoadBalancerPolicy", reflect.TypeOf((*MockMulticlusterLoadBalancerPolicyReconciler)(nil).ReconcileLoadBalancerPolicy), clusterName, obj)
}

// MockMulticlusterLoadBalancerPolicyDeletionReconciler is a mock of MulticlusterLoadBalancerPolicyDeletionReconciler interface.
type MockMulticlusterLoadBalancerPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterLoadBalancerPolicyDeletionReconcilerMockRecorder
}

// MockMulticlusterLoadBalancerPolicyDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterLoadBalancerPolicyDeletionReconciler.
type MockMulticlusterLoadBalancerPolicyDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterLoadBalancerPolicyDeletionReconciler
}

// NewMockMulticlusterLoadBalancerPolicyDeletionReconciler creates a new mock instance.
func NewMockMulticlusterLoadBalancerPolicyDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterLoadBalancerPolicyDeletionReconciler {
	mock := &MockMulticlusterLoadBalancerPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterLoadBalancerPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterLoadBalancerPolicyDeletionReconciler) EXPECT() *MockMulticlusterLoadBalancerPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileLoadBalancerPolicyDeletion mocks base method.
func (m *MockMulticlusterLoadBalancerPolicyDeletionReconciler) ReconcileLoadBalancerPolicyDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileLoadBalancerPolicyDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileLoadBalancerPolicyDeletion indicates an expected call of ReconcileLoadBalancerPolicyDeletion.
func (mr *MockMulticlusterLoadBalancerPolicyDeletionReconcilerMockRecorder) ReconcileLoadBalancerPolicyDeletion(clusterName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileLoadBalancerPolicyDeletion", reflect.TypeOf((*MockMulticlusterLoadBalancerPolicyDeletionReconciler)(nil).ReconcileLoadBalancerPolicyDeletion), clusterName, req)
}

// MockMulticlusterLoadBalancerPolicyReconcileLoop is a mock of MulticlusterLoadBalancerPolicyReconcileLoop interface.
type MockMulticlusterLoadBalancerPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterLoadBalancerPolicyReconcileLoopMockRecorder
}

// MockMulticlusterLoadBalancerPolicyReconcileLoopMockRecorder is the mock recorder for MockMulticlusterLoadBalancerPolicyReconcileLoop.
type MockMulticlusterLoadBalancerPolicyReconcileLoopMockRecorder struct {
	mock *MockMulticlusterLoadBalancerPolicyReconcileLoop
}

// NewMockMulticlusterLoadBalancerPolicyReconcileLoop creates a new mock instance.
func NewMockMulticlusterLoadBalancerPolicyReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterLoadBalancerPolicyReconcileLoop {
	mock := &MockMulticlusterLoadBalancerPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterLoadBalancerPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterLoadBalancerPolicyReconcileLoop) EXPECT() *MockMulticlusterLoadBalancerPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterLoadBalancerPolicyReconciler mocks base method.
func (m *MockMulticlusterLoadBalancerPolicyReconcileLoop) AddMulticlusterLoadBalancerPolicyReconciler(ctx context.Context, rec controller.MulticlusterLoadBalancerPolicyReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterLoadBalancerPolicyReconciler", varargs...)
}

// AddMulticlusterLoadBalancerPolicyReconciler indicates an expected call of AddMulticlusterLoadBalancerPolicyReconciler.
func (mr *MockMulticlusterLoadBalancerPolicyReconcileLoopMockRecorder) AddMulticlusterLoadBalancerPolicyReconciler(ctx, rec any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterLoadBalancerPolicyReconciler", reflect.TypeOf((*MockMulticlusterLoadBalancerPolicyReconcileLoop)(nil).AddMulticlusterLoadBalancerPolicyReconciler), varargs...)
}

// MockMulticlusterProxyProtocolPolicyReconciler is a mock of MulticlusterProxyProtocolPolicyReconciler interface.
type MockMulticlusterProxyProtocolPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterProxyProtocolPolicyReconcilerMockRecorder
}

// MockMulticlusterProxyProtocolPolicyReconcilerMockRecorder is the mock recorder for MockMulticlusterProxyProtocolPolicyReconciler.
type MockMulticlusterProxyProtocolPolicyReconcilerMockRecorder struct {
	mock *MockMulticlusterProxyProtocolPolicyReconciler
}

// NewMockMulticlusterProxyProtocolPolicyReconciler creates a new mock instance.
func NewMockMulticlusterProxyProtocolPolicyReconciler(ctrl *gomock.Controller) *MockMulticlusterProxyProtocolPolicyReconciler {
	mock := &MockMulticlusterProxyProtocolPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterProxyProtocolPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterProxyProtocolPolicyReconciler) EXPECT() *MockMulticlusterProxyProtocolPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileProxyProtocolPolicy mocks base method.
func (m *MockMulticlusterProxyProtocolPolicyReconciler) ReconcileProxyProtocolPolicy(clusterName string, obj *v2.ProxyProtocolPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileProxyProtocolPolicy", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileProxyProtocolPolicy indicates an expected call of ReconcileProxyProtocolPolicy.
func (mr *MockMulticlusterProxyProtocolPolicyReconcilerMockRecorder) ReconcileProxyProtocolPolicy(clusterName, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileProxyProtocolPolicy", reflect.TypeOf((*MockMulticlusterProxyProtocolPolicyReconciler)(nil).ReconcileProxyProtocolPolicy), clusterName, obj)
}

// MockMulticlusterProxyProtocolPolicyDeletionReconciler is a mock of MulticlusterProxyProtocolPolicyDeletionReconciler interface.
type MockMulticlusterProxyProtocolPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterProxyProtocolPolicyDeletionReconcilerMockRecorder
}

// MockMulticlusterProxyProtocolPolicyDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterProxyProtocolPolicyDeletionReconciler.
type MockMulticlusterProxyProtocolPolicyDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterProxyProtocolPolicyDeletionReconciler
}

// NewMockMulticlusterProxyProtocolPolicyDeletionReconciler creates a new mock instance.
func NewMockMulticlusterProxyProtocolPolicyDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterProxyProtocolPolicyDeletionReconciler {
	mock := &MockMulticlusterProxyProtocolPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterProxyProtocolPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterProxyProtocolPolicyDeletionReconciler) EXPECT() *MockMulticlusterProxyProtocolPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileProxyProtocolPolicyDeletion mocks base method.
func (m *MockMulticlusterProxyProtocolPolicyDeletionReconciler) ReconcileProxyProtocolPolicyDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileProxyProtocolPolicyDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileProxyProtocolPolicyDeletion indicates an expected call of ReconcileProxyProtocolPolicyDeletion.
func (mr *MockMulticlusterProxyProtocolPolicyDeletionReconcilerMockRecorder) ReconcileProxyProtocolPolicyDeletion(clusterName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileProxyProtocolPolicyDeletion", reflect.TypeOf((*MockMulticlusterProxyProtocolPolicyDeletionReconciler)(nil).ReconcileProxyProtocolPolicyDeletion), clusterName, req)
}

// MockMulticlusterProxyProtocolPolicyReconcileLoop is a mock of MulticlusterProxyProtocolPolicyReconcileLoop interface.
type MockMulticlusterProxyProtocolPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterProxyProtocolPolicyReconcileLoopMockRecorder
}

// MockMulticlusterProxyProtocolPolicyReconcileLoopMockRecorder is the mock recorder for MockMulticlusterProxyProtocolPolicyReconcileLoop.
type MockMulticlusterProxyProtocolPolicyReconcileLoopMockRecorder struct {
	mock *MockMulticlusterProxyProtocolPolicyReconcileLoop
}

// NewMockMulticlusterProxyProtocolPolicyReconcileLoop creates a new mock instance.
func NewMockMulticlusterProxyProtocolPolicyReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterProxyProtocolPolicyReconcileLoop {
	mock := &MockMulticlusterProxyProtocolPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterProxyProtocolPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterProxyProtocolPolicyReconcileLoop) EXPECT() *MockMulticlusterProxyProtocolPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterProxyProtocolPolicyReconciler mocks base method.
func (m *MockMulticlusterProxyProtocolPolicyReconcileLoop) AddMulticlusterProxyProtocolPolicyReconciler(ctx context.Context, rec controller.MulticlusterProxyProtocolPolicyReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterProxyProtocolPolicyReconciler", varargs...)
}

// AddMulticlusterProxyProtocolPolicyReconciler indicates an expected call of AddMulticlusterProxyProtocolPolicyReconciler.
func (mr *MockMulticlusterProxyProtocolPolicyReconcileLoopMockRecorder) AddMulticlusterProxyProtocolPolicyReconciler(ctx, rec any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterProxyProtocolPolicyReconciler", reflect.TypeOf((*MockMulticlusterProxyProtocolPolicyReconcileLoop)(nil).AddMulticlusterProxyProtocolPolicyReconciler), varargs...)
}

// MockMulticlusterHTTPBufferPolicyReconciler is a mock of MulticlusterHTTPBufferPolicyReconciler interface.
type MockMulticlusterHTTPBufferPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterHTTPBufferPolicyReconcilerMockRecorder
}

// MockMulticlusterHTTPBufferPolicyReconcilerMockRecorder is the mock recorder for MockMulticlusterHTTPBufferPolicyReconciler.
type MockMulticlusterHTTPBufferPolicyReconcilerMockRecorder struct {
	mock *MockMulticlusterHTTPBufferPolicyReconciler
}

// NewMockMulticlusterHTTPBufferPolicyReconciler creates a new mock instance.
func NewMockMulticlusterHTTPBufferPolicyReconciler(ctrl *gomock.Controller) *MockMulticlusterHTTPBufferPolicyReconciler {
	mock := &MockMulticlusterHTTPBufferPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterHTTPBufferPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterHTTPBufferPolicyReconciler) EXPECT() *MockMulticlusterHTTPBufferPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileHTTPBufferPolicy mocks base method.
func (m *MockMulticlusterHTTPBufferPolicyReconciler) ReconcileHTTPBufferPolicy(clusterName string, obj *v2.HTTPBufferPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileHTTPBufferPolicy", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileHTTPBufferPolicy indicates an expected call of ReconcileHTTPBufferPolicy.
func (mr *MockMulticlusterHTTPBufferPolicyReconcilerMockRecorder) ReconcileHTTPBufferPolicy(clusterName, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileHTTPBufferPolicy", reflect.TypeOf((*MockMulticlusterHTTPBufferPolicyReconciler)(nil).ReconcileHTTPBufferPolicy), clusterName, obj)
}

// MockMulticlusterHTTPBufferPolicyDeletionReconciler is a mock of MulticlusterHTTPBufferPolicyDeletionReconciler interface.
type MockMulticlusterHTTPBufferPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterHTTPBufferPolicyDeletionReconcilerMockRecorder
}

// MockMulticlusterHTTPBufferPolicyDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterHTTPBufferPolicyDeletionReconciler.
type MockMulticlusterHTTPBufferPolicyDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterHTTPBufferPolicyDeletionReconciler
}

// NewMockMulticlusterHTTPBufferPolicyDeletionReconciler creates a new mock instance.
func NewMockMulticlusterHTTPBufferPolicyDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterHTTPBufferPolicyDeletionReconciler {
	mock := &MockMulticlusterHTTPBufferPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterHTTPBufferPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterHTTPBufferPolicyDeletionReconciler) EXPECT() *MockMulticlusterHTTPBufferPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileHTTPBufferPolicyDeletion mocks base method.
func (m *MockMulticlusterHTTPBufferPolicyDeletionReconciler) ReconcileHTTPBufferPolicyDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileHTTPBufferPolicyDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileHTTPBufferPolicyDeletion indicates an expected call of ReconcileHTTPBufferPolicyDeletion.
func (mr *MockMulticlusterHTTPBufferPolicyDeletionReconcilerMockRecorder) ReconcileHTTPBufferPolicyDeletion(clusterName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileHTTPBufferPolicyDeletion", reflect.TypeOf((*MockMulticlusterHTTPBufferPolicyDeletionReconciler)(nil).ReconcileHTTPBufferPolicyDeletion), clusterName, req)
}

// MockMulticlusterHTTPBufferPolicyReconcileLoop is a mock of MulticlusterHTTPBufferPolicyReconcileLoop interface.
type MockMulticlusterHTTPBufferPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterHTTPBufferPolicyReconcileLoopMockRecorder
}

// MockMulticlusterHTTPBufferPolicyReconcileLoopMockRecorder is the mock recorder for MockMulticlusterHTTPBufferPolicyReconcileLoop.
type MockMulticlusterHTTPBufferPolicyReconcileLoopMockRecorder struct {
	mock *MockMulticlusterHTTPBufferPolicyReconcileLoop
}

// NewMockMulticlusterHTTPBufferPolicyReconcileLoop creates a new mock instance.
func NewMockMulticlusterHTTPBufferPolicyReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterHTTPBufferPolicyReconcileLoop {
	mock := &MockMulticlusterHTTPBufferPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterHTTPBufferPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterHTTPBufferPolicyReconcileLoop) EXPECT() *MockMulticlusterHTTPBufferPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterHTTPBufferPolicyReconciler mocks base method.
func (m *MockMulticlusterHTTPBufferPolicyReconcileLoop) AddMulticlusterHTTPBufferPolicyReconciler(ctx context.Context, rec controller.MulticlusterHTTPBufferPolicyReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterHTTPBufferPolicyReconciler", varargs...)
}

// AddMulticlusterHTTPBufferPolicyReconciler indicates an expected call of AddMulticlusterHTTPBufferPolicyReconciler.
func (mr *MockMulticlusterHTTPBufferPolicyReconcileLoopMockRecorder) AddMulticlusterHTTPBufferPolicyReconciler(ctx, rec any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterHTTPBufferPolicyReconciler", reflect.TypeOf((*MockMulticlusterHTTPBufferPolicyReconcileLoop)(nil).AddMulticlusterHTTPBufferPolicyReconciler), varargs...)
}
