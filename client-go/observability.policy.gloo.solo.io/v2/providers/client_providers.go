// Code generated by skv2. DO NOT EDIT.

package v2

import (
	observability_policy_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/observability.policy.gloo.solo.io/v2"

	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

/*
  The intention of these providers are to be used for Mocking.
  They expose the Clients as interfaces, as well as factories to provide mocked versions
  of the clients when they require building within a component.

  See package `github.com/solo-io/skv2/pkg/multicluster/register` for example
*/

// Provider for AccessLogPolicyClient from Clientset
func AccessLogPolicyClientFromClientsetProvider(clients observability_policy_gloo_solo_io_v2.Clientset) observability_policy_gloo_solo_io_v2.AccessLogPolicyClient {
	return clients.AccessLogPolicies()
}

// Provider for AccessLogPolicy Client from Client
func AccessLogPolicyClientProvider(client client.Client) observability_policy_gloo_solo_io_v2.AccessLogPolicyClient {
	return observability_policy_gloo_solo_io_v2.NewAccessLogPolicyClient(client)
}

type AccessLogPolicyClientFactory func(client client.Client) observability_policy_gloo_solo_io_v2.AccessLogPolicyClient

func AccessLogPolicyClientFactoryProvider() AccessLogPolicyClientFactory {
	return AccessLogPolicyClientProvider
}

type AccessLogPolicyClientFromConfigFactory func(cfg *rest.Config) (observability_policy_gloo_solo_io_v2.AccessLogPolicyClient, error)

func AccessLogPolicyClientFromConfigFactoryProvider() AccessLogPolicyClientFromConfigFactory {
	return func(cfg *rest.Config) (observability_policy_gloo_solo_io_v2.AccessLogPolicyClient, error) {
		clients, err := observability_policy_gloo_solo_io_v2.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.AccessLogPolicies(), nil
	}
}
