// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go
//
// Generated by this command:
//
//	mockgen -source ./event_handlers.go -destination mocks/event_handlers.go
//

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"

	v2 "github.com/solo-io/solo-apis/client-go/observability.policy.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/client-go/observability.policy.gloo.solo.io/v2/controller"
)

// MockAccessLogPolicyEventHandler is a mock of AccessLogPolicyEventHandler interface.
type MockAccessLogPolicyEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAccessLogPolicyEventHandlerMockRecorder
}

// MockAccessLogPolicyEventHandlerMockRecorder is the mock recorder for MockAccessLogPolicyEventHandler.
type MockAccessLogPolicyEventHandlerMockRecorder struct {
	mock *MockAccessLogPolicyEventHandler
}

// NewMockAccessLogPolicyEventHandler creates a new mock instance.
func NewMockAccessLogPolicyEventHandler(ctrl *gomock.Controller) *MockAccessLogPolicyEventHandler {
	mock := &MockAccessLogPolicyEventHandler{ctrl: ctrl}
	mock.recorder = &MockAccessLogPolicyEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessLogPolicyEventHandler) EXPECT() *MockAccessLogPolicyEventHandlerMockRecorder {
	return m.recorder
}

// CreateAccessLogPolicy mocks base method.
func (m *MockAccessLogPolicyEventHandler) CreateAccessLogPolicy(obj *v2.AccessLogPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessLogPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccessLogPolicy indicates an expected call of CreateAccessLogPolicy.
func (mr *MockAccessLogPolicyEventHandlerMockRecorder) CreateAccessLogPolicy(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessLogPolicy", reflect.TypeOf((*MockAccessLogPolicyEventHandler)(nil).CreateAccessLogPolicy), obj)
}

// DeleteAccessLogPolicy mocks base method.
func (m *MockAccessLogPolicyEventHandler) DeleteAccessLogPolicy(obj *v2.AccessLogPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessLogPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessLogPolicy indicates an expected call of DeleteAccessLogPolicy.
func (mr *MockAccessLogPolicyEventHandlerMockRecorder) DeleteAccessLogPolicy(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessLogPolicy", reflect.TypeOf((*MockAccessLogPolicyEventHandler)(nil).DeleteAccessLogPolicy), obj)
}

// GenericAccessLogPolicy mocks base method.
func (m *MockAccessLogPolicyEventHandler) GenericAccessLogPolicy(obj *v2.AccessLogPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericAccessLogPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericAccessLogPolicy indicates an expected call of GenericAccessLogPolicy.
func (mr *MockAccessLogPolicyEventHandlerMockRecorder) GenericAccessLogPolicy(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericAccessLogPolicy", reflect.TypeOf((*MockAccessLogPolicyEventHandler)(nil).GenericAccessLogPolicy), obj)
}

// UpdateAccessLogPolicy mocks base method.
func (m *MockAccessLogPolicyEventHandler) UpdateAccessLogPolicy(old, new *v2.AccessLogPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessLogPolicy", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccessLogPolicy indicates an expected call of UpdateAccessLogPolicy.
func (mr *MockAccessLogPolicyEventHandlerMockRecorder) UpdateAccessLogPolicy(old, new any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessLogPolicy", reflect.TypeOf((*MockAccessLogPolicyEventHandler)(nil).UpdateAccessLogPolicy), old, new)
}

// MockAccessLogPolicyEventWatcher is a mock of AccessLogPolicyEventWatcher interface.
type MockAccessLogPolicyEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockAccessLogPolicyEventWatcherMockRecorder
}

// MockAccessLogPolicyEventWatcherMockRecorder is the mock recorder for MockAccessLogPolicyEventWatcher.
type MockAccessLogPolicyEventWatcherMockRecorder struct {
	mock *MockAccessLogPolicyEventWatcher
}

// NewMockAccessLogPolicyEventWatcher creates a new mock instance.
func NewMockAccessLogPolicyEventWatcher(ctrl *gomock.Controller) *MockAccessLogPolicyEventWatcher {
	mock := &MockAccessLogPolicyEventWatcher{ctrl: ctrl}
	mock.recorder = &MockAccessLogPolicyEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessLogPolicyEventWatcher) EXPECT() *MockAccessLogPolicyEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockAccessLogPolicyEventWatcher) AddEventHandler(ctx context.Context, h controller.AccessLogPolicyEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockAccessLogPolicyEventWatcherMockRecorder) AddEventHandler(ctx, h any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockAccessLogPolicyEventWatcher)(nil).AddEventHandler), varargs...)
}
