// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/apimanagement/v2/api_product.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"

	github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *ApiProductSpec) Clone() proto.Message {
	var target *ApiProductSpec
	if m == nil {
		return target
	}
	target = &ApiProductSpec{}

	if h, ok := interface{}(m.GetTargetRef()).(clone.Cloner); ok {
		target.TargetRef = h.Clone().(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.PolicyTargetReference)
	} else {
		target.TargetRef = proto.Clone(m.GetTargetRef()).(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.PolicyTargetReference)
	}

	if h, ok := interface{}(m.GetPortalMetadata()).(clone.Cloner); ok {
		target.PortalMetadata = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.PortalMetadata)
	} else {
		target.PortalMetadata = proto.Clone(m.GetPortalMetadata()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.PortalMetadata)
	}

	return target
}

// Clone function
func (m *ApiProductStatus) Clone() proto.Message {
	var target *ApiProductStatus
	if m == nil {
		return target
	}
	target = &ApiProductStatus{}

	if h, ok := interface{}(m.GetState()).(clone.Cloner); ok {
		target.State = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	} else {
		target.State = proto.Clone(m.GetState()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	}

	target.SelectedRouteCount = m.GetSelectedRouteCount()

	return target
}

// Clone function
func (m *ApiProductReport) Clone() proto.Message {
	var target *ApiProductReport
	if m == nil {
		return target
	}
	target = &ApiProductReport{}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			}

		}
	}

	target.OwnedByWorkspace = m.GetOwnedByWorkspace()

	return target
}
