// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/apimanagement/v2/graphql_resolver_map.proto

package v2

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/solo-io/protoc-gen-ext/extproto"
	_ "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"

	v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The GraphQLResolverMap Resource contains a mapping from types to fields to
// resolutions. For example, for a schema with type `Query` and field `GetName`
// ```graphql
//
//	type Query {
//	  GetName: String
//	}
//
// ```
// you can configure a resolver for the `GetName` field as follows:
// ```yaml
//
// types:
//
//	Query:
//	  fields:
//	    GetName:
//	      <insert resolver config>
//
// ```
type GraphQLResolverMapSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of GraphQL types to field resolutions.
	// The key must match the GraphQL type name and is case-sensitive.
	// Every field under GraphQL root types (Query, Mutation) must have a resolver defined.
	Types map[string]*GraphQLResolverMapSpec_Resolution `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Extensions that apply to the resolvers in this ResolverMap.
	Extensions *GraphQLResolverMapSpec_ResolverMapExtensions `protobuf:"bytes,2,opt,name=extensions,proto3" json:"extensions,omitempty"`
}

func (x *GraphQLResolverMapSpec) Reset() {
	*x = GraphQLResolverMapSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLResolverMapSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLResolverMapSpec) ProtoMessage() {}

func (x *GraphQLResolverMapSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLResolverMapSpec.ProtoReflect.Descriptor instead.
func (*GraphQLResolverMapSpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescGZIP(), []int{0}
}

func (x *GraphQLResolverMapSpec) GetTypes() map[string]*GraphQLResolverMapSpec_Resolution {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *GraphQLResolverMapSpec) GetExtensions() *GraphQLResolverMapSpec_ResolverMapExtensions {
	if x != nil {
		return x.Extensions
	}
	return nil
}

// Variable transformations are used to take variables that were declared
// and transform them using a transformation. The simplest transformation is the `variable`
// transform, which passes through the value of a single variable. For more complex transforms,
// the `jq` transformation can be used to form more complicated JSON values.
//
// **Using variables**:
//
// Variables that are declared in the `variables` field are available at the top level of the input JSON object to the
// jq filter.
// For example, if the following variables have been declared:
// ```yaml
//
// variables:
//
//	userIdHeader:
//	  request_header: x-user-id
//	resolverResultVar:
//	  resolver_result: {}
//
// ```
// then the input object to the `jq` filter would be
// ```json
//
//	{
//	 "userIdHeader": <x-user-id header value from GraphQL request>,
//	 "resolverResultVar": { .. the resolver result .. }
//	}
//
// ```
//
// **Using a jq filter**:
//
// Given the following input object to the `jq` transformation, we can use a filter to transform the values.
// ```json
//
//	{
//	 "userIdHeader": "john_doe123",
//	 "resolverResultVar": { "data": {"name": "John Doe"} }
//	}
//
// ```
// If the `jq` filter is defined as
// ```
// "User: " + .userIdHeader + ", Name: " + .resolverResultVar.data.name
// ```
// the result of the jq transformation would be
// ```
// "User john_doe123, Name: John Doe"
// ```
type VariableTransformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transformations on variable extractions.
	//
	// Types that are assignable to Transformation:
	//
	//	*VariableTransformation_Variable
	//	*VariableTransformation_Jq
	//	*VariableTransformation_Json
	Transformation isVariableTransformation_Transformation `protobuf_oneof:"transformation"`
}

func (x *VariableTransformation) Reset() {
	*x = VariableTransformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableTransformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableTransformation) ProtoMessage() {}

func (x *VariableTransformation) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableTransformation.ProtoReflect.Descriptor instead.
func (*VariableTransformation) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescGZIP(), []int{1}
}

func (m *VariableTransformation) GetTransformation() isVariableTransformation_Transformation {
	if m != nil {
		return m.Transformation
	}
	return nil
}

func (x *VariableTransformation) GetVariable() string {
	if x, ok := x.GetTransformation().(*VariableTransformation_Variable); ok {
		return x.Variable
	}
	return ""
}

func (x *VariableTransformation) GetJq() string {
	if x, ok := x.GetTransformation().(*VariableTransformation_Jq); ok {
		return x.Jq
	}
	return ""
}

func (x *VariableTransformation) GetJson() *structpb.Value {
	if x, ok := x.GetTransformation().(*VariableTransformation_Json); ok {
		return x.Json
	}
	return nil
}

type isVariableTransformation_Transformation interface {
	isVariableTransformation_Transformation()
}

type VariableTransformation_Variable struct {
	// The name of a variable declared in the `variables` field. The value of the variable
	// is returned with no transformation.
	Variable string `protobuf:"bytes,1,opt,name=variable,proto3,oneof"`
}

type VariableTransformation_Jq struct {
	// The [jq](https://jqlang.github.io/jq/manual/) filter which is used to provide a value.
	// variables defined in `variables` can be used in the jq filter via regular jq variable syntax.
	// For example, a variable named "userIdHeader" can be used in a jq filter as `$userIdHeader`
	// Jq filters must only result in one value, or an error will be sent back to the client.
	// For example, for the input `[1,2,3]`, the jq filter `'.[]'` is not a valid jq filter as it results
	// in multiple jq results. However, the jq filter `'. &#124; join(",")'` is valid as it results in one result: `"1,2,3"`.
	// Refer to the [jq manual](https://jqlang.github.io/jq/manual/) for jq syntax and tips.
	Jq string `protobuf:"bytes,2,opt,name=jq,proto3,oneof"`
}

type VariableTransformation_Json struct {
	// Static JSON value.
	// For information about the value format, see the [Google protocol buffer documentation](https://protobuf.dev/reference/protobuf/google.protobuf/#value).
	//
	// +kubebuilder:validation:Type=value
	Json *structpb.Value `protobuf:"bytes,3,opt,name=json,proto3,oneof"`
}

func (*VariableTransformation_Variable) isVariableTransformation_Transformation() {}

func (*VariableTransformation_Jq) isVariableTransformation_Transformation() {}

func (*VariableTransformation_Json) isVariableTransformation_Transformation() {}

// Extractions are used to assign values to variables from various sources of data in the GraphQL
// request or response. This includes HTTP headers, Envoy Dynamic Metadata, or GraphQL query-specific args.
type Extraction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ExtractionType:
	//
	//	*Extraction_RequestHeader
	//	*Extraction_DynamicMetadata
	//	*Extraction_GraphqlParent
	//	*Extraction_GraphqlArg
	//	*Extraction_ResolverResult
	//	*Extraction_Json
	ExtractionType isExtraction_ExtractionType `protobuf_oneof:"extraction_type"`
}

func (x *Extraction) Reset() {
	*x = Extraction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extraction) ProtoMessage() {}

func (x *Extraction) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extraction.ProtoReflect.Descriptor instead.
func (*Extraction) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescGZIP(), []int{2}
}

func (m *Extraction) GetExtractionType() isExtraction_ExtractionType {
	if m != nil {
		return m.ExtractionType
	}
	return nil
}

func (x *Extraction) GetRequestHeader() string {
	if x, ok := x.GetExtractionType().(*Extraction_RequestHeader); ok {
		return x.RequestHeader
	}
	return ""
}

func (x *Extraction) GetDynamicMetadata() *DynamicMetadataExtraction {
	if x, ok := x.GetExtractionType().(*Extraction_DynamicMetadata); ok {
		return x.DynamicMetadata
	}
	return nil
}

func (x *Extraction) GetGraphqlParent() *emptypb.Empty {
	if x, ok := x.GetExtractionType().(*Extraction_GraphqlParent); ok {
		return x.GraphqlParent
	}
	return nil
}

func (x *Extraction) GetGraphqlArg() string {
	if x, ok := x.GetExtractionType().(*Extraction_GraphqlArg); ok {
		return x.GraphqlArg
	}
	return ""
}

func (x *Extraction) GetResolverResult() *emptypb.Empty {
	if x, ok := x.GetExtractionType().(*Extraction_ResolverResult); ok {
		return x.ResolverResult
	}
	return nil
}

func (x *Extraction) GetJson() *structpb.Value {
	if x, ok := x.GetExtractionType().(*Extraction_Json); ok {
		return x.Json
	}
	return nil
}

type isExtraction_ExtractionType interface {
	isExtraction_ExtractionType()
}

type Extraction_RequestHeader struct {
	// Extract the value from the GraphQL HTTP request header. The extracted value is a string.
	// If the header doesn't exist, an empty string will be used.
	RequestHeader string `protobuf:"bytes,1,opt,name=request_header,json=requestHeader,proto3,oneof"`
}

type Extraction_DynamicMetadata struct {
	// Extract the value from envoy dynamic metadata. The extracted value is an object.
	DynamicMetadata *DynamicMetadataExtraction `protobuf:"bytes,2,opt,name=dynamic_metadata,json=dynamicMetadata,proto3,oneof"`
}

type Extraction_GraphqlParent struct {
	// Assigns the variable to the parent object
	// For information about the value format, see the [Google protocol buffer documentation](https://protobuf.dev/reference/protobuf/google.protobuf/#empty).
	GraphqlParent *emptypb.Empty `protobuf:"bytes,3,opt,name=graphql_parent,json=graphqlParent,proto3,oneof"`
}

type Extraction_GraphqlArg struct {
	// Assigns the variable to the GraphQL Argument with this name.
	// If this name doesn't exist, the variable is `null`
	GraphqlArg string `protobuf:"bytes,4,opt,name=graphql_arg,json=graphqlArg,proto3,oneof"`
}

type Extraction_ResolverResult struct {
	// Assigns the variable to the GraphQL resolver result.
	// If this Extraction is used in a place where the resolver result is not available, an error
	// will be thrown during configuration time.
	// For information about the value format, see the [Google protocol buffer documentation](https://protobuf.dev/reference/protobuf/google.protobuf/#empty).
	ResolverResult *emptypb.Empty `protobuf:"bytes,5,opt,name=resolver_result,json=resolverResult,proto3,oneof"`
}

type Extraction_Json struct {
	// Assigns the variable to a JSON value specified here
	// For information about the value format, see the [Google protocol buffer documentation](https://protobuf.dev/reference/protobuf/google.protobuf/#value).
	//
	// +kubebuilder:validation:Type=value
	Json *structpb.Value `protobuf:"bytes,6,opt,name=json,proto3,oneof"`
}

func (*Extraction_RequestHeader) isExtraction_ExtractionType() {}

func (*Extraction_DynamicMetadata) isExtraction_ExtractionType() {}

func (*Extraction_GraphqlParent) isExtraction_ExtractionType() {}

func (*Extraction_GraphqlArg) isExtraction_ExtractionType() {}

func (*Extraction_ResolverResult) isExtraction_ExtractionType() {}

func (*Extraction_Json) isExtraction_ExtractionType() {}

type DynamicMetadataExtraction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The envoy dynamic metadata namespace that the data lives in. If the namespace doesn't exist in the
	// metadata, the extraction yields null
	MetadataNamespace string `protobuf:"bytes,1,opt,name=metadata_namespace,json=metadataNamespace,proto3" json:"metadata_namespace,omitempty"`
	// The key under the envoy dynamic metadata namespace that the data lives under.
	// If the key doesn't exist in the namespace, the extraction yields null
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DynamicMetadataExtraction) Reset() {
	*x = DynamicMetadataExtraction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicMetadataExtraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicMetadataExtraction) ProtoMessage() {}

func (x *DynamicMetadataExtraction) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicMetadataExtraction.ProtoReflect.Descriptor instead.
func (*DynamicMetadataExtraction) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescGZIP(), []int{3}
}

func (x *DynamicMetadataExtraction) GetMetadataNamespace() string {
	if x != nil {
		return x.MetadataNamespace
	}
	return ""
}

func (x *DynamicMetadataExtraction) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type GraphQLResolverMapStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state and workspace conditions of the applied resource.
	Common *v2.Status `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	// The name of the workspace that owns the Graphql resolver map.
	OwnedByWorkspace string `protobuf:"bytes,4,opt,name=owned_by_workspace,json=ownedByWorkspace,proto3" json:"owned_by_workspace,omitempty"`
}

func (x *GraphQLResolverMapStatus) Reset() {
	*x = GraphQLResolverMapStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLResolverMapStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLResolverMapStatus) ProtoMessage() {}

func (x *GraphQLResolverMapStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLResolverMapStatus.ProtoReflect.Descriptor instead.
func (*GraphQLResolverMapStatus) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescGZIP(), []int{4}
}

func (x *GraphQLResolverMapStatus) GetCommon() *v2.Status {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *GraphQLResolverMapStatus) GetOwnedByWorkspace() string {
	if x != nil {
		return x.OwnedByWorkspace
	}
	return ""
}

type GraphQLResolverMapReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workspaces map[string]*v2.Report `protobuf:"bytes,1,rep,name=workspaces,proto3" json:"workspaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The name of the workspace that owns the Graphql resolver map.
	OwnerWorkspace string `protobuf:"bytes,2,opt,name=owner_workspace,json=ownerWorkspace,proto3" json:"owner_workspace,omitempty"`
}

func (x *GraphQLResolverMapReport) Reset() {
	*x = GraphQLResolverMapReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLResolverMapReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLResolverMapReport) ProtoMessage() {}

func (x *GraphQLResolverMapReport) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLResolverMapReport.ProtoReflect.Descriptor instead.
func (*GraphQLResolverMapReport) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescGZIP(), []int{5}
}

func (x *GraphQLResolverMapReport) GetWorkspaces() map[string]*v2.Report {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

func (x *GraphQLResolverMapReport) GetOwnerWorkspace() string {
	if x != nil {
		return x.OwnerWorkspace
	}
	return ""
}

type GraphQLResolverMapSpec_Resolution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of GraphQL fields for the type to resolutions.
	// The key must match the GraphQL field name and is case-sensitive.
	// Fields that don't have resolvers will use the GraphQL default resolver,
	// which returns the field in the parent object with the same name as the GraphQL field.
	Fields map[string]*GraphQLResolverMapSpec_Resolution_Resolvers `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GraphQLResolverMapSpec_Resolution) Reset() {
	*x = GraphQLResolverMapSpec_Resolution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLResolverMapSpec_Resolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLResolverMapSpec_Resolution) ProtoMessage() {}

func (x *GraphQLResolverMapSpec_Resolution) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLResolverMapSpec_Resolution.ProtoReflect.Descriptor instead.
func (*GraphQLResolverMapSpec_Resolution) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescGZIP(), []int{0, 1}
}

func (x *GraphQLResolverMapSpec_Resolution) GetFields() map[string]*GraphQLResolverMapSpec_Resolution_Resolvers {
	if x != nil {
		return x.Fields
	}
	return nil
}

type GraphQLResolverMapSpec_ResolverMapExtensions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selects API Schema objects that describe a gRPC service.
	// This is used only in gRPC resolvers that are defined in this resolver map.
	// The gRPC resolver uses the protobuf descriptor to create gRPC requests to the upstream gRPC service.
	// Any non-gRPC API Schema that is selected here will be ignored.
	// gRPC schemas will be checked for validity, as well as package/message conflicts at configuration time and will
	// fail loudly if not valid.
	GrpcSchemaSelector *v2.ObjectSelector `protobuf:"bytes,1,opt,name=grpc_schema_selector,json=grpcSchemaSelector,proto3" json:"grpc_schema_selector,omitempty"`
}

func (x *GraphQLResolverMapSpec_ResolverMapExtensions) Reset() {
	*x = GraphQLResolverMapSpec_ResolverMapExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLResolverMapSpec_ResolverMapExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLResolverMapSpec_ResolverMapExtensions) ProtoMessage() {}

func (x *GraphQLResolverMapSpec_ResolverMapExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLResolverMapSpec_ResolverMapExtensions.ProtoReflect.Descriptor instead.
func (*GraphQLResolverMapSpec_ResolverMapExtensions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescGZIP(), []int{0, 2}
}

func (x *GraphQLResolverMapSpec_ResolverMapExtensions) GetGrpcSchemaSelector() *v2.ObjectSelector {
	if x != nil {
		return x.GrpcSchemaSelector
	}
	return nil
}

type GraphQLResolverMapSpec_Resolution_Resolvers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of resolvers.
	// Currently, only one the first resolver configuration will be respected and a warning will be thrown
	// if more than one resolver is in the list.
	Resolvers []*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver `protobuf:"bytes,1,rep,name=resolvers,proto3" json:"resolvers,omitempty"`
	// Variables that can be used as a part of transformations for this field's resolution.
	// The key is the name of the variable, which is directly used in the transformation.
	// The value defines where the variable value is extracted from on the GraphQL request.
	Variables map[string]*Extraction `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The stats prefix which will be used for this resolver.
	// If empty, will generate a stats prefix ${RESOLVER_NAME}
	StatPrefix *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=stat_prefix,json=statPrefix,proto3" json:"stat_prefix,omitempty"`
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers) Reset() {
	*x = GraphQLResolverMapSpec_Resolution_Resolvers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLResolverMapSpec_Resolution_Resolvers) ProtoMessage() {}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLResolverMapSpec_Resolution_Resolvers.ProtoReflect.Descriptor instead.
func (*GraphQLResolverMapSpec_Resolution_Resolvers) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers) GetResolvers() []*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver {
	if x != nil {
		return x.Resolvers
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers) GetVariables() map[string]*Extraction {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers) GetStatPrefix() *wrapperspb.StringValue {
	if x != nil {
		return x.StatPrefix
	}
	return nil
}

type GraphQLResolverMapSpec_Resolution_Resolvers_Resolver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resolver to use.
	//
	// Types that are assignable to Resolver:
	//
	//	*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_
	//	*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_
	//	*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_
	Resolver isGraphQLResolverMapSpec_Resolution_Resolvers_Resolver_Resolver `protobuf_oneof:"resolver"`
	// Use a transformation on extracted variables to transform the upstream REST response.
	// By default, the transformation is empty and the destination response is left as is before
	// being passed into the GraphQL execution engine.
	ResolverResultTransform *VariableTransformation `protobuf:"bytes,10,opt,name=resolver_result_transform,json=resolverResultTransform,proto3" json:"resolver_result_transform,omitempty"`
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver) Reset() {
	*x = GraphQLResolverMapSpec_Resolution_Resolvers_Resolver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver) ProtoMessage() {}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLResolverMapSpec_Resolution_Resolvers_Resolver.ProtoReflect.Descriptor instead.
func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescGZIP(), []int{0, 1, 1, 1}
}

func (m *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver) GetResolver() isGraphQLResolverMapSpec_Resolution_Resolvers_Resolver_Resolver {
	if m != nil {
		return m.Resolver
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver) GetRestResolver() *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver {
	if x, ok := x.GetResolver().(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_); ok {
		return x.RestResolver
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver) GetGrpcResolver() *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver {
	if x, ok := x.GetResolver().(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_); ok {
		return x.GrpcResolver
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver) GetMockResolver() *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver {
	if x, ok := x.GetResolver().(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_); ok {
		return x.MockResolver
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver) GetResolverResultTransform() *VariableTransformation {
	if x != nil {
		return x.ResolverResultTransform
	}
	return nil
}

type isGraphQLResolverMapSpec_Resolution_Resolvers_Resolver_Resolver interface {
	isGraphQLResolverMapSpec_Resolution_Resolvers_Resolver_Resolver()
}

type GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_ struct {
	// Resolves values by making a HTTP/2 request to a HTTP/REST destination.
	RestResolver *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver `protobuf:"bytes,3,opt,name=rest_resolver,json=restResolver,proto3,oneof"`
}

type GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_ struct {
	// Resolves fields by making a gRPC call to a gRPC destination.
	GrpcResolver *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver `protobuf:"bytes,2,opt,name=grpc_resolver,json=grpcResolver,proto3,oneof"`
}

type GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_ struct {
	// Resolves fields via a mocked response that is configured.
	MockResolver *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver `protobuf:"bytes,4,opt,name=mock_resolver,json=mockResolver,proto3,oneof"`
}

func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_) isGraphQLResolverMapSpec_Resolution_Resolvers_Resolver_Resolver() {
}

func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_) isGraphQLResolverMapSpec_Resolution_Resolvers_Resolver_Resolver() {
}

func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_) isGraphQLResolverMapSpec_Resolution_Resolvers_Resolver_Resolver() {
}

type GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required: list of destinations which point to destinations containing
	// a RESTful service. Must provide at least one destination.
	//
	// (Note: only the first destination will be used)
	Destinations []*v2.DestinationReference `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty"`
	// Configuration to template a HTTP request to fetch JSON from a destination REST service.
	// This includes configuration such as setting headers dynamically on the HTTP request, configuring query_params,
	// and setting the body for the request to the destination.
	Request *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	// Variables that can be used in this field's response transform.
	// The key is the name of the variable, which is directly used in the transformation.
	// The value defines where the variable value is extracted from on the GraphQL REST response.
	Variables map[string]*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The span name for the upstream REST request, used for tracing.
	// If empty or omitted, the request span name will be set to the upstream cluster name.
	SpanName *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=span_name,json=spanName,proto3" json:"span_name,omitempty"`
	// Set the timeout of the HTTP request to the REST service (default 5s)
	// For information about the value format, see the [Google protocol buffer documentation](https://protobuf.dev/reference/protobuf/google.protobuf/#duration).
	Timeout *durationpb.Duration `protobuf:"bytes,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver) Reset() {
	*x = GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver) ProtoMessage() {}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver.ProtoReflect.Descriptor instead.
func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescGZIP(), []int{0, 1, 1, 1, 0}
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver) GetDestinations() []*v2.DestinationReference {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver) GetRequest() *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver) GetVariables() map[string]*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver) GetSpanName() *wrapperspb.StringValue {
	if x != nil {
		return x.SpanName
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required: list of destinations which point to destinations containing
	// a gRPC service. Must provide at least one destination.
	//
	// (Note: only the first destination will be used)
	Destinations []*v2.DestinationReference                                                         `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty"`
	Request      *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	// The span name for the upstream gRPC request, used for tracing.
	// If empty or omitted, the request span name will be set to the upstream cluster name.
	SpanName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=span_name,json=spanName,proto3" json:"span_name,omitempty"`
	// Set the timeout of the HTTP request to the gRPC service (default 5s)
	// For information about the value format, see the [Google protocol buffer documentation](https://protobuf.dev/reference/protobuf/google.protobuf/#duration).
	Timeout *durationpb.Duration `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver) Reset() {
	*x = GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver) ProtoMessage() {}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver.ProtoReflect.Descriptor instead.
func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescGZIP(), []int{0, 1, 1, 1, 1}
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver) GetDestinations() []*v2.DestinationReference {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver) GetRequest() *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver) GetSpanName() *wrapperspb.StringValue {
	if x != nil {
		return x.SpanName
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_SyncResponse
	//	*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse_
	//	*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_ErrorResponse
	Response isGraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_Response `protobuf_oneof:"response"`
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver) Reset() {
	*x = GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver) ProtoMessage() {}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver.ProtoReflect.Descriptor instead.
func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescGZIP(), []int{0, 1, 1, 1, 2}
}

func (m *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver) GetResponse() isGraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver) GetSyncResponse() *VariableTransformation {
	if x, ok := x.GetResponse().(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_SyncResponse); ok {
		return x.SyncResponse
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver) GetAsyncResponse() *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse {
	if x, ok := x.GetResponse().(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse_); ok {
		return x.AsyncResponse
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver) GetErrorResponse() string {
	if x, ok := x.GetResponse().(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_ErrorResponse); ok {
		return x.ErrorResponse
	}
	return ""
}

type isGraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_Response interface {
	isGraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_Response()
}

type GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_SyncResponse struct {
	// The response to return for this field.
	// The response is a JSON object that can be templated from the `variables` field.
	// This response is immediately returned to the GraphQL execution engine.
	SyncResponse *VariableTransformation `protobuf:"bytes,1,opt,name=sync_response,json=syncResponse,proto3,oneof"`
}

type GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse_ struct {
	// The response to return for this field.
	// The response is a JSON object that can be templated from the `variables` field.
	// This response is returned to the GraphQL execution engine after a delay.
	AsyncResponse *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse `protobuf:"bytes,2,opt,name=async_response,json=asyncResponse,proto3,oneof"`
}

type GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_ErrorResponse struct {
	// An error response to return for this field.
	ErrorResponse string `protobuf:"bytes,3,opt,name=error_response,json=errorResponse,proto3,oneof"`
}

func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_SyncResponse) isGraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_Response() {
}

func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse_) isGraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_Response() {
}

func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_ErrorResponse) isGraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_Response() {
}

type GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sets the headers on the request to the REST destination.
	// This includes setting HTTP :path header.
	// This is a map of HTTP Header name to a transformation which determines the Header value.
	// The transformation must result in a string value, or an error will be sent back to the client.
	// By default, the :method header is set to GET. If `body` is set, then the :method is POST. This can be overridden
	// by setting the :method header manually below.
	Headers map[string]*VariableTransformation `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Sets the query parameters on the request to the REST destination.
	// The transformation must result in a string value, or an error will be sent back to the client.
	QueryParams map[string]*VariableTransformation `protobuf:"bytes,2,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Sets the outgoing body to the upstream REST destination.
	// By default, the body is empty.
	Body *VariableTransformation `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate) Reset() {
	*x = GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate) ProtoMessage() {
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate.ProtoReflect.Descriptor instead.
func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescGZIP(), []int{0, 1, 1, 1, 0, 1}
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate) GetHeaders() map[string]*VariableTransformation {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate) GetQueryParams() map[string]*VariableTransformation {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate) GetBody() *VariableTransformation {
	if x != nil {
		return x.Body
	}
	return nil
}

type GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Extraction:
	//
	//	*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable_ResponseHeader
	Extraction isGraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable_Extraction `protobuf_oneof:"extraction"`
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable) Reset() {
	*x = GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable) ProtoMessage() {
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable.ProtoReflect.Descriptor instead.
func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescGZIP(), []int{0, 1, 1, 1, 0, 2}
}

func (m *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable) GetExtraction() isGraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable_Extraction {
	if m != nil {
		return m.Extraction
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable) GetResponseHeader() string {
	if x, ok := x.GetExtraction().(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable_ResponseHeader); ok {
		return x.ResponseHeader
	}
	return ""
}

type isGraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable_Extraction interface {
	isGraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable_Extraction()
}

type GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable_ResponseHeader struct {
	// Only available on resolver result transformations
	// Extract the value from the GraphQL HTTP response header. The extracted value is a string.
	// If this Extraction is used in a place where response headers are not available, an error
	// will be thrown during configuration time.
	ResponseHeader string `protobuf:"bytes,1,opt,name=response_header,json=responseHeader,proto3,oneof"`
}

func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable_ResponseHeader) isGraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable_Extraction() {
}

type GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The gRPC service to call.
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// The gRPC method to call.
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	// The gRPC request body.
	// The request body is a JSON object that will be marshalled into the gRPC request.
	// The request body can be templated using variables from the `variables` field.
	OutgoingMessage *VariableTransformation `protobuf:"bytes,3,opt,name=outgoing_message,json=outgoingMessage,proto3" json:"outgoing_message,omitempty"`
	// Static metadata to be added to the gRPC request.
	// See https://grpc.io/docs/what-is-grpc/core-concepts/#metadata for more information.
	RequestMetadata map[string]string `protobuf:"bytes,4,rep,name=request_metadata,json=requestMetadata,proto3" json:"request_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The :authority header to set on the gRPC request.
	// If empty, the outgoing :authority header will be set to "envoy".
	// This does not need to be set in most cases.
	Authority *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate) Reset() {
	*x = GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate) ProtoMessage() {
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate.ProtoReflect.Descriptor instead.
func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescGZIP(), []int{0, 1, 1, 1, 1, 0}
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate) GetOutgoingMessage() *VariableTransformation {
	if x != nil {
		return x.OutgoingMessage
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate) GetRequestMetadata() map[string]string {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate) GetAuthority() *wrapperspb.StringValue {
	if x != nil {
		return x.Authority
	}
	return nil
}

type GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The delay before the response is returned.
	// For information about the value format, see the [Google protocol buffer documentation](https://protobuf.dev/reference/protobuf/google.protobuf/#duration).
	Delay *durationpb.Duration `protobuf:"bytes,1,opt,name=delay,proto3" json:"delay,omitempty"`
	// The response to return.
	// The response is a JSON object that can be templated from the `variables` field.
	Response *VariableTransformation `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse) Reset() {
	*x = GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse) ProtoMessage() {
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse.ProtoReflect.Descriptor instead.
func (*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescGZIP(), []int{0, 1, 1, 1, 2, 0}
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse) GetDelay() *durationpb.Duration {
	if x != nil {
		return x.Delay
	}
	return nil
}

func (x *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse) GetResponse() *VariableTransformation {
	if x != nil {
		return x.Response
	}
	return nil
}

var File_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDesc = []byte{
	0x0a, 0x67, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x32, 0x2f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x61, 0x70, 0x69, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x1a, 0x12, 0x65, 0x78, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c,
	0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32,
	0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f,
	0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f,
	0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f,
	0x2f, 0x73, 0x6b, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x21, 0x0a, 0x16, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x53, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4d, 0x61,
	0x70, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x61, 0x70,
	0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x77, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x70,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xfd, 0x1d, 0x0a, 0x0a, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x61, 0x70, 0x69, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x82, 0x01, 0x0a,
	0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x51, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x86, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x12,
	0x6e, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x50, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x12,
	0x74, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x56, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x1a, 0x64, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xed, 0x18, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5d, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x84,
	0x01, 0x0a, 0x0d, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x0d, 0x6d, 0x6f, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e,
	0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x51, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e,
	0x4d, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c,
	0x6d, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x6e, 0x0a, 0x19,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x17, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0xd4, 0x0a, 0x0a,
	0x0c, 0x52, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x4d, 0x0a,
	0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x87, 0x01, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x70, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x1a, 0xa9, 0x01, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x45, 0x53, 0x54, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0xf8, 0x04, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7a, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x0c, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x7e, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4d, 0x61,
	0x70, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x46,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61,
	0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x6e, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x72, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70,
	0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x0c, 0x52, 0x45,
	0x53, 0x54, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xad, 0x06, 0x0a, 0x0c, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x09, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x73, 0x70, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0xd3, 0x03,
	0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x5d, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x82, 0x01,
	0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a,
	0x42, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0xc8, 0x03, 0x0a, 0x0c, 0x4d, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70,
	0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x94, 0x01, 0x0a, 0x0e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a,
	0x90, 0x01, 0x0a, 0x0d, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x4e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x1a, 0x6e, 0x0a, 0x15, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x14, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x12, 0x67, 0x72, 0x70, 0x63, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x88, 0x01, 0x0a, 0x16, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x6a, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x02, 0x6a, 0x71, 0x12, 0x2c, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6a,
	0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x03, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x62, 0x0a,
	0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x61, 0x72,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x71, 0x6c, 0x41, 0x72, 0x67, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x19, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x7d, 0x0a, 0x18, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x51, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x77, 0x6e, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x18, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x51, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x64, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x1a, 0x5a, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x5e,
	0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f,
	0x76, 0x32, 0xc0, 0xf5, 0x04, 0x01, 0xb8, 0xf5, 0x04, 0x01, 0xd0, 0xf5, 0x04, 0x01, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescData = file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_goTypes = []interface{}{
	(*GraphQLResolverMapSpec)(nil),                       // 0: apimanagement.gloo.solo.io.GraphQLResolverMapSpec
	(*VariableTransformation)(nil),                       // 1: apimanagement.gloo.solo.io.VariableTransformation
	(*Extraction)(nil),                                   // 2: apimanagement.gloo.solo.io.Extraction
	(*DynamicMetadataExtraction)(nil),                    // 3: apimanagement.gloo.solo.io.DynamicMetadataExtraction
	(*GraphQLResolverMapStatus)(nil),                     // 4: apimanagement.gloo.solo.io.GraphQLResolverMapStatus
	(*GraphQLResolverMapReport)(nil),                     // 5: apimanagement.gloo.solo.io.GraphQLResolverMapReport
	nil,                                                  // 6: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.TypesEntry
	(*GraphQLResolverMapSpec_Resolution)(nil),            // 7: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution
	(*GraphQLResolverMapSpec_ResolverMapExtensions)(nil), // 8: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.ResolverMapExtensions
	nil, // 9: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.FieldsEntry
	(*GraphQLResolverMapSpec_Resolution_Resolvers)(nil), // 10: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers
	nil, // 11: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.VariablesEntry
	(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver)(nil),              // 12: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver
	(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver)(nil), // 13: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver
	(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver)(nil), // 14: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.GrpcResolver
	(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver)(nil), // 15: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.MockResolver
	nil, // 16: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver.VariablesEntry
	(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate)(nil), // 17: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver.RequestTemplate
	(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable)(nil),    // 18: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver.RESTVariable
	nil, // 19: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver.RequestTemplate.HeadersEntry
	nil, // 20: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver.RequestTemplate.QueryParamsEntry
	(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate)(nil), // 21: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.GrpcResolver.RequestTemplate
	nil, // 22: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.GrpcResolver.RequestTemplate.RequestMetadataEntry
	(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse)(nil), // 23: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.MockResolver.AsyncResponse
	nil,                             // 24: apimanagement.gloo.solo.io.GraphQLResolverMapReport.WorkspacesEntry
	(*structpb.Value)(nil),          // 25: google.protobuf.Value
	(*emptypb.Empty)(nil),           // 26: google.protobuf.Empty
	(*v2.Status)(nil),               // 27: common.gloo.solo.io.Status
	(*v2.ObjectSelector)(nil),       // 28: common.gloo.solo.io.ObjectSelector
	(*wrapperspb.StringValue)(nil),  // 29: google.protobuf.StringValue
	(*v2.DestinationReference)(nil), // 30: common.gloo.solo.io.DestinationReference
	(*durationpb.Duration)(nil),     // 31: google.protobuf.Duration
	(*v2.Report)(nil),               // 32: common.gloo.solo.io.Report
}
var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_depIdxs = []int32{
	6,  // 0: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.types:type_name -> apimanagement.gloo.solo.io.GraphQLResolverMapSpec.TypesEntry
	8,  // 1: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.extensions:type_name -> apimanagement.gloo.solo.io.GraphQLResolverMapSpec.ResolverMapExtensions
	25, // 2: apimanagement.gloo.solo.io.VariableTransformation.json:type_name -> google.protobuf.Value
	3,  // 3: apimanagement.gloo.solo.io.Extraction.dynamic_metadata:type_name -> apimanagement.gloo.solo.io.DynamicMetadataExtraction
	26, // 4: apimanagement.gloo.solo.io.Extraction.graphql_parent:type_name -> google.protobuf.Empty
	26, // 5: apimanagement.gloo.solo.io.Extraction.resolver_result:type_name -> google.protobuf.Empty
	25, // 6: apimanagement.gloo.solo.io.Extraction.json:type_name -> google.protobuf.Value
	27, // 7: apimanagement.gloo.solo.io.GraphQLResolverMapStatus.common:type_name -> common.gloo.solo.io.Status
	24, // 8: apimanagement.gloo.solo.io.GraphQLResolverMapReport.workspaces:type_name -> apimanagement.gloo.solo.io.GraphQLResolverMapReport.WorkspacesEntry
	7,  // 9: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.TypesEntry.value:type_name -> apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution
	9,  // 10: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.fields:type_name -> apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.FieldsEntry
	28, // 11: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.ResolverMapExtensions.grpc_schema_selector:type_name -> common.gloo.solo.io.ObjectSelector
	10, // 12: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.FieldsEntry.value:type_name -> apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers
	12, // 13: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.resolvers:type_name -> apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver
	11, // 14: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.variables:type_name -> apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.VariablesEntry
	29, // 15: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.stat_prefix:type_name -> google.protobuf.StringValue
	2,  // 16: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.VariablesEntry.value:type_name -> apimanagement.gloo.solo.io.Extraction
	13, // 17: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.rest_resolver:type_name -> apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver
	14, // 18: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.grpc_resolver:type_name -> apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.GrpcResolver
	15, // 19: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.mock_resolver:type_name -> apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.MockResolver
	1,  // 20: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.resolver_result_transform:type_name -> apimanagement.gloo.solo.io.VariableTransformation
	30, // 21: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver.destinations:type_name -> common.gloo.solo.io.DestinationReference
	17, // 22: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver.request:type_name -> apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver.RequestTemplate
	16, // 23: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver.variables:type_name -> apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver.VariablesEntry
	29, // 24: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver.span_name:type_name -> google.protobuf.StringValue
	31, // 25: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver.timeout:type_name -> google.protobuf.Duration
	30, // 26: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.GrpcResolver.destinations:type_name -> common.gloo.solo.io.DestinationReference
	21, // 27: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.GrpcResolver.request:type_name -> apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.GrpcResolver.RequestTemplate
	29, // 28: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.GrpcResolver.span_name:type_name -> google.protobuf.StringValue
	31, // 29: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.GrpcResolver.timeout:type_name -> google.protobuf.Duration
	1,  // 30: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.MockResolver.sync_response:type_name -> apimanagement.gloo.solo.io.VariableTransformation
	23, // 31: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.MockResolver.async_response:type_name -> apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.MockResolver.AsyncResponse
	18, // 32: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver.VariablesEntry.value:type_name -> apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver.RESTVariable
	19, // 33: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver.RequestTemplate.headers:type_name -> apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver.RequestTemplate.HeadersEntry
	20, // 34: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver.RequestTemplate.query_params:type_name -> apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver.RequestTemplate.QueryParamsEntry
	1,  // 35: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver.RequestTemplate.body:type_name -> apimanagement.gloo.solo.io.VariableTransformation
	1,  // 36: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver.RequestTemplate.HeadersEntry.value:type_name -> apimanagement.gloo.solo.io.VariableTransformation
	1,  // 37: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.RestResolver.RequestTemplate.QueryParamsEntry.value:type_name -> apimanagement.gloo.solo.io.VariableTransformation
	1,  // 38: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.GrpcResolver.RequestTemplate.outgoing_message:type_name -> apimanagement.gloo.solo.io.VariableTransformation
	22, // 39: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.GrpcResolver.RequestTemplate.request_metadata:type_name -> apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.GrpcResolver.RequestTemplate.RequestMetadataEntry
	29, // 40: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.GrpcResolver.RequestTemplate.authority:type_name -> google.protobuf.StringValue
	31, // 41: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.MockResolver.AsyncResponse.delay:type_name -> google.protobuf.Duration
	1,  // 42: apimanagement.gloo.solo.io.GraphQLResolverMapSpec.Resolution.Resolvers.Resolver.MockResolver.AsyncResponse.response:type_name -> apimanagement.gloo.solo.io.VariableTransformation
	32, // 43: apimanagement.gloo.solo.io.GraphQLResolverMapReport.WorkspacesEntry.value:type_name -> common.gloo.solo.io.Report
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_init()
}
func file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_init() {
	if File_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLResolverMapSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableTransformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extraction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicMetadataExtraction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLResolverMapStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLResolverMapReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLResolverMapSpec_Resolution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLResolverMapSpec_ResolverMapExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLResolverMapSpec_Resolution_Resolvers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*VariableTransformation_Variable)(nil),
		(*VariableTransformation_Jq)(nil),
		(*VariableTransformation_Json)(nil),
	}
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Extraction_RequestHeader)(nil),
		(*Extraction_DynamicMetadata)(nil),
		(*Extraction_GraphqlParent)(nil),
		(*Extraction_GraphqlArg)(nil),
		(*Extraction_ResolverResult)(nil),
		(*Extraction_Json)(nil),
	}
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_)(nil),
		(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_)(nil),
		(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_)(nil),
	}
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_SyncResponse)(nil),
		(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse_)(nil),
		(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_ErrorResponse)(nil),
	}
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable_ResponseHeader)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto = out.File
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_depIdxs = nil
}
