// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v2 is a generated GoMock package.
package mock_v2

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	v2 "github.com/solo-io/solo-apis/client-go/apimanagement.gloo.solo.io/v2"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v2.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// ApiDocs mocks base method.
func (m *MockClientset) ApiDocs() v2.ApiDocClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApiDocs")
	ret0, _ := ret[0].(v2.ApiDocClient)
	return ret0
}

// ApiDocs indicates an expected call of ApiDocs.
func (mr *MockClientsetMockRecorder) ApiDocs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApiDocs", reflect.TypeOf((*MockClientset)(nil).ApiDocs))
}

// GraphQLResolverMaps mocks base method.
func (m *MockClientset) GraphQLResolverMaps() v2.GraphQLResolverMapClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphQLResolverMaps")
	ret0, _ := ret[0].(v2.GraphQLResolverMapClient)
	return ret0
}

// GraphQLResolverMaps indicates an expected call of GraphQLResolverMaps.
func (mr *MockClientsetMockRecorder) GraphQLResolverMaps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphQLResolverMaps", reflect.TypeOf((*MockClientset)(nil).GraphQLResolverMaps))
}

// GraphQLSchemas mocks base method.
func (m *MockClientset) GraphQLSchemas() v2.GraphQLSchemaClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphQLSchemas")
	ret0, _ := ret[0].(v2.GraphQLSchemaClient)
	return ret0
}

// GraphQLSchemas indicates an expected call of GraphQLSchemas.
func (mr *MockClientsetMockRecorder) GraphQLSchemas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphQLSchemas", reflect.TypeOf((*MockClientset)(nil).GraphQLSchemas))
}

// GraphQLStitchedSchemas mocks base method.
func (m *MockClientset) GraphQLStitchedSchemas() v2.GraphQLStitchedSchemaClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphQLStitchedSchemas")
	ret0, _ := ret[0].(v2.GraphQLStitchedSchemaClient)
	return ret0
}

// GraphQLStitchedSchemas indicates an expected call of GraphQLStitchedSchemas.
func (mr *MockClientsetMockRecorder) GraphQLStitchedSchemas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphQLStitchedSchemas", reflect.TypeOf((*MockClientset)(nil).GraphQLStitchedSchemas))
}

// PortalGroups mocks base method.
func (m *MockClientset) PortalGroups() v2.PortalGroupClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortalGroups")
	ret0, _ := ret[0].(v2.PortalGroupClient)
	return ret0
}

// PortalGroups indicates an expected call of PortalGroups.
func (mr *MockClientsetMockRecorder) PortalGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortalGroups", reflect.TypeOf((*MockClientset)(nil).PortalGroups))
}

// Portals mocks base method.
func (m *MockClientset) Portals() v2.PortalClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Portals")
	ret0, _ := ret[0].(v2.PortalClient)
	return ret0
}

// Portals indicates an expected call of Portals.
func (mr *MockClientsetMockRecorder) Portals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Portals", reflect.TypeOf((*MockClientset)(nil).Portals))
}

// MockGraphQLStitchedSchemaReader is a mock of GraphQLStitchedSchemaReader interface.
type MockGraphQLStitchedSchemaReader struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLStitchedSchemaReaderMockRecorder
}

// MockGraphQLStitchedSchemaReaderMockRecorder is the mock recorder for MockGraphQLStitchedSchemaReader.
type MockGraphQLStitchedSchemaReaderMockRecorder struct {
	mock *MockGraphQLStitchedSchemaReader
}

// NewMockGraphQLStitchedSchemaReader creates a new mock instance.
func NewMockGraphQLStitchedSchemaReader(ctrl *gomock.Controller) *MockGraphQLStitchedSchemaReader {
	mock := &MockGraphQLStitchedSchemaReader{ctrl: ctrl}
	mock.recorder = &MockGraphQLStitchedSchemaReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLStitchedSchemaReader) EXPECT() *MockGraphQLStitchedSchemaReaderMockRecorder {
	return m.recorder
}

// GetGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaReader) GetGraphQLStitchedSchema(ctx context.Context, key client.ObjectKey) (*v2.GraphQLStitchedSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGraphQLStitchedSchema", ctx, key)
	ret0, _ := ret[0].(*v2.GraphQLStitchedSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGraphQLStitchedSchema indicates an expected call of GetGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaReaderMockRecorder) GetGraphQLStitchedSchema(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaReader)(nil).GetGraphQLStitchedSchema), ctx, key)
}

// ListGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaReader) ListGraphQLStitchedSchema(ctx context.Context, opts ...client.ListOption) (*v2.GraphQLStitchedSchemaList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGraphQLStitchedSchema", varargs...)
	ret0, _ := ret[0].(*v2.GraphQLStitchedSchemaList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGraphQLStitchedSchema indicates an expected call of ListGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaReaderMockRecorder) ListGraphQLStitchedSchema(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaReader)(nil).ListGraphQLStitchedSchema), varargs...)
}

// MockGraphQLStitchedSchemaWriter is a mock of GraphQLStitchedSchemaWriter interface.
type MockGraphQLStitchedSchemaWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLStitchedSchemaWriterMockRecorder
}

// MockGraphQLStitchedSchemaWriterMockRecorder is the mock recorder for MockGraphQLStitchedSchemaWriter.
type MockGraphQLStitchedSchemaWriterMockRecorder struct {
	mock *MockGraphQLStitchedSchemaWriter
}

// NewMockGraphQLStitchedSchemaWriter creates a new mock instance.
func NewMockGraphQLStitchedSchemaWriter(ctrl *gomock.Controller) *MockGraphQLStitchedSchemaWriter {
	mock := &MockGraphQLStitchedSchemaWriter{ctrl: ctrl}
	mock.recorder = &MockGraphQLStitchedSchemaWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLStitchedSchemaWriter) EXPECT() *MockGraphQLStitchedSchemaWriterMockRecorder {
	return m.recorder
}

// CreateGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaWriter) CreateGraphQLStitchedSchema(ctx context.Context, obj *v2.GraphQLStitchedSchema, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGraphQLStitchedSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGraphQLStitchedSchema indicates an expected call of CreateGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaWriterMockRecorder) CreateGraphQLStitchedSchema(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaWriter)(nil).CreateGraphQLStitchedSchema), varargs...)
}

// DeleteAllOfGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaWriter) DeleteAllOfGraphQLStitchedSchema(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfGraphQLStitchedSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfGraphQLStitchedSchema indicates an expected call of DeleteAllOfGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaWriterMockRecorder) DeleteAllOfGraphQLStitchedSchema(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaWriter)(nil).DeleteAllOfGraphQLStitchedSchema), varargs...)
}

// DeleteGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaWriter) DeleteGraphQLStitchedSchema(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGraphQLStitchedSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGraphQLStitchedSchema indicates an expected call of DeleteGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaWriterMockRecorder) DeleteGraphQLStitchedSchema(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaWriter)(nil).DeleteGraphQLStitchedSchema), varargs...)
}

// PatchGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaWriter) PatchGraphQLStitchedSchema(ctx context.Context, obj *v2.GraphQLStitchedSchema, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGraphQLStitchedSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGraphQLStitchedSchema indicates an expected call of PatchGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaWriterMockRecorder) PatchGraphQLStitchedSchema(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaWriter)(nil).PatchGraphQLStitchedSchema), varargs...)
}

// UpdateGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaWriter) UpdateGraphQLStitchedSchema(ctx context.Context, obj *v2.GraphQLStitchedSchema, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGraphQLStitchedSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLStitchedSchema indicates an expected call of UpdateGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaWriterMockRecorder) UpdateGraphQLStitchedSchema(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaWriter)(nil).UpdateGraphQLStitchedSchema), varargs...)
}

// UpsertGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaWriter) UpsertGraphQLStitchedSchema(ctx context.Context, obj *v2.GraphQLStitchedSchema, transitionFuncs ...v2.GraphQLStitchedSchemaTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertGraphQLStitchedSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertGraphQLStitchedSchema indicates an expected call of UpsertGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaWriterMockRecorder) UpsertGraphQLStitchedSchema(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaWriter)(nil).UpsertGraphQLStitchedSchema), varargs...)
}

// MockGraphQLStitchedSchemaStatusWriter is a mock of GraphQLStitchedSchemaStatusWriter interface.
type MockGraphQLStitchedSchemaStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLStitchedSchemaStatusWriterMockRecorder
}

// MockGraphQLStitchedSchemaStatusWriterMockRecorder is the mock recorder for MockGraphQLStitchedSchemaStatusWriter.
type MockGraphQLStitchedSchemaStatusWriterMockRecorder struct {
	mock *MockGraphQLStitchedSchemaStatusWriter
}

// NewMockGraphQLStitchedSchemaStatusWriter creates a new mock instance.
func NewMockGraphQLStitchedSchemaStatusWriter(ctrl *gomock.Controller) *MockGraphQLStitchedSchemaStatusWriter {
	mock := &MockGraphQLStitchedSchemaStatusWriter{ctrl: ctrl}
	mock.recorder = &MockGraphQLStitchedSchemaStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLStitchedSchemaStatusWriter) EXPECT() *MockGraphQLStitchedSchemaStatusWriterMockRecorder {
	return m.recorder
}

// PatchGraphQLStitchedSchemaStatus mocks base method.
func (m *MockGraphQLStitchedSchemaStatusWriter) PatchGraphQLStitchedSchemaStatus(ctx context.Context, obj *v2.GraphQLStitchedSchema, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGraphQLStitchedSchemaStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGraphQLStitchedSchemaStatus indicates an expected call of PatchGraphQLStitchedSchemaStatus.
func (mr *MockGraphQLStitchedSchemaStatusWriterMockRecorder) PatchGraphQLStitchedSchemaStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGraphQLStitchedSchemaStatus", reflect.TypeOf((*MockGraphQLStitchedSchemaStatusWriter)(nil).PatchGraphQLStitchedSchemaStatus), varargs...)
}

// UpdateGraphQLStitchedSchemaStatus mocks base method.
func (m *MockGraphQLStitchedSchemaStatusWriter) UpdateGraphQLStitchedSchemaStatus(ctx context.Context, obj *v2.GraphQLStitchedSchema, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGraphQLStitchedSchemaStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLStitchedSchemaStatus indicates an expected call of UpdateGraphQLStitchedSchemaStatus.
func (mr *MockGraphQLStitchedSchemaStatusWriterMockRecorder) UpdateGraphQLStitchedSchemaStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLStitchedSchemaStatus", reflect.TypeOf((*MockGraphQLStitchedSchemaStatusWriter)(nil).UpdateGraphQLStitchedSchemaStatus), varargs...)
}

// MockGraphQLStitchedSchemaClient is a mock of GraphQLStitchedSchemaClient interface.
type MockGraphQLStitchedSchemaClient struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLStitchedSchemaClientMockRecorder
}

// MockGraphQLStitchedSchemaClientMockRecorder is the mock recorder for MockGraphQLStitchedSchemaClient.
type MockGraphQLStitchedSchemaClientMockRecorder struct {
	mock *MockGraphQLStitchedSchemaClient
}

// NewMockGraphQLStitchedSchemaClient creates a new mock instance.
func NewMockGraphQLStitchedSchemaClient(ctrl *gomock.Controller) *MockGraphQLStitchedSchemaClient {
	mock := &MockGraphQLStitchedSchemaClient{ctrl: ctrl}
	mock.recorder = &MockGraphQLStitchedSchemaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLStitchedSchemaClient) EXPECT() *MockGraphQLStitchedSchemaClientMockRecorder {
	return m.recorder
}

// CreateGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaClient) CreateGraphQLStitchedSchema(ctx context.Context, obj *v2.GraphQLStitchedSchema, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGraphQLStitchedSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGraphQLStitchedSchema indicates an expected call of CreateGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaClientMockRecorder) CreateGraphQLStitchedSchema(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaClient)(nil).CreateGraphQLStitchedSchema), varargs...)
}

// DeleteAllOfGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaClient) DeleteAllOfGraphQLStitchedSchema(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfGraphQLStitchedSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfGraphQLStitchedSchema indicates an expected call of DeleteAllOfGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaClientMockRecorder) DeleteAllOfGraphQLStitchedSchema(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaClient)(nil).DeleteAllOfGraphQLStitchedSchema), varargs...)
}

// DeleteGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaClient) DeleteGraphQLStitchedSchema(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGraphQLStitchedSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGraphQLStitchedSchema indicates an expected call of DeleteGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaClientMockRecorder) DeleteGraphQLStitchedSchema(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaClient)(nil).DeleteGraphQLStitchedSchema), varargs...)
}

// GetGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaClient) GetGraphQLStitchedSchema(ctx context.Context, key client.ObjectKey) (*v2.GraphQLStitchedSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGraphQLStitchedSchema", ctx, key)
	ret0, _ := ret[0].(*v2.GraphQLStitchedSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGraphQLStitchedSchema indicates an expected call of GetGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaClientMockRecorder) GetGraphQLStitchedSchema(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaClient)(nil).GetGraphQLStitchedSchema), ctx, key)
}

// ListGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaClient) ListGraphQLStitchedSchema(ctx context.Context, opts ...client.ListOption) (*v2.GraphQLStitchedSchemaList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGraphQLStitchedSchema", varargs...)
	ret0, _ := ret[0].(*v2.GraphQLStitchedSchemaList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGraphQLStitchedSchema indicates an expected call of ListGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaClientMockRecorder) ListGraphQLStitchedSchema(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaClient)(nil).ListGraphQLStitchedSchema), varargs...)
}

// PatchGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaClient) PatchGraphQLStitchedSchema(ctx context.Context, obj *v2.GraphQLStitchedSchema, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGraphQLStitchedSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGraphQLStitchedSchema indicates an expected call of PatchGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaClientMockRecorder) PatchGraphQLStitchedSchema(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaClient)(nil).PatchGraphQLStitchedSchema), varargs...)
}

// PatchGraphQLStitchedSchemaStatus mocks base method.
func (m *MockGraphQLStitchedSchemaClient) PatchGraphQLStitchedSchemaStatus(ctx context.Context, obj *v2.GraphQLStitchedSchema, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGraphQLStitchedSchemaStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGraphQLStitchedSchemaStatus indicates an expected call of PatchGraphQLStitchedSchemaStatus.
func (mr *MockGraphQLStitchedSchemaClientMockRecorder) PatchGraphQLStitchedSchemaStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGraphQLStitchedSchemaStatus", reflect.TypeOf((*MockGraphQLStitchedSchemaClient)(nil).PatchGraphQLStitchedSchemaStatus), varargs...)
}

// UpdateGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaClient) UpdateGraphQLStitchedSchema(ctx context.Context, obj *v2.GraphQLStitchedSchema, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGraphQLStitchedSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLStitchedSchema indicates an expected call of UpdateGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaClientMockRecorder) UpdateGraphQLStitchedSchema(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaClient)(nil).UpdateGraphQLStitchedSchema), varargs...)
}

// UpdateGraphQLStitchedSchemaStatus mocks base method.
func (m *MockGraphQLStitchedSchemaClient) UpdateGraphQLStitchedSchemaStatus(ctx context.Context, obj *v2.GraphQLStitchedSchema, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGraphQLStitchedSchemaStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLStitchedSchemaStatus indicates an expected call of UpdateGraphQLStitchedSchemaStatus.
func (mr *MockGraphQLStitchedSchemaClientMockRecorder) UpdateGraphQLStitchedSchemaStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLStitchedSchemaStatus", reflect.TypeOf((*MockGraphQLStitchedSchemaClient)(nil).UpdateGraphQLStitchedSchemaStatus), varargs...)
}

// UpsertGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaClient) UpsertGraphQLStitchedSchema(ctx context.Context, obj *v2.GraphQLStitchedSchema, transitionFuncs ...v2.GraphQLStitchedSchemaTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertGraphQLStitchedSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertGraphQLStitchedSchema indicates an expected call of UpsertGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaClientMockRecorder) UpsertGraphQLStitchedSchema(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaClient)(nil).UpsertGraphQLStitchedSchema), varargs...)
}

// MockMulticlusterGraphQLStitchedSchemaClient is a mock of MulticlusterGraphQLStitchedSchemaClient interface.
type MockMulticlusterGraphQLStitchedSchemaClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGraphQLStitchedSchemaClientMockRecorder
}

// MockMulticlusterGraphQLStitchedSchemaClientMockRecorder is the mock recorder for MockMulticlusterGraphQLStitchedSchemaClient.
type MockMulticlusterGraphQLStitchedSchemaClientMockRecorder struct {
	mock *MockMulticlusterGraphQLStitchedSchemaClient
}

// NewMockMulticlusterGraphQLStitchedSchemaClient creates a new mock instance.
func NewMockMulticlusterGraphQLStitchedSchemaClient(ctrl *gomock.Controller) *MockMulticlusterGraphQLStitchedSchemaClient {
	mock := &MockMulticlusterGraphQLStitchedSchemaClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGraphQLStitchedSchemaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGraphQLStitchedSchemaClient) EXPECT() *MockMulticlusterGraphQLStitchedSchemaClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterGraphQLStitchedSchemaClient) Cluster(cluster string) (v2.GraphQLStitchedSchemaClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.GraphQLStitchedSchemaClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterGraphQLStitchedSchemaClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterGraphQLStitchedSchemaClient)(nil).Cluster), cluster)
}

// MockGraphQLResolverMapReader is a mock of GraphQLResolverMapReader interface.
type MockGraphQLResolverMapReader struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLResolverMapReaderMockRecorder
}

// MockGraphQLResolverMapReaderMockRecorder is the mock recorder for MockGraphQLResolverMapReader.
type MockGraphQLResolverMapReaderMockRecorder struct {
	mock *MockGraphQLResolverMapReader
}

// NewMockGraphQLResolverMapReader creates a new mock instance.
func NewMockGraphQLResolverMapReader(ctrl *gomock.Controller) *MockGraphQLResolverMapReader {
	mock := &MockGraphQLResolverMapReader{ctrl: ctrl}
	mock.recorder = &MockGraphQLResolverMapReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLResolverMapReader) EXPECT() *MockGraphQLResolverMapReaderMockRecorder {
	return m.recorder
}

// GetGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapReader) GetGraphQLResolverMap(ctx context.Context, key client.ObjectKey) (*v2.GraphQLResolverMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGraphQLResolverMap", ctx, key)
	ret0, _ := ret[0].(*v2.GraphQLResolverMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGraphQLResolverMap indicates an expected call of GetGraphQLResolverMap.
func (mr *MockGraphQLResolverMapReaderMockRecorder) GetGraphQLResolverMap(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapReader)(nil).GetGraphQLResolverMap), ctx, key)
}

// ListGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapReader) ListGraphQLResolverMap(ctx context.Context, opts ...client.ListOption) (*v2.GraphQLResolverMapList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGraphQLResolverMap", varargs...)
	ret0, _ := ret[0].(*v2.GraphQLResolverMapList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGraphQLResolverMap indicates an expected call of ListGraphQLResolverMap.
func (mr *MockGraphQLResolverMapReaderMockRecorder) ListGraphQLResolverMap(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapReader)(nil).ListGraphQLResolverMap), varargs...)
}

// MockGraphQLResolverMapWriter is a mock of GraphQLResolverMapWriter interface.
type MockGraphQLResolverMapWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLResolverMapWriterMockRecorder
}

// MockGraphQLResolverMapWriterMockRecorder is the mock recorder for MockGraphQLResolverMapWriter.
type MockGraphQLResolverMapWriterMockRecorder struct {
	mock *MockGraphQLResolverMapWriter
}

// NewMockGraphQLResolverMapWriter creates a new mock instance.
func NewMockGraphQLResolverMapWriter(ctrl *gomock.Controller) *MockGraphQLResolverMapWriter {
	mock := &MockGraphQLResolverMapWriter{ctrl: ctrl}
	mock.recorder = &MockGraphQLResolverMapWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLResolverMapWriter) EXPECT() *MockGraphQLResolverMapWriterMockRecorder {
	return m.recorder
}

// CreateGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapWriter) CreateGraphQLResolverMap(ctx context.Context, obj *v2.GraphQLResolverMap, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGraphQLResolverMap", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGraphQLResolverMap indicates an expected call of CreateGraphQLResolverMap.
func (mr *MockGraphQLResolverMapWriterMockRecorder) CreateGraphQLResolverMap(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapWriter)(nil).CreateGraphQLResolverMap), varargs...)
}

// DeleteAllOfGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapWriter) DeleteAllOfGraphQLResolverMap(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfGraphQLResolverMap", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfGraphQLResolverMap indicates an expected call of DeleteAllOfGraphQLResolverMap.
func (mr *MockGraphQLResolverMapWriterMockRecorder) DeleteAllOfGraphQLResolverMap(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapWriter)(nil).DeleteAllOfGraphQLResolverMap), varargs...)
}

// DeleteGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapWriter) DeleteGraphQLResolverMap(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGraphQLResolverMap", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGraphQLResolverMap indicates an expected call of DeleteGraphQLResolverMap.
func (mr *MockGraphQLResolverMapWriterMockRecorder) DeleteGraphQLResolverMap(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapWriter)(nil).DeleteGraphQLResolverMap), varargs...)
}

// PatchGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapWriter) PatchGraphQLResolverMap(ctx context.Context, obj *v2.GraphQLResolverMap, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGraphQLResolverMap", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGraphQLResolverMap indicates an expected call of PatchGraphQLResolverMap.
func (mr *MockGraphQLResolverMapWriterMockRecorder) PatchGraphQLResolverMap(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapWriter)(nil).PatchGraphQLResolverMap), varargs...)
}

// UpdateGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapWriter) UpdateGraphQLResolverMap(ctx context.Context, obj *v2.GraphQLResolverMap, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGraphQLResolverMap", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLResolverMap indicates an expected call of UpdateGraphQLResolverMap.
func (mr *MockGraphQLResolverMapWriterMockRecorder) UpdateGraphQLResolverMap(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapWriter)(nil).UpdateGraphQLResolverMap), varargs...)
}

// UpsertGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapWriter) UpsertGraphQLResolverMap(ctx context.Context, obj *v2.GraphQLResolverMap, transitionFuncs ...v2.GraphQLResolverMapTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertGraphQLResolverMap", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertGraphQLResolverMap indicates an expected call of UpsertGraphQLResolverMap.
func (mr *MockGraphQLResolverMapWriterMockRecorder) UpsertGraphQLResolverMap(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapWriter)(nil).UpsertGraphQLResolverMap), varargs...)
}

// MockGraphQLResolverMapStatusWriter is a mock of GraphQLResolverMapStatusWriter interface.
type MockGraphQLResolverMapStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLResolverMapStatusWriterMockRecorder
}

// MockGraphQLResolverMapStatusWriterMockRecorder is the mock recorder for MockGraphQLResolverMapStatusWriter.
type MockGraphQLResolverMapStatusWriterMockRecorder struct {
	mock *MockGraphQLResolverMapStatusWriter
}

// NewMockGraphQLResolverMapStatusWriter creates a new mock instance.
func NewMockGraphQLResolverMapStatusWriter(ctrl *gomock.Controller) *MockGraphQLResolverMapStatusWriter {
	mock := &MockGraphQLResolverMapStatusWriter{ctrl: ctrl}
	mock.recorder = &MockGraphQLResolverMapStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLResolverMapStatusWriter) EXPECT() *MockGraphQLResolverMapStatusWriterMockRecorder {
	return m.recorder
}

// PatchGraphQLResolverMapStatus mocks base method.
func (m *MockGraphQLResolverMapStatusWriter) PatchGraphQLResolverMapStatus(ctx context.Context, obj *v2.GraphQLResolverMap, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGraphQLResolverMapStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGraphQLResolverMapStatus indicates an expected call of PatchGraphQLResolverMapStatus.
func (mr *MockGraphQLResolverMapStatusWriterMockRecorder) PatchGraphQLResolverMapStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGraphQLResolverMapStatus", reflect.TypeOf((*MockGraphQLResolverMapStatusWriter)(nil).PatchGraphQLResolverMapStatus), varargs...)
}

// UpdateGraphQLResolverMapStatus mocks base method.
func (m *MockGraphQLResolverMapStatusWriter) UpdateGraphQLResolverMapStatus(ctx context.Context, obj *v2.GraphQLResolverMap, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGraphQLResolverMapStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLResolverMapStatus indicates an expected call of UpdateGraphQLResolverMapStatus.
func (mr *MockGraphQLResolverMapStatusWriterMockRecorder) UpdateGraphQLResolverMapStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLResolverMapStatus", reflect.TypeOf((*MockGraphQLResolverMapStatusWriter)(nil).UpdateGraphQLResolverMapStatus), varargs...)
}

// MockGraphQLResolverMapClient is a mock of GraphQLResolverMapClient interface.
type MockGraphQLResolverMapClient struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLResolverMapClientMockRecorder
}

// MockGraphQLResolverMapClientMockRecorder is the mock recorder for MockGraphQLResolverMapClient.
type MockGraphQLResolverMapClientMockRecorder struct {
	mock *MockGraphQLResolverMapClient
}

// NewMockGraphQLResolverMapClient creates a new mock instance.
func NewMockGraphQLResolverMapClient(ctrl *gomock.Controller) *MockGraphQLResolverMapClient {
	mock := &MockGraphQLResolverMapClient{ctrl: ctrl}
	mock.recorder = &MockGraphQLResolverMapClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLResolverMapClient) EXPECT() *MockGraphQLResolverMapClientMockRecorder {
	return m.recorder
}

// CreateGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapClient) CreateGraphQLResolverMap(ctx context.Context, obj *v2.GraphQLResolverMap, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGraphQLResolverMap", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGraphQLResolverMap indicates an expected call of CreateGraphQLResolverMap.
func (mr *MockGraphQLResolverMapClientMockRecorder) CreateGraphQLResolverMap(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapClient)(nil).CreateGraphQLResolverMap), varargs...)
}

// DeleteAllOfGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapClient) DeleteAllOfGraphQLResolverMap(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfGraphQLResolverMap", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfGraphQLResolverMap indicates an expected call of DeleteAllOfGraphQLResolverMap.
func (mr *MockGraphQLResolverMapClientMockRecorder) DeleteAllOfGraphQLResolverMap(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapClient)(nil).DeleteAllOfGraphQLResolverMap), varargs...)
}

// DeleteGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapClient) DeleteGraphQLResolverMap(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGraphQLResolverMap", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGraphQLResolverMap indicates an expected call of DeleteGraphQLResolverMap.
func (mr *MockGraphQLResolverMapClientMockRecorder) DeleteGraphQLResolverMap(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapClient)(nil).DeleteGraphQLResolverMap), varargs...)
}

// GetGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapClient) GetGraphQLResolverMap(ctx context.Context, key client.ObjectKey) (*v2.GraphQLResolverMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGraphQLResolverMap", ctx, key)
	ret0, _ := ret[0].(*v2.GraphQLResolverMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGraphQLResolverMap indicates an expected call of GetGraphQLResolverMap.
func (mr *MockGraphQLResolverMapClientMockRecorder) GetGraphQLResolverMap(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapClient)(nil).GetGraphQLResolverMap), ctx, key)
}

// ListGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapClient) ListGraphQLResolverMap(ctx context.Context, opts ...client.ListOption) (*v2.GraphQLResolverMapList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGraphQLResolverMap", varargs...)
	ret0, _ := ret[0].(*v2.GraphQLResolverMapList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGraphQLResolverMap indicates an expected call of ListGraphQLResolverMap.
func (mr *MockGraphQLResolverMapClientMockRecorder) ListGraphQLResolverMap(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapClient)(nil).ListGraphQLResolverMap), varargs...)
}

// PatchGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapClient) PatchGraphQLResolverMap(ctx context.Context, obj *v2.GraphQLResolverMap, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGraphQLResolverMap", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGraphQLResolverMap indicates an expected call of PatchGraphQLResolverMap.
func (mr *MockGraphQLResolverMapClientMockRecorder) PatchGraphQLResolverMap(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapClient)(nil).PatchGraphQLResolverMap), varargs...)
}

// PatchGraphQLResolverMapStatus mocks base method.
func (m *MockGraphQLResolverMapClient) PatchGraphQLResolverMapStatus(ctx context.Context, obj *v2.GraphQLResolverMap, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGraphQLResolverMapStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGraphQLResolverMapStatus indicates an expected call of PatchGraphQLResolverMapStatus.
func (mr *MockGraphQLResolverMapClientMockRecorder) PatchGraphQLResolverMapStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGraphQLResolverMapStatus", reflect.TypeOf((*MockGraphQLResolverMapClient)(nil).PatchGraphQLResolverMapStatus), varargs...)
}

// UpdateGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapClient) UpdateGraphQLResolverMap(ctx context.Context, obj *v2.GraphQLResolverMap, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGraphQLResolverMap", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLResolverMap indicates an expected call of UpdateGraphQLResolverMap.
func (mr *MockGraphQLResolverMapClientMockRecorder) UpdateGraphQLResolverMap(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapClient)(nil).UpdateGraphQLResolverMap), varargs...)
}

// UpdateGraphQLResolverMapStatus mocks base method.
func (m *MockGraphQLResolverMapClient) UpdateGraphQLResolverMapStatus(ctx context.Context, obj *v2.GraphQLResolverMap, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGraphQLResolverMapStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLResolverMapStatus indicates an expected call of UpdateGraphQLResolverMapStatus.
func (mr *MockGraphQLResolverMapClientMockRecorder) UpdateGraphQLResolverMapStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLResolverMapStatus", reflect.TypeOf((*MockGraphQLResolverMapClient)(nil).UpdateGraphQLResolverMapStatus), varargs...)
}

// UpsertGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapClient) UpsertGraphQLResolverMap(ctx context.Context, obj *v2.GraphQLResolverMap, transitionFuncs ...v2.GraphQLResolverMapTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertGraphQLResolverMap", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertGraphQLResolverMap indicates an expected call of UpsertGraphQLResolverMap.
func (mr *MockGraphQLResolverMapClientMockRecorder) UpsertGraphQLResolverMap(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapClient)(nil).UpsertGraphQLResolverMap), varargs...)
}

// MockMulticlusterGraphQLResolverMapClient is a mock of MulticlusterGraphQLResolverMapClient interface.
type MockMulticlusterGraphQLResolverMapClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGraphQLResolverMapClientMockRecorder
}

// MockMulticlusterGraphQLResolverMapClientMockRecorder is the mock recorder for MockMulticlusterGraphQLResolverMapClient.
type MockMulticlusterGraphQLResolverMapClientMockRecorder struct {
	mock *MockMulticlusterGraphQLResolverMapClient
}

// NewMockMulticlusterGraphQLResolverMapClient creates a new mock instance.
func NewMockMulticlusterGraphQLResolverMapClient(ctrl *gomock.Controller) *MockMulticlusterGraphQLResolverMapClient {
	mock := &MockMulticlusterGraphQLResolverMapClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGraphQLResolverMapClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGraphQLResolverMapClient) EXPECT() *MockMulticlusterGraphQLResolverMapClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterGraphQLResolverMapClient) Cluster(cluster string) (v2.GraphQLResolverMapClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.GraphQLResolverMapClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterGraphQLResolverMapClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterGraphQLResolverMapClient)(nil).Cluster), cluster)
}

// MockGraphQLSchemaReader is a mock of GraphQLSchemaReader interface.
type MockGraphQLSchemaReader struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaReaderMockRecorder
}

// MockGraphQLSchemaReaderMockRecorder is the mock recorder for MockGraphQLSchemaReader.
type MockGraphQLSchemaReaderMockRecorder struct {
	mock *MockGraphQLSchemaReader
}

// NewMockGraphQLSchemaReader creates a new mock instance.
func NewMockGraphQLSchemaReader(ctrl *gomock.Controller) *MockGraphQLSchemaReader {
	mock := &MockGraphQLSchemaReader{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaReader) EXPECT() *MockGraphQLSchemaReaderMockRecorder {
	return m.recorder
}

// GetGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaReader) GetGraphQLSchema(ctx context.Context, key client.ObjectKey) (*v2.GraphQLSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGraphQLSchema", ctx, key)
	ret0, _ := ret[0].(*v2.GraphQLSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGraphQLSchema indicates an expected call of GetGraphQLSchema.
func (mr *MockGraphQLSchemaReaderMockRecorder) GetGraphQLSchema(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaReader)(nil).GetGraphQLSchema), ctx, key)
}

// ListGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaReader) ListGraphQLSchema(ctx context.Context, opts ...client.ListOption) (*v2.GraphQLSchemaList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGraphQLSchema", varargs...)
	ret0, _ := ret[0].(*v2.GraphQLSchemaList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGraphQLSchema indicates an expected call of ListGraphQLSchema.
func (mr *MockGraphQLSchemaReaderMockRecorder) ListGraphQLSchema(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaReader)(nil).ListGraphQLSchema), varargs...)
}

// MockGraphQLSchemaWriter is a mock of GraphQLSchemaWriter interface.
type MockGraphQLSchemaWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaWriterMockRecorder
}

// MockGraphQLSchemaWriterMockRecorder is the mock recorder for MockGraphQLSchemaWriter.
type MockGraphQLSchemaWriterMockRecorder struct {
	mock *MockGraphQLSchemaWriter
}

// NewMockGraphQLSchemaWriter creates a new mock instance.
func NewMockGraphQLSchemaWriter(ctrl *gomock.Controller) *MockGraphQLSchemaWriter {
	mock := &MockGraphQLSchemaWriter{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaWriter) EXPECT() *MockGraphQLSchemaWriterMockRecorder {
	return m.recorder
}

// CreateGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaWriter) CreateGraphQLSchema(ctx context.Context, obj *v2.GraphQLSchema, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGraphQLSchema indicates an expected call of CreateGraphQLSchema.
func (mr *MockGraphQLSchemaWriterMockRecorder) CreateGraphQLSchema(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaWriter)(nil).CreateGraphQLSchema), varargs...)
}

// DeleteAllOfGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaWriter) DeleteAllOfGraphQLSchema(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfGraphQLSchema indicates an expected call of DeleteAllOfGraphQLSchema.
func (mr *MockGraphQLSchemaWriterMockRecorder) DeleteAllOfGraphQLSchema(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaWriter)(nil).DeleteAllOfGraphQLSchema), varargs...)
}

// DeleteGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaWriter) DeleteGraphQLSchema(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGraphQLSchema indicates an expected call of DeleteGraphQLSchema.
func (mr *MockGraphQLSchemaWriterMockRecorder) DeleteGraphQLSchema(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaWriter)(nil).DeleteGraphQLSchema), varargs...)
}

// PatchGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaWriter) PatchGraphQLSchema(ctx context.Context, obj *v2.GraphQLSchema, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGraphQLSchema indicates an expected call of PatchGraphQLSchema.
func (mr *MockGraphQLSchemaWriterMockRecorder) PatchGraphQLSchema(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaWriter)(nil).PatchGraphQLSchema), varargs...)
}

// UpdateGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaWriter) UpdateGraphQLSchema(ctx context.Context, obj *v2.GraphQLSchema, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLSchema indicates an expected call of UpdateGraphQLSchema.
func (mr *MockGraphQLSchemaWriterMockRecorder) UpdateGraphQLSchema(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaWriter)(nil).UpdateGraphQLSchema), varargs...)
}

// UpsertGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaWriter) UpsertGraphQLSchema(ctx context.Context, obj *v2.GraphQLSchema, transitionFuncs ...v2.GraphQLSchemaTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertGraphQLSchema indicates an expected call of UpsertGraphQLSchema.
func (mr *MockGraphQLSchemaWriterMockRecorder) UpsertGraphQLSchema(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaWriter)(nil).UpsertGraphQLSchema), varargs...)
}

// MockGraphQLSchemaStatusWriter is a mock of GraphQLSchemaStatusWriter interface.
type MockGraphQLSchemaStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaStatusWriterMockRecorder
}

// MockGraphQLSchemaStatusWriterMockRecorder is the mock recorder for MockGraphQLSchemaStatusWriter.
type MockGraphQLSchemaStatusWriterMockRecorder struct {
	mock *MockGraphQLSchemaStatusWriter
}

// NewMockGraphQLSchemaStatusWriter creates a new mock instance.
func NewMockGraphQLSchemaStatusWriter(ctrl *gomock.Controller) *MockGraphQLSchemaStatusWriter {
	mock := &MockGraphQLSchemaStatusWriter{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaStatusWriter) EXPECT() *MockGraphQLSchemaStatusWriterMockRecorder {
	return m.recorder
}

// PatchGraphQLSchemaStatus mocks base method.
func (m *MockGraphQLSchemaStatusWriter) PatchGraphQLSchemaStatus(ctx context.Context, obj *v2.GraphQLSchema, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGraphQLSchemaStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGraphQLSchemaStatus indicates an expected call of PatchGraphQLSchemaStatus.
func (mr *MockGraphQLSchemaStatusWriterMockRecorder) PatchGraphQLSchemaStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGraphQLSchemaStatus", reflect.TypeOf((*MockGraphQLSchemaStatusWriter)(nil).PatchGraphQLSchemaStatus), varargs...)
}

// UpdateGraphQLSchemaStatus mocks base method.
func (m *MockGraphQLSchemaStatusWriter) UpdateGraphQLSchemaStatus(ctx context.Context, obj *v2.GraphQLSchema, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGraphQLSchemaStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLSchemaStatus indicates an expected call of UpdateGraphQLSchemaStatus.
func (mr *MockGraphQLSchemaStatusWriterMockRecorder) UpdateGraphQLSchemaStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLSchemaStatus", reflect.TypeOf((*MockGraphQLSchemaStatusWriter)(nil).UpdateGraphQLSchemaStatus), varargs...)
}

// MockGraphQLSchemaClient is a mock of GraphQLSchemaClient interface.
type MockGraphQLSchemaClient struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaClientMockRecorder
}

// MockGraphQLSchemaClientMockRecorder is the mock recorder for MockGraphQLSchemaClient.
type MockGraphQLSchemaClientMockRecorder struct {
	mock *MockGraphQLSchemaClient
}

// NewMockGraphQLSchemaClient creates a new mock instance.
func NewMockGraphQLSchemaClient(ctrl *gomock.Controller) *MockGraphQLSchemaClient {
	mock := &MockGraphQLSchemaClient{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaClient) EXPECT() *MockGraphQLSchemaClientMockRecorder {
	return m.recorder
}

// CreateGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaClient) CreateGraphQLSchema(ctx context.Context, obj *v2.GraphQLSchema, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGraphQLSchema indicates an expected call of CreateGraphQLSchema.
func (mr *MockGraphQLSchemaClientMockRecorder) CreateGraphQLSchema(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaClient)(nil).CreateGraphQLSchema), varargs...)
}

// DeleteAllOfGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaClient) DeleteAllOfGraphQLSchema(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfGraphQLSchema indicates an expected call of DeleteAllOfGraphQLSchema.
func (mr *MockGraphQLSchemaClientMockRecorder) DeleteAllOfGraphQLSchema(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaClient)(nil).DeleteAllOfGraphQLSchema), varargs...)
}

// DeleteGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaClient) DeleteGraphQLSchema(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGraphQLSchema indicates an expected call of DeleteGraphQLSchema.
func (mr *MockGraphQLSchemaClientMockRecorder) DeleteGraphQLSchema(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaClient)(nil).DeleteGraphQLSchema), varargs...)
}

// GetGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaClient) GetGraphQLSchema(ctx context.Context, key client.ObjectKey) (*v2.GraphQLSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGraphQLSchema", ctx, key)
	ret0, _ := ret[0].(*v2.GraphQLSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGraphQLSchema indicates an expected call of GetGraphQLSchema.
func (mr *MockGraphQLSchemaClientMockRecorder) GetGraphQLSchema(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaClient)(nil).GetGraphQLSchema), ctx, key)
}

// ListGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaClient) ListGraphQLSchema(ctx context.Context, opts ...client.ListOption) (*v2.GraphQLSchemaList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGraphQLSchema", varargs...)
	ret0, _ := ret[0].(*v2.GraphQLSchemaList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGraphQLSchema indicates an expected call of ListGraphQLSchema.
func (mr *MockGraphQLSchemaClientMockRecorder) ListGraphQLSchema(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaClient)(nil).ListGraphQLSchema), varargs...)
}

// PatchGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaClient) PatchGraphQLSchema(ctx context.Context, obj *v2.GraphQLSchema, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGraphQLSchema indicates an expected call of PatchGraphQLSchema.
func (mr *MockGraphQLSchemaClientMockRecorder) PatchGraphQLSchema(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaClient)(nil).PatchGraphQLSchema), varargs...)
}

// PatchGraphQLSchemaStatus mocks base method.
func (m *MockGraphQLSchemaClient) PatchGraphQLSchemaStatus(ctx context.Context, obj *v2.GraphQLSchema, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGraphQLSchemaStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGraphQLSchemaStatus indicates an expected call of PatchGraphQLSchemaStatus.
func (mr *MockGraphQLSchemaClientMockRecorder) PatchGraphQLSchemaStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGraphQLSchemaStatus", reflect.TypeOf((*MockGraphQLSchemaClient)(nil).PatchGraphQLSchemaStatus), varargs...)
}

// UpdateGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaClient) UpdateGraphQLSchema(ctx context.Context, obj *v2.GraphQLSchema, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLSchema indicates an expected call of UpdateGraphQLSchema.
func (mr *MockGraphQLSchemaClientMockRecorder) UpdateGraphQLSchema(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaClient)(nil).UpdateGraphQLSchema), varargs...)
}

// UpdateGraphQLSchemaStatus mocks base method.
func (m *MockGraphQLSchemaClient) UpdateGraphQLSchemaStatus(ctx context.Context, obj *v2.GraphQLSchema, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGraphQLSchemaStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLSchemaStatus indicates an expected call of UpdateGraphQLSchemaStatus.
func (mr *MockGraphQLSchemaClientMockRecorder) UpdateGraphQLSchemaStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLSchemaStatus", reflect.TypeOf((*MockGraphQLSchemaClient)(nil).UpdateGraphQLSchemaStatus), varargs...)
}

// UpsertGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaClient) UpsertGraphQLSchema(ctx context.Context, obj *v2.GraphQLSchema, transitionFuncs ...v2.GraphQLSchemaTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertGraphQLSchema indicates an expected call of UpsertGraphQLSchema.
func (mr *MockGraphQLSchemaClientMockRecorder) UpsertGraphQLSchema(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaClient)(nil).UpsertGraphQLSchema), varargs...)
}

// MockMulticlusterGraphQLSchemaClient is a mock of MulticlusterGraphQLSchemaClient interface.
type MockMulticlusterGraphQLSchemaClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGraphQLSchemaClientMockRecorder
}

// MockMulticlusterGraphQLSchemaClientMockRecorder is the mock recorder for MockMulticlusterGraphQLSchemaClient.
type MockMulticlusterGraphQLSchemaClientMockRecorder struct {
	mock *MockMulticlusterGraphQLSchemaClient
}

// NewMockMulticlusterGraphQLSchemaClient creates a new mock instance.
func NewMockMulticlusterGraphQLSchemaClient(ctrl *gomock.Controller) *MockMulticlusterGraphQLSchemaClient {
	mock := &MockMulticlusterGraphQLSchemaClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGraphQLSchemaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGraphQLSchemaClient) EXPECT() *MockMulticlusterGraphQLSchemaClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterGraphQLSchemaClient) Cluster(cluster string) (v2.GraphQLSchemaClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.GraphQLSchemaClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterGraphQLSchemaClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterGraphQLSchemaClient)(nil).Cluster), cluster)
}

// MockApiDocReader is a mock of ApiDocReader interface.
type MockApiDocReader struct {
	ctrl     *gomock.Controller
	recorder *MockApiDocReaderMockRecorder
}

// MockApiDocReaderMockRecorder is the mock recorder for MockApiDocReader.
type MockApiDocReaderMockRecorder struct {
	mock *MockApiDocReader
}

// NewMockApiDocReader creates a new mock instance.
func NewMockApiDocReader(ctrl *gomock.Controller) *MockApiDocReader {
	mock := &MockApiDocReader{ctrl: ctrl}
	mock.recorder = &MockApiDocReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDocReader) EXPECT() *MockApiDocReaderMockRecorder {
	return m.recorder
}

// GetApiDoc mocks base method.
func (m *MockApiDocReader) GetApiDoc(ctx context.Context, key client.ObjectKey) (*v2.ApiDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiDoc", ctx, key)
	ret0, _ := ret[0].(*v2.ApiDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiDoc indicates an expected call of GetApiDoc.
func (mr *MockApiDocReaderMockRecorder) GetApiDoc(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiDoc", reflect.TypeOf((*MockApiDocReader)(nil).GetApiDoc), ctx, key)
}

// ListApiDoc mocks base method.
func (m *MockApiDocReader) ListApiDoc(ctx context.Context, opts ...client.ListOption) (*v2.ApiDocList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApiDoc", varargs...)
	ret0, _ := ret[0].(*v2.ApiDocList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApiDoc indicates an expected call of ListApiDoc.
func (mr *MockApiDocReaderMockRecorder) ListApiDoc(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApiDoc", reflect.TypeOf((*MockApiDocReader)(nil).ListApiDoc), varargs...)
}

// MockApiDocWriter is a mock of ApiDocWriter interface.
type MockApiDocWriter struct {
	ctrl     *gomock.Controller
	recorder *MockApiDocWriterMockRecorder
}

// MockApiDocWriterMockRecorder is the mock recorder for MockApiDocWriter.
type MockApiDocWriterMockRecorder struct {
	mock *MockApiDocWriter
}

// NewMockApiDocWriter creates a new mock instance.
func NewMockApiDocWriter(ctrl *gomock.Controller) *MockApiDocWriter {
	mock := &MockApiDocWriter{ctrl: ctrl}
	mock.recorder = &MockApiDocWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDocWriter) EXPECT() *MockApiDocWriterMockRecorder {
	return m.recorder
}

// CreateApiDoc mocks base method.
func (m *MockApiDocWriter) CreateApiDoc(ctx context.Context, obj *v2.ApiDoc, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApiDoc", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApiDoc indicates an expected call of CreateApiDoc.
func (mr *MockApiDocWriterMockRecorder) CreateApiDoc(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiDoc", reflect.TypeOf((*MockApiDocWriter)(nil).CreateApiDoc), varargs...)
}

// DeleteAllOfApiDoc mocks base method.
func (m *MockApiDocWriter) DeleteAllOfApiDoc(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfApiDoc", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfApiDoc indicates an expected call of DeleteAllOfApiDoc.
func (mr *MockApiDocWriterMockRecorder) DeleteAllOfApiDoc(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfApiDoc", reflect.TypeOf((*MockApiDocWriter)(nil).DeleteAllOfApiDoc), varargs...)
}

// DeleteApiDoc mocks base method.
func (m *MockApiDocWriter) DeleteApiDoc(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApiDoc", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApiDoc indicates an expected call of DeleteApiDoc.
func (mr *MockApiDocWriterMockRecorder) DeleteApiDoc(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiDoc", reflect.TypeOf((*MockApiDocWriter)(nil).DeleteApiDoc), varargs...)
}

// PatchApiDoc mocks base method.
func (m *MockApiDocWriter) PatchApiDoc(ctx context.Context, obj *v2.ApiDoc, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchApiDoc", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchApiDoc indicates an expected call of PatchApiDoc.
func (mr *MockApiDocWriterMockRecorder) PatchApiDoc(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchApiDoc", reflect.TypeOf((*MockApiDocWriter)(nil).PatchApiDoc), varargs...)
}

// UpdateApiDoc mocks base method.
func (m *MockApiDocWriter) UpdateApiDoc(ctx context.Context, obj *v2.ApiDoc, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApiDoc", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApiDoc indicates an expected call of UpdateApiDoc.
func (mr *MockApiDocWriterMockRecorder) UpdateApiDoc(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiDoc", reflect.TypeOf((*MockApiDocWriter)(nil).UpdateApiDoc), varargs...)
}

// UpsertApiDoc mocks base method.
func (m *MockApiDocWriter) UpsertApiDoc(ctx context.Context, obj *v2.ApiDoc, transitionFuncs ...v2.ApiDocTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertApiDoc", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertApiDoc indicates an expected call of UpsertApiDoc.
func (mr *MockApiDocWriterMockRecorder) UpsertApiDoc(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertApiDoc", reflect.TypeOf((*MockApiDocWriter)(nil).UpsertApiDoc), varargs...)
}

// MockApiDocStatusWriter is a mock of ApiDocStatusWriter interface.
type MockApiDocStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockApiDocStatusWriterMockRecorder
}

// MockApiDocStatusWriterMockRecorder is the mock recorder for MockApiDocStatusWriter.
type MockApiDocStatusWriterMockRecorder struct {
	mock *MockApiDocStatusWriter
}

// NewMockApiDocStatusWriter creates a new mock instance.
func NewMockApiDocStatusWriter(ctrl *gomock.Controller) *MockApiDocStatusWriter {
	mock := &MockApiDocStatusWriter{ctrl: ctrl}
	mock.recorder = &MockApiDocStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDocStatusWriter) EXPECT() *MockApiDocStatusWriterMockRecorder {
	return m.recorder
}

// PatchApiDocStatus mocks base method.
func (m *MockApiDocStatusWriter) PatchApiDocStatus(ctx context.Context, obj *v2.ApiDoc, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchApiDocStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchApiDocStatus indicates an expected call of PatchApiDocStatus.
func (mr *MockApiDocStatusWriterMockRecorder) PatchApiDocStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchApiDocStatus", reflect.TypeOf((*MockApiDocStatusWriter)(nil).PatchApiDocStatus), varargs...)
}

// UpdateApiDocStatus mocks base method.
func (m *MockApiDocStatusWriter) UpdateApiDocStatus(ctx context.Context, obj *v2.ApiDoc, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApiDocStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApiDocStatus indicates an expected call of UpdateApiDocStatus.
func (mr *MockApiDocStatusWriterMockRecorder) UpdateApiDocStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiDocStatus", reflect.TypeOf((*MockApiDocStatusWriter)(nil).UpdateApiDocStatus), varargs...)
}

// MockApiDocClient is a mock of ApiDocClient interface.
type MockApiDocClient struct {
	ctrl     *gomock.Controller
	recorder *MockApiDocClientMockRecorder
}

// MockApiDocClientMockRecorder is the mock recorder for MockApiDocClient.
type MockApiDocClientMockRecorder struct {
	mock *MockApiDocClient
}

// NewMockApiDocClient creates a new mock instance.
func NewMockApiDocClient(ctrl *gomock.Controller) *MockApiDocClient {
	mock := &MockApiDocClient{ctrl: ctrl}
	mock.recorder = &MockApiDocClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDocClient) EXPECT() *MockApiDocClientMockRecorder {
	return m.recorder
}

// CreateApiDoc mocks base method.
func (m *MockApiDocClient) CreateApiDoc(ctx context.Context, obj *v2.ApiDoc, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApiDoc", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApiDoc indicates an expected call of CreateApiDoc.
func (mr *MockApiDocClientMockRecorder) CreateApiDoc(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiDoc", reflect.TypeOf((*MockApiDocClient)(nil).CreateApiDoc), varargs...)
}

// DeleteAllOfApiDoc mocks base method.
func (m *MockApiDocClient) DeleteAllOfApiDoc(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfApiDoc", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfApiDoc indicates an expected call of DeleteAllOfApiDoc.
func (mr *MockApiDocClientMockRecorder) DeleteAllOfApiDoc(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfApiDoc", reflect.TypeOf((*MockApiDocClient)(nil).DeleteAllOfApiDoc), varargs...)
}

// DeleteApiDoc mocks base method.
func (m *MockApiDocClient) DeleteApiDoc(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApiDoc", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApiDoc indicates an expected call of DeleteApiDoc.
func (mr *MockApiDocClientMockRecorder) DeleteApiDoc(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiDoc", reflect.TypeOf((*MockApiDocClient)(nil).DeleteApiDoc), varargs...)
}

// GetApiDoc mocks base method.
func (m *MockApiDocClient) GetApiDoc(ctx context.Context, key client.ObjectKey) (*v2.ApiDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiDoc", ctx, key)
	ret0, _ := ret[0].(*v2.ApiDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiDoc indicates an expected call of GetApiDoc.
func (mr *MockApiDocClientMockRecorder) GetApiDoc(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiDoc", reflect.TypeOf((*MockApiDocClient)(nil).GetApiDoc), ctx, key)
}

// ListApiDoc mocks base method.
func (m *MockApiDocClient) ListApiDoc(ctx context.Context, opts ...client.ListOption) (*v2.ApiDocList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApiDoc", varargs...)
	ret0, _ := ret[0].(*v2.ApiDocList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApiDoc indicates an expected call of ListApiDoc.
func (mr *MockApiDocClientMockRecorder) ListApiDoc(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApiDoc", reflect.TypeOf((*MockApiDocClient)(nil).ListApiDoc), varargs...)
}

// PatchApiDoc mocks base method.
func (m *MockApiDocClient) PatchApiDoc(ctx context.Context, obj *v2.ApiDoc, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchApiDoc", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchApiDoc indicates an expected call of PatchApiDoc.
func (mr *MockApiDocClientMockRecorder) PatchApiDoc(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchApiDoc", reflect.TypeOf((*MockApiDocClient)(nil).PatchApiDoc), varargs...)
}

// PatchApiDocStatus mocks base method.
func (m *MockApiDocClient) PatchApiDocStatus(ctx context.Context, obj *v2.ApiDoc, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchApiDocStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchApiDocStatus indicates an expected call of PatchApiDocStatus.
func (mr *MockApiDocClientMockRecorder) PatchApiDocStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchApiDocStatus", reflect.TypeOf((*MockApiDocClient)(nil).PatchApiDocStatus), varargs...)
}

// UpdateApiDoc mocks base method.
func (m *MockApiDocClient) UpdateApiDoc(ctx context.Context, obj *v2.ApiDoc, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApiDoc", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApiDoc indicates an expected call of UpdateApiDoc.
func (mr *MockApiDocClientMockRecorder) UpdateApiDoc(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiDoc", reflect.TypeOf((*MockApiDocClient)(nil).UpdateApiDoc), varargs...)
}

// UpdateApiDocStatus mocks base method.
func (m *MockApiDocClient) UpdateApiDocStatus(ctx context.Context, obj *v2.ApiDoc, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApiDocStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApiDocStatus indicates an expected call of UpdateApiDocStatus.
func (mr *MockApiDocClientMockRecorder) UpdateApiDocStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiDocStatus", reflect.TypeOf((*MockApiDocClient)(nil).UpdateApiDocStatus), varargs...)
}

// UpsertApiDoc mocks base method.
func (m *MockApiDocClient) UpsertApiDoc(ctx context.Context, obj *v2.ApiDoc, transitionFuncs ...v2.ApiDocTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertApiDoc", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertApiDoc indicates an expected call of UpsertApiDoc.
func (mr *MockApiDocClientMockRecorder) UpsertApiDoc(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertApiDoc", reflect.TypeOf((*MockApiDocClient)(nil).UpsertApiDoc), varargs...)
}

// MockMulticlusterApiDocClient is a mock of MulticlusterApiDocClient interface.
type MockMulticlusterApiDocClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterApiDocClientMockRecorder
}

// MockMulticlusterApiDocClientMockRecorder is the mock recorder for MockMulticlusterApiDocClient.
type MockMulticlusterApiDocClientMockRecorder struct {
	mock *MockMulticlusterApiDocClient
}

// NewMockMulticlusterApiDocClient creates a new mock instance.
func NewMockMulticlusterApiDocClient(ctrl *gomock.Controller) *MockMulticlusterApiDocClient {
	mock := &MockMulticlusterApiDocClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterApiDocClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterApiDocClient) EXPECT() *MockMulticlusterApiDocClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterApiDocClient) Cluster(cluster string) (v2.ApiDocClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.ApiDocClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterApiDocClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterApiDocClient)(nil).Cluster), cluster)
}

// MockPortalReader is a mock of PortalReader interface.
type MockPortalReader struct {
	ctrl     *gomock.Controller
	recorder *MockPortalReaderMockRecorder
}

// MockPortalReaderMockRecorder is the mock recorder for MockPortalReader.
type MockPortalReaderMockRecorder struct {
	mock *MockPortalReader
}

// NewMockPortalReader creates a new mock instance.
func NewMockPortalReader(ctrl *gomock.Controller) *MockPortalReader {
	mock := &MockPortalReader{ctrl: ctrl}
	mock.recorder = &MockPortalReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalReader) EXPECT() *MockPortalReaderMockRecorder {
	return m.recorder
}

// GetPortal mocks base method.
func (m *MockPortalReader) GetPortal(ctx context.Context, key client.ObjectKey) (*v2.Portal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortal", ctx, key)
	ret0, _ := ret[0].(*v2.Portal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortal indicates an expected call of GetPortal.
func (mr *MockPortalReaderMockRecorder) GetPortal(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortal", reflect.TypeOf((*MockPortalReader)(nil).GetPortal), ctx, key)
}

// ListPortal mocks base method.
func (m *MockPortalReader) ListPortal(ctx context.Context, opts ...client.ListOption) (*v2.PortalList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPortal", varargs...)
	ret0, _ := ret[0].(*v2.PortalList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortal indicates an expected call of ListPortal.
func (mr *MockPortalReaderMockRecorder) ListPortal(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortal", reflect.TypeOf((*MockPortalReader)(nil).ListPortal), varargs...)
}

// MockPortalWriter is a mock of PortalWriter interface.
type MockPortalWriter struct {
	ctrl     *gomock.Controller
	recorder *MockPortalWriterMockRecorder
}

// MockPortalWriterMockRecorder is the mock recorder for MockPortalWriter.
type MockPortalWriterMockRecorder struct {
	mock *MockPortalWriter
}

// NewMockPortalWriter creates a new mock instance.
func NewMockPortalWriter(ctrl *gomock.Controller) *MockPortalWriter {
	mock := &MockPortalWriter{ctrl: ctrl}
	mock.recorder = &MockPortalWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalWriter) EXPECT() *MockPortalWriterMockRecorder {
	return m.recorder
}

// CreatePortal mocks base method.
func (m *MockPortalWriter) CreatePortal(ctx context.Context, obj *v2.Portal, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePortal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePortal indicates an expected call of CreatePortal.
func (mr *MockPortalWriterMockRecorder) CreatePortal(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortal", reflect.TypeOf((*MockPortalWriter)(nil).CreatePortal), varargs...)
}

// DeleteAllOfPortal mocks base method.
func (m *MockPortalWriter) DeleteAllOfPortal(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfPortal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfPortal indicates an expected call of DeleteAllOfPortal.
func (mr *MockPortalWriterMockRecorder) DeleteAllOfPortal(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfPortal", reflect.TypeOf((*MockPortalWriter)(nil).DeleteAllOfPortal), varargs...)
}

// DeletePortal mocks base method.
func (m *MockPortalWriter) DeletePortal(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePortal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePortal indicates an expected call of DeletePortal.
func (mr *MockPortalWriterMockRecorder) DeletePortal(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortal", reflect.TypeOf((*MockPortalWriter)(nil).DeletePortal), varargs...)
}

// PatchPortal mocks base method.
func (m *MockPortalWriter) PatchPortal(ctx context.Context, obj *v2.Portal, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchPortal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPortal indicates an expected call of PatchPortal.
func (mr *MockPortalWriterMockRecorder) PatchPortal(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPortal", reflect.TypeOf((*MockPortalWriter)(nil).PatchPortal), varargs...)
}

// UpdatePortal mocks base method.
func (m *MockPortalWriter) UpdatePortal(ctx context.Context, obj *v2.Portal, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePortal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePortal indicates an expected call of UpdatePortal.
func (mr *MockPortalWriterMockRecorder) UpdatePortal(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortal", reflect.TypeOf((*MockPortalWriter)(nil).UpdatePortal), varargs...)
}

// UpsertPortal mocks base method.
func (m *MockPortalWriter) UpsertPortal(ctx context.Context, obj *v2.Portal, transitionFuncs ...v2.PortalTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertPortal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPortal indicates an expected call of UpsertPortal.
func (mr *MockPortalWriterMockRecorder) UpsertPortal(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPortal", reflect.TypeOf((*MockPortalWriter)(nil).UpsertPortal), varargs...)
}

// MockPortalStatusWriter is a mock of PortalStatusWriter interface.
type MockPortalStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockPortalStatusWriterMockRecorder
}

// MockPortalStatusWriterMockRecorder is the mock recorder for MockPortalStatusWriter.
type MockPortalStatusWriterMockRecorder struct {
	mock *MockPortalStatusWriter
}

// NewMockPortalStatusWriter creates a new mock instance.
func NewMockPortalStatusWriter(ctrl *gomock.Controller) *MockPortalStatusWriter {
	mock := &MockPortalStatusWriter{ctrl: ctrl}
	mock.recorder = &MockPortalStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalStatusWriter) EXPECT() *MockPortalStatusWriterMockRecorder {
	return m.recorder
}

// PatchPortalStatus mocks base method.
func (m *MockPortalStatusWriter) PatchPortalStatus(ctx context.Context, obj *v2.Portal, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchPortalStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPortalStatus indicates an expected call of PatchPortalStatus.
func (mr *MockPortalStatusWriterMockRecorder) PatchPortalStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPortalStatus", reflect.TypeOf((*MockPortalStatusWriter)(nil).PatchPortalStatus), varargs...)
}

// UpdatePortalStatus mocks base method.
func (m *MockPortalStatusWriter) UpdatePortalStatus(ctx context.Context, obj *v2.Portal, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePortalStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePortalStatus indicates an expected call of UpdatePortalStatus.
func (mr *MockPortalStatusWriterMockRecorder) UpdatePortalStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortalStatus", reflect.TypeOf((*MockPortalStatusWriter)(nil).UpdatePortalStatus), varargs...)
}

// MockPortalClient is a mock of PortalClient interface.
type MockPortalClient struct {
	ctrl     *gomock.Controller
	recorder *MockPortalClientMockRecorder
}

// MockPortalClientMockRecorder is the mock recorder for MockPortalClient.
type MockPortalClientMockRecorder struct {
	mock *MockPortalClient
}

// NewMockPortalClient creates a new mock instance.
func NewMockPortalClient(ctrl *gomock.Controller) *MockPortalClient {
	mock := &MockPortalClient{ctrl: ctrl}
	mock.recorder = &MockPortalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalClient) EXPECT() *MockPortalClientMockRecorder {
	return m.recorder
}

// CreatePortal mocks base method.
func (m *MockPortalClient) CreatePortal(ctx context.Context, obj *v2.Portal, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePortal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePortal indicates an expected call of CreatePortal.
func (mr *MockPortalClientMockRecorder) CreatePortal(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortal", reflect.TypeOf((*MockPortalClient)(nil).CreatePortal), varargs...)
}

// DeleteAllOfPortal mocks base method.
func (m *MockPortalClient) DeleteAllOfPortal(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfPortal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfPortal indicates an expected call of DeleteAllOfPortal.
func (mr *MockPortalClientMockRecorder) DeleteAllOfPortal(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfPortal", reflect.TypeOf((*MockPortalClient)(nil).DeleteAllOfPortal), varargs...)
}

// DeletePortal mocks base method.
func (m *MockPortalClient) DeletePortal(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePortal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePortal indicates an expected call of DeletePortal.
func (mr *MockPortalClientMockRecorder) DeletePortal(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortal", reflect.TypeOf((*MockPortalClient)(nil).DeletePortal), varargs...)
}

// GetPortal mocks base method.
func (m *MockPortalClient) GetPortal(ctx context.Context, key client.ObjectKey) (*v2.Portal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortal", ctx, key)
	ret0, _ := ret[0].(*v2.Portal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortal indicates an expected call of GetPortal.
func (mr *MockPortalClientMockRecorder) GetPortal(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortal", reflect.TypeOf((*MockPortalClient)(nil).GetPortal), ctx, key)
}

// ListPortal mocks base method.
func (m *MockPortalClient) ListPortal(ctx context.Context, opts ...client.ListOption) (*v2.PortalList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPortal", varargs...)
	ret0, _ := ret[0].(*v2.PortalList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortal indicates an expected call of ListPortal.
func (mr *MockPortalClientMockRecorder) ListPortal(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortal", reflect.TypeOf((*MockPortalClient)(nil).ListPortal), varargs...)
}

// PatchPortal mocks base method.
func (m *MockPortalClient) PatchPortal(ctx context.Context, obj *v2.Portal, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchPortal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPortal indicates an expected call of PatchPortal.
func (mr *MockPortalClientMockRecorder) PatchPortal(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPortal", reflect.TypeOf((*MockPortalClient)(nil).PatchPortal), varargs...)
}

// PatchPortalStatus mocks base method.
func (m *MockPortalClient) PatchPortalStatus(ctx context.Context, obj *v2.Portal, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchPortalStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPortalStatus indicates an expected call of PatchPortalStatus.
func (mr *MockPortalClientMockRecorder) PatchPortalStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPortalStatus", reflect.TypeOf((*MockPortalClient)(nil).PatchPortalStatus), varargs...)
}

// UpdatePortal mocks base method.
func (m *MockPortalClient) UpdatePortal(ctx context.Context, obj *v2.Portal, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePortal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePortal indicates an expected call of UpdatePortal.
func (mr *MockPortalClientMockRecorder) UpdatePortal(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortal", reflect.TypeOf((*MockPortalClient)(nil).UpdatePortal), varargs...)
}

// UpdatePortalStatus mocks base method.
func (m *MockPortalClient) UpdatePortalStatus(ctx context.Context, obj *v2.Portal, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePortalStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePortalStatus indicates an expected call of UpdatePortalStatus.
func (mr *MockPortalClientMockRecorder) UpdatePortalStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortalStatus", reflect.TypeOf((*MockPortalClient)(nil).UpdatePortalStatus), varargs...)
}

// UpsertPortal mocks base method.
func (m *MockPortalClient) UpsertPortal(ctx context.Context, obj *v2.Portal, transitionFuncs ...v2.PortalTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertPortal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPortal indicates an expected call of UpsertPortal.
func (mr *MockPortalClientMockRecorder) UpsertPortal(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPortal", reflect.TypeOf((*MockPortalClient)(nil).UpsertPortal), varargs...)
}

// MockMulticlusterPortalClient is a mock of MulticlusterPortalClient interface.
type MockMulticlusterPortalClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterPortalClientMockRecorder
}

// MockMulticlusterPortalClientMockRecorder is the mock recorder for MockMulticlusterPortalClient.
type MockMulticlusterPortalClientMockRecorder struct {
	mock *MockMulticlusterPortalClient
}

// NewMockMulticlusterPortalClient creates a new mock instance.
func NewMockMulticlusterPortalClient(ctrl *gomock.Controller) *MockMulticlusterPortalClient {
	mock := &MockMulticlusterPortalClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterPortalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterPortalClient) EXPECT() *MockMulticlusterPortalClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterPortalClient) Cluster(cluster string) (v2.PortalClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.PortalClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterPortalClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterPortalClient)(nil).Cluster), cluster)
}

// MockPortalGroupReader is a mock of PortalGroupReader interface.
type MockPortalGroupReader struct {
	ctrl     *gomock.Controller
	recorder *MockPortalGroupReaderMockRecorder
}

// MockPortalGroupReaderMockRecorder is the mock recorder for MockPortalGroupReader.
type MockPortalGroupReaderMockRecorder struct {
	mock *MockPortalGroupReader
}

// NewMockPortalGroupReader creates a new mock instance.
func NewMockPortalGroupReader(ctrl *gomock.Controller) *MockPortalGroupReader {
	mock := &MockPortalGroupReader{ctrl: ctrl}
	mock.recorder = &MockPortalGroupReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalGroupReader) EXPECT() *MockPortalGroupReaderMockRecorder {
	return m.recorder
}

// GetPortalGroup mocks base method.
func (m *MockPortalGroupReader) GetPortalGroup(ctx context.Context, key client.ObjectKey) (*v2.PortalGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortalGroup", ctx, key)
	ret0, _ := ret[0].(*v2.PortalGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortalGroup indicates an expected call of GetPortalGroup.
func (mr *MockPortalGroupReaderMockRecorder) GetPortalGroup(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortalGroup", reflect.TypeOf((*MockPortalGroupReader)(nil).GetPortalGroup), ctx, key)
}

// ListPortalGroup mocks base method.
func (m *MockPortalGroupReader) ListPortalGroup(ctx context.Context, opts ...client.ListOption) (*v2.PortalGroupList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPortalGroup", varargs...)
	ret0, _ := ret[0].(*v2.PortalGroupList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortalGroup indicates an expected call of ListPortalGroup.
func (mr *MockPortalGroupReaderMockRecorder) ListPortalGroup(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortalGroup", reflect.TypeOf((*MockPortalGroupReader)(nil).ListPortalGroup), varargs...)
}

// MockPortalGroupWriter is a mock of PortalGroupWriter interface.
type MockPortalGroupWriter struct {
	ctrl     *gomock.Controller
	recorder *MockPortalGroupWriterMockRecorder
}

// MockPortalGroupWriterMockRecorder is the mock recorder for MockPortalGroupWriter.
type MockPortalGroupWriterMockRecorder struct {
	mock *MockPortalGroupWriter
}

// NewMockPortalGroupWriter creates a new mock instance.
func NewMockPortalGroupWriter(ctrl *gomock.Controller) *MockPortalGroupWriter {
	mock := &MockPortalGroupWriter{ctrl: ctrl}
	mock.recorder = &MockPortalGroupWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalGroupWriter) EXPECT() *MockPortalGroupWriterMockRecorder {
	return m.recorder
}

// CreatePortalGroup mocks base method.
func (m *MockPortalGroupWriter) CreatePortalGroup(ctx context.Context, obj *v2.PortalGroup, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePortalGroup", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePortalGroup indicates an expected call of CreatePortalGroup.
func (mr *MockPortalGroupWriterMockRecorder) CreatePortalGroup(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortalGroup", reflect.TypeOf((*MockPortalGroupWriter)(nil).CreatePortalGroup), varargs...)
}

// DeleteAllOfPortalGroup mocks base method.
func (m *MockPortalGroupWriter) DeleteAllOfPortalGroup(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfPortalGroup", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfPortalGroup indicates an expected call of DeleteAllOfPortalGroup.
func (mr *MockPortalGroupWriterMockRecorder) DeleteAllOfPortalGroup(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfPortalGroup", reflect.TypeOf((*MockPortalGroupWriter)(nil).DeleteAllOfPortalGroup), varargs...)
}

// DeletePortalGroup mocks base method.
func (m *MockPortalGroupWriter) DeletePortalGroup(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePortalGroup", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePortalGroup indicates an expected call of DeletePortalGroup.
func (mr *MockPortalGroupWriterMockRecorder) DeletePortalGroup(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortalGroup", reflect.TypeOf((*MockPortalGroupWriter)(nil).DeletePortalGroup), varargs...)
}

// PatchPortalGroup mocks base method.
func (m *MockPortalGroupWriter) PatchPortalGroup(ctx context.Context, obj *v2.PortalGroup, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchPortalGroup", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPortalGroup indicates an expected call of PatchPortalGroup.
func (mr *MockPortalGroupWriterMockRecorder) PatchPortalGroup(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPortalGroup", reflect.TypeOf((*MockPortalGroupWriter)(nil).PatchPortalGroup), varargs...)
}

// UpdatePortalGroup mocks base method.
func (m *MockPortalGroupWriter) UpdatePortalGroup(ctx context.Context, obj *v2.PortalGroup, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePortalGroup", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePortalGroup indicates an expected call of UpdatePortalGroup.
func (mr *MockPortalGroupWriterMockRecorder) UpdatePortalGroup(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortalGroup", reflect.TypeOf((*MockPortalGroupWriter)(nil).UpdatePortalGroup), varargs...)
}

// UpsertPortalGroup mocks base method.
func (m *MockPortalGroupWriter) UpsertPortalGroup(ctx context.Context, obj *v2.PortalGroup, transitionFuncs ...v2.PortalGroupTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertPortalGroup", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPortalGroup indicates an expected call of UpsertPortalGroup.
func (mr *MockPortalGroupWriterMockRecorder) UpsertPortalGroup(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPortalGroup", reflect.TypeOf((*MockPortalGroupWriter)(nil).UpsertPortalGroup), varargs...)
}

// MockPortalGroupStatusWriter is a mock of PortalGroupStatusWriter interface.
type MockPortalGroupStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockPortalGroupStatusWriterMockRecorder
}

// MockPortalGroupStatusWriterMockRecorder is the mock recorder for MockPortalGroupStatusWriter.
type MockPortalGroupStatusWriterMockRecorder struct {
	mock *MockPortalGroupStatusWriter
}

// NewMockPortalGroupStatusWriter creates a new mock instance.
func NewMockPortalGroupStatusWriter(ctrl *gomock.Controller) *MockPortalGroupStatusWriter {
	mock := &MockPortalGroupStatusWriter{ctrl: ctrl}
	mock.recorder = &MockPortalGroupStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalGroupStatusWriter) EXPECT() *MockPortalGroupStatusWriterMockRecorder {
	return m.recorder
}

// PatchPortalGroupStatus mocks base method.
func (m *MockPortalGroupStatusWriter) PatchPortalGroupStatus(ctx context.Context, obj *v2.PortalGroup, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchPortalGroupStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPortalGroupStatus indicates an expected call of PatchPortalGroupStatus.
func (mr *MockPortalGroupStatusWriterMockRecorder) PatchPortalGroupStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPortalGroupStatus", reflect.TypeOf((*MockPortalGroupStatusWriter)(nil).PatchPortalGroupStatus), varargs...)
}

// UpdatePortalGroupStatus mocks base method.
func (m *MockPortalGroupStatusWriter) UpdatePortalGroupStatus(ctx context.Context, obj *v2.PortalGroup, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePortalGroupStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePortalGroupStatus indicates an expected call of UpdatePortalGroupStatus.
func (mr *MockPortalGroupStatusWriterMockRecorder) UpdatePortalGroupStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortalGroupStatus", reflect.TypeOf((*MockPortalGroupStatusWriter)(nil).UpdatePortalGroupStatus), varargs...)
}

// MockPortalGroupClient is a mock of PortalGroupClient interface.
type MockPortalGroupClient struct {
	ctrl     *gomock.Controller
	recorder *MockPortalGroupClientMockRecorder
}

// MockPortalGroupClientMockRecorder is the mock recorder for MockPortalGroupClient.
type MockPortalGroupClientMockRecorder struct {
	mock *MockPortalGroupClient
}

// NewMockPortalGroupClient creates a new mock instance.
func NewMockPortalGroupClient(ctrl *gomock.Controller) *MockPortalGroupClient {
	mock := &MockPortalGroupClient{ctrl: ctrl}
	mock.recorder = &MockPortalGroupClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalGroupClient) EXPECT() *MockPortalGroupClientMockRecorder {
	return m.recorder
}

// CreatePortalGroup mocks base method.
func (m *MockPortalGroupClient) CreatePortalGroup(ctx context.Context, obj *v2.PortalGroup, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePortalGroup", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePortalGroup indicates an expected call of CreatePortalGroup.
func (mr *MockPortalGroupClientMockRecorder) CreatePortalGroup(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortalGroup", reflect.TypeOf((*MockPortalGroupClient)(nil).CreatePortalGroup), varargs...)
}

// DeleteAllOfPortalGroup mocks base method.
func (m *MockPortalGroupClient) DeleteAllOfPortalGroup(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfPortalGroup", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfPortalGroup indicates an expected call of DeleteAllOfPortalGroup.
func (mr *MockPortalGroupClientMockRecorder) DeleteAllOfPortalGroup(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfPortalGroup", reflect.TypeOf((*MockPortalGroupClient)(nil).DeleteAllOfPortalGroup), varargs...)
}

// DeletePortalGroup mocks base method.
func (m *MockPortalGroupClient) DeletePortalGroup(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePortalGroup", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePortalGroup indicates an expected call of DeletePortalGroup.
func (mr *MockPortalGroupClientMockRecorder) DeletePortalGroup(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortalGroup", reflect.TypeOf((*MockPortalGroupClient)(nil).DeletePortalGroup), varargs...)
}

// GetPortalGroup mocks base method.
func (m *MockPortalGroupClient) GetPortalGroup(ctx context.Context, key client.ObjectKey) (*v2.PortalGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortalGroup", ctx, key)
	ret0, _ := ret[0].(*v2.PortalGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortalGroup indicates an expected call of GetPortalGroup.
func (mr *MockPortalGroupClientMockRecorder) GetPortalGroup(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortalGroup", reflect.TypeOf((*MockPortalGroupClient)(nil).GetPortalGroup), ctx, key)
}

// ListPortalGroup mocks base method.
func (m *MockPortalGroupClient) ListPortalGroup(ctx context.Context, opts ...client.ListOption) (*v2.PortalGroupList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPortalGroup", varargs...)
	ret0, _ := ret[0].(*v2.PortalGroupList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortalGroup indicates an expected call of ListPortalGroup.
func (mr *MockPortalGroupClientMockRecorder) ListPortalGroup(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortalGroup", reflect.TypeOf((*MockPortalGroupClient)(nil).ListPortalGroup), varargs...)
}

// PatchPortalGroup mocks base method.
func (m *MockPortalGroupClient) PatchPortalGroup(ctx context.Context, obj *v2.PortalGroup, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchPortalGroup", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPortalGroup indicates an expected call of PatchPortalGroup.
func (mr *MockPortalGroupClientMockRecorder) PatchPortalGroup(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPortalGroup", reflect.TypeOf((*MockPortalGroupClient)(nil).PatchPortalGroup), varargs...)
}

// PatchPortalGroupStatus mocks base method.
func (m *MockPortalGroupClient) PatchPortalGroupStatus(ctx context.Context, obj *v2.PortalGroup, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchPortalGroupStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPortalGroupStatus indicates an expected call of PatchPortalGroupStatus.
func (mr *MockPortalGroupClientMockRecorder) PatchPortalGroupStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPortalGroupStatus", reflect.TypeOf((*MockPortalGroupClient)(nil).PatchPortalGroupStatus), varargs...)
}

// UpdatePortalGroup mocks base method.
func (m *MockPortalGroupClient) UpdatePortalGroup(ctx context.Context, obj *v2.PortalGroup, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePortalGroup", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePortalGroup indicates an expected call of UpdatePortalGroup.
func (mr *MockPortalGroupClientMockRecorder) UpdatePortalGroup(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortalGroup", reflect.TypeOf((*MockPortalGroupClient)(nil).UpdatePortalGroup), varargs...)
}

// UpdatePortalGroupStatus mocks base method.
func (m *MockPortalGroupClient) UpdatePortalGroupStatus(ctx context.Context, obj *v2.PortalGroup, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePortalGroupStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePortalGroupStatus indicates an expected call of UpdatePortalGroupStatus.
func (mr *MockPortalGroupClientMockRecorder) UpdatePortalGroupStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortalGroupStatus", reflect.TypeOf((*MockPortalGroupClient)(nil).UpdatePortalGroupStatus), varargs...)
}

// UpsertPortalGroup mocks base method.
func (m *MockPortalGroupClient) UpsertPortalGroup(ctx context.Context, obj *v2.PortalGroup, transitionFuncs ...v2.PortalGroupTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertPortalGroup", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPortalGroup indicates an expected call of UpsertPortalGroup.
func (mr *MockPortalGroupClientMockRecorder) UpsertPortalGroup(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPortalGroup", reflect.TypeOf((*MockPortalGroupClient)(nil).UpsertPortalGroup), varargs...)
}

// MockMulticlusterPortalGroupClient is a mock of MulticlusterPortalGroupClient interface.
type MockMulticlusterPortalGroupClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterPortalGroupClientMockRecorder
}

// MockMulticlusterPortalGroupClientMockRecorder is the mock recorder for MockMulticlusterPortalGroupClient.
type MockMulticlusterPortalGroupClientMockRecorder struct {
	mock *MockMulticlusterPortalGroupClient
}

// NewMockMulticlusterPortalGroupClient creates a new mock instance.
func NewMockMulticlusterPortalGroupClient(ctrl *gomock.Controller) *MockMulticlusterPortalGroupClient {
	mock := &MockMulticlusterPortalGroupClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterPortalGroupClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterPortalGroupClient) EXPECT() *MockMulticlusterPortalGroupClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterPortalGroupClient) Cluster(cluster string) (v2.PortalGroupClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.PortalGroupClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterPortalGroupClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterPortalGroupClient)(nil).Cluster), cluster)
}
