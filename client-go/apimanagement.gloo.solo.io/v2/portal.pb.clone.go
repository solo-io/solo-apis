// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/apimanagement/v2/portal.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *PortalSpec) Clone() proto.Message {
	var target *PortalSpec
	if m == nil {
		return target
	}
	target = &PortalSpec{}

	if m.GetPortalBackendSelectors() != nil {
		target.PortalBackendSelectors = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkloadSelector, len(m.GetPortalBackendSelectors()))
		for idx, v := range m.GetPortalBackendSelectors() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.PortalBackendSelectors[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkloadSelector)
			} else {
				target.PortalBackendSelectors[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkloadSelector)
			}

		}
	}

	if m.GetApis() != nil {
		target.Apis = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectSelector, len(m.GetApis()))
		for idx, v := range m.GetApis() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Apis[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectSelector)
			} else {
				target.Apis[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectSelector)
			}

		}
	}

	if m.GetUsagePlans() != nil {
		target.UsagePlans = make([]*PortalSpec_UsagePlan, len(m.GetUsagePlans()))
		for idx, v := range m.GetUsagePlans() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.UsagePlans[idx] = h.Clone().(*PortalSpec_UsagePlan)
			} else {
				target.UsagePlans[idx] = proto.Clone(v).(*PortalSpec_UsagePlan)
			}

		}
	}

	if m.GetDomains() != nil {
		target.Domains = make([]string, len(m.GetDomains()))
		for idx, v := range m.GetDomains() {

			target.Domains[idx] = v

		}
	}

	if h, ok := interface{}(m.GetVisibility()).(clone.Cloner); ok {
		target.Visibility = h.Clone().(*PortalSpec_Visibility)
	} else {
		target.Visibility = proto.Clone(m.GetVisibility()).(*PortalSpec_Visibility)
	}

	return target
}

// Clone function
func (m *PortalStatus) Clone() proto.Message {
	var target *PortalStatus
	if m == nil {
		return target
	}
	target = &PortalStatus{}

	if h, ok := interface{}(m.GetCommon()).(clone.Cloner); ok {
		target.Common = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	} else {
		target.Common = proto.Clone(m.GetCommon()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	}

	target.OwnerWorkspace = m.GetOwnerWorkspace()

	target.RouteTablesCount = m.GetRouteTablesCount()

	target.ExtAuthPolicyCount = m.GetExtAuthPolicyCount()

	target.RateLimitPolicyCount = m.GetRateLimitPolicyCount()

	target.PortalBackendCount = m.GetPortalBackendCount()

	return target
}

// Clone function
func (m *PortalReport) Clone() proto.Message {
	var target *PortalReport
	if m == nil {
		return target
	}
	target = &PortalReport{}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			}

		}
	}

	target.OwnerWorkspace = m.GetOwnerWorkspace()

	if m.GetSelectedRouteTables() != nil {
		target.SelectedRouteTables = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference, len(m.GetSelectedRouteTables()))
		for idx, v := range m.GetSelectedRouteTables() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SelectedRouteTables[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			} else {
				target.SelectedRouteTables[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			}

		}
	}

	if m.GetSelectedExtAuthPolicies() != nil {
		target.SelectedExtAuthPolicies = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference, len(m.GetSelectedExtAuthPolicies()))
		for idx, v := range m.GetSelectedExtAuthPolicies() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SelectedExtAuthPolicies[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			} else {
				target.SelectedExtAuthPolicies[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			}

		}
	}

	if m.GetSelectedRateLimitPolicies() != nil {
		target.SelectedRateLimitPolicies = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference, len(m.GetSelectedRateLimitPolicies()))
		for idx, v := range m.GetSelectedRateLimitPolicies() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SelectedRateLimitPolicies[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			} else {
				target.SelectedRateLimitPolicies[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			}

		}
	}

	if m.GetSelectedPortalBackend() != nil {
		target.SelectedPortalBackend = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference, len(m.GetSelectedPortalBackend()))
		for idx, v := range m.GetSelectedPortalBackend() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SelectedPortalBackend[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			} else {
				target.SelectedPortalBackend[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			}

		}
	}

	return target
}

// Clone function
func (m *PortalSpec_Visibility) Clone() proto.Message {
	var target *PortalSpec_Visibility
	if m == nil {
		return target
	}
	target = &PortalSpec_Visibility{}

	target.Public = m.GetPublic()

	if m.GetPrivateAPILabels() != nil {
		target.PrivateAPILabels = make(map[string]string, len(m.GetPrivateAPILabels()))
		for k, v := range m.GetPrivateAPILabels() {

			target.PrivateAPILabels[k] = v

		}
	}

	return target
}

// Clone function
func (m *PortalSpec_UsagePlan) Clone() proto.Message {
	var target *PortalSpec_UsagePlan
	if m == nil {
		return target
	}
	target = &PortalSpec_UsagePlan{}

	target.Name = m.GetName()

	target.DisplayName = m.GetDisplayName()

	target.Description = m.GetDescription()

	return target
}
