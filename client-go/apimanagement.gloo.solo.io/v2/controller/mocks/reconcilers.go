// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v2 "github.com/solo-io/solo-apis/client-go/apimanagement.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/client-go/apimanagement.gloo.solo.io/v2/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockGraphQLStitchedSchemaReconciler is a mock of GraphQLStitchedSchemaReconciler interface.
type MockGraphQLStitchedSchemaReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLStitchedSchemaReconcilerMockRecorder
}

// MockGraphQLStitchedSchemaReconcilerMockRecorder is the mock recorder for MockGraphQLStitchedSchemaReconciler.
type MockGraphQLStitchedSchemaReconcilerMockRecorder struct {
	mock *MockGraphQLStitchedSchemaReconciler
}

// NewMockGraphQLStitchedSchemaReconciler creates a new mock instance.
func NewMockGraphQLStitchedSchemaReconciler(ctrl *gomock.Controller) *MockGraphQLStitchedSchemaReconciler {
	mock := &MockGraphQLStitchedSchemaReconciler{ctrl: ctrl}
	mock.recorder = &MockGraphQLStitchedSchemaReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLStitchedSchemaReconciler) EXPECT() *MockGraphQLStitchedSchemaReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaReconciler) ReconcileGraphQLStitchedSchema(obj *v2.GraphQLStitchedSchema) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLStitchedSchema", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGraphQLStitchedSchema indicates an expected call of ReconcileGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaReconcilerMockRecorder) ReconcileGraphQLStitchedSchema(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaReconciler)(nil).ReconcileGraphQLStitchedSchema), obj)
}

// MockGraphQLStitchedSchemaDeletionReconciler is a mock of GraphQLStitchedSchemaDeletionReconciler interface.
type MockGraphQLStitchedSchemaDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLStitchedSchemaDeletionReconcilerMockRecorder
}

// MockGraphQLStitchedSchemaDeletionReconcilerMockRecorder is the mock recorder for MockGraphQLStitchedSchemaDeletionReconciler.
type MockGraphQLStitchedSchemaDeletionReconcilerMockRecorder struct {
	mock *MockGraphQLStitchedSchemaDeletionReconciler
}

// NewMockGraphQLStitchedSchemaDeletionReconciler creates a new mock instance.
func NewMockGraphQLStitchedSchemaDeletionReconciler(ctrl *gomock.Controller) *MockGraphQLStitchedSchemaDeletionReconciler {
	mock := &MockGraphQLStitchedSchemaDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockGraphQLStitchedSchemaDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLStitchedSchemaDeletionReconciler) EXPECT() *MockGraphQLStitchedSchemaDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLStitchedSchemaDeletion mocks base method.
func (m *MockGraphQLStitchedSchemaDeletionReconciler) ReconcileGraphQLStitchedSchemaDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLStitchedSchemaDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGraphQLStitchedSchemaDeletion indicates an expected call of ReconcileGraphQLStitchedSchemaDeletion.
func (mr *MockGraphQLStitchedSchemaDeletionReconcilerMockRecorder) ReconcileGraphQLStitchedSchemaDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLStitchedSchemaDeletion", reflect.TypeOf((*MockGraphQLStitchedSchemaDeletionReconciler)(nil).ReconcileGraphQLStitchedSchemaDeletion), req)
}

// MockGraphQLStitchedSchemaFinalizer is a mock of GraphQLStitchedSchemaFinalizer interface.
type MockGraphQLStitchedSchemaFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLStitchedSchemaFinalizerMockRecorder
}

// MockGraphQLStitchedSchemaFinalizerMockRecorder is the mock recorder for MockGraphQLStitchedSchemaFinalizer.
type MockGraphQLStitchedSchemaFinalizerMockRecorder struct {
	mock *MockGraphQLStitchedSchemaFinalizer
}

// NewMockGraphQLStitchedSchemaFinalizer creates a new mock instance.
func NewMockGraphQLStitchedSchemaFinalizer(ctrl *gomock.Controller) *MockGraphQLStitchedSchemaFinalizer {
	mock := &MockGraphQLStitchedSchemaFinalizer{ctrl: ctrl}
	mock.recorder = &MockGraphQLStitchedSchemaFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLStitchedSchemaFinalizer) EXPECT() *MockGraphQLStitchedSchemaFinalizerMockRecorder {
	return m.recorder
}

// FinalizeGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaFinalizer) FinalizeGraphQLStitchedSchema(obj *v2.GraphQLStitchedSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeGraphQLStitchedSchema", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeGraphQLStitchedSchema indicates an expected call of FinalizeGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaFinalizerMockRecorder) FinalizeGraphQLStitchedSchema(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaFinalizer)(nil).FinalizeGraphQLStitchedSchema), obj)
}

// GraphQLStitchedSchemaFinalizerName mocks base method.
func (m *MockGraphQLStitchedSchemaFinalizer) GraphQLStitchedSchemaFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphQLStitchedSchemaFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GraphQLStitchedSchemaFinalizerName indicates an expected call of GraphQLStitchedSchemaFinalizerName.
func (mr *MockGraphQLStitchedSchemaFinalizerMockRecorder) GraphQLStitchedSchemaFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphQLStitchedSchemaFinalizerName", reflect.TypeOf((*MockGraphQLStitchedSchemaFinalizer)(nil).GraphQLStitchedSchemaFinalizerName))
}

// ReconcileGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaFinalizer) ReconcileGraphQLStitchedSchema(obj *v2.GraphQLStitchedSchema) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLStitchedSchema", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGraphQLStitchedSchema indicates an expected call of ReconcileGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaFinalizerMockRecorder) ReconcileGraphQLStitchedSchema(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaFinalizer)(nil).ReconcileGraphQLStitchedSchema), obj)
}

// MockGraphQLStitchedSchemaReconcileLoop is a mock of GraphQLStitchedSchemaReconcileLoop interface.
type MockGraphQLStitchedSchemaReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLStitchedSchemaReconcileLoopMockRecorder
}

// MockGraphQLStitchedSchemaReconcileLoopMockRecorder is the mock recorder for MockGraphQLStitchedSchemaReconcileLoop.
type MockGraphQLStitchedSchemaReconcileLoopMockRecorder struct {
	mock *MockGraphQLStitchedSchemaReconcileLoop
}

// NewMockGraphQLStitchedSchemaReconcileLoop creates a new mock instance.
func NewMockGraphQLStitchedSchemaReconcileLoop(ctrl *gomock.Controller) *MockGraphQLStitchedSchemaReconcileLoop {
	mock := &MockGraphQLStitchedSchemaReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockGraphQLStitchedSchemaReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLStitchedSchemaReconcileLoop) EXPECT() *MockGraphQLStitchedSchemaReconcileLoopMockRecorder {
	return m.recorder
}

// RunGraphQLStitchedSchemaReconciler mocks base method.
func (m *MockGraphQLStitchedSchemaReconcileLoop) RunGraphQLStitchedSchemaReconciler(ctx context.Context, rec controller.GraphQLStitchedSchemaReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunGraphQLStitchedSchemaReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunGraphQLStitchedSchemaReconciler indicates an expected call of RunGraphQLStitchedSchemaReconciler.
func (mr *MockGraphQLStitchedSchemaReconcileLoopMockRecorder) RunGraphQLStitchedSchemaReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunGraphQLStitchedSchemaReconciler", reflect.TypeOf((*MockGraphQLStitchedSchemaReconcileLoop)(nil).RunGraphQLStitchedSchemaReconciler), varargs...)
}

// MockGraphQLResolverMapReconciler is a mock of GraphQLResolverMapReconciler interface.
type MockGraphQLResolverMapReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLResolverMapReconcilerMockRecorder
}

// MockGraphQLResolverMapReconcilerMockRecorder is the mock recorder for MockGraphQLResolverMapReconciler.
type MockGraphQLResolverMapReconcilerMockRecorder struct {
	mock *MockGraphQLResolverMapReconciler
}

// NewMockGraphQLResolverMapReconciler creates a new mock instance.
func NewMockGraphQLResolverMapReconciler(ctrl *gomock.Controller) *MockGraphQLResolverMapReconciler {
	mock := &MockGraphQLResolverMapReconciler{ctrl: ctrl}
	mock.recorder = &MockGraphQLResolverMapReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLResolverMapReconciler) EXPECT() *MockGraphQLResolverMapReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapReconciler) ReconcileGraphQLResolverMap(obj *v2.GraphQLResolverMap) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLResolverMap", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGraphQLResolverMap indicates an expected call of ReconcileGraphQLResolverMap.
func (mr *MockGraphQLResolverMapReconcilerMockRecorder) ReconcileGraphQLResolverMap(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapReconciler)(nil).ReconcileGraphQLResolverMap), obj)
}

// MockGraphQLResolverMapDeletionReconciler is a mock of GraphQLResolverMapDeletionReconciler interface.
type MockGraphQLResolverMapDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLResolverMapDeletionReconcilerMockRecorder
}

// MockGraphQLResolverMapDeletionReconcilerMockRecorder is the mock recorder for MockGraphQLResolverMapDeletionReconciler.
type MockGraphQLResolverMapDeletionReconcilerMockRecorder struct {
	mock *MockGraphQLResolverMapDeletionReconciler
}

// NewMockGraphQLResolverMapDeletionReconciler creates a new mock instance.
func NewMockGraphQLResolverMapDeletionReconciler(ctrl *gomock.Controller) *MockGraphQLResolverMapDeletionReconciler {
	mock := &MockGraphQLResolverMapDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockGraphQLResolverMapDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLResolverMapDeletionReconciler) EXPECT() *MockGraphQLResolverMapDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLResolverMapDeletion mocks base method.
func (m *MockGraphQLResolverMapDeletionReconciler) ReconcileGraphQLResolverMapDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLResolverMapDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGraphQLResolverMapDeletion indicates an expected call of ReconcileGraphQLResolverMapDeletion.
func (mr *MockGraphQLResolverMapDeletionReconcilerMockRecorder) ReconcileGraphQLResolverMapDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLResolverMapDeletion", reflect.TypeOf((*MockGraphQLResolverMapDeletionReconciler)(nil).ReconcileGraphQLResolverMapDeletion), req)
}

// MockGraphQLResolverMapFinalizer is a mock of GraphQLResolverMapFinalizer interface.
type MockGraphQLResolverMapFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLResolverMapFinalizerMockRecorder
}

// MockGraphQLResolverMapFinalizerMockRecorder is the mock recorder for MockGraphQLResolverMapFinalizer.
type MockGraphQLResolverMapFinalizerMockRecorder struct {
	mock *MockGraphQLResolverMapFinalizer
}

// NewMockGraphQLResolverMapFinalizer creates a new mock instance.
func NewMockGraphQLResolverMapFinalizer(ctrl *gomock.Controller) *MockGraphQLResolverMapFinalizer {
	mock := &MockGraphQLResolverMapFinalizer{ctrl: ctrl}
	mock.recorder = &MockGraphQLResolverMapFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLResolverMapFinalizer) EXPECT() *MockGraphQLResolverMapFinalizerMockRecorder {
	return m.recorder
}

// FinalizeGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapFinalizer) FinalizeGraphQLResolverMap(obj *v2.GraphQLResolverMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeGraphQLResolverMap", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeGraphQLResolverMap indicates an expected call of FinalizeGraphQLResolverMap.
func (mr *MockGraphQLResolverMapFinalizerMockRecorder) FinalizeGraphQLResolverMap(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapFinalizer)(nil).FinalizeGraphQLResolverMap), obj)
}

// GraphQLResolverMapFinalizerName mocks base method.
func (m *MockGraphQLResolverMapFinalizer) GraphQLResolverMapFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphQLResolverMapFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GraphQLResolverMapFinalizerName indicates an expected call of GraphQLResolverMapFinalizerName.
func (mr *MockGraphQLResolverMapFinalizerMockRecorder) GraphQLResolverMapFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphQLResolverMapFinalizerName", reflect.TypeOf((*MockGraphQLResolverMapFinalizer)(nil).GraphQLResolverMapFinalizerName))
}

// ReconcileGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapFinalizer) ReconcileGraphQLResolverMap(obj *v2.GraphQLResolverMap) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLResolverMap", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGraphQLResolverMap indicates an expected call of ReconcileGraphQLResolverMap.
func (mr *MockGraphQLResolverMapFinalizerMockRecorder) ReconcileGraphQLResolverMap(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapFinalizer)(nil).ReconcileGraphQLResolverMap), obj)
}

// MockGraphQLResolverMapReconcileLoop is a mock of GraphQLResolverMapReconcileLoop interface.
type MockGraphQLResolverMapReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLResolverMapReconcileLoopMockRecorder
}

// MockGraphQLResolverMapReconcileLoopMockRecorder is the mock recorder for MockGraphQLResolverMapReconcileLoop.
type MockGraphQLResolverMapReconcileLoopMockRecorder struct {
	mock *MockGraphQLResolverMapReconcileLoop
}

// NewMockGraphQLResolverMapReconcileLoop creates a new mock instance.
func NewMockGraphQLResolverMapReconcileLoop(ctrl *gomock.Controller) *MockGraphQLResolverMapReconcileLoop {
	mock := &MockGraphQLResolverMapReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockGraphQLResolverMapReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLResolverMapReconcileLoop) EXPECT() *MockGraphQLResolverMapReconcileLoopMockRecorder {
	return m.recorder
}

// RunGraphQLResolverMapReconciler mocks base method.
func (m *MockGraphQLResolverMapReconcileLoop) RunGraphQLResolverMapReconciler(ctx context.Context, rec controller.GraphQLResolverMapReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunGraphQLResolverMapReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunGraphQLResolverMapReconciler indicates an expected call of RunGraphQLResolverMapReconciler.
func (mr *MockGraphQLResolverMapReconcileLoopMockRecorder) RunGraphQLResolverMapReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunGraphQLResolverMapReconciler", reflect.TypeOf((*MockGraphQLResolverMapReconcileLoop)(nil).RunGraphQLResolverMapReconciler), varargs...)
}

// MockGraphQLSchemaReconciler is a mock of GraphQLSchemaReconciler interface.
type MockGraphQLSchemaReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaReconcilerMockRecorder
}

// MockGraphQLSchemaReconcilerMockRecorder is the mock recorder for MockGraphQLSchemaReconciler.
type MockGraphQLSchemaReconcilerMockRecorder struct {
	mock *MockGraphQLSchemaReconciler
}

// NewMockGraphQLSchemaReconciler creates a new mock instance.
func NewMockGraphQLSchemaReconciler(ctrl *gomock.Controller) *MockGraphQLSchemaReconciler {
	mock := &MockGraphQLSchemaReconciler{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaReconciler) EXPECT() *MockGraphQLSchemaReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaReconciler) ReconcileGraphQLSchema(obj *v2.GraphQLSchema) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLSchema", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGraphQLSchema indicates an expected call of ReconcileGraphQLSchema.
func (mr *MockGraphQLSchemaReconcilerMockRecorder) ReconcileGraphQLSchema(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaReconciler)(nil).ReconcileGraphQLSchema), obj)
}

// MockGraphQLSchemaDeletionReconciler is a mock of GraphQLSchemaDeletionReconciler interface.
type MockGraphQLSchemaDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaDeletionReconcilerMockRecorder
}

// MockGraphQLSchemaDeletionReconcilerMockRecorder is the mock recorder for MockGraphQLSchemaDeletionReconciler.
type MockGraphQLSchemaDeletionReconcilerMockRecorder struct {
	mock *MockGraphQLSchemaDeletionReconciler
}

// NewMockGraphQLSchemaDeletionReconciler creates a new mock instance.
func NewMockGraphQLSchemaDeletionReconciler(ctrl *gomock.Controller) *MockGraphQLSchemaDeletionReconciler {
	mock := &MockGraphQLSchemaDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaDeletionReconciler) EXPECT() *MockGraphQLSchemaDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLSchemaDeletion mocks base method.
func (m *MockGraphQLSchemaDeletionReconciler) ReconcileGraphQLSchemaDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLSchemaDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGraphQLSchemaDeletion indicates an expected call of ReconcileGraphQLSchemaDeletion.
func (mr *MockGraphQLSchemaDeletionReconcilerMockRecorder) ReconcileGraphQLSchemaDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLSchemaDeletion", reflect.TypeOf((*MockGraphQLSchemaDeletionReconciler)(nil).ReconcileGraphQLSchemaDeletion), req)
}

// MockGraphQLSchemaFinalizer is a mock of GraphQLSchemaFinalizer interface.
type MockGraphQLSchemaFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaFinalizerMockRecorder
}

// MockGraphQLSchemaFinalizerMockRecorder is the mock recorder for MockGraphQLSchemaFinalizer.
type MockGraphQLSchemaFinalizerMockRecorder struct {
	mock *MockGraphQLSchemaFinalizer
}

// NewMockGraphQLSchemaFinalizer creates a new mock instance.
func NewMockGraphQLSchemaFinalizer(ctrl *gomock.Controller) *MockGraphQLSchemaFinalizer {
	mock := &MockGraphQLSchemaFinalizer{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaFinalizer) EXPECT() *MockGraphQLSchemaFinalizerMockRecorder {
	return m.recorder
}

// FinalizeGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaFinalizer) FinalizeGraphQLSchema(obj *v2.GraphQLSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeGraphQLSchema", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeGraphQLSchema indicates an expected call of FinalizeGraphQLSchema.
func (mr *MockGraphQLSchemaFinalizerMockRecorder) FinalizeGraphQLSchema(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaFinalizer)(nil).FinalizeGraphQLSchema), obj)
}

// GraphQLSchemaFinalizerName mocks base method.
func (m *MockGraphQLSchemaFinalizer) GraphQLSchemaFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphQLSchemaFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GraphQLSchemaFinalizerName indicates an expected call of GraphQLSchemaFinalizerName.
func (mr *MockGraphQLSchemaFinalizerMockRecorder) GraphQLSchemaFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphQLSchemaFinalizerName", reflect.TypeOf((*MockGraphQLSchemaFinalizer)(nil).GraphQLSchemaFinalizerName))
}

// ReconcileGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaFinalizer) ReconcileGraphQLSchema(obj *v2.GraphQLSchema) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLSchema", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGraphQLSchema indicates an expected call of ReconcileGraphQLSchema.
func (mr *MockGraphQLSchemaFinalizerMockRecorder) ReconcileGraphQLSchema(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaFinalizer)(nil).ReconcileGraphQLSchema), obj)
}

// MockGraphQLSchemaReconcileLoop is a mock of GraphQLSchemaReconcileLoop interface.
type MockGraphQLSchemaReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaReconcileLoopMockRecorder
}

// MockGraphQLSchemaReconcileLoopMockRecorder is the mock recorder for MockGraphQLSchemaReconcileLoop.
type MockGraphQLSchemaReconcileLoopMockRecorder struct {
	mock *MockGraphQLSchemaReconcileLoop
}

// NewMockGraphQLSchemaReconcileLoop creates a new mock instance.
func NewMockGraphQLSchemaReconcileLoop(ctrl *gomock.Controller) *MockGraphQLSchemaReconcileLoop {
	mock := &MockGraphQLSchemaReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaReconcileLoop) EXPECT() *MockGraphQLSchemaReconcileLoopMockRecorder {
	return m.recorder
}

// RunGraphQLSchemaReconciler mocks base method.
func (m *MockGraphQLSchemaReconcileLoop) RunGraphQLSchemaReconciler(ctx context.Context, rec controller.GraphQLSchemaReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunGraphQLSchemaReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunGraphQLSchemaReconciler indicates an expected call of RunGraphQLSchemaReconciler.
func (mr *MockGraphQLSchemaReconcileLoopMockRecorder) RunGraphQLSchemaReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunGraphQLSchemaReconciler", reflect.TypeOf((*MockGraphQLSchemaReconcileLoop)(nil).RunGraphQLSchemaReconciler), varargs...)
}

// MockApiDocReconciler is a mock of ApiDocReconciler interface.
type MockApiDocReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockApiDocReconcilerMockRecorder
}

// MockApiDocReconcilerMockRecorder is the mock recorder for MockApiDocReconciler.
type MockApiDocReconcilerMockRecorder struct {
	mock *MockApiDocReconciler
}

// NewMockApiDocReconciler creates a new mock instance.
func NewMockApiDocReconciler(ctrl *gomock.Controller) *MockApiDocReconciler {
	mock := &MockApiDocReconciler{ctrl: ctrl}
	mock.recorder = &MockApiDocReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDocReconciler) EXPECT() *MockApiDocReconcilerMockRecorder {
	return m.recorder
}

// ReconcileApiDoc mocks base method.
func (m *MockApiDocReconciler) ReconcileApiDoc(obj *v2.ApiDoc) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileApiDoc", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileApiDoc indicates an expected call of ReconcileApiDoc.
func (mr *MockApiDocReconcilerMockRecorder) ReconcileApiDoc(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileApiDoc", reflect.TypeOf((*MockApiDocReconciler)(nil).ReconcileApiDoc), obj)
}

// MockApiDocDeletionReconciler is a mock of ApiDocDeletionReconciler interface.
type MockApiDocDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockApiDocDeletionReconcilerMockRecorder
}

// MockApiDocDeletionReconcilerMockRecorder is the mock recorder for MockApiDocDeletionReconciler.
type MockApiDocDeletionReconcilerMockRecorder struct {
	mock *MockApiDocDeletionReconciler
}

// NewMockApiDocDeletionReconciler creates a new mock instance.
func NewMockApiDocDeletionReconciler(ctrl *gomock.Controller) *MockApiDocDeletionReconciler {
	mock := &MockApiDocDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockApiDocDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDocDeletionReconciler) EXPECT() *MockApiDocDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileApiDocDeletion mocks base method.
func (m *MockApiDocDeletionReconciler) ReconcileApiDocDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileApiDocDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileApiDocDeletion indicates an expected call of ReconcileApiDocDeletion.
func (mr *MockApiDocDeletionReconcilerMockRecorder) ReconcileApiDocDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileApiDocDeletion", reflect.TypeOf((*MockApiDocDeletionReconciler)(nil).ReconcileApiDocDeletion), req)
}

// MockApiDocFinalizer is a mock of ApiDocFinalizer interface.
type MockApiDocFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockApiDocFinalizerMockRecorder
}

// MockApiDocFinalizerMockRecorder is the mock recorder for MockApiDocFinalizer.
type MockApiDocFinalizerMockRecorder struct {
	mock *MockApiDocFinalizer
}

// NewMockApiDocFinalizer creates a new mock instance.
func NewMockApiDocFinalizer(ctrl *gomock.Controller) *MockApiDocFinalizer {
	mock := &MockApiDocFinalizer{ctrl: ctrl}
	mock.recorder = &MockApiDocFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDocFinalizer) EXPECT() *MockApiDocFinalizerMockRecorder {
	return m.recorder
}

// ApiDocFinalizerName mocks base method.
func (m *MockApiDocFinalizer) ApiDocFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApiDocFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ApiDocFinalizerName indicates an expected call of ApiDocFinalizerName.
func (mr *MockApiDocFinalizerMockRecorder) ApiDocFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApiDocFinalizerName", reflect.TypeOf((*MockApiDocFinalizer)(nil).ApiDocFinalizerName))
}

// FinalizeApiDoc mocks base method.
func (m *MockApiDocFinalizer) FinalizeApiDoc(obj *v2.ApiDoc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeApiDoc", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeApiDoc indicates an expected call of FinalizeApiDoc.
func (mr *MockApiDocFinalizerMockRecorder) FinalizeApiDoc(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeApiDoc", reflect.TypeOf((*MockApiDocFinalizer)(nil).FinalizeApiDoc), obj)
}

// ReconcileApiDoc mocks base method.
func (m *MockApiDocFinalizer) ReconcileApiDoc(obj *v2.ApiDoc) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileApiDoc", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileApiDoc indicates an expected call of ReconcileApiDoc.
func (mr *MockApiDocFinalizerMockRecorder) ReconcileApiDoc(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileApiDoc", reflect.TypeOf((*MockApiDocFinalizer)(nil).ReconcileApiDoc), obj)
}

// MockApiDocReconcileLoop is a mock of ApiDocReconcileLoop interface.
type MockApiDocReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockApiDocReconcileLoopMockRecorder
}

// MockApiDocReconcileLoopMockRecorder is the mock recorder for MockApiDocReconcileLoop.
type MockApiDocReconcileLoopMockRecorder struct {
	mock *MockApiDocReconcileLoop
}

// NewMockApiDocReconcileLoop creates a new mock instance.
func NewMockApiDocReconcileLoop(ctrl *gomock.Controller) *MockApiDocReconcileLoop {
	mock := &MockApiDocReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockApiDocReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDocReconcileLoop) EXPECT() *MockApiDocReconcileLoopMockRecorder {
	return m.recorder
}

// RunApiDocReconciler mocks base method.
func (m *MockApiDocReconcileLoop) RunApiDocReconciler(ctx context.Context, rec controller.ApiDocReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunApiDocReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunApiDocReconciler indicates an expected call of RunApiDocReconciler.
func (mr *MockApiDocReconcileLoopMockRecorder) RunApiDocReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunApiDocReconciler", reflect.TypeOf((*MockApiDocReconcileLoop)(nil).RunApiDocReconciler), varargs...)
}
