// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go
//
// Generated by this command:
//
//	mockgen -source ./reconcilers.go -destination mocks/reconcilers.go
//

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	gomock "go.uber.org/mock/gomock"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"

	v2 "github.com/solo-io/solo-apis/client-go/apimanagement.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/client-go/apimanagement.gloo.solo.io/v2/controller"
)

// MockGraphQLStitchedSchemaReconciler is a mock of GraphQLStitchedSchemaReconciler interface.
type MockGraphQLStitchedSchemaReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLStitchedSchemaReconcilerMockRecorder
}

// MockGraphQLStitchedSchemaReconcilerMockRecorder is the mock recorder for MockGraphQLStitchedSchemaReconciler.
type MockGraphQLStitchedSchemaReconcilerMockRecorder struct {
	mock *MockGraphQLStitchedSchemaReconciler
}

// NewMockGraphQLStitchedSchemaReconciler creates a new mock instance.
func NewMockGraphQLStitchedSchemaReconciler(ctrl *gomock.Controller) *MockGraphQLStitchedSchemaReconciler {
	mock := &MockGraphQLStitchedSchemaReconciler{ctrl: ctrl}
	mock.recorder = &MockGraphQLStitchedSchemaReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLStitchedSchemaReconciler) EXPECT() *MockGraphQLStitchedSchemaReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaReconciler) ReconcileGraphQLStitchedSchema(obj *v2.GraphQLStitchedSchema) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLStitchedSchema", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGraphQLStitchedSchema indicates an expected call of ReconcileGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaReconcilerMockRecorder) ReconcileGraphQLStitchedSchema(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaReconciler)(nil).ReconcileGraphQLStitchedSchema), obj)
}

// MockGraphQLStitchedSchemaDeletionReconciler is a mock of GraphQLStitchedSchemaDeletionReconciler interface.
type MockGraphQLStitchedSchemaDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLStitchedSchemaDeletionReconcilerMockRecorder
}

// MockGraphQLStitchedSchemaDeletionReconcilerMockRecorder is the mock recorder for MockGraphQLStitchedSchemaDeletionReconciler.
type MockGraphQLStitchedSchemaDeletionReconcilerMockRecorder struct {
	mock *MockGraphQLStitchedSchemaDeletionReconciler
}

// NewMockGraphQLStitchedSchemaDeletionReconciler creates a new mock instance.
func NewMockGraphQLStitchedSchemaDeletionReconciler(ctrl *gomock.Controller) *MockGraphQLStitchedSchemaDeletionReconciler {
	mock := &MockGraphQLStitchedSchemaDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockGraphQLStitchedSchemaDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLStitchedSchemaDeletionReconciler) EXPECT() *MockGraphQLStitchedSchemaDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLStitchedSchemaDeletion mocks base method.
func (m *MockGraphQLStitchedSchemaDeletionReconciler) ReconcileGraphQLStitchedSchemaDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLStitchedSchemaDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGraphQLStitchedSchemaDeletion indicates an expected call of ReconcileGraphQLStitchedSchemaDeletion.
func (mr *MockGraphQLStitchedSchemaDeletionReconcilerMockRecorder) ReconcileGraphQLStitchedSchemaDeletion(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLStitchedSchemaDeletion", reflect.TypeOf((*MockGraphQLStitchedSchemaDeletionReconciler)(nil).ReconcileGraphQLStitchedSchemaDeletion), req)
}

// MockGraphQLStitchedSchemaFinalizer is a mock of GraphQLStitchedSchemaFinalizer interface.
type MockGraphQLStitchedSchemaFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLStitchedSchemaFinalizerMockRecorder
}

// MockGraphQLStitchedSchemaFinalizerMockRecorder is the mock recorder for MockGraphQLStitchedSchemaFinalizer.
type MockGraphQLStitchedSchemaFinalizerMockRecorder struct {
	mock *MockGraphQLStitchedSchemaFinalizer
}

// NewMockGraphQLStitchedSchemaFinalizer creates a new mock instance.
func NewMockGraphQLStitchedSchemaFinalizer(ctrl *gomock.Controller) *MockGraphQLStitchedSchemaFinalizer {
	mock := &MockGraphQLStitchedSchemaFinalizer{ctrl: ctrl}
	mock.recorder = &MockGraphQLStitchedSchemaFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLStitchedSchemaFinalizer) EXPECT() *MockGraphQLStitchedSchemaFinalizerMockRecorder {
	return m.recorder
}

// FinalizeGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaFinalizer) FinalizeGraphQLStitchedSchema(obj *v2.GraphQLStitchedSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeGraphQLStitchedSchema", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeGraphQLStitchedSchema indicates an expected call of FinalizeGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaFinalizerMockRecorder) FinalizeGraphQLStitchedSchema(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaFinalizer)(nil).FinalizeGraphQLStitchedSchema), obj)
}

// GraphQLStitchedSchemaFinalizerName mocks base method.
func (m *MockGraphQLStitchedSchemaFinalizer) GraphQLStitchedSchemaFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphQLStitchedSchemaFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GraphQLStitchedSchemaFinalizerName indicates an expected call of GraphQLStitchedSchemaFinalizerName.
func (mr *MockGraphQLStitchedSchemaFinalizerMockRecorder) GraphQLStitchedSchemaFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphQLStitchedSchemaFinalizerName", reflect.TypeOf((*MockGraphQLStitchedSchemaFinalizer)(nil).GraphQLStitchedSchemaFinalizerName))
}

// ReconcileGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaFinalizer) ReconcileGraphQLStitchedSchema(obj *v2.GraphQLStitchedSchema) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLStitchedSchema", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGraphQLStitchedSchema indicates an expected call of ReconcileGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaFinalizerMockRecorder) ReconcileGraphQLStitchedSchema(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaFinalizer)(nil).ReconcileGraphQLStitchedSchema), obj)
}

// MockGraphQLStitchedSchemaReconcileLoop is a mock of GraphQLStitchedSchemaReconcileLoop interface.
type MockGraphQLStitchedSchemaReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLStitchedSchemaReconcileLoopMockRecorder
}

// MockGraphQLStitchedSchemaReconcileLoopMockRecorder is the mock recorder for MockGraphQLStitchedSchemaReconcileLoop.
type MockGraphQLStitchedSchemaReconcileLoopMockRecorder struct {
	mock *MockGraphQLStitchedSchemaReconcileLoop
}

// NewMockGraphQLStitchedSchemaReconcileLoop creates a new mock instance.
func NewMockGraphQLStitchedSchemaReconcileLoop(ctrl *gomock.Controller) *MockGraphQLStitchedSchemaReconcileLoop {
	mock := &MockGraphQLStitchedSchemaReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockGraphQLStitchedSchemaReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLStitchedSchemaReconcileLoop) EXPECT() *MockGraphQLStitchedSchemaReconcileLoopMockRecorder {
	return m.recorder
}

// RunGraphQLStitchedSchemaReconciler mocks base method.
func (m *MockGraphQLStitchedSchemaReconcileLoop) RunGraphQLStitchedSchemaReconciler(ctx context.Context, rec controller.GraphQLStitchedSchemaReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunGraphQLStitchedSchemaReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunGraphQLStitchedSchemaReconciler indicates an expected call of RunGraphQLStitchedSchemaReconciler.
func (mr *MockGraphQLStitchedSchemaReconcileLoopMockRecorder) RunGraphQLStitchedSchemaReconciler(ctx, rec any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunGraphQLStitchedSchemaReconciler", reflect.TypeOf((*MockGraphQLStitchedSchemaReconcileLoop)(nil).RunGraphQLStitchedSchemaReconciler), varargs...)
}

// MockGraphQLResolverMapReconciler is a mock of GraphQLResolverMapReconciler interface.
type MockGraphQLResolverMapReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLResolverMapReconcilerMockRecorder
}

// MockGraphQLResolverMapReconcilerMockRecorder is the mock recorder for MockGraphQLResolverMapReconciler.
type MockGraphQLResolverMapReconcilerMockRecorder struct {
	mock *MockGraphQLResolverMapReconciler
}

// NewMockGraphQLResolverMapReconciler creates a new mock instance.
func NewMockGraphQLResolverMapReconciler(ctrl *gomock.Controller) *MockGraphQLResolverMapReconciler {
	mock := &MockGraphQLResolverMapReconciler{ctrl: ctrl}
	mock.recorder = &MockGraphQLResolverMapReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLResolverMapReconciler) EXPECT() *MockGraphQLResolverMapReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapReconciler) ReconcileGraphQLResolverMap(obj *v2.GraphQLResolverMap) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLResolverMap", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGraphQLResolverMap indicates an expected call of ReconcileGraphQLResolverMap.
func (mr *MockGraphQLResolverMapReconcilerMockRecorder) ReconcileGraphQLResolverMap(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapReconciler)(nil).ReconcileGraphQLResolverMap), obj)
}

// MockGraphQLResolverMapDeletionReconciler is a mock of GraphQLResolverMapDeletionReconciler interface.
type MockGraphQLResolverMapDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLResolverMapDeletionReconcilerMockRecorder
}

// MockGraphQLResolverMapDeletionReconcilerMockRecorder is the mock recorder for MockGraphQLResolverMapDeletionReconciler.
type MockGraphQLResolverMapDeletionReconcilerMockRecorder struct {
	mock *MockGraphQLResolverMapDeletionReconciler
}

// NewMockGraphQLResolverMapDeletionReconciler creates a new mock instance.
func NewMockGraphQLResolverMapDeletionReconciler(ctrl *gomock.Controller) *MockGraphQLResolverMapDeletionReconciler {
	mock := &MockGraphQLResolverMapDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockGraphQLResolverMapDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLResolverMapDeletionReconciler) EXPECT() *MockGraphQLResolverMapDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLResolverMapDeletion mocks base method.
func (m *MockGraphQLResolverMapDeletionReconciler) ReconcileGraphQLResolverMapDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLResolverMapDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGraphQLResolverMapDeletion indicates an expected call of ReconcileGraphQLResolverMapDeletion.
func (mr *MockGraphQLResolverMapDeletionReconcilerMockRecorder) ReconcileGraphQLResolverMapDeletion(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLResolverMapDeletion", reflect.TypeOf((*MockGraphQLResolverMapDeletionReconciler)(nil).ReconcileGraphQLResolverMapDeletion), req)
}

// MockGraphQLResolverMapFinalizer is a mock of GraphQLResolverMapFinalizer interface.
type MockGraphQLResolverMapFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLResolverMapFinalizerMockRecorder
}

// MockGraphQLResolverMapFinalizerMockRecorder is the mock recorder for MockGraphQLResolverMapFinalizer.
type MockGraphQLResolverMapFinalizerMockRecorder struct {
	mock *MockGraphQLResolverMapFinalizer
}

// NewMockGraphQLResolverMapFinalizer creates a new mock instance.
func NewMockGraphQLResolverMapFinalizer(ctrl *gomock.Controller) *MockGraphQLResolverMapFinalizer {
	mock := &MockGraphQLResolverMapFinalizer{ctrl: ctrl}
	mock.recorder = &MockGraphQLResolverMapFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLResolverMapFinalizer) EXPECT() *MockGraphQLResolverMapFinalizerMockRecorder {
	return m.recorder
}

// FinalizeGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapFinalizer) FinalizeGraphQLResolverMap(obj *v2.GraphQLResolverMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeGraphQLResolverMap", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeGraphQLResolverMap indicates an expected call of FinalizeGraphQLResolverMap.
func (mr *MockGraphQLResolverMapFinalizerMockRecorder) FinalizeGraphQLResolverMap(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapFinalizer)(nil).FinalizeGraphQLResolverMap), obj)
}

// GraphQLResolverMapFinalizerName mocks base method.
func (m *MockGraphQLResolverMapFinalizer) GraphQLResolverMapFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphQLResolverMapFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GraphQLResolverMapFinalizerName indicates an expected call of GraphQLResolverMapFinalizerName.
func (mr *MockGraphQLResolverMapFinalizerMockRecorder) GraphQLResolverMapFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphQLResolverMapFinalizerName", reflect.TypeOf((*MockGraphQLResolverMapFinalizer)(nil).GraphQLResolverMapFinalizerName))
}

// ReconcileGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapFinalizer) ReconcileGraphQLResolverMap(obj *v2.GraphQLResolverMap) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLResolverMap", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGraphQLResolverMap indicates an expected call of ReconcileGraphQLResolverMap.
func (mr *MockGraphQLResolverMapFinalizerMockRecorder) ReconcileGraphQLResolverMap(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapFinalizer)(nil).ReconcileGraphQLResolverMap), obj)
}

// MockGraphQLResolverMapReconcileLoop is a mock of GraphQLResolverMapReconcileLoop interface.
type MockGraphQLResolverMapReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLResolverMapReconcileLoopMockRecorder
}

// MockGraphQLResolverMapReconcileLoopMockRecorder is the mock recorder for MockGraphQLResolverMapReconcileLoop.
type MockGraphQLResolverMapReconcileLoopMockRecorder struct {
	mock *MockGraphQLResolverMapReconcileLoop
}

// NewMockGraphQLResolverMapReconcileLoop creates a new mock instance.
func NewMockGraphQLResolverMapReconcileLoop(ctrl *gomock.Controller) *MockGraphQLResolverMapReconcileLoop {
	mock := &MockGraphQLResolverMapReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockGraphQLResolverMapReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLResolverMapReconcileLoop) EXPECT() *MockGraphQLResolverMapReconcileLoopMockRecorder {
	return m.recorder
}

// RunGraphQLResolverMapReconciler mocks base method.
func (m *MockGraphQLResolverMapReconcileLoop) RunGraphQLResolverMapReconciler(ctx context.Context, rec controller.GraphQLResolverMapReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunGraphQLResolverMapReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunGraphQLResolverMapReconciler indicates an expected call of RunGraphQLResolverMapReconciler.
func (mr *MockGraphQLResolverMapReconcileLoopMockRecorder) RunGraphQLResolverMapReconciler(ctx, rec any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunGraphQLResolverMapReconciler", reflect.TypeOf((*MockGraphQLResolverMapReconcileLoop)(nil).RunGraphQLResolverMapReconciler), varargs...)
}

// MockGraphQLSchemaReconciler is a mock of GraphQLSchemaReconciler interface.
type MockGraphQLSchemaReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaReconcilerMockRecorder
}

// MockGraphQLSchemaReconcilerMockRecorder is the mock recorder for MockGraphQLSchemaReconciler.
type MockGraphQLSchemaReconcilerMockRecorder struct {
	mock *MockGraphQLSchemaReconciler
}

// NewMockGraphQLSchemaReconciler creates a new mock instance.
func NewMockGraphQLSchemaReconciler(ctrl *gomock.Controller) *MockGraphQLSchemaReconciler {
	mock := &MockGraphQLSchemaReconciler{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaReconciler) EXPECT() *MockGraphQLSchemaReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaReconciler) ReconcileGraphQLSchema(obj *v2.GraphQLSchema) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLSchema", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGraphQLSchema indicates an expected call of ReconcileGraphQLSchema.
func (mr *MockGraphQLSchemaReconcilerMockRecorder) ReconcileGraphQLSchema(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaReconciler)(nil).ReconcileGraphQLSchema), obj)
}

// MockGraphQLSchemaDeletionReconciler is a mock of GraphQLSchemaDeletionReconciler interface.
type MockGraphQLSchemaDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaDeletionReconcilerMockRecorder
}

// MockGraphQLSchemaDeletionReconcilerMockRecorder is the mock recorder for MockGraphQLSchemaDeletionReconciler.
type MockGraphQLSchemaDeletionReconcilerMockRecorder struct {
	mock *MockGraphQLSchemaDeletionReconciler
}

// NewMockGraphQLSchemaDeletionReconciler creates a new mock instance.
func NewMockGraphQLSchemaDeletionReconciler(ctrl *gomock.Controller) *MockGraphQLSchemaDeletionReconciler {
	mock := &MockGraphQLSchemaDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaDeletionReconciler) EXPECT() *MockGraphQLSchemaDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLSchemaDeletion mocks base method.
func (m *MockGraphQLSchemaDeletionReconciler) ReconcileGraphQLSchemaDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLSchemaDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGraphQLSchemaDeletion indicates an expected call of ReconcileGraphQLSchemaDeletion.
func (mr *MockGraphQLSchemaDeletionReconcilerMockRecorder) ReconcileGraphQLSchemaDeletion(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLSchemaDeletion", reflect.TypeOf((*MockGraphQLSchemaDeletionReconciler)(nil).ReconcileGraphQLSchemaDeletion), req)
}

// MockGraphQLSchemaFinalizer is a mock of GraphQLSchemaFinalizer interface.
type MockGraphQLSchemaFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaFinalizerMockRecorder
}

// MockGraphQLSchemaFinalizerMockRecorder is the mock recorder for MockGraphQLSchemaFinalizer.
type MockGraphQLSchemaFinalizerMockRecorder struct {
	mock *MockGraphQLSchemaFinalizer
}

// NewMockGraphQLSchemaFinalizer creates a new mock instance.
func NewMockGraphQLSchemaFinalizer(ctrl *gomock.Controller) *MockGraphQLSchemaFinalizer {
	mock := &MockGraphQLSchemaFinalizer{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaFinalizer) EXPECT() *MockGraphQLSchemaFinalizerMockRecorder {
	return m.recorder
}

// FinalizeGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaFinalizer) FinalizeGraphQLSchema(obj *v2.GraphQLSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeGraphQLSchema", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeGraphQLSchema indicates an expected call of FinalizeGraphQLSchema.
func (mr *MockGraphQLSchemaFinalizerMockRecorder) FinalizeGraphQLSchema(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaFinalizer)(nil).FinalizeGraphQLSchema), obj)
}

// GraphQLSchemaFinalizerName mocks base method.
func (m *MockGraphQLSchemaFinalizer) GraphQLSchemaFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphQLSchemaFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GraphQLSchemaFinalizerName indicates an expected call of GraphQLSchemaFinalizerName.
func (mr *MockGraphQLSchemaFinalizerMockRecorder) GraphQLSchemaFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphQLSchemaFinalizerName", reflect.TypeOf((*MockGraphQLSchemaFinalizer)(nil).GraphQLSchemaFinalizerName))
}

// ReconcileGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaFinalizer) ReconcileGraphQLSchema(obj *v2.GraphQLSchema) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLSchema", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGraphQLSchema indicates an expected call of ReconcileGraphQLSchema.
func (mr *MockGraphQLSchemaFinalizerMockRecorder) ReconcileGraphQLSchema(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaFinalizer)(nil).ReconcileGraphQLSchema), obj)
}

// MockGraphQLSchemaReconcileLoop is a mock of GraphQLSchemaReconcileLoop interface.
type MockGraphQLSchemaReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaReconcileLoopMockRecorder
}

// MockGraphQLSchemaReconcileLoopMockRecorder is the mock recorder for MockGraphQLSchemaReconcileLoop.
type MockGraphQLSchemaReconcileLoopMockRecorder struct {
	mock *MockGraphQLSchemaReconcileLoop
}

// NewMockGraphQLSchemaReconcileLoop creates a new mock instance.
func NewMockGraphQLSchemaReconcileLoop(ctrl *gomock.Controller) *MockGraphQLSchemaReconcileLoop {
	mock := &MockGraphQLSchemaReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaReconcileLoop) EXPECT() *MockGraphQLSchemaReconcileLoopMockRecorder {
	return m.recorder
}

// RunGraphQLSchemaReconciler mocks base method.
func (m *MockGraphQLSchemaReconcileLoop) RunGraphQLSchemaReconciler(ctx context.Context, rec controller.GraphQLSchemaReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunGraphQLSchemaReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunGraphQLSchemaReconciler indicates an expected call of RunGraphQLSchemaReconciler.
func (mr *MockGraphQLSchemaReconcileLoopMockRecorder) RunGraphQLSchemaReconciler(ctx, rec any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunGraphQLSchemaReconciler", reflect.TypeOf((*MockGraphQLSchemaReconcileLoop)(nil).RunGraphQLSchemaReconciler), varargs...)
}

// MockApiDocReconciler is a mock of ApiDocReconciler interface.
type MockApiDocReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockApiDocReconcilerMockRecorder
}

// MockApiDocReconcilerMockRecorder is the mock recorder for MockApiDocReconciler.
type MockApiDocReconcilerMockRecorder struct {
	mock *MockApiDocReconciler
}

// NewMockApiDocReconciler creates a new mock instance.
func NewMockApiDocReconciler(ctrl *gomock.Controller) *MockApiDocReconciler {
	mock := &MockApiDocReconciler{ctrl: ctrl}
	mock.recorder = &MockApiDocReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDocReconciler) EXPECT() *MockApiDocReconcilerMockRecorder {
	return m.recorder
}

// ReconcileApiDoc mocks base method.
func (m *MockApiDocReconciler) ReconcileApiDoc(obj *v2.ApiDoc) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileApiDoc", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileApiDoc indicates an expected call of ReconcileApiDoc.
func (mr *MockApiDocReconcilerMockRecorder) ReconcileApiDoc(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileApiDoc", reflect.TypeOf((*MockApiDocReconciler)(nil).ReconcileApiDoc), obj)
}

// MockApiDocDeletionReconciler is a mock of ApiDocDeletionReconciler interface.
type MockApiDocDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockApiDocDeletionReconcilerMockRecorder
}

// MockApiDocDeletionReconcilerMockRecorder is the mock recorder for MockApiDocDeletionReconciler.
type MockApiDocDeletionReconcilerMockRecorder struct {
	mock *MockApiDocDeletionReconciler
}

// NewMockApiDocDeletionReconciler creates a new mock instance.
func NewMockApiDocDeletionReconciler(ctrl *gomock.Controller) *MockApiDocDeletionReconciler {
	mock := &MockApiDocDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockApiDocDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDocDeletionReconciler) EXPECT() *MockApiDocDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileApiDocDeletion mocks base method.
func (m *MockApiDocDeletionReconciler) ReconcileApiDocDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileApiDocDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileApiDocDeletion indicates an expected call of ReconcileApiDocDeletion.
func (mr *MockApiDocDeletionReconcilerMockRecorder) ReconcileApiDocDeletion(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileApiDocDeletion", reflect.TypeOf((*MockApiDocDeletionReconciler)(nil).ReconcileApiDocDeletion), req)
}

// MockApiDocFinalizer is a mock of ApiDocFinalizer interface.
type MockApiDocFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockApiDocFinalizerMockRecorder
}

// MockApiDocFinalizerMockRecorder is the mock recorder for MockApiDocFinalizer.
type MockApiDocFinalizerMockRecorder struct {
	mock *MockApiDocFinalizer
}

// NewMockApiDocFinalizer creates a new mock instance.
func NewMockApiDocFinalizer(ctrl *gomock.Controller) *MockApiDocFinalizer {
	mock := &MockApiDocFinalizer{ctrl: ctrl}
	mock.recorder = &MockApiDocFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDocFinalizer) EXPECT() *MockApiDocFinalizerMockRecorder {
	return m.recorder
}

// ApiDocFinalizerName mocks base method.
func (m *MockApiDocFinalizer) ApiDocFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApiDocFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ApiDocFinalizerName indicates an expected call of ApiDocFinalizerName.
func (mr *MockApiDocFinalizerMockRecorder) ApiDocFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApiDocFinalizerName", reflect.TypeOf((*MockApiDocFinalizer)(nil).ApiDocFinalizerName))
}

// FinalizeApiDoc mocks base method.
func (m *MockApiDocFinalizer) FinalizeApiDoc(obj *v2.ApiDoc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeApiDoc", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeApiDoc indicates an expected call of FinalizeApiDoc.
func (mr *MockApiDocFinalizerMockRecorder) FinalizeApiDoc(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeApiDoc", reflect.TypeOf((*MockApiDocFinalizer)(nil).FinalizeApiDoc), obj)
}

// ReconcileApiDoc mocks base method.
func (m *MockApiDocFinalizer) ReconcileApiDoc(obj *v2.ApiDoc) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileApiDoc", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileApiDoc indicates an expected call of ReconcileApiDoc.
func (mr *MockApiDocFinalizerMockRecorder) ReconcileApiDoc(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileApiDoc", reflect.TypeOf((*MockApiDocFinalizer)(nil).ReconcileApiDoc), obj)
}

// MockApiDocReconcileLoop is a mock of ApiDocReconcileLoop interface.
type MockApiDocReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockApiDocReconcileLoopMockRecorder
}

// MockApiDocReconcileLoopMockRecorder is the mock recorder for MockApiDocReconcileLoop.
type MockApiDocReconcileLoopMockRecorder struct {
	mock *MockApiDocReconcileLoop
}

// NewMockApiDocReconcileLoop creates a new mock instance.
func NewMockApiDocReconcileLoop(ctrl *gomock.Controller) *MockApiDocReconcileLoop {
	mock := &MockApiDocReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockApiDocReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDocReconcileLoop) EXPECT() *MockApiDocReconcileLoopMockRecorder {
	return m.recorder
}

// RunApiDocReconciler mocks base method.
func (m *MockApiDocReconcileLoop) RunApiDocReconciler(ctx context.Context, rec controller.ApiDocReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunApiDocReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunApiDocReconciler indicates an expected call of RunApiDocReconciler.
func (mr *MockApiDocReconcileLoopMockRecorder) RunApiDocReconciler(ctx, rec any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunApiDocReconciler", reflect.TypeOf((*MockApiDocReconcileLoop)(nil).RunApiDocReconciler), varargs...)
}

// MockPortalReconciler is a mock of PortalReconciler interface.
type MockPortalReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockPortalReconcilerMockRecorder
}

// MockPortalReconcilerMockRecorder is the mock recorder for MockPortalReconciler.
type MockPortalReconcilerMockRecorder struct {
	mock *MockPortalReconciler
}

// NewMockPortalReconciler creates a new mock instance.
func NewMockPortalReconciler(ctrl *gomock.Controller) *MockPortalReconciler {
	mock := &MockPortalReconciler{ctrl: ctrl}
	mock.recorder = &MockPortalReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalReconciler) EXPECT() *MockPortalReconcilerMockRecorder {
	return m.recorder
}

// ReconcilePortal mocks base method.
func (m *MockPortalReconciler) ReconcilePortal(obj *v2.Portal) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePortal", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcilePortal indicates an expected call of ReconcilePortal.
func (mr *MockPortalReconcilerMockRecorder) ReconcilePortal(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePortal", reflect.TypeOf((*MockPortalReconciler)(nil).ReconcilePortal), obj)
}

// MockPortalDeletionReconciler is a mock of PortalDeletionReconciler interface.
type MockPortalDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockPortalDeletionReconcilerMockRecorder
}

// MockPortalDeletionReconcilerMockRecorder is the mock recorder for MockPortalDeletionReconciler.
type MockPortalDeletionReconcilerMockRecorder struct {
	mock *MockPortalDeletionReconciler
}

// NewMockPortalDeletionReconciler creates a new mock instance.
func NewMockPortalDeletionReconciler(ctrl *gomock.Controller) *MockPortalDeletionReconciler {
	mock := &MockPortalDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockPortalDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalDeletionReconciler) EXPECT() *MockPortalDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcilePortalDeletion mocks base method.
func (m *MockPortalDeletionReconciler) ReconcilePortalDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePortalDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcilePortalDeletion indicates an expected call of ReconcilePortalDeletion.
func (mr *MockPortalDeletionReconcilerMockRecorder) ReconcilePortalDeletion(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePortalDeletion", reflect.TypeOf((*MockPortalDeletionReconciler)(nil).ReconcilePortalDeletion), req)
}

// MockPortalFinalizer is a mock of PortalFinalizer interface.
type MockPortalFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockPortalFinalizerMockRecorder
}

// MockPortalFinalizerMockRecorder is the mock recorder for MockPortalFinalizer.
type MockPortalFinalizerMockRecorder struct {
	mock *MockPortalFinalizer
}

// NewMockPortalFinalizer creates a new mock instance.
func NewMockPortalFinalizer(ctrl *gomock.Controller) *MockPortalFinalizer {
	mock := &MockPortalFinalizer{ctrl: ctrl}
	mock.recorder = &MockPortalFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalFinalizer) EXPECT() *MockPortalFinalizerMockRecorder {
	return m.recorder
}

// FinalizePortal mocks base method.
func (m *MockPortalFinalizer) FinalizePortal(obj *v2.Portal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizePortal", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizePortal indicates an expected call of FinalizePortal.
func (mr *MockPortalFinalizerMockRecorder) FinalizePortal(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizePortal", reflect.TypeOf((*MockPortalFinalizer)(nil).FinalizePortal), obj)
}

// PortalFinalizerName mocks base method.
func (m *MockPortalFinalizer) PortalFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortalFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// PortalFinalizerName indicates an expected call of PortalFinalizerName.
func (mr *MockPortalFinalizerMockRecorder) PortalFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortalFinalizerName", reflect.TypeOf((*MockPortalFinalizer)(nil).PortalFinalizerName))
}

// ReconcilePortal mocks base method.
func (m *MockPortalFinalizer) ReconcilePortal(obj *v2.Portal) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePortal", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcilePortal indicates an expected call of ReconcilePortal.
func (mr *MockPortalFinalizerMockRecorder) ReconcilePortal(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePortal", reflect.TypeOf((*MockPortalFinalizer)(nil).ReconcilePortal), obj)
}

// MockPortalReconcileLoop is a mock of PortalReconcileLoop interface.
type MockPortalReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockPortalReconcileLoopMockRecorder
}

// MockPortalReconcileLoopMockRecorder is the mock recorder for MockPortalReconcileLoop.
type MockPortalReconcileLoopMockRecorder struct {
	mock *MockPortalReconcileLoop
}

// NewMockPortalReconcileLoop creates a new mock instance.
func NewMockPortalReconcileLoop(ctrl *gomock.Controller) *MockPortalReconcileLoop {
	mock := &MockPortalReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockPortalReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalReconcileLoop) EXPECT() *MockPortalReconcileLoopMockRecorder {
	return m.recorder
}

// RunPortalReconciler mocks base method.
func (m *MockPortalReconcileLoop) RunPortalReconciler(ctx context.Context, rec controller.PortalReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunPortalReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunPortalReconciler indicates an expected call of RunPortalReconciler.
func (mr *MockPortalReconcileLoopMockRecorder) RunPortalReconciler(ctx, rec any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPortalReconciler", reflect.TypeOf((*MockPortalReconcileLoop)(nil).RunPortalReconciler), varargs...)
}

// MockApiProductReconciler is a mock of ApiProductReconciler interface.
type MockApiProductReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockApiProductReconcilerMockRecorder
}

// MockApiProductReconcilerMockRecorder is the mock recorder for MockApiProductReconciler.
type MockApiProductReconcilerMockRecorder struct {
	mock *MockApiProductReconciler
}

// NewMockApiProductReconciler creates a new mock instance.
func NewMockApiProductReconciler(ctrl *gomock.Controller) *MockApiProductReconciler {
	mock := &MockApiProductReconciler{ctrl: ctrl}
	mock.recorder = &MockApiProductReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiProductReconciler) EXPECT() *MockApiProductReconcilerMockRecorder {
	return m.recorder
}

// ReconcileApiProduct mocks base method.
func (m *MockApiProductReconciler) ReconcileApiProduct(obj *v2.ApiProduct) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileApiProduct", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileApiProduct indicates an expected call of ReconcileApiProduct.
func (mr *MockApiProductReconcilerMockRecorder) ReconcileApiProduct(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileApiProduct", reflect.TypeOf((*MockApiProductReconciler)(nil).ReconcileApiProduct), obj)
}

// MockApiProductDeletionReconciler is a mock of ApiProductDeletionReconciler interface.
type MockApiProductDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockApiProductDeletionReconcilerMockRecorder
}

// MockApiProductDeletionReconcilerMockRecorder is the mock recorder for MockApiProductDeletionReconciler.
type MockApiProductDeletionReconcilerMockRecorder struct {
	mock *MockApiProductDeletionReconciler
}

// NewMockApiProductDeletionReconciler creates a new mock instance.
func NewMockApiProductDeletionReconciler(ctrl *gomock.Controller) *MockApiProductDeletionReconciler {
	mock := &MockApiProductDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockApiProductDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiProductDeletionReconciler) EXPECT() *MockApiProductDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileApiProductDeletion mocks base method.
func (m *MockApiProductDeletionReconciler) ReconcileApiProductDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileApiProductDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileApiProductDeletion indicates an expected call of ReconcileApiProductDeletion.
func (mr *MockApiProductDeletionReconcilerMockRecorder) ReconcileApiProductDeletion(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileApiProductDeletion", reflect.TypeOf((*MockApiProductDeletionReconciler)(nil).ReconcileApiProductDeletion), req)
}

// MockApiProductFinalizer is a mock of ApiProductFinalizer interface.
type MockApiProductFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockApiProductFinalizerMockRecorder
}

// MockApiProductFinalizerMockRecorder is the mock recorder for MockApiProductFinalizer.
type MockApiProductFinalizerMockRecorder struct {
	mock *MockApiProductFinalizer
}

// NewMockApiProductFinalizer creates a new mock instance.
func NewMockApiProductFinalizer(ctrl *gomock.Controller) *MockApiProductFinalizer {
	mock := &MockApiProductFinalizer{ctrl: ctrl}
	mock.recorder = &MockApiProductFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiProductFinalizer) EXPECT() *MockApiProductFinalizerMockRecorder {
	return m.recorder
}

// ApiProductFinalizerName mocks base method.
func (m *MockApiProductFinalizer) ApiProductFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApiProductFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ApiProductFinalizerName indicates an expected call of ApiProductFinalizerName.
func (mr *MockApiProductFinalizerMockRecorder) ApiProductFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApiProductFinalizerName", reflect.TypeOf((*MockApiProductFinalizer)(nil).ApiProductFinalizerName))
}

// FinalizeApiProduct mocks base method.
func (m *MockApiProductFinalizer) FinalizeApiProduct(obj *v2.ApiProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeApiProduct", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeApiProduct indicates an expected call of FinalizeApiProduct.
func (mr *MockApiProductFinalizerMockRecorder) FinalizeApiProduct(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeApiProduct", reflect.TypeOf((*MockApiProductFinalizer)(nil).FinalizeApiProduct), obj)
}

// ReconcileApiProduct mocks base method.
func (m *MockApiProductFinalizer) ReconcileApiProduct(obj *v2.ApiProduct) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileApiProduct", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileApiProduct indicates an expected call of ReconcileApiProduct.
func (mr *MockApiProductFinalizerMockRecorder) ReconcileApiProduct(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileApiProduct", reflect.TypeOf((*MockApiProductFinalizer)(nil).ReconcileApiProduct), obj)
}

// MockApiProductReconcileLoop is a mock of ApiProductReconcileLoop interface.
type MockApiProductReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockApiProductReconcileLoopMockRecorder
}

// MockApiProductReconcileLoopMockRecorder is the mock recorder for MockApiProductReconcileLoop.
type MockApiProductReconcileLoopMockRecorder struct {
	mock *MockApiProductReconcileLoop
}

// NewMockApiProductReconcileLoop creates a new mock instance.
func NewMockApiProductReconcileLoop(ctrl *gomock.Controller) *MockApiProductReconcileLoop {
	mock := &MockApiProductReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockApiProductReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiProductReconcileLoop) EXPECT() *MockApiProductReconcileLoopMockRecorder {
	return m.recorder
}

// RunApiProductReconciler mocks base method.
func (m *MockApiProductReconcileLoop) RunApiProductReconciler(ctx context.Context, rec controller.ApiProductReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunApiProductReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunApiProductReconciler indicates an expected call of RunApiProductReconciler.
func (mr *MockApiProductReconcileLoopMockRecorder) RunApiProductReconciler(ctx, rec any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunApiProductReconciler", reflect.TypeOf((*MockApiProductReconcileLoop)(nil).RunApiProductReconciler), varargs...)
}

// MockPortalGroupReconciler is a mock of PortalGroupReconciler interface.
type MockPortalGroupReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockPortalGroupReconcilerMockRecorder
}

// MockPortalGroupReconcilerMockRecorder is the mock recorder for MockPortalGroupReconciler.
type MockPortalGroupReconcilerMockRecorder struct {
	mock *MockPortalGroupReconciler
}

// NewMockPortalGroupReconciler creates a new mock instance.
func NewMockPortalGroupReconciler(ctrl *gomock.Controller) *MockPortalGroupReconciler {
	mock := &MockPortalGroupReconciler{ctrl: ctrl}
	mock.recorder = &MockPortalGroupReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalGroupReconciler) EXPECT() *MockPortalGroupReconcilerMockRecorder {
	return m.recorder
}

// ReconcilePortalGroup mocks base method.
func (m *MockPortalGroupReconciler) ReconcilePortalGroup(obj *v2.PortalGroup) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePortalGroup", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcilePortalGroup indicates an expected call of ReconcilePortalGroup.
func (mr *MockPortalGroupReconcilerMockRecorder) ReconcilePortalGroup(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePortalGroup", reflect.TypeOf((*MockPortalGroupReconciler)(nil).ReconcilePortalGroup), obj)
}

// MockPortalGroupDeletionReconciler is a mock of PortalGroupDeletionReconciler interface.
type MockPortalGroupDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockPortalGroupDeletionReconcilerMockRecorder
}

// MockPortalGroupDeletionReconcilerMockRecorder is the mock recorder for MockPortalGroupDeletionReconciler.
type MockPortalGroupDeletionReconcilerMockRecorder struct {
	mock *MockPortalGroupDeletionReconciler
}

// NewMockPortalGroupDeletionReconciler creates a new mock instance.
func NewMockPortalGroupDeletionReconciler(ctrl *gomock.Controller) *MockPortalGroupDeletionReconciler {
	mock := &MockPortalGroupDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockPortalGroupDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalGroupDeletionReconciler) EXPECT() *MockPortalGroupDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcilePortalGroupDeletion mocks base method.
func (m *MockPortalGroupDeletionReconciler) ReconcilePortalGroupDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePortalGroupDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcilePortalGroupDeletion indicates an expected call of ReconcilePortalGroupDeletion.
func (mr *MockPortalGroupDeletionReconcilerMockRecorder) ReconcilePortalGroupDeletion(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePortalGroupDeletion", reflect.TypeOf((*MockPortalGroupDeletionReconciler)(nil).ReconcilePortalGroupDeletion), req)
}

// MockPortalGroupFinalizer is a mock of PortalGroupFinalizer interface.
type MockPortalGroupFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockPortalGroupFinalizerMockRecorder
}

// MockPortalGroupFinalizerMockRecorder is the mock recorder for MockPortalGroupFinalizer.
type MockPortalGroupFinalizerMockRecorder struct {
	mock *MockPortalGroupFinalizer
}

// NewMockPortalGroupFinalizer creates a new mock instance.
func NewMockPortalGroupFinalizer(ctrl *gomock.Controller) *MockPortalGroupFinalizer {
	mock := &MockPortalGroupFinalizer{ctrl: ctrl}
	mock.recorder = &MockPortalGroupFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalGroupFinalizer) EXPECT() *MockPortalGroupFinalizerMockRecorder {
	return m.recorder
}

// FinalizePortalGroup mocks base method.
func (m *MockPortalGroupFinalizer) FinalizePortalGroup(obj *v2.PortalGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizePortalGroup", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizePortalGroup indicates an expected call of FinalizePortalGroup.
func (mr *MockPortalGroupFinalizerMockRecorder) FinalizePortalGroup(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizePortalGroup", reflect.TypeOf((*MockPortalGroupFinalizer)(nil).FinalizePortalGroup), obj)
}

// PortalGroupFinalizerName mocks base method.
func (m *MockPortalGroupFinalizer) PortalGroupFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortalGroupFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// PortalGroupFinalizerName indicates an expected call of PortalGroupFinalizerName.
func (mr *MockPortalGroupFinalizerMockRecorder) PortalGroupFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortalGroupFinalizerName", reflect.TypeOf((*MockPortalGroupFinalizer)(nil).PortalGroupFinalizerName))
}

// ReconcilePortalGroup mocks base method.
func (m *MockPortalGroupFinalizer) ReconcilePortalGroup(obj *v2.PortalGroup) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePortalGroup", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcilePortalGroup indicates an expected call of ReconcilePortalGroup.
func (mr *MockPortalGroupFinalizerMockRecorder) ReconcilePortalGroup(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePortalGroup", reflect.TypeOf((*MockPortalGroupFinalizer)(nil).ReconcilePortalGroup), obj)
}

// MockPortalGroupReconcileLoop is a mock of PortalGroupReconcileLoop interface.
type MockPortalGroupReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockPortalGroupReconcileLoopMockRecorder
}

// MockPortalGroupReconcileLoopMockRecorder is the mock recorder for MockPortalGroupReconcileLoop.
type MockPortalGroupReconcileLoopMockRecorder struct {
	mock *MockPortalGroupReconcileLoop
}

// NewMockPortalGroupReconcileLoop creates a new mock instance.
func NewMockPortalGroupReconcileLoop(ctrl *gomock.Controller) *MockPortalGroupReconcileLoop {
	mock := &MockPortalGroupReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockPortalGroupReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalGroupReconcileLoop) EXPECT() *MockPortalGroupReconcileLoopMockRecorder {
	return m.recorder
}

// RunPortalGroupReconciler mocks base method.
func (m *MockPortalGroupReconcileLoop) RunPortalGroupReconciler(ctx context.Context, rec controller.PortalGroupReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunPortalGroupReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunPortalGroupReconciler indicates an expected call of RunPortalGroupReconciler.
func (mr *MockPortalGroupReconcileLoopMockRecorder) RunPortalGroupReconciler(ctx, rec any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPortalGroupReconciler", reflect.TypeOf((*MockPortalGroupReconcileLoop)(nil).RunPortalGroupReconciler), varargs...)
}

// MockApiSchemaDiscoveryReconciler is a mock of ApiSchemaDiscoveryReconciler interface.
type MockApiSchemaDiscoveryReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockApiSchemaDiscoveryReconcilerMockRecorder
}

// MockApiSchemaDiscoveryReconcilerMockRecorder is the mock recorder for MockApiSchemaDiscoveryReconciler.
type MockApiSchemaDiscoveryReconcilerMockRecorder struct {
	mock *MockApiSchemaDiscoveryReconciler
}

// NewMockApiSchemaDiscoveryReconciler creates a new mock instance.
func NewMockApiSchemaDiscoveryReconciler(ctrl *gomock.Controller) *MockApiSchemaDiscoveryReconciler {
	mock := &MockApiSchemaDiscoveryReconciler{ctrl: ctrl}
	mock.recorder = &MockApiSchemaDiscoveryReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiSchemaDiscoveryReconciler) EXPECT() *MockApiSchemaDiscoveryReconcilerMockRecorder {
	return m.recorder
}

// ReconcileApiSchemaDiscovery mocks base method.
func (m *MockApiSchemaDiscoveryReconciler) ReconcileApiSchemaDiscovery(obj *v2.ApiSchemaDiscovery) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileApiSchemaDiscovery", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileApiSchemaDiscovery indicates an expected call of ReconcileApiSchemaDiscovery.
func (mr *MockApiSchemaDiscoveryReconcilerMockRecorder) ReconcileApiSchemaDiscovery(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileApiSchemaDiscovery", reflect.TypeOf((*MockApiSchemaDiscoveryReconciler)(nil).ReconcileApiSchemaDiscovery), obj)
}

// MockApiSchemaDiscoveryDeletionReconciler is a mock of ApiSchemaDiscoveryDeletionReconciler interface.
type MockApiSchemaDiscoveryDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockApiSchemaDiscoveryDeletionReconcilerMockRecorder
}

// MockApiSchemaDiscoveryDeletionReconcilerMockRecorder is the mock recorder for MockApiSchemaDiscoveryDeletionReconciler.
type MockApiSchemaDiscoveryDeletionReconcilerMockRecorder struct {
	mock *MockApiSchemaDiscoveryDeletionReconciler
}

// NewMockApiSchemaDiscoveryDeletionReconciler creates a new mock instance.
func NewMockApiSchemaDiscoveryDeletionReconciler(ctrl *gomock.Controller) *MockApiSchemaDiscoveryDeletionReconciler {
	mock := &MockApiSchemaDiscoveryDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockApiSchemaDiscoveryDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiSchemaDiscoveryDeletionReconciler) EXPECT() *MockApiSchemaDiscoveryDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileApiSchemaDiscoveryDeletion mocks base method.
func (m *MockApiSchemaDiscoveryDeletionReconciler) ReconcileApiSchemaDiscoveryDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileApiSchemaDiscoveryDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileApiSchemaDiscoveryDeletion indicates an expected call of ReconcileApiSchemaDiscoveryDeletion.
func (mr *MockApiSchemaDiscoveryDeletionReconcilerMockRecorder) ReconcileApiSchemaDiscoveryDeletion(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileApiSchemaDiscoveryDeletion", reflect.TypeOf((*MockApiSchemaDiscoveryDeletionReconciler)(nil).ReconcileApiSchemaDiscoveryDeletion), req)
}

// MockApiSchemaDiscoveryFinalizer is a mock of ApiSchemaDiscoveryFinalizer interface.
type MockApiSchemaDiscoveryFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockApiSchemaDiscoveryFinalizerMockRecorder
}

// MockApiSchemaDiscoveryFinalizerMockRecorder is the mock recorder for MockApiSchemaDiscoveryFinalizer.
type MockApiSchemaDiscoveryFinalizerMockRecorder struct {
	mock *MockApiSchemaDiscoveryFinalizer
}

// NewMockApiSchemaDiscoveryFinalizer creates a new mock instance.
func NewMockApiSchemaDiscoveryFinalizer(ctrl *gomock.Controller) *MockApiSchemaDiscoveryFinalizer {
	mock := &MockApiSchemaDiscoveryFinalizer{ctrl: ctrl}
	mock.recorder = &MockApiSchemaDiscoveryFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiSchemaDiscoveryFinalizer) EXPECT() *MockApiSchemaDiscoveryFinalizerMockRecorder {
	return m.recorder
}

// ApiSchemaDiscoveryFinalizerName mocks base method.
func (m *MockApiSchemaDiscoveryFinalizer) ApiSchemaDiscoveryFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApiSchemaDiscoveryFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ApiSchemaDiscoveryFinalizerName indicates an expected call of ApiSchemaDiscoveryFinalizerName.
func (mr *MockApiSchemaDiscoveryFinalizerMockRecorder) ApiSchemaDiscoveryFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApiSchemaDiscoveryFinalizerName", reflect.TypeOf((*MockApiSchemaDiscoveryFinalizer)(nil).ApiSchemaDiscoveryFinalizerName))
}

// FinalizeApiSchemaDiscovery mocks base method.
func (m *MockApiSchemaDiscoveryFinalizer) FinalizeApiSchemaDiscovery(obj *v2.ApiSchemaDiscovery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeApiSchemaDiscovery", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeApiSchemaDiscovery indicates an expected call of FinalizeApiSchemaDiscovery.
func (mr *MockApiSchemaDiscoveryFinalizerMockRecorder) FinalizeApiSchemaDiscovery(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeApiSchemaDiscovery", reflect.TypeOf((*MockApiSchemaDiscoveryFinalizer)(nil).FinalizeApiSchemaDiscovery), obj)
}

// ReconcileApiSchemaDiscovery mocks base method.
func (m *MockApiSchemaDiscoveryFinalizer) ReconcileApiSchemaDiscovery(obj *v2.ApiSchemaDiscovery) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileApiSchemaDiscovery", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileApiSchemaDiscovery indicates an expected call of ReconcileApiSchemaDiscovery.
func (mr *MockApiSchemaDiscoveryFinalizerMockRecorder) ReconcileApiSchemaDiscovery(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileApiSchemaDiscovery", reflect.TypeOf((*MockApiSchemaDiscoveryFinalizer)(nil).ReconcileApiSchemaDiscovery), obj)
}

// MockApiSchemaDiscoveryReconcileLoop is a mock of ApiSchemaDiscoveryReconcileLoop interface.
type MockApiSchemaDiscoveryReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockApiSchemaDiscoveryReconcileLoopMockRecorder
}

// MockApiSchemaDiscoveryReconcileLoopMockRecorder is the mock recorder for MockApiSchemaDiscoveryReconcileLoop.
type MockApiSchemaDiscoveryReconcileLoopMockRecorder struct {
	mock *MockApiSchemaDiscoveryReconcileLoop
}

// NewMockApiSchemaDiscoveryReconcileLoop creates a new mock instance.
func NewMockApiSchemaDiscoveryReconcileLoop(ctrl *gomock.Controller) *MockApiSchemaDiscoveryReconcileLoop {
	mock := &MockApiSchemaDiscoveryReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockApiSchemaDiscoveryReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiSchemaDiscoveryReconcileLoop) EXPECT() *MockApiSchemaDiscoveryReconcileLoopMockRecorder {
	return m.recorder
}

// RunApiSchemaDiscoveryReconciler mocks base method.
func (m *MockApiSchemaDiscoveryReconcileLoop) RunApiSchemaDiscoveryReconciler(ctx context.Context, rec controller.ApiSchemaDiscoveryReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunApiSchemaDiscoveryReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunApiSchemaDiscoveryReconciler indicates an expected call of RunApiSchemaDiscoveryReconciler.
func (mr *MockApiSchemaDiscoveryReconcileLoopMockRecorder) RunApiSchemaDiscoveryReconciler(ctx, rec any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunApiSchemaDiscoveryReconciler", reflect.TypeOf((*MockApiSchemaDiscoveryReconcileLoop)(nil).RunApiSchemaDiscoveryReconciler), varargs...)
}
