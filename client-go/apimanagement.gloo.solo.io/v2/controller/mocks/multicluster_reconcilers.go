// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"

	v2 "github.com/solo-io/solo-apis/client-go/apimanagement.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/client-go/apimanagement.gloo.solo.io/v2/controller"
)

// MockMulticlusterGraphQLStitchedSchemaReconciler is a mock of MulticlusterGraphQLStitchedSchemaReconciler interface.
type MockMulticlusterGraphQLStitchedSchemaReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGraphQLStitchedSchemaReconcilerMockRecorder
}

// MockMulticlusterGraphQLStitchedSchemaReconcilerMockRecorder is the mock recorder for MockMulticlusterGraphQLStitchedSchemaReconciler.
type MockMulticlusterGraphQLStitchedSchemaReconcilerMockRecorder struct {
	mock *MockMulticlusterGraphQLStitchedSchemaReconciler
}

// NewMockMulticlusterGraphQLStitchedSchemaReconciler creates a new mock instance.
func NewMockMulticlusterGraphQLStitchedSchemaReconciler(ctrl *gomock.Controller) *MockMulticlusterGraphQLStitchedSchemaReconciler {
	mock := &MockMulticlusterGraphQLStitchedSchemaReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGraphQLStitchedSchemaReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGraphQLStitchedSchemaReconciler) EXPECT() *MockMulticlusterGraphQLStitchedSchemaReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLStitchedSchema mocks base method.
func (m *MockMulticlusterGraphQLStitchedSchemaReconciler) ReconcileGraphQLStitchedSchema(clusterName string, obj *v2.GraphQLStitchedSchema) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLStitchedSchema", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGraphQLStitchedSchema indicates an expected call of ReconcileGraphQLStitchedSchema.
func (mr *MockMulticlusterGraphQLStitchedSchemaReconcilerMockRecorder) ReconcileGraphQLStitchedSchema(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLStitchedSchema", reflect.TypeOf((*MockMulticlusterGraphQLStitchedSchemaReconciler)(nil).ReconcileGraphQLStitchedSchema), clusterName, obj)
}

// MockMulticlusterGraphQLStitchedSchemaDeletionReconciler is a mock of MulticlusterGraphQLStitchedSchemaDeletionReconciler interface.
type MockMulticlusterGraphQLStitchedSchemaDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGraphQLStitchedSchemaDeletionReconcilerMockRecorder
}

// MockMulticlusterGraphQLStitchedSchemaDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterGraphQLStitchedSchemaDeletionReconciler.
type MockMulticlusterGraphQLStitchedSchemaDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterGraphQLStitchedSchemaDeletionReconciler
}

// NewMockMulticlusterGraphQLStitchedSchemaDeletionReconciler creates a new mock instance.
func NewMockMulticlusterGraphQLStitchedSchemaDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterGraphQLStitchedSchemaDeletionReconciler {
	mock := &MockMulticlusterGraphQLStitchedSchemaDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGraphQLStitchedSchemaDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGraphQLStitchedSchemaDeletionReconciler) EXPECT() *MockMulticlusterGraphQLStitchedSchemaDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLStitchedSchemaDeletion mocks base method.
func (m *MockMulticlusterGraphQLStitchedSchemaDeletionReconciler) ReconcileGraphQLStitchedSchemaDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLStitchedSchemaDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGraphQLStitchedSchemaDeletion indicates an expected call of ReconcileGraphQLStitchedSchemaDeletion.
func (mr *MockMulticlusterGraphQLStitchedSchemaDeletionReconcilerMockRecorder) ReconcileGraphQLStitchedSchemaDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLStitchedSchemaDeletion", reflect.TypeOf((*MockMulticlusterGraphQLStitchedSchemaDeletionReconciler)(nil).ReconcileGraphQLStitchedSchemaDeletion), clusterName, req)
}

// MockMulticlusterGraphQLStitchedSchemaReconcileLoop is a mock of MulticlusterGraphQLStitchedSchemaReconcileLoop interface.
type MockMulticlusterGraphQLStitchedSchemaReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGraphQLStitchedSchemaReconcileLoopMockRecorder
}

// MockMulticlusterGraphQLStitchedSchemaReconcileLoopMockRecorder is the mock recorder for MockMulticlusterGraphQLStitchedSchemaReconcileLoop.
type MockMulticlusterGraphQLStitchedSchemaReconcileLoopMockRecorder struct {
	mock *MockMulticlusterGraphQLStitchedSchemaReconcileLoop
}

// NewMockMulticlusterGraphQLStitchedSchemaReconcileLoop creates a new mock instance.
func NewMockMulticlusterGraphQLStitchedSchemaReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterGraphQLStitchedSchemaReconcileLoop {
	mock := &MockMulticlusterGraphQLStitchedSchemaReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGraphQLStitchedSchemaReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGraphQLStitchedSchemaReconcileLoop) EXPECT() *MockMulticlusterGraphQLStitchedSchemaReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterGraphQLStitchedSchemaReconciler mocks base method.
func (m *MockMulticlusterGraphQLStitchedSchemaReconcileLoop) AddMulticlusterGraphQLStitchedSchemaReconciler(ctx context.Context, rec controller.MulticlusterGraphQLStitchedSchemaReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterGraphQLStitchedSchemaReconciler", varargs...)
}

// AddMulticlusterGraphQLStitchedSchemaReconciler indicates an expected call of AddMulticlusterGraphQLStitchedSchemaReconciler.
func (mr *MockMulticlusterGraphQLStitchedSchemaReconcileLoopMockRecorder) AddMulticlusterGraphQLStitchedSchemaReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterGraphQLStitchedSchemaReconciler", reflect.TypeOf((*MockMulticlusterGraphQLStitchedSchemaReconcileLoop)(nil).AddMulticlusterGraphQLStitchedSchemaReconciler), varargs...)
}

// MockMulticlusterGraphQLResolverMapReconciler is a mock of MulticlusterGraphQLResolverMapReconciler interface.
type MockMulticlusterGraphQLResolverMapReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGraphQLResolverMapReconcilerMockRecorder
}

// MockMulticlusterGraphQLResolverMapReconcilerMockRecorder is the mock recorder for MockMulticlusterGraphQLResolverMapReconciler.
type MockMulticlusterGraphQLResolverMapReconcilerMockRecorder struct {
	mock *MockMulticlusterGraphQLResolverMapReconciler
}

// NewMockMulticlusterGraphQLResolverMapReconciler creates a new mock instance.
func NewMockMulticlusterGraphQLResolverMapReconciler(ctrl *gomock.Controller) *MockMulticlusterGraphQLResolverMapReconciler {
	mock := &MockMulticlusterGraphQLResolverMapReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGraphQLResolverMapReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGraphQLResolverMapReconciler) EXPECT() *MockMulticlusterGraphQLResolverMapReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLResolverMap mocks base method.
func (m *MockMulticlusterGraphQLResolverMapReconciler) ReconcileGraphQLResolverMap(clusterName string, obj *v2.GraphQLResolverMap) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLResolverMap", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGraphQLResolverMap indicates an expected call of ReconcileGraphQLResolverMap.
func (mr *MockMulticlusterGraphQLResolverMapReconcilerMockRecorder) ReconcileGraphQLResolverMap(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLResolverMap", reflect.TypeOf((*MockMulticlusterGraphQLResolverMapReconciler)(nil).ReconcileGraphQLResolverMap), clusterName, obj)
}

// MockMulticlusterGraphQLResolverMapDeletionReconciler is a mock of MulticlusterGraphQLResolverMapDeletionReconciler interface.
type MockMulticlusterGraphQLResolverMapDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGraphQLResolverMapDeletionReconcilerMockRecorder
}

// MockMulticlusterGraphQLResolverMapDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterGraphQLResolverMapDeletionReconciler.
type MockMulticlusterGraphQLResolverMapDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterGraphQLResolverMapDeletionReconciler
}

// NewMockMulticlusterGraphQLResolverMapDeletionReconciler creates a new mock instance.
func NewMockMulticlusterGraphQLResolverMapDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterGraphQLResolverMapDeletionReconciler {
	mock := &MockMulticlusterGraphQLResolverMapDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGraphQLResolverMapDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGraphQLResolverMapDeletionReconciler) EXPECT() *MockMulticlusterGraphQLResolverMapDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLResolverMapDeletion mocks base method.
func (m *MockMulticlusterGraphQLResolverMapDeletionReconciler) ReconcileGraphQLResolverMapDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLResolverMapDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGraphQLResolverMapDeletion indicates an expected call of ReconcileGraphQLResolverMapDeletion.
func (mr *MockMulticlusterGraphQLResolverMapDeletionReconcilerMockRecorder) ReconcileGraphQLResolverMapDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLResolverMapDeletion", reflect.TypeOf((*MockMulticlusterGraphQLResolverMapDeletionReconciler)(nil).ReconcileGraphQLResolverMapDeletion), clusterName, req)
}

// MockMulticlusterGraphQLResolverMapReconcileLoop is a mock of MulticlusterGraphQLResolverMapReconcileLoop interface.
type MockMulticlusterGraphQLResolverMapReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGraphQLResolverMapReconcileLoopMockRecorder
}

// MockMulticlusterGraphQLResolverMapReconcileLoopMockRecorder is the mock recorder for MockMulticlusterGraphQLResolverMapReconcileLoop.
type MockMulticlusterGraphQLResolverMapReconcileLoopMockRecorder struct {
	mock *MockMulticlusterGraphQLResolverMapReconcileLoop
}

// NewMockMulticlusterGraphQLResolverMapReconcileLoop creates a new mock instance.
func NewMockMulticlusterGraphQLResolverMapReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterGraphQLResolverMapReconcileLoop {
	mock := &MockMulticlusterGraphQLResolverMapReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGraphQLResolverMapReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGraphQLResolverMapReconcileLoop) EXPECT() *MockMulticlusterGraphQLResolverMapReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterGraphQLResolverMapReconciler mocks base method.
func (m *MockMulticlusterGraphQLResolverMapReconcileLoop) AddMulticlusterGraphQLResolverMapReconciler(ctx context.Context, rec controller.MulticlusterGraphQLResolverMapReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterGraphQLResolverMapReconciler", varargs...)
}

// AddMulticlusterGraphQLResolverMapReconciler indicates an expected call of AddMulticlusterGraphQLResolverMapReconciler.
func (mr *MockMulticlusterGraphQLResolverMapReconcileLoopMockRecorder) AddMulticlusterGraphQLResolverMapReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterGraphQLResolverMapReconciler", reflect.TypeOf((*MockMulticlusterGraphQLResolverMapReconcileLoop)(nil).AddMulticlusterGraphQLResolverMapReconciler), varargs...)
}

// MockMulticlusterGraphQLSchemaReconciler is a mock of MulticlusterGraphQLSchemaReconciler interface.
type MockMulticlusterGraphQLSchemaReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGraphQLSchemaReconcilerMockRecorder
}

// MockMulticlusterGraphQLSchemaReconcilerMockRecorder is the mock recorder for MockMulticlusterGraphQLSchemaReconciler.
type MockMulticlusterGraphQLSchemaReconcilerMockRecorder struct {
	mock *MockMulticlusterGraphQLSchemaReconciler
}

// NewMockMulticlusterGraphQLSchemaReconciler creates a new mock instance.
func NewMockMulticlusterGraphQLSchemaReconciler(ctrl *gomock.Controller) *MockMulticlusterGraphQLSchemaReconciler {
	mock := &MockMulticlusterGraphQLSchemaReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGraphQLSchemaReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGraphQLSchemaReconciler) EXPECT() *MockMulticlusterGraphQLSchemaReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLSchema mocks base method.
func (m *MockMulticlusterGraphQLSchemaReconciler) ReconcileGraphQLSchema(clusterName string, obj *v2.GraphQLSchema) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLSchema", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGraphQLSchema indicates an expected call of ReconcileGraphQLSchema.
func (mr *MockMulticlusterGraphQLSchemaReconcilerMockRecorder) ReconcileGraphQLSchema(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLSchema", reflect.TypeOf((*MockMulticlusterGraphQLSchemaReconciler)(nil).ReconcileGraphQLSchema), clusterName, obj)
}

// MockMulticlusterGraphQLSchemaDeletionReconciler is a mock of MulticlusterGraphQLSchemaDeletionReconciler interface.
type MockMulticlusterGraphQLSchemaDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGraphQLSchemaDeletionReconcilerMockRecorder
}

// MockMulticlusterGraphQLSchemaDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterGraphQLSchemaDeletionReconciler.
type MockMulticlusterGraphQLSchemaDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterGraphQLSchemaDeletionReconciler
}

// NewMockMulticlusterGraphQLSchemaDeletionReconciler creates a new mock instance.
func NewMockMulticlusterGraphQLSchemaDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterGraphQLSchemaDeletionReconciler {
	mock := &MockMulticlusterGraphQLSchemaDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGraphQLSchemaDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGraphQLSchemaDeletionReconciler) EXPECT() *MockMulticlusterGraphQLSchemaDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGraphQLSchemaDeletion mocks base method.
func (m *MockMulticlusterGraphQLSchemaDeletionReconciler) ReconcileGraphQLSchemaDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGraphQLSchemaDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGraphQLSchemaDeletion indicates an expected call of ReconcileGraphQLSchemaDeletion.
func (mr *MockMulticlusterGraphQLSchemaDeletionReconcilerMockRecorder) ReconcileGraphQLSchemaDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGraphQLSchemaDeletion", reflect.TypeOf((*MockMulticlusterGraphQLSchemaDeletionReconciler)(nil).ReconcileGraphQLSchemaDeletion), clusterName, req)
}

// MockMulticlusterGraphQLSchemaReconcileLoop is a mock of MulticlusterGraphQLSchemaReconcileLoop interface.
type MockMulticlusterGraphQLSchemaReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGraphQLSchemaReconcileLoopMockRecorder
}

// MockMulticlusterGraphQLSchemaReconcileLoopMockRecorder is the mock recorder for MockMulticlusterGraphQLSchemaReconcileLoop.
type MockMulticlusterGraphQLSchemaReconcileLoopMockRecorder struct {
	mock *MockMulticlusterGraphQLSchemaReconcileLoop
}

// NewMockMulticlusterGraphQLSchemaReconcileLoop creates a new mock instance.
func NewMockMulticlusterGraphQLSchemaReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterGraphQLSchemaReconcileLoop {
	mock := &MockMulticlusterGraphQLSchemaReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGraphQLSchemaReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGraphQLSchemaReconcileLoop) EXPECT() *MockMulticlusterGraphQLSchemaReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterGraphQLSchemaReconciler mocks base method.
func (m *MockMulticlusterGraphQLSchemaReconcileLoop) AddMulticlusterGraphQLSchemaReconciler(ctx context.Context, rec controller.MulticlusterGraphQLSchemaReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterGraphQLSchemaReconciler", varargs...)
}

// AddMulticlusterGraphQLSchemaReconciler indicates an expected call of AddMulticlusterGraphQLSchemaReconciler.
func (mr *MockMulticlusterGraphQLSchemaReconcileLoopMockRecorder) AddMulticlusterGraphQLSchemaReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterGraphQLSchemaReconciler", reflect.TypeOf((*MockMulticlusterGraphQLSchemaReconcileLoop)(nil).AddMulticlusterGraphQLSchemaReconciler), varargs...)
}

// MockMulticlusterApiDocReconciler is a mock of MulticlusterApiDocReconciler interface.
type MockMulticlusterApiDocReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterApiDocReconcilerMockRecorder
}

// MockMulticlusterApiDocReconcilerMockRecorder is the mock recorder for MockMulticlusterApiDocReconciler.
type MockMulticlusterApiDocReconcilerMockRecorder struct {
	mock *MockMulticlusterApiDocReconciler
}

// NewMockMulticlusterApiDocReconciler creates a new mock instance.
func NewMockMulticlusterApiDocReconciler(ctrl *gomock.Controller) *MockMulticlusterApiDocReconciler {
	mock := &MockMulticlusterApiDocReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterApiDocReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterApiDocReconciler) EXPECT() *MockMulticlusterApiDocReconcilerMockRecorder {
	return m.recorder
}

// ReconcileApiDoc mocks base method.
func (m *MockMulticlusterApiDocReconciler) ReconcileApiDoc(clusterName string, obj *v2.ApiDoc) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileApiDoc", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileApiDoc indicates an expected call of ReconcileApiDoc.
func (mr *MockMulticlusterApiDocReconcilerMockRecorder) ReconcileApiDoc(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileApiDoc", reflect.TypeOf((*MockMulticlusterApiDocReconciler)(nil).ReconcileApiDoc), clusterName, obj)
}

// MockMulticlusterApiDocDeletionReconciler is a mock of MulticlusterApiDocDeletionReconciler interface.
type MockMulticlusterApiDocDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterApiDocDeletionReconcilerMockRecorder
}

// MockMulticlusterApiDocDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterApiDocDeletionReconciler.
type MockMulticlusterApiDocDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterApiDocDeletionReconciler
}

// NewMockMulticlusterApiDocDeletionReconciler creates a new mock instance.
func NewMockMulticlusterApiDocDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterApiDocDeletionReconciler {
	mock := &MockMulticlusterApiDocDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterApiDocDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterApiDocDeletionReconciler) EXPECT() *MockMulticlusterApiDocDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileApiDocDeletion mocks base method.
func (m *MockMulticlusterApiDocDeletionReconciler) ReconcileApiDocDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileApiDocDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileApiDocDeletion indicates an expected call of ReconcileApiDocDeletion.
func (mr *MockMulticlusterApiDocDeletionReconcilerMockRecorder) ReconcileApiDocDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileApiDocDeletion", reflect.TypeOf((*MockMulticlusterApiDocDeletionReconciler)(nil).ReconcileApiDocDeletion), clusterName, req)
}

// MockMulticlusterApiDocReconcileLoop is a mock of MulticlusterApiDocReconcileLoop interface.
type MockMulticlusterApiDocReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterApiDocReconcileLoopMockRecorder
}

// MockMulticlusterApiDocReconcileLoopMockRecorder is the mock recorder for MockMulticlusterApiDocReconcileLoop.
type MockMulticlusterApiDocReconcileLoopMockRecorder struct {
	mock *MockMulticlusterApiDocReconcileLoop
}

// NewMockMulticlusterApiDocReconcileLoop creates a new mock instance.
func NewMockMulticlusterApiDocReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterApiDocReconcileLoop {
	mock := &MockMulticlusterApiDocReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterApiDocReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterApiDocReconcileLoop) EXPECT() *MockMulticlusterApiDocReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterApiDocReconciler mocks base method.
func (m *MockMulticlusterApiDocReconcileLoop) AddMulticlusterApiDocReconciler(ctx context.Context, rec controller.MulticlusterApiDocReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterApiDocReconciler", varargs...)
}

// AddMulticlusterApiDocReconciler indicates an expected call of AddMulticlusterApiDocReconciler.
func (mr *MockMulticlusterApiDocReconcileLoopMockRecorder) AddMulticlusterApiDocReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterApiDocReconciler", reflect.TypeOf((*MockMulticlusterApiDocReconcileLoop)(nil).AddMulticlusterApiDocReconciler), varargs...)
}

// MockMulticlusterPortalReconciler is a mock of MulticlusterPortalReconciler interface.
type MockMulticlusterPortalReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterPortalReconcilerMockRecorder
}

// MockMulticlusterPortalReconcilerMockRecorder is the mock recorder for MockMulticlusterPortalReconciler.
type MockMulticlusterPortalReconcilerMockRecorder struct {
	mock *MockMulticlusterPortalReconciler
}

// NewMockMulticlusterPortalReconciler creates a new mock instance.
func NewMockMulticlusterPortalReconciler(ctrl *gomock.Controller) *MockMulticlusterPortalReconciler {
	mock := &MockMulticlusterPortalReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterPortalReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterPortalReconciler) EXPECT() *MockMulticlusterPortalReconcilerMockRecorder {
	return m.recorder
}

// ReconcilePortal mocks base method.
func (m *MockMulticlusterPortalReconciler) ReconcilePortal(clusterName string, obj *v2.Portal) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePortal", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcilePortal indicates an expected call of ReconcilePortal.
func (mr *MockMulticlusterPortalReconcilerMockRecorder) ReconcilePortal(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePortal", reflect.TypeOf((*MockMulticlusterPortalReconciler)(nil).ReconcilePortal), clusterName, obj)
}

// MockMulticlusterPortalDeletionReconciler is a mock of MulticlusterPortalDeletionReconciler interface.
type MockMulticlusterPortalDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterPortalDeletionReconcilerMockRecorder
}

// MockMulticlusterPortalDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterPortalDeletionReconciler.
type MockMulticlusterPortalDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterPortalDeletionReconciler
}

// NewMockMulticlusterPortalDeletionReconciler creates a new mock instance.
func NewMockMulticlusterPortalDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterPortalDeletionReconciler {
	mock := &MockMulticlusterPortalDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterPortalDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterPortalDeletionReconciler) EXPECT() *MockMulticlusterPortalDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcilePortalDeletion mocks base method.
func (m *MockMulticlusterPortalDeletionReconciler) ReconcilePortalDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePortalDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcilePortalDeletion indicates an expected call of ReconcilePortalDeletion.
func (mr *MockMulticlusterPortalDeletionReconcilerMockRecorder) ReconcilePortalDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePortalDeletion", reflect.TypeOf((*MockMulticlusterPortalDeletionReconciler)(nil).ReconcilePortalDeletion), clusterName, req)
}

// MockMulticlusterPortalReconcileLoop is a mock of MulticlusterPortalReconcileLoop interface.
type MockMulticlusterPortalReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterPortalReconcileLoopMockRecorder
}

// MockMulticlusterPortalReconcileLoopMockRecorder is the mock recorder for MockMulticlusterPortalReconcileLoop.
type MockMulticlusterPortalReconcileLoopMockRecorder struct {
	mock *MockMulticlusterPortalReconcileLoop
}

// NewMockMulticlusterPortalReconcileLoop creates a new mock instance.
func NewMockMulticlusterPortalReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterPortalReconcileLoop {
	mock := &MockMulticlusterPortalReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterPortalReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterPortalReconcileLoop) EXPECT() *MockMulticlusterPortalReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterPortalReconciler mocks base method.
func (m *MockMulticlusterPortalReconcileLoop) AddMulticlusterPortalReconciler(ctx context.Context, rec controller.MulticlusterPortalReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterPortalReconciler", varargs...)
}

// AddMulticlusterPortalReconciler indicates an expected call of AddMulticlusterPortalReconciler.
func (mr *MockMulticlusterPortalReconcileLoopMockRecorder) AddMulticlusterPortalReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterPortalReconciler", reflect.TypeOf((*MockMulticlusterPortalReconcileLoop)(nil).AddMulticlusterPortalReconciler), varargs...)
}

// MockMulticlusterPortalGroupReconciler is a mock of MulticlusterPortalGroupReconciler interface.
type MockMulticlusterPortalGroupReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterPortalGroupReconcilerMockRecorder
}

// MockMulticlusterPortalGroupReconcilerMockRecorder is the mock recorder for MockMulticlusterPortalGroupReconciler.
type MockMulticlusterPortalGroupReconcilerMockRecorder struct {
	mock *MockMulticlusterPortalGroupReconciler
}

// NewMockMulticlusterPortalGroupReconciler creates a new mock instance.
func NewMockMulticlusterPortalGroupReconciler(ctrl *gomock.Controller) *MockMulticlusterPortalGroupReconciler {
	mock := &MockMulticlusterPortalGroupReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterPortalGroupReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterPortalGroupReconciler) EXPECT() *MockMulticlusterPortalGroupReconcilerMockRecorder {
	return m.recorder
}

// ReconcilePortalGroup mocks base method.
func (m *MockMulticlusterPortalGroupReconciler) ReconcilePortalGroup(clusterName string, obj *v2.PortalGroup) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePortalGroup", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcilePortalGroup indicates an expected call of ReconcilePortalGroup.
func (mr *MockMulticlusterPortalGroupReconcilerMockRecorder) ReconcilePortalGroup(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePortalGroup", reflect.TypeOf((*MockMulticlusterPortalGroupReconciler)(nil).ReconcilePortalGroup), clusterName, obj)
}

// MockMulticlusterPortalGroupDeletionReconciler is a mock of MulticlusterPortalGroupDeletionReconciler interface.
type MockMulticlusterPortalGroupDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterPortalGroupDeletionReconcilerMockRecorder
}

// MockMulticlusterPortalGroupDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterPortalGroupDeletionReconciler.
type MockMulticlusterPortalGroupDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterPortalGroupDeletionReconciler
}

// NewMockMulticlusterPortalGroupDeletionReconciler creates a new mock instance.
func NewMockMulticlusterPortalGroupDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterPortalGroupDeletionReconciler {
	mock := &MockMulticlusterPortalGroupDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterPortalGroupDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterPortalGroupDeletionReconciler) EXPECT() *MockMulticlusterPortalGroupDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcilePortalGroupDeletion mocks base method.
func (m *MockMulticlusterPortalGroupDeletionReconciler) ReconcilePortalGroupDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePortalGroupDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcilePortalGroupDeletion indicates an expected call of ReconcilePortalGroupDeletion.
func (mr *MockMulticlusterPortalGroupDeletionReconcilerMockRecorder) ReconcilePortalGroupDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePortalGroupDeletion", reflect.TypeOf((*MockMulticlusterPortalGroupDeletionReconciler)(nil).ReconcilePortalGroupDeletion), clusterName, req)
}

// MockMulticlusterPortalGroupReconcileLoop is a mock of MulticlusterPortalGroupReconcileLoop interface.
type MockMulticlusterPortalGroupReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterPortalGroupReconcileLoopMockRecorder
}

// MockMulticlusterPortalGroupReconcileLoopMockRecorder is the mock recorder for MockMulticlusterPortalGroupReconcileLoop.
type MockMulticlusterPortalGroupReconcileLoopMockRecorder struct {
	mock *MockMulticlusterPortalGroupReconcileLoop
}

// NewMockMulticlusterPortalGroupReconcileLoop creates a new mock instance.
func NewMockMulticlusterPortalGroupReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterPortalGroupReconcileLoop {
	mock := &MockMulticlusterPortalGroupReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterPortalGroupReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterPortalGroupReconcileLoop) EXPECT() *MockMulticlusterPortalGroupReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterPortalGroupReconciler mocks base method.
func (m *MockMulticlusterPortalGroupReconcileLoop) AddMulticlusterPortalGroupReconciler(ctx context.Context, rec controller.MulticlusterPortalGroupReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterPortalGroupReconciler", varargs...)
}

// AddMulticlusterPortalGroupReconciler indicates an expected call of AddMulticlusterPortalGroupReconciler.
func (mr *MockMulticlusterPortalGroupReconcileLoopMockRecorder) AddMulticlusterPortalGroupReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterPortalGroupReconciler", reflect.TypeOf((*MockMulticlusterPortalGroupReconcileLoop)(nil).AddMulticlusterPortalGroupReconciler), varargs...)
}
