// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v2 "github.com/solo-io/solo-apis/client-go/apimanagement.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/client-go/apimanagement.gloo.solo.io/v2/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockGraphQLStitchedSchemaEventHandler is a mock of GraphQLStitchedSchemaEventHandler interface.
type MockGraphQLStitchedSchemaEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLStitchedSchemaEventHandlerMockRecorder
}

// MockGraphQLStitchedSchemaEventHandlerMockRecorder is the mock recorder for MockGraphQLStitchedSchemaEventHandler.
type MockGraphQLStitchedSchemaEventHandlerMockRecorder struct {
	mock *MockGraphQLStitchedSchemaEventHandler
}

// NewMockGraphQLStitchedSchemaEventHandler creates a new mock instance.
func NewMockGraphQLStitchedSchemaEventHandler(ctrl *gomock.Controller) *MockGraphQLStitchedSchemaEventHandler {
	mock := &MockGraphQLStitchedSchemaEventHandler{ctrl: ctrl}
	mock.recorder = &MockGraphQLStitchedSchemaEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLStitchedSchemaEventHandler) EXPECT() *MockGraphQLStitchedSchemaEventHandlerMockRecorder {
	return m.recorder
}

// CreateGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaEventHandler) CreateGraphQLStitchedSchema(obj *v2.GraphQLStitchedSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGraphQLStitchedSchema", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGraphQLStitchedSchema indicates an expected call of CreateGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaEventHandlerMockRecorder) CreateGraphQLStitchedSchema(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaEventHandler)(nil).CreateGraphQLStitchedSchema), obj)
}

// DeleteGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaEventHandler) DeleteGraphQLStitchedSchema(obj *v2.GraphQLStitchedSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGraphQLStitchedSchema", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGraphQLStitchedSchema indicates an expected call of DeleteGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaEventHandlerMockRecorder) DeleteGraphQLStitchedSchema(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaEventHandler)(nil).DeleteGraphQLStitchedSchema), obj)
}

// GenericGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaEventHandler) GenericGraphQLStitchedSchema(obj *v2.GraphQLStitchedSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericGraphQLStitchedSchema", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericGraphQLStitchedSchema indicates an expected call of GenericGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaEventHandlerMockRecorder) GenericGraphQLStitchedSchema(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaEventHandler)(nil).GenericGraphQLStitchedSchema), obj)
}

// UpdateGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaEventHandler) UpdateGraphQLStitchedSchema(old, new *v2.GraphQLStitchedSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGraphQLStitchedSchema", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLStitchedSchema indicates an expected call of UpdateGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaEventHandlerMockRecorder) UpdateGraphQLStitchedSchema(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaEventHandler)(nil).UpdateGraphQLStitchedSchema), old, new)
}

// MockGraphQLStitchedSchemaEventWatcher is a mock of GraphQLStitchedSchemaEventWatcher interface.
type MockGraphQLStitchedSchemaEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLStitchedSchemaEventWatcherMockRecorder
}

// MockGraphQLStitchedSchemaEventWatcherMockRecorder is the mock recorder for MockGraphQLStitchedSchemaEventWatcher.
type MockGraphQLStitchedSchemaEventWatcherMockRecorder struct {
	mock *MockGraphQLStitchedSchemaEventWatcher
}

// NewMockGraphQLStitchedSchemaEventWatcher creates a new mock instance.
func NewMockGraphQLStitchedSchemaEventWatcher(ctrl *gomock.Controller) *MockGraphQLStitchedSchemaEventWatcher {
	mock := &MockGraphQLStitchedSchemaEventWatcher{ctrl: ctrl}
	mock.recorder = &MockGraphQLStitchedSchemaEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLStitchedSchemaEventWatcher) EXPECT() *MockGraphQLStitchedSchemaEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockGraphQLStitchedSchemaEventWatcher) AddEventHandler(ctx context.Context, h controller.GraphQLStitchedSchemaEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockGraphQLStitchedSchemaEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockGraphQLStitchedSchemaEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockGraphQLResolverMapEventHandler is a mock of GraphQLResolverMapEventHandler interface.
type MockGraphQLResolverMapEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLResolverMapEventHandlerMockRecorder
}

// MockGraphQLResolverMapEventHandlerMockRecorder is the mock recorder for MockGraphQLResolverMapEventHandler.
type MockGraphQLResolverMapEventHandlerMockRecorder struct {
	mock *MockGraphQLResolverMapEventHandler
}

// NewMockGraphQLResolverMapEventHandler creates a new mock instance.
func NewMockGraphQLResolverMapEventHandler(ctrl *gomock.Controller) *MockGraphQLResolverMapEventHandler {
	mock := &MockGraphQLResolverMapEventHandler{ctrl: ctrl}
	mock.recorder = &MockGraphQLResolverMapEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLResolverMapEventHandler) EXPECT() *MockGraphQLResolverMapEventHandlerMockRecorder {
	return m.recorder
}

// CreateGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapEventHandler) CreateGraphQLResolverMap(obj *v2.GraphQLResolverMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGraphQLResolverMap", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGraphQLResolverMap indicates an expected call of CreateGraphQLResolverMap.
func (mr *MockGraphQLResolverMapEventHandlerMockRecorder) CreateGraphQLResolverMap(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapEventHandler)(nil).CreateGraphQLResolverMap), obj)
}

// DeleteGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapEventHandler) DeleteGraphQLResolverMap(obj *v2.GraphQLResolverMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGraphQLResolverMap", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGraphQLResolverMap indicates an expected call of DeleteGraphQLResolverMap.
func (mr *MockGraphQLResolverMapEventHandlerMockRecorder) DeleteGraphQLResolverMap(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapEventHandler)(nil).DeleteGraphQLResolverMap), obj)
}

// GenericGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapEventHandler) GenericGraphQLResolverMap(obj *v2.GraphQLResolverMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericGraphQLResolverMap", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericGraphQLResolverMap indicates an expected call of GenericGraphQLResolverMap.
func (mr *MockGraphQLResolverMapEventHandlerMockRecorder) GenericGraphQLResolverMap(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapEventHandler)(nil).GenericGraphQLResolverMap), obj)
}

// UpdateGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapEventHandler) UpdateGraphQLResolverMap(old, new *v2.GraphQLResolverMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGraphQLResolverMap", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLResolverMap indicates an expected call of UpdateGraphQLResolverMap.
func (mr *MockGraphQLResolverMapEventHandlerMockRecorder) UpdateGraphQLResolverMap(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapEventHandler)(nil).UpdateGraphQLResolverMap), old, new)
}

// MockGraphQLResolverMapEventWatcher is a mock of GraphQLResolverMapEventWatcher interface.
type MockGraphQLResolverMapEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLResolverMapEventWatcherMockRecorder
}

// MockGraphQLResolverMapEventWatcherMockRecorder is the mock recorder for MockGraphQLResolverMapEventWatcher.
type MockGraphQLResolverMapEventWatcherMockRecorder struct {
	mock *MockGraphQLResolverMapEventWatcher
}

// NewMockGraphQLResolverMapEventWatcher creates a new mock instance.
func NewMockGraphQLResolverMapEventWatcher(ctrl *gomock.Controller) *MockGraphQLResolverMapEventWatcher {
	mock := &MockGraphQLResolverMapEventWatcher{ctrl: ctrl}
	mock.recorder = &MockGraphQLResolverMapEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLResolverMapEventWatcher) EXPECT() *MockGraphQLResolverMapEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockGraphQLResolverMapEventWatcher) AddEventHandler(ctx context.Context, h controller.GraphQLResolverMapEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockGraphQLResolverMapEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockGraphQLResolverMapEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockGraphQLSchemaEventHandler is a mock of GraphQLSchemaEventHandler interface.
type MockGraphQLSchemaEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaEventHandlerMockRecorder
}

// MockGraphQLSchemaEventHandlerMockRecorder is the mock recorder for MockGraphQLSchemaEventHandler.
type MockGraphQLSchemaEventHandlerMockRecorder struct {
	mock *MockGraphQLSchemaEventHandler
}

// NewMockGraphQLSchemaEventHandler creates a new mock instance.
func NewMockGraphQLSchemaEventHandler(ctrl *gomock.Controller) *MockGraphQLSchemaEventHandler {
	mock := &MockGraphQLSchemaEventHandler{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaEventHandler) EXPECT() *MockGraphQLSchemaEventHandlerMockRecorder {
	return m.recorder
}

// CreateGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaEventHandler) CreateGraphQLSchema(obj *v2.GraphQLSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGraphQLSchema", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGraphQLSchema indicates an expected call of CreateGraphQLSchema.
func (mr *MockGraphQLSchemaEventHandlerMockRecorder) CreateGraphQLSchema(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaEventHandler)(nil).CreateGraphQLSchema), obj)
}

// DeleteGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaEventHandler) DeleteGraphQLSchema(obj *v2.GraphQLSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGraphQLSchema", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGraphQLSchema indicates an expected call of DeleteGraphQLSchema.
func (mr *MockGraphQLSchemaEventHandlerMockRecorder) DeleteGraphQLSchema(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaEventHandler)(nil).DeleteGraphQLSchema), obj)
}

// GenericGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaEventHandler) GenericGraphQLSchema(obj *v2.GraphQLSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericGraphQLSchema", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericGraphQLSchema indicates an expected call of GenericGraphQLSchema.
func (mr *MockGraphQLSchemaEventHandlerMockRecorder) GenericGraphQLSchema(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaEventHandler)(nil).GenericGraphQLSchema), obj)
}

// UpdateGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaEventHandler) UpdateGraphQLSchema(old, new *v2.GraphQLSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGraphQLSchema", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLSchema indicates an expected call of UpdateGraphQLSchema.
func (mr *MockGraphQLSchemaEventHandlerMockRecorder) UpdateGraphQLSchema(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaEventHandler)(nil).UpdateGraphQLSchema), old, new)
}

// MockGraphQLSchemaEventWatcher is a mock of GraphQLSchemaEventWatcher interface.
type MockGraphQLSchemaEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaEventWatcherMockRecorder
}

// MockGraphQLSchemaEventWatcherMockRecorder is the mock recorder for MockGraphQLSchemaEventWatcher.
type MockGraphQLSchemaEventWatcherMockRecorder struct {
	mock *MockGraphQLSchemaEventWatcher
}

// NewMockGraphQLSchemaEventWatcher creates a new mock instance.
func NewMockGraphQLSchemaEventWatcher(ctrl *gomock.Controller) *MockGraphQLSchemaEventWatcher {
	mock := &MockGraphQLSchemaEventWatcher{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaEventWatcher) EXPECT() *MockGraphQLSchemaEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockGraphQLSchemaEventWatcher) AddEventHandler(ctx context.Context, h controller.GraphQLSchemaEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockGraphQLSchemaEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockGraphQLSchemaEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockApiDocEventHandler is a mock of ApiDocEventHandler interface.
type MockApiDocEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockApiDocEventHandlerMockRecorder
}

// MockApiDocEventHandlerMockRecorder is the mock recorder for MockApiDocEventHandler.
type MockApiDocEventHandlerMockRecorder struct {
	mock *MockApiDocEventHandler
}

// NewMockApiDocEventHandler creates a new mock instance.
func NewMockApiDocEventHandler(ctrl *gomock.Controller) *MockApiDocEventHandler {
	mock := &MockApiDocEventHandler{ctrl: ctrl}
	mock.recorder = &MockApiDocEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDocEventHandler) EXPECT() *MockApiDocEventHandlerMockRecorder {
	return m.recorder
}

// CreateApiDoc mocks base method.
func (m *MockApiDocEventHandler) CreateApiDoc(obj *v2.ApiDoc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApiDoc", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApiDoc indicates an expected call of CreateApiDoc.
func (mr *MockApiDocEventHandlerMockRecorder) CreateApiDoc(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiDoc", reflect.TypeOf((*MockApiDocEventHandler)(nil).CreateApiDoc), obj)
}

// DeleteApiDoc mocks base method.
func (m *MockApiDocEventHandler) DeleteApiDoc(obj *v2.ApiDoc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApiDoc", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApiDoc indicates an expected call of DeleteApiDoc.
func (mr *MockApiDocEventHandlerMockRecorder) DeleteApiDoc(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiDoc", reflect.TypeOf((*MockApiDocEventHandler)(nil).DeleteApiDoc), obj)
}

// GenericApiDoc mocks base method.
func (m *MockApiDocEventHandler) GenericApiDoc(obj *v2.ApiDoc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericApiDoc", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericApiDoc indicates an expected call of GenericApiDoc.
func (mr *MockApiDocEventHandlerMockRecorder) GenericApiDoc(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericApiDoc", reflect.TypeOf((*MockApiDocEventHandler)(nil).GenericApiDoc), obj)
}

// UpdateApiDoc mocks base method.
func (m *MockApiDocEventHandler) UpdateApiDoc(old, new *v2.ApiDoc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApiDoc", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApiDoc indicates an expected call of UpdateApiDoc.
func (mr *MockApiDocEventHandlerMockRecorder) UpdateApiDoc(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiDoc", reflect.TypeOf((*MockApiDocEventHandler)(nil).UpdateApiDoc), old, new)
}

// MockApiDocEventWatcher is a mock of ApiDocEventWatcher interface.
type MockApiDocEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockApiDocEventWatcherMockRecorder
}

// MockApiDocEventWatcherMockRecorder is the mock recorder for MockApiDocEventWatcher.
type MockApiDocEventWatcherMockRecorder struct {
	mock *MockApiDocEventWatcher
}

// NewMockApiDocEventWatcher creates a new mock instance.
func NewMockApiDocEventWatcher(ctrl *gomock.Controller) *MockApiDocEventWatcher {
	mock := &MockApiDocEventWatcher{ctrl: ctrl}
	mock.recorder = &MockApiDocEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDocEventWatcher) EXPECT() *MockApiDocEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockApiDocEventWatcher) AddEventHandler(ctx context.Context, h controller.ApiDocEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockApiDocEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockApiDocEventWatcher)(nil).AddEventHandler), varargs...)
}
