// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"

	v2 "github.com/solo-io/solo-apis/client-go/apimanagement.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/client-go/apimanagement.gloo.solo.io/v2/controller"
)

// MockGraphQLStitchedSchemaEventHandler is a mock of GraphQLStitchedSchemaEventHandler interface.
type MockGraphQLStitchedSchemaEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLStitchedSchemaEventHandlerMockRecorder
}

// MockGraphQLStitchedSchemaEventHandlerMockRecorder is the mock recorder for MockGraphQLStitchedSchemaEventHandler.
type MockGraphQLStitchedSchemaEventHandlerMockRecorder struct {
	mock *MockGraphQLStitchedSchemaEventHandler
}

// NewMockGraphQLStitchedSchemaEventHandler creates a new mock instance.
func NewMockGraphQLStitchedSchemaEventHandler(ctrl *gomock.Controller) *MockGraphQLStitchedSchemaEventHandler {
	mock := &MockGraphQLStitchedSchemaEventHandler{ctrl: ctrl}
	mock.recorder = &MockGraphQLStitchedSchemaEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLStitchedSchemaEventHandler) EXPECT() *MockGraphQLStitchedSchemaEventHandlerMockRecorder {
	return m.recorder
}

// CreateGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaEventHandler) CreateGraphQLStitchedSchema(obj *v2.GraphQLStitchedSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGraphQLStitchedSchema", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGraphQLStitchedSchema indicates an expected call of CreateGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaEventHandlerMockRecorder) CreateGraphQLStitchedSchema(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaEventHandler)(nil).CreateGraphQLStitchedSchema), obj)
}

// DeleteGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaEventHandler) DeleteGraphQLStitchedSchema(obj *v2.GraphQLStitchedSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGraphQLStitchedSchema", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGraphQLStitchedSchema indicates an expected call of DeleteGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaEventHandlerMockRecorder) DeleteGraphQLStitchedSchema(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaEventHandler)(nil).DeleteGraphQLStitchedSchema), obj)
}

// GenericGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaEventHandler) GenericGraphQLStitchedSchema(obj *v2.GraphQLStitchedSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericGraphQLStitchedSchema", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericGraphQLStitchedSchema indicates an expected call of GenericGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaEventHandlerMockRecorder) GenericGraphQLStitchedSchema(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaEventHandler)(nil).GenericGraphQLStitchedSchema), obj)
}

// UpdateGraphQLStitchedSchema mocks base method.
func (m *MockGraphQLStitchedSchemaEventHandler) UpdateGraphQLStitchedSchema(old, new *v2.GraphQLStitchedSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGraphQLStitchedSchema", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLStitchedSchema indicates an expected call of UpdateGraphQLStitchedSchema.
func (mr *MockGraphQLStitchedSchemaEventHandlerMockRecorder) UpdateGraphQLStitchedSchema(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLStitchedSchema", reflect.TypeOf((*MockGraphQLStitchedSchemaEventHandler)(nil).UpdateGraphQLStitchedSchema), old, new)
}

// MockGraphQLStitchedSchemaEventWatcher is a mock of GraphQLStitchedSchemaEventWatcher interface.
type MockGraphQLStitchedSchemaEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLStitchedSchemaEventWatcherMockRecorder
}

// MockGraphQLStitchedSchemaEventWatcherMockRecorder is the mock recorder for MockGraphQLStitchedSchemaEventWatcher.
type MockGraphQLStitchedSchemaEventWatcherMockRecorder struct {
	mock *MockGraphQLStitchedSchemaEventWatcher
}

// NewMockGraphQLStitchedSchemaEventWatcher creates a new mock instance.
func NewMockGraphQLStitchedSchemaEventWatcher(ctrl *gomock.Controller) *MockGraphQLStitchedSchemaEventWatcher {
	mock := &MockGraphQLStitchedSchemaEventWatcher{ctrl: ctrl}
	mock.recorder = &MockGraphQLStitchedSchemaEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLStitchedSchemaEventWatcher) EXPECT() *MockGraphQLStitchedSchemaEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockGraphQLStitchedSchemaEventWatcher) AddEventHandler(ctx context.Context, h controller.GraphQLStitchedSchemaEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockGraphQLStitchedSchemaEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockGraphQLStitchedSchemaEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockGraphQLResolverMapEventHandler is a mock of GraphQLResolverMapEventHandler interface.
type MockGraphQLResolverMapEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLResolverMapEventHandlerMockRecorder
}

// MockGraphQLResolverMapEventHandlerMockRecorder is the mock recorder for MockGraphQLResolverMapEventHandler.
type MockGraphQLResolverMapEventHandlerMockRecorder struct {
	mock *MockGraphQLResolverMapEventHandler
}

// NewMockGraphQLResolverMapEventHandler creates a new mock instance.
func NewMockGraphQLResolverMapEventHandler(ctrl *gomock.Controller) *MockGraphQLResolverMapEventHandler {
	mock := &MockGraphQLResolverMapEventHandler{ctrl: ctrl}
	mock.recorder = &MockGraphQLResolverMapEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLResolverMapEventHandler) EXPECT() *MockGraphQLResolverMapEventHandlerMockRecorder {
	return m.recorder
}

// CreateGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapEventHandler) CreateGraphQLResolverMap(obj *v2.GraphQLResolverMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGraphQLResolverMap", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGraphQLResolverMap indicates an expected call of CreateGraphQLResolverMap.
func (mr *MockGraphQLResolverMapEventHandlerMockRecorder) CreateGraphQLResolverMap(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapEventHandler)(nil).CreateGraphQLResolverMap), obj)
}

// DeleteGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapEventHandler) DeleteGraphQLResolverMap(obj *v2.GraphQLResolverMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGraphQLResolverMap", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGraphQLResolverMap indicates an expected call of DeleteGraphQLResolverMap.
func (mr *MockGraphQLResolverMapEventHandlerMockRecorder) DeleteGraphQLResolverMap(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapEventHandler)(nil).DeleteGraphQLResolverMap), obj)
}

// GenericGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapEventHandler) GenericGraphQLResolverMap(obj *v2.GraphQLResolverMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericGraphQLResolverMap", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericGraphQLResolverMap indicates an expected call of GenericGraphQLResolverMap.
func (mr *MockGraphQLResolverMapEventHandlerMockRecorder) GenericGraphQLResolverMap(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapEventHandler)(nil).GenericGraphQLResolverMap), obj)
}

// UpdateGraphQLResolverMap mocks base method.
func (m *MockGraphQLResolverMapEventHandler) UpdateGraphQLResolverMap(old, new *v2.GraphQLResolverMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGraphQLResolverMap", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLResolverMap indicates an expected call of UpdateGraphQLResolverMap.
func (mr *MockGraphQLResolverMapEventHandlerMockRecorder) UpdateGraphQLResolverMap(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLResolverMap", reflect.TypeOf((*MockGraphQLResolverMapEventHandler)(nil).UpdateGraphQLResolverMap), old, new)
}

// MockGraphQLResolverMapEventWatcher is a mock of GraphQLResolverMapEventWatcher interface.
type MockGraphQLResolverMapEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLResolverMapEventWatcherMockRecorder
}

// MockGraphQLResolverMapEventWatcherMockRecorder is the mock recorder for MockGraphQLResolverMapEventWatcher.
type MockGraphQLResolverMapEventWatcherMockRecorder struct {
	mock *MockGraphQLResolverMapEventWatcher
}

// NewMockGraphQLResolverMapEventWatcher creates a new mock instance.
func NewMockGraphQLResolverMapEventWatcher(ctrl *gomock.Controller) *MockGraphQLResolverMapEventWatcher {
	mock := &MockGraphQLResolverMapEventWatcher{ctrl: ctrl}
	mock.recorder = &MockGraphQLResolverMapEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLResolverMapEventWatcher) EXPECT() *MockGraphQLResolverMapEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockGraphQLResolverMapEventWatcher) AddEventHandler(ctx context.Context, h controller.GraphQLResolverMapEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockGraphQLResolverMapEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockGraphQLResolverMapEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockGraphQLSchemaEventHandler is a mock of GraphQLSchemaEventHandler interface.
type MockGraphQLSchemaEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaEventHandlerMockRecorder
}

// MockGraphQLSchemaEventHandlerMockRecorder is the mock recorder for MockGraphQLSchemaEventHandler.
type MockGraphQLSchemaEventHandlerMockRecorder struct {
	mock *MockGraphQLSchemaEventHandler
}

// NewMockGraphQLSchemaEventHandler creates a new mock instance.
func NewMockGraphQLSchemaEventHandler(ctrl *gomock.Controller) *MockGraphQLSchemaEventHandler {
	mock := &MockGraphQLSchemaEventHandler{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaEventHandler) EXPECT() *MockGraphQLSchemaEventHandlerMockRecorder {
	return m.recorder
}

// CreateGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaEventHandler) CreateGraphQLSchema(obj *v2.GraphQLSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGraphQLSchema", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGraphQLSchema indicates an expected call of CreateGraphQLSchema.
func (mr *MockGraphQLSchemaEventHandlerMockRecorder) CreateGraphQLSchema(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaEventHandler)(nil).CreateGraphQLSchema), obj)
}

// DeleteGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaEventHandler) DeleteGraphQLSchema(obj *v2.GraphQLSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGraphQLSchema", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGraphQLSchema indicates an expected call of DeleteGraphQLSchema.
func (mr *MockGraphQLSchemaEventHandlerMockRecorder) DeleteGraphQLSchema(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaEventHandler)(nil).DeleteGraphQLSchema), obj)
}

// GenericGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaEventHandler) GenericGraphQLSchema(obj *v2.GraphQLSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericGraphQLSchema", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericGraphQLSchema indicates an expected call of GenericGraphQLSchema.
func (mr *MockGraphQLSchemaEventHandlerMockRecorder) GenericGraphQLSchema(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaEventHandler)(nil).GenericGraphQLSchema), obj)
}

// UpdateGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaEventHandler) UpdateGraphQLSchema(old, new *v2.GraphQLSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGraphQLSchema", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLSchema indicates an expected call of UpdateGraphQLSchema.
func (mr *MockGraphQLSchemaEventHandlerMockRecorder) UpdateGraphQLSchema(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaEventHandler)(nil).UpdateGraphQLSchema), old, new)
}

// MockGraphQLSchemaEventWatcher is a mock of GraphQLSchemaEventWatcher interface.
type MockGraphQLSchemaEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaEventWatcherMockRecorder
}

// MockGraphQLSchemaEventWatcherMockRecorder is the mock recorder for MockGraphQLSchemaEventWatcher.
type MockGraphQLSchemaEventWatcherMockRecorder struct {
	mock *MockGraphQLSchemaEventWatcher
}

// NewMockGraphQLSchemaEventWatcher creates a new mock instance.
func NewMockGraphQLSchemaEventWatcher(ctrl *gomock.Controller) *MockGraphQLSchemaEventWatcher {
	mock := &MockGraphQLSchemaEventWatcher{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaEventWatcher) EXPECT() *MockGraphQLSchemaEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockGraphQLSchemaEventWatcher) AddEventHandler(ctx context.Context, h controller.GraphQLSchemaEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockGraphQLSchemaEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockGraphQLSchemaEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockApiDocEventHandler is a mock of ApiDocEventHandler interface.
type MockApiDocEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockApiDocEventHandlerMockRecorder
}

// MockApiDocEventHandlerMockRecorder is the mock recorder for MockApiDocEventHandler.
type MockApiDocEventHandlerMockRecorder struct {
	mock *MockApiDocEventHandler
}

// NewMockApiDocEventHandler creates a new mock instance.
func NewMockApiDocEventHandler(ctrl *gomock.Controller) *MockApiDocEventHandler {
	mock := &MockApiDocEventHandler{ctrl: ctrl}
	mock.recorder = &MockApiDocEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDocEventHandler) EXPECT() *MockApiDocEventHandlerMockRecorder {
	return m.recorder
}

// CreateApiDoc mocks base method.
func (m *MockApiDocEventHandler) CreateApiDoc(obj *v2.ApiDoc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApiDoc", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApiDoc indicates an expected call of CreateApiDoc.
func (mr *MockApiDocEventHandlerMockRecorder) CreateApiDoc(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiDoc", reflect.TypeOf((*MockApiDocEventHandler)(nil).CreateApiDoc), obj)
}

// DeleteApiDoc mocks base method.
func (m *MockApiDocEventHandler) DeleteApiDoc(obj *v2.ApiDoc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApiDoc", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApiDoc indicates an expected call of DeleteApiDoc.
func (mr *MockApiDocEventHandlerMockRecorder) DeleteApiDoc(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiDoc", reflect.TypeOf((*MockApiDocEventHandler)(nil).DeleteApiDoc), obj)
}

// GenericApiDoc mocks base method.
func (m *MockApiDocEventHandler) GenericApiDoc(obj *v2.ApiDoc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericApiDoc", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericApiDoc indicates an expected call of GenericApiDoc.
func (mr *MockApiDocEventHandlerMockRecorder) GenericApiDoc(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericApiDoc", reflect.TypeOf((*MockApiDocEventHandler)(nil).GenericApiDoc), obj)
}

// UpdateApiDoc mocks base method.
func (m *MockApiDocEventHandler) UpdateApiDoc(old, new *v2.ApiDoc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApiDoc", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApiDoc indicates an expected call of UpdateApiDoc.
func (mr *MockApiDocEventHandlerMockRecorder) UpdateApiDoc(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiDoc", reflect.TypeOf((*MockApiDocEventHandler)(nil).UpdateApiDoc), old, new)
}

// MockApiDocEventWatcher is a mock of ApiDocEventWatcher interface.
type MockApiDocEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockApiDocEventWatcherMockRecorder
}

// MockApiDocEventWatcherMockRecorder is the mock recorder for MockApiDocEventWatcher.
type MockApiDocEventWatcherMockRecorder struct {
	mock *MockApiDocEventWatcher
}

// NewMockApiDocEventWatcher creates a new mock instance.
func NewMockApiDocEventWatcher(ctrl *gomock.Controller) *MockApiDocEventWatcher {
	mock := &MockApiDocEventWatcher{ctrl: ctrl}
	mock.recorder = &MockApiDocEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDocEventWatcher) EXPECT() *MockApiDocEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockApiDocEventWatcher) AddEventHandler(ctx context.Context, h controller.ApiDocEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockApiDocEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockApiDocEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockPortalEventHandler is a mock of PortalEventHandler interface.
type MockPortalEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPortalEventHandlerMockRecorder
}

// MockPortalEventHandlerMockRecorder is the mock recorder for MockPortalEventHandler.
type MockPortalEventHandlerMockRecorder struct {
	mock *MockPortalEventHandler
}

// NewMockPortalEventHandler creates a new mock instance.
func NewMockPortalEventHandler(ctrl *gomock.Controller) *MockPortalEventHandler {
	mock := &MockPortalEventHandler{ctrl: ctrl}
	mock.recorder = &MockPortalEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalEventHandler) EXPECT() *MockPortalEventHandlerMockRecorder {
	return m.recorder
}

// CreatePortal mocks base method.
func (m *MockPortalEventHandler) CreatePortal(obj *v2.Portal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePortal", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePortal indicates an expected call of CreatePortal.
func (mr *MockPortalEventHandlerMockRecorder) CreatePortal(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortal", reflect.TypeOf((*MockPortalEventHandler)(nil).CreatePortal), obj)
}

// DeletePortal mocks base method.
func (m *MockPortalEventHandler) DeletePortal(obj *v2.Portal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePortal", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePortal indicates an expected call of DeletePortal.
func (mr *MockPortalEventHandlerMockRecorder) DeletePortal(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortal", reflect.TypeOf((*MockPortalEventHandler)(nil).DeletePortal), obj)
}

// GenericPortal mocks base method.
func (m *MockPortalEventHandler) GenericPortal(obj *v2.Portal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericPortal", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericPortal indicates an expected call of GenericPortal.
func (mr *MockPortalEventHandlerMockRecorder) GenericPortal(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericPortal", reflect.TypeOf((*MockPortalEventHandler)(nil).GenericPortal), obj)
}

// UpdatePortal mocks base method.
func (m *MockPortalEventHandler) UpdatePortal(old, new *v2.Portal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePortal", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePortal indicates an expected call of UpdatePortal.
func (mr *MockPortalEventHandlerMockRecorder) UpdatePortal(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortal", reflect.TypeOf((*MockPortalEventHandler)(nil).UpdatePortal), old, new)
}

// MockPortalEventWatcher is a mock of PortalEventWatcher interface.
type MockPortalEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockPortalEventWatcherMockRecorder
}

// MockPortalEventWatcherMockRecorder is the mock recorder for MockPortalEventWatcher.
type MockPortalEventWatcherMockRecorder struct {
	mock *MockPortalEventWatcher
}

// NewMockPortalEventWatcher creates a new mock instance.
func NewMockPortalEventWatcher(ctrl *gomock.Controller) *MockPortalEventWatcher {
	mock := &MockPortalEventWatcher{ctrl: ctrl}
	mock.recorder = &MockPortalEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalEventWatcher) EXPECT() *MockPortalEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockPortalEventWatcher) AddEventHandler(ctx context.Context, h controller.PortalEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockPortalEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockPortalEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockPortalGroupEventHandler is a mock of PortalGroupEventHandler interface.
type MockPortalGroupEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPortalGroupEventHandlerMockRecorder
}

// MockPortalGroupEventHandlerMockRecorder is the mock recorder for MockPortalGroupEventHandler.
type MockPortalGroupEventHandlerMockRecorder struct {
	mock *MockPortalGroupEventHandler
}

// NewMockPortalGroupEventHandler creates a new mock instance.
func NewMockPortalGroupEventHandler(ctrl *gomock.Controller) *MockPortalGroupEventHandler {
	mock := &MockPortalGroupEventHandler{ctrl: ctrl}
	mock.recorder = &MockPortalGroupEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalGroupEventHandler) EXPECT() *MockPortalGroupEventHandlerMockRecorder {
	return m.recorder
}

// CreatePortalGroup mocks base method.
func (m *MockPortalGroupEventHandler) CreatePortalGroup(obj *v2.PortalGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePortalGroup", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePortalGroup indicates an expected call of CreatePortalGroup.
func (mr *MockPortalGroupEventHandlerMockRecorder) CreatePortalGroup(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortalGroup", reflect.TypeOf((*MockPortalGroupEventHandler)(nil).CreatePortalGroup), obj)
}

// DeletePortalGroup mocks base method.
func (m *MockPortalGroupEventHandler) DeletePortalGroup(obj *v2.PortalGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePortalGroup", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePortalGroup indicates an expected call of DeletePortalGroup.
func (mr *MockPortalGroupEventHandlerMockRecorder) DeletePortalGroup(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortalGroup", reflect.TypeOf((*MockPortalGroupEventHandler)(nil).DeletePortalGroup), obj)
}

// GenericPortalGroup mocks base method.
func (m *MockPortalGroupEventHandler) GenericPortalGroup(obj *v2.PortalGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericPortalGroup", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericPortalGroup indicates an expected call of GenericPortalGroup.
func (mr *MockPortalGroupEventHandlerMockRecorder) GenericPortalGroup(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericPortalGroup", reflect.TypeOf((*MockPortalGroupEventHandler)(nil).GenericPortalGroup), obj)
}

// UpdatePortalGroup mocks base method.
func (m *MockPortalGroupEventHandler) UpdatePortalGroup(old, new *v2.PortalGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePortalGroup", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePortalGroup indicates an expected call of UpdatePortalGroup.
func (mr *MockPortalGroupEventHandlerMockRecorder) UpdatePortalGroup(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortalGroup", reflect.TypeOf((*MockPortalGroupEventHandler)(nil).UpdatePortalGroup), old, new)
}

// MockPortalGroupEventWatcher is a mock of PortalGroupEventWatcher interface.
type MockPortalGroupEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockPortalGroupEventWatcherMockRecorder
}

// MockPortalGroupEventWatcherMockRecorder is the mock recorder for MockPortalGroupEventWatcher.
type MockPortalGroupEventWatcherMockRecorder struct {
	mock *MockPortalGroupEventWatcher
}

// NewMockPortalGroupEventWatcher creates a new mock instance.
func NewMockPortalGroupEventWatcher(ctrl *gomock.Controller) *MockPortalGroupEventWatcher {
	mock := &MockPortalGroupEventWatcher{ctrl: ctrl}
	mock.recorder = &MockPortalGroupEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalGroupEventWatcher) EXPECT() *MockPortalGroupEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockPortalGroupEventWatcher) AddEventHandler(ctx context.Context, h controller.PortalGroupEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockPortalGroupEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockPortalGroupEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockApiProductEventHandler is a mock of ApiProductEventHandler interface.
type MockApiProductEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockApiProductEventHandlerMockRecorder
}

// MockApiProductEventHandlerMockRecorder is the mock recorder for MockApiProductEventHandler.
type MockApiProductEventHandlerMockRecorder struct {
	mock *MockApiProductEventHandler
}

// NewMockApiProductEventHandler creates a new mock instance.
func NewMockApiProductEventHandler(ctrl *gomock.Controller) *MockApiProductEventHandler {
	mock := &MockApiProductEventHandler{ctrl: ctrl}
	mock.recorder = &MockApiProductEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiProductEventHandler) EXPECT() *MockApiProductEventHandlerMockRecorder {
	return m.recorder
}

// CreateApiProduct mocks base method.
func (m *MockApiProductEventHandler) CreateApiProduct(obj *v2.ApiProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApiProduct", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApiProduct indicates an expected call of CreateApiProduct.
func (mr *MockApiProductEventHandlerMockRecorder) CreateApiProduct(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiProduct", reflect.TypeOf((*MockApiProductEventHandler)(nil).CreateApiProduct), obj)
}

// DeleteApiProduct mocks base method.
func (m *MockApiProductEventHandler) DeleteApiProduct(obj *v2.ApiProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApiProduct", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApiProduct indicates an expected call of DeleteApiProduct.
func (mr *MockApiProductEventHandlerMockRecorder) DeleteApiProduct(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiProduct", reflect.TypeOf((*MockApiProductEventHandler)(nil).DeleteApiProduct), obj)
}

// GenericApiProduct mocks base method.
func (m *MockApiProductEventHandler) GenericApiProduct(obj *v2.ApiProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericApiProduct", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericApiProduct indicates an expected call of GenericApiProduct.
func (mr *MockApiProductEventHandlerMockRecorder) GenericApiProduct(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericApiProduct", reflect.TypeOf((*MockApiProductEventHandler)(nil).GenericApiProduct), obj)
}

// UpdateApiProduct mocks base method.
func (m *MockApiProductEventHandler) UpdateApiProduct(old, new *v2.ApiProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApiProduct", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApiProduct indicates an expected call of UpdateApiProduct.
func (mr *MockApiProductEventHandlerMockRecorder) UpdateApiProduct(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiProduct", reflect.TypeOf((*MockApiProductEventHandler)(nil).UpdateApiProduct), old, new)
}

// MockApiProductEventWatcher is a mock of ApiProductEventWatcher interface.
type MockApiProductEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockApiProductEventWatcherMockRecorder
}

// MockApiProductEventWatcherMockRecorder is the mock recorder for MockApiProductEventWatcher.
type MockApiProductEventWatcherMockRecorder struct {
	mock *MockApiProductEventWatcher
}

// NewMockApiProductEventWatcher creates a new mock instance.
func NewMockApiProductEventWatcher(ctrl *gomock.Controller) *MockApiProductEventWatcher {
	mock := &MockApiProductEventWatcher{ctrl: ctrl}
	mock.recorder = &MockApiProductEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiProductEventWatcher) EXPECT() *MockApiProductEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockApiProductEventWatcher) AddEventHandler(ctx context.Context, h controller.ApiProductEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockApiProductEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockApiProductEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockApiSchemaDiscoveryEventHandler is a mock of ApiSchemaDiscoveryEventHandler interface.
type MockApiSchemaDiscoveryEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockApiSchemaDiscoveryEventHandlerMockRecorder
}

// MockApiSchemaDiscoveryEventHandlerMockRecorder is the mock recorder for MockApiSchemaDiscoveryEventHandler.
type MockApiSchemaDiscoveryEventHandlerMockRecorder struct {
	mock *MockApiSchemaDiscoveryEventHandler
}

// NewMockApiSchemaDiscoveryEventHandler creates a new mock instance.
func NewMockApiSchemaDiscoveryEventHandler(ctrl *gomock.Controller) *MockApiSchemaDiscoveryEventHandler {
	mock := &MockApiSchemaDiscoveryEventHandler{ctrl: ctrl}
	mock.recorder = &MockApiSchemaDiscoveryEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiSchemaDiscoveryEventHandler) EXPECT() *MockApiSchemaDiscoveryEventHandlerMockRecorder {
	return m.recorder
}

// CreateApiSchemaDiscovery mocks base method.
func (m *MockApiSchemaDiscoveryEventHandler) CreateApiSchemaDiscovery(obj *v2.ApiSchemaDiscovery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApiSchemaDiscovery", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApiSchemaDiscovery indicates an expected call of CreateApiSchemaDiscovery.
func (mr *MockApiSchemaDiscoveryEventHandlerMockRecorder) CreateApiSchemaDiscovery(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiSchemaDiscovery", reflect.TypeOf((*MockApiSchemaDiscoveryEventHandler)(nil).CreateApiSchemaDiscovery), obj)
}

// DeleteApiSchemaDiscovery mocks base method.
func (m *MockApiSchemaDiscoveryEventHandler) DeleteApiSchemaDiscovery(obj *v2.ApiSchemaDiscovery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApiSchemaDiscovery", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApiSchemaDiscovery indicates an expected call of DeleteApiSchemaDiscovery.
func (mr *MockApiSchemaDiscoveryEventHandlerMockRecorder) DeleteApiSchemaDiscovery(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiSchemaDiscovery", reflect.TypeOf((*MockApiSchemaDiscoveryEventHandler)(nil).DeleteApiSchemaDiscovery), obj)
}

// GenericApiSchemaDiscovery mocks base method.
func (m *MockApiSchemaDiscoveryEventHandler) GenericApiSchemaDiscovery(obj *v2.ApiSchemaDiscovery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericApiSchemaDiscovery", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericApiSchemaDiscovery indicates an expected call of GenericApiSchemaDiscovery.
func (mr *MockApiSchemaDiscoveryEventHandlerMockRecorder) GenericApiSchemaDiscovery(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericApiSchemaDiscovery", reflect.TypeOf((*MockApiSchemaDiscoveryEventHandler)(nil).GenericApiSchemaDiscovery), obj)
}

// UpdateApiSchemaDiscovery mocks base method.
func (m *MockApiSchemaDiscoveryEventHandler) UpdateApiSchemaDiscovery(old, new *v2.ApiSchemaDiscovery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApiSchemaDiscovery", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApiSchemaDiscovery indicates an expected call of UpdateApiSchemaDiscovery.
func (mr *MockApiSchemaDiscoveryEventHandlerMockRecorder) UpdateApiSchemaDiscovery(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiSchemaDiscovery", reflect.TypeOf((*MockApiSchemaDiscoveryEventHandler)(nil).UpdateApiSchemaDiscovery), old, new)
}

// MockApiSchemaDiscoveryEventWatcher is a mock of ApiSchemaDiscoveryEventWatcher interface.
type MockApiSchemaDiscoveryEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockApiSchemaDiscoveryEventWatcherMockRecorder
}

// MockApiSchemaDiscoveryEventWatcherMockRecorder is the mock recorder for MockApiSchemaDiscoveryEventWatcher.
type MockApiSchemaDiscoveryEventWatcherMockRecorder struct {
	mock *MockApiSchemaDiscoveryEventWatcher
}

// NewMockApiSchemaDiscoveryEventWatcher creates a new mock instance.
func NewMockApiSchemaDiscoveryEventWatcher(ctrl *gomock.Controller) *MockApiSchemaDiscoveryEventWatcher {
	mock := &MockApiSchemaDiscoveryEventWatcher{ctrl: ctrl}
	mock.recorder = &MockApiSchemaDiscoveryEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiSchemaDiscoveryEventWatcher) EXPECT() *MockApiSchemaDiscoveryEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockApiSchemaDiscoveryEventWatcher) AddEventHandler(ctx context.Context, h controller.ApiSchemaDiscoveryEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockApiSchemaDiscoveryEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockApiSchemaDiscoveryEventWatcher)(nil).AddEventHandler), varargs...)
}
