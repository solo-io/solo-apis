// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/apimanagement/v2/portal.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *PortalSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalSpec)
	if !ok {
		that2, ok := that.(PortalSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetPortalBackendSelectors()) != len(target.GetPortalBackendSelectors()) {
		return false
	}
	for idx, v := range m.GetPortalBackendSelectors() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetPortalBackendSelectors()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetPortalBackendSelectors()[idx]) {
				return false
			}
		}

	}

	if len(m.GetApis()) != len(target.GetApis()) {
		return false
	}
	for idx, v := range m.GetApis() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetApis()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetApis()[idx]) {
				return false
			}
		}

	}

	if len(m.GetApiProducts()) != len(target.GetApiProducts()) {
		return false
	}
	for idx, v := range m.GetApiProducts() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetApiProducts()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetApiProducts()[idx]) {
				return false
			}
		}

	}

	if len(m.GetUsagePlans()) != len(target.GetUsagePlans()) {
		return false
	}
	for idx, v := range m.GetUsagePlans() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetUsagePlans()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetUsagePlans()[idx]) {
				return false
			}
		}

	}

	if len(m.GetDomains()) != len(target.GetDomains()) {
		return false
	}
	for idx, v := range m.GetDomains() {

		if strings.Compare(v, target.GetDomains()[idx]) != 0 {
			return false
		}

	}

	if h, ok := interface{}(m.GetVisibility()).(equality.Equalizer); ok {
		if !h.Equal(target.GetVisibility()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetVisibility(), target.GetVisibility()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *PortalStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalStatus)
	if !ok {
		that2, ok := that.(PortalStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetCommon()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCommon()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCommon(), target.GetCommon()) {
			return false
		}
	}

	if strings.Compare(m.GetOwnerWorkspace(), target.GetOwnerWorkspace()) != 0 {
		return false
	}

	if m.GetRouteTablesCount() != target.GetRouteTablesCount() {
		return false
	}

	if m.GetExtAuthPolicyCount() != target.GetExtAuthPolicyCount() {
		return false
	}

	if m.GetRateLimitPolicyCount() != target.GetRateLimitPolicyCount() {
		return false
	}

	if m.GetPortalBackendCount() != target.GetPortalBackendCount() {
		return false
	}

	return true
}

// Equal function
func (m *PortalReport) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalReport)
	if !ok {
		that2, ok := that.(PortalReport)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetWorkspaces()) != len(target.GetWorkspaces()) {
		return false
	}
	for k, v := range m.GetWorkspaces() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetWorkspaces()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetWorkspaces()[k]) {
				return false
			}
		}

	}

	if strings.Compare(m.GetOwnerWorkspace(), target.GetOwnerWorkspace()) != 0 {
		return false
	}

	if len(m.GetSelectedRouteTables()) != len(target.GetSelectedRouteTables()) {
		return false
	}
	for idx, v := range m.GetSelectedRouteTables() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetSelectedRouteTables()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetSelectedRouteTables()[idx]) {
				return false
			}
		}

	}

	if len(m.GetSelectedExtAuthPolicies()) != len(target.GetSelectedExtAuthPolicies()) {
		return false
	}
	for idx, v := range m.GetSelectedExtAuthPolicies() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetSelectedExtAuthPolicies()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetSelectedExtAuthPolicies()[idx]) {
				return false
			}
		}

	}

	if len(m.GetSelectedRateLimitPolicies()) != len(target.GetSelectedRateLimitPolicies()) {
		return false
	}
	for idx, v := range m.GetSelectedRateLimitPolicies() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetSelectedRateLimitPolicies()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetSelectedRateLimitPolicies()[idx]) {
				return false
			}
		}

	}

	if len(m.GetSelectedPortalBackend()) != len(target.GetSelectedPortalBackend()) {
		return false
	}
	for idx, v := range m.GetSelectedPortalBackend() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetSelectedPortalBackend()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetSelectedPortalBackend()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *PortalSpec_Visibility) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalSpec_Visibility)
	if !ok {
		that2, ok := that.(PortalSpec_Visibility)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetPublic() != target.GetPublic() {
		return false
	}

	if len(m.GetPrivateAPILabels()) != len(target.GetPrivateAPILabels()) {
		return false
	}
	for k, v := range m.GetPrivateAPILabels() {

		if strings.Compare(v, target.GetPrivateAPILabels()[k]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *PortalSpec_UsagePlan) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalSpec_UsagePlan)
	if !ok {
		that2, ok := that.(PortalSpec_UsagePlan)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetDisplayName(), target.GetDisplayName()) != 0 {
		return false
	}

	if strings.Compare(m.GetDescription(), target.GetDescription()) != 0 {
		return false
	}

	return true
}
