// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/apimanagement/v2/api_schema_discovery.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *ApiSchemaDiscoverySpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ApiSchemaDiscoverySpec)
	if !ok {
		that2, ok := that.(ApiSchemaDiscoverySpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetServedBy()) != len(target.GetServedBy()) {
		return false
	}
	for idx, v := range m.GetServedBy() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetServedBy()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetServedBy()[idx]) {
				return false
			}
		}

	}

	switch m.FetchSchemaType.(type) {

	case *ApiSchemaDiscoverySpec_Openapi:
		if _, ok := target.FetchSchemaType.(*ApiSchemaDiscoverySpec_Openapi); !ok {
			return false
		}

		if h, ok := interface{}(m.GetOpenapi()).(equality.Equalizer); ok {
			if !h.Equal(target.GetOpenapi()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetOpenapi(), target.GetOpenapi()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.FetchSchemaType != target.FetchSchemaType {
			return false
		}
	}

	return true
}

// Equal function
func (m *ApiSchemaDiscoveryStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ApiSchemaDiscoveryStatus)
	if !ok {
		that2, ok := that.(ApiSchemaDiscoveryStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetCommon()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCommon()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCommon(), target.GetCommon()) {
			return false
		}
	}

	if strings.Compare(m.GetOwnerWorkspace(), target.GetOwnerWorkspace()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *ApiSchemaDiscoveryReport) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ApiSchemaDiscoveryReport)
	if !ok {
		that2, ok := that.(ApiSchemaDiscoveryReport)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetOwnerWorkspace(), target.GetOwnerWorkspace()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *ApiSchemaDiscoverySpec_OpenAPI) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ApiSchemaDiscoverySpec_OpenAPI)
	if !ok {
		that2, ok := that.(ApiSchemaDiscoverySpec_OpenAPI)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetFetchEndpoint()).(equality.Equalizer); ok {
		if !h.Equal(target.GetFetchEndpoint()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetFetchEndpoint(), target.GetFetchEndpoint()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ApiSchemaDiscoverySpec_FetchEndpoint) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ApiSchemaDiscoverySpec_FetchEndpoint)
	if !ok {
		that2, ok := that.(ApiSchemaDiscoverySpec_FetchEndpoint)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetUrl(), target.GetUrl()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetRetryDelay()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRetryDelay()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRetryDelay(), target.GetRetryDelay()) {
			return false
		}
	}

	if m.GetPullAttempts() != target.GetPullAttempts() {
		return false
	}

	if m.GetUseBackoff() != target.GetUseBackoff() {
		return false
	}

	return true
}
