// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/apimanagement/v2/api_schema_discovery.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_golang_protobuf_ptypes_duration "github.com/golang/protobuf/ptypes/duration"

	github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *ApiSchemaDiscoverySpec) Clone() proto.Message {
	var target *ApiSchemaDiscoverySpec
	if m == nil {
		return target
	}
	target = &ApiSchemaDiscoverySpec{}

	if m.GetServedBy() != nil {
		target.ServedBy = make([]*ServedBy, len(m.GetServedBy()))
		for idx, v := range m.GetServedBy() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ServedBy[idx] = h.Clone().(*ServedBy)
			} else {
				target.ServedBy[idx] = proto.Clone(v).(*ServedBy)
			}

		}
	}

	switch m.FetchSchemaType.(type) {

	case *ApiSchemaDiscoverySpec_Openapi:

		if h, ok := interface{}(m.GetOpenapi()).(clone.Cloner); ok {
			target.FetchSchemaType = &ApiSchemaDiscoverySpec_Openapi{
				Openapi: h.Clone().(*ApiSchemaDiscoverySpec_OpenAPI),
			}
		} else {
			target.FetchSchemaType = &ApiSchemaDiscoverySpec_Openapi{
				Openapi: proto.Clone(m.GetOpenapi()).(*ApiSchemaDiscoverySpec_OpenAPI),
			}
		}

	}

	return target
}

// Clone function
func (m *ApiSchemaDiscoveryStatus) Clone() proto.Message {
	var target *ApiSchemaDiscoveryStatus
	if m == nil {
		return target
	}
	target = &ApiSchemaDiscoveryStatus{}

	if h, ok := interface{}(m.GetCommon()).(clone.Cloner); ok {
		target.Common = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	} else {
		target.Common = proto.Clone(m.GetCommon()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	}

	target.OwnerWorkspace = m.GetOwnerWorkspace()

	return target
}

// Clone function
func (m *ApiSchemaDiscoveryReport) Clone() proto.Message {
	var target *ApiSchemaDiscoveryReport
	if m == nil {
		return target
	}
	target = &ApiSchemaDiscoveryReport{}

	target.OwnerWorkspace = m.GetOwnerWorkspace()

	return target
}

// Clone function
func (m *ApiSchemaDiscoverySpec_OpenAPI) Clone() proto.Message {
	var target *ApiSchemaDiscoverySpec_OpenAPI
	if m == nil {
		return target
	}
	target = &ApiSchemaDiscoverySpec_OpenAPI{}

	if h, ok := interface{}(m.GetFetchEndpoint()).(clone.Cloner); ok {
		target.FetchEndpoint = h.Clone().(*ApiSchemaDiscoverySpec_FetchEndpoint)
	} else {
		target.FetchEndpoint = proto.Clone(m.GetFetchEndpoint()).(*ApiSchemaDiscoverySpec_FetchEndpoint)
	}

	return target
}

// Clone function
func (m *ApiSchemaDiscoverySpec_FetchEndpoint) Clone() proto.Message {
	var target *ApiSchemaDiscoverySpec_FetchEndpoint
	if m == nil {
		return target
	}
	target = &ApiSchemaDiscoverySpec_FetchEndpoint{}

	target.Url = m.GetUrl()

	if h, ok := interface{}(m.GetRetryDelay()).(clone.Cloner); ok {
		target.RetryDelay = h.Clone().(*github_com_golang_protobuf_ptypes_duration.Duration)
	} else {
		target.RetryDelay = proto.Clone(m.GetRetryDelay()).(*github_com_golang_protobuf_ptypes_duration.Duration)
	}

	target.PullAttempts = m.GetPullAttempts()

	target.UseBackoff = m.GetUseBackoff()

	return target
}
