// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/apimanagement/v2/portal_group.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *PortalGroupSpec) Clone() proto.Message {
	var target *PortalGroupSpec
	if m == nil {
		return target
	}
	target = &PortalGroupSpec{}

	target.Name = m.GetName()

	target.Description = m.GetDescription()

	if m.GetMembership() != nil {
		target.Membership = make([]*Membership, len(m.GetMembership()))
		for idx, v := range m.GetMembership() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Membership[idx] = h.Clone().(*Membership)
			} else {
				target.Membership[idx] = proto.Clone(v).(*Membership)
			}

		}
	}

	if h, ok := interface{}(m.GetAccessLevel()).(clone.Cloner); ok {
		target.AccessLevel = h.Clone().(*PortalGroupSpec_AccessLevel)
	} else {
		target.AccessLevel = proto.Clone(m.GetAccessLevel()).(*PortalGroupSpec_AccessLevel)
	}

	return target
}

// Clone function
func (m *Membership) Clone() proto.Message {
	var target *Membership
	if m == nil {
		return target
	}
	target = &Membership{}

	if m.GetClaims() != nil {
		target.Claims = make([]*Claim, len(m.GetClaims()))
		for idx, v := range m.GetClaims() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Claims[idx] = h.Clone().(*Claim)
			} else {
				target.Claims[idx] = proto.Clone(v).(*Claim)
			}

		}
	}

	return target
}

// Clone function
func (m *Claim) Clone() proto.Message {
	var target *Claim
	if m == nil {
		return target
	}
	target = &Claim{}

	target.Key = m.GetKey()

	target.Value = m.GetValue()

	return target
}

// Clone function
func (m *PortalGroupStatus) Clone() proto.Message {
	var target *PortalGroupStatus
	if m == nil {
		return target
	}
	target = &PortalGroupStatus{}

	if h, ok := interface{}(m.GetCommon()).(clone.Cloner); ok {
		target.Common = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	} else {
		target.Common = proto.Clone(m.GetCommon()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	}

	target.OwnedByWorkspace = m.GetOwnedByWorkspace()

	return target
}

// Clone function
func (m *PortalGroupReport) Clone() proto.Message {
	var target *PortalGroupReport
	if m == nil {
		return target
	}
	target = &PortalGroupReport{}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			}

		}
	}

	target.OwnedByWorkspace = m.GetOwnedByWorkspace()

	return target
}

// Clone function
func (m *PortalGroupSpec_AccessLevel) Clone() proto.Message {
	var target *PortalGroupSpec_AccessLevel
	if m == nil {
		return target
	}
	target = &PortalGroupSpec_AccessLevel{}

	if m.GetApis() != nil {
		target.Apis = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectSelector, len(m.GetApis()))
		for idx, v := range m.GetApis() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Apis[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectSelector)
			} else {
				target.Apis[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectSelector)
			}

		}
	}

	if m.GetUsagePlans() != nil {
		target.UsagePlans = make([]string, len(m.GetUsagePlans()))
		for idx, v := range m.GetUsagePlans() {

			target.UsagePlans[idx] = v

		}
	}

	return target
}
