// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v2

import (
	"context"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the apimanagement.gloo.solo.io/v2 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the apimanagement.gloo.solo.io/v2 APIs
type Clientset interface {
	// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
	GraphQLStitchedSchemas() GraphQLStitchedSchemaClient
	// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
	GraphQLResolverMaps() GraphQLResolverMapClient
	// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
	GraphQLSchemas() GraphQLSchemaClient
	// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
	ApiDocs() ApiDocClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := SchemeBuilder.AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
func (c *clientSet) GraphQLStitchedSchemas() GraphQLStitchedSchemaClient {
	return NewGraphQLStitchedSchemaClient(c.client)
}

// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
func (c *clientSet) GraphQLResolverMaps() GraphQLResolverMapClient {
	return NewGraphQLResolverMapClient(c.client)
}

// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
func (c *clientSet) GraphQLSchemas() GraphQLSchemaClient {
	return NewGraphQLSchemaClient(c.client)
}

// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
func (c *clientSet) ApiDocs() ApiDocClient {
	return NewApiDocClient(c.client)
}

// Reader knows how to read and list GraphQLStitchedSchemas.
type GraphQLStitchedSchemaReader interface {
	// Get retrieves a GraphQLStitchedSchema for the given object key
	GetGraphQLStitchedSchema(ctx context.Context, key client.ObjectKey) (*GraphQLStitchedSchema, error)

	// List retrieves list of GraphQLStitchedSchemas for a given namespace and list options.
	ListGraphQLStitchedSchema(ctx context.Context, opts ...client.ListOption) (*GraphQLStitchedSchemaList, error)
}

// GraphQLStitchedSchemaTransitionFunction instructs the GraphQLStitchedSchemaWriter how to transition between an existing
// GraphQLStitchedSchema object and a desired on an Upsert
type GraphQLStitchedSchemaTransitionFunction func(existing, desired *GraphQLStitchedSchema) error

// Writer knows how to create, delete, and update GraphQLStitchedSchemas.
type GraphQLStitchedSchemaWriter interface {
	// Create saves the GraphQLStitchedSchema object.
	CreateGraphQLStitchedSchema(ctx context.Context, obj *GraphQLStitchedSchema, opts ...client.CreateOption) error

	// Delete deletes the GraphQLStitchedSchema object.
	DeleteGraphQLStitchedSchema(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given GraphQLStitchedSchema object.
	UpdateGraphQLStitchedSchema(ctx context.Context, obj *GraphQLStitchedSchema, opts ...client.UpdateOption) error

	// Patch patches the given GraphQLStitchedSchema object.
	PatchGraphQLStitchedSchema(ctx context.Context, obj *GraphQLStitchedSchema, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all GraphQLStitchedSchema objects matching the given options.
	DeleteAllOfGraphQLStitchedSchema(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the GraphQLStitchedSchema object.
	UpsertGraphQLStitchedSchema(ctx context.Context, obj *GraphQLStitchedSchema, transitionFuncs ...GraphQLStitchedSchemaTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a GraphQLStitchedSchema object.
type GraphQLStitchedSchemaStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given GraphQLStitchedSchema object.
	UpdateGraphQLStitchedSchemaStatus(ctx context.Context, obj *GraphQLStitchedSchema, opts ...client.UpdateOption) error

	// Patch patches the given GraphQLStitchedSchema object's subresource.
	PatchGraphQLStitchedSchemaStatus(ctx context.Context, obj *GraphQLStitchedSchema, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on GraphQLStitchedSchemas.
type GraphQLStitchedSchemaClient interface {
	GraphQLStitchedSchemaReader
	GraphQLStitchedSchemaWriter
	GraphQLStitchedSchemaStatusWriter
}

type graphQLStitchedSchemaClient struct {
	client client.Client
}

func NewGraphQLStitchedSchemaClient(client client.Client) *graphQLStitchedSchemaClient {
	return &graphQLStitchedSchemaClient{client: client}
}

func (c *graphQLStitchedSchemaClient) GetGraphQLStitchedSchema(ctx context.Context, key client.ObjectKey) (*GraphQLStitchedSchema, error) {
	obj := &GraphQLStitchedSchema{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *graphQLStitchedSchemaClient) ListGraphQLStitchedSchema(ctx context.Context, opts ...client.ListOption) (*GraphQLStitchedSchemaList, error) {
	list := &GraphQLStitchedSchemaList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *graphQLStitchedSchemaClient) CreateGraphQLStitchedSchema(ctx context.Context, obj *GraphQLStitchedSchema, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *graphQLStitchedSchemaClient) DeleteGraphQLStitchedSchema(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &GraphQLStitchedSchema{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *graphQLStitchedSchemaClient) UpdateGraphQLStitchedSchema(ctx context.Context, obj *GraphQLStitchedSchema, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *graphQLStitchedSchemaClient) PatchGraphQLStitchedSchema(ctx context.Context, obj *GraphQLStitchedSchema, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *graphQLStitchedSchemaClient) DeleteAllOfGraphQLStitchedSchema(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &GraphQLStitchedSchema{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *graphQLStitchedSchemaClient) UpsertGraphQLStitchedSchema(ctx context.Context, obj *GraphQLStitchedSchema, transitionFuncs ...GraphQLStitchedSchemaTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*GraphQLStitchedSchema), desired.(*GraphQLStitchedSchema)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *graphQLStitchedSchemaClient) UpdateGraphQLStitchedSchemaStatus(ctx context.Context, obj *GraphQLStitchedSchema, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *graphQLStitchedSchemaClient) PatchGraphQLStitchedSchemaStatus(ctx context.Context, obj *GraphQLStitchedSchema, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides GraphQLStitchedSchemaClients for multiple clusters.
type MulticlusterGraphQLStitchedSchemaClient interface {
	// Cluster returns a GraphQLStitchedSchemaClient for the given cluster
	Cluster(cluster string) (GraphQLStitchedSchemaClient, error)
}

type multiclusterGraphQLStitchedSchemaClient struct {
	client multicluster.Client
}

func NewMulticlusterGraphQLStitchedSchemaClient(client multicluster.Client) MulticlusterGraphQLStitchedSchemaClient {
	return &multiclusterGraphQLStitchedSchemaClient{client: client}
}

func (m *multiclusterGraphQLStitchedSchemaClient) Cluster(cluster string) (GraphQLStitchedSchemaClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewGraphQLStitchedSchemaClient(client), nil
}

// Reader knows how to read and list GraphQLResolverMaps.
type GraphQLResolverMapReader interface {
	// Get retrieves a GraphQLResolverMap for the given object key
	GetGraphQLResolverMap(ctx context.Context, key client.ObjectKey) (*GraphQLResolverMap, error)

	// List retrieves list of GraphQLResolverMaps for a given namespace and list options.
	ListGraphQLResolverMap(ctx context.Context, opts ...client.ListOption) (*GraphQLResolverMapList, error)
}

// GraphQLResolverMapTransitionFunction instructs the GraphQLResolverMapWriter how to transition between an existing
// GraphQLResolverMap object and a desired on an Upsert
type GraphQLResolverMapTransitionFunction func(existing, desired *GraphQLResolverMap) error

// Writer knows how to create, delete, and update GraphQLResolverMaps.
type GraphQLResolverMapWriter interface {
	// Create saves the GraphQLResolverMap object.
	CreateGraphQLResolverMap(ctx context.Context, obj *GraphQLResolverMap, opts ...client.CreateOption) error

	// Delete deletes the GraphQLResolverMap object.
	DeleteGraphQLResolverMap(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given GraphQLResolverMap object.
	UpdateGraphQLResolverMap(ctx context.Context, obj *GraphQLResolverMap, opts ...client.UpdateOption) error

	// Patch patches the given GraphQLResolverMap object.
	PatchGraphQLResolverMap(ctx context.Context, obj *GraphQLResolverMap, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all GraphQLResolverMap objects matching the given options.
	DeleteAllOfGraphQLResolverMap(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the GraphQLResolverMap object.
	UpsertGraphQLResolverMap(ctx context.Context, obj *GraphQLResolverMap, transitionFuncs ...GraphQLResolverMapTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a GraphQLResolverMap object.
type GraphQLResolverMapStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given GraphQLResolverMap object.
	UpdateGraphQLResolverMapStatus(ctx context.Context, obj *GraphQLResolverMap, opts ...client.UpdateOption) error

	// Patch patches the given GraphQLResolverMap object's subresource.
	PatchGraphQLResolverMapStatus(ctx context.Context, obj *GraphQLResolverMap, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on GraphQLResolverMaps.
type GraphQLResolverMapClient interface {
	GraphQLResolverMapReader
	GraphQLResolverMapWriter
	GraphQLResolverMapStatusWriter
}

type graphQLResolverMapClient struct {
	client client.Client
}

func NewGraphQLResolverMapClient(client client.Client) *graphQLResolverMapClient {
	return &graphQLResolverMapClient{client: client}
}

func (c *graphQLResolverMapClient) GetGraphQLResolverMap(ctx context.Context, key client.ObjectKey) (*GraphQLResolverMap, error) {
	obj := &GraphQLResolverMap{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *graphQLResolverMapClient) ListGraphQLResolverMap(ctx context.Context, opts ...client.ListOption) (*GraphQLResolverMapList, error) {
	list := &GraphQLResolverMapList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *graphQLResolverMapClient) CreateGraphQLResolverMap(ctx context.Context, obj *GraphQLResolverMap, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *graphQLResolverMapClient) DeleteGraphQLResolverMap(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &GraphQLResolverMap{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *graphQLResolverMapClient) UpdateGraphQLResolverMap(ctx context.Context, obj *GraphQLResolverMap, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *graphQLResolverMapClient) PatchGraphQLResolverMap(ctx context.Context, obj *GraphQLResolverMap, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *graphQLResolverMapClient) DeleteAllOfGraphQLResolverMap(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &GraphQLResolverMap{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *graphQLResolverMapClient) UpsertGraphQLResolverMap(ctx context.Context, obj *GraphQLResolverMap, transitionFuncs ...GraphQLResolverMapTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*GraphQLResolverMap), desired.(*GraphQLResolverMap)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *graphQLResolverMapClient) UpdateGraphQLResolverMapStatus(ctx context.Context, obj *GraphQLResolverMap, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *graphQLResolverMapClient) PatchGraphQLResolverMapStatus(ctx context.Context, obj *GraphQLResolverMap, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides GraphQLResolverMapClients for multiple clusters.
type MulticlusterGraphQLResolverMapClient interface {
	// Cluster returns a GraphQLResolverMapClient for the given cluster
	Cluster(cluster string) (GraphQLResolverMapClient, error)
}

type multiclusterGraphQLResolverMapClient struct {
	client multicluster.Client
}

func NewMulticlusterGraphQLResolverMapClient(client multicluster.Client) MulticlusterGraphQLResolverMapClient {
	return &multiclusterGraphQLResolverMapClient{client: client}
}

func (m *multiclusterGraphQLResolverMapClient) Cluster(cluster string) (GraphQLResolverMapClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewGraphQLResolverMapClient(client), nil
}

// Reader knows how to read and list GraphQLSchemas.
type GraphQLSchemaReader interface {
	// Get retrieves a GraphQLSchema for the given object key
	GetGraphQLSchema(ctx context.Context, key client.ObjectKey) (*GraphQLSchema, error)

	// List retrieves list of GraphQLSchemas for a given namespace and list options.
	ListGraphQLSchema(ctx context.Context, opts ...client.ListOption) (*GraphQLSchemaList, error)
}

// GraphQLSchemaTransitionFunction instructs the GraphQLSchemaWriter how to transition between an existing
// GraphQLSchema object and a desired on an Upsert
type GraphQLSchemaTransitionFunction func(existing, desired *GraphQLSchema) error

// Writer knows how to create, delete, and update GraphQLSchemas.
type GraphQLSchemaWriter interface {
	// Create saves the GraphQLSchema object.
	CreateGraphQLSchema(ctx context.Context, obj *GraphQLSchema, opts ...client.CreateOption) error

	// Delete deletes the GraphQLSchema object.
	DeleteGraphQLSchema(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given GraphQLSchema object.
	UpdateGraphQLSchema(ctx context.Context, obj *GraphQLSchema, opts ...client.UpdateOption) error

	// Patch patches the given GraphQLSchema object.
	PatchGraphQLSchema(ctx context.Context, obj *GraphQLSchema, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all GraphQLSchema objects matching the given options.
	DeleteAllOfGraphQLSchema(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the GraphQLSchema object.
	UpsertGraphQLSchema(ctx context.Context, obj *GraphQLSchema, transitionFuncs ...GraphQLSchemaTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a GraphQLSchema object.
type GraphQLSchemaStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given GraphQLSchema object.
	UpdateGraphQLSchemaStatus(ctx context.Context, obj *GraphQLSchema, opts ...client.UpdateOption) error

	// Patch patches the given GraphQLSchema object's subresource.
	PatchGraphQLSchemaStatus(ctx context.Context, obj *GraphQLSchema, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on GraphQLSchemas.
type GraphQLSchemaClient interface {
	GraphQLSchemaReader
	GraphQLSchemaWriter
	GraphQLSchemaStatusWriter
}

type graphQLSchemaClient struct {
	client client.Client
}

func NewGraphQLSchemaClient(client client.Client) *graphQLSchemaClient {
	return &graphQLSchemaClient{client: client}
}

func (c *graphQLSchemaClient) GetGraphQLSchema(ctx context.Context, key client.ObjectKey) (*GraphQLSchema, error) {
	obj := &GraphQLSchema{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *graphQLSchemaClient) ListGraphQLSchema(ctx context.Context, opts ...client.ListOption) (*GraphQLSchemaList, error) {
	list := &GraphQLSchemaList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *graphQLSchemaClient) CreateGraphQLSchema(ctx context.Context, obj *GraphQLSchema, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *graphQLSchemaClient) DeleteGraphQLSchema(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &GraphQLSchema{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *graphQLSchemaClient) UpdateGraphQLSchema(ctx context.Context, obj *GraphQLSchema, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *graphQLSchemaClient) PatchGraphQLSchema(ctx context.Context, obj *GraphQLSchema, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *graphQLSchemaClient) DeleteAllOfGraphQLSchema(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &GraphQLSchema{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *graphQLSchemaClient) UpsertGraphQLSchema(ctx context.Context, obj *GraphQLSchema, transitionFuncs ...GraphQLSchemaTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*GraphQLSchema), desired.(*GraphQLSchema)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *graphQLSchemaClient) UpdateGraphQLSchemaStatus(ctx context.Context, obj *GraphQLSchema, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *graphQLSchemaClient) PatchGraphQLSchemaStatus(ctx context.Context, obj *GraphQLSchema, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides GraphQLSchemaClients for multiple clusters.
type MulticlusterGraphQLSchemaClient interface {
	// Cluster returns a GraphQLSchemaClient for the given cluster
	Cluster(cluster string) (GraphQLSchemaClient, error)
}

type multiclusterGraphQLSchemaClient struct {
	client multicluster.Client
}

func NewMulticlusterGraphQLSchemaClient(client multicluster.Client) MulticlusterGraphQLSchemaClient {
	return &multiclusterGraphQLSchemaClient{client: client}
}

func (m *multiclusterGraphQLSchemaClient) Cluster(cluster string) (GraphQLSchemaClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewGraphQLSchemaClient(client), nil
}

// Reader knows how to read and list ApiDocs.
type ApiDocReader interface {
	// Get retrieves a ApiDoc for the given object key
	GetApiDoc(ctx context.Context, key client.ObjectKey) (*ApiDoc, error)

	// List retrieves list of ApiDocs for a given namespace and list options.
	ListApiDoc(ctx context.Context, opts ...client.ListOption) (*ApiDocList, error)
}

// ApiDocTransitionFunction instructs the ApiDocWriter how to transition between an existing
// ApiDoc object and a desired on an Upsert
type ApiDocTransitionFunction func(existing, desired *ApiDoc) error

// Writer knows how to create, delete, and update ApiDocs.
type ApiDocWriter interface {
	// Create saves the ApiDoc object.
	CreateApiDoc(ctx context.Context, obj *ApiDoc, opts ...client.CreateOption) error

	// Delete deletes the ApiDoc object.
	DeleteApiDoc(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given ApiDoc object.
	UpdateApiDoc(ctx context.Context, obj *ApiDoc, opts ...client.UpdateOption) error

	// Patch patches the given ApiDoc object.
	PatchApiDoc(ctx context.Context, obj *ApiDoc, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all ApiDoc objects matching the given options.
	DeleteAllOfApiDoc(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the ApiDoc object.
	UpsertApiDoc(ctx context.Context, obj *ApiDoc, transitionFuncs ...ApiDocTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a ApiDoc object.
type ApiDocStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given ApiDoc object.
	UpdateApiDocStatus(ctx context.Context, obj *ApiDoc, opts ...client.UpdateOption) error

	// Patch patches the given ApiDoc object's subresource.
	PatchApiDocStatus(ctx context.Context, obj *ApiDoc, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on ApiDocs.
type ApiDocClient interface {
	ApiDocReader
	ApiDocWriter
	ApiDocStatusWriter
}

type apiDocClient struct {
	client client.Client
}

func NewApiDocClient(client client.Client) *apiDocClient {
	return &apiDocClient{client: client}
}

func (c *apiDocClient) GetApiDoc(ctx context.Context, key client.ObjectKey) (*ApiDoc, error) {
	obj := &ApiDoc{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *apiDocClient) ListApiDoc(ctx context.Context, opts ...client.ListOption) (*ApiDocList, error) {
	list := &ApiDocList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *apiDocClient) CreateApiDoc(ctx context.Context, obj *ApiDoc, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *apiDocClient) DeleteApiDoc(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &ApiDoc{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *apiDocClient) UpdateApiDoc(ctx context.Context, obj *ApiDoc, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *apiDocClient) PatchApiDoc(ctx context.Context, obj *ApiDoc, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *apiDocClient) DeleteAllOfApiDoc(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &ApiDoc{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *apiDocClient) UpsertApiDoc(ctx context.Context, obj *ApiDoc, transitionFuncs ...ApiDocTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*ApiDoc), desired.(*ApiDoc)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *apiDocClient) UpdateApiDocStatus(ctx context.Context, obj *ApiDoc, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *apiDocClient) PatchApiDocStatus(ctx context.Context, obj *ApiDoc, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides ApiDocClients for multiple clusters.
type MulticlusterApiDocClient interface {
	// Cluster returns a ApiDocClient for the given cluster
	Cluster(cluster string) (ApiDocClient, error)
}

type multiclusterApiDocClient struct {
	client multicluster.Client
}

func NewMulticlusterApiDocClient(client multicluster.Client) MulticlusterApiDocClient {
	return &multiclusterApiDocClient{client: client}
}

func (m *multiclusterApiDocClient) Cluster(cluster string) (ApiDocClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewApiDocClient(client), nil
}
