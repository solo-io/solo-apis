// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v2

import (
	"context"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the apimanagement.gloo.solo.io/v2 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the apimanagement.gloo.solo.io/v2 APIs
type Clientset interface {
	// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
	GraphQLStitchedSchemas() GraphQLStitchedSchemaClient
	// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
	GraphQLResolverMaps() GraphQLResolverMapClient
	// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
	GraphQLSchemas() GraphQLSchemaClient
	// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
	ApiDocs() ApiDocClient
	// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
	Portals() PortalClient
	// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
	ApiProducts() ApiProductClient
	// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
	PortalGroups() PortalGroupClient
	// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
	ApiSchemaDiscoveries() ApiSchemaDiscoveryClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := SchemeBuilder.AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
func (c *clientSet) GraphQLStitchedSchemas() GraphQLStitchedSchemaClient {
	return NewGraphQLStitchedSchemaClient(c.client)
}

// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
func (c *clientSet) GraphQLResolverMaps() GraphQLResolverMapClient {
	return NewGraphQLResolverMapClient(c.client)
}

// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
func (c *clientSet) GraphQLSchemas() GraphQLSchemaClient {
	return NewGraphQLSchemaClient(c.client)
}

// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
func (c *clientSet) ApiDocs() ApiDocClient {
	return NewApiDocClient(c.client)
}

// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
func (c *clientSet) Portals() PortalClient {
	return NewPortalClient(c.client)
}

// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
func (c *clientSet) ApiProducts() ApiProductClient {
	return NewApiProductClient(c.client)
}

// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
func (c *clientSet) PortalGroups() PortalGroupClient {
	return NewPortalGroupClient(c.client)
}

// clienset for the apimanagement.gloo.solo.io/v2/v2 APIs
func (c *clientSet) ApiSchemaDiscoveries() ApiSchemaDiscoveryClient {
	return NewApiSchemaDiscoveryClient(c.client)
}

// Reader knows how to read and list GraphQLStitchedSchemas.
type GraphQLStitchedSchemaReader interface {
	// Get retrieves a GraphQLStitchedSchema for the given object key
	GetGraphQLStitchedSchema(ctx context.Context, key client.ObjectKey) (*GraphQLStitchedSchema, error)

	// List retrieves list of GraphQLStitchedSchemas for a given namespace and list options.
	ListGraphQLStitchedSchema(ctx context.Context, opts ...client.ListOption) (*GraphQLStitchedSchemaList, error)
}

// GraphQLStitchedSchemaTransitionFunction instructs the GraphQLStitchedSchemaWriter how to transition between an existing
// GraphQLStitchedSchema object and a desired on an Upsert
type GraphQLStitchedSchemaTransitionFunction func(existing, desired *GraphQLStitchedSchema) error

// Writer knows how to create, delete, and update GraphQLStitchedSchemas.
type GraphQLStitchedSchemaWriter interface {
	// Create saves the GraphQLStitchedSchema object.
	CreateGraphQLStitchedSchema(ctx context.Context, obj *GraphQLStitchedSchema, opts ...client.CreateOption) error

	// Delete deletes the GraphQLStitchedSchema object.
	DeleteGraphQLStitchedSchema(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given GraphQLStitchedSchema object.
	UpdateGraphQLStitchedSchema(ctx context.Context, obj *GraphQLStitchedSchema, opts ...client.UpdateOption) error

	// Patch patches the given GraphQLStitchedSchema object.
	PatchGraphQLStitchedSchema(ctx context.Context, obj *GraphQLStitchedSchema, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all GraphQLStitchedSchema objects matching the given options.
	DeleteAllOfGraphQLStitchedSchema(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the GraphQLStitchedSchema object.
	UpsertGraphQLStitchedSchema(ctx context.Context, obj *GraphQLStitchedSchema, transitionFuncs ...GraphQLStitchedSchemaTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a GraphQLStitchedSchema object.
type GraphQLStitchedSchemaStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given GraphQLStitchedSchema object.
	UpdateGraphQLStitchedSchemaStatus(ctx context.Context, obj *GraphQLStitchedSchema, opts ...client.SubResourceUpdateOption) error

	// Patch patches the given GraphQLStitchedSchema object's subresource.
	PatchGraphQLStitchedSchemaStatus(ctx context.Context, obj *GraphQLStitchedSchema, patch client.Patch, opts ...client.SubResourcePatchOption) error
}

// Client knows how to perform CRUD operations on GraphQLStitchedSchemas.
type GraphQLStitchedSchemaClient interface {
	GraphQLStitchedSchemaReader
	GraphQLStitchedSchemaWriter
	GraphQLStitchedSchemaStatusWriter
}

type graphQLStitchedSchemaClient struct {
	client client.Client
}

func NewGraphQLStitchedSchemaClient(client client.Client) *graphQLStitchedSchemaClient {
	return &graphQLStitchedSchemaClient{client: client}
}

func (c *graphQLStitchedSchemaClient) GetGraphQLStitchedSchema(ctx context.Context, key client.ObjectKey) (*GraphQLStitchedSchema, error) {
	obj := &GraphQLStitchedSchema{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *graphQLStitchedSchemaClient) ListGraphQLStitchedSchema(ctx context.Context, opts ...client.ListOption) (*GraphQLStitchedSchemaList, error) {
	list := &GraphQLStitchedSchemaList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *graphQLStitchedSchemaClient) CreateGraphQLStitchedSchema(ctx context.Context, obj *GraphQLStitchedSchema, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *graphQLStitchedSchemaClient) DeleteGraphQLStitchedSchema(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &GraphQLStitchedSchema{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *graphQLStitchedSchemaClient) UpdateGraphQLStitchedSchema(ctx context.Context, obj *GraphQLStitchedSchema, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *graphQLStitchedSchemaClient) PatchGraphQLStitchedSchema(ctx context.Context, obj *GraphQLStitchedSchema, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *graphQLStitchedSchemaClient) DeleteAllOfGraphQLStitchedSchema(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &GraphQLStitchedSchema{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *graphQLStitchedSchemaClient) UpsertGraphQLStitchedSchema(ctx context.Context, obj *GraphQLStitchedSchema, transitionFuncs ...GraphQLStitchedSchemaTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*GraphQLStitchedSchema), desired.(*GraphQLStitchedSchema)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *graphQLStitchedSchemaClient) UpdateGraphQLStitchedSchemaStatus(ctx context.Context, obj *GraphQLStitchedSchema, opts ...client.SubResourceUpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *graphQLStitchedSchemaClient) PatchGraphQLStitchedSchemaStatus(ctx context.Context, obj *GraphQLStitchedSchema, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides GraphQLStitchedSchemaClients for multiple clusters.
type MulticlusterGraphQLStitchedSchemaClient interface {
	// Cluster returns a GraphQLStitchedSchemaClient for the given cluster
	Cluster(cluster string) (GraphQLStitchedSchemaClient, error)
}

type multiclusterGraphQLStitchedSchemaClient struct {
	client multicluster.Client
}

func NewMulticlusterGraphQLStitchedSchemaClient(client multicluster.Client) MulticlusterGraphQLStitchedSchemaClient {
	return &multiclusterGraphQLStitchedSchemaClient{client: client}
}

func (m *multiclusterGraphQLStitchedSchemaClient) Cluster(cluster string) (GraphQLStitchedSchemaClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewGraphQLStitchedSchemaClient(client), nil
}

// Reader knows how to read and list GraphQLResolverMaps.
type GraphQLResolverMapReader interface {
	// Get retrieves a GraphQLResolverMap for the given object key
	GetGraphQLResolverMap(ctx context.Context, key client.ObjectKey) (*GraphQLResolverMap, error)

	// List retrieves list of GraphQLResolverMaps for a given namespace and list options.
	ListGraphQLResolverMap(ctx context.Context, opts ...client.ListOption) (*GraphQLResolverMapList, error)
}

// GraphQLResolverMapTransitionFunction instructs the GraphQLResolverMapWriter how to transition between an existing
// GraphQLResolverMap object and a desired on an Upsert
type GraphQLResolverMapTransitionFunction func(existing, desired *GraphQLResolverMap) error

// Writer knows how to create, delete, and update GraphQLResolverMaps.
type GraphQLResolverMapWriter interface {
	// Create saves the GraphQLResolverMap object.
	CreateGraphQLResolverMap(ctx context.Context, obj *GraphQLResolverMap, opts ...client.CreateOption) error

	// Delete deletes the GraphQLResolverMap object.
	DeleteGraphQLResolverMap(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given GraphQLResolverMap object.
	UpdateGraphQLResolverMap(ctx context.Context, obj *GraphQLResolverMap, opts ...client.UpdateOption) error

	// Patch patches the given GraphQLResolverMap object.
	PatchGraphQLResolverMap(ctx context.Context, obj *GraphQLResolverMap, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all GraphQLResolverMap objects matching the given options.
	DeleteAllOfGraphQLResolverMap(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the GraphQLResolverMap object.
	UpsertGraphQLResolverMap(ctx context.Context, obj *GraphQLResolverMap, transitionFuncs ...GraphQLResolverMapTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a GraphQLResolverMap object.
type GraphQLResolverMapStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given GraphQLResolverMap object.
	UpdateGraphQLResolverMapStatus(ctx context.Context, obj *GraphQLResolverMap, opts ...client.SubResourceUpdateOption) error

	// Patch patches the given GraphQLResolverMap object's subresource.
	PatchGraphQLResolverMapStatus(ctx context.Context, obj *GraphQLResolverMap, patch client.Patch, opts ...client.SubResourcePatchOption) error
}

// Client knows how to perform CRUD operations on GraphQLResolverMaps.
type GraphQLResolverMapClient interface {
	GraphQLResolverMapReader
	GraphQLResolverMapWriter
	GraphQLResolverMapStatusWriter
}

type graphQLResolverMapClient struct {
	client client.Client
}

func NewGraphQLResolverMapClient(client client.Client) *graphQLResolverMapClient {
	return &graphQLResolverMapClient{client: client}
}

func (c *graphQLResolverMapClient) GetGraphQLResolverMap(ctx context.Context, key client.ObjectKey) (*GraphQLResolverMap, error) {
	obj := &GraphQLResolverMap{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *graphQLResolverMapClient) ListGraphQLResolverMap(ctx context.Context, opts ...client.ListOption) (*GraphQLResolverMapList, error) {
	list := &GraphQLResolverMapList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *graphQLResolverMapClient) CreateGraphQLResolverMap(ctx context.Context, obj *GraphQLResolverMap, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *graphQLResolverMapClient) DeleteGraphQLResolverMap(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &GraphQLResolverMap{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *graphQLResolverMapClient) UpdateGraphQLResolverMap(ctx context.Context, obj *GraphQLResolverMap, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *graphQLResolverMapClient) PatchGraphQLResolverMap(ctx context.Context, obj *GraphQLResolverMap, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *graphQLResolverMapClient) DeleteAllOfGraphQLResolverMap(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &GraphQLResolverMap{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *graphQLResolverMapClient) UpsertGraphQLResolverMap(ctx context.Context, obj *GraphQLResolverMap, transitionFuncs ...GraphQLResolverMapTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*GraphQLResolverMap), desired.(*GraphQLResolverMap)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *graphQLResolverMapClient) UpdateGraphQLResolverMapStatus(ctx context.Context, obj *GraphQLResolverMap, opts ...client.SubResourceUpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *graphQLResolverMapClient) PatchGraphQLResolverMapStatus(ctx context.Context, obj *GraphQLResolverMap, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides GraphQLResolverMapClients for multiple clusters.
type MulticlusterGraphQLResolverMapClient interface {
	// Cluster returns a GraphQLResolverMapClient for the given cluster
	Cluster(cluster string) (GraphQLResolverMapClient, error)
}

type multiclusterGraphQLResolverMapClient struct {
	client multicluster.Client
}

func NewMulticlusterGraphQLResolverMapClient(client multicluster.Client) MulticlusterGraphQLResolverMapClient {
	return &multiclusterGraphQLResolverMapClient{client: client}
}

func (m *multiclusterGraphQLResolverMapClient) Cluster(cluster string) (GraphQLResolverMapClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewGraphQLResolverMapClient(client), nil
}

// Reader knows how to read and list GraphQLSchemas.
type GraphQLSchemaReader interface {
	// Get retrieves a GraphQLSchema for the given object key
	GetGraphQLSchema(ctx context.Context, key client.ObjectKey) (*GraphQLSchema, error)

	// List retrieves list of GraphQLSchemas for a given namespace and list options.
	ListGraphQLSchema(ctx context.Context, opts ...client.ListOption) (*GraphQLSchemaList, error)
}

// GraphQLSchemaTransitionFunction instructs the GraphQLSchemaWriter how to transition between an existing
// GraphQLSchema object and a desired on an Upsert
type GraphQLSchemaTransitionFunction func(existing, desired *GraphQLSchema) error

// Writer knows how to create, delete, and update GraphQLSchemas.
type GraphQLSchemaWriter interface {
	// Create saves the GraphQLSchema object.
	CreateGraphQLSchema(ctx context.Context, obj *GraphQLSchema, opts ...client.CreateOption) error

	// Delete deletes the GraphQLSchema object.
	DeleteGraphQLSchema(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given GraphQLSchema object.
	UpdateGraphQLSchema(ctx context.Context, obj *GraphQLSchema, opts ...client.UpdateOption) error

	// Patch patches the given GraphQLSchema object.
	PatchGraphQLSchema(ctx context.Context, obj *GraphQLSchema, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all GraphQLSchema objects matching the given options.
	DeleteAllOfGraphQLSchema(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the GraphQLSchema object.
	UpsertGraphQLSchema(ctx context.Context, obj *GraphQLSchema, transitionFuncs ...GraphQLSchemaTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a GraphQLSchema object.
type GraphQLSchemaStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given GraphQLSchema object.
	UpdateGraphQLSchemaStatus(ctx context.Context, obj *GraphQLSchema, opts ...client.SubResourceUpdateOption) error

	// Patch patches the given GraphQLSchema object's subresource.
	PatchGraphQLSchemaStatus(ctx context.Context, obj *GraphQLSchema, patch client.Patch, opts ...client.SubResourcePatchOption) error
}

// Client knows how to perform CRUD operations on GraphQLSchemas.
type GraphQLSchemaClient interface {
	GraphQLSchemaReader
	GraphQLSchemaWriter
	GraphQLSchemaStatusWriter
}

type graphQLSchemaClient struct {
	client client.Client
}

func NewGraphQLSchemaClient(client client.Client) *graphQLSchemaClient {
	return &graphQLSchemaClient{client: client}
}

func (c *graphQLSchemaClient) GetGraphQLSchema(ctx context.Context, key client.ObjectKey) (*GraphQLSchema, error) {
	obj := &GraphQLSchema{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *graphQLSchemaClient) ListGraphQLSchema(ctx context.Context, opts ...client.ListOption) (*GraphQLSchemaList, error) {
	list := &GraphQLSchemaList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *graphQLSchemaClient) CreateGraphQLSchema(ctx context.Context, obj *GraphQLSchema, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *graphQLSchemaClient) DeleteGraphQLSchema(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &GraphQLSchema{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *graphQLSchemaClient) UpdateGraphQLSchema(ctx context.Context, obj *GraphQLSchema, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *graphQLSchemaClient) PatchGraphQLSchema(ctx context.Context, obj *GraphQLSchema, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *graphQLSchemaClient) DeleteAllOfGraphQLSchema(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &GraphQLSchema{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *graphQLSchemaClient) UpsertGraphQLSchema(ctx context.Context, obj *GraphQLSchema, transitionFuncs ...GraphQLSchemaTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*GraphQLSchema), desired.(*GraphQLSchema)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *graphQLSchemaClient) UpdateGraphQLSchemaStatus(ctx context.Context, obj *GraphQLSchema, opts ...client.SubResourceUpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *graphQLSchemaClient) PatchGraphQLSchemaStatus(ctx context.Context, obj *GraphQLSchema, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides GraphQLSchemaClients for multiple clusters.
type MulticlusterGraphQLSchemaClient interface {
	// Cluster returns a GraphQLSchemaClient for the given cluster
	Cluster(cluster string) (GraphQLSchemaClient, error)
}

type multiclusterGraphQLSchemaClient struct {
	client multicluster.Client
}

func NewMulticlusterGraphQLSchemaClient(client multicluster.Client) MulticlusterGraphQLSchemaClient {
	return &multiclusterGraphQLSchemaClient{client: client}
}

func (m *multiclusterGraphQLSchemaClient) Cluster(cluster string) (GraphQLSchemaClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewGraphQLSchemaClient(client), nil
}

// Reader knows how to read and list ApiDocs.
type ApiDocReader interface {
	// Get retrieves a ApiDoc for the given object key
	GetApiDoc(ctx context.Context, key client.ObjectKey) (*ApiDoc, error)

	// List retrieves list of ApiDocs for a given namespace and list options.
	ListApiDoc(ctx context.Context, opts ...client.ListOption) (*ApiDocList, error)
}

// ApiDocTransitionFunction instructs the ApiDocWriter how to transition between an existing
// ApiDoc object and a desired on an Upsert
type ApiDocTransitionFunction func(existing, desired *ApiDoc) error

// Writer knows how to create, delete, and update ApiDocs.
type ApiDocWriter interface {
	// Create saves the ApiDoc object.
	CreateApiDoc(ctx context.Context, obj *ApiDoc, opts ...client.CreateOption) error

	// Delete deletes the ApiDoc object.
	DeleteApiDoc(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given ApiDoc object.
	UpdateApiDoc(ctx context.Context, obj *ApiDoc, opts ...client.UpdateOption) error

	// Patch patches the given ApiDoc object.
	PatchApiDoc(ctx context.Context, obj *ApiDoc, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all ApiDoc objects matching the given options.
	DeleteAllOfApiDoc(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the ApiDoc object.
	UpsertApiDoc(ctx context.Context, obj *ApiDoc, transitionFuncs ...ApiDocTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a ApiDoc object.
type ApiDocStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given ApiDoc object.
	UpdateApiDocStatus(ctx context.Context, obj *ApiDoc, opts ...client.SubResourceUpdateOption) error

	// Patch patches the given ApiDoc object's subresource.
	PatchApiDocStatus(ctx context.Context, obj *ApiDoc, patch client.Patch, opts ...client.SubResourcePatchOption) error
}

// Client knows how to perform CRUD operations on ApiDocs.
type ApiDocClient interface {
	ApiDocReader
	ApiDocWriter
	ApiDocStatusWriter
}

type apiDocClient struct {
	client client.Client
}

func NewApiDocClient(client client.Client) *apiDocClient {
	return &apiDocClient{client: client}
}

func (c *apiDocClient) GetApiDoc(ctx context.Context, key client.ObjectKey) (*ApiDoc, error) {
	obj := &ApiDoc{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *apiDocClient) ListApiDoc(ctx context.Context, opts ...client.ListOption) (*ApiDocList, error) {
	list := &ApiDocList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *apiDocClient) CreateApiDoc(ctx context.Context, obj *ApiDoc, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *apiDocClient) DeleteApiDoc(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &ApiDoc{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *apiDocClient) UpdateApiDoc(ctx context.Context, obj *ApiDoc, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *apiDocClient) PatchApiDoc(ctx context.Context, obj *ApiDoc, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *apiDocClient) DeleteAllOfApiDoc(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &ApiDoc{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *apiDocClient) UpsertApiDoc(ctx context.Context, obj *ApiDoc, transitionFuncs ...ApiDocTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*ApiDoc), desired.(*ApiDoc)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *apiDocClient) UpdateApiDocStatus(ctx context.Context, obj *ApiDoc, opts ...client.SubResourceUpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *apiDocClient) PatchApiDocStatus(ctx context.Context, obj *ApiDoc, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides ApiDocClients for multiple clusters.
type MulticlusterApiDocClient interface {
	// Cluster returns a ApiDocClient for the given cluster
	Cluster(cluster string) (ApiDocClient, error)
}

type multiclusterApiDocClient struct {
	client multicluster.Client
}

func NewMulticlusterApiDocClient(client multicluster.Client) MulticlusterApiDocClient {
	return &multiclusterApiDocClient{client: client}
}

func (m *multiclusterApiDocClient) Cluster(cluster string) (ApiDocClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewApiDocClient(client), nil
}

// Reader knows how to read and list Portals.
type PortalReader interface {
	// Get retrieves a Portal for the given object key
	GetPortal(ctx context.Context, key client.ObjectKey) (*Portal, error)

	// List retrieves list of Portals for a given namespace and list options.
	ListPortal(ctx context.Context, opts ...client.ListOption) (*PortalList, error)
}

// PortalTransitionFunction instructs the PortalWriter how to transition between an existing
// Portal object and a desired on an Upsert
type PortalTransitionFunction func(existing, desired *Portal) error

// Writer knows how to create, delete, and update Portals.
type PortalWriter interface {
	// Create saves the Portal object.
	CreatePortal(ctx context.Context, obj *Portal, opts ...client.CreateOption) error

	// Delete deletes the Portal object.
	DeletePortal(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given Portal object.
	UpdatePortal(ctx context.Context, obj *Portal, opts ...client.UpdateOption) error

	// Patch patches the given Portal object.
	PatchPortal(ctx context.Context, obj *Portal, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all Portal objects matching the given options.
	DeleteAllOfPortal(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the Portal object.
	UpsertPortal(ctx context.Context, obj *Portal, transitionFuncs ...PortalTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a Portal object.
type PortalStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given Portal object.
	UpdatePortalStatus(ctx context.Context, obj *Portal, opts ...client.SubResourceUpdateOption) error

	// Patch patches the given Portal object's subresource.
	PatchPortalStatus(ctx context.Context, obj *Portal, patch client.Patch, opts ...client.SubResourcePatchOption) error
}

// Client knows how to perform CRUD operations on Portals.
type PortalClient interface {
	PortalReader
	PortalWriter
	PortalStatusWriter
}

type portalClient struct {
	client client.Client
}

func NewPortalClient(client client.Client) *portalClient {
	return &portalClient{client: client}
}

func (c *portalClient) GetPortal(ctx context.Context, key client.ObjectKey) (*Portal, error) {
	obj := &Portal{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *portalClient) ListPortal(ctx context.Context, opts ...client.ListOption) (*PortalList, error) {
	list := &PortalList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *portalClient) CreatePortal(ctx context.Context, obj *Portal, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *portalClient) DeletePortal(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &Portal{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *portalClient) UpdatePortal(ctx context.Context, obj *Portal, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *portalClient) PatchPortal(ctx context.Context, obj *Portal, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *portalClient) DeleteAllOfPortal(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &Portal{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *portalClient) UpsertPortal(ctx context.Context, obj *Portal, transitionFuncs ...PortalTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*Portal), desired.(*Portal)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *portalClient) UpdatePortalStatus(ctx context.Context, obj *Portal, opts ...client.SubResourceUpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *portalClient) PatchPortalStatus(ctx context.Context, obj *Portal, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides PortalClients for multiple clusters.
type MulticlusterPortalClient interface {
	// Cluster returns a PortalClient for the given cluster
	Cluster(cluster string) (PortalClient, error)
}

type multiclusterPortalClient struct {
	client multicluster.Client
}

func NewMulticlusterPortalClient(client multicluster.Client) MulticlusterPortalClient {
	return &multiclusterPortalClient{client: client}
}

func (m *multiclusterPortalClient) Cluster(cluster string) (PortalClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewPortalClient(client), nil
}

// Reader knows how to read and list ApiProducts.
type ApiProductReader interface {
	// Get retrieves a ApiProduct for the given object key
	GetApiProduct(ctx context.Context, key client.ObjectKey) (*ApiProduct, error)

	// List retrieves list of ApiProducts for a given namespace and list options.
	ListApiProduct(ctx context.Context, opts ...client.ListOption) (*ApiProductList, error)
}

// ApiProductTransitionFunction instructs the ApiProductWriter how to transition between an existing
// ApiProduct object and a desired on an Upsert
type ApiProductTransitionFunction func(existing, desired *ApiProduct) error

// Writer knows how to create, delete, and update ApiProducts.
type ApiProductWriter interface {
	// Create saves the ApiProduct object.
	CreateApiProduct(ctx context.Context, obj *ApiProduct, opts ...client.CreateOption) error

	// Delete deletes the ApiProduct object.
	DeleteApiProduct(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given ApiProduct object.
	UpdateApiProduct(ctx context.Context, obj *ApiProduct, opts ...client.UpdateOption) error

	// Patch patches the given ApiProduct object.
	PatchApiProduct(ctx context.Context, obj *ApiProduct, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all ApiProduct objects matching the given options.
	DeleteAllOfApiProduct(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the ApiProduct object.
	UpsertApiProduct(ctx context.Context, obj *ApiProduct, transitionFuncs ...ApiProductTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a ApiProduct object.
type ApiProductStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given ApiProduct object.
	UpdateApiProductStatus(ctx context.Context, obj *ApiProduct, opts ...client.SubResourceUpdateOption) error

	// Patch patches the given ApiProduct object's subresource.
	PatchApiProductStatus(ctx context.Context, obj *ApiProduct, patch client.Patch, opts ...client.SubResourcePatchOption) error
}

// Client knows how to perform CRUD operations on ApiProducts.
type ApiProductClient interface {
	ApiProductReader
	ApiProductWriter
	ApiProductStatusWriter
}

type apiProductClient struct {
	client client.Client
}

func NewApiProductClient(client client.Client) *apiProductClient {
	return &apiProductClient{client: client}
}

func (c *apiProductClient) GetApiProduct(ctx context.Context, key client.ObjectKey) (*ApiProduct, error) {
	obj := &ApiProduct{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *apiProductClient) ListApiProduct(ctx context.Context, opts ...client.ListOption) (*ApiProductList, error) {
	list := &ApiProductList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *apiProductClient) CreateApiProduct(ctx context.Context, obj *ApiProduct, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *apiProductClient) DeleteApiProduct(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &ApiProduct{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *apiProductClient) UpdateApiProduct(ctx context.Context, obj *ApiProduct, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *apiProductClient) PatchApiProduct(ctx context.Context, obj *ApiProduct, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *apiProductClient) DeleteAllOfApiProduct(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &ApiProduct{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *apiProductClient) UpsertApiProduct(ctx context.Context, obj *ApiProduct, transitionFuncs ...ApiProductTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*ApiProduct), desired.(*ApiProduct)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *apiProductClient) UpdateApiProductStatus(ctx context.Context, obj *ApiProduct, opts ...client.SubResourceUpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *apiProductClient) PatchApiProductStatus(ctx context.Context, obj *ApiProduct, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides ApiProductClients for multiple clusters.
type MulticlusterApiProductClient interface {
	// Cluster returns a ApiProductClient for the given cluster
	Cluster(cluster string) (ApiProductClient, error)
}

type multiclusterApiProductClient struct {
	client multicluster.Client
}

func NewMulticlusterApiProductClient(client multicluster.Client) MulticlusterApiProductClient {
	return &multiclusterApiProductClient{client: client}
}

func (m *multiclusterApiProductClient) Cluster(cluster string) (ApiProductClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewApiProductClient(client), nil
}

// Reader knows how to read and list PortalGroups.
type PortalGroupReader interface {
	// Get retrieves a PortalGroup for the given object key
	GetPortalGroup(ctx context.Context, key client.ObjectKey) (*PortalGroup, error)

	// List retrieves list of PortalGroups for a given namespace and list options.
	ListPortalGroup(ctx context.Context, opts ...client.ListOption) (*PortalGroupList, error)
}

// PortalGroupTransitionFunction instructs the PortalGroupWriter how to transition between an existing
// PortalGroup object and a desired on an Upsert
type PortalGroupTransitionFunction func(existing, desired *PortalGroup) error

// Writer knows how to create, delete, and update PortalGroups.
type PortalGroupWriter interface {
	// Create saves the PortalGroup object.
	CreatePortalGroup(ctx context.Context, obj *PortalGroup, opts ...client.CreateOption) error

	// Delete deletes the PortalGroup object.
	DeletePortalGroup(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given PortalGroup object.
	UpdatePortalGroup(ctx context.Context, obj *PortalGroup, opts ...client.UpdateOption) error

	// Patch patches the given PortalGroup object.
	PatchPortalGroup(ctx context.Context, obj *PortalGroup, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all PortalGroup objects matching the given options.
	DeleteAllOfPortalGroup(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the PortalGroup object.
	UpsertPortalGroup(ctx context.Context, obj *PortalGroup, transitionFuncs ...PortalGroupTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a PortalGroup object.
type PortalGroupStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given PortalGroup object.
	UpdatePortalGroupStatus(ctx context.Context, obj *PortalGroup, opts ...client.SubResourceUpdateOption) error

	// Patch patches the given PortalGroup object's subresource.
	PatchPortalGroupStatus(ctx context.Context, obj *PortalGroup, patch client.Patch, opts ...client.SubResourcePatchOption) error
}

// Client knows how to perform CRUD operations on PortalGroups.
type PortalGroupClient interface {
	PortalGroupReader
	PortalGroupWriter
	PortalGroupStatusWriter
}

type portalGroupClient struct {
	client client.Client
}

func NewPortalGroupClient(client client.Client) *portalGroupClient {
	return &portalGroupClient{client: client}
}

func (c *portalGroupClient) GetPortalGroup(ctx context.Context, key client.ObjectKey) (*PortalGroup, error) {
	obj := &PortalGroup{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *portalGroupClient) ListPortalGroup(ctx context.Context, opts ...client.ListOption) (*PortalGroupList, error) {
	list := &PortalGroupList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *portalGroupClient) CreatePortalGroup(ctx context.Context, obj *PortalGroup, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *portalGroupClient) DeletePortalGroup(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &PortalGroup{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *portalGroupClient) UpdatePortalGroup(ctx context.Context, obj *PortalGroup, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *portalGroupClient) PatchPortalGroup(ctx context.Context, obj *PortalGroup, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *portalGroupClient) DeleteAllOfPortalGroup(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &PortalGroup{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *portalGroupClient) UpsertPortalGroup(ctx context.Context, obj *PortalGroup, transitionFuncs ...PortalGroupTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*PortalGroup), desired.(*PortalGroup)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *portalGroupClient) UpdatePortalGroupStatus(ctx context.Context, obj *PortalGroup, opts ...client.SubResourceUpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *portalGroupClient) PatchPortalGroupStatus(ctx context.Context, obj *PortalGroup, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides PortalGroupClients for multiple clusters.
type MulticlusterPortalGroupClient interface {
	// Cluster returns a PortalGroupClient for the given cluster
	Cluster(cluster string) (PortalGroupClient, error)
}

type multiclusterPortalGroupClient struct {
	client multicluster.Client
}

func NewMulticlusterPortalGroupClient(client multicluster.Client) MulticlusterPortalGroupClient {
	return &multiclusterPortalGroupClient{client: client}
}

func (m *multiclusterPortalGroupClient) Cluster(cluster string) (PortalGroupClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewPortalGroupClient(client), nil
}

// Reader knows how to read and list ApiSchemaDiscoverys.
type ApiSchemaDiscoveryReader interface {
	// Get retrieves a ApiSchemaDiscovery for the given object key
	GetApiSchemaDiscovery(ctx context.Context, key client.ObjectKey) (*ApiSchemaDiscovery, error)

	// List retrieves list of ApiSchemaDiscoverys for a given namespace and list options.
	ListApiSchemaDiscovery(ctx context.Context, opts ...client.ListOption) (*ApiSchemaDiscoveryList, error)
}

// ApiSchemaDiscoveryTransitionFunction instructs the ApiSchemaDiscoveryWriter how to transition between an existing
// ApiSchemaDiscovery object and a desired on an Upsert
type ApiSchemaDiscoveryTransitionFunction func(existing, desired *ApiSchemaDiscovery) error

// Writer knows how to create, delete, and update ApiSchemaDiscoverys.
type ApiSchemaDiscoveryWriter interface {
	// Create saves the ApiSchemaDiscovery object.
	CreateApiSchemaDiscovery(ctx context.Context, obj *ApiSchemaDiscovery, opts ...client.CreateOption) error

	// Delete deletes the ApiSchemaDiscovery object.
	DeleteApiSchemaDiscovery(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given ApiSchemaDiscovery object.
	UpdateApiSchemaDiscovery(ctx context.Context, obj *ApiSchemaDiscovery, opts ...client.UpdateOption) error

	// Patch patches the given ApiSchemaDiscovery object.
	PatchApiSchemaDiscovery(ctx context.Context, obj *ApiSchemaDiscovery, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all ApiSchemaDiscovery objects matching the given options.
	DeleteAllOfApiSchemaDiscovery(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the ApiSchemaDiscovery object.
	UpsertApiSchemaDiscovery(ctx context.Context, obj *ApiSchemaDiscovery, transitionFuncs ...ApiSchemaDiscoveryTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a ApiSchemaDiscovery object.
type ApiSchemaDiscoveryStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given ApiSchemaDiscovery object.
	UpdateApiSchemaDiscoveryStatus(ctx context.Context, obj *ApiSchemaDiscovery, opts ...client.SubResourceUpdateOption) error

	// Patch patches the given ApiSchemaDiscovery object's subresource.
	PatchApiSchemaDiscoveryStatus(ctx context.Context, obj *ApiSchemaDiscovery, patch client.Patch, opts ...client.SubResourcePatchOption) error
}

// Client knows how to perform CRUD operations on ApiSchemaDiscoverys.
type ApiSchemaDiscoveryClient interface {
	ApiSchemaDiscoveryReader
	ApiSchemaDiscoveryWriter
	ApiSchemaDiscoveryStatusWriter
}

type apiSchemaDiscoveryClient struct {
	client client.Client
}

func NewApiSchemaDiscoveryClient(client client.Client) *apiSchemaDiscoveryClient {
	return &apiSchemaDiscoveryClient{client: client}
}

func (c *apiSchemaDiscoveryClient) GetApiSchemaDiscovery(ctx context.Context, key client.ObjectKey) (*ApiSchemaDiscovery, error) {
	obj := &ApiSchemaDiscovery{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *apiSchemaDiscoveryClient) ListApiSchemaDiscovery(ctx context.Context, opts ...client.ListOption) (*ApiSchemaDiscoveryList, error) {
	list := &ApiSchemaDiscoveryList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *apiSchemaDiscoveryClient) CreateApiSchemaDiscovery(ctx context.Context, obj *ApiSchemaDiscovery, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *apiSchemaDiscoveryClient) DeleteApiSchemaDiscovery(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &ApiSchemaDiscovery{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *apiSchemaDiscoveryClient) UpdateApiSchemaDiscovery(ctx context.Context, obj *ApiSchemaDiscovery, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *apiSchemaDiscoveryClient) PatchApiSchemaDiscovery(ctx context.Context, obj *ApiSchemaDiscovery, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *apiSchemaDiscoveryClient) DeleteAllOfApiSchemaDiscovery(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &ApiSchemaDiscovery{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *apiSchemaDiscoveryClient) UpsertApiSchemaDiscovery(ctx context.Context, obj *ApiSchemaDiscovery, transitionFuncs ...ApiSchemaDiscoveryTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*ApiSchemaDiscovery), desired.(*ApiSchemaDiscovery)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *apiSchemaDiscoveryClient) UpdateApiSchemaDiscoveryStatus(ctx context.Context, obj *ApiSchemaDiscovery, opts ...client.SubResourceUpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *apiSchemaDiscoveryClient) PatchApiSchemaDiscoveryStatus(ctx context.Context, obj *ApiSchemaDiscovery, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides ApiSchemaDiscoveryClients for multiple clusters.
type MulticlusterApiSchemaDiscoveryClient interface {
	// Cluster returns a ApiSchemaDiscoveryClient for the given cluster
	Cluster(cluster string) (ApiSchemaDiscoveryClient, error)
}

type multiclusterApiSchemaDiscoveryClient struct {
	client multicluster.Client
}

func NewMulticlusterApiSchemaDiscoveryClient(client multicluster.Client) MulticlusterApiSchemaDiscoveryClient {
	return &multiclusterApiSchemaDiscoveryClient{client: client}
}

func (m *multiclusterApiSchemaDiscoveryClient) Cluster(cluster string) (ApiSchemaDiscoveryClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewApiSchemaDiscoveryClient(client), nil
}
