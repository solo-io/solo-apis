// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/apimanagement/v2/graphql_schema.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_golang_protobuf_ptypes_duration "github.com/golang/protobuf/ptypes/duration"

	github_com_golang_protobuf_ptypes_struct "github.com/golang/protobuf/ptypes/struct"

	github_com_golang_protobuf_ptypes_wrappers "github.com/golang/protobuf/ptypes/wrappers"

	github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"

	github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *GraphQLSchemaSpec) Clone() proto.Message {
	var target *GraphQLSchemaSpec
	if m == nil {
		return target
	}
	target = &GraphQLSchemaSpec{}

	if h, ok := interface{}(m.GetSchemaRef()).(clone.Cloner); ok {
		target.SchemaRef = h.Clone().(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ClusterObjectRef)
	} else {
		target.SchemaRef = proto.Clone(m.GetSchemaRef()).(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ClusterObjectRef)
	}

	switch m.GraphqlType.(type) {

	case *GraphQLSchemaSpec_Proxied:

		if h, ok := interface{}(m.GetProxied()).(clone.Cloner); ok {
			target.GraphqlType = &GraphQLSchemaSpec_Proxied{
				Proxied: h.Clone().(*GraphQLSchemaSpec_ProxiedGraphQL),
			}
		} else {
			target.GraphqlType = &GraphQLSchemaSpec_Proxied{
				Proxied: proto.Clone(m.GetProxied()).(*GraphQLSchemaSpec_ProxiedGraphQL),
			}
		}

	case *GraphQLSchemaSpec_Resolved:

		if h, ok := interface{}(m.GetResolved()).(clone.Cloner); ok {
			target.GraphqlType = &GraphQLSchemaSpec_Resolved{
				Resolved: h.Clone().(*GraphQLSchemaSpec_ResolvedGraphQL),
			}
		} else {
			target.GraphqlType = &GraphQLSchemaSpec_Resolved{
				Resolved: proto.Clone(m.GetResolved()).(*GraphQLSchemaSpec_ResolvedGraphQL),
			}
		}

	}

	return target
}

// Clone function
func (m *GraphQLSchemaStatus) Clone() proto.Message {
	var target *GraphQLSchemaStatus
	if m == nil {
		return target
	}
	target = &GraphQLSchemaStatus{}

	if h, ok := interface{}(m.GetCommon()).(clone.Cloner); ok {
		target.Common = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	} else {
		target.Common = proto.Clone(m.GetCommon()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	}

	target.OwnedByWorkspace = m.GetOwnedByWorkspace()

	return target
}

// Clone function
func (m *GraphQLSchemaReport) Clone() proto.Message {
	var target *GraphQLSchemaReport
	if m == nil {
		return target
	}
	target = &GraphQLSchemaReport{}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			}

		}
	}

	target.OwnerWorkspace = m.GetOwnerWorkspace()

	return target
}

// Clone function
func (m *GraphQLSchemaSpec_ResolvedGraphQL) Clone() proto.Message {
	var target *GraphQLSchemaSpec_ResolvedGraphQL
	if m == nil {
		return target
	}
	target = &GraphQLSchemaSpec_ResolvedGraphQL{}

	if m.GetResolverMapRefs() != nil {
		target.ResolverMapRefs = make([]*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ClusterObjectRef, len(m.GetResolverMapRefs()))
		for idx, v := range m.GetResolverMapRefs() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ResolverMapRefs[idx] = h.Clone().(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ClusterObjectRef)
			} else {
				target.ResolverMapRefs[idx] = proto.Clone(v).(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ClusterObjectRef)
			}

		}
	}

	if h, ok := interface{}(m.GetOptions()).(clone.Cloner); ok {
		target.Options = h.Clone().(*GraphQLSchemaSpec_ResolvedGraphQL_Options)
	} else {
		target.Options = proto.Clone(m.GetOptions()).(*GraphQLSchemaSpec_ResolvedGraphQL_Options)
	}

	return target
}

// Clone function
func (m *GraphQLSchemaSpec_ProxiedGraphQL) Clone() proto.Message {
	var target *GraphQLSchemaSpec_ProxiedGraphQL
	if m == nil {
		return target
	}
	target = &GraphQLSchemaSpec_ProxiedGraphQL{}

	if m.GetGraphqlServers() != nil {
		target.GraphqlServers = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.DestinationReference, len(m.GetGraphqlServers()))
		for idx, v := range m.GetGraphqlServers() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.GraphqlServers[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.DestinationReference)
			} else {
				target.GraphqlServers[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.DestinationReference)
			}

		}
	}

	if m.GetVariables() != nil {
		target.Variables = make(map[string]*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction, len(m.GetVariables()))
		for k, v := range m.GetVariables() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Variables[k] = h.Clone().(*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction)
			} else {
				target.Variables[k] = proto.Clone(v).(*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction)
			}

		}
	}

	if m.GetHeaders() != nil {
		target.Headers = make(map[string]*VariableTransformation, len(m.GetHeaders()))
		for k, v := range m.GetHeaders() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Headers[k] = h.Clone().(*VariableTransformation)
			} else {
				target.Headers[k] = proto.Clone(v).(*VariableTransformation)
			}

		}
	}

	if m.GetQueryParams() != nil {
		target.QueryParams = make(map[string]*VariableTransformation, len(m.GetQueryParams()))
		for k, v := range m.GetQueryParams() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.QueryParams[k] = h.Clone().(*VariableTransformation)
			} else {
				target.QueryParams[k] = proto.Clone(v).(*VariableTransformation)
			}

		}
	}

	target.SpanName = m.GetSpanName()

	if h, ok := interface{}(m.GetTimeout()).(clone.Cloner); ok {
		target.Timeout = h.Clone().(*github_com_golang_protobuf_ptypes_duration.Duration)
	} else {
		target.Timeout = proto.Clone(m.GetTimeout()).(*github_com_golang_protobuf_ptypes_duration.Duration)
	}

	if h, ok := interface{}(m.GetOptions()).(clone.Cloner); ok {
		target.Options = h.Clone().(*GraphQLSchemaSpec_ProxiedGraphQL_Options)
	} else {
		target.Options = proto.Clone(m.GetOptions()).(*GraphQLSchemaSpec_ProxiedGraphQL_Options)
	}

	return target
}

// Clone function
func (m *GraphQLSchemaSpec_ResolvedGraphQL_Options) Clone() proto.Message {
	var target *GraphQLSchemaSpec_ResolvedGraphQL_Options
	if m == nil {
		return target
	}
	target = &GraphQLSchemaSpec_ResolvedGraphQL_Options{}

	if h, ok := interface{}(m.GetMaxDepth()).(clone.Cloner); ok {
		target.MaxDepth = h.Clone().(*github_com_golang_protobuf_ptypes_wrappers.UInt32Value)
	} else {
		target.MaxDepth = proto.Clone(m.GetMaxDepth()).(*github_com_golang_protobuf_ptypes_wrappers.UInt32Value)
	}

	target.EnableIntrospection = m.GetEnableIntrospection()

	return target
}

// Clone function
func (m *GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction) Clone() proto.Message {
	var target *GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction
	if m == nil {
		return target
	}
	target = &GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction{}

	switch m.Extraction.(type) {

	case *GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_DynamicMetadata:

		if h, ok := interface{}(m.GetDynamicMetadata()).(clone.Cloner); ok {
			target.Extraction = &GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_DynamicMetadata{
				DynamicMetadata: h.Clone().(*DynamicMetadataExtraction),
			}
		} else {
			target.Extraction = &GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_DynamicMetadata{
				DynamicMetadata: proto.Clone(m.GetDynamicMetadata()).(*DynamicMetadataExtraction),
			}
		}

	case *GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_RequestHeader:

		target.Extraction = &GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_RequestHeader{
			RequestHeader: m.GetRequestHeader(),
		}

	case *GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_Json:

		if h, ok := interface{}(m.GetJson()).(clone.Cloner); ok {
			target.Extraction = &GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_Json{
				Json: h.Clone().(*github_com_golang_protobuf_ptypes_struct.Value),
			}
		} else {
			target.Extraction = &GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_Json{
				Json: proto.Clone(m.GetJson()).(*github_com_golang_protobuf_ptypes_struct.Value),
			}
		}

	}

	return target
}

// Clone function
func (m *GraphQLSchemaSpec_ProxiedGraphQL_Options) Clone() proto.Message {
	var target *GraphQLSchemaSpec_ProxiedGraphQL_Options
	if m == nil {
		return target
	}
	target = &GraphQLSchemaSpec_ProxiedGraphQL_Options{}

	target.AllowIntrospection = m.GetAllowIntrospection()

	return target
}
