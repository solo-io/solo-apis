// Code generated by MockGen. DO NOT EDIT.
// Source: ./sets.go

// Package mock_v2sets is a generated GoMock package.
package mock_v2sets

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v2 "github.com/solo-io/solo-apis/client-go/apimanagement.gloo.solo.io/v2"
	v2sets "github.com/solo-io/solo-apis/client-go/apimanagement.gloo.solo.io/v2/sets"
	sets "github.com/solo-io/skv2/contrib/pkg/sets"
	ezkube "github.com/solo-io/skv2/pkg/ezkube"
	sets0 "k8s.io/apimachinery/pkg/util/sets"
)

// MockGraphQLStitchedSchemaSet is a mock of GraphQLStitchedSchemaSet interface.
type MockGraphQLStitchedSchemaSet struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLStitchedSchemaSetMockRecorder
}

// MockGraphQLStitchedSchemaSetMockRecorder is the mock recorder for MockGraphQLStitchedSchemaSet.
type MockGraphQLStitchedSchemaSetMockRecorder struct {
	mock *MockGraphQLStitchedSchemaSet
}

// NewMockGraphQLStitchedSchemaSet creates a new mock instance.
func NewMockGraphQLStitchedSchemaSet(ctrl *gomock.Controller) *MockGraphQLStitchedSchemaSet {
	mock := &MockGraphQLStitchedSchemaSet{ctrl: ctrl}
	mock.recorder = &MockGraphQLStitchedSchemaSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLStitchedSchemaSet) EXPECT() *MockGraphQLStitchedSchemaSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockGraphQLStitchedSchemaSet) Clone() v2sets.GraphQLStitchedSchemaSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.GraphQLStitchedSchemaSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockGraphQLStitchedSchemaSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGraphQLStitchedSchemaSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockGraphQLStitchedSchemaSet) Delete(graphQLStitchedSchema ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", graphQLStitchedSchema)
}

// Delete indicates an expected call of Delete.
func (mr *MockGraphQLStitchedSchemaSetMockRecorder) Delete(graphQLStitchedSchema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGraphQLStitchedSchemaSet)(nil).Delete), graphQLStitchedSchema)
}

// Delta mocks base method.
func (m *MockGraphQLStitchedSchemaSet) Delta(newSet v2sets.GraphQLStitchedSchemaSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockGraphQLStitchedSchemaSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockGraphQLStitchedSchemaSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockGraphQLStitchedSchemaSet) Difference(set v2sets.GraphQLStitchedSchemaSet) v2sets.GraphQLStitchedSchemaSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.GraphQLStitchedSchemaSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockGraphQLStitchedSchemaSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockGraphQLStitchedSchemaSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockGraphQLStitchedSchemaSet) Equal(graphQLStitchedSchemaSet v2sets.GraphQLStitchedSchemaSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", graphQLStitchedSchemaSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockGraphQLStitchedSchemaSetMockRecorder) Equal(graphQLStitchedSchemaSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockGraphQLStitchedSchemaSet)(nil).Equal), graphQLStitchedSchemaSet)
}

// Find mocks base method.
func (m *MockGraphQLStitchedSchemaSet) Find(id ezkube.ResourceId) (*v2.GraphQLStitchedSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.GraphQLStitchedSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockGraphQLStitchedSchemaSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockGraphQLStitchedSchemaSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockGraphQLStitchedSchemaSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockGraphQLStitchedSchemaSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockGraphQLStitchedSchemaSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockGraphQLStitchedSchemaSet) Has(graphQLStitchedSchema ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", graphQLStitchedSchema)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockGraphQLStitchedSchemaSetMockRecorder) Has(graphQLStitchedSchema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockGraphQLStitchedSchemaSet)(nil).Has), graphQLStitchedSchema)
}

// Insert mocks base method.
func (m *MockGraphQLStitchedSchemaSet) Insert(graphQLStitchedSchema ...*v2.GraphQLStitchedSchema) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range graphQLStitchedSchema {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockGraphQLStitchedSchemaSetMockRecorder) Insert(graphQLStitchedSchema ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockGraphQLStitchedSchemaSet)(nil).Insert), graphQLStitchedSchema...)
}

// Intersection mocks base method.
func (m *MockGraphQLStitchedSchemaSet) Intersection(set v2sets.GraphQLStitchedSchemaSet) v2sets.GraphQLStitchedSchemaSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.GraphQLStitchedSchemaSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockGraphQLStitchedSchemaSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockGraphQLStitchedSchemaSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockGraphQLStitchedSchemaSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockGraphQLStitchedSchemaSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockGraphQLStitchedSchemaSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockGraphQLStitchedSchemaSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockGraphQLStitchedSchemaSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockGraphQLStitchedSchemaSet)(nil).Length))
}

// List mocks base method.
func (m *MockGraphQLStitchedSchemaSet) List(filterResource ...func(*v2.GraphQLStitchedSchema) bool) []*v2.GraphQLStitchedSchema {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.GraphQLStitchedSchema)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockGraphQLStitchedSchemaSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGraphQLStitchedSchemaSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockGraphQLStitchedSchemaSet) Map() map[string]*v2.GraphQLStitchedSchema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.GraphQLStitchedSchema)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockGraphQLStitchedSchemaSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockGraphQLStitchedSchemaSet)(nil).Map))
}

// Union mocks base method.
func (m *MockGraphQLStitchedSchemaSet) Union(set v2sets.GraphQLStitchedSchemaSet) v2sets.GraphQLStitchedSchemaSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.GraphQLStitchedSchemaSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockGraphQLStitchedSchemaSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockGraphQLStitchedSchemaSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockGraphQLStitchedSchemaSet) UnsortedList(filterResource ...func(*v2.GraphQLStitchedSchema) bool) []*v2.GraphQLStitchedSchema {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.GraphQLStitchedSchema)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockGraphQLStitchedSchemaSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockGraphQLStitchedSchemaSet)(nil).UnsortedList), filterResource...)
}

// MockGraphQLResolverMapSet is a mock of GraphQLResolverMapSet interface.
type MockGraphQLResolverMapSet struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLResolverMapSetMockRecorder
}

// MockGraphQLResolverMapSetMockRecorder is the mock recorder for MockGraphQLResolverMapSet.
type MockGraphQLResolverMapSetMockRecorder struct {
	mock *MockGraphQLResolverMapSet
}

// NewMockGraphQLResolverMapSet creates a new mock instance.
func NewMockGraphQLResolverMapSet(ctrl *gomock.Controller) *MockGraphQLResolverMapSet {
	mock := &MockGraphQLResolverMapSet{ctrl: ctrl}
	mock.recorder = &MockGraphQLResolverMapSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLResolverMapSet) EXPECT() *MockGraphQLResolverMapSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockGraphQLResolverMapSet) Clone() v2sets.GraphQLResolverMapSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.GraphQLResolverMapSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockGraphQLResolverMapSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGraphQLResolverMapSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockGraphQLResolverMapSet) Delete(graphQLResolverMap ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", graphQLResolverMap)
}

// Delete indicates an expected call of Delete.
func (mr *MockGraphQLResolverMapSetMockRecorder) Delete(graphQLResolverMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGraphQLResolverMapSet)(nil).Delete), graphQLResolverMap)
}

// Delta mocks base method.
func (m *MockGraphQLResolverMapSet) Delta(newSet v2sets.GraphQLResolverMapSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockGraphQLResolverMapSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockGraphQLResolverMapSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockGraphQLResolverMapSet) Difference(set v2sets.GraphQLResolverMapSet) v2sets.GraphQLResolverMapSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.GraphQLResolverMapSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockGraphQLResolverMapSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockGraphQLResolverMapSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockGraphQLResolverMapSet) Equal(graphQLResolverMapSet v2sets.GraphQLResolverMapSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", graphQLResolverMapSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockGraphQLResolverMapSetMockRecorder) Equal(graphQLResolverMapSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockGraphQLResolverMapSet)(nil).Equal), graphQLResolverMapSet)
}

// Find mocks base method.
func (m *MockGraphQLResolverMapSet) Find(id ezkube.ResourceId) (*v2.GraphQLResolverMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.GraphQLResolverMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockGraphQLResolverMapSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockGraphQLResolverMapSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockGraphQLResolverMapSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockGraphQLResolverMapSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockGraphQLResolverMapSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockGraphQLResolverMapSet) Has(graphQLResolverMap ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", graphQLResolverMap)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockGraphQLResolverMapSetMockRecorder) Has(graphQLResolverMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockGraphQLResolverMapSet)(nil).Has), graphQLResolverMap)
}

// Insert mocks base method.
func (m *MockGraphQLResolverMapSet) Insert(graphQLResolverMap ...*v2.GraphQLResolverMap) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range graphQLResolverMap {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockGraphQLResolverMapSetMockRecorder) Insert(graphQLResolverMap ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockGraphQLResolverMapSet)(nil).Insert), graphQLResolverMap...)
}

// Intersection mocks base method.
func (m *MockGraphQLResolverMapSet) Intersection(set v2sets.GraphQLResolverMapSet) v2sets.GraphQLResolverMapSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.GraphQLResolverMapSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockGraphQLResolverMapSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockGraphQLResolverMapSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockGraphQLResolverMapSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockGraphQLResolverMapSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockGraphQLResolverMapSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockGraphQLResolverMapSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockGraphQLResolverMapSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockGraphQLResolverMapSet)(nil).Length))
}

// List mocks base method.
func (m *MockGraphQLResolverMapSet) List(filterResource ...func(*v2.GraphQLResolverMap) bool) []*v2.GraphQLResolverMap {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.GraphQLResolverMap)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockGraphQLResolverMapSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGraphQLResolverMapSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockGraphQLResolverMapSet) Map() map[string]*v2.GraphQLResolverMap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.GraphQLResolverMap)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockGraphQLResolverMapSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockGraphQLResolverMapSet)(nil).Map))
}

// Union mocks base method.
func (m *MockGraphQLResolverMapSet) Union(set v2sets.GraphQLResolverMapSet) v2sets.GraphQLResolverMapSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.GraphQLResolverMapSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockGraphQLResolverMapSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockGraphQLResolverMapSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockGraphQLResolverMapSet) UnsortedList(filterResource ...func(*v2.GraphQLResolverMap) bool) []*v2.GraphQLResolverMap {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.GraphQLResolverMap)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockGraphQLResolverMapSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockGraphQLResolverMapSet)(nil).UnsortedList), filterResource...)
}

// MockGraphQLSchemaSet is a mock of GraphQLSchemaSet interface.
type MockGraphQLSchemaSet struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaSetMockRecorder
}

// MockGraphQLSchemaSetMockRecorder is the mock recorder for MockGraphQLSchemaSet.
type MockGraphQLSchemaSetMockRecorder struct {
	mock *MockGraphQLSchemaSet
}

// NewMockGraphQLSchemaSet creates a new mock instance.
func NewMockGraphQLSchemaSet(ctrl *gomock.Controller) *MockGraphQLSchemaSet {
	mock := &MockGraphQLSchemaSet{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaSet) EXPECT() *MockGraphQLSchemaSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockGraphQLSchemaSet) Clone() v2sets.GraphQLSchemaSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.GraphQLSchemaSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockGraphQLSchemaSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockGraphQLSchemaSet) Delete(graphQLSchema ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", graphQLSchema)
}

// Delete indicates an expected call of Delete.
func (mr *MockGraphQLSchemaSetMockRecorder) Delete(graphQLSchema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Delete), graphQLSchema)
}

// Delta mocks base method.
func (m *MockGraphQLSchemaSet) Delta(newSet v2sets.GraphQLSchemaSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockGraphQLSchemaSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockGraphQLSchemaSet) Difference(set v2sets.GraphQLSchemaSet) v2sets.GraphQLSchemaSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.GraphQLSchemaSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockGraphQLSchemaSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockGraphQLSchemaSet) Equal(graphQLSchemaSet v2sets.GraphQLSchemaSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", graphQLSchemaSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockGraphQLSchemaSetMockRecorder) Equal(graphQLSchemaSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Equal), graphQLSchemaSet)
}

// Find mocks base method.
func (m *MockGraphQLSchemaSet) Find(id ezkube.ResourceId) (*v2.GraphQLSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.GraphQLSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockGraphQLSchemaSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockGraphQLSchemaSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockGraphQLSchemaSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockGraphQLSchemaSet) Has(graphQLSchema ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", graphQLSchema)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockGraphQLSchemaSetMockRecorder) Has(graphQLSchema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Has), graphQLSchema)
}

// Insert mocks base method.
func (m *MockGraphQLSchemaSet) Insert(graphQLSchema ...*v2.GraphQLSchema) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range graphQLSchema {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockGraphQLSchemaSetMockRecorder) Insert(graphQLSchema ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Insert), graphQLSchema...)
}

// Intersection mocks base method.
func (m *MockGraphQLSchemaSet) Intersection(set v2sets.GraphQLSchemaSet) v2sets.GraphQLSchemaSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.GraphQLSchemaSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockGraphQLSchemaSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockGraphQLSchemaSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockGraphQLSchemaSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockGraphQLSchemaSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockGraphQLSchemaSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Length))
}

// List mocks base method.
func (m *MockGraphQLSchemaSet) List(filterResource ...func(*v2.GraphQLSchema) bool) []*v2.GraphQLSchema {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.GraphQLSchema)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockGraphQLSchemaSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockGraphQLSchemaSet) Map() map[string]*v2.GraphQLSchema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.GraphQLSchema)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockGraphQLSchemaSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Map))
}

// Union mocks base method.
func (m *MockGraphQLSchemaSet) Union(set v2sets.GraphQLSchemaSet) v2sets.GraphQLSchemaSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.GraphQLSchemaSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockGraphQLSchemaSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockGraphQLSchemaSet) UnsortedList(filterResource ...func(*v2.GraphQLSchema) bool) []*v2.GraphQLSchema {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.GraphQLSchema)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockGraphQLSchemaSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).UnsortedList), filterResource...)
}

// MockApiDocSet is a mock of ApiDocSet interface.
type MockApiDocSet struct {
	ctrl     *gomock.Controller
	recorder *MockApiDocSetMockRecorder
}

// MockApiDocSetMockRecorder is the mock recorder for MockApiDocSet.
type MockApiDocSetMockRecorder struct {
	mock *MockApiDocSet
}

// NewMockApiDocSet creates a new mock instance.
func NewMockApiDocSet(ctrl *gomock.Controller) *MockApiDocSet {
	mock := &MockApiDocSet{ctrl: ctrl}
	mock.recorder = &MockApiDocSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDocSet) EXPECT() *MockApiDocSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockApiDocSet) Clone() v2sets.ApiDocSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.ApiDocSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockApiDocSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockApiDocSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockApiDocSet) Delete(apiDoc ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", apiDoc)
}

// Delete indicates an expected call of Delete.
func (mr *MockApiDocSetMockRecorder) Delete(apiDoc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockApiDocSet)(nil).Delete), apiDoc)
}

// Delta mocks base method.
func (m *MockApiDocSet) Delta(newSet v2sets.ApiDocSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockApiDocSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockApiDocSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockApiDocSet) Difference(set v2sets.ApiDocSet) v2sets.ApiDocSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.ApiDocSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockApiDocSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockApiDocSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockApiDocSet) Equal(apiDocSet v2sets.ApiDocSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", apiDocSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockApiDocSetMockRecorder) Equal(apiDocSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockApiDocSet)(nil).Equal), apiDocSet)
}

// Find mocks base method.
func (m *MockApiDocSet) Find(id ezkube.ResourceId) (*v2.ApiDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.ApiDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockApiDocSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockApiDocSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockApiDocSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockApiDocSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockApiDocSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockApiDocSet) Has(apiDoc ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", apiDoc)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockApiDocSetMockRecorder) Has(apiDoc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockApiDocSet)(nil).Has), apiDoc)
}

// Insert mocks base method.
func (m *MockApiDocSet) Insert(apiDoc ...*v2.ApiDoc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range apiDoc {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockApiDocSetMockRecorder) Insert(apiDoc ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockApiDocSet)(nil).Insert), apiDoc...)
}

// Intersection mocks base method.
func (m *MockApiDocSet) Intersection(set v2sets.ApiDocSet) v2sets.ApiDocSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.ApiDocSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockApiDocSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockApiDocSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockApiDocSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockApiDocSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockApiDocSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockApiDocSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockApiDocSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockApiDocSet)(nil).Length))
}

// List mocks base method.
func (m *MockApiDocSet) List(filterResource ...func(*v2.ApiDoc) bool) []*v2.ApiDoc {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.ApiDoc)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockApiDocSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockApiDocSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockApiDocSet) Map() map[string]*v2.ApiDoc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.ApiDoc)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockApiDocSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockApiDocSet)(nil).Map))
}

// Union mocks base method.
func (m *MockApiDocSet) Union(set v2sets.ApiDocSet) v2sets.ApiDocSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.ApiDocSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockApiDocSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockApiDocSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockApiDocSet) UnsortedList(filterResource ...func(*v2.ApiDoc) bool) []*v2.ApiDoc {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.ApiDoc)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockApiDocSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockApiDocSet)(nil).UnsortedList), filterResource...)
}
