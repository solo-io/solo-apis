// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v2sets

import (
	apimanagement_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/apimanagement.gloo.solo.io/v2"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type GraphQLStitchedSchemaSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema) bool) []*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema) bool) []*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema
	// Return the Set as a map of key to resource.
	Map() map[string]*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema
	// Insert a resource into the set.
	Insert(graphQLStitchedSchema ...*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(graphQLStitchedSchemaSet GraphQLStitchedSchemaSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(graphQLStitchedSchema ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(graphQLStitchedSchema ezkube.ResourceId)
	// Return the union with the provided set
	Union(set GraphQLStitchedSchemaSet) GraphQLStitchedSchemaSet
	// Return the difference with the provided set
	Difference(set GraphQLStitchedSchemaSet) GraphQLStitchedSchemaSet
	// Return the intersection with the provided set
	Intersection(set GraphQLStitchedSchemaSet) GraphQLStitchedSchemaSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another GraphQLStitchedSchemaSet
	Delta(newSet GraphQLStitchedSchemaSet) sksets.ResourceDelta
	// Create a deep copy of the current GraphQLStitchedSchemaSet
	Clone() GraphQLStitchedSchemaSet
}

func makeGenericGraphQLStitchedSchemaSet(graphQLStitchedSchemaList []*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range graphQLStitchedSchemaList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type graphQLStitchedSchemaSet struct {
	set sksets.ResourceSet
}

func NewGraphQLStitchedSchemaSet(graphQLStitchedSchemaList ...*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema) GraphQLStitchedSchemaSet {
	return &graphQLStitchedSchemaSet{set: makeGenericGraphQLStitchedSchemaSet(graphQLStitchedSchemaList)}
}

func NewGraphQLStitchedSchemaSetFromList(graphQLStitchedSchemaList *apimanagement_gloo_solo_io_v2.GraphQLStitchedSchemaList) GraphQLStitchedSchemaSet {
	list := make([]*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema, 0, len(graphQLStitchedSchemaList.Items))
	for idx := range graphQLStitchedSchemaList.Items {
		list = append(list, &graphQLStitchedSchemaList.Items[idx])
	}
	return &graphQLStitchedSchemaSet{set: makeGenericGraphQLStitchedSchemaSet(list)}
}

func (s *graphQLStitchedSchemaSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *graphQLStitchedSchemaSet) List(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema) bool) []*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema))
		})
	}

	objs := s.Generic().List(genericFilters...)
	graphQLStitchedSchemaList := make([]*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema, 0, len(objs))
	for _, obj := range objs {
		graphQLStitchedSchemaList = append(graphQLStitchedSchemaList, obj.(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema))
	}
	return graphQLStitchedSchemaList
}

func (s *graphQLStitchedSchemaSet) UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema) bool) []*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema))
		})
	}

	var graphQLStitchedSchemaList []*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		graphQLStitchedSchemaList = append(graphQLStitchedSchemaList, obj.(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema))
	}
	return graphQLStitchedSchemaList
}

func (s *graphQLStitchedSchemaSet) Map() map[string]*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema {
	if s == nil {
		return nil
	}

	newMap := map[string]*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema)
	}
	return newMap
}

func (s *graphQLStitchedSchemaSet) Insert(
	graphQLStitchedSchemaList ...*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range graphQLStitchedSchemaList {
		s.Generic().Insert(obj)
	}
}

func (s *graphQLStitchedSchemaSet) Has(graphQLStitchedSchema ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(graphQLStitchedSchema)
}

func (s *graphQLStitchedSchemaSet) Equal(
	graphQLStitchedSchemaSet GraphQLStitchedSchemaSet,
) bool {
	if s == nil {
		return graphQLStitchedSchemaSet == nil
	}
	return s.Generic().Equal(graphQLStitchedSchemaSet.Generic())
}

func (s *graphQLStitchedSchemaSet) Delete(GraphQLStitchedSchema ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(GraphQLStitchedSchema)
}

func (s *graphQLStitchedSchemaSet) Union(set GraphQLStitchedSchemaSet) GraphQLStitchedSchemaSet {
	if s == nil {
		return set
	}
	return NewGraphQLStitchedSchemaSet(append(s.List(), set.List()...)...)
}

func (s *graphQLStitchedSchemaSet) Difference(set GraphQLStitchedSchemaSet) GraphQLStitchedSchemaSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &graphQLStitchedSchemaSet{set: newSet}
}

func (s *graphQLStitchedSchemaSet) Intersection(set GraphQLStitchedSchemaSet) GraphQLStitchedSchemaSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var graphQLStitchedSchemaList []*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema
	for _, obj := range newSet.List() {
		graphQLStitchedSchemaList = append(graphQLStitchedSchemaList, obj.(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema))
	}
	return NewGraphQLStitchedSchemaSet(graphQLStitchedSchemaList...)
}

func (s *graphQLStitchedSchemaSet) Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find GraphQLStitchedSchema %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema), nil
}

func (s *graphQLStitchedSchemaSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *graphQLStitchedSchemaSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *graphQLStitchedSchemaSet) Delta(newSet GraphQLStitchedSchemaSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *graphQLStitchedSchemaSet) Clone() GraphQLStitchedSchemaSet {
	if s == nil {
		return nil
	}
	return &graphQLStitchedSchemaSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type GraphQLResolverMapSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap) bool) []*apimanagement_gloo_solo_io_v2.GraphQLResolverMap
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap) bool) []*apimanagement_gloo_solo_io_v2.GraphQLResolverMap
	// Return the Set as a map of key to resource.
	Map() map[string]*apimanagement_gloo_solo_io_v2.GraphQLResolverMap
	// Insert a resource into the set.
	Insert(graphQLResolverMap ...*apimanagement_gloo_solo_io_v2.GraphQLResolverMap)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(graphQLResolverMapSet GraphQLResolverMapSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(graphQLResolverMap ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(graphQLResolverMap ezkube.ResourceId)
	// Return the union with the provided set
	Union(set GraphQLResolverMapSet) GraphQLResolverMapSet
	// Return the difference with the provided set
	Difference(set GraphQLResolverMapSet) GraphQLResolverMapSet
	// Return the intersection with the provided set
	Intersection(set GraphQLResolverMapSet) GraphQLResolverMapSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.GraphQLResolverMap, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another GraphQLResolverMapSet
	Delta(newSet GraphQLResolverMapSet) sksets.ResourceDelta
	// Create a deep copy of the current GraphQLResolverMapSet
	Clone() GraphQLResolverMapSet
}

func makeGenericGraphQLResolverMapSet(graphQLResolverMapList []*apimanagement_gloo_solo_io_v2.GraphQLResolverMap) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range graphQLResolverMapList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type graphQLResolverMapSet struct {
	set sksets.ResourceSet
}

func NewGraphQLResolverMapSet(graphQLResolverMapList ...*apimanagement_gloo_solo_io_v2.GraphQLResolverMap) GraphQLResolverMapSet {
	return &graphQLResolverMapSet{set: makeGenericGraphQLResolverMapSet(graphQLResolverMapList)}
}

func NewGraphQLResolverMapSetFromList(graphQLResolverMapList *apimanagement_gloo_solo_io_v2.GraphQLResolverMapList) GraphQLResolverMapSet {
	list := make([]*apimanagement_gloo_solo_io_v2.GraphQLResolverMap, 0, len(graphQLResolverMapList.Items))
	for idx := range graphQLResolverMapList.Items {
		list = append(list, &graphQLResolverMapList.Items[idx])
	}
	return &graphQLResolverMapSet{set: makeGenericGraphQLResolverMapSet(list)}
}

func (s *graphQLResolverMapSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *graphQLResolverMapSet) List(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap) bool) []*apimanagement_gloo_solo_io_v2.GraphQLResolverMap {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap))
		})
	}

	objs := s.Generic().List(genericFilters...)
	graphQLResolverMapList := make([]*apimanagement_gloo_solo_io_v2.GraphQLResolverMap, 0, len(objs))
	for _, obj := range objs {
		graphQLResolverMapList = append(graphQLResolverMapList, obj.(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap))
	}
	return graphQLResolverMapList
}

func (s *graphQLResolverMapSet) UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap) bool) []*apimanagement_gloo_solo_io_v2.GraphQLResolverMap {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap))
		})
	}

	var graphQLResolverMapList []*apimanagement_gloo_solo_io_v2.GraphQLResolverMap
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		graphQLResolverMapList = append(graphQLResolverMapList, obj.(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap))
	}
	return graphQLResolverMapList
}

func (s *graphQLResolverMapSet) Map() map[string]*apimanagement_gloo_solo_io_v2.GraphQLResolverMap {
	if s == nil {
		return nil
	}

	newMap := map[string]*apimanagement_gloo_solo_io_v2.GraphQLResolverMap{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap)
	}
	return newMap
}

func (s *graphQLResolverMapSet) Insert(
	graphQLResolverMapList ...*apimanagement_gloo_solo_io_v2.GraphQLResolverMap,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range graphQLResolverMapList {
		s.Generic().Insert(obj)
	}
}

func (s *graphQLResolverMapSet) Has(graphQLResolverMap ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(graphQLResolverMap)
}

func (s *graphQLResolverMapSet) Equal(
	graphQLResolverMapSet GraphQLResolverMapSet,
) bool {
	if s == nil {
		return graphQLResolverMapSet == nil
	}
	return s.Generic().Equal(graphQLResolverMapSet.Generic())
}

func (s *graphQLResolverMapSet) Delete(GraphQLResolverMap ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(GraphQLResolverMap)
}

func (s *graphQLResolverMapSet) Union(set GraphQLResolverMapSet) GraphQLResolverMapSet {
	if s == nil {
		return set
	}
	return NewGraphQLResolverMapSet(append(s.List(), set.List()...)...)
}

func (s *graphQLResolverMapSet) Difference(set GraphQLResolverMapSet) GraphQLResolverMapSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &graphQLResolverMapSet{set: newSet}
}

func (s *graphQLResolverMapSet) Intersection(set GraphQLResolverMapSet) GraphQLResolverMapSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var graphQLResolverMapList []*apimanagement_gloo_solo_io_v2.GraphQLResolverMap
	for _, obj := range newSet.List() {
		graphQLResolverMapList = append(graphQLResolverMapList, obj.(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap))
	}
	return NewGraphQLResolverMapSet(graphQLResolverMapList...)
}

func (s *graphQLResolverMapSet) Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.GraphQLResolverMap, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find GraphQLResolverMap %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&apimanagement_gloo_solo_io_v2.GraphQLResolverMap{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap), nil
}

func (s *graphQLResolverMapSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *graphQLResolverMapSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *graphQLResolverMapSet) Delta(newSet GraphQLResolverMapSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *graphQLResolverMapSet) Clone() GraphQLResolverMapSet {
	if s == nil {
		return nil
	}
	return &graphQLResolverMapSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type GraphQLSchemaSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLSchema) bool) []*apimanagement_gloo_solo_io_v2.GraphQLSchema
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLSchema) bool) []*apimanagement_gloo_solo_io_v2.GraphQLSchema
	// Return the Set as a map of key to resource.
	Map() map[string]*apimanagement_gloo_solo_io_v2.GraphQLSchema
	// Insert a resource into the set.
	Insert(graphQLSchema ...*apimanagement_gloo_solo_io_v2.GraphQLSchema)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(graphQLSchemaSet GraphQLSchemaSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(graphQLSchema ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(graphQLSchema ezkube.ResourceId)
	// Return the union with the provided set
	Union(set GraphQLSchemaSet) GraphQLSchemaSet
	// Return the difference with the provided set
	Difference(set GraphQLSchemaSet) GraphQLSchemaSet
	// Return the intersection with the provided set
	Intersection(set GraphQLSchemaSet) GraphQLSchemaSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.GraphQLSchema, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another GraphQLSchemaSet
	Delta(newSet GraphQLSchemaSet) sksets.ResourceDelta
	// Create a deep copy of the current GraphQLSchemaSet
	Clone() GraphQLSchemaSet
}

func makeGenericGraphQLSchemaSet(graphQLSchemaList []*apimanagement_gloo_solo_io_v2.GraphQLSchema) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range graphQLSchemaList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type graphQLSchemaSet struct {
	set sksets.ResourceSet
}

func NewGraphQLSchemaSet(graphQLSchemaList ...*apimanagement_gloo_solo_io_v2.GraphQLSchema) GraphQLSchemaSet {
	return &graphQLSchemaSet{set: makeGenericGraphQLSchemaSet(graphQLSchemaList)}
}

func NewGraphQLSchemaSetFromList(graphQLSchemaList *apimanagement_gloo_solo_io_v2.GraphQLSchemaList) GraphQLSchemaSet {
	list := make([]*apimanagement_gloo_solo_io_v2.GraphQLSchema, 0, len(graphQLSchemaList.Items))
	for idx := range graphQLSchemaList.Items {
		list = append(list, &graphQLSchemaList.Items[idx])
	}
	return &graphQLSchemaSet{set: makeGenericGraphQLSchemaSet(list)}
}

func (s *graphQLSchemaSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *graphQLSchemaSet) List(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLSchema) bool) []*apimanagement_gloo_solo_io_v2.GraphQLSchema {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.GraphQLSchema))
		})
	}

	objs := s.Generic().List(genericFilters...)
	graphQLSchemaList := make([]*apimanagement_gloo_solo_io_v2.GraphQLSchema, 0, len(objs))
	for _, obj := range objs {
		graphQLSchemaList = append(graphQLSchemaList, obj.(*apimanagement_gloo_solo_io_v2.GraphQLSchema))
	}
	return graphQLSchemaList
}

func (s *graphQLSchemaSet) UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLSchema) bool) []*apimanagement_gloo_solo_io_v2.GraphQLSchema {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.GraphQLSchema))
		})
	}

	var graphQLSchemaList []*apimanagement_gloo_solo_io_v2.GraphQLSchema
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		graphQLSchemaList = append(graphQLSchemaList, obj.(*apimanagement_gloo_solo_io_v2.GraphQLSchema))
	}
	return graphQLSchemaList
}

func (s *graphQLSchemaSet) Map() map[string]*apimanagement_gloo_solo_io_v2.GraphQLSchema {
	if s == nil {
		return nil
	}

	newMap := map[string]*apimanagement_gloo_solo_io_v2.GraphQLSchema{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*apimanagement_gloo_solo_io_v2.GraphQLSchema)
	}
	return newMap
}

func (s *graphQLSchemaSet) Insert(
	graphQLSchemaList ...*apimanagement_gloo_solo_io_v2.GraphQLSchema,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range graphQLSchemaList {
		s.Generic().Insert(obj)
	}
}

func (s *graphQLSchemaSet) Has(graphQLSchema ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(graphQLSchema)
}

func (s *graphQLSchemaSet) Equal(
	graphQLSchemaSet GraphQLSchemaSet,
) bool {
	if s == nil {
		return graphQLSchemaSet == nil
	}
	return s.Generic().Equal(graphQLSchemaSet.Generic())
}

func (s *graphQLSchemaSet) Delete(GraphQLSchema ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(GraphQLSchema)
}

func (s *graphQLSchemaSet) Union(set GraphQLSchemaSet) GraphQLSchemaSet {
	if s == nil {
		return set
	}
	return NewGraphQLSchemaSet(append(s.List(), set.List()...)...)
}

func (s *graphQLSchemaSet) Difference(set GraphQLSchemaSet) GraphQLSchemaSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &graphQLSchemaSet{set: newSet}
}

func (s *graphQLSchemaSet) Intersection(set GraphQLSchemaSet) GraphQLSchemaSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var graphQLSchemaList []*apimanagement_gloo_solo_io_v2.GraphQLSchema
	for _, obj := range newSet.List() {
		graphQLSchemaList = append(graphQLSchemaList, obj.(*apimanagement_gloo_solo_io_v2.GraphQLSchema))
	}
	return NewGraphQLSchemaSet(graphQLSchemaList...)
}

func (s *graphQLSchemaSet) Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.GraphQLSchema, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find GraphQLSchema %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&apimanagement_gloo_solo_io_v2.GraphQLSchema{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*apimanagement_gloo_solo_io_v2.GraphQLSchema), nil
}

func (s *graphQLSchemaSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *graphQLSchemaSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *graphQLSchemaSet) Delta(newSet GraphQLSchemaSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *graphQLSchemaSet) Clone() GraphQLSchemaSet {
	if s == nil {
		return nil
	}
	return &graphQLSchemaSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type ApiDocSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*apimanagement_gloo_solo_io_v2.ApiDoc) bool) []*apimanagement_gloo_solo_io_v2.ApiDoc
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.ApiDoc) bool) []*apimanagement_gloo_solo_io_v2.ApiDoc
	// Return the Set as a map of key to resource.
	Map() map[string]*apimanagement_gloo_solo_io_v2.ApiDoc
	// Insert a resource into the set.
	Insert(apiDoc ...*apimanagement_gloo_solo_io_v2.ApiDoc)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(apiDocSet ApiDocSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(apiDoc ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(apiDoc ezkube.ResourceId)
	// Return the union with the provided set
	Union(set ApiDocSet) ApiDocSet
	// Return the difference with the provided set
	Difference(set ApiDocSet) ApiDocSet
	// Return the intersection with the provided set
	Intersection(set ApiDocSet) ApiDocSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.ApiDoc, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another ApiDocSet
	Delta(newSet ApiDocSet) sksets.ResourceDelta
	// Create a deep copy of the current ApiDocSet
	Clone() ApiDocSet
}

func makeGenericApiDocSet(apiDocList []*apimanagement_gloo_solo_io_v2.ApiDoc) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range apiDocList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type apiDocSet struct {
	set sksets.ResourceSet
}

func NewApiDocSet(apiDocList ...*apimanagement_gloo_solo_io_v2.ApiDoc) ApiDocSet {
	return &apiDocSet{set: makeGenericApiDocSet(apiDocList)}
}

func NewApiDocSetFromList(apiDocList *apimanagement_gloo_solo_io_v2.ApiDocList) ApiDocSet {
	list := make([]*apimanagement_gloo_solo_io_v2.ApiDoc, 0, len(apiDocList.Items))
	for idx := range apiDocList.Items {
		list = append(list, &apiDocList.Items[idx])
	}
	return &apiDocSet{set: makeGenericApiDocSet(list)}
}

func (s *apiDocSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *apiDocSet) List(filterResource ...func(*apimanagement_gloo_solo_io_v2.ApiDoc) bool) []*apimanagement_gloo_solo_io_v2.ApiDoc {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.ApiDoc))
		})
	}

	objs := s.Generic().List(genericFilters...)
	apiDocList := make([]*apimanagement_gloo_solo_io_v2.ApiDoc, 0, len(objs))
	for _, obj := range objs {
		apiDocList = append(apiDocList, obj.(*apimanagement_gloo_solo_io_v2.ApiDoc))
	}
	return apiDocList
}

func (s *apiDocSet) UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.ApiDoc) bool) []*apimanagement_gloo_solo_io_v2.ApiDoc {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.ApiDoc))
		})
	}

	var apiDocList []*apimanagement_gloo_solo_io_v2.ApiDoc
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		apiDocList = append(apiDocList, obj.(*apimanagement_gloo_solo_io_v2.ApiDoc))
	}
	return apiDocList
}

func (s *apiDocSet) Map() map[string]*apimanagement_gloo_solo_io_v2.ApiDoc {
	if s == nil {
		return nil
	}

	newMap := map[string]*apimanagement_gloo_solo_io_v2.ApiDoc{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*apimanagement_gloo_solo_io_v2.ApiDoc)
	}
	return newMap
}

func (s *apiDocSet) Insert(
	apiDocList ...*apimanagement_gloo_solo_io_v2.ApiDoc,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range apiDocList {
		s.Generic().Insert(obj)
	}
}

func (s *apiDocSet) Has(apiDoc ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(apiDoc)
}

func (s *apiDocSet) Equal(
	apiDocSet ApiDocSet,
) bool {
	if s == nil {
		return apiDocSet == nil
	}
	return s.Generic().Equal(apiDocSet.Generic())
}

func (s *apiDocSet) Delete(ApiDoc ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(ApiDoc)
}

func (s *apiDocSet) Union(set ApiDocSet) ApiDocSet {
	if s == nil {
		return set
	}
	return NewApiDocSet(append(s.List(), set.List()...)...)
}

func (s *apiDocSet) Difference(set ApiDocSet) ApiDocSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &apiDocSet{set: newSet}
}

func (s *apiDocSet) Intersection(set ApiDocSet) ApiDocSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var apiDocList []*apimanagement_gloo_solo_io_v2.ApiDoc
	for _, obj := range newSet.List() {
		apiDocList = append(apiDocList, obj.(*apimanagement_gloo_solo_io_v2.ApiDoc))
	}
	return NewApiDocSet(apiDocList...)
}

func (s *apiDocSet) Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.ApiDoc, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find ApiDoc %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&apimanagement_gloo_solo_io_v2.ApiDoc{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*apimanagement_gloo_solo_io_v2.ApiDoc), nil
}

func (s *apiDocSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *apiDocSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *apiDocSet) Delta(newSet ApiDocSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *apiDocSet) Clone() ApiDocSet {
	if s == nil {
		return nil
	}
	return &apiDocSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type PortalSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*apimanagement_gloo_solo_io_v2.Portal) bool) []*apimanagement_gloo_solo_io_v2.Portal
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.Portal) bool) []*apimanagement_gloo_solo_io_v2.Portal
	// Return the Set as a map of key to resource.
	Map() map[string]*apimanagement_gloo_solo_io_v2.Portal
	// Insert a resource into the set.
	Insert(portal ...*apimanagement_gloo_solo_io_v2.Portal)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(portalSet PortalSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(portal ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(portal ezkube.ResourceId)
	// Return the union with the provided set
	Union(set PortalSet) PortalSet
	// Return the difference with the provided set
	Difference(set PortalSet) PortalSet
	// Return the intersection with the provided set
	Intersection(set PortalSet) PortalSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.Portal, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another PortalSet
	Delta(newSet PortalSet) sksets.ResourceDelta
	// Create a deep copy of the current PortalSet
	Clone() PortalSet
}

func makeGenericPortalSet(portalList []*apimanagement_gloo_solo_io_v2.Portal) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range portalList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type portalSet struct {
	set sksets.ResourceSet
}

func NewPortalSet(portalList ...*apimanagement_gloo_solo_io_v2.Portal) PortalSet {
	return &portalSet{set: makeGenericPortalSet(portalList)}
}

func NewPortalSetFromList(portalList *apimanagement_gloo_solo_io_v2.PortalList) PortalSet {
	list := make([]*apimanagement_gloo_solo_io_v2.Portal, 0, len(portalList.Items))
	for idx := range portalList.Items {
		list = append(list, &portalList.Items[idx])
	}
	return &portalSet{set: makeGenericPortalSet(list)}
}

func (s *portalSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *portalSet) List(filterResource ...func(*apimanagement_gloo_solo_io_v2.Portal) bool) []*apimanagement_gloo_solo_io_v2.Portal {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.Portal))
		})
	}

	objs := s.Generic().List(genericFilters...)
	portalList := make([]*apimanagement_gloo_solo_io_v2.Portal, 0, len(objs))
	for _, obj := range objs {
		portalList = append(portalList, obj.(*apimanagement_gloo_solo_io_v2.Portal))
	}
	return portalList
}

func (s *portalSet) UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.Portal) bool) []*apimanagement_gloo_solo_io_v2.Portal {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.Portal))
		})
	}

	var portalList []*apimanagement_gloo_solo_io_v2.Portal
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		portalList = append(portalList, obj.(*apimanagement_gloo_solo_io_v2.Portal))
	}
	return portalList
}

func (s *portalSet) Map() map[string]*apimanagement_gloo_solo_io_v2.Portal {
	if s == nil {
		return nil
	}

	newMap := map[string]*apimanagement_gloo_solo_io_v2.Portal{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*apimanagement_gloo_solo_io_v2.Portal)
	}
	return newMap
}

func (s *portalSet) Insert(
	portalList ...*apimanagement_gloo_solo_io_v2.Portal,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range portalList {
		s.Generic().Insert(obj)
	}
}

func (s *portalSet) Has(portal ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(portal)
}

func (s *portalSet) Equal(
	portalSet PortalSet,
) bool {
	if s == nil {
		return portalSet == nil
	}
	return s.Generic().Equal(portalSet.Generic())
}

func (s *portalSet) Delete(Portal ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(Portal)
}

func (s *portalSet) Union(set PortalSet) PortalSet {
	if s == nil {
		return set
	}
	return NewPortalSet(append(s.List(), set.List()...)...)
}

func (s *portalSet) Difference(set PortalSet) PortalSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &portalSet{set: newSet}
}

func (s *portalSet) Intersection(set PortalSet) PortalSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var portalList []*apimanagement_gloo_solo_io_v2.Portal
	for _, obj := range newSet.List() {
		portalList = append(portalList, obj.(*apimanagement_gloo_solo_io_v2.Portal))
	}
	return NewPortalSet(portalList...)
}

func (s *portalSet) Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.Portal, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find Portal %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&apimanagement_gloo_solo_io_v2.Portal{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*apimanagement_gloo_solo_io_v2.Portal), nil
}

func (s *portalSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *portalSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *portalSet) Delta(newSet PortalSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *portalSet) Clone() PortalSet {
	if s == nil {
		return nil
	}
	return &portalSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type PortalGroupSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*apimanagement_gloo_solo_io_v2.PortalGroup) bool) []*apimanagement_gloo_solo_io_v2.PortalGroup
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.PortalGroup) bool) []*apimanagement_gloo_solo_io_v2.PortalGroup
	// Return the Set as a map of key to resource.
	Map() map[string]*apimanagement_gloo_solo_io_v2.PortalGroup
	// Insert a resource into the set.
	Insert(portalGroup ...*apimanagement_gloo_solo_io_v2.PortalGroup)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(portalGroupSet PortalGroupSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(portalGroup ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(portalGroup ezkube.ResourceId)
	// Return the union with the provided set
	Union(set PortalGroupSet) PortalGroupSet
	// Return the difference with the provided set
	Difference(set PortalGroupSet) PortalGroupSet
	// Return the intersection with the provided set
	Intersection(set PortalGroupSet) PortalGroupSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.PortalGroup, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another PortalGroupSet
	Delta(newSet PortalGroupSet) sksets.ResourceDelta
	// Create a deep copy of the current PortalGroupSet
	Clone() PortalGroupSet
}

func makeGenericPortalGroupSet(portalGroupList []*apimanagement_gloo_solo_io_v2.PortalGroup) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range portalGroupList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type portalGroupSet struct {
	set sksets.ResourceSet
}

func NewPortalGroupSet(portalGroupList ...*apimanagement_gloo_solo_io_v2.PortalGroup) PortalGroupSet {
	return &portalGroupSet{set: makeGenericPortalGroupSet(portalGroupList)}
}

func NewPortalGroupSetFromList(portalGroupList *apimanagement_gloo_solo_io_v2.PortalGroupList) PortalGroupSet {
	list := make([]*apimanagement_gloo_solo_io_v2.PortalGroup, 0, len(portalGroupList.Items))
	for idx := range portalGroupList.Items {
		list = append(list, &portalGroupList.Items[idx])
	}
	return &portalGroupSet{set: makeGenericPortalGroupSet(list)}
}

func (s *portalGroupSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *portalGroupSet) List(filterResource ...func(*apimanagement_gloo_solo_io_v2.PortalGroup) bool) []*apimanagement_gloo_solo_io_v2.PortalGroup {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.PortalGroup))
		})
	}

	objs := s.Generic().List(genericFilters...)
	portalGroupList := make([]*apimanagement_gloo_solo_io_v2.PortalGroup, 0, len(objs))
	for _, obj := range objs {
		portalGroupList = append(portalGroupList, obj.(*apimanagement_gloo_solo_io_v2.PortalGroup))
	}
	return portalGroupList
}

func (s *portalGroupSet) UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.PortalGroup) bool) []*apimanagement_gloo_solo_io_v2.PortalGroup {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.PortalGroup))
		})
	}

	var portalGroupList []*apimanagement_gloo_solo_io_v2.PortalGroup
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		portalGroupList = append(portalGroupList, obj.(*apimanagement_gloo_solo_io_v2.PortalGroup))
	}
	return portalGroupList
}

func (s *portalGroupSet) Map() map[string]*apimanagement_gloo_solo_io_v2.PortalGroup {
	if s == nil {
		return nil
	}

	newMap := map[string]*apimanagement_gloo_solo_io_v2.PortalGroup{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*apimanagement_gloo_solo_io_v2.PortalGroup)
	}
	return newMap
}

func (s *portalGroupSet) Insert(
	portalGroupList ...*apimanagement_gloo_solo_io_v2.PortalGroup,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range portalGroupList {
		s.Generic().Insert(obj)
	}
}

func (s *portalGroupSet) Has(portalGroup ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(portalGroup)
}

func (s *portalGroupSet) Equal(
	portalGroupSet PortalGroupSet,
) bool {
	if s == nil {
		return portalGroupSet == nil
	}
	return s.Generic().Equal(portalGroupSet.Generic())
}

func (s *portalGroupSet) Delete(PortalGroup ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(PortalGroup)
}

func (s *portalGroupSet) Union(set PortalGroupSet) PortalGroupSet {
	if s == nil {
		return set
	}
	return NewPortalGroupSet(append(s.List(), set.List()...)...)
}

func (s *portalGroupSet) Difference(set PortalGroupSet) PortalGroupSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &portalGroupSet{set: newSet}
}

func (s *portalGroupSet) Intersection(set PortalGroupSet) PortalGroupSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var portalGroupList []*apimanagement_gloo_solo_io_v2.PortalGroup
	for _, obj := range newSet.List() {
		portalGroupList = append(portalGroupList, obj.(*apimanagement_gloo_solo_io_v2.PortalGroup))
	}
	return NewPortalGroupSet(portalGroupList...)
}

func (s *portalGroupSet) Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.PortalGroup, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find PortalGroup %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&apimanagement_gloo_solo_io_v2.PortalGroup{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*apimanagement_gloo_solo_io_v2.PortalGroup), nil
}

func (s *portalGroupSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *portalGroupSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *portalGroupSet) Delta(newSet PortalGroupSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *portalGroupSet) Clone() PortalGroupSet {
	if s == nil {
		return nil
	}
	return &portalGroupSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type ApiProductSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*apimanagement_gloo_solo_io_v2.ApiProduct) bool) []*apimanagement_gloo_solo_io_v2.ApiProduct
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.ApiProduct) bool) []*apimanagement_gloo_solo_io_v2.ApiProduct
	// Return the Set as a map of key to resource.
	Map() map[string]*apimanagement_gloo_solo_io_v2.ApiProduct
	// Insert a resource into the set.
	Insert(apiProduct ...*apimanagement_gloo_solo_io_v2.ApiProduct)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(apiProductSet ApiProductSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(apiProduct ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(apiProduct ezkube.ResourceId)
	// Return the union with the provided set
	Union(set ApiProductSet) ApiProductSet
	// Return the difference with the provided set
	Difference(set ApiProductSet) ApiProductSet
	// Return the intersection with the provided set
	Intersection(set ApiProductSet) ApiProductSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.ApiProduct, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another ApiProductSet
	Delta(newSet ApiProductSet) sksets.ResourceDelta
	// Create a deep copy of the current ApiProductSet
	Clone() ApiProductSet
}

func makeGenericApiProductSet(apiProductList []*apimanagement_gloo_solo_io_v2.ApiProduct) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range apiProductList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type apiProductSet struct {
	set sksets.ResourceSet
}

func NewApiProductSet(apiProductList ...*apimanagement_gloo_solo_io_v2.ApiProduct) ApiProductSet {
	return &apiProductSet{set: makeGenericApiProductSet(apiProductList)}
}

func NewApiProductSetFromList(apiProductList *apimanagement_gloo_solo_io_v2.ApiProductList) ApiProductSet {
	list := make([]*apimanagement_gloo_solo_io_v2.ApiProduct, 0, len(apiProductList.Items))
	for idx := range apiProductList.Items {
		list = append(list, &apiProductList.Items[idx])
	}
	return &apiProductSet{set: makeGenericApiProductSet(list)}
}

func (s *apiProductSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *apiProductSet) List(filterResource ...func(*apimanagement_gloo_solo_io_v2.ApiProduct) bool) []*apimanagement_gloo_solo_io_v2.ApiProduct {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.ApiProduct))
		})
	}

	objs := s.Generic().List(genericFilters...)
	apiProductList := make([]*apimanagement_gloo_solo_io_v2.ApiProduct, 0, len(objs))
	for _, obj := range objs {
		apiProductList = append(apiProductList, obj.(*apimanagement_gloo_solo_io_v2.ApiProduct))
	}
	return apiProductList
}

func (s *apiProductSet) UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.ApiProduct) bool) []*apimanagement_gloo_solo_io_v2.ApiProduct {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.ApiProduct))
		})
	}

	var apiProductList []*apimanagement_gloo_solo_io_v2.ApiProduct
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		apiProductList = append(apiProductList, obj.(*apimanagement_gloo_solo_io_v2.ApiProduct))
	}
	return apiProductList
}

func (s *apiProductSet) Map() map[string]*apimanagement_gloo_solo_io_v2.ApiProduct {
	if s == nil {
		return nil
	}

	newMap := map[string]*apimanagement_gloo_solo_io_v2.ApiProduct{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*apimanagement_gloo_solo_io_v2.ApiProduct)
	}
	return newMap
}

func (s *apiProductSet) Insert(
	apiProductList ...*apimanagement_gloo_solo_io_v2.ApiProduct,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range apiProductList {
		s.Generic().Insert(obj)
	}
}

func (s *apiProductSet) Has(apiProduct ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(apiProduct)
}

func (s *apiProductSet) Equal(
	apiProductSet ApiProductSet,
) bool {
	if s == nil {
		return apiProductSet == nil
	}
	return s.Generic().Equal(apiProductSet.Generic())
}

func (s *apiProductSet) Delete(ApiProduct ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(ApiProduct)
}

func (s *apiProductSet) Union(set ApiProductSet) ApiProductSet {
	if s == nil {
		return set
	}
	return NewApiProductSet(append(s.List(), set.List()...)...)
}

func (s *apiProductSet) Difference(set ApiProductSet) ApiProductSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &apiProductSet{set: newSet}
}

func (s *apiProductSet) Intersection(set ApiProductSet) ApiProductSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var apiProductList []*apimanagement_gloo_solo_io_v2.ApiProduct
	for _, obj := range newSet.List() {
		apiProductList = append(apiProductList, obj.(*apimanagement_gloo_solo_io_v2.ApiProduct))
	}
	return NewApiProductSet(apiProductList...)
}

func (s *apiProductSet) Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.ApiProduct, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find ApiProduct %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&apimanagement_gloo_solo_io_v2.ApiProduct{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*apimanagement_gloo_solo_io_v2.ApiProduct), nil
}

func (s *apiProductSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *apiProductSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *apiProductSet) Delta(newSet ApiProductSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *apiProductSet) Clone() ApiProductSet {
	if s == nil {
		return nil
	}
	return &apiProductSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type ApiSchemaDiscoverySet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery) bool) []*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery) bool) []*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery
	// Return the Set as a map of key to resource.
	Map() map[string]*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery
	// Insert a resource into the set.
	Insert(apiSchemaDiscovery ...*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(apiSchemaDiscoverySet ApiSchemaDiscoverySet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(apiSchemaDiscovery ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(apiSchemaDiscovery ezkube.ResourceId)
	// Return the union with the provided set
	Union(set ApiSchemaDiscoverySet) ApiSchemaDiscoverySet
	// Return the difference with the provided set
	Difference(set ApiSchemaDiscoverySet) ApiSchemaDiscoverySet
	// Return the intersection with the provided set
	Intersection(set ApiSchemaDiscoverySet) ApiSchemaDiscoverySet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another ApiSchemaDiscoverySet
	Delta(newSet ApiSchemaDiscoverySet) sksets.ResourceDelta
	// Create a deep copy of the current ApiSchemaDiscoverySet
	Clone() ApiSchemaDiscoverySet
}

func makeGenericApiSchemaDiscoverySet(apiSchemaDiscoveryList []*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range apiSchemaDiscoveryList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type apiSchemaDiscoverySet struct {
	set sksets.ResourceSet
}

func NewApiSchemaDiscoverySet(apiSchemaDiscoveryList ...*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery) ApiSchemaDiscoverySet {
	return &apiSchemaDiscoverySet{set: makeGenericApiSchemaDiscoverySet(apiSchemaDiscoveryList)}
}

func NewApiSchemaDiscoverySetFromList(apiSchemaDiscoveryList *apimanagement_gloo_solo_io_v2.ApiSchemaDiscoveryList) ApiSchemaDiscoverySet {
	list := make([]*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery, 0, len(apiSchemaDiscoveryList.Items))
	for idx := range apiSchemaDiscoveryList.Items {
		list = append(list, &apiSchemaDiscoveryList.Items[idx])
	}
	return &apiSchemaDiscoverySet{set: makeGenericApiSchemaDiscoverySet(list)}
}

func (s *apiSchemaDiscoverySet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *apiSchemaDiscoverySet) List(filterResource ...func(*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery) bool) []*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery))
		})
	}

	objs := s.Generic().List(genericFilters...)
	apiSchemaDiscoveryList := make([]*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery, 0, len(objs))
	for _, obj := range objs {
		apiSchemaDiscoveryList = append(apiSchemaDiscoveryList, obj.(*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery))
	}
	return apiSchemaDiscoveryList
}

func (s *apiSchemaDiscoverySet) UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery) bool) []*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery))
		})
	}

	var apiSchemaDiscoveryList []*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		apiSchemaDiscoveryList = append(apiSchemaDiscoveryList, obj.(*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery))
	}
	return apiSchemaDiscoveryList
}

func (s *apiSchemaDiscoverySet) Map() map[string]*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery {
	if s == nil {
		return nil
	}

	newMap := map[string]*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery)
	}
	return newMap
}

func (s *apiSchemaDiscoverySet) Insert(
	apiSchemaDiscoveryList ...*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range apiSchemaDiscoveryList {
		s.Generic().Insert(obj)
	}
}

func (s *apiSchemaDiscoverySet) Has(apiSchemaDiscovery ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(apiSchemaDiscovery)
}

func (s *apiSchemaDiscoverySet) Equal(
	apiSchemaDiscoverySet ApiSchemaDiscoverySet,
) bool {
	if s == nil {
		return apiSchemaDiscoverySet == nil
	}
	return s.Generic().Equal(apiSchemaDiscoverySet.Generic())
}

func (s *apiSchemaDiscoverySet) Delete(ApiSchemaDiscovery ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(ApiSchemaDiscovery)
}

func (s *apiSchemaDiscoverySet) Union(set ApiSchemaDiscoverySet) ApiSchemaDiscoverySet {
	if s == nil {
		return set
	}
	return NewApiSchemaDiscoverySet(append(s.List(), set.List()...)...)
}

func (s *apiSchemaDiscoverySet) Difference(set ApiSchemaDiscoverySet) ApiSchemaDiscoverySet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &apiSchemaDiscoverySet{set: newSet}
}

func (s *apiSchemaDiscoverySet) Intersection(set ApiSchemaDiscoverySet) ApiSchemaDiscoverySet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var apiSchemaDiscoveryList []*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery
	for _, obj := range newSet.List() {
		apiSchemaDiscoveryList = append(apiSchemaDiscoveryList, obj.(*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery))
	}
	return NewApiSchemaDiscoverySet(apiSchemaDiscoveryList...)
}

func (s *apiSchemaDiscoverySet) Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find ApiSchemaDiscovery %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*apimanagement_gloo_solo_io_v2.ApiSchemaDiscovery), nil
}

func (s *apiSchemaDiscoverySet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *apiSchemaDiscoverySet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *apiSchemaDiscoverySet) Delta(newSet ApiSchemaDiscoverySet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *apiSchemaDiscoverySet) Clone() ApiSchemaDiscoverySet {
	if s == nil {
		return nil
	}
	return &apiSchemaDiscoverySet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}
