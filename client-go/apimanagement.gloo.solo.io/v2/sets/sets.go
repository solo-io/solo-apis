// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v2sets

import (
	apimanagement_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/apimanagement.gloo.solo.io/v2"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type GraphQLStitchedSchemaSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema) bool) []*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema) bool) []*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema
	// Return the Set as a map of key to resource.
	Map() map[string]*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema
	// Insert a resource into the set.
	Insert(graphQLStitchedSchema ...*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(graphQLStitchedSchemaSet GraphQLStitchedSchemaSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(graphQLStitchedSchema ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(graphQLStitchedSchema ezkube.ResourceId)
	// Return the union with the provided set
	Union(set GraphQLStitchedSchemaSet) GraphQLStitchedSchemaSet
	// Return the difference with the provided set
	Difference(set GraphQLStitchedSchemaSet) GraphQLStitchedSchemaSet
	// Return the intersection with the provided set
	Intersection(set GraphQLStitchedSchemaSet) GraphQLStitchedSchemaSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another GraphQLStitchedSchemaSet
	Delta(newSet GraphQLStitchedSchemaSet) sksets.ResourceDelta
	// Create a deep copy of the current GraphQLStitchedSchemaSet
	Clone() GraphQLStitchedSchemaSet
}

func makeGenericGraphQLStitchedSchemaSet(graphQLStitchedSchemaList []*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range graphQLStitchedSchemaList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type graphQLStitchedSchemaSet struct {
	set sksets.ResourceSet
}

func NewGraphQLStitchedSchemaSet(graphQLStitchedSchemaList ...*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema) GraphQLStitchedSchemaSet {
	return &graphQLStitchedSchemaSet{set: makeGenericGraphQLStitchedSchemaSet(graphQLStitchedSchemaList)}
}

func NewGraphQLStitchedSchemaSetFromList(graphQLStitchedSchemaList *apimanagement_gloo_solo_io_v2.GraphQLStitchedSchemaList) GraphQLStitchedSchemaSet {
	list := make([]*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema, 0, len(graphQLStitchedSchemaList.Items))
	for idx := range graphQLStitchedSchemaList.Items {
		list = append(list, &graphQLStitchedSchemaList.Items[idx])
	}
	return &graphQLStitchedSchemaSet{set: makeGenericGraphQLStitchedSchemaSet(list)}
}

func (s *graphQLStitchedSchemaSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *graphQLStitchedSchemaSet) List(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema) bool) []*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema))
		})
	}

	objs := s.Generic().List(genericFilters...)
	graphQLStitchedSchemaList := make([]*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema, 0, len(objs))
	for _, obj := range objs {
		graphQLStitchedSchemaList = append(graphQLStitchedSchemaList, obj.(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema))
	}
	return graphQLStitchedSchemaList
}

func (s *graphQLStitchedSchemaSet) UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema) bool) []*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema))
		})
	}

	var graphQLStitchedSchemaList []*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		graphQLStitchedSchemaList = append(graphQLStitchedSchemaList, obj.(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema))
	}
	return graphQLStitchedSchemaList
}

func (s *graphQLStitchedSchemaSet) Map() map[string]*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema {
	if s == nil {
		return nil
	}

	newMap := map[string]*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema)
	}
	return newMap
}

func (s *graphQLStitchedSchemaSet) Insert(
	graphQLStitchedSchemaList ...*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range graphQLStitchedSchemaList {
		s.Generic().Insert(obj)
	}
}

func (s *graphQLStitchedSchemaSet) Has(graphQLStitchedSchema ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(graphQLStitchedSchema)
}

func (s *graphQLStitchedSchemaSet) Equal(
	graphQLStitchedSchemaSet GraphQLStitchedSchemaSet,
) bool {
	if s == nil {
		return graphQLStitchedSchemaSet == nil
	}
	return s.Generic().Equal(graphQLStitchedSchemaSet.Generic())
}

func (s *graphQLStitchedSchemaSet) Delete(GraphQLStitchedSchema ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(GraphQLStitchedSchema)
}

func (s *graphQLStitchedSchemaSet) Union(set GraphQLStitchedSchemaSet) GraphQLStitchedSchemaSet {
	if s == nil {
		return set
	}
	return NewGraphQLStitchedSchemaSet(append(s.List(), set.List()...)...)
}

func (s *graphQLStitchedSchemaSet) Difference(set GraphQLStitchedSchemaSet) GraphQLStitchedSchemaSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &graphQLStitchedSchemaSet{set: newSet}
}

func (s *graphQLStitchedSchemaSet) Intersection(set GraphQLStitchedSchemaSet) GraphQLStitchedSchemaSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var graphQLStitchedSchemaList []*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema
	for _, obj := range newSet.List() {
		graphQLStitchedSchemaList = append(graphQLStitchedSchemaList, obj.(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema))
	}
	return NewGraphQLStitchedSchemaSet(graphQLStitchedSchemaList...)
}

func (s *graphQLStitchedSchemaSet) Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find GraphQLStitchedSchema %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*apimanagement_gloo_solo_io_v2.GraphQLStitchedSchema), nil
}

func (s *graphQLStitchedSchemaSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *graphQLStitchedSchemaSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *graphQLStitchedSchemaSet) Delta(newSet GraphQLStitchedSchemaSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *graphQLStitchedSchemaSet) Clone() GraphQLStitchedSchemaSet {
	if s == nil {
		return nil
	}
	return &graphQLStitchedSchemaSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type GraphQLResolverMapSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap) bool) []*apimanagement_gloo_solo_io_v2.GraphQLResolverMap
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap) bool) []*apimanagement_gloo_solo_io_v2.GraphQLResolverMap
	// Return the Set as a map of key to resource.
	Map() map[string]*apimanagement_gloo_solo_io_v2.GraphQLResolverMap
	// Insert a resource into the set.
	Insert(graphQLResolverMap ...*apimanagement_gloo_solo_io_v2.GraphQLResolverMap)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(graphQLResolverMapSet GraphQLResolverMapSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(graphQLResolverMap ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(graphQLResolverMap ezkube.ResourceId)
	// Return the union with the provided set
	Union(set GraphQLResolverMapSet) GraphQLResolverMapSet
	// Return the difference with the provided set
	Difference(set GraphQLResolverMapSet) GraphQLResolverMapSet
	// Return the intersection with the provided set
	Intersection(set GraphQLResolverMapSet) GraphQLResolverMapSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.GraphQLResolverMap, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another GraphQLResolverMapSet
	Delta(newSet GraphQLResolverMapSet) sksets.ResourceDelta
	// Create a deep copy of the current GraphQLResolverMapSet
	Clone() GraphQLResolverMapSet
}

func makeGenericGraphQLResolverMapSet(graphQLResolverMapList []*apimanagement_gloo_solo_io_v2.GraphQLResolverMap) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range graphQLResolverMapList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type graphQLResolverMapSet struct {
	set sksets.ResourceSet
}

func NewGraphQLResolverMapSet(graphQLResolverMapList ...*apimanagement_gloo_solo_io_v2.GraphQLResolverMap) GraphQLResolverMapSet {
	return &graphQLResolverMapSet{set: makeGenericGraphQLResolverMapSet(graphQLResolverMapList)}
}

func NewGraphQLResolverMapSetFromList(graphQLResolverMapList *apimanagement_gloo_solo_io_v2.GraphQLResolverMapList) GraphQLResolverMapSet {
	list := make([]*apimanagement_gloo_solo_io_v2.GraphQLResolverMap, 0, len(graphQLResolverMapList.Items))
	for idx := range graphQLResolverMapList.Items {
		list = append(list, &graphQLResolverMapList.Items[idx])
	}
	return &graphQLResolverMapSet{set: makeGenericGraphQLResolverMapSet(list)}
}

func (s *graphQLResolverMapSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *graphQLResolverMapSet) List(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap) bool) []*apimanagement_gloo_solo_io_v2.GraphQLResolverMap {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap))
		})
	}

	objs := s.Generic().List(genericFilters...)
	graphQLResolverMapList := make([]*apimanagement_gloo_solo_io_v2.GraphQLResolverMap, 0, len(objs))
	for _, obj := range objs {
		graphQLResolverMapList = append(graphQLResolverMapList, obj.(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap))
	}
	return graphQLResolverMapList
}

func (s *graphQLResolverMapSet) UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap) bool) []*apimanagement_gloo_solo_io_v2.GraphQLResolverMap {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap))
		})
	}

	var graphQLResolverMapList []*apimanagement_gloo_solo_io_v2.GraphQLResolverMap
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		graphQLResolverMapList = append(graphQLResolverMapList, obj.(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap))
	}
	return graphQLResolverMapList
}

func (s *graphQLResolverMapSet) Map() map[string]*apimanagement_gloo_solo_io_v2.GraphQLResolverMap {
	if s == nil {
		return nil
	}

	newMap := map[string]*apimanagement_gloo_solo_io_v2.GraphQLResolverMap{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap)
	}
	return newMap
}

func (s *graphQLResolverMapSet) Insert(
	graphQLResolverMapList ...*apimanagement_gloo_solo_io_v2.GraphQLResolverMap,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range graphQLResolverMapList {
		s.Generic().Insert(obj)
	}
}

func (s *graphQLResolverMapSet) Has(graphQLResolverMap ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(graphQLResolverMap)
}

func (s *graphQLResolverMapSet) Equal(
	graphQLResolverMapSet GraphQLResolverMapSet,
) bool {
	if s == nil {
		return graphQLResolverMapSet == nil
	}
	return s.Generic().Equal(graphQLResolverMapSet.Generic())
}

func (s *graphQLResolverMapSet) Delete(GraphQLResolverMap ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(GraphQLResolverMap)
}

func (s *graphQLResolverMapSet) Union(set GraphQLResolverMapSet) GraphQLResolverMapSet {
	if s == nil {
		return set
	}
	return NewGraphQLResolverMapSet(append(s.List(), set.List()...)...)
}

func (s *graphQLResolverMapSet) Difference(set GraphQLResolverMapSet) GraphQLResolverMapSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &graphQLResolverMapSet{set: newSet}
}

func (s *graphQLResolverMapSet) Intersection(set GraphQLResolverMapSet) GraphQLResolverMapSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var graphQLResolverMapList []*apimanagement_gloo_solo_io_v2.GraphQLResolverMap
	for _, obj := range newSet.List() {
		graphQLResolverMapList = append(graphQLResolverMapList, obj.(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap))
	}
	return NewGraphQLResolverMapSet(graphQLResolverMapList...)
}

func (s *graphQLResolverMapSet) Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.GraphQLResolverMap, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find GraphQLResolverMap %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&apimanagement_gloo_solo_io_v2.GraphQLResolverMap{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*apimanagement_gloo_solo_io_v2.GraphQLResolverMap), nil
}

func (s *graphQLResolverMapSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *graphQLResolverMapSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *graphQLResolverMapSet) Delta(newSet GraphQLResolverMapSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *graphQLResolverMapSet) Clone() GraphQLResolverMapSet {
	if s == nil {
		return nil
	}
	return &graphQLResolverMapSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type GraphQLSchemaSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLSchema) bool) []*apimanagement_gloo_solo_io_v2.GraphQLSchema
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLSchema) bool) []*apimanagement_gloo_solo_io_v2.GraphQLSchema
	// Return the Set as a map of key to resource.
	Map() map[string]*apimanagement_gloo_solo_io_v2.GraphQLSchema
	// Insert a resource into the set.
	Insert(graphQLSchema ...*apimanagement_gloo_solo_io_v2.GraphQLSchema)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(graphQLSchemaSet GraphQLSchemaSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(graphQLSchema ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(graphQLSchema ezkube.ResourceId)
	// Return the union with the provided set
	Union(set GraphQLSchemaSet) GraphQLSchemaSet
	// Return the difference with the provided set
	Difference(set GraphQLSchemaSet) GraphQLSchemaSet
	// Return the intersection with the provided set
	Intersection(set GraphQLSchemaSet) GraphQLSchemaSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.GraphQLSchema, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another GraphQLSchemaSet
	Delta(newSet GraphQLSchemaSet) sksets.ResourceDelta
	// Create a deep copy of the current GraphQLSchemaSet
	Clone() GraphQLSchemaSet
}

func makeGenericGraphQLSchemaSet(graphQLSchemaList []*apimanagement_gloo_solo_io_v2.GraphQLSchema) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range graphQLSchemaList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type graphQLSchemaSet struct {
	set sksets.ResourceSet
}

func NewGraphQLSchemaSet(graphQLSchemaList ...*apimanagement_gloo_solo_io_v2.GraphQLSchema) GraphQLSchemaSet {
	return &graphQLSchemaSet{set: makeGenericGraphQLSchemaSet(graphQLSchemaList)}
}

func NewGraphQLSchemaSetFromList(graphQLSchemaList *apimanagement_gloo_solo_io_v2.GraphQLSchemaList) GraphQLSchemaSet {
	list := make([]*apimanagement_gloo_solo_io_v2.GraphQLSchema, 0, len(graphQLSchemaList.Items))
	for idx := range graphQLSchemaList.Items {
		list = append(list, &graphQLSchemaList.Items[idx])
	}
	return &graphQLSchemaSet{set: makeGenericGraphQLSchemaSet(list)}
}

func (s *graphQLSchemaSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *graphQLSchemaSet) List(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLSchema) bool) []*apimanagement_gloo_solo_io_v2.GraphQLSchema {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.GraphQLSchema))
		})
	}

	objs := s.Generic().List(genericFilters...)
	graphQLSchemaList := make([]*apimanagement_gloo_solo_io_v2.GraphQLSchema, 0, len(objs))
	for _, obj := range objs {
		graphQLSchemaList = append(graphQLSchemaList, obj.(*apimanagement_gloo_solo_io_v2.GraphQLSchema))
	}
	return graphQLSchemaList
}

func (s *graphQLSchemaSet) UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.GraphQLSchema) bool) []*apimanagement_gloo_solo_io_v2.GraphQLSchema {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.GraphQLSchema))
		})
	}

	var graphQLSchemaList []*apimanagement_gloo_solo_io_v2.GraphQLSchema
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		graphQLSchemaList = append(graphQLSchemaList, obj.(*apimanagement_gloo_solo_io_v2.GraphQLSchema))
	}
	return graphQLSchemaList
}

func (s *graphQLSchemaSet) Map() map[string]*apimanagement_gloo_solo_io_v2.GraphQLSchema {
	if s == nil {
		return nil
	}

	newMap := map[string]*apimanagement_gloo_solo_io_v2.GraphQLSchema{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*apimanagement_gloo_solo_io_v2.GraphQLSchema)
	}
	return newMap
}

func (s *graphQLSchemaSet) Insert(
	graphQLSchemaList ...*apimanagement_gloo_solo_io_v2.GraphQLSchema,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range graphQLSchemaList {
		s.Generic().Insert(obj)
	}
}

func (s *graphQLSchemaSet) Has(graphQLSchema ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(graphQLSchema)
}

func (s *graphQLSchemaSet) Equal(
	graphQLSchemaSet GraphQLSchemaSet,
) bool {
	if s == nil {
		return graphQLSchemaSet == nil
	}
	return s.Generic().Equal(graphQLSchemaSet.Generic())
}

func (s *graphQLSchemaSet) Delete(GraphQLSchema ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(GraphQLSchema)
}

func (s *graphQLSchemaSet) Union(set GraphQLSchemaSet) GraphQLSchemaSet {
	if s == nil {
		return set
	}
	return NewGraphQLSchemaSet(append(s.List(), set.List()...)...)
}

func (s *graphQLSchemaSet) Difference(set GraphQLSchemaSet) GraphQLSchemaSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &graphQLSchemaSet{set: newSet}
}

func (s *graphQLSchemaSet) Intersection(set GraphQLSchemaSet) GraphQLSchemaSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var graphQLSchemaList []*apimanagement_gloo_solo_io_v2.GraphQLSchema
	for _, obj := range newSet.List() {
		graphQLSchemaList = append(graphQLSchemaList, obj.(*apimanagement_gloo_solo_io_v2.GraphQLSchema))
	}
	return NewGraphQLSchemaSet(graphQLSchemaList...)
}

func (s *graphQLSchemaSet) Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.GraphQLSchema, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find GraphQLSchema %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&apimanagement_gloo_solo_io_v2.GraphQLSchema{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*apimanagement_gloo_solo_io_v2.GraphQLSchema), nil
}

func (s *graphQLSchemaSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *graphQLSchemaSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *graphQLSchemaSet) Delta(newSet GraphQLSchemaSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *graphQLSchemaSet) Clone() GraphQLSchemaSet {
	if s == nil {
		return nil
	}
	return &graphQLSchemaSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type ApiDocSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*apimanagement_gloo_solo_io_v2.ApiDoc) bool) []*apimanagement_gloo_solo_io_v2.ApiDoc
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.ApiDoc) bool) []*apimanagement_gloo_solo_io_v2.ApiDoc
	// Return the Set as a map of key to resource.
	Map() map[string]*apimanagement_gloo_solo_io_v2.ApiDoc
	// Insert a resource into the set.
	Insert(apiDoc ...*apimanagement_gloo_solo_io_v2.ApiDoc)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(apiDocSet ApiDocSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(apiDoc ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(apiDoc ezkube.ResourceId)
	// Return the union with the provided set
	Union(set ApiDocSet) ApiDocSet
	// Return the difference with the provided set
	Difference(set ApiDocSet) ApiDocSet
	// Return the intersection with the provided set
	Intersection(set ApiDocSet) ApiDocSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.ApiDoc, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another ApiDocSet
	Delta(newSet ApiDocSet) sksets.ResourceDelta
	// Create a deep copy of the current ApiDocSet
	Clone() ApiDocSet
}

func makeGenericApiDocSet(apiDocList []*apimanagement_gloo_solo_io_v2.ApiDoc) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range apiDocList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type apiDocSet struct {
	set sksets.ResourceSet
}

func NewApiDocSet(apiDocList ...*apimanagement_gloo_solo_io_v2.ApiDoc) ApiDocSet {
	return &apiDocSet{set: makeGenericApiDocSet(apiDocList)}
}

func NewApiDocSetFromList(apiDocList *apimanagement_gloo_solo_io_v2.ApiDocList) ApiDocSet {
	list := make([]*apimanagement_gloo_solo_io_v2.ApiDoc, 0, len(apiDocList.Items))
	for idx := range apiDocList.Items {
		list = append(list, &apiDocList.Items[idx])
	}
	return &apiDocSet{set: makeGenericApiDocSet(list)}
}

func (s *apiDocSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *apiDocSet) List(filterResource ...func(*apimanagement_gloo_solo_io_v2.ApiDoc) bool) []*apimanagement_gloo_solo_io_v2.ApiDoc {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.ApiDoc))
		})
	}

	objs := s.Generic().List(genericFilters...)
	apiDocList := make([]*apimanagement_gloo_solo_io_v2.ApiDoc, 0, len(objs))
	for _, obj := range objs {
		apiDocList = append(apiDocList, obj.(*apimanagement_gloo_solo_io_v2.ApiDoc))
	}
	return apiDocList
}

func (s *apiDocSet) UnsortedList(filterResource ...func(*apimanagement_gloo_solo_io_v2.ApiDoc) bool) []*apimanagement_gloo_solo_io_v2.ApiDoc {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*apimanagement_gloo_solo_io_v2.ApiDoc))
		})
	}

	var apiDocList []*apimanagement_gloo_solo_io_v2.ApiDoc
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		apiDocList = append(apiDocList, obj.(*apimanagement_gloo_solo_io_v2.ApiDoc))
	}
	return apiDocList
}

func (s *apiDocSet) Map() map[string]*apimanagement_gloo_solo_io_v2.ApiDoc {
	if s == nil {
		return nil
	}

	newMap := map[string]*apimanagement_gloo_solo_io_v2.ApiDoc{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*apimanagement_gloo_solo_io_v2.ApiDoc)
	}
	return newMap
}

func (s *apiDocSet) Insert(
	apiDocList ...*apimanagement_gloo_solo_io_v2.ApiDoc,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range apiDocList {
		s.Generic().Insert(obj)
	}
}

func (s *apiDocSet) Has(apiDoc ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(apiDoc)
}

func (s *apiDocSet) Equal(
	apiDocSet ApiDocSet,
) bool {
	if s == nil {
		return apiDocSet == nil
	}
	return s.Generic().Equal(apiDocSet.Generic())
}

func (s *apiDocSet) Delete(ApiDoc ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(ApiDoc)
}

func (s *apiDocSet) Union(set ApiDocSet) ApiDocSet {
	if s == nil {
		return set
	}
	return NewApiDocSet(append(s.List(), set.List()...)...)
}

func (s *apiDocSet) Difference(set ApiDocSet) ApiDocSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &apiDocSet{set: newSet}
}

func (s *apiDocSet) Intersection(set ApiDocSet) ApiDocSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var apiDocList []*apimanagement_gloo_solo_io_v2.ApiDoc
	for _, obj := range newSet.List() {
		apiDocList = append(apiDocList, obj.(*apimanagement_gloo_solo_io_v2.ApiDoc))
	}
	return NewApiDocSet(apiDocList...)
}

func (s *apiDocSet) Find(id ezkube.ResourceId) (*apimanagement_gloo_solo_io_v2.ApiDoc, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find ApiDoc %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&apimanagement_gloo_solo_io_v2.ApiDoc{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*apimanagement_gloo_solo_io_v2.ApiDoc), nil
}

func (s *apiDocSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *apiDocSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *apiDocSet) Delta(newSet ApiDocSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *apiDocSet) Clone() ApiDocSet {
	if s == nil {
		return nil
	}
	return &apiDocSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}
