// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/apimanagement/v2/graphql_schema.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *GraphQLSchemaSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GraphQLSchemaSpec)
	if !ok {
		that2, ok := that.(GraphQLSchemaSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetSchemaRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSchemaRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSchemaRef(), target.GetSchemaRef()) {
			return false
		}
	}

	switch m.GraphqlType.(type) {

	case *GraphQLSchemaSpec_Proxied:
		if _, ok := target.GraphqlType.(*GraphQLSchemaSpec_Proxied); !ok {
			return false
		}

		if h, ok := interface{}(m.GetProxied()).(equality.Equalizer); ok {
			if !h.Equal(target.GetProxied()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetProxied(), target.GetProxied()) {
				return false
			}
		}

	case *GraphQLSchemaSpec_Resolved:
		if _, ok := target.GraphqlType.(*GraphQLSchemaSpec_Resolved); !ok {
			return false
		}

		if h, ok := interface{}(m.GetResolved()).(equality.Equalizer); ok {
			if !h.Equal(target.GetResolved()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetResolved(), target.GetResolved()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.GraphqlType != target.GraphqlType {
			return false
		}
	}

	return true
}

// Equal function
func (m *GraphQLSchemaStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GraphQLSchemaStatus)
	if !ok {
		that2, ok := that.(GraphQLSchemaStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetCommon()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCommon()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCommon(), target.GetCommon()) {
			return false
		}
	}

	if strings.Compare(m.GetOwnedByWorkspace(), target.GetOwnedByWorkspace()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *GraphQLSchemaReport) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GraphQLSchemaReport)
	if !ok {
		that2, ok := that.(GraphQLSchemaReport)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetWorkspaces()) != len(target.GetWorkspaces()) {
		return false
	}
	for k, v := range m.GetWorkspaces() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetWorkspaces()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetWorkspaces()[k]) {
				return false
			}
		}

	}

	if strings.Compare(m.GetOwnerWorkspace(), target.GetOwnerWorkspace()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *GraphQLSchemaSpec_ResolvedGraphQL) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GraphQLSchemaSpec_ResolvedGraphQL)
	if !ok {
		that2, ok := that.(GraphQLSchemaSpec_ResolvedGraphQL)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetResolverMapRefs()) != len(target.GetResolverMapRefs()) {
		return false
	}
	for idx, v := range m.GetResolverMapRefs() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetResolverMapRefs()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetResolverMapRefs()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetOptions(), target.GetOptions()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *GraphQLSchemaSpec_ProxiedGraphQL) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GraphQLSchemaSpec_ProxiedGraphQL)
	if !ok {
		that2, ok := that.(GraphQLSchemaSpec_ProxiedGraphQL)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetGraphqlServers()) != len(target.GetGraphqlServers()) {
		return false
	}
	for idx, v := range m.GetGraphqlServers() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetGraphqlServers()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetGraphqlServers()[idx]) {
				return false
			}
		}

	}

	if len(m.GetVariables()) != len(target.GetVariables()) {
		return false
	}
	for k, v := range m.GetVariables() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetVariables()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetVariables()[k]) {
				return false
			}
		}

	}

	if len(m.GetHeaders()) != len(target.GetHeaders()) {
		return false
	}
	for k, v := range m.GetHeaders() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetHeaders()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetHeaders()[k]) {
				return false
			}
		}

	}

	if len(m.GetQueryParams()) != len(target.GetQueryParams()) {
		return false
	}
	for k, v := range m.GetQueryParams() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetQueryParams()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetQueryParams()[k]) {
				return false
			}
		}

	}

	if strings.Compare(m.GetSpanName(), target.GetSpanName()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetTimeout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTimeout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTimeout(), target.GetTimeout()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetOptions(), target.GetOptions()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *GraphQLSchemaSpec_ResolvedGraphQL_Options) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GraphQLSchemaSpec_ResolvedGraphQL_Options)
	if !ok {
		that2, ok := that.(GraphQLSchemaSpec_ResolvedGraphQL_Options)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetMaxDepth()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxDepth()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxDepth(), target.GetMaxDepth()) {
			return false
		}
	}

	if m.GetEnableIntrospection() != target.GetEnableIntrospection() {
		return false
	}

	return true
}

// Equal function
func (m *GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction)
	if !ok {
		that2, ok := that.(GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.Extraction.(type) {

	case *GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_DynamicMetadata:
		if _, ok := target.Extraction.(*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_DynamicMetadata); !ok {
			return false
		}

		if h, ok := interface{}(m.GetDynamicMetadata()).(equality.Equalizer); ok {
			if !h.Equal(target.GetDynamicMetadata()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetDynamicMetadata(), target.GetDynamicMetadata()) {
				return false
			}
		}

	case *GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_RequestHeader:
		if _, ok := target.Extraction.(*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_RequestHeader); !ok {
			return false
		}

		if strings.Compare(m.GetRequestHeader(), target.GetRequestHeader()) != 0 {
			return false
		}

	case *GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_Json:
		if _, ok := target.Extraction.(*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_Json); !ok {
			return false
		}

		if h, ok := interface{}(m.GetJson()).(equality.Equalizer); ok {
			if !h.Equal(target.GetJson()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetJson(), target.GetJson()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.Extraction != target.Extraction {
			return false
		}
	}

	return true
}

// Equal function
func (m *GraphQLSchemaSpec_ProxiedGraphQL_Options) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GraphQLSchemaSpec_ProxiedGraphQL_Options)
	if !ok {
		that2, ok := that.(GraphQLSchemaSpec_ProxiedGraphQL_Options)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetAllowIntrospection() != target.GetAllowIntrospection() {
		return false
	}

	return true
}
