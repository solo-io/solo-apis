// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/apimanagement/v2/graphql_schema.proto

package v2

import (
	reflect "reflect"
	sync "sync"

	duration "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/solo-io/cue/encoding/protobuf/cue"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GraphQLSchemaSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required: Reference to the ApiSchema object which is of type GraphQL schema, which contains the [GraphQL SDL](https://graphql.org/learn/schema/)
	// defining this GraphQL schema.
	SchemaRef *v1.ClusterObjectRef `protobuf:"bytes,1,opt,name=schema_ref,json=schemaRef,proto3" json:"schema_ref,omitempty"`
	// Types that are assignable to GraphqlType:
	//
	//	*GraphQLSchemaSpec_Proxied
	//	*GraphQLSchemaSpec_Resolved
	GraphqlType isGraphQLSchemaSpec_GraphqlType `protobuf_oneof:"graphql_type"`
}

func (x *GraphQLSchemaSpec) Reset() {
	*x = GraphQLSchemaSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLSchemaSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLSchemaSpec) ProtoMessage() {}

func (x *GraphQLSchemaSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLSchemaSpec.ProtoReflect.Descriptor instead.
func (*GraphQLSchemaSpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_rawDescGZIP(), []int{0}
}

func (x *GraphQLSchemaSpec) GetSchemaRef() *v1.ClusterObjectRef {
	if x != nil {
		return x.SchemaRef
	}
	return nil
}

func (m *GraphQLSchemaSpec) GetGraphqlType() isGraphQLSchemaSpec_GraphqlType {
	if m != nil {
		return m.GraphqlType
	}
	return nil
}

func (x *GraphQLSchemaSpec) GetProxied() *GraphQLSchemaSpec_ProxiedGraphQL {
	if x, ok := x.GetGraphqlType().(*GraphQLSchemaSpec_Proxied); ok {
		return x.Proxied
	}
	return nil
}

func (x *GraphQLSchemaSpec) GetResolved() *GraphQLSchemaSpec_ResolvedGraphQL {
	if x, ok := x.GetGraphqlType().(*GraphQLSchemaSpec_Resolved); ok {
		return x.Resolved
	}
	return nil
}

type isGraphQLSchemaSpec_GraphqlType interface {
	isGraphQLSchemaSpec_GraphqlType()
}

type GraphQLSchemaSpec_Proxied struct {
	// Configuration to delegate resolving this GraphQL request to an external GraphQL server, which can be
	// another GlooGraphQL instance or another instance of a GraphQL server. The external GraphQL server must
	// be compliant with the [June 2018 GraphQL specification](https://spec.graphql.org/June2018/).
	Proxied *GraphQLSchemaSpec_ProxiedGraphQL `protobuf:"bytes,3,opt,name=proxied,proto3,oneof"`
}

type GraphQLSchemaSpec_Resolved struct {
	// List of references to GraphQLResolverMap resources. GraphQLResolverMaps
	// contain a mapping from GraphQL fields to resolver configuration, so that those fields can be resolved
	// locally by this GraphQL-envoy instance.
	// Order of the references listed below does matter as resolver maps listed first
	// will be given priority over later ones when tie-breaking field resolver configurations.
	Resolved *GraphQLSchemaSpec_ResolvedGraphQL `protobuf:"bytes,4,opt,name=resolved,proto3,oneof"`
}

func (*GraphQLSchemaSpec_Proxied) isGraphQLSchemaSpec_GraphqlType() {}

func (*GraphQLSchemaSpec_Resolved) isGraphQLSchemaSpec_GraphqlType() {}

type GraphQLSchemaStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state and workspace conditions of the applied resource.
	Common *v2.Status `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	// The name of the workspace that owns the GraphQL schema.
	OwnedByWorkspace string `protobuf:"bytes,4,opt,name=owned_by_workspace,json=ownedByWorkspace,proto3" json:"owned_by_workspace,omitempty"`
}

func (x *GraphQLSchemaStatus) Reset() {
	*x = GraphQLSchemaStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLSchemaStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLSchemaStatus) ProtoMessage() {}

func (x *GraphQLSchemaStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLSchemaStatus.ProtoReflect.Descriptor instead.
func (*GraphQLSchemaStatus) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_rawDescGZIP(), []int{1}
}

func (x *GraphQLSchemaStatus) GetCommon() *v2.Status {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *GraphQLSchemaStatus) GetOwnedByWorkspace() string {
	if x != nil {
		return x.OwnedByWorkspace
	}
	return ""
}

type GraphQLSchemaReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workspaces map[string]*v2.Report `protobuf:"bytes,1,rep,name=workspaces,proto3" json:"workspaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The name of the workspace that owns the GraphQL schema.
	OwnerWorkspace string `protobuf:"bytes,2,opt,name=owner_workspace,json=ownerWorkspace,proto3" json:"owner_workspace,omitempty"`
}

func (x *GraphQLSchemaReport) Reset() {
	*x = GraphQLSchemaReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLSchemaReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLSchemaReport) ProtoMessage() {}

func (x *GraphQLSchemaReport) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLSchemaReport.ProtoReflect.Descriptor instead.
func (*GraphQLSchemaReport) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_rawDescGZIP(), []int{2}
}

func (x *GraphQLSchemaReport) GetWorkspaces() map[string]*v2.Report {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

func (x *GraphQLSchemaReport) GetOwnerWorkspace() string {
	if x != nil {
		return x.OwnerWorkspace
	}
	return ""
}

type GraphQLSchemaSpec_ResolvedGraphQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of references to GraphQLResolverMap resources. GraphQLResolverMaps
	// contain a mapping from GraphQL fields to resolver configuration, so that those fields can be resolved
	// locally by this GraphQL-envoy instance.
	// Order of the references listed below does matter as resolver maps listed first
	// will be given priority over later ones when tie-breaking field resolver configurations.
	ResolverMapRefs []*v1.ClusterObjectRef                     `protobuf:"bytes,1,rep,name=resolver_map_refs,json=resolverMapRefs,proto3" json:"resolver_map_refs,omitempty"`
	Options         *GraphQLSchemaSpec_ResolvedGraphQL_Options `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *GraphQLSchemaSpec_ResolvedGraphQL) Reset() {
	*x = GraphQLSchemaSpec_ResolvedGraphQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLSchemaSpec_ResolvedGraphQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLSchemaSpec_ResolvedGraphQL) ProtoMessage() {}

func (x *GraphQLSchemaSpec_ResolvedGraphQL) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLSchemaSpec_ResolvedGraphQL.ProtoReflect.Descriptor instead.
func (*GraphQLSchemaSpec_ResolvedGraphQL) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_rawDescGZIP(), []int{0, 0}
}

func (x *GraphQLSchemaSpec_ResolvedGraphQL) GetResolverMapRefs() []*v1.ClusterObjectRef {
	if x != nil {
		return x.ResolverMapRefs
	}
	return nil
}

func (x *GraphQLSchemaSpec_ResolvedGraphQL) GetOptions() *GraphQLSchemaSpec_ResolvedGraphQL_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

type GraphQLSchemaSpec_ProxiedGraphQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of destinations that can server GraphQL requests. The external GraphQL server must
	// be compliant with the [June 2018 GraphQL specification](https://spec.graphql.org/June2018).
	// Though this is a list, only the first referenced destination will be used until fail-over and load balancing
	// is supported between multiple GraphQL destinations.
	GraphqlServers []*v2.DestinationReference `protobuf:"bytes,1,rep,name=graphql_servers,json=graphqlServers,proto3" json:"graphql_servers,omitempty"`
	// Declare variables that are used in variable transformations in the fields below for the GraphQL request to a remote server.
	// The keys to this map are the name of the variables. See the variable transformations specifically
	// for how to reference these variables.
	Variables map[string]*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// map of header name to a transformation on extracted variables which are declared
	// in the `variables` field.
	// The transformation must result in a string value, or an error will be sent back to the client.
	Headers map[string]*VariableTransformation `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// map of query parameter name to a transformation on extracted variables which are declared
	// in the `variables` field.
	// The transformation must result in a string value, or an error will be sent back to the client.
	QueryParams map[string]*VariableTransformation `protobuf:"bytes,4,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The span name for the remote GraphQL request, used for tracing.
	// If empty or omitted, the request span name will be set to the upstream cluster name.
	SpanName string `protobuf:"bytes,5,opt,name=span_name,json=spanName,proto3" json:"span_name,omitempty"`
	// Set the timeout of the HTTP request to the REST service (default 5s)
	// For information about the value format, see the [Google protocol buffer documentation](https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/duration).
	Timeout *duration.Duration                        `protobuf:"bytes,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Options *GraphQLSchemaSpec_ProxiedGraphQL_Options `protobuf:"bytes,7,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *GraphQLSchemaSpec_ProxiedGraphQL) Reset() {
	*x = GraphQLSchemaSpec_ProxiedGraphQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLSchemaSpec_ProxiedGraphQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLSchemaSpec_ProxiedGraphQL) ProtoMessage() {}

func (x *GraphQLSchemaSpec_ProxiedGraphQL) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLSchemaSpec_ProxiedGraphQL.ProtoReflect.Descriptor instead.
func (*GraphQLSchemaSpec_ProxiedGraphQL) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_rawDescGZIP(), []int{0, 1}
}

func (x *GraphQLSchemaSpec_ProxiedGraphQL) GetGraphqlServers() []*v2.DestinationReference {
	if x != nil {
		return x.GraphqlServers
	}
	return nil
}

func (x *GraphQLSchemaSpec_ProxiedGraphQL) GetVariables() map[string]*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *GraphQLSchemaSpec_ProxiedGraphQL) GetHeaders() map[string]*VariableTransformation {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *GraphQLSchemaSpec_ProxiedGraphQL) GetQueryParams() map[string]*VariableTransformation {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *GraphQLSchemaSpec_ProxiedGraphQL) GetSpanName() string {
	if x != nil {
		return x.SpanName
	}
	return ""
}

func (x *GraphQLSchemaSpec_ProxiedGraphQL) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *GraphQLSchemaSpec_ProxiedGraphQL) GetOptions() *GraphQLSchemaSpec_ProxiedGraphQL_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

// Set additional options on the references to GraphQLResolverMap resources.
// As as simple example for the `mex_depth` option, if the schema is
// ```gql
//
//	type Query {
//	  employee: Employee
//	}
//
//	type Employee {
//	  manager: Employee
//	  name: String
//	}
//
// ```
// and we set a `max_depth` of `3` and we run a query
// ```gql
// query {             # query depth : 0
//
//	  employee {        # query depth : 1
//	    manager {       # query depth : 2
//	      name          # query depth : 3
//	      manager {     # query depth : 3
//	        name        # query depth : 4
//	      }
//	    }
//	  }
//	}
//
// ```
// the graphql server will respond with a response:
// ```json
//
//	{ "data" : {
//	    "employee" : {
//	      "manager" : {
//	        "name" : "Manager 1",
//	        "manager"  : {
//	          "name" : null
//	  }}}},
//	  "errors": [
//	     {"message": "field 'name' exceeds the max operation depth of 3 for this schema"}
//	   ]
//	}
//
// ```
type GraphQLSchemaSpec_ResolvedGraphQL_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Max GraphQL operation (query/mutation/subscription) depth. This sets a limitation on the max nesting on a query that runs against this schema.
	// any GraphQL operation that runs past the `max_depth` will add an error message to the response and will return as `null`.
	// If not configured, or the value is 0, the query depth will be unbounded.
	// For information about the value format, see the [Google protocol buffer documentation](https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/u-int32-value).
	MaxDepth *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=max_depth,json=maxDepth,proto3" json:"max_depth,omitempty"`
	// Enable introspection queries on the GraphQL API served by this GraphQLSchema resource.
	// Introspection queries are used by GraphQL developers to understand the schema of the GraphQL API and create
	// queries that are valid against the schema. Introspection is disabled by default, and should be disabled for
	// production environments.
	EnableIntrospection bool `protobuf:"varint,2,opt,name=enable_introspection,json=enableIntrospection,proto3" json:"enable_introspection,omitempty"`
}

func (x *GraphQLSchemaSpec_ResolvedGraphQL_Options) Reset() {
	*x = GraphQLSchemaSpec_ResolvedGraphQL_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLSchemaSpec_ResolvedGraphQL_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLSchemaSpec_ResolvedGraphQL_Options) ProtoMessage() {}

func (x *GraphQLSchemaSpec_ResolvedGraphQL_Options) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLSchemaSpec_ResolvedGraphQL_Options.ProtoReflect.Descriptor instead.
func (*GraphQLSchemaSpec_ResolvedGraphQL_Options) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *GraphQLSchemaSpec_ResolvedGraphQL_Options) GetMaxDepth() *wrappers.UInt32Value {
	if x != nil {
		return x.MaxDepth
	}
	return nil
}

func (x *GraphQLSchemaSpec_ResolvedGraphQL_Options) GetEnableIntrospection() bool {
	if x != nil {
		return x.EnableIntrospection
	}
	return false
}

type GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Extraction:
	//
	//	*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_DynamicMetadata
	//	*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_RequestHeader
	//	*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_Json
	Extraction isGraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_Extraction `protobuf_oneof:"extraction"`
}

func (x *GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction) Reset() {
	*x = GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction) ProtoMessage() {}

func (x *GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction.ProtoReflect.Descriptor instead.
func (*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_rawDescGZIP(), []int{0, 1, 3}
}

func (m *GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction) GetExtraction() isGraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_Extraction {
	if m != nil {
		return m.Extraction
	}
	return nil
}

func (x *GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction) GetDynamicMetadata() *DynamicMetadataExtraction {
	if x, ok := x.GetExtraction().(*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_DynamicMetadata); ok {
		return x.DynamicMetadata
	}
	return nil
}

func (x *GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction) GetRequestHeader() string {
	if x, ok := x.GetExtraction().(*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_RequestHeader); ok {
		return x.RequestHeader
	}
	return ""
}

func (x *GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction) GetJson() *_struct.Value {
	if x, ok := x.GetExtraction().(*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_Json); ok {
		return x.Json
	}
	return nil
}

type isGraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_Extraction interface {
	isGraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_Extraction()
}

type GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_DynamicMetadata struct {
	// Extract the value from envoy dynamic metadata. The extracted value is an object.
	DynamicMetadata *DynamicMetadataExtraction `protobuf:"bytes,1,opt,name=dynamic_metadata,json=dynamicMetadata,proto3,oneof"`
}

type GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_RequestHeader struct {
	// Extract the value from the GraphQL HTTP request header. The extracted value is a string.
	// If the header doesn't exist, an empty string will be used.
	RequestHeader string `protobuf:"bytes,2,opt,name=request_header,json=requestHeader,proto3,oneof"`
}

type GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_Json struct {
	// Assigns the variable to a JSON value specified here.
	// For information about the value format, see the [Google protocol buffer documentation](https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/value).
	Json *_struct.Value `protobuf:"bytes,3,opt,name=json,proto3,oneof"`
}

func (*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_DynamicMetadata) isGraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_Extraction() {
}

func (*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_RequestHeader) isGraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_Extraction() {
}

func (*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_Json) isGraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_Extraction() {
}

type GraphQLSchemaSpec_ProxiedGraphQL_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable introspection queries on the GraphQL API served by this GraphQLSchema resource.
	// Introspection queries are used by GraphQL developers to understand the schema of the GraphQL API and create
	// queries that are valid against the schema. This option allows for introspection queries to be sent to the
	// proxied GraphQL server. Introspection is disabled by default and introspection queries will be responded with errors
	// by the proxy. This should be disabled for production environments.
	AllowIntrospection bool `protobuf:"varint,1,opt,name=allow_introspection,json=allowIntrospection,proto3" json:"allow_introspection,omitempty"`
}

func (x *GraphQLSchemaSpec_ProxiedGraphQL_Options) Reset() {
	*x = GraphQLSchemaSpec_ProxiedGraphQL_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLSchemaSpec_ProxiedGraphQL_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLSchemaSpec_ProxiedGraphQL_Options) ProtoMessage() {}

func (x *GraphQLSchemaSpec_ProxiedGraphQL_Options) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLSchemaSpec_ProxiedGraphQL_Options.ProtoReflect.Descriptor instead.
func (*GraphQLSchemaSpec_ProxiedGraphQL_Options) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_rawDescGZIP(), []int{0, 1, 4}
}

func (x *GraphQLSchemaSpec_ProxiedGraphQL_Options) GetAllowIntrospection() bool {
	if x != nil {
		return x.AllowIntrospection
	}
	return false
}

var File_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_rawDesc = []byte{
	0x0a, 0x5e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x71, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1a, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x1a, 0x1f, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x63, 0x75, 0x65, 0x2f, 0x63, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x65,
	0x78, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x64, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f,
	0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x71, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x53, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f,
	0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f,
	0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x52, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69,
	0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x32, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f,
	0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6b, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x0e, 0x0a,
	0x11, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x42, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b,
	0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x09, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x65, 0x66, 0x12, 0x58, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x51, 0x4c, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64,
	0x12, 0x5b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51,
	0x4c, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x1a, 0xbc, 0x02,
	0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51,
	0x4c, 0x12, 0x4f, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x66, 0x73, 0x12, 0x5f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x51, 0x4c, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x77, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xed, 0x09, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x12,
	0x52, 0x0a, 0x0f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x69, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x51, 0x4c, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x63,
	0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x49, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x51, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x70, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x61, 0x70, 0x69, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x61, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x5e, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x8c, 0x01, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x64, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x61, 0x70,
	0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x69,
	0x65, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6e, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x72, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70,
	0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xe3, 0x01, 0x0a, 0x11, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x62, 0x0a, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a,
	0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x05, 0xea, 0x42, 0x02, 0x20, 0x01, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x73,
	0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x3a, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49,
	0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x78, 0x0a, 0x13,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x77, 0x6e, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x13, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x51, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5f,
	0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x5a, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x5b, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d,
	0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2f, 0x76, 0x32, 0xc0, 0xf5, 0x04, 0x01, 0xb8, 0xf5, 0x04, 0x01, 0xd0, 0xf5, 0x04,
	0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_rawDescData = file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_goTypes = []interface{}{
	(*GraphQLSchemaSpec)(nil),                         // 0: apimanagement.gloo.solo.io.GraphQLSchemaSpec
	(*GraphQLSchemaStatus)(nil),                       // 1: apimanagement.gloo.solo.io.GraphQLSchemaStatus
	(*GraphQLSchemaReport)(nil),                       // 2: apimanagement.gloo.solo.io.GraphQLSchemaReport
	(*GraphQLSchemaSpec_ResolvedGraphQL)(nil),         // 3: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ResolvedGraphQL
	(*GraphQLSchemaSpec_ProxiedGraphQL)(nil),          // 4: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL
	(*GraphQLSchemaSpec_ResolvedGraphQL_Options)(nil), // 5: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ResolvedGraphQL.Options
	nil, // 6: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL.VariablesEntry
	nil, // 7: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL.HeadersEntry
	nil, // 8: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL.QueryParamsEntry
	(*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction)(nil), // 9: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL.RequestExtraction
	(*GraphQLSchemaSpec_ProxiedGraphQL_Options)(nil),           // 10: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL.Options
	nil,                               // 11: apimanagement.gloo.solo.io.GraphQLSchemaReport.WorkspacesEntry
	(*v1.ClusterObjectRef)(nil),       // 12: core.skv2.solo.io.ClusterObjectRef
	(*v2.Status)(nil),                 // 13: common.gloo.solo.io.Status
	(*v2.DestinationReference)(nil),   // 14: common.gloo.solo.io.DestinationReference
	(*duration.Duration)(nil),         // 15: google.protobuf.Duration
	(*wrappers.UInt32Value)(nil),      // 16: google.protobuf.UInt32Value
	(*VariableTransformation)(nil),    // 17: apimanagement.gloo.solo.io.VariableTransformation
	(*DynamicMetadataExtraction)(nil), // 18: apimanagement.gloo.solo.io.DynamicMetadataExtraction
	(*_struct.Value)(nil),             // 19: google.protobuf.Value
	(*v2.Report)(nil),                 // 20: common.gloo.solo.io.Report
}
var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_depIdxs = []int32{
	12, // 0: apimanagement.gloo.solo.io.GraphQLSchemaSpec.schema_ref:type_name -> core.skv2.solo.io.ClusterObjectRef
	4,  // 1: apimanagement.gloo.solo.io.GraphQLSchemaSpec.proxied:type_name -> apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL
	3,  // 2: apimanagement.gloo.solo.io.GraphQLSchemaSpec.resolved:type_name -> apimanagement.gloo.solo.io.GraphQLSchemaSpec.ResolvedGraphQL
	13, // 3: apimanagement.gloo.solo.io.GraphQLSchemaStatus.common:type_name -> common.gloo.solo.io.Status
	11, // 4: apimanagement.gloo.solo.io.GraphQLSchemaReport.workspaces:type_name -> apimanagement.gloo.solo.io.GraphQLSchemaReport.WorkspacesEntry
	12, // 5: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ResolvedGraphQL.resolver_map_refs:type_name -> core.skv2.solo.io.ClusterObjectRef
	5,  // 6: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ResolvedGraphQL.options:type_name -> apimanagement.gloo.solo.io.GraphQLSchemaSpec.ResolvedGraphQL.Options
	14, // 7: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL.graphql_servers:type_name -> common.gloo.solo.io.DestinationReference
	6,  // 8: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL.variables:type_name -> apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL.VariablesEntry
	7,  // 9: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL.headers:type_name -> apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL.HeadersEntry
	8,  // 10: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL.query_params:type_name -> apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL.QueryParamsEntry
	15, // 11: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL.timeout:type_name -> google.protobuf.Duration
	10, // 12: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL.options:type_name -> apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL.Options
	16, // 13: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ResolvedGraphQL.Options.max_depth:type_name -> google.protobuf.UInt32Value
	9,  // 14: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL.VariablesEntry.value:type_name -> apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL.RequestExtraction
	17, // 15: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL.HeadersEntry.value:type_name -> apimanagement.gloo.solo.io.VariableTransformation
	17, // 16: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL.QueryParamsEntry.value:type_name -> apimanagement.gloo.solo.io.VariableTransformation
	18, // 17: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL.RequestExtraction.dynamic_metadata:type_name -> apimanagement.gloo.solo.io.DynamicMetadataExtraction
	19, // 18: apimanagement.gloo.solo.io.GraphQLSchemaSpec.ProxiedGraphQL.RequestExtraction.json:type_name -> google.protobuf.Value
	20, // 19: apimanagement.gloo.solo.io.GraphQLSchemaReport.WorkspacesEntry.value:type_name -> common.gloo.solo.io.Report
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_init()
}
func file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_init() {
	if File_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_resolver_map_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLSchemaSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLSchemaStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLSchemaReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLSchemaSpec_ResolvedGraphQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLSchemaSpec_ProxiedGraphQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLSchemaSpec_ResolvedGraphQL_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLSchemaSpec_ProxiedGraphQL_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*GraphQLSchemaSpec_Proxied)(nil),
		(*GraphQLSchemaSpec_Resolved)(nil),
	}
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_DynamicMetadata)(nil),
		(*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_RequestHeader)(nil),
		(*GraphQLSchemaSpec_ProxiedGraphQL_RequestExtraction_Json)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto = out.File
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_apimanagement_v2_graphql_schema_proto_depIdxs = nil
}
