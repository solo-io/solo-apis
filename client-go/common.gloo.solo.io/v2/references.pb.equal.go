// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/references.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *WorkloadReference) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*WorkloadReference)
	if !ok {
		that2, ok := that.(WorkloadReference)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRef(), target.GetRef()) {
			return false
		}
	}

	if m.GetKind() != target.GetKind() {
		return false
	}

	return true
}

// Equal function
func (m *ObjectReference) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ObjectReference)
	if !ok {
		that2, ok := that.(ObjectReference)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetNamespace(), target.GetNamespace()) != 0 {
		return false
	}

	if strings.Compare(m.GetCluster(), target.GetCluster()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *ObjectReferenceList) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ObjectReferenceList)
	if !ok {
		that2, ok := that.(ObjectReferenceList)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetRefs()) != len(target.GetRefs()) {
		return false
	}
	for idx, v := range m.GetRefs() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetRefs()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetRefs()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *DestinationReference) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DestinationReference)
	if !ok {
		that2, ok := that.(DestinationReference)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRef(), target.GetRef()) {
			return false
		}
	}

	if m.GetKind() != target.GetKind() {
		return false
	}

	if h, ok := interface{}(m.GetPort()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPort()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPort(), target.GetPort()) {
			return false
		}
	}

	if len(m.GetSubset()) != len(target.GetSubset()) {
		return false
	}
	for k, v := range m.GetSubset() {

		if strings.Compare(v, target.GetSubset()[k]) != 0 {
			return false
		}

	}

	if m.GetWeight() != target.GetWeight() {
		return false
	}

	switch m.DestinationSpec.(type) {

	case *DestinationReference_Function:
		if _, ok := target.DestinationSpec.(*DestinationReference_Function); !ok {
			return false
		}

		if h, ok := interface{}(m.GetFunction()).(equality.Equalizer); ok {
			if !h.Equal(target.GetFunction()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetFunction(), target.GetFunction()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.DestinationSpec != target.DestinationSpec {
			return false
		}
	}

	return true
}

// Equal function
func (m *ListenerPortReference) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListenerPortReference)
	if !ok {
		that2, ok := that.(ListenerPortReference)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetGatewayRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGatewayRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGatewayRef(), target.GetGatewayRef()) {
			return false
		}
	}

	if m.GetPort() != target.GetPort() {
		return false
	}

	return true
}
