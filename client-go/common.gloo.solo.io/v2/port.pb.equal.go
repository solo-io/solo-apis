// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/port.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *PortSelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortSelector)
	if !ok {
		that2, ok := that.(PortSelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.Specifier.(type) {

	case *PortSelector_Number:
		if _, ok := target.Specifier.(*PortSelector_Number); !ok {
			return false
		}

		if m.GetNumber() != target.GetNumber() {
			return false
		}

	case *PortSelector_Name:
		if _, ok := target.Specifier.(*PortSelector_Name); !ok {
			return false
		}

		if strings.Compare(m.GetName(), target.GetName()) != 0 {
			return false
		}

	default:
		// m is nil but target is not nil
		if m.Specifier != target.Specifier {
			return false
		}
	}

	return true
}
