// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/cloud_provider_options.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *FunctionDestinationSpec) Clone() proto.Message {
	var target *FunctionDestinationSpec
	if m == nil {
		return target
	}
	target = &FunctionDestinationSpec{}

	target.LogicalName = m.GetLogicalName()

	switch m.ProviderOptions.(type) {

	case *FunctionDestinationSpec_AwsLambda:

		if h, ok := interface{}(m.GetAwsLambda()).(clone.Cloner); ok {
			target.ProviderOptions = &FunctionDestinationSpec_AwsLambda{
				AwsLambda: h.Clone().(*LambdaOptions),
			}
		} else {
			target.ProviderOptions = &FunctionDestinationSpec_AwsLambda{
				AwsLambda: proto.Clone(m.GetAwsLambda()).(*LambdaOptions),
			}
		}

	}

	return target
}

// Clone function
func (m *LambdaOptions) Clone() proto.Message {
	var target *LambdaOptions
	if m == nil {
		return target
	}
	target = &LambdaOptions{}

	target.UnwrapAsAlb = m.GetUnwrapAsAlb()

	target.UnwrapAsApiGateway = m.GetUnwrapAsApiGateway()

	target.InvocationStyle = m.GetInvocationStyle()

	return target
}

// Clone function
func (m *CloudProviderFilterOptions) Clone() proto.Message {
	var target *CloudProviderFilterOptions
	if m == nil {
		return target
	}
	target = &CloudProviderFilterOptions{}

	switch m.ProviderOptions.(type) {

	case *CloudProviderFilterOptions_Aws:

		if h, ok := interface{}(m.GetAws()).(clone.Cloner); ok {
			target.ProviderOptions = &CloudProviderFilterOptions_Aws{
				Aws: h.Clone().(*AWSFilterOptions),
			}
		} else {
			target.ProviderOptions = &CloudProviderFilterOptions_Aws{
				Aws: proto.Clone(m.GetAws()).(*AWSFilterOptions),
			}
		}

	}

	return target
}

// Clone function
func (m *AWSFilterOptions) Clone() proto.Message {
	var target *AWSFilterOptions
	if m == nil {
		return target
	}
	target = &AWSFilterOptions{}

	if m.GetAccountIds() != nil {
		target.AccountIds = make([]string, len(m.GetAccountIds()))
		for idx, v := range m.GetAccountIds() {

			target.AccountIds[idx] = v

		}
	}

	if m.GetIamRoles() != nil {
		target.IamRoles = make([]string, len(m.GetIamRoles()))
		for idx, v := range m.GetIamRoles() {

			target.IamRoles[idx] = v

		}
	}

	if m.GetRegions() != nil {
		target.Regions = make([]string, len(m.GetRegions()))
		for idx, v := range m.GetRegions() {

			target.Regions[idx] = v

		}
	}

	if m.GetLambdaFunctions() != nil {
		target.LambdaFunctions = make([]string, len(m.GetLambdaFunctions()))
		for idx, v := range m.GetLambdaFunctions() {

			target.LambdaFunctions[idx] = v

		}
	}

	return target
}
