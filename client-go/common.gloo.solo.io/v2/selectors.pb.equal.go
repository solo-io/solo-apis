// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/selectors.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *ObjectSelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ObjectSelector)
	if !ok {
		that2, ok := that.(ObjectSelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetLabels()) != len(target.GetLabels()) {
		return false
	}
	for k, v := range m.GetLabels() {

		if strings.Compare(v, target.GetLabels()[k]) != 0 {
			return false
		}

	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetNamespace(), target.GetNamespace()) != 0 {
		return false
	}

	if strings.Compare(m.GetCluster(), target.GetCluster()) != 0 {
		return false
	}

	if strings.Compare(m.GetWorkspace(), target.GetWorkspace()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *DestinationSelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DestinationSelector)
	if !ok {
		that2, ok := that.(DestinationSelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetSelector()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSelector()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSelector(), target.GetSelector()) {
			return false
		}
	}

	if m.GetKind() != target.GetKind() {
		return false
	}

	if h, ok := interface{}(m.GetPort()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPort()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPort(), target.GetPort()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *RouteDestinationSelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteDestinationSelector)
	if !ok {
		that2, ok := that.(RouteDestinationSelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetRoute()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRoute()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRoute(), target.GetRoute()) {
			return false
		}
	}

	if len(m.GetOnDestinations()) != len(target.GetOnDestinations()) {
		return false
	}
	for idx, v := range m.GetOnDestinations() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetOnDestinations()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetOnDestinations()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *RouteLabelSelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteLabelSelector)
	if !ok {
		that2, ok := that.(RouteLabelSelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetLabels()) != len(target.GetLabels()) {
		return false
	}
	for k, v := range m.GetLabels() {

		if strings.Compare(v, target.GetLabels()[k]) != 0 {
			return false
		}

	}

	if strings.Compare(m.GetNamespace(), target.GetNamespace()) != 0 {
		return false
	}

	if strings.Compare(m.GetCluster(), target.GetCluster()) != 0 {
		return false
	}

	if strings.Compare(m.GetWorkspace(), target.GetWorkspace()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *RouteSelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteSelector)
	if !ok {
		that2, ok := that.(RouteSelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.SelectorType.(type) {

	case *RouteSelector_Route:
		if _, ok := target.SelectorType.(*RouteSelector_Route); !ok {
			return false
		}

		if h, ok := interface{}(m.GetRoute()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRoute()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRoute(), target.GetRoute()) {
				return false
			}
		}

	case *RouteSelector_WithDestinations:
		if _, ok := target.SelectorType.(*RouteSelector_WithDestinations); !ok {
			return false
		}

		if h, ok := interface{}(m.GetWithDestinations()).(equality.Equalizer); ok {
			if !h.Equal(target.GetWithDestinations()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetWithDestinations(), target.GetWithDestinations()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.SelectorType != target.SelectorType {
			return false
		}
	}

	return true
}

// Equal function
func (m *RouteFilter) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteFilter)
	if !ok {
		that2, ok := that.(RouteFilter)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetCloudProvider()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCloudProvider()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCloudProvider(), target.GetCloudProvider()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *WorkloadSelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*WorkloadSelector)
	if !ok {
		that2, ok := that.(WorkloadSelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetSelector()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSelector()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSelector(), target.GetSelector()) {
			return false
		}
	}

	if m.GetKind() != target.GetKind() {
		return false
	}

	if h, ok := interface{}(m.GetPort()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPort()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPort(), target.GetPort()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *IdentitySelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*IdentitySelector)
	if !ok {
		that2, ok := that.(IdentitySelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetServiceAccountSelector()).(equality.Equalizer); ok {
		if !h.Equal(target.GetServiceAccountSelector()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetServiceAccountSelector(), target.GetServiceAccountSelector()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetExternalWorkloadSelector()).(equality.Equalizer); ok {
		if !h.Equal(target.GetExternalWorkloadSelector()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetExternalWorkloadSelector(), target.GetExternalWorkloadSelector()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRequestIdentityMatcher()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRequestIdentityMatcher()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRequestIdentityMatcher(), target.GetRequestIdentityMatcher()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *MeshSelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*MeshSelector)
	if !ok {
		that2, ok := that.(MeshSelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.MeshType.(type) {

	case *MeshSelector_Istio_:
		if _, ok := target.MeshType.(*MeshSelector_Istio_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetIstio()).(equality.Equalizer); ok {
			if !h.Equal(target.GetIstio()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetIstio(), target.GetIstio()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.MeshType != target.MeshType {
			return false
		}
	}

	return true
}

// Equal function
func (m *WorkspaceSelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*WorkspaceSelector)
	if !ok {
		that2, ok := that.(WorkspaceSelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if len(m.GetSelector()) != len(target.GetSelector()) {
		return false
	}
	for k, v := range m.GetSelector() {

		if strings.Compare(v, target.GetSelector()[k]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *ListenerSelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListenerSelector)
	if !ok {
		that2, ok := that.(ListenerSelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetVirtualGateway()).(equality.Equalizer); ok {
		if !h.Equal(target.GetVirtualGateway()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetVirtualGateway(), target.GetVirtualGateway()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetPort()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPort()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPort(), target.GetPort()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *IdentitySelector_RequestIdentityMatcher) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*IdentitySelector_RequestIdentityMatcher)
	if !ok {
		that2, ok := that.(IdentitySelector_RequestIdentityMatcher)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetRequestPrincipals()) != len(target.GetRequestPrincipals()) {
		return false
	}
	for idx, v := range m.GetRequestPrincipals() {

		if strings.Compare(v, target.GetRequestPrincipals()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetNotRequestPrincipals()) != len(target.GetNotRequestPrincipals()) {
		return false
	}
	for idx, v := range m.GetNotRequestPrincipals() {

		if strings.Compare(v, target.GetNotRequestPrincipals()[idx]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *MeshSelector_Istio) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*MeshSelector_Istio)
	if !ok {
		that2, ok := that.(MeshSelector_Istio)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetRevision(), target.GetRevision()) != 0 {
		return false
	}

	if strings.Compare(m.GetNamespace(), target.GetNamespace()) != 0 {
		return false
	}

	if len(m.GetClusterSelector()) != len(target.GetClusterSelector()) {
		return false
	}
	for k, v := range m.GetClusterSelector() {

		if strings.Compare(v, target.GetClusterSelector()[k]) != 0 {
			return false
		}

	}

	if len(m.GetSelector()) != len(target.GetSelector()) {
		return false
	}
	for k, v := range m.GetSelector() {

		if strings.Compare(v, target.GetSelector()[k]) != 0 {
			return false
		}

	}

	return true
}
