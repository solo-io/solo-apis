// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/selectors.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *ObjectSelector) Clone() proto.Message {
	var target *ObjectSelector
	if m == nil {
		return target
	}
	target = &ObjectSelector{}

	if m.GetLabels() != nil {
		target.Labels = make(map[string]string, len(m.GetLabels()))
		for k, v := range m.GetLabels() {

			target.Labels[k] = v

		}
	}

	target.Name = m.GetName()

	target.Namespace = m.GetNamespace()

	target.Cluster = m.GetCluster()

	target.Workspace = m.GetWorkspace()

	return target
}

// Clone function
func (m *DestinationSelector) Clone() proto.Message {
	var target *DestinationSelector
	if m == nil {
		return target
	}
	target = &DestinationSelector{}

	if h, ok := interface{}(m.GetSelector()).(clone.Cloner); ok {
		target.Selector = h.Clone().(*ObjectSelector)
	} else {
		target.Selector = proto.Clone(m.GetSelector()).(*ObjectSelector)
	}

	target.Kind = m.GetKind()

	if h, ok := interface{}(m.GetPort()).(clone.Cloner); ok {
		target.Port = h.Clone().(*PortSelector)
	} else {
		target.Port = proto.Clone(m.GetPort()).(*PortSelector)
	}

	return target
}

// Clone function
func (m *RouteDestinationSelector) Clone() proto.Message {
	var target *RouteDestinationSelector
	if m == nil {
		return target
	}
	target = &RouteDestinationSelector{}

	if h, ok := interface{}(m.GetRoute()).(clone.Cloner); ok {
		target.Route = h.Clone().(*RouteLabelSelector)
	} else {
		target.Route = proto.Clone(m.GetRoute()).(*RouteLabelSelector)
	}

	if m.GetOnDestinations() != nil {
		target.OnDestinations = make([]*DestinationSelector, len(m.GetOnDestinations()))
		for idx, v := range m.GetOnDestinations() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.OnDestinations[idx] = h.Clone().(*DestinationSelector)
			} else {
				target.OnDestinations[idx] = proto.Clone(v).(*DestinationSelector)
			}

		}
	}

	return target
}

// Clone function
func (m *RouteLabelSelector) Clone() proto.Message {
	var target *RouteLabelSelector
	if m == nil {
		return target
	}
	target = &RouteLabelSelector{}

	if m.GetLabels() != nil {
		target.Labels = make(map[string]string, len(m.GetLabels()))
		for k, v := range m.GetLabels() {

			target.Labels[k] = v

		}
	}

	target.Namespace = m.GetNamespace()

	target.Cluster = m.GetCluster()

	target.Workspace = m.GetWorkspace()

	return target
}

// Clone function
func (m *RouteSelector) Clone() proto.Message {
	var target *RouteSelector
	if m == nil {
		return target
	}
	target = &RouteSelector{}

	switch m.SelectorType.(type) {

	case *RouteSelector_Route:

		if h, ok := interface{}(m.GetRoute()).(clone.Cloner); ok {
			target.SelectorType = &RouteSelector_Route{
				Route: h.Clone().(*RouteLabelSelector),
			}
		} else {
			target.SelectorType = &RouteSelector_Route{
				Route: proto.Clone(m.GetRoute()).(*RouteLabelSelector),
			}
		}

	case *RouteSelector_WithDestinations:

		if h, ok := interface{}(m.GetWithDestinations()).(clone.Cloner); ok {
			target.SelectorType = &RouteSelector_WithDestinations{
				WithDestinations: h.Clone().(*DestinationSelector),
			}
		} else {
			target.SelectorType = &RouteSelector_WithDestinations{
				WithDestinations: proto.Clone(m.GetWithDestinations()).(*DestinationSelector),
			}
		}

	}

	return target
}

// Clone function
func (m *RouteFilter) Clone() proto.Message {
	var target *RouteFilter
	if m == nil {
		return target
	}
	target = &RouteFilter{}

	if h, ok := interface{}(m.GetCloudProvider()).(clone.Cloner); ok {
		target.CloudProvider = h.Clone().(*CloudProviderFilterOptions)
	} else {
		target.CloudProvider = proto.Clone(m.GetCloudProvider()).(*CloudProviderFilterOptions)
	}

	return target
}

// Clone function
func (m *WorkloadSelector) Clone() proto.Message {
	var target *WorkloadSelector
	if m == nil {
		return target
	}
	target = &WorkloadSelector{}

	if h, ok := interface{}(m.GetSelector()).(clone.Cloner); ok {
		target.Selector = h.Clone().(*ObjectSelector)
	} else {
		target.Selector = proto.Clone(m.GetSelector()).(*ObjectSelector)
	}

	target.Kind = m.GetKind()

	if h, ok := interface{}(m.GetPort()).(clone.Cloner); ok {
		target.Port = h.Clone().(*PortSelector)
	} else {
		target.Port = proto.Clone(m.GetPort()).(*PortSelector)
	}

	return target
}

// Clone function
func (m *IdentitySelector) Clone() proto.Message {
	var target *IdentitySelector
	if m == nil {
		return target
	}
	target = &IdentitySelector{}

	if h, ok := interface{}(m.GetServiceAccountSelector()).(clone.Cloner); ok {
		target.ServiceAccountSelector = h.Clone().(*ObjectSelector)
	} else {
		target.ServiceAccountSelector = proto.Clone(m.GetServiceAccountSelector()).(*ObjectSelector)
	}

	if h, ok := interface{}(m.GetExternalWorkloadSelector()).(clone.Cloner); ok {
		target.ExternalWorkloadSelector = h.Clone().(*ObjectSelector)
	} else {
		target.ExternalWorkloadSelector = proto.Clone(m.GetExternalWorkloadSelector()).(*ObjectSelector)
	}

	if h, ok := interface{}(m.GetRequestIdentityMatcher()).(clone.Cloner); ok {
		target.RequestIdentityMatcher = h.Clone().(*IdentitySelector_RequestIdentityMatcher)
	} else {
		target.RequestIdentityMatcher = proto.Clone(m.GetRequestIdentityMatcher()).(*IdentitySelector_RequestIdentityMatcher)
	}

	return target
}

// Clone function
func (m *MeshSelector) Clone() proto.Message {
	var target *MeshSelector
	if m == nil {
		return target
	}
	target = &MeshSelector{}

	switch m.MeshType.(type) {

	case *MeshSelector_Istio_:

		if h, ok := interface{}(m.GetIstio()).(clone.Cloner); ok {
			target.MeshType = &MeshSelector_Istio_{
				Istio: h.Clone().(*MeshSelector_Istio),
			}
		} else {
			target.MeshType = &MeshSelector_Istio_{
				Istio: proto.Clone(m.GetIstio()).(*MeshSelector_Istio),
			}
		}

	}

	return target
}

// Clone function
func (m *WorkspaceSelector) Clone() proto.Message {
	var target *WorkspaceSelector
	if m == nil {
		return target
	}
	target = &WorkspaceSelector{}

	target.Name = m.GetName()

	if m.GetSelector() != nil {
		target.Selector = make(map[string]string, len(m.GetSelector()))
		for k, v := range m.GetSelector() {

			target.Selector[k] = v

		}
	}

	return target
}

// Clone function
func (m *ListenerSelector) Clone() proto.Message {
	var target *ListenerSelector
	if m == nil {
		return target
	}
	target = &ListenerSelector{}

	if h, ok := interface{}(m.GetVirtualGateway()).(clone.Cloner); ok {
		target.VirtualGateway = h.Clone().(*ObjectSelector)
	} else {
		target.VirtualGateway = proto.Clone(m.GetVirtualGateway()).(*ObjectSelector)
	}

	if h, ok := interface{}(m.GetPort()).(clone.Cloner); ok {
		target.Port = h.Clone().(*PortSelector)
	} else {
		target.Port = proto.Clone(m.GetPort()).(*PortSelector)
	}

	return target
}

// Clone function
func (m *IdentitySelector_RequestIdentityMatcher) Clone() proto.Message {
	var target *IdentitySelector_RequestIdentityMatcher
	if m == nil {
		return target
	}
	target = &IdentitySelector_RequestIdentityMatcher{}

	if m.GetRequestPrincipals() != nil {
		target.RequestPrincipals = make([]string, len(m.GetRequestPrincipals()))
		for idx, v := range m.GetRequestPrincipals() {

			target.RequestPrincipals[idx] = v

		}
	}

	if m.GetNotRequestPrincipals() != nil {
		target.NotRequestPrincipals = make([]string, len(m.GetNotRequestPrincipals()))
		for idx, v := range m.GetNotRequestPrincipals() {

			target.NotRequestPrincipals[idx] = v

		}
	}

	return target
}

// Clone function
func (m *MeshSelector_Istio) Clone() proto.Message {
	var target *MeshSelector_Istio
	if m == nil {
		return target
	}
	target = &MeshSelector_Istio{}

	target.Revision = m.GetRevision()

	target.Namespace = m.GetNamespace()

	if m.GetClusterSelector() != nil {
		target.ClusterSelector = make(map[string]string, len(m.GetClusterSelector()))
		for k, v := range m.GetClusterSelector() {

			target.ClusterSelector[k] = v

		}
	}

	if m.GetSelector() != nil {
		target.Selector = make(map[string]string, len(m.GetSelector()))
		for k, v := range m.GetSelector() {

			target.Selector[k] = v

		}
	}

	return target
}
