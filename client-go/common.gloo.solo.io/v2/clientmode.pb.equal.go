// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/clientmode.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *ClientMode) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ClientMode)
	if !ok {
		that2, ok := that.(ClientMode)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.ClientMode.(type) {

	case *ClientMode_Auto:
		if _, ok := target.ClientMode.(*ClientMode_Auto); !ok {
			return false
		}

		if h, ok := interface{}(m.GetAuto()).(equality.Equalizer); ok {
			if !h.Equal(target.GetAuto()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetAuto(), target.GetAuto()) {
				return false
			}
		}

	case *ClientMode_SniRouting:
		if _, ok := target.ClientMode.(*ClientMode_SniRouting); !ok {
			return false
		}

		if h, ok := interface{}(m.GetSniRouting()).(equality.Equalizer); ok {
			if !h.Equal(target.GetSniRouting()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetSniRouting(), target.GetSniRouting()) {
				return false
			}
		}

	case *ClientMode_TlsTermination:
		if _, ok := target.ClientMode.(*ClientMode_TlsTermination); !ok {
			return false
		}

		if h, ok := interface{}(m.GetTlsTermination()).(equality.Equalizer); ok {
			if !h.Equal(target.GetTlsTermination()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetTlsTermination(), target.GetTlsTermination()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.ClientMode != target.ClientMode {
			return false
		}
	}

	return true
}
