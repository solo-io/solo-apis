// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/istio_operator.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *IstioOperatorSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*IstioOperatorSpec)
	if !ok {
		that2, ok := that.(IstioOperatorSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetProfile(), target.GetProfile()) != 0 {
		return false
	}

	if strings.Compare(m.GetInstallPackagePath(), target.GetInstallPackagePath()) != 0 {
		return false
	}

	if strings.Compare(m.GetHub(), target.GetHub()) != 0 {
		return false
	}

	if strings.Compare(m.GetTag(), target.GetTag()) != 0 {
		return false
	}

	if strings.Compare(m.GetResourceSuffix(), target.GetResourceSuffix()) != 0 {
		return false
	}

	if strings.Compare(m.GetNamespace(), target.GetNamespace()) != 0 {
		return false
	}

	if strings.Compare(m.GetRevision(), target.GetRevision()) != 0 {
		return false
	}

	if m.GetDefaultRevision() != target.GetDefaultRevision() {
		return false
	}

	if h, ok := interface{}(m.GetMeshConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMeshConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMeshConfig(), target.GetMeshConfig()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetComponents()).(equality.Equalizer); ok {
		if !h.Equal(target.GetComponents()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetComponents(), target.GetComponents()) {
			return false
		}
	}

	if len(m.GetAddonComponents()) != len(target.GetAddonComponents()) {
		return false
	}
	for k, v := range m.GetAddonComponents() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetAddonComponents()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetAddonComponents()[k]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetValues()).(equality.Equalizer); ok {
		if !h.Equal(target.GetValues()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetValues(), target.GetValues()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetUnvalidatedValues()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUnvalidatedValues()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUnvalidatedValues(), target.GetUnvalidatedValues()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *InstallStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*InstallStatus)
	if !ok {
		that2, ok := that.(InstallStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetStatus() != target.GetStatus() {
		return false
	}

	if strings.Compare(m.GetMessage(), target.GetMessage()) != 0 {
		return false
	}

	if len(m.GetComponentStatus()) != len(target.GetComponentStatus()) {
		return false
	}
	for k, v := range m.GetComponentStatus() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetComponentStatus()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetComponentStatus()[k]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *IstioComponentSetSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*IstioComponentSetSpec)
	if !ok {
		that2, ok := that.(IstioComponentSetSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetBase()).(equality.Equalizer); ok {
		if !h.Equal(target.GetBase()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetBase(), target.GetBase()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetPilot()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPilot()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPilot(), target.GetPilot()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetCni()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCni()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCni(), target.GetCni()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetIstiodRemote()).(equality.Equalizer); ok {
		if !h.Equal(target.GetIstiodRemote()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetIstiodRemote(), target.GetIstiodRemote()) {
			return false
		}
	}

	if len(m.GetIngressGateways()) != len(target.GetIngressGateways()) {
		return false
	}
	for idx, v := range m.GetIngressGateways() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetIngressGateways()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetIngressGateways()[idx]) {
				return false
			}
		}

	}

	if len(m.GetEgressGateways()) != len(target.GetEgressGateways()) {
		return false
	}
	for idx, v := range m.GetEgressGateways() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetEgressGateways()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetEgressGateways()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *BaseComponentSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*BaseComponentSpec)
	if !ok {
		that2, ok := that.(BaseComponentSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetEnabled()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEnabled()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEnabled(), target.GetEnabled()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetK8S()).(equality.Equalizer); ok {
		if !h.Equal(target.GetK8S()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetK8S(), target.GetK8S()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ComponentSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ComponentSpec)
	if !ok {
		that2, ok := that.(ComponentSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetEnabled()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEnabled()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEnabled(), target.GetEnabled()) {
			return false
		}
	}

	if strings.Compare(m.GetNamespace(), target.GetNamespace()) != 0 {
		return false
	}

	if strings.Compare(m.GetHub(), target.GetHub()) != 0 {
		return false
	}

	if strings.Compare(m.GetTag(), target.GetTag()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetSpec()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSpec()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSpec(), target.GetSpec()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetK8S()).(equality.Equalizer); ok {
		if !h.Equal(target.GetK8S()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetK8S(), target.GetK8S()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExternalComponentSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExternalComponentSpec)
	if !ok {
		that2, ok := that.(ExternalComponentSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetEnabled()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEnabled()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEnabled(), target.GetEnabled()) {
			return false
		}
	}

	if strings.Compare(m.GetNamespace(), target.GetNamespace()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetSpec()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSpec()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSpec(), target.GetSpec()) {
			return false
		}
	}

	if strings.Compare(m.GetChartPath(), target.GetChartPath()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetSchema()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSchema()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSchema(), target.GetSchema()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetK8S()).(equality.Equalizer); ok {
		if !h.Equal(target.GetK8S()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetK8S(), target.GetK8S()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *GatewaySpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GatewaySpec)
	if !ok {
		that2, ok := that.(GatewaySpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetEnabled()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEnabled()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEnabled(), target.GetEnabled()) {
			return false
		}
	}

	if strings.Compare(m.GetNamespace(), target.GetNamespace()) != 0 {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if len(m.GetLabel()) != len(target.GetLabel()) {
		return false
	}
	for k, v := range m.GetLabel() {

		if strings.Compare(v, target.GetLabel()[k]) != 0 {
			return false
		}

	}

	if strings.Compare(m.GetHub(), target.GetHub()) != 0 {
		return false
	}

	if strings.Compare(m.GetTag(), target.GetTag()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetK8S()).(equality.Equalizer); ok {
		if !h.Equal(target.GetK8S()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetK8S(), target.GetK8S()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *KubernetesResourcesSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*KubernetesResourcesSpec)
	if !ok {
		that2, ok := that.(KubernetesResourcesSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetAffinity()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAffinity()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAffinity(), target.GetAffinity()) {
			return false
		}
	}

	if len(m.GetEnv()) != len(target.GetEnv()) {
		return false
	}
	for idx, v := range m.GetEnv() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetEnv()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetEnv()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetHpaSpec()).(equality.Equalizer); ok {
		if !h.Equal(target.GetHpaSpec()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetHpaSpec(), target.GetHpaSpec()) {
			return false
		}
	}

	if strings.Compare(m.GetImagePullPolicy(), target.GetImagePullPolicy()) != 0 {
		return false
	}

	if len(m.GetNodeSelector()) != len(target.GetNodeSelector()) {
		return false
	}
	for k, v := range m.GetNodeSelector() {

		if strings.Compare(v, target.GetNodeSelector()[k]) != 0 {
			return false
		}

	}

	if h, ok := interface{}(m.GetPodDisruptionBudget()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPodDisruptionBudget()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPodDisruptionBudget(), target.GetPodDisruptionBudget()) {
			return false
		}
	}

	if len(m.GetPodAnnotations()) != len(target.GetPodAnnotations()) {
		return false
	}
	for k, v := range m.GetPodAnnotations() {

		if strings.Compare(v, target.GetPodAnnotations()[k]) != 0 {
			return false
		}

	}

	if strings.Compare(m.GetPriorityClassName(), target.GetPriorityClassName()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetReadinessProbe()).(equality.Equalizer); ok {
		if !h.Equal(target.GetReadinessProbe()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetReadinessProbe(), target.GetReadinessProbe()) {
			return false
		}
	}

	if m.GetReplicaCount() != target.GetReplicaCount() {
		return false
	}

	if h, ok := interface{}(m.GetResources()).(equality.Equalizer); ok {
		if !h.Equal(target.GetResources()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetResources(), target.GetResources()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetService()).(equality.Equalizer); ok {
		if !h.Equal(target.GetService()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetService(), target.GetService()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetStrategy()).(equality.Equalizer); ok {
		if !h.Equal(target.GetStrategy()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetStrategy(), target.GetStrategy()) {
			return false
		}
	}

	if len(m.GetTolerations()) != len(target.GetTolerations()) {
		return false
	}
	for idx, v := range m.GetTolerations() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetTolerations()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetTolerations()[idx]) {
				return false
			}
		}

	}

	if len(m.GetServiceAnnotations()) != len(target.GetServiceAnnotations()) {
		return false
	}
	for k, v := range m.GetServiceAnnotations() {

		if strings.Compare(v, target.GetServiceAnnotations()[k]) != 0 {
			return false
		}

	}

	if h, ok := interface{}(m.GetSecurityContext()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSecurityContext()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSecurityContext(), target.GetSecurityContext()) {
			return false
		}
	}

	if len(m.GetVolumes()) != len(target.GetVolumes()) {
		return false
	}
	for idx, v := range m.GetVolumes() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetVolumes()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetVolumes()[idx]) {
				return false
			}
		}

	}

	if len(m.GetVolumeMounts()) != len(target.GetVolumeMounts()) {
		return false
	}
	for idx, v := range m.GetVolumeMounts() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetVolumeMounts()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetVolumeMounts()[idx]) {
				return false
			}
		}

	}

	if len(m.GetOverlays()) != len(target.GetOverlays()) {
		return false
	}
	for idx, v := range m.GetOverlays() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetOverlays()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetOverlays()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *K8SObjectOverlay) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*K8SObjectOverlay)
	if !ok {
		that2, ok := that.(K8SObjectOverlay)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetApiVersion(), target.GetApiVersion()) != 0 {
		return false
	}

	if strings.Compare(m.GetKind(), target.GetKind()) != 0 {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if len(m.GetPatches()) != len(target.GetPatches()) {
		return false
	}
	for idx, v := range m.GetPatches() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetPatches()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetPatches()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *Affinity) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Affinity)
	if !ok {
		that2, ok := that.(Affinity)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetNodeAffinity()).(equality.Equalizer); ok {
		if !h.Equal(target.GetNodeAffinity()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetNodeAffinity(), target.GetNodeAffinity()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetPodAffinity()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPodAffinity()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPodAffinity(), target.GetPodAffinity()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetPodAntiAffinity()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPodAntiAffinity()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPodAntiAffinity(), target.GetPodAntiAffinity()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ConfigMapKeySelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ConfigMapKeySelector)
	if !ok {
		that2, ok := that.(ConfigMapKeySelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetLocalObjectReference()).(equality.Equalizer); ok {
		if !h.Equal(target.GetLocalObjectReference()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetLocalObjectReference(), target.GetLocalObjectReference()) {
			return false
		}
	}

	if strings.Compare(m.GetKey(), target.GetKey()) != 0 {
		return false
	}

	if m.GetOptional() != target.GetOptional() {
		return false
	}

	return true
}

// Equal function
func (m *ContainerResourceMetricSource) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ContainerResourceMetricSource)
	if !ok {
		that2, ok := that.(ContainerResourceMetricSource)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetTarget()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTarget()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTarget(), target.GetTarget()) {
			return false
		}
	}

	if strings.Compare(m.GetContainer(), target.GetContainer()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *ContainerResourceMetricStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ContainerResourceMetricStatus)
	if !ok {
		that2, ok := that.(ContainerResourceMetricStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetCurrent()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCurrent()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCurrent(), target.GetCurrent()) {
			return false
		}
	}

	if strings.Compare(m.GetContainer(), target.GetContainer()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *ClientIPConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ClientIPConfig)
	if !ok {
		that2, ok := that.(ClientIPConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetTimeoutSeconds() != target.GetTimeoutSeconds() {
		return false
	}

	return true
}

// Equal function
func (m *CrossVersionObjectReference) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CrossVersionObjectReference)
	if !ok {
		that2, ok := that.(CrossVersionObjectReference)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetKind(), target.GetKind()) != 0 {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetApiVersion(), target.GetApiVersion()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *DeploymentStrategy) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DeploymentStrategy)
	if !ok {
		that2, ok := that.(DeploymentStrategy)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetType(), target.GetType()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetRollingUpdate()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRollingUpdate()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRollingUpdate(), target.GetRollingUpdate()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *EnvVar) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*EnvVar)
	if !ok {
		that2, ok := that.(EnvVar)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetValue(), target.GetValue()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetValueFrom()).(equality.Equalizer); ok {
		if !h.Equal(target.GetValueFrom()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetValueFrom(), target.GetValueFrom()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *EnvVarSource) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*EnvVarSource)
	if !ok {
		that2, ok := that.(EnvVarSource)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetFieldRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetFieldRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetFieldRef(), target.GetFieldRef()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetResourceFieldRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetResourceFieldRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetResourceFieldRef(), target.GetResourceFieldRef()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetConfigMapKeyRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetConfigMapKeyRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetConfigMapKeyRef(), target.GetConfigMapKeyRef()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetSecretKeyRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSecretKeyRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSecretKeyRef(), target.GetSecretKeyRef()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExecAction) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExecAction)
	if !ok {
		that2, ok := that.(ExecAction)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetCommand()) != len(target.GetCommand()) {
		return false
	}
	for idx, v := range m.GetCommand() {

		if strings.Compare(v, target.GetCommand()[idx]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *ExternalMetricSource) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExternalMetricSource)
	if !ok {
		that2, ok := that.(ExternalMetricSource)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetMetricName(), target.GetMetricName()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetMetricSelector()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetricSelector()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetricSelector(), target.GetMetricSelector()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetTargetValue()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTargetValue()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTargetValue(), target.GetTargetValue()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetTargetAverageValue()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTargetAverageValue()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTargetAverageValue(), target.GetTargetAverageValue()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMetric()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetric()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetric(), target.GetMetric()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetTarget()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTarget()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTarget(), target.GetTarget()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExternalMetricStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExternalMetricStatus)
	if !ok {
		that2, ok := that.(ExternalMetricStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetMetric()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetric()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetric(), target.GetMetric()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetCurrent()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCurrent()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCurrent(), target.GetCurrent()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *HTTPGetAction) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HTTPGetAction)
	if !ok {
		that2, ok := that.(HTTPGetAction)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetPath(), target.GetPath()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetPort()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPort()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPort(), target.GetPort()) {
			return false
		}
	}

	if strings.Compare(m.GetHost(), target.GetHost()) != 0 {
		return false
	}

	if strings.Compare(m.GetScheme(), target.GetScheme()) != 0 {
		return false
	}

	if len(m.GetHttpHeaders()) != len(target.GetHttpHeaders()) {
		return false
	}
	for idx, v := range m.GetHttpHeaders() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetHttpHeaders()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetHttpHeaders()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *HTTPHeader) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HTTPHeader)
	if !ok {
		that2, ok := that.(HTTPHeader)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetValue(), target.GetValue()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *HorizontalPodAutoscalerSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HorizontalPodAutoscalerSpec)
	if !ok {
		that2, ok := that.(HorizontalPodAutoscalerSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetScaleTargetRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetScaleTargetRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetScaleTargetRef(), target.GetScaleTargetRef()) {
			return false
		}
	}

	if m.GetMinReplicas() != target.GetMinReplicas() {
		return false
	}

	if m.GetMaxReplicas() != target.GetMaxReplicas() {
		return false
	}

	if len(m.GetMetrics()) != len(target.GetMetrics()) {
		return false
	}
	for idx, v := range m.GetMetrics() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetMetrics()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetMetrics()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetBehavior()).(equality.Equalizer); ok {
		if !h.Equal(target.GetBehavior()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetBehavior(), target.GetBehavior()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *HorizontalPodAutoScalerBehavior) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HorizontalPodAutoScalerBehavior)
	if !ok {
		that2, ok := that.(HorizontalPodAutoScalerBehavior)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetScaleUp()).(equality.Equalizer); ok {
		if !h.Equal(target.GetScaleUp()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetScaleUp(), target.GetScaleUp()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetScaleDown()).(equality.Equalizer); ok {
		if !h.Equal(target.GetScaleDown()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetScaleDown(), target.GetScaleDown()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *HPAScalingRules) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HPAScalingRules)
	if !ok {
		that2, ok := that.(HPAScalingRules)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetStabilizationWindowSeconds() != target.GetStabilizationWindowSeconds() {
		return false
	}

	if strings.Compare(m.GetSelectPolicy(), target.GetSelectPolicy()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetPolicies()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPolicies()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPolicies(), target.GetPolicies()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *HPAScalingPolicy) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HPAScalingPolicy)
	if !ok {
		that2, ok := that.(HPAScalingPolicy)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetType(), target.GetType()) != 0 {
		return false
	}

	if m.GetValue() != target.GetValue() {
		return false
	}

	if m.GetPeriodSeconds() != target.GetPeriodSeconds() {
		return false
	}

	return true
}

// Equal function
func (m *LocalObjectReference) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*LocalObjectReference)
	if !ok {
		that2, ok := that.(LocalObjectReference)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *MetricIdentifier) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*MetricIdentifier)
	if !ok {
		that2, ok := that.(MetricIdentifier)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetSelector()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSelector()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSelector(), target.GetSelector()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *MetricSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*MetricSpec)
	if !ok {
		that2, ok := that.(MetricSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetType(), target.GetType()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetObject()).(equality.Equalizer); ok {
		if !h.Equal(target.GetObject()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetObject(), target.GetObject()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetPods()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPods()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPods(), target.GetPods()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetResource()).(equality.Equalizer); ok {
		if !h.Equal(target.GetResource()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetResource(), target.GetResource()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetContainerResource()).(equality.Equalizer); ok {
		if !h.Equal(target.GetContainerResource()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetContainerResource(), target.GetContainerResource()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetExternal()).(equality.Equalizer); ok {
		if !h.Equal(target.GetExternal()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetExternal(), target.GetExternal()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *MetricStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*MetricStatus)
	if !ok {
		that2, ok := that.(MetricStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetType(), target.GetType()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetObject()).(equality.Equalizer); ok {
		if !h.Equal(target.GetObject()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetObject(), target.GetObject()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetPods()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPods()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPods(), target.GetPods()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetResource()).(equality.Equalizer); ok {
		if !h.Equal(target.GetResource()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetResource(), target.GetResource()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetContainerResource()).(equality.Equalizer); ok {
		if !h.Equal(target.GetContainerResource()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetContainerResource(), target.GetContainerResource()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetExternal()).(equality.Equalizer); ok {
		if !h.Equal(target.GetExternal()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetExternal(), target.GetExternal()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *MetricTarget) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*MetricTarget)
	if !ok {
		that2, ok := that.(MetricTarget)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetType(), target.GetType()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetValue()).(equality.Equalizer); ok {
		if !h.Equal(target.GetValue()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetValue(), target.GetValue()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetAverageValue()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAverageValue()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAverageValue(), target.GetAverageValue()) {
			return false
		}
	}

	if m.GetAverageUtilization() != target.GetAverageUtilization() {
		return false
	}

	return true
}

// Equal function
func (m *MetricValueStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*MetricValueStatus)
	if !ok {
		that2, ok := that.(MetricValueStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetValue()).(equality.Equalizer); ok {
		if !h.Equal(target.GetValue()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetValue(), target.GetValue()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetAverageValue()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAverageValue()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAverageValue(), target.GetAverageValue()) {
			return false
		}
	}

	if m.GetAverageUtilization() != target.GetAverageUtilization() {
		return false
	}

	return true
}

// Equal function
func (m *NodeAffinity) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*NodeAffinity)
	if !ok {
		that2, ok := that.(NodeAffinity)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetRequiredDuringSchedulingIgnoredDuringExecution()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRequiredDuringSchedulingIgnoredDuringExecution()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRequiredDuringSchedulingIgnoredDuringExecution(), target.GetRequiredDuringSchedulingIgnoredDuringExecution()) {
			return false
		}
	}

	if len(m.GetPreferredDuringSchedulingIgnoredDuringExecution()) != len(target.GetPreferredDuringSchedulingIgnoredDuringExecution()) {
		return false
	}
	for idx, v := range m.GetPreferredDuringSchedulingIgnoredDuringExecution() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetPreferredDuringSchedulingIgnoredDuringExecution()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetPreferredDuringSchedulingIgnoredDuringExecution()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *NodeSelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*NodeSelector)
	if !ok {
		that2, ok := that.(NodeSelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetNodeSelectorTerms()) != len(target.GetNodeSelectorTerms()) {
		return false
	}
	for idx, v := range m.GetNodeSelectorTerms() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetNodeSelectorTerms()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetNodeSelectorTerms()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *NodeSelectorTerm) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*NodeSelectorTerm)
	if !ok {
		that2, ok := that.(NodeSelectorTerm)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetMatchExpressions()) != len(target.GetMatchExpressions()) {
		return false
	}
	for idx, v := range m.GetMatchExpressions() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetMatchExpressions()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetMatchExpressions()[idx]) {
				return false
			}
		}

	}

	if len(m.GetMatchFields()) != len(target.GetMatchFields()) {
		return false
	}
	for idx, v := range m.GetMatchFields() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetMatchFields()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetMatchFields()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *NodeSelectorRequirement) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*NodeSelectorRequirement)
	if !ok {
		that2, ok := that.(NodeSelectorRequirement)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetKey(), target.GetKey()) != 0 {
		return false
	}

	if strings.Compare(m.GetOperator(), target.GetOperator()) != 0 {
		return false
	}

	if len(m.GetValues()) != len(target.GetValues()) {
		return false
	}
	for idx, v := range m.GetValues() {

		if strings.Compare(v, target.GetValues()[idx]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *ObjectFieldSelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ObjectFieldSelector)
	if !ok {
		that2, ok := that.(ObjectFieldSelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetApiVersion(), target.GetApiVersion()) != 0 {
		return false
	}

	if strings.Compare(m.GetFieldPath(), target.GetFieldPath()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *ObjectMeta) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ObjectMeta)
	if !ok {
		that2, ok := that.(ObjectMeta)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetNamespace(), target.GetNamespace()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *ObjectMetricSource) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ObjectMetricSource)
	if !ok {
		that2, ok := that.(ObjectMetricSource)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetMetricName(), target.GetMetricName()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetTargetValue()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTargetValue()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTargetValue(), target.GetTargetValue()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetSelector()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSelector()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSelector(), target.GetSelector()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetAverageValue()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAverageValue()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAverageValue(), target.GetAverageValue()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetTarget()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTarget()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTarget(), target.GetTarget()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetDescribedObject()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDescribedObject()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDescribedObject(), target.GetDescribedObject()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMetric()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetric()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetric(), target.GetMetric()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ObjectMetricStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ObjectMetricStatus)
	if !ok {
		that2, ok := that.(ObjectMetricStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetMetric()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetric()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetric(), target.GetMetric()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetCurrent()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCurrent()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCurrent(), target.GetCurrent()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetDescribedObject()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDescribedObject()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDescribedObject(), target.GetDescribedObject()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *PodAffinity) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PodAffinity)
	if !ok {
		that2, ok := that.(PodAffinity)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetRequiredDuringSchedulingIgnoredDuringExecution()) != len(target.GetRequiredDuringSchedulingIgnoredDuringExecution()) {
		return false
	}
	for idx, v := range m.GetRequiredDuringSchedulingIgnoredDuringExecution() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetRequiredDuringSchedulingIgnoredDuringExecution()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetRequiredDuringSchedulingIgnoredDuringExecution()[idx]) {
				return false
			}
		}

	}

	if len(m.GetPreferredDuringSchedulingIgnoredDuringExecution()) != len(target.GetPreferredDuringSchedulingIgnoredDuringExecution()) {
		return false
	}
	for idx, v := range m.GetPreferredDuringSchedulingIgnoredDuringExecution() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetPreferredDuringSchedulingIgnoredDuringExecution()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetPreferredDuringSchedulingIgnoredDuringExecution()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *PodAntiAffinity) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PodAntiAffinity)
	if !ok {
		that2, ok := that.(PodAntiAffinity)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetRequiredDuringSchedulingIgnoredDuringExecution()) != len(target.GetRequiredDuringSchedulingIgnoredDuringExecution()) {
		return false
	}
	for idx, v := range m.GetRequiredDuringSchedulingIgnoredDuringExecution() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetRequiredDuringSchedulingIgnoredDuringExecution()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetRequiredDuringSchedulingIgnoredDuringExecution()[idx]) {
				return false
			}
		}

	}

	if len(m.GetPreferredDuringSchedulingIgnoredDuringExecution()) != len(target.GetPreferredDuringSchedulingIgnoredDuringExecution()) {
		return false
	}
	for idx, v := range m.GetPreferredDuringSchedulingIgnoredDuringExecution() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetPreferredDuringSchedulingIgnoredDuringExecution()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetPreferredDuringSchedulingIgnoredDuringExecution()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *PodAffinityTerm) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PodAffinityTerm)
	if !ok {
		that2, ok := that.(PodAffinityTerm)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetLabelSelector()).(equality.Equalizer); ok {
		if !h.Equal(target.GetLabelSelector()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetLabelSelector(), target.GetLabelSelector()) {
			return false
		}
	}

	if len(m.GetNamespaces()) != len(target.GetNamespaces()) {
		return false
	}
	for idx, v := range m.GetNamespaces() {

		if strings.Compare(v, target.GetNamespaces()[idx]) != 0 {
			return false
		}

	}

	if strings.Compare(m.GetTopologyKey(), target.GetTopologyKey()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *PodDisruptionBudgetSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PodDisruptionBudgetSpec)
	if !ok {
		that2, ok := that.(PodDisruptionBudgetSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetMinAvailable()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMinAvailable()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMinAvailable(), target.GetMinAvailable()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetSelector()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSelector()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSelector(), target.GetSelector()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxUnavailable()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxUnavailable()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxUnavailable(), target.GetMaxUnavailable()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *PodsMetricSource) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PodsMetricSource)
	if !ok {
		that2, ok := that.(PodsMetricSource)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetMetricName(), target.GetMetricName()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetTargetAverageValue()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTargetAverageValue()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTargetAverageValue(), target.GetTargetAverageValue()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetSelector()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSelector()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSelector(), target.GetSelector()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMetric()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetric()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetric(), target.GetMetric()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetTarget()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTarget()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTarget(), target.GetTarget()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *PodsMetricStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PodsMetricStatus)
	if !ok {
		that2, ok := that.(PodsMetricStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetMetric()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetric()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetric(), target.GetMetric()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetCurrent()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCurrent()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCurrent(), target.GetCurrent()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *PreferredSchedulingTerm) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PreferredSchedulingTerm)
	if !ok {
		that2, ok := that.(PreferredSchedulingTerm)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetWeight() != target.GetWeight() {
		return false
	}

	if h, ok := interface{}(m.GetPreference()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPreference()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPreference(), target.GetPreference()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ReadinessProbe) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ReadinessProbe)
	if !ok {
		that2, ok := that.(ReadinessProbe)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetExec()).(equality.Equalizer); ok {
		if !h.Equal(target.GetExec()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetExec(), target.GetExec()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetHttpGet()).(equality.Equalizer); ok {
		if !h.Equal(target.GetHttpGet()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetHttpGet(), target.GetHttpGet()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetTcpSocket()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTcpSocket()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTcpSocket(), target.GetTcpSocket()) {
			return false
		}
	}

	if m.GetInitialDelaySeconds() != target.GetInitialDelaySeconds() {
		return false
	}

	if m.GetTimeoutSeconds() != target.GetTimeoutSeconds() {
		return false
	}

	if m.GetPeriodSeconds() != target.GetPeriodSeconds() {
		return false
	}

	if m.GetSuccessThreshold() != target.GetSuccessThreshold() {
		return false
	}

	if m.GetFailureThreshold() != target.GetFailureThreshold() {
		return false
	}

	return true
}

// Equal function
func (m *ResourceFieldSelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ResourceFieldSelector)
	if !ok {
		that2, ok := that.(ResourceFieldSelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetContainerName(), target.GetContainerName()) != 0 {
		return false
	}

	if strings.Compare(m.GetResource(), target.GetResource()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetDivisor()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDivisor()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDivisor(), target.GetDivisor()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ResourceMetricSource) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ResourceMetricSource)
	if !ok {
		that2, ok := that.(ResourceMetricSource)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if m.GetTargetAverageUtilization() != target.GetTargetAverageUtilization() {
		return false
	}

	if h, ok := interface{}(m.GetTargetAverageValue()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTargetAverageValue()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTargetAverageValue(), target.GetTargetAverageValue()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetTarget()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTarget()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTarget(), target.GetTarget()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ResourceMetricStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ResourceMetricStatus)
	if !ok {
		that2, ok := that.(ResourceMetricStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetCurrent()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCurrent()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCurrent(), target.GetCurrent()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *Resources) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Resources)
	if !ok {
		that2, ok := that.(Resources)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetLimits()) != len(target.GetLimits()) {
		return false
	}
	for k, v := range m.GetLimits() {

		if strings.Compare(v, target.GetLimits()[k]) != 0 {
			return false
		}

	}

	if len(m.GetRequests()) != len(target.GetRequests()) {
		return false
	}
	for k, v := range m.GetRequests() {

		if strings.Compare(v, target.GetRequests()[k]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *RollingUpdateDeployment) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RollingUpdateDeployment)
	if !ok {
		that2, ok := that.(RollingUpdateDeployment)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetMaxUnavailable()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxUnavailable()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxUnavailable(), target.GetMaxUnavailable()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxSurge()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxSurge()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxSurge(), target.GetMaxSurge()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *SecretKeySelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*SecretKeySelector)
	if !ok {
		that2, ok := that.(SecretKeySelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetLocalObjectReference()).(equality.Equalizer); ok {
		if !h.Equal(target.GetLocalObjectReference()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetLocalObjectReference(), target.GetLocalObjectReference()) {
			return false
		}
	}

	if strings.Compare(m.GetKey(), target.GetKey()) != 0 {
		return false
	}

	if m.GetOptional() != target.GetOptional() {
		return false
	}

	return true
}

// Equal function
func (m *ServiceSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ServiceSpec)
	if !ok {
		that2, ok := that.(ServiceSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetPorts()) != len(target.GetPorts()) {
		return false
	}
	for idx, v := range m.GetPorts() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetPorts()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetPorts()[idx]) {
				return false
			}
		}

	}

	if len(m.GetSelector()) != len(target.GetSelector()) {
		return false
	}
	for k, v := range m.GetSelector() {

		if strings.Compare(v, target.GetSelector()[k]) != 0 {
			return false
		}

	}

	if strings.Compare(m.GetClusterIP(), target.GetClusterIP()) != 0 {
		return false
	}

	if strings.Compare(m.GetType(), target.GetType()) != 0 {
		return false
	}

	if len(m.GetExternalIPs()) != len(target.GetExternalIPs()) {
		return false
	}
	for idx, v := range m.GetExternalIPs() {

		if strings.Compare(v, target.GetExternalIPs()[idx]) != 0 {
			return false
		}

	}

	if strings.Compare(m.GetSessionAffinity(), target.GetSessionAffinity()) != 0 {
		return false
	}

	if strings.Compare(m.GetLoadBalancerIP(), target.GetLoadBalancerIP()) != 0 {
		return false
	}

	if len(m.GetLoadBalancerSourceRanges()) != len(target.GetLoadBalancerSourceRanges()) {
		return false
	}
	for idx, v := range m.GetLoadBalancerSourceRanges() {

		if strings.Compare(v, target.GetLoadBalancerSourceRanges()[idx]) != 0 {
			return false
		}

	}

	if strings.Compare(m.GetExternalName(), target.GetExternalName()) != 0 {
		return false
	}

	if strings.Compare(m.GetExternalTrafficPolicy(), target.GetExternalTrafficPolicy()) != 0 {
		return false
	}

	if m.GetHealthCheckNodePort() != target.GetHealthCheckNodePort() {
		return false
	}

	if m.GetPublishNotReadyAddresses() != target.GetPublishNotReadyAddresses() {
		return false
	}

	if h, ok := interface{}(m.GetSessionAffinityConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSessionAffinityConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSessionAffinityConfig(), target.GetSessionAffinityConfig()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ServicePort) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ServicePort)
	if !ok {
		that2, ok := that.(ServicePort)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetProtocol(), target.GetProtocol()) != 0 {
		return false
	}

	if m.GetPort() != target.GetPort() {
		return false
	}

	if h, ok := interface{}(m.GetTargetPort()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTargetPort()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTargetPort(), target.GetTargetPort()) {
			return false
		}
	}

	if m.GetNodePort() != target.GetNodePort() {
		return false
	}

	return true
}

// Equal function
func (m *SessionAffinityConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*SessionAffinityConfig)
	if !ok {
		that2, ok := that.(SessionAffinityConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetClientIP()).(equality.Equalizer); ok {
		if !h.Equal(target.GetClientIP()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetClientIP(), target.GetClientIP()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *TCPSocketAction) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*TCPSocketAction)
	if !ok {
		that2, ok := that.(TCPSocketAction)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetPort()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPort()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPort(), target.GetPort()) {
			return false
		}
	}

	if strings.Compare(m.GetHost(), target.GetHost()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *Toleration) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Toleration)
	if !ok {
		that2, ok := that.(Toleration)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetKey(), target.GetKey()) != 0 {
		return false
	}

	if strings.Compare(m.GetOperator(), target.GetOperator()) != 0 {
		return false
	}

	if strings.Compare(m.GetValue(), target.GetValue()) != 0 {
		return false
	}

	if strings.Compare(m.GetEffect(), target.GetEffect()) != 0 {
		return false
	}

	if m.GetTolerationSeconds() != target.GetTolerationSeconds() {
		return false
	}

	return true
}

// Equal function
func (m *WeightedPodAffinityTerm) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*WeightedPodAffinityTerm)
	if !ok {
		that2, ok := that.(WeightedPodAffinityTerm)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetWeight() != target.GetWeight() {
		return false
	}

	if h, ok := interface{}(m.GetPodAffinityTerm()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPodAffinityTerm()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPodAffinityTerm(), target.GetPodAffinityTerm()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *PodSecurityContext) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PodSecurityContext)
	if !ok {
		that2, ok := that.(PodSecurityContext)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetSeLinuxOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSeLinuxOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSeLinuxOptions(), target.GetSeLinuxOptions()) {
			return false
		}
	}

	if m.GetRunAsUser() != target.GetRunAsUser() {
		return false
	}

	if m.GetRunAsNonRoot() != target.GetRunAsNonRoot() {
		return false
	}

	if len(m.GetSupplementalGroups()) != len(target.GetSupplementalGroups()) {
		return false
	}
	for idx, v := range m.GetSupplementalGroups() {

		if v != target.GetSupplementalGroups()[idx] {
			return false
		}

	}

	if m.GetFsGroup() != target.GetFsGroup() {
		return false
	}

	if m.GetRunAsGroup() != target.GetRunAsGroup() {
		return false
	}

	if len(m.GetSysctls()) != len(target.GetSysctls()) {
		return false
	}
	for idx, v := range m.GetSysctls() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetSysctls()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetSysctls()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetWindowsOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetWindowsOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetWindowsOptions(), target.GetWindowsOptions()) {
			return false
		}
	}

	if strings.Compare(m.GetFsGroupChangePolicy(), target.GetFsGroupChangePolicy()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetSeccompProfile()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSeccompProfile()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSeccompProfile(), target.GetSeccompProfile()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *SELinuxOptions) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*SELinuxOptions)
	if !ok {
		that2, ok := that.(SELinuxOptions)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetUser(), target.GetUser()) != 0 {
		return false
	}

	if strings.Compare(m.GetRole(), target.GetRole()) != 0 {
		return false
	}

	if strings.Compare(m.GetType(), target.GetType()) != 0 {
		return false
	}

	if strings.Compare(m.GetLevel(), target.GetLevel()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *Sysctl) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Sysctl)
	if !ok {
		that2, ok := that.(Sysctl)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetValue(), target.GetValue()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *WindowsSecurityContextOptions) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*WindowsSecurityContextOptions)
	if !ok {
		that2, ok := that.(WindowsSecurityContextOptions)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetGmsaCredentialSpecName(), target.GetGmsaCredentialSpecName()) != 0 {
		return false
	}

	if strings.Compare(m.GetGmsaCredentialSpec(), target.GetGmsaCredentialSpec()) != 0 {
		return false
	}

	if strings.Compare(m.GetRunAsUserName(), target.GetRunAsUserName()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *SeccompProfile) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*SeccompProfile)
	if !ok {
		that2, ok := that.(SeccompProfile)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetType(), target.GetType()) != 0 {
		return false
	}

	if strings.Compare(m.GetLocalhostProfile(), target.GetLocalhostProfile()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *InstallStatus_VersionStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*InstallStatus_VersionStatus)
	if !ok {
		that2, ok := that.(InstallStatus_VersionStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetVersion(), target.GetVersion()) != 0 {
		return false
	}

	if m.GetStatus() != target.GetStatus() {
		return false
	}

	if strings.Compare(m.GetError(), target.GetError()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *K8SObjectOverlay_PathValue) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*K8SObjectOverlay_PathValue)
	if !ok {
		that2, ok := that.(K8SObjectOverlay_PathValue)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetPath(), target.GetPath()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetValue()).(equality.Equalizer); ok {
		if !h.Equal(target.GetValue()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetValue(), target.GetValue()) {
			return false
		}
	}

	return true
}
