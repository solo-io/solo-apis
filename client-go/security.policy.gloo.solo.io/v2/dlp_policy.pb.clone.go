// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/policy/v2/security/dlp_policy.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"

	github_com_solo_io_gloo_mesh_solo_apis_client_go_envoy_gloo_ee_api_envoy_config_filter_http_transformation_ee_v2 "github.com/solo-io/solo-apis/client-go/envoy-gloo-ee/api/envoy/config/filter/http/transformation_ee/v2"

	google_golang_org_protobuf_types_known_wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *DLPPolicySpec) Clone() proto.Message {
	var target *DLPPolicySpec
	if m == nil {
		return target
	}
	target = &DLPPolicySpec{}

	if m.GetApplyToRoutes() != nil {
		target.ApplyToRoutes = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.RouteSelector, len(m.GetApplyToRoutes()))
		for idx, v := range m.GetApplyToRoutes() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ApplyToRoutes[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.RouteSelector)
			} else {
				target.ApplyToRoutes[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.RouteSelector)
			}

		}
	}

	if h, ok := interface{}(m.GetConfig()).(clone.Cloner); ok {
		target.Config = h.Clone().(*DLPPolicySpec_Config)
	} else {
		target.Config = proto.Clone(m.GetConfig()).(*DLPPolicySpec_Config)
	}

	return target
}

// Clone function
func (m *DlpAction) Clone() proto.Message {
	var target *DlpAction
	if m == nil {
		return target
	}
	target = &DlpAction{}

	if h, ok := interface{}(m.GetShadow()).(clone.Cloner); ok {
		target.Shadow = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.BoolValue)
	} else {
		target.Shadow = proto.Clone(m.GetShadow()).(*google_golang_org_protobuf_types_known_wrapperspb.BoolValue)
	}

	switch m.Action.(type) {

	case *DlpAction_PredefinedAction_:

		target.Action = &DlpAction_PredefinedAction_{
			PredefinedAction: m.GetPredefinedAction(),
		}

	case *DlpAction_CustomAction:

		if h, ok := interface{}(m.GetCustomAction()).(clone.Cloner); ok {
			target.Action = &DlpAction_CustomAction{
				CustomAction: h.Clone().(*DlpCustomAction),
			}
		} else {
			target.Action = &DlpAction_CustomAction{
				CustomAction: proto.Clone(m.GetCustomAction()).(*DlpCustomAction),
			}
		}

	case *DlpAction_KeyValueAction:

		if h, ok := interface{}(m.GetKeyValueAction()).(clone.Cloner); ok {
			target.Action = &DlpAction_KeyValueAction{
				KeyValueAction: h.Clone().(*DlpKeyValueAction),
			}
		} else {
			target.Action = &DlpAction_KeyValueAction{
				KeyValueAction: proto.Clone(m.GetKeyValueAction()).(*DlpKeyValueAction),
			}
		}

	}

	return target
}

// Clone function
func (m *DlpCustomAction) Clone() proto.Message {
	var target *DlpCustomAction
	if m == nil {
		return target
	}
	target = &DlpCustomAction{}

	target.Name = m.GetName()

	if h, ok := interface{}(m.GetMaskChar()).(clone.Cloner); ok {
		target.MaskChar = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.StringValue)
	} else {
		target.MaskChar = proto.Clone(m.GetMaskChar()).(*google_golang_org_protobuf_types_known_wrapperspb.StringValue)
	}

	if h, ok := interface{}(m.GetPercent()).(clone.Cloner); ok {
		target.Percent = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.FloatValue)
	} else {
		target.Percent = proto.Clone(m.GetPercent()).(*google_golang_org_protobuf_types_known_wrapperspb.FloatValue)
	}

	if m.GetRegexActions() != nil {
		target.RegexActions = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_envoy_gloo_ee_api_envoy_config_filter_http_transformation_ee_v2.RegexAction, len(m.GetRegexActions()))
		for idx, v := range m.GetRegexActions() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.RegexActions[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_envoy_gloo_ee_api_envoy_config_filter_http_transformation_ee_v2.RegexAction)
			} else {
				target.RegexActions[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_envoy_gloo_ee_api_envoy_config_filter_http_transformation_ee_v2.RegexAction)
			}

		}
	}

	return target
}

// Clone function
func (m *DlpKeyValueAction) Clone() proto.Message {
	var target *DlpKeyValueAction
	if m == nil {
		return target
	}
	target = &DlpKeyValueAction{}

	target.Name = m.GetName()

	if h, ok := interface{}(m.GetMaskChar()).(clone.Cloner); ok {
		target.MaskChar = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.StringValue)
	} else {
		target.MaskChar = proto.Clone(m.GetMaskChar()).(*google_golang_org_protobuf_types_known_wrapperspb.StringValue)
	}

	if h, ok := interface{}(m.GetPercent()).(clone.Cloner); ok {
		target.Percent = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.FloatValue)
	} else {
		target.Percent = proto.Clone(m.GetPercent()).(*google_golang_org_protobuf_types_known_wrapperspb.FloatValue)
	}

	if m.GetKeysToMask() != nil {
		target.KeysToMask = make([]string, len(m.GetKeysToMask()))
		for idx, v := range m.GetKeysToMask() {

			target.KeysToMask[idx] = v

		}
	}

	return target
}

// Clone function
func (m *DLPPolicyStatus) Clone() proto.Message {
	var target *DLPPolicyStatus
	if m == nil {
		return target
	}
	target = &DLPPolicyStatus{}

	if h, ok := interface{}(m.GetCommon()).(clone.Cloner); ok {
		target.Common = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	} else {
		target.Common = proto.Clone(m.GetCommon()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	}

	target.NumSelectedRoutes = m.GetNumSelectedRoutes()

	return target
}

// Clone function
func (m *DLPPolicyReport) Clone() proto.Message {
	var target *DLPPolicyReport
	if m == nil {
		return target
	}
	target = &DLPPolicyReport{}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			}

		}
	}

	if m.GetSelectedRoutes() != nil {
		target.SelectedRoutes = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.RouteReference, len(m.GetSelectedRoutes()))
		for idx, v := range m.GetSelectedRoutes() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SelectedRoutes[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.RouteReference)
			} else {
				target.SelectedRoutes[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.RouteReference)
			}

		}
	}

	return target
}

// Clone function
func (m *DLPPolicySpec_Config) Clone() proto.Message {
	var target *DLPPolicySpec_Config
	if m == nil {
		return target
	}
	target = &DLPPolicySpec_Config{}

	if m.GetActions() != nil {
		target.Actions = make([]*DlpAction, len(m.GetActions()))
		for idx, v := range m.GetActions() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Actions[idx] = h.Clone().(*DlpAction)
			} else {
				target.Actions[idx] = proto.Clone(v).(*DlpAction)
			}

		}
	}

	target.Sanitize = m.GetSanitize()

	return target
}
