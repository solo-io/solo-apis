// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v2 is a generated GoMock package.
package mock_v2

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	v2 "github.com/solo-io/solo-apis/client-go/security.policy.gloo.solo.io/v2"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v2.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// AccessPolicies mocks base method.
func (m *MockClientset) AccessPolicies() v2.AccessPolicyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessPolicies")
	ret0, _ := ret[0].(v2.AccessPolicyClient)
	return ret0
}

// AccessPolicies indicates an expected call of AccessPolicies.
func (mr *MockClientsetMockRecorder) AccessPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessPolicies", reflect.TypeOf((*MockClientset)(nil).AccessPolicies))
}

// CORSPolicies mocks base method.
func (m *MockClientset) CORSPolicies() v2.CORSPolicyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CORSPolicies")
	ret0, _ := ret[0].(v2.CORSPolicyClient)
	return ret0
}

// CORSPolicies indicates an expected call of CORSPolicies.
func (mr *MockClientsetMockRecorder) CORSPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CORSPolicies", reflect.TypeOf((*MockClientset)(nil).CORSPolicies))
}

// CSRFPolicies mocks base method.
func (m *MockClientset) CSRFPolicies() v2.CSRFPolicyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CSRFPolicies")
	ret0, _ := ret[0].(v2.CSRFPolicyClient)
	return ret0
}

// CSRFPolicies indicates an expected call of CSRFPolicies.
func (mr *MockClientsetMockRecorder) CSRFPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CSRFPolicies", reflect.TypeOf((*MockClientset)(nil).CSRFPolicies))
}

// ClientTLSPolicies mocks base method.
func (m *MockClientset) ClientTLSPolicies() v2.ClientTLSPolicyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientTLSPolicies")
	ret0, _ := ret[0].(v2.ClientTLSPolicyClient)
	return ret0
}

// ClientTLSPolicies indicates an expected call of ClientTLSPolicies.
func (mr *MockClientsetMockRecorder) ClientTLSPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientTLSPolicies", reflect.TypeOf((*MockClientset)(nil).ClientTLSPolicies))
}

// DLPPolicies mocks base method.
func (m *MockClientset) DLPPolicies() v2.DLPPolicyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DLPPolicies")
	ret0, _ := ret[0].(v2.DLPPolicyClient)
	return ret0
}

// DLPPolicies indicates an expected call of DLPPolicies.
func (mr *MockClientsetMockRecorder) DLPPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DLPPolicies", reflect.TypeOf((*MockClientset)(nil).DLPPolicies))
}

// ExtAuthPolicies mocks base method.
func (m *MockClientset) ExtAuthPolicies() v2.ExtAuthPolicyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtAuthPolicies")
	ret0, _ := ret[0].(v2.ExtAuthPolicyClient)
	return ret0
}

// ExtAuthPolicies indicates an expected call of ExtAuthPolicies.
func (mr *MockClientsetMockRecorder) ExtAuthPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtAuthPolicies", reflect.TypeOf((*MockClientset)(nil).ExtAuthPolicies))
}

// GraphQLAllowedQueryPolicies mocks base method.
func (m *MockClientset) GraphQLAllowedQueryPolicies() v2.GraphQLAllowedQueryPolicyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphQLAllowedQueryPolicies")
	ret0, _ := ret[0].(v2.GraphQLAllowedQueryPolicyClient)
	return ret0
}

// GraphQLAllowedQueryPolicies indicates an expected call of GraphQLAllowedQueryPolicies.
func (mr *MockClientsetMockRecorder) GraphQLAllowedQueryPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphQLAllowedQueryPolicies", reflect.TypeOf((*MockClientset)(nil).GraphQLAllowedQueryPolicies))
}

// JWTPolicies mocks base method.
func (m *MockClientset) JWTPolicies() v2.JWTPolicyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JWTPolicies")
	ret0, _ := ret[0].(v2.JWTPolicyClient)
	return ret0
}

// JWTPolicies indicates an expected call of JWTPolicies.
func (mr *MockClientsetMockRecorder) JWTPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JWTPolicies", reflect.TypeOf((*MockClientset)(nil).JWTPolicies))
}

// WAFPolicies mocks base method.
func (m *MockClientset) WAFPolicies() v2.WAFPolicyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WAFPolicies")
	ret0, _ := ret[0].(v2.WAFPolicyClient)
	return ret0
}

// WAFPolicies indicates an expected call of WAFPolicies.
func (mr *MockClientsetMockRecorder) WAFPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WAFPolicies", reflect.TypeOf((*MockClientset)(nil).WAFPolicies))
}

// MockAccessPolicyReader is a mock of AccessPolicyReader interface.
type MockAccessPolicyReader struct {
	ctrl     *gomock.Controller
	recorder *MockAccessPolicyReaderMockRecorder
}

// MockAccessPolicyReaderMockRecorder is the mock recorder for MockAccessPolicyReader.
type MockAccessPolicyReaderMockRecorder struct {
	mock *MockAccessPolicyReader
}

// NewMockAccessPolicyReader creates a new mock instance.
func NewMockAccessPolicyReader(ctrl *gomock.Controller) *MockAccessPolicyReader {
	mock := &MockAccessPolicyReader{ctrl: ctrl}
	mock.recorder = &MockAccessPolicyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessPolicyReader) EXPECT() *MockAccessPolicyReaderMockRecorder {
	return m.recorder
}

// GetAccessPolicy mocks base method.
func (m *MockAccessPolicyReader) GetAccessPolicy(ctx context.Context, key client.ObjectKey) (*v2.AccessPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.AccessPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessPolicy indicates an expected call of GetAccessPolicy.
func (mr *MockAccessPolicyReaderMockRecorder) GetAccessPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPolicy", reflect.TypeOf((*MockAccessPolicyReader)(nil).GetAccessPolicy), ctx, key)
}

// ListAccessPolicy mocks base method.
func (m *MockAccessPolicyReader) ListAccessPolicy(ctx context.Context, opts ...client.ListOption) (*v2.AccessPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessPolicy", varargs...)
	ret0, _ := ret[0].(*v2.AccessPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessPolicy indicates an expected call of ListAccessPolicy.
func (mr *MockAccessPolicyReaderMockRecorder) ListAccessPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPolicy", reflect.TypeOf((*MockAccessPolicyReader)(nil).ListAccessPolicy), varargs...)
}

// MockAccessPolicyWriter is a mock of AccessPolicyWriter interface.
type MockAccessPolicyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockAccessPolicyWriterMockRecorder
}

// MockAccessPolicyWriterMockRecorder is the mock recorder for MockAccessPolicyWriter.
type MockAccessPolicyWriterMockRecorder struct {
	mock *MockAccessPolicyWriter
}

// NewMockAccessPolicyWriter creates a new mock instance.
func NewMockAccessPolicyWriter(ctrl *gomock.Controller) *MockAccessPolicyWriter {
	mock := &MockAccessPolicyWriter{ctrl: ctrl}
	mock.recorder = &MockAccessPolicyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessPolicyWriter) EXPECT() *MockAccessPolicyWriterMockRecorder {
	return m.recorder
}

// CreateAccessPolicy mocks base method.
func (m *MockAccessPolicyWriter) CreateAccessPolicy(ctx context.Context, obj *v2.AccessPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccessPolicy indicates an expected call of CreateAccessPolicy.
func (mr *MockAccessPolicyWriterMockRecorder) CreateAccessPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPolicy", reflect.TypeOf((*MockAccessPolicyWriter)(nil).CreateAccessPolicy), varargs...)
}

// DeleteAccessPolicy mocks base method.
func (m *MockAccessPolicyWriter) DeleteAccessPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessPolicy indicates an expected call of DeleteAccessPolicy.
func (mr *MockAccessPolicyWriterMockRecorder) DeleteAccessPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPolicy", reflect.TypeOf((*MockAccessPolicyWriter)(nil).DeleteAccessPolicy), varargs...)
}

// DeleteAllOfAccessPolicy mocks base method.
func (m *MockAccessPolicyWriter) DeleteAllOfAccessPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfAccessPolicy indicates an expected call of DeleteAllOfAccessPolicy.
func (mr *MockAccessPolicyWriterMockRecorder) DeleteAllOfAccessPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfAccessPolicy", reflect.TypeOf((*MockAccessPolicyWriter)(nil).DeleteAllOfAccessPolicy), varargs...)
}

// PatchAccessPolicy mocks base method.
func (m *MockAccessPolicyWriter) PatchAccessPolicy(ctx context.Context, obj *v2.AccessPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchAccessPolicy indicates an expected call of PatchAccessPolicy.
func (mr *MockAccessPolicyWriterMockRecorder) PatchAccessPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchAccessPolicy", reflect.TypeOf((*MockAccessPolicyWriter)(nil).PatchAccessPolicy), varargs...)
}

// UpdateAccessPolicy mocks base method.
func (m *MockAccessPolicyWriter) UpdateAccessPolicy(ctx context.Context, obj *v2.AccessPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccessPolicy indicates an expected call of UpdateAccessPolicy.
func (mr *MockAccessPolicyWriterMockRecorder) UpdateAccessPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessPolicy", reflect.TypeOf((*MockAccessPolicyWriter)(nil).UpdateAccessPolicy), varargs...)
}

// UpsertAccessPolicy mocks base method.
func (m *MockAccessPolicyWriter) UpsertAccessPolicy(ctx context.Context, obj *v2.AccessPolicy, transitionFuncs ...v2.AccessPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertAccessPolicy indicates an expected call of UpsertAccessPolicy.
func (mr *MockAccessPolicyWriterMockRecorder) UpsertAccessPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAccessPolicy", reflect.TypeOf((*MockAccessPolicyWriter)(nil).UpsertAccessPolicy), varargs...)
}

// MockAccessPolicyStatusWriter is a mock of AccessPolicyStatusWriter interface.
type MockAccessPolicyStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockAccessPolicyStatusWriterMockRecorder
}

// MockAccessPolicyStatusWriterMockRecorder is the mock recorder for MockAccessPolicyStatusWriter.
type MockAccessPolicyStatusWriterMockRecorder struct {
	mock *MockAccessPolicyStatusWriter
}

// NewMockAccessPolicyStatusWriter creates a new mock instance.
func NewMockAccessPolicyStatusWriter(ctrl *gomock.Controller) *MockAccessPolicyStatusWriter {
	mock := &MockAccessPolicyStatusWriter{ctrl: ctrl}
	mock.recorder = &MockAccessPolicyStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessPolicyStatusWriter) EXPECT() *MockAccessPolicyStatusWriterMockRecorder {
	return m.recorder
}

// PatchAccessPolicyStatus mocks base method.
func (m *MockAccessPolicyStatusWriter) PatchAccessPolicyStatus(ctx context.Context, obj *v2.AccessPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchAccessPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchAccessPolicyStatus indicates an expected call of PatchAccessPolicyStatus.
func (mr *MockAccessPolicyStatusWriterMockRecorder) PatchAccessPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchAccessPolicyStatus", reflect.TypeOf((*MockAccessPolicyStatusWriter)(nil).PatchAccessPolicyStatus), varargs...)
}

// UpdateAccessPolicyStatus mocks base method.
func (m *MockAccessPolicyStatusWriter) UpdateAccessPolicyStatus(ctx context.Context, obj *v2.AccessPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccessPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccessPolicyStatus indicates an expected call of UpdateAccessPolicyStatus.
func (mr *MockAccessPolicyStatusWriterMockRecorder) UpdateAccessPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessPolicyStatus", reflect.TypeOf((*MockAccessPolicyStatusWriter)(nil).UpdateAccessPolicyStatus), varargs...)
}

// MockAccessPolicyClient is a mock of AccessPolicyClient interface.
type MockAccessPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccessPolicyClientMockRecorder
}

// MockAccessPolicyClientMockRecorder is the mock recorder for MockAccessPolicyClient.
type MockAccessPolicyClientMockRecorder struct {
	mock *MockAccessPolicyClient
}

// NewMockAccessPolicyClient creates a new mock instance.
func NewMockAccessPolicyClient(ctrl *gomock.Controller) *MockAccessPolicyClient {
	mock := &MockAccessPolicyClient{ctrl: ctrl}
	mock.recorder = &MockAccessPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessPolicyClient) EXPECT() *MockAccessPolicyClientMockRecorder {
	return m.recorder
}

// CreateAccessPolicy mocks base method.
func (m *MockAccessPolicyClient) CreateAccessPolicy(ctx context.Context, obj *v2.AccessPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccessPolicy indicates an expected call of CreateAccessPolicy.
func (mr *MockAccessPolicyClientMockRecorder) CreateAccessPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPolicy", reflect.TypeOf((*MockAccessPolicyClient)(nil).CreateAccessPolicy), varargs...)
}

// DeleteAccessPolicy mocks base method.
func (m *MockAccessPolicyClient) DeleteAccessPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessPolicy indicates an expected call of DeleteAccessPolicy.
func (mr *MockAccessPolicyClientMockRecorder) DeleteAccessPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPolicy", reflect.TypeOf((*MockAccessPolicyClient)(nil).DeleteAccessPolicy), varargs...)
}

// DeleteAllOfAccessPolicy mocks base method.
func (m *MockAccessPolicyClient) DeleteAllOfAccessPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfAccessPolicy indicates an expected call of DeleteAllOfAccessPolicy.
func (mr *MockAccessPolicyClientMockRecorder) DeleteAllOfAccessPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfAccessPolicy", reflect.TypeOf((*MockAccessPolicyClient)(nil).DeleteAllOfAccessPolicy), varargs...)
}

// GetAccessPolicy mocks base method.
func (m *MockAccessPolicyClient) GetAccessPolicy(ctx context.Context, key client.ObjectKey) (*v2.AccessPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.AccessPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessPolicy indicates an expected call of GetAccessPolicy.
func (mr *MockAccessPolicyClientMockRecorder) GetAccessPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPolicy", reflect.TypeOf((*MockAccessPolicyClient)(nil).GetAccessPolicy), ctx, key)
}

// ListAccessPolicy mocks base method.
func (m *MockAccessPolicyClient) ListAccessPolicy(ctx context.Context, opts ...client.ListOption) (*v2.AccessPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessPolicy", varargs...)
	ret0, _ := ret[0].(*v2.AccessPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessPolicy indicates an expected call of ListAccessPolicy.
func (mr *MockAccessPolicyClientMockRecorder) ListAccessPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPolicy", reflect.TypeOf((*MockAccessPolicyClient)(nil).ListAccessPolicy), varargs...)
}

// PatchAccessPolicy mocks base method.
func (m *MockAccessPolicyClient) PatchAccessPolicy(ctx context.Context, obj *v2.AccessPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchAccessPolicy indicates an expected call of PatchAccessPolicy.
func (mr *MockAccessPolicyClientMockRecorder) PatchAccessPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchAccessPolicy", reflect.TypeOf((*MockAccessPolicyClient)(nil).PatchAccessPolicy), varargs...)
}

// PatchAccessPolicyStatus mocks base method.
func (m *MockAccessPolicyClient) PatchAccessPolicyStatus(ctx context.Context, obj *v2.AccessPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchAccessPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchAccessPolicyStatus indicates an expected call of PatchAccessPolicyStatus.
func (mr *MockAccessPolicyClientMockRecorder) PatchAccessPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchAccessPolicyStatus", reflect.TypeOf((*MockAccessPolicyClient)(nil).PatchAccessPolicyStatus), varargs...)
}

// UpdateAccessPolicy mocks base method.
func (m *MockAccessPolicyClient) UpdateAccessPolicy(ctx context.Context, obj *v2.AccessPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccessPolicy indicates an expected call of UpdateAccessPolicy.
func (mr *MockAccessPolicyClientMockRecorder) UpdateAccessPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessPolicy", reflect.TypeOf((*MockAccessPolicyClient)(nil).UpdateAccessPolicy), varargs...)
}

// UpdateAccessPolicyStatus mocks base method.
func (m *MockAccessPolicyClient) UpdateAccessPolicyStatus(ctx context.Context, obj *v2.AccessPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccessPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccessPolicyStatus indicates an expected call of UpdateAccessPolicyStatus.
func (mr *MockAccessPolicyClientMockRecorder) UpdateAccessPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessPolicyStatus", reflect.TypeOf((*MockAccessPolicyClient)(nil).UpdateAccessPolicyStatus), varargs...)
}

// UpsertAccessPolicy mocks base method.
func (m *MockAccessPolicyClient) UpsertAccessPolicy(ctx context.Context, obj *v2.AccessPolicy, transitionFuncs ...v2.AccessPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertAccessPolicy indicates an expected call of UpsertAccessPolicy.
func (mr *MockAccessPolicyClientMockRecorder) UpsertAccessPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAccessPolicy", reflect.TypeOf((*MockAccessPolicyClient)(nil).UpsertAccessPolicy), varargs...)
}

// MockMulticlusterAccessPolicyClient is a mock of MulticlusterAccessPolicyClient interface.
type MockMulticlusterAccessPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterAccessPolicyClientMockRecorder
}

// MockMulticlusterAccessPolicyClientMockRecorder is the mock recorder for MockMulticlusterAccessPolicyClient.
type MockMulticlusterAccessPolicyClientMockRecorder struct {
	mock *MockMulticlusterAccessPolicyClient
}

// NewMockMulticlusterAccessPolicyClient creates a new mock instance.
func NewMockMulticlusterAccessPolicyClient(ctrl *gomock.Controller) *MockMulticlusterAccessPolicyClient {
	mock := &MockMulticlusterAccessPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterAccessPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterAccessPolicyClient) EXPECT() *MockMulticlusterAccessPolicyClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterAccessPolicyClient) Cluster(cluster string) (v2.AccessPolicyClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.AccessPolicyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterAccessPolicyClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterAccessPolicyClient)(nil).Cluster), cluster)
}

// MockCORSPolicyReader is a mock of CORSPolicyReader interface.
type MockCORSPolicyReader struct {
	ctrl     *gomock.Controller
	recorder *MockCORSPolicyReaderMockRecorder
}

// MockCORSPolicyReaderMockRecorder is the mock recorder for MockCORSPolicyReader.
type MockCORSPolicyReaderMockRecorder struct {
	mock *MockCORSPolicyReader
}

// NewMockCORSPolicyReader creates a new mock instance.
func NewMockCORSPolicyReader(ctrl *gomock.Controller) *MockCORSPolicyReader {
	mock := &MockCORSPolicyReader{ctrl: ctrl}
	mock.recorder = &MockCORSPolicyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCORSPolicyReader) EXPECT() *MockCORSPolicyReaderMockRecorder {
	return m.recorder
}

// GetCORSPolicy mocks base method.
func (m *MockCORSPolicyReader) GetCORSPolicy(ctx context.Context, key client.ObjectKey) (*v2.CORSPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCORSPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.CORSPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCORSPolicy indicates an expected call of GetCORSPolicy.
func (mr *MockCORSPolicyReaderMockRecorder) GetCORSPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCORSPolicy", reflect.TypeOf((*MockCORSPolicyReader)(nil).GetCORSPolicy), ctx, key)
}

// ListCORSPolicy mocks base method.
func (m *MockCORSPolicyReader) ListCORSPolicy(ctx context.Context, opts ...client.ListOption) (*v2.CORSPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCORSPolicy", varargs...)
	ret0, _ := ret[0].(*v2.CORSPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCORSPolicy indicates an expected call of ListCORSPolicy.
func (mr *MockCORSPolicyReaderMockRecorder) ListCORSPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCORSPolicy", reflect.TypeOf((*MockCORSPolicyReader)(nil).ListCORSPolicy), varargs...)
}

// MockCORSPolicyWriter is a mock of CORSPolicyWriter interface.
type MockCORSPolicyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCORSPolicyWriterMockRecorder
}

// MockCORSPolicyWriterMockRecorder is the mock recorder for MockCORSPolicyWriter.
type MockCORSPolicyWriterMockRecorder struct {
	mock *MockCORSPolicyWriter
}

// NewMockCORSPolicyWriter creates a new mock instance.
func NewMockCORSPolicyWriter(ctrl *gomock.Controller) *MockCORSPolicyWriter {
	mock := &MockCORSPolicyWriter{ctrl: ctrl}
	mock.recorder = &MockCORSPolicyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCORSPolicyWriter) EXPECT() *MockCORSPolicyWriterMockRecorder {
	return m.recorder
}

// CreateCORSPolicy mocks base method.
func (m *MockCORSPolicyWriter) CreateCORSPolicy(ctx context.Context, obj *v2.CORSPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCORSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCORSPolicy indicates an expected call of CreateCORSPolicy.
func (mr *MockCORSPolicyWriterMockRecorder) CreateCORSPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCORSPolicy", reflect.TypeOf((*MockCORSPolicyWriter)(nil).CreateCORSPolicy), varargs...)
}

// DeleteAllOfCORSPolicy mocks base method.
func (m *MockCORSPolicyWriter) DeleteAllOfCORSPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfCORSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfCORSPolicy indicates an expected call of DeleteAllOfCORSPolicy.
func (mr *MockCORSPolicyWriterMockRecorder) DeleteAllOfCORSPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfCORSPolicy", reflect.TypeOf((*MockCORSPolicyWriter)(nil).DeleteAllOfCORSPolicy), varargs...)
}

// DeleteCORSPolicy mocks base method.
func (m *MockCORSPolicyWriter) DeleteCORSPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCORSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCORSPolicy indicates an expected call of DeleteCORSPolicy.
func (mr *MockCORSPolicyWriterMockRecorder) DeleteCORSPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCORSPolicy", reflect.TypeOf((*MockCORSPolicyWriter)(nil).DeleteCORSPolicy), varargs...)
}

// PatchCORSPolicy mocks base method.
func (m *MockCORSPolicyWriter) PatchCORSPolicy(ctx context.Context, obj *v2.CORSPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCORSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCORSPolicy indicates an expected call of PatchCORSPolicy.
func (mr *MockCORSPolicyWriterMockRecorder) PatchCORSPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCORSPolicy", reflect.TypeOf((*MockCORSPolicyWriter)(nil).PatchCORSPolicy), varargs...)
}

// UpdateCORSPolicy mocks base method.
func (m *MockCORSPolicyWriter) UpdateCORSPolicy(ctx context.Context, obj *v2.CORSPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCORSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCORSPolicy indicates an expected call of UpdateCORSPolicy.
func (mr *MockCORSPolicyWriterMockRecorder) UpdateCORSPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCORSPolicy", reflect.TypeOf((*MockCORSPolicyWriter)(nil).UpdateCORSPolicy), varargs...)
}

// UpsertCORSPolicy mocks base method.
func (m *MockCORSPolicyWriter) UpsertCORSPolicy(ctx context.Context, obj *v2.CORSPolicy, transitionFuncs ...v2.CORSPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertCORSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCORSPolicy indicates an expected call of UpsertCORSPolicy.
func (mr *MockCORSPolicyWriterMockRecorder) UpsertCORSPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCORSPolicy", reflect.TypeOf((*MockCORSPolicyWriter)(nil).UpsertCORSPolicy), varargs...)
}

// MockCORSPolicyStatusWriter is a mock of CORSPolicyStatusWriter interface.
type MockCORSPolicyStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCORSPolicyStatusWriterMockRecorder
}

// MockCORSPolicyStatusWriterMockRecorder is the mock recorder for MockCORSPolicyStatusWriter.
type MockCORSPolicyStatusWriterMockRecorder struct {
	mock *MockCORSPolicyStatusWriter
}

// NewMockCORSPolicyStatusWriter creates a new mock instance.
func NewMockCORSPolicyStatusWriter(ctrl *gomock.Controller) *MockCORSPolicyStatusWriter {
	mock := &MockCORSPolicyStatusWriter{ctrl: ctrl}
	mock.recorder = &MockCORSPolicyStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCORSPolicyStatusWriter) EXPECT() *MockCORSPolicyStatusWriterMockRecorder {
	return m.recorder
}

// PatchCORSPolicyStatus mocks base method.
func (m *MockCORSPolicyStatusWriter) PatchCORSPolicyStatus(ctx context.Context, obj *v2.CORSPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCORSPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCORSPolicyStatus indicates an expected call of PatchCORSPolicyStatus.
func (mr *MockCORSPolicyStatusWriterMockRecorder) PatchCORSPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCORSPolicyStatus", reflect.TypeOf((*MockCORSPolicyStatusWriter)(nil).PatchCORSPolicyStatus), varargs...)
}

// UpdateCORSPolicyStatus mocks base method.
func (m *MockCORSPolicyStatusWriter) UpdateCORSPolicyStatus(ctx context.Context, obj *v2.CORSPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCORSPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCORSPolicyStatus indicates an expected call of UpdateCORSPolicyStatus.
func (mr *MockCORSPolicyStatusWriterMockRecorder) UpdateCORSPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCORSPolicyStatus", reflect.TypeOf((*MockCORSPolicyStatusWriter)(nil).UpdateCORSPolicyStatus), varargs...)
}

// MockCORSPolicyClient is a mock of CORSPolicyClient interface.
type MockCORSPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockCORSPolicyClientMockRecorder
}

// MockCORSPolicyClientMockRecorder is the mock recorder for MockCORSPolicyClient.
type MockCORSPolicyClientMockRecorder struct {
	mock *MockCORSPolicyClient
}

// NewMockCORSPolicyClient creates a new mock instance.
func NewMockCORSPolicyClient(ctrl *gomock.Controller) *MockCORSPolicyClient {
	mock := &MockCORSPolicyClient{ctrl: ctrl}
	mock.recorder = &MockCORSPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCORSPolicyClient) EXPECT() *MockCORSPolicyClientMockRecorder {
	return m.recorder
}

// CreateCORSPolicy mocks base method.
func (m *MockCORSPolicyClient) CreateCORSPolicy(ctx context.Context, obj *v2.CORSPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCORSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCORSPolicy indicates an expected call of CreateCORSPolicy.
func (mr *MockCORSPolicyClientMockRecorder) CreateCORSPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCORSPolicy", reflect.TypeOf((*MockCORSPolicyClient)(nil).CreateCORSPolicy), varargs...)
}

// DeleteAllOfCORSPolicy mocks base method.
func (m *MockCORSPolicyClient) DeleteAllOfCORSPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfCORSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfCORSPolicy indicates an expected call of DeleteAllOfCORSPolicy.
func (mr *MockCORSPolicyClientMockRecorder) DeleteAllOfCORSPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfCORSPolicy", reflect.TypeOf((*MockCORSPolicyClient)(nil).DeleteAllOfCORSPolicy), varargs...)
}

// DeleteCORSPolicy mocks base method.
func (m *MockCORSPolicyClient) DeleteCORSPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCORSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCORSPolicy indicates an expected call of DeleteCORSPolicy.
func (mr *MockCORSPolicyClientMockRecorder) DeleteCORSPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCORSPolicy", reflect.TypeOf((*MockCORSPolicyClient)(nil).DeleteCORSPolicy), varargs...)
}

// GetCORSPolicy mocks base method.
func (m *MockCORSPolicyClient) GetCORSPolicy(ctx context.Context, key client.ObjectKey) (*v2.CORSPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCORSPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.CORSPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCORSPolicy indicates an expected call of GetCORSPolicy.
func (mr *MockCORSPolicyClientMockRecorder) GetCORSPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCORSPolicy", reflect.TypeOf((*MockCORSPolicyClient)(nil).GetCORSPolicy), ctx, key)
}

// ListCORSPolicy mocks base method.
func (m *MockCORSPolicyClient) ListCORSPolicy(ctx context.Context, opts ...client.ListOption) (*v2.CORSPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCORSPolicy", varargs...)
	ret0, _ := ret[0].(*v2.CORSPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCORSPolicy indicates an expected call of ListCORSPolicy.
func (mr *MockCORSPolicyClientMockRecorder) ListCORSPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCORSPolicy", reflect.TypeOf((*MockCORSPolicyClient)(nil).ListCORSPolicy), varargs...)
}

// PatchCORSPolicy mocks base method.
func (m *MockCORSPolicyClient) PatchCORSPolicy(ctx context.Context, obj *v2.CORSPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCORSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCORSPolicy indicates an expected call of PatchCORSPolicy.
func (mr *MockCORSPolicyClientMockRecorder) PatchCORSPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCORSPolicy", reflect.TypeOf((*MockCORSPolicyClient)(nil).PatchCORSPolicy), varargs...)
}

// PatchCORSPolicyStatus mocks base method.
func (m *MockCORSPolicyClient) PatchCORSPolicyStatus(ctx context.Context, obj *v2.CORSPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCORSPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCORSPolicyStatus indicates an expected call of PatchCORSPolicyStatus.
func (mr *MockCORSPolicyClientMockRecorder) PatchCORSPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCORSPolicyStatus", reflect.TypeOf((*MockCORSPolicyClient)(nil).PatchCORSPolicyStatus), varargs...)
}

// UpdateCORSPolicy mocks base method.
func (m *MockCORSPolicyClient) UpdateCORSPolicy(ctx context.Context, obj *v2.CORSPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCORSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCORSPolicy indicates an expected call of UpdateCORSPolicy.
func (mr *MockCORSPolicyClientMockRecorder) UpdateCORSPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCORSPolicy", reflect.TypeOf((*MockCORSPolicyClient)(nil).UpdateCORSPolicy), varargs...)
}

// UpdateCORSPolicyStatus mocks base method.
func (m *MockCORSPolicyClient) UpdateCORSPolicyStatus(ctx context.Context, obj *v2.CORSPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCORSPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCORSPolicyStatus indicates an expected call of UpdateCORSPolicyStatus.
func (mr *MockCORSPolicyClientMockRecorder) UpdateCORSPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCORSPolicyStatus", reflect.TypeOf((*MockCORSPolicyClient)(nil).UpdateCORSPolicyStatus), varargs...)
}

// UpsertCORSPolicy mocks base method.
func (m *MockCORSPolicyClient) UpsertCORSPolicy(ctx context.Context, obj *v2.CORSPolicy, transitionFuncs ...v2.CORSPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertCORSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCORSPolicy indicates an expected call of UpsertCORSPolicy.
func (mr *MockCORSPolicyClientMockRecorder) UpsertCORSPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCORSPolicy", reflect.TypeOf((*MockCORSPolicyClient)(nil).UpsertCORSPolicy), varargs...)
}

// MockMulticlusterCORSPolicyClient is a mock of MulticlusterCORSPolicyClient interface.
type MockMulticlusterCORSPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterCORSPolicyClientMockRecorder
}

// MockMulticlusterCORSPolicyClientMockRecorder is the mock recorder for MockMulticlusterCORSPolicyClient.
type MockMulticlusterCORSPolicyClientMockRecorder struct {
	mock *MockMulticlusterCORSPolicyClient
}

// NewMockMulticlusterCORSPolicyClient creates a new mock instance.
func NewMockMulticlusterCORSPolicyClient(ctrl *gomock.Controller) *MockMulticlusterCORSPolicyClient {
	mock := &MockMulticlusterCORSPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterCORSPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterCORSPolicyClient) EXPECT() *MockMulticlusterCORSPolicyClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterCORSPolicyClient) Cluster(cluster string) (v2.CORSPolicyClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.CORSPolicyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterCORSPolicyClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterCORSPolicyClient)(nil).Cluster), cluster)
}

// MockCSRFPolicyReader is a mock of CSRFPolicyReader interface.
type MockCSRFPolicyReader struct {
	ctrl     *gomock.Controller
	recorder *MockCSRFPolicyReaderMockRecorder
}

// MockCSRFPolicyReaderMockRecorder is the mock recorder for MockCSRFPolicyReader.
type MockCSRFPolicyReaderMockRecorder struct {
	mock *MockCSRFPolicyReader
}

// NewMockCSRFPolicyReader creates a new mock instance.
func NewMockCSRFPolicyReader(ctrl *gomock.Controller) *MockCSRFPolicyReader {
	mock := &MockCSRFPolicyReader{ctrl: ctrl}
	mock.recorder = &MockCSRFPolicyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSRFPolicyReader) EXPECT() *MockCSRFPolicyReaderMockRecorder {
	return m.recorder
}

// GetCSRFPolicy mocks base method.
func (m *MockCSRFPolicyReader) GetCSRFPolicy(ctx context.Context, key client.ObjectKey) (*v2.CSRFPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSRFPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.CSRFPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSRFPolicy indicates an expected call of GetCSRFPolicy.
func (mr *MockCSRFPolicyReaderMockRecorder) GetCSRFPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSRFPolicy", reflect.TypeOf((*MockCSRFPolicyReader)(nil).GetCSRFPolicy), ctx, key)
}

// ListCSRFPolicy mocks base method.
func (m *MockCSRFPolicyReader) ListCSRFPolicy(ctx context.Context, opts ...client.ListOption) (*v2.CSRFPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCSRFPolicy", varargs...)
	ret0, _ := ret[0].(*v2.CSRFPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCSRFPolicy indicates an expected call of ListCSRFPolicy.
func (mr *MockCSRFPolicyReaderMockRecorder) ListCSRFPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCSRFPolicy", reflect.TypeOf((*MockCSRFPolicyReader)(nil).ListCSRFPolicy), varargs...)
}

// MockCSRFPolicyWriter is a mock of CSRFPolicyWriter interface.
type MockCSRFPolicyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCSRFPolicyWriterMockRecorder
}

// MockCSRFPolicyWriterMockRecorder is the mock recorder for MockCSRFPolicyWriter.
type MockCSRFPolicyWriterMockRecorder struct {
	mock *MockCSRFPolicyWriter
}

// NewMockCSRFPolicyWriter creates a new mock instance.
func NewMockCSRFPolicyWriter(ctrl *gomock.Controller) *MockCSRFPolicyWriter {
	mock := &MockCSRFPolicyWriter{ctrl: ctrl}
	mock.recorder = &MockCSRFPolicyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSRFPolicyWriter) EXPECT() *MockCSRFPolicyWriterMockRecorder {
	return m.recorder
}

// CreateCSRFPolicy mocks base method.
func (m *MockCSRFPolicyWriter) CreateCSRFPolicy(ctx context.Context, obj *v2.CSRFPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCSRFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCSRFPolicy indicates an expected call of CreateCSRFPolicy.
func (mr *MockCSRFPolicyWriterMockRecorder) CreateCSRFPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCSRFPolicy", reflect.TypeOf((*MockCSRFPolicyWriter)(nil).CreateCSRFPolicy), varargs...)
}

// DeleteAllOfCSRFPolicy mocks base method.
func (m *MockCSRFPolicyWriter) DeleteAllOfCSRFPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfCSRFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfCSRFPolicy indicates an expected call of DeleteAllOfCSRFPolicy.
func (mr *MockCSRFPolicyWriterMockRecorder) DeleteAllOfCSRFPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfCSRFPolicy", reflect.TypeOf((*MockCSRFPolicyWriter)(nil).DeleteAllOfCSRFPolicy), varargs...)
}

// DeleteCSRFPolicy mocks base method.
func (m *MockCSRFPolicyWriter) DeleteCSRFPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCSRFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCSRFPolicy indicates an expected call of DeleteCSRFPolicy.
func (mr *MockCSRFPolicyWriterMockRecorder) DeleteCSRFPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCSRFPolicy", reflect.TypeOf((*MockCSRFPolicyWriter)(nil).DeleteCSRFPolicy), varargs...)
}

// PatchCSRFPolicy mocks base method.
func (m *MockCSRFPolicyWriter) PatchCSRFPolicy(ctx context.Context, obj *v2.CSRFPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCSRFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCSRFPolicy indicates an expected call of PatchCSRFPolicy.
func (mr *MockCSRFPolicyWriterMockRecorder) PatchCSRFPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCSRFPolicy", reflect.TypeOf((*MockCSRFPolicyWriter)(nil).PatchCSRFPolicy), varargs...)
}

// UpdateCSRFPolicy mocks base method.
func (m *MockCSRFPolicyWriter) UpdateCSRFPolicy(ctx context.Context, obj *v2.CSRFPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCSRFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCSRFPolicy indicates an expected call of UpdateCSRFPolicy.
func (mr *MockCSRFPolicyWriterMockRecorder) UpdateCSRFPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCSRFPolicy", reflect.TypeOf((*MockCSRFPolicyWriter)(nil).UpdateCSRFPolicy), varargs...)
}

// UpsertCSRFPolicy mocks base method.
func (m *MockCSRFPolicyWriter) UpsertCSRFPolicy(ctx context.Context, obj *v2.CSRFPolicy, transitionFuncs ...v2.CSRFPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertCSRFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCSRFPolicy indicates an expected call of UpsertCSRFPolicy.
func (mr *MockCSRFPolicyWriterMockRecorder) UpsertCSRFPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCSRFPolicy", reflect.TypeOf((*MockCSRFPolicyWriter)(nil).UpsertCSRFPolicy), varargs...)
}

// MockCSRFPolicyStatusWriter is a mock of CSRFPolicyStatusWriter interface.
type MockCSRFPolicyStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCSRFPolicyStatusWriterMockRecorder
}

// MockCSRFPolicyStatusWriterMockRecorder is the mock recorder for MockCSRFPolicyStatusWriter.
type MockCSRFPolicyStatusWriterMockRecorder struct {
	mock *MockCSRFPolicyStatusWriter
}

// NewMockCSRFPolicyStatusWriter creates a new mock instance.
func NewMockCSRFPolicyStatusWriter(ctrl *gomock.Controller) *MockCSRFPolicyStatusWriter {
	mock := &MockCSRFPolicyStatusWriter{ctrl: ctrl}
	mock.recorder = &MockCSRFPolicyStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSRFPolicyStatusWriter) EXPECT() *MockCSRFPolicyStatusWriterMockRecorder {
	return m.recorder
}

// PatchCSRFPolicyStatus mocks base method.
func (m *MockCSRFPolicyStatusWriter) PatchCSRFPolicyStatus(ctx context.Context, obj *v2.CSRFPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCSRFPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCSRFPolicyStatus indicates an expected call of PatchCSRFPolicyStatus.
func (mr *MockCSRFPolicyStatusWriterMockRecorder) PatchCSRFPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCSRFPolicyStatus", reflect.TypeOf((*MockCSRFPolicyStatusWriter)(nil).PatchCSRFPolicyStatus), varargs...)
}

// UpdateCSRFPolicyStatus mocks base method.
func (m *MockCSRFPolicyStatusWriter) UpdateCSRFPolicyStatus(ctx context.Context, obj *v2.CSRFPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCSRFPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCSRFPolicyStatus indicates an expected call of UpdateCSRFPolicyStatus.
func (mr *MockCSRFPolicyStatusWriterMockRecorder) UpdateCSRFPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCSRFPolicyStatus", reflect.TypeOf((*MockCSRFPolicyStatusWriter)(nil).UpdateCSRFPolicyStatus), varargs...)
}

// MockCSRFPolicyClient is a mock of CSRFPolicyClient interface.
type MockCSRFPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockCSRFPolicyClientMockRecorder
}

// MockCSRFPolicyClientMockRecorder is the mock recorder for MockCSRFPolicyClient.
type MockCSRFPolicyClientMockRecorder struct {
	mock *MockCSRFPolicyClient
}

// NewMockCSRFPolicyClient creates a new mock instance.
func NewMockCSRFPolicyClient(ctrl *gomock.Controller) *MockCSRFPolicyClient {
	mock := &MockCSRFPolicyClient{ctrl: ctrl}
	mock.recorder = &MockCSRFPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSRFPolicyClient) EXPECT() *MockCSRFPolicyClientMockRecorder {
	return m.recorder
}

// CreateCSRFPolicy mocks base method.
func (m *MockCSRFPolicyClient) CreateCSRFPolicy(ctx context.Context, obj *v2.CSRFPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCSRFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCSRFPolicy indicates an expected call of CreateCSRFPolicy.
func (mr *MockCSRFPolicyClientMockRecorder) CreateCSRFPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCSRFPolicy", reflect.TypeOf((*MockCSRFPolicyClient)(nil).CreateCSRFPolicy), varargs...)
}

// DeleteAllOfCSRFPolicy mocks base method.
func (m *MockCSRFPolicyClient) DeleteAllOfCSRFPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfCSRFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfCSRFPolicy indicates an expected call of DeleteAllOfCSRFPolicy.
func (mr *MockCSRFPolicyClientMockRecorder) DeleteAllOfCSRFPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfCSRFPolicy", reflect.TypeOf((*MockCSRFPolicyClient)(nil).DeleteAllOfCSRFPolicy), varargs...)
}

// DeleteCSRFPolicy mocks base method.
func (m *MockCSRFPolicyClient) DeleteCSRFPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCSRFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCSRFPolicy indicates an expected call of DeleteCSRFPolicy.
func (mr *MockCSRFPolicyClientMockRecorder) DeleteCSRFPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCSRFPolicy", reflect.TypeOf((*MockCSRFPolicyClient)(nil).DeleteCSRFPolicy), varargs...)
}

// GetCSRFPolicy mocks base method.
func (m *MockCSRFPolicyClient) GetCSRFPolicy(ctx context.Context, key client.ObjectKey) (*v2.CSRFPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSRFPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.CSRFPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSRFPolicy indicates an expected call of GetCSRFPolicy.
func (mr *MockCSRFPolicyClientMockRecorder) GetCSRFPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSRFPolicy", reflect.TypeOf((*MockCSRFPolicyClient)(nil).GetCSRFPolicy), ctx, key)
}

// ListCSRFPolicy mocks base method.
func (m *MockCSRFPolicyClient) ListCSRFPolicy(ctx context.Context, opts ...client.ListOption) (*v2.CSRFPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCSRFPolicy", varargs...)
	ret0, _ := ret[0].(*v2.CSRFPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCSRFPolicy indicates an expected call of ListCSRFPolicy.
func (mr *MockCSRFPolicyClientMockRecorder) ListCSRFPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCSRFPolicy", reflect.TypeOf((*MockCSRFPolicyClient)(nil).ListCSRFPolicy), varargs...)
}

// PatchCSRFPolicy mocks base method.
func (m *MockCSRFPolicyClient) PatchCSRFPolicy(ctx context.Context, obj *v2.CSRFPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCSRFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCSRFPolicy indicates an expected call of PatchCSRFPolicy.
func (mr *MockCSRFPolicyClientMockRecorder) PatchCSRFPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCSRFPolicy", reflect.TypeOf((*MockCSRFPolicyClient)(nil).PatchCSRFPolicy), varargs...)
}

// PatchCSRFPolicyStatus mocks base method.
func (m *MockCSRFPolicyClient) PatchCSRFPolicyStatus(ctx context.Context, obj *v2.CSRFPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCSRFPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCSRFPolicyStatus indicates an expected call of PatchCSRFPolicyStatus.
func (mr *MockCSRFPolicyClientMockRecorder) PatchCSRFPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCSRFPolicyStatus", reflect.TypeOf((*MockCSRFPolicyClient)(nil).PatchCSRFPolicyStatus), varargs...)
}

// UpdateCSRFPolicy mocks base method.
func (m *MockCSRFPolicyClient) UpdateCSRFPolicy(ctx context.Context, obj *v2.CSRFPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCSRFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCSRFPolicy indicates an expected call of UpdateCSRFPolicy.
func (mr *MockCSRFPolicyClientMockRecorder) UpdateCSRFPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCSRFPolicy", reflect.TypeOf((*MockCSRFPolicyClient)(nil).UpdateCSRFPolicy), varargs...)
}

// UpdateCSRFPolicyStatus mocks base method.
func (m *MockCSRFPolicyClient) UpdateCSRFPolicyStatus(ctx context.Context, obj *v2.CSRFPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCSRFPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCSRFPolicyStatus indicates an expected call of UpdateCSRFPolicyStatus.
func (mr *MockCSRFPolicyClientMockRecorder) UpdateCSRFPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCSRFPolicyStatus", reflect.TypeOf((*MockCSRFPolicyClient)(nil).UpdateCSRFPolicyStatus), varargs...)
}

// UpsertCSRFPolicy mocks base method.
func (m *MockCSRFPolicyClient) UpsertCSRFPolicy(ctx context.Context, obj *v2.CSRFPolicy, transitionFuncs ...v2.CSRFPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertCSRFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCSRFPolicy indicates an expected call of UpsertCSRFPolicy.
func (mr *MockCSRFPolicyClientMockRecorder) UpsertCSRFPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCSRFPolicy", reflect.TypeOf((*MockCSRFPolicyClient)(nil).UpsertCSRFPolicy), varargs...)
}

// MockMulticlusterCSRFPolicyClient is a mock of MulticlusterCSRFPolicyClient interface.
type MockMulticlusterCSRFPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterCSRFPolicyClientMockRecorder
}

// MockMulticlusterCSRFPolicyClientMockRecorder is the mock recorder for MockMulticlusterCSRFPolicyClient.
type MockMulticlusterCSRFPolicyClientMockRecorder struct {
	mock *MockMulticlusterCSRFPolicyClient
}

// NewMockMulticlusterCSRFPolicyClient creates a new mock instance.
func NewMockMulticlusterCSRFPolicyClient(ctrl *gomock.Controller) *MockMulticlusterCSRFPolicyClient {
	mock := &MockMulticlusterCSRFPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterCSRFPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterCSRFPolicyClient) EXPECT() *MockMulticlusterCSRFPolicyClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterCSRFPolicyClient) Cluster(cluster string) (v2.CSRFPolicyClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.CSRFPolicyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterCSRFPolicyClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterCSRFPolicyClient)(nil).Cluster), cluster)
}

// MockExtAuthPolicyReader is a mock of ExtAuthPolicyReader interface.
type MockExtAuthPolicyReader struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthPolicyReaderMockRecorder
}

// MockExtAuthPolicyReaderMockRecorder is the mock recorder for MockExtAuthPolicyReader.
type MockExtAuthPolicyReaderMockRecorder struct {
	mock *MockExtAuthPolicyReader
}

// NewMockExtAuthPolicyReader creates a new mock instance.
func NewMockExtAuthPolicyReader(ctrl *gomock.Controller) *MockExtAuthPolicyReader {
	mock := &MockExtAuthPolicyReader{ctrl: ctrl}
	mock.recorder = &MockExtAuthPolicyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtAuthPolicyReader) EXPECT() *MockExtAuthPolicyReaderMockRecorder {
	return m.recorder
}

// GetExtAuthPolicy mocks base method.
func (m *MockExtAuthPolicyReader) GetExtAuthPolicy(ctx context.Context, key client.ObjectKey) (*v2.ExtAuthPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtAuthPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.ExtAuthPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtAuthPolicy indicates an expected call of GetExtAuthPolicy.
func (mr *MockExtAuthPolicyReaderMockRecorder) GetExtAuthPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtAuthPolicy", reflect.TypeOf((*MockExtAuthPolicyReader)(nil).GetExtAuthPolicy), ctx, key)
}

// ListExtAuthPolicy mocks base method.
func (m *MockExtAuthPolicyReader) ListExtAuthPolicy(ctx context.Context, opts ...client.ListOption) (*v2.ExtAuthPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExtAuthPolicy", varargs...)
	ret0, _ := ret[0].(*v2.ExtAuthPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExtAuthPolicy indicates an expected call of ListExtAuthPolicy.
func (mr *MockExtAuthPolicyReaderMockRecorder) ListExtAuthPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtAuthPolicy", reflect.TypeOf((*MockExtAuthPolicyReader)(nil).ListExtAuthPolicy), varargs...)
}

// MockExtAuthPolicyWriter is a mock of ExtAuthPolicyWriter interface.
type MockExtAuthPolicyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthPolicyWriterMockRecorder
}

// MockExtAuthPolicyWriterMockRecorder is the mock recorder for MockExtAuthPolicyWriter.
type MockExtAuthPolicyWriterMockRecorder struct {
	mock *MockExtAuthPolicyWriter
}

// NewMockExtAuthPolicyWriter creates a new mock instance.
func NewMockExtAuthPolicyWriter(ctrl *gomock.Controller) *MockExtAuthPolicyWriter {
	mock := &MockExtAuthPolicyWriter{ctrl: ctrl}
	mock.recorder = &MockExtAuthPolicyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtAuthPolicyWriter) EXPECT() *MockExtAuthPolicyWriterMockRecorder {
	return m.recorder
}

// CreateExtAuthPolicy mocks base method.
func (m *MockExtAuthPolicyWriter) CreateExtAuthPolicy(ctx context.Context, obj *v2.ExtAuthPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExtAuthPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExtAuthPolicy indicates an expected call of CreateExtAuthPolicy.
func (mr *MockExtAuthPolicyWriterMockRecorder) CreateExtAuthPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtAuthPolicy", reflect.TypeOf((*MockExtAuthPolicyWriter)(nil).CreateExtAuthPolicy), varargs...)
}

// DeleteAllOfExtAuthPolicy mocks base method.
func (m *MockExtAuthPolicyWriter) DeleteAllOfExtAuthPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfExtAuthPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfExtAuthPolicy indicates an expected call of DeleteAllOfExtAuthPolicy.
func (mr *MockExtAuthPolicyWriterMockRecorder) DeleteAllOfExtAuthPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfExtAuthPolicy", reflect.TypeOf((*MockExtAuthPolicyWriter)(nil).DeleteAllOfExtAuthPolicy), varargs...)
}

// DeleteExtAuthPolicy mocks base method.
func (m *MockExtAuthPolicyWriter) DeleteExtAuthPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExtAuthPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExtAuthPolicy indicates an expected call of DeleteExtAuthPolicy.
func (mr *MockExtAuthPolicyWriterMockRecorder) DeleteExtAuthPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExtAuthPolicy", reflect.TypeOf((*MockExtAuthPolicyWriter)(nil).DeleteExtAuthPolicy), varargs...)
}

// PatchExtAuthPolicy mocks base method.
func (m *MockExtAuthPolicyWriter) PatchExtAuthPolicy(ctx context.Context, obj *v2.ExtAuthPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchExtAuthPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchExtAuthPolicy indicates an expected call of PatchExtAuthPolicy.
func (mr *MockExtAuthPolicyWriterMockRecorder) PatchExtAuthPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchExtAuthPolicy", reflect.TypeOf((*MockExtAuthPolicyWriter)(nil).PatchExtAuthPolicy), varargs...)
}

// UpdateExtAuthPolicy mocks base method.
func (m *MockExtAuthPolicyWriter) UpdateExtAuthPolicy(ctx context.Context, obj *v2.ExtAuthPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExtAuthPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExtAuthPolicy indicates an expected call of UpdateExtAuthPolicy.
func (mr *MockExtAuthPolicyWriterMockRecorder) UpdateExtAuthPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtAuthPolicy", reflect.TypeOf((*MockExtAuthPolicyWriter)(nil).UpdateExtAuthPolicy), varargs...)
}

// UpsertExtAuthPolicy mocks base method.
func (m *MockExtAuthPolicyWriter) UpsertExtAuthPolicy(ctx context.Context, obj *v2.ExtAuthPolicy, transitionFuncs ...v2.ExtAuthPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertExtAuthPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertExtAuthPolicy indicates an expected call of UpsertExtAuthPolicy.
func (mr *MockExtAuthPolicyWriterMockRecorder) UpsertExtAuthPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertExtAuthPolicy", reflect.TypeOf((*MockExtAuthPolicyWriter)(nil).UpsertExtAuthPolicy), varargs...)
}

// MockExtAuthPolicyStatusWriter is a mock of ExtAuthPolicyStatusWriter interface.
type MockExtAuthPolicyStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthPolicyStatusWriterMockRecorder
}

// MockExtAuthPolicyStatusWriterMockRecorder is the mock recorder for MockExtAuthPolicyStatusWriter.
type MockExtAuthPolicyStatusWriterMockRecorder struct {
	mock *MockExtAuthPolicyStatusWriter
}

// NewMockExtAuthPolicyStatusWriter creates a new mock instance.
func NewMockExtAuthPolicyStatusWriter(ctrl *gomock.Controller) *MockExtAuthPolicyStatusWriter {
	mock := &MockExtAuthPolicyStatusWriter{ctrl: ctrl}
	mock.recorder = &MockExtAuthPolicyStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtAuthPolicyStatusWriter) EXPECT() *MockExtAuthPolicyStatusWriterMockRecorder {
	return m.recorder
}

// PatchExtAuthPolicyStatus mocks base method.
func (m *MockExtAuthPolicyStatusWriter) PatchExtAuthPolicyStatus(ctx context.Context, obj *v2.ExtAuthPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchExtAuthPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchExtAuthPolicyStatus indicates an expected call of PatchExtAuthPolicyStatus.
func (mr *MockExtAuthPolicyStatusWriterMockRecorder) PatchExtAuthPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchExtAuthPolicyStatus", reflect.TypeOf((*MockExtAuthPolicyStatusWriter)(nil).PatchExtAuthPolicyStatus), varargs...)
}

// UpdateExtAuthPolicyStatus mocks base method.
func (m *MockExtAuthPolicyStatusWriter) UpdateExtAuthPolicyStatus(ctx context.Context, obj *v2.ExtAuthPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExtAuthPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExtAuthPolicyStatus indicates an expected call of UpdateExtAuthPolicyStatus.
func (mr *MockExtAuthPolicyStatusWriterMockRecorder) UpdateExtAuthPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtAuthPolicyStatus", reflect.TypeOf((*MockExtAuthPolicyStatusWriter)(nil).UpdateExtAuthPolicyStatus), varargs...)
}

// MockExtAuthPolicyClient is a mock of ExtAuthPolicyClient interface.
type MockExtAuthPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthPolicyClientMockRecorder
}

// MockExtAuthPolicyClientMockRecorder is the mock recorder for MockExtAuthPolicyClient.
type MockExtAuthPolicyClientMockRecorder struct {
	mock *MockExtAuthPolicyClient
}

// NewMockExtAuthPolicyClient creates a new mock instance.
func NewMockExtAuthPolicyClient(ctrl *gomock.Controller) *MockExtAuthPolicyClient {
	mock := &MockExtAuthPolicyClient{ctrl: ctrl}
	mock.recorder = &MockExtAuthPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtAuthPolicyClient) EXPECT() *MockExtAuthPolicyClientMockRecorder {
	return m.recorder
}

// CreateExtAuthPolicy mocks base method.
func (m *MockExtAuthPolicyClient) CreateExtAuthPolicy(ctx context.Context, obj *v2.ExtAuthPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExtAuthPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExtAuthPolicy indicates an expected call of CreateExtAuthPolicy.
func (mr *MockExtAuthPolicyClientMockRecorder) CreateExtAuthPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtAuthPolicy", reflect.TypeOf((*MockExtAuthPolicyClient)(nil).CreateExtAuthPolicy), varargs...)
}

// DeleteAllOfExtAuthPolicy mocks base method.
func (m *MockExtAuthPolicyClient) DeleteAllOfExtAuthPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfExtAuthPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfExtAuthPolicy indicates an expected call of DeleteAllOfExtAuthPolicy.
func (mr *MockExtAuthPolicyClientMockRecorder) DeleteAllOfExtAuthPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfExtAuthPolicy", reflect.TypeOf((*MockExtAuthPolicyClient)(nil).DeleteAllOfExtAuthPolicy), varargs...)
}

// DeleteExtAuthPolicy mocks base method.
func (m *MockExtAuthPolicyClient) DeleteExtAuthPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExtAuthPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExtAuthPolicy indicates an expected call of DeleteExtAuthPolicy.
func (mr *MockExtAuthPolicyClientMockRecorder) DeleteExtAuthPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExtAuthPolicy", reflect.TypeOf((*MockExtAuthPolicyClient)(nil).DeleteExtAuthPolicy), varargs...)
}

// GetExtAuthPolicy mocks base method.
func (m *MockExtAuthPolicyClient) GetExtAuthPolicy(ctx context.Context, key client.ObjectKey) (*v2.ExtAuthPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtAuthPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.ExtAuthPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtAuthPolicy indicates an expected call of GetExtAuthPolicy.
func (mr *MockExtAuthPolicyClientMockRecorder) GetExtAuthPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtAuthPolicy", reflect.TypeOf((*MockExtAuthPolicyClient)(nil).GetExtAuthPolicy), ctx, key)
}

// ListExtAuthPolicy mocks base method.
func (m *MockExtAuthPolicyClient) ListExtAuthPolicy(ctx context.Context, opts ...client.ListOption) (*v2.ExtAuthPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExtAuthPolicy", varargs...)
	ret0, _ := ret[0].(*v2.ExtAuthPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExtAuthPolicy indicates an expected call of ListExtAuthPolicy.
func (mr *MockExtAuthPolicyClientMockRecorder) ListExtAuthPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtAuthPolicy", reflect.TypeOf((*MockExtAuthPolicyClient)(nil).ListExtAuthPolicy), varargs...)
}

// PatchExtAuthPolicy mocks base method.
func (m *MockExtAuthPolicyClient) PatchExtAuthPolicy(ctx context.Context, obj *v2.ExtAuthPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchExtAuthPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchExtAuthPolicy indicates an expected call of PatchExtAuthPolicy.
func (mr *MockExtAuthPolicyClientMockRecorder) PatchExtAuthPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchExtAuthPolicy", reflect.TypeOf((*MockExtAuthPolicyClient)(nil).PatchExtAuthPolicy), varargs...)
}

// PatchExtAuthPolicyStatus mocks base method.
func (m *MockExtAuthPolicyClient) PatchExtAuthPolicyStatus(ctx context.Context, obj *v2.ExtAuthPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchExtAuthPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchExtAuthPolicyStatus indicates an expected call of PatchExtAuthPolicyStatus.
func (mr *MockExtAuthPolicyClientMockRecorder) PatchExtAuthPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchExtAuthPolicyStatus", reflect.TypeOf((*MockExtAuthPolicyClient)(nil).PatchExtAuthPolicyStatus), varargs...)
}

// UpdateExtAuthPolicy mocks base method.
func (m *MockExtAuthPolicyClient) UpdateExtAuthPolicy(ctx context.Context, obj *v2.ExtAuthPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExtAuthPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExtAuthPolicy indicates an expected call of UpdateExtAuthPolicy.
func (mr *MockExtAuthPolicyClientMockRecorder) UpdateExtAuthPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtAuthPolicy", reflect.TypeOf((*MockExtAuthPolicyClient)(nil).UpdateExtAuthPolicy), varargs...)
}

// UpdateExtAuthPolicyStatus mocks base method.
func (m *MockExtAuthPolicyClient) UpdateExtAuthPolicyStatus(ctx context.Context, obj *v2.ExtAuthPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExtAuthPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExtAuthPolicyStatus indicates an expected call of UpdateExtAuthPolicyStatus.
func (mr *MockExtAuthPolicyClientMockRecorder) UpdateExtAuthPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtAuthPolicyStatus", reflect.TypeOf((*MockExtAuthPolicyClient)(nil).UpdateExtAuthPolicyStatus), varargs...)
}

// UpsertExtAuthPolicy mocks base method.
func (m *MockExtAuthPolicyClient) UpsertExtAuthPolicy(ctx context.Context, obj *v2.ExtAuthPolicy, transitionFuncs ...v2.ExtAuthPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertExtAuthPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertExtAuthPolicy indicates an expected call of UpsertExtAuthPolicy.
func (mr *MockExtAuthPolicyClientMockRecorder) UpsertExtAuthPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertExtAuthPolicy", reflect.TypeOf((*MockExtAuthPolicyClient)(nil).UpsertExtAuthPolicy), varargs...)
}

// MockMulticlusterExtAuthPolicyClient is a mock of MulticlusterExtAuthPolicyClient interface.
type MockMulticlusterExtAuthPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterExtAuthPolicyClientMockRecorder
}

// MockMulticlusterExtAuthPolicyClientMockRecorder is the mock recorder for MockMulticlusterExtAuthPolicyClient.
type MockMulticlusterExtAuthPolicyClientMockRecorder struct {
	mock *MockMulticlusterExtAuthPolicyClient
}

// NewMockMulticlusterExtAuthPolicyClient creates a new mock instance.
func NewMockMulticlusterExtAuthPolicyClient(ctrl *gomock.Controller) *MockMulticlusterExtAuthPolicyClient {
	mock := &MockMulticlusterExtAuthPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterExtAuthPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterExtAuthPolicyClient) EXPECT() *MockMulticlusterExtAuthPolicyClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterExtAuthPolicyClient) Cluster(cluster string) (v2.ExtAuthPolicyClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.ExtAuthPolicyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterExtAuthPolicyClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterExtAuthPolicyClient)(nil).Cluster), cluster)
}

// MockWAFPolicyReader is a mock of WAFPolicyReader interface.
type MockWAFPolicyReader struct {
	ctrl     *gomock.Controller
	recorder *MockWAFPolicyReaderMockRecorder
}

// MockWAFPolicyReaderMockRecorder is the mock recorder for MockWAFPolicyReader.
type MockWAFPolicyReaderMockRecorder struct {
	mock *MockWAFPolicyReader
}

// NewMockWAFPolicyReader creates a new mock instance.
func NewMockWAFPolicyReader(ctrl *gomock.Controller) *MockWAFPolicyReader {
	mock := &MockWAFPolicyReader{ctrl: ctrl}
	mock.recorder = &MockWAFPolicyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWAFPolicyReader) EXPECT() *MockWAFPolicyReaderMockRecorder {
	return m.recorder
}

// GetWAFPolicy mocks base method.
func (m *MockWAFPolicyReader) GetWAFPolicy(ctx context.Context, key client.ObjectKey) (*v2.WAFPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWAFPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.WAFPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWAFPolicy indicates an expected call of GetWAFPolicy.
func (mr *MockWAFPolicyReaderMockRecorder) GetWAFPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWAFPolicy", reflect.TypeOf((*MockWAFPolicyReader)(nil).GetWAFPolicy), ctx, key)
}

// ListWAFPolicy mocks base method.
func (m *MockWAFPolicyReader) ListWAFPolicy(ctx context.Context, opts ...client.ListOption) (*v2.WAFPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWAFPolicy", varargs...)
	ret0, _ := ret[0].(*v2.WAFPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWAFPolicy indicates an expected call of ListWAFPolicy.
func (mr *MockWAFPolicyReaderMockRecorder) ListWAFPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWAFPolicy", reflect.TypeOf((*MockWAFPolicyReader)(nil).ListWAFPolicy), varargs...)
}

// MockWAFPolicyWriter is a mock of WAFPolicyWriter interface.
type MockWAFPolicyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWAFPolicyWriterMockRecorder
}

// MockWAFPolicyWriterMockRecorder is the mock recorder for MockWAFPolicyWriter.
type MockWAFPolicyWriterMockRecorder struct {
	mock *MockWAFPolicyWriter
}

// NewMockWAFPolicyWriter creates a new mock instance.
func NewMockWAFPolicyWriter(ctrl *gomock.Controller) *MockWAFPolicyWriter {
	mock := &MockWAFPolicyWriter{ctrl: ctrl}
	mock.recorder = &MockWAFPolicyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWAFPolicyWriter) EXPECT() *MockWAFPolicyWriterMockRecorder {
	return m.recorder
}

// CreateWAFPolicy mocks base method.
func (m *MockWAFPolicyWriter) CreateWAFPolicy(ctx context.Context, obj *v2.WAFPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWAFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWAFPolicy indicates an expected call of CreateWAFPolicy.
func (mr *MockWAFPolicyWriterMockRecorder) CreateWAFPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWAFPolicy", reflect.TypeOf((*MockWAFPolicyWriter)(nil).CreateWAFPolicy), varargs...)
}

// DeleteAllOfWAFPolicy mocks base method.
func (m *MockWAFPolicyWriter) DeleteAllOfWAFPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfWAFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfWAFPolicy indicates an expected call of DeleteAllOfWAFPolicy.
func (mr *MockWAFPolicyWriterMockRecorder) DeleteAllOfWAFPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfWAFPolicy", reflect.TypeOf((*MockWAFPolicyWriter)(nil).DeleteAllOfWAFPolicy), varargs...)
}

// DeleteWAFPolicy mocks base method.
func (m *MockWAFPolicyWriter) DeleteWAFPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWAFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWAFPolicy indicates an expected call of DeleteWAFPolicy.
func (mr *MockWAFPolicyWriterMockRecorder) DeleteWAFPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWAFPolicy", reflect.TypeOf((*MockWAFPolicyWriter)(nil).DeleteWAFPolicy), varargs...)
}

// PatchWAFPolicy mocks base method.
func (m *MockWAFPolicyWriter) PatchWAFPolicy(ctx context.Context, obj *v2.WAFPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWAFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWAFPolicy indicates an expected call of PatchWAFPolicy.
func (mr *MockWAFPolicyWriterMockRecorder) PatchWAFPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWAFPolicy", reflect.TypeOf((*MockWAFPolicyWriter)(nil).PatchWAFPolicy), varargs...)
}

// UpdateWAFPolicy mocks base method.
func (m *MockWAFPolicyWriter) UpdateWAFPolicy(ctx context.Context, obj *v2.WAFPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWAFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWAFPolicy indicates an expected call of UpdateWAFPolicy.
func (mr *MockWAFPolicyWriterMockRecorder) UpdateWAFPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWAFPolicy", reflect.TypeOf((*MockWAFPolicyWriter)(nil).UpdateWAFPolicy), varargs...)
}

// UpsertWAFPolicy mocks base method.
func (m *MockWAFPolicyWriter) UpsertWAFPolicy(ctx context.Context, obj *v2.WAFPolicy, transitionFuncs ...v2.WAFPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertWAFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertWAFPolicy indicates an expected call of UpsertWAFPolicy.
func (mr *MockWAFPolicyWriterMockRecorder) UpsertWAFPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertWAFPolicy", reflect.TypeOf((*MockWAFPolicyWriter)(nil).UpsertWAFPolicy), varargs...)
}

// MockWAFPolicyStatusWriter is a mock of WAFPolicyStatusWriter interface.
type MockWAFPolicyStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWAFPolicyStatusWriterMockRecorder
}

// MockWAFPolicyStatusWriterMockRecorder is the mock recorder for MockWAFPolicyStatusWriter.
type MockWAFPolicyStatusWriterMockRecorder struct {
	mock *MockWAFPolicyStatusWriter
}

// NewMockWAFPolicyStatusWriter creates a new mock instance.
func NewMockWAFPolicyStatusWriter(ctrl *gomock.Controller) *MockWAFPolicyStatusWriter {
	mock := &MockWAFPolicyStatusWriter{ctrl: ctrl}
	mock.recorder = &MockWAFPolicyStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWAFPolicyStatusWriter) EXPECT() *MockWAFPolicyStatusWriterMockRecorder {
	return m.recorder
}

// PatchWAFPolicyStatus mocks base method.
func (m *MockWAFPolicyStatusWriter) PatchWAFPolicyStatus(ctx context.Context, obj *v2.WAFPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWAFPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWAFPolicyStatus indicates an expected call of PatchWAFPolicyStatus.
func (mr *MockWAFPolicyStatusWriterMockRecorder) PatchWAFPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWAFPolicyStatus", reflect.TypeOf((*MockWAFPolicyStatusWriter)(nil).PatchWAFPolicyStatus), varargs...)
}

// UpdateWAFPolicyStatus mocks base method.
func (m *MockWAFPolicyStatusWriter) UpdateWAFPolicyStatus(ctx context.Context, obj *v2.WAFPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWAFPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWAFPolicyStatus indicates an expected call of UpdateWAFPolicyStatus.
func (mr *MockWAFPolicyStatusWriterMockRecorder) UpdateWAFPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWAFPolicyStatus", reflect.TypeOf((*MockWAFPolicyStatusWriter)(nil).UpdateWAFPolicyStatus), varargs...)
}

// MockWAFPolicyClient is a mock of WAFPolicyClient interface.
type MockWAFPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockWAFPolicyClientMockRecorder
}

// MockWAFPolicyClientMockRecorder is the mock recorder for MockWAFPolicyClient.
type MockWAFPolicyClientMockRecorder struct {
	mock *MockWAFPolicyClient
}

// NewMockWAFPolicyClient creates a new mock instance.
func NewMockWAFPolicyClient(ctrl *gomock.Controller) *MockWAFPolicyClient {
	mock := &MockWAFPolicyClient{ctrl: ctrl}
	mock.recorder = &MockWAFPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWAFPolicyClient) EXPECT() *MockWAFPolicyClientMockRecorder {
	return m.recorder
}

// CreateWAFPolicy mocks base method.
func (m *MockWAFPolicyClient) CreateWAFPolicy(ctx context.Context, obj *v2.WAFPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWAFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWAFPolicy indicates an expected call of CreateWAFPolicy.
func (mr *MockWAFPolicyClientMockRecorder) CreateWAFPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWAFPolicy", reflect.TypeOf((*MockWAFPolicyClient)(nil).CreateWAFPolicy), varargs...)
}

// DeleteAllOfWAFPolicy mocks base method.
func (m *MockWAFPolicyClient) DeleteAllOfWAFPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfWAFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfWAFPolicy indicates an expected call of DeleteAllOfWAFPolicy.
func (mr *MockWAFPolicyClientMockRecorder) DeleteAllOfWAFPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfWAFPolicy", reflect.TypeOf((*MockWAFPolicyClient)(nil).DeleteAllOfWAFPolicy), varargs...)
}

// DeleteWAFPolicy mocks base method.
func (m *MockWAFPolicyClient) DeleteWAFPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWAFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWAFPolicy indicates an expected call of DeleteWAFPolicy.
func (mr *MockWAFPolicyClientMockRecorder) DeleteWAFPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWAFPolicy", reflect.TypeOf((*MockWAFPolicyClient)(nil).DeleteWAFPolicy), varargs...)
}

// GetWAFPolicy mocks base method.
func (m *MockWAFPolicyClient) GetWAFPolicy(ctx context.Context, key client.ObjectKey) (*v2.WAFPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWAFPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.WAFPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWAFPolicy indicates an expected call of GetWAFPolicy.
func (mr *MockWAFPolicyClientMockRecorder) GetWAFPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWAFPolicy", reflect.TypeOf((*MockWAFPolicyClient)(nil).GetWAFPolicy), ctx, key)
}

// ListWAFPolicy mocks base method.
func (m *MockWAFPolicyClient) ListWAFPolicy(ctx context.Context, opts ...client.ListOption) (*v2.WAFPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWAFPolicy", varargs...)
	ret0, _ := ret[0].(*v2.WAFPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWAFPolicy indicates an expected call of ListWAFPolicy.
func (mr *MockWAFPolicyClientMockRecorder) ListWAFPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWAFPolicy", reflect.TypeOf((*MockWAFPolicyClient)(nil).ListWAFPolicy), varargs...)
}

// PatchWAFPolicy mocks base method.
func (m *MockWAFPolicyClient) PatchWAFPolicy(ctx context.Context, obj *v2.WAFPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWAFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWAFPolicy indicates an expected call of PatchWAFPolicy.
func (mr *MockWAFPolicyClientMockRecorder) PatchWAFPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWAFPolicy", reflect.TypeOf((*MockWAFPolicyClient)(nil).PatchWAFPolicy), varargs...)
}

// PatchWAFPolicyStatus mocks base method.
func (m *MockWAFPolicyClient) PatchWAFPolicyStatus(ctx context.Context, obj *v2.WAFPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWAFPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWAFPolicyStatus indicates an expected call of PatchWAFPolicyStatus.
func (mr *MockWAFPolicyClientMockRecorder) PatchWAFPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWAFPolicyStatus", reflect.TypeOf((*MockWAFPolicyClient)(nil).PatchWAFPolicyStatus), varargs...)
}

// UpdateWAFPolicy mocks base method.
func (m *MockWAFPolicyClient) UpdateWAFPolicy(ctx context.Context, obj *v2.WAFPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWAFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWAFPolicy indicates an expected call of UpdateWAFPolicy.
func (mr *MockWAFPolicyClientMockRecorder) UpdateWAFPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWAFPolicy", reflect.TypeOf((*MockWAFPolicyClient)(nil).UpdateWAFPolicy), varargs...)
}

// UpdateWAFPolicyStatus mocks base method.
func (m *MockWAFPolicyClient) UpdateWAFPolicyStatus(ctx context.Context, obj *v2.WAFPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWAFPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWAFPolicyStatus indicates an expected call of UpdateWAFPolicyStatus.
func (mr *MockWAFPolicyClientMockRecorder) UpdateWAFPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWAFPolicyStatus", reflect.TypeOf((*MockWAFPolicyClient)(nil).UpdateWAFPolicyStatus), varargs...)
}

// UpsertWAFPolicy mocks base method.
func (m *MockWAFPolicyClient) UpsertWAFPolicy(ctx context.Context, obj *v2.WAFPolicy, transitionFuncs ...v2.WAFPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertWAFPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertWAFPolicy indicates an expected call of UpsertWAFPolicy.
func (mr *MockWAFPolicyClientMockRecorder) UpsertWAFPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertWAFPolicy", reflect.TypeOf((*MockWAFPolicyClient)(nil).UpsertWAFPolicy), varargs...)
}

// MockMulticlusterWAFPolicyClient is a mock of MulticlusterWAFPolicyClient interface.
type MockMulticlusterWAFPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWAFPolicyClientMockRecorder
}

// MockMulticlusterWAFPolicyClientMockRecorder is the mock recorder for MockMulticlusterWAFPolicyClient.
type MockMulticlusterWAFPolicyClientMockRecorder struct {
	mock *MockMulticlusterWAFPolicyClient
}

// NewMockMulticlusterWAFPolicyClient creates a new mock instance.
func NewMockMulticlusterWAFPolicyClient(ctrl *gomock.Controller) *MockMulticlusterWAFPolicyClient {
	mock := &MockMulticlusterWAFPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWAFPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterWAFPolicyClient) EXPECT() *MockMulticlusterWAFPolicyClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterWAFPolicyClient) Cluster(cluster string) (v2.WAFPolicyClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.WAFPolicyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterWAFPolicyClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterWAFPolicyClient)(nil).Cluster), cluster)
}

// MockJWTPolicyReader is a mock of JWTPolicyReader interface.
type MockJWTPolicyReader struct {
	ctrl     *gomock.Controller
	recorder *MockJWTPolicyReaderMockRecorder
}

// MockJWTPolicyReaderMockRecorder is the mock recorder for MockJWTPolicyReader.
type MockJWTPolicyReaderMockRecorder struct {
	mock *MockJWTPolicyReader
}

// NewMockJWTPolicyReader creates a new mock instance.
func NewMockJWTPolicyReader(ctrl *gomock.Controller) *MockJWTPolicyReader {
	mock := &MockJWTPolicyReader{ctrl: ctrl}
	mock.recorder = &MockJWTPolicyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTPolicyReader) EXPECT() *MockJWTPolicyReaderMockRecorder {
	return m.recorder
}

// GetJWTPolicy mocks base method.
func (m *MockJWTPolicyReader) GetJWTPolicy(ctx context.Context, key client.ObjectKey) (*v2.JWTPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJWTPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.JWTPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJWTPolicy indicates an expected call of GetJWTPolicy.
func (mr *MockJWTPolicyReaderMockRecorder) GetJWTPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJWTPolicy", reflect.TypeOf((*MockJWTPolicyReader)(nil).GetJWTPolicy), ctx, key)
}

// ListJWTPolicy mocks base method.
func (m *MockJWTPolicyReader) ListJWTPolicy(ctx context.Context, opts ...client.ListOption) (*v2.JWTPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJWTPolicy", varargs...)
	ret0, _ := ret[0].(*v2.JWTPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJWTPolicy indicates an expected call of ListJWTPolicy.
func (mr *MockJWTPolicyReaderMockRecorder) ListJWTPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJWTPolicy", reflect.TypeOf((*MockJWTPolicyReader)(nil).ListJWTPolicy), varargs...)
}

// MockJWTPolicyWriter is a mock of JWTPolicyWriter interface.
type MockJWTPolicyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockJWTPolicyWriterMockRecorder
}

// MockJWTPolicyWriterMockRecorder is the mock recorder for MockJWTPolicyWriter.
type MockJWTPolicyWriterMockRecorder struct {
	mock *MockJWTPolicyWriter
}

// NewMockJWTPolicyWriter creates a new mock instance.
func NewMockJWTPolicyWriter(ctrl *gomock.Controller) *MockJWTPolicyWriter {
	mock := &MockJWTPolicyWriter{ctrl: ctrl}
	mock.recorder = &MockJWTPolicyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTPolicyWriter) EXPECT() *MockJWTPolicyWriterMockRecorder {
	return m.recorder
}

// CreateJWTPolicy mocks base method.
func (m *MockJWTPolicyWriter) CreateJWTPolicy(ctx context.Context, obj *v2.JWTPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJWTPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJWTPolicy indicates an expected call of CreateJWTPolicy.
func (mr *MockJWTPolicyWriterMockRecorder) CreateJWTPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJWTPolicy", reflect.TypeOf((*MockJWTPolicyWriter)(nil).CreateJWTPolicy), varargs...)
}

// DeleteAllOfJWTPolicy mocks base method.
func (m *MockJWTPolicyWriter) DeleteAllOfJWTPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfJWTPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfJWTPolicy indicates an expected call of DeleteAllOfJWTPolicy.
func (mr *MockJWTPolicyWriterMockRecorder) DeleteAllOfJWTPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfJWTPolicy", reflect.TypeOf((*MockJWTPolicyWriter)(nil).DeleteAllOfJWTPolicy), varargs...)
}

// DeleteJWTPolicy mocks base method.
func (m *MockJWTPolicyWriter) DeleteJWTPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJWTPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJWTPolicy indicates an expected call of DeleteJWTPolicy.
func (mr *MockJWTPolicyWriterMockRecorder) DeleteJWTPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJWTPolicy", reflect.TypeOf((*MockJWTPolicyWriter)(nil).DeleteJWTPolicy), varargs...)
}

// PatchJWTPolicy mocks base method.
func (m *MockJWTPolicyWriter) PatchJWTPolicy(ctx context.Context, obj *v2.JWTPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchJWTPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchJWTPolicy indicates an expected call of PatchJWTPolicy.
func (mr *MockJWTPolicyWriterMockRecorder) PatchJWTPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchJWTPolicy", reflect.TypeOf((*MockJWTPolicyWriter)(nil).PatchJWTPolicy), varargs...)
}

// UpdateJWTPolicy mocks base method.
func (m *MockJWTPolicyWriter) UpdateJWTPolicy(ctx context.Context, obj *v2.JWTPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateJWTPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJWTPolicy indicates an expected call of UpdateJWTPolicy.
func (mr *MockJWTPolicyWriterMockRecorder) UpdateJWTPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJWTPolicy", reflect.TypeOf((*MockJWTPolicyWriter)(nil).UpdateJWTPolicy), varargs...)
}

// UpsertJWTPolicy mocks base method.
func (m *MockJWTPolicyWriter) UpsertJWTPolicy(ctx context.Context, obj *v2.JWTPolicy, transitionFuncs ...v2.JWTPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertJWTPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertJWTPolicy indicates an expected call of UpsertJWTPolicy.
func (mr *MockJWTPolicyWriterMockRecorder) UpsertJWTPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertJWTPolicy", reflect.TypeOf((*MockJWTPolicyWriter)(nil).UpsertJWTPolicy), varargs...)
}

// MockJWTPolicyStatusWriter is a mock of JWTPolicyStatusWriter interface.
type MockJWTPolicyStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockJWTPolicyStatusWriterMockRecorder
}

// MockJWTPolicyStatusWriterMockRecorder is the mock recorder for MockJWTPolicyStatusWriter.
type MockJWTPolicyStatusWriterMockRecorder struct {
	mock *MockJWTPolicyStatusWriter
}

// NewMockJWTPolicyStatusWriter creates a new mock instance.
func NewMockJWTPolicyStatusWriter(ctrl *gomock.Controller) *MockJWTPolicyStatusWriter {
	mock := &MockJWTPolicyStatusWriter{ctrl: ctrl}
	mock.recorder = &MockJWTPolicyStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTPolicyStatusWriter) EXPECT() *MockJWTPolicyStatusWriterMockRecorder {
	return m.recorder
}

// PatchJWTPolicyStatus mocks base method.
func (m *MockJWTPolicyStatusWriter) PatchJWTPolicyStatus(ctx context.Context, obj *v2.JWTPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchJWTPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchJWTPolicyStatus indicates an expected call of PatchJWTPolicyStatus.
func (mr *MockJWTPolicyStatusWriterMockRecorder) PatchJWTPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchJWTPolicyStatus", reflect.TypeOf((*MockJWTPolicyStatusWriter)(nil).PatchJWTPolicyStatus), varargs...)
}

// UpdateJWTPolicyStatus mocks base method.
func (m *MockJWTPolicyStatusWriter) UpdateJWTPolicyStatus(ctx context.Context, obj *v2.JWTPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateJWTPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJWTPolicyStatus indicates an expected call of UpdateJWTPolicyStatus.
func (mr *MockJWTPolicyStatusWriterMockRecorder) UpdateJWTPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJWTPolicyStatus", reflect.TypeOf((*MockJWTPolicyStatusWriter)(nil).UpdateJWTPolicyStatus), varargs...)
}

// MockJWTPolicyClient is a mock of JWTPolicyClient interface.
type MockJWTPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockJWTPolicyClientMockRecorder
}

// MockJWTPolicyClientMockRecorder is the mock recorder for MockJWTPolicyClient.
type MockJWTPolicyClientMockRecorder struct {
	mock *MockJWTPolicyClient
}

// NewMockJWTPolicyClient creates a new mock instance.
func NewMockJWTPolicyClient(ctrl *gomock.Controller) *MockJWTPolicyClient {
	mock := &MockJWTPolicyClient{ctrl: ctrl}
	mock.recorder = &MockJWTPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTPolicyClient) EXPECT() *MockJWTPolicyClientMockRecorder {
	return m.recorder
}

// CreateJWTPolicy mocks base method.
func (m *MockJWTPolicyClient) CreateJWTPolicy(ctx context.Context, obj *v2.JWTPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJWTPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJWTPolicy indicates an expected call of CreateJWTPolicy.
func (mr *MockJWTPolicyClientMockRecorder) CreateJWTPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJWTPolicy", reflect.TypeOf((*MockJWTPolicyClient)(nil).CreateJWTPolicy), varargs...)
}

// DeleteAllOfJWTPolicy mocks base method.
func (m *MockJWTPolicyClient) DeleteAllOfJWTPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfJWTPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfJWTPolicy indicates an expected call of DeleteAllOfJWTPolicy.
func (mr *MockJWTPolicyClientMockRecorder) DeleteAllOfJWTPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfJWTPolicy", reflect.TypeOf((*MockJWTPolicyClient)(nil).DeleteAllOfJWTPolicy), varargs...)
}

// DeleteJWTPolicy mocks base method.
func (m *MockJWTPolicyClient) DeleteJWTPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJWTPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJWTPolicy indicates an expected call of DeleteJWTPolicy.
func (mr *MockJWTPolicyClientMockRecorder) DeleteJWTPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJWTPolicy", reflect.TypeOf((*MockJWTPolicyClient)(nil).DeleteJWTPolicy), varargs...)
}

// GetJWTPolicy mocks base method.
func (m *MockJWTPolicyClient) GetJWTPolicy(ctx context.Context, key client.ObjectKey) (*v2.JWTPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJWTPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.JWTPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJWTPolicy indicates an expected call of GetJWTPolicy.
func (mr *MockJWTPolicyClientMockRecorder) GetJWTPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJWTPolicy", reflect.TypeOf((*MockJWTPolicyClient)(nil).GetJWTPolicy), ctx, key)
}

// ListJWTPolicy mocks base method.
func (m *MockJWTPolicyClient) ListJWTPolicy(ctx context.Context, opts ...client.ListOption) (*v2.JWTPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJWTPolicy", varargs...)
	ret0, _ := ret[0].(*v2.JWTPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJWTPolicy indicates an expected call of ListJWTPolicy.
func (mr *MockJWTPolicyClientMockRecorder) ListJWTPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJWTPolicy", reflect.TypeOf((*MockJWTPolicyClient)(nil).ListJWTPolicy), varargs...)
}

// PatchJWTPolicy mocks base method.
func (m *MockJWTPolicyClient) PatchJWTPolicy(ctx context.Context, obj *v2.JWTPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchJWTPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchJWTPolicy indicates an expected call of PatchJWTPolicy.
func (mr *MockJWTPolicyClientMockRecorder) PatchJWTPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchJWTPolicy", reflect.TypeOf((*MockJWTPolicyClient)(nil).PatchJWTPolicy), varargs...)
}

// PatchJWTPolicyStatus mocks base method.
func (m *MockJWTPolicyClient) PatchJWTPolicyStatus(ctx context.Context, obj *v2.JWTPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchJWTPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchJWTPolicyStatus indicates an expected call of PatchJWTPolicyStatus.
func (mr *MockJWTPolicyClientMockRecorder) PatchJWTPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchJWTPolicyStatus", reflect.TypeOf((*MockJWTPolicyClient)(nil).PatchJWTPolicyStatus), varargs...)
}

// UpdateJWTPolicy mocks base method.
func (m *MockJWTPolicyClient) UpdateJWTPolicy(ctx context.Context, obj *v2.JWTPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateJWTPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJWTPolicy indicates an expected call of UpdateJWTPolicy.
func (mr *MockJWTPolicyClientMockRecorder) UpdateJWTPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJWTPolicy", reflect.TypeOf((*MockJWTPolicyClient)(nil).UpdateJWTPolicy), varargs...)
}

// UpdateJWTPolicyStatus mocks base method.
func (m *MockJWTPolicyClient) UpdateJWTPolicyStatus(ctx context.Context, obj *v2.JWTPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateJWTPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJWTPolicyStatus indicates an expected call of UpdateJWTPolicyStatus.
func (mr *MockJWTPolicyClientMockRecorder) UpdateJWTPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJWTPolicyStatus", reflect.TypeOf((*MockJWTPolicyClient)(nil).UpdateJWTPolicyStatus), varargs...)
}

// UpsertJWTPolicy mocks base method.
func (m *MockJWTPolicyClient) UpsertJWTPolicy(ctx context.Context, obj *v2.JWTPolicy, transitionFuncs ...v2.JWTPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertJWTPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertJWTPolicy indicates an expected call of UpsertJWTPolicy.
func (mr *MockJWTPolicyClientMockRecorder) UpsertJWTPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertJWTPolicy", reflect.TypeOf((*MockJWTPolicyClient)(nil).UpsertJWTPolicy), varargs...)
}

// MockMulticlusterJWTPolicyClient is a mock of MulticlusterJWTPolicyClient interface.
type MockMulticlusterJWTPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterJWTPolicyClientMockRecorder
}

// MockMulticlusterJWTPolicyClientMockRecorder is the mock recorder for MockMulticlusterJWTPolicyClient.
type MockMulticlusterJWTPolicyClientMockRecorder struct {
	mock *MockMulticlusterJWTPolicyClient
}

// NewMockMulticlusterJWTPolicyClient creates a new mock instance.
func NewMockMulticlusterJWTPolicyClient(ctrl *gomock.Controller) *MockMulticlusterJWTPolicyClient {
	mock := &MockMulticlusterJWTPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterJWTPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterJWTPolicyClient) EXPECT() *MockMulticlusterJWTPolicyClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterJWTPolicyClient) Cluster(cluster string) (v2.JWTPolicyClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.JWTPolicyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterJWTPolicyClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterJWTPolicyClient)(nil).Cluster), cluster)
}

// MockClientTLSPolicyReader is a mock of ClientTLSPolicyReader interface.
type MockClientTLSPolicyReader struct {
	ctrl     *gomock.Controller
	recorder *MockClientTLSPolicyReaderMockRecorder
}

// MockClientTLSPolicyReaderMockRecorder is the mock recorder for MockClientTLSPolicyReader.
type MockClientTLSPolicyReaderMockRecorder struct {
	mock *MockClientTLSPolicyReader
}

// NewMockClientTLSPolicyReader creates a new mock instance.
func NewMockClientTLSPolicyReader(ctrl *gomock.Controller) *MockClientTLSPolicyReader {
	mock := &MockClientTLSPolicyReader{ctrl: ctrl}
	mock.recorder = &MockClientTLSPolicyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientTLSPolicyReader) EXPECT() *MockClientTLSPolicyReaderMockRecorder {
	return m.recorder
}

// GetClientTLSPolicy mocks base method.
func (m *MockClientTLSPolicyReader) GetClientTLSPolicy(ctx context.Context, key client.ObjectKey) (*v2.ClientTLSPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientTLSPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.ClientTLSPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientTLSPolicy indicates an expected call of GetClientTLSPolicy.
func (mr *MockClientTLSPolicyReaderMockRecorder) GetClientTLSPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientTLSPolicy", reflect.TypeOf((*MockClientTLSPolicyReader)(nil).GetClientTLSPolicy), ctx, key)
}

// ListClientTLSPolicy mocks base method.
func (m *MockClientTLSPolicyReader) ListClientTLSPolicy(ctx context.Context, opts ...client.ListOption) (*v2.ClientTLSPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClientTLSPolicy", varargs...)
	ret0, _ := ret[0].(*v2.ClientTLSPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClientTLSPolicy indicates an expected call of ListClientTLSPolicy.
func (mr *MockClientTLSPolicyReaderMockRecorder) ListClientTLSPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClientTLSPolicy", reflect.TypeOf((*MockClientTLSPolicyReader)(nil).ListClientTLSPolicy), varargs...)
}

// MockClientTLSPolicyWriter is a mock of ClientTLSPolicyWriter interface.
type MockClientTLSPolicyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockClientTLSPolicyWriterMockRecorder
}

// MockClientTLSPolicyWriterMockRecorder is the mock recorder for MockClientTLSPolicyWriter.
type MockClientTLSPolicyWriterMockRecorder struct {
	mock *MockClientTLSPolicyWriter
}

// NewMockClientTLSPolicyWriter creates a new mock instance.
func NewMockClientTLSPolicyWriter(ctrl *gomock.Controller) *MockClientTLSPolicyWriter {
	mock := &MockClientTLSPolicyWriter{ctrl: ctrl}
	mock.recorder = &MockClientTLSPolicyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientTLSPolicyWriter) EXPECT() *MockClientTLSPolicyWriterMockRecorder {
	return m.recorder
}

// CreateClientTLSPolicy mocks base method.
func (m *MockClientTLSPolicyWriter) CreateClientTLSPolicy(ctx context.Context, obj *v2.ClientTLSPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClientTLSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClientTLSPolicy indicates an expected call of CreateClientTLSPolicy.
func (mr *MockClientTLSPolicyWriterMockRecorder) CreateClientTLSPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientTLSPolicy", reflect.TypeOf((*MockClientTLSPolicyWriter)(nil).CreateClientTLSPolicy), varargs...)
}

// DeleteAllOfClientTLSPolicy mocks base method.
func (m *MockClientTLSPolicyWriter) DeleteAllOfClientTLSPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfClientTLSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfClientTLSPolicy indicates an expected call of DeleteAllOfClientTLSPolicy.
func (mr *MockClientTLSPolicyWriterMockRecorder) DeleteAllOfClientTLSPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfClientTLSPolicy", reflect.TypeOf((*MockClientTLSPolicyWriter)(nil).DeleteAllOfClientTLSPolicy), varargs...)
}

// DeleteClientTLSPolicy mocks base method.
func (m *MockClientTLSPolicyWriter) DeleteClientTLSPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClientTLSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientTLSPolicy indicates an expected call of DeleteClientTLSPolicy.
func (mr *MockClientTLSPolicyWriterMockRecorder) DeleteClientTLSPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientTLSPolicy", reflect.TypeOf((*MockClientTLSPolicyWriter)(nil).DeleteClientTLSPolicy), varargs...)
}

// PatchClientTLSPolicy mocks base method.
func (m *MockClientTLSPolicyWriter) PatchClientTLSPolicy(ctx context.Context, obj *v2.ClientTLSPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchClientTLSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClientTLSPolicy indicates an expected call of PatchClientTLSPolicy.
func (mr *MockClientTLSPolicyWriterMockRecorder) PatchClientTLSPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClientTLSPolicy", reflect.TypeOf((*MockClientTLSPolicyWriter)(nil).PatchClientTLSPolicy), varargs...)
}

// UpdateClientTLSPolicy mocks base method.
func (m *MockClientTLSPolicyWriter) UpdateClientTLSPolicy(ctx context.Context, obj *v2.ClientTLSPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClientTLSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClientTLSPolicy indicates an expected call of UpdateClientTLSPolicy.
func (mr *MockClientTLSPolicyWriterMockRecorder) UpdateClientTLSPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientTLSPolicy", reflect.TypeOf((*MockClientTLSPolicyWriter)(nil).UpdateClientTLSPolicy), varargs...)
}

// UpsertClientTLSPolicy mocks base method.
func (m *MockClientTLSPolicyWriter) UpsertClientTLSPolicy(ctx context.Context, obj *v2.ClientTLSPolicy, transitionFuncs ...v2.ClientTLSPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertClientTLSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertClientTLSPolicy indicates an expected call of UpsertClientTLSPolicy.
func (mr *MockClientTLSPolicyWriterMockRecorder) UpsertClientTLSPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertClientTLSPolicy", reflect.TypeOf((*MockClientTLSPolicyWriter)(nil).UpsertClientTLSPolicy), varargs...)
}

// MockClientTLSPolicyStatusWriter is a mock of ClientTLSPolicyStatusWriter interface.
type MockClientTLSPolicyStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockClientTLSPolicyStatusWriterMockRecorder
}

// MockClientTLSPolicyStatusWriterMockRecorder is the mock recorder for MockClientTLSPolicyStatusWriter.
type MockClientTLSPolicyStatusWriterMockRecorder struct {
	mock *MockClientTLSPolicyStatusWriter
}

// NewMockClientTLSPolicyStatusWriter creates a new mock instance.
func NewMockClientTLSPolicyStatusWriter(ctrl *gomock.Controller) *MockClientTLSPolicyStatusWriter {
	mock := &MockClientTLSPolicyStatusWriter{ctrl: ctrl}
	mock.recorder = &MockClientTLSPolicyStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientTLSPolicyStatusWriter) EXPECT() *MockClientTLSPolicyStatusWriterMockRecorder {
	return m.recorder
}

// PatchClientTLSPolicyStatus mocks base method.
func (m *MockClientTLSPolicyStatusWriter) PatchClientTLSPolicyStatus(ctx context.Context, obj *v2.ClientTLSPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchClientTLSPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClientTLSPolicyStatus indicates an expected call of PatchClientTLSPolicyStatus.
func (mr *MockClientTLSPolicyStatusWriterMockRecorder) PatchClientTLSPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClientTLSPolicyStatus", reflect.TypeOf((*MockClientTLSPolicyStatusWriter)(nil).PatchClientTLSPolicyStatus), varargs...)
}

// UpdateClientTLSPolicyStatus mocks base method.
func (m *MockClientTLSPolicyStatusWriter) UpdateClientTLSPolicyStatus(ctx context.Context, obj *v2.ClientTLSPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClientTLSPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClientTLSPolicyStatus indicates an expected call of UpdateClientTLSPolicyStatus.
func (mr *MockClientTLSPolicyStatusWriterMockRecorder) UpdateClientTLSPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientTLSPolicyStatus", reflect.TypeOf((*MockClientTLSPolicyStatusWriter)(nil).UpdateClientTLSPolicyStatus), varargs...)
}

// MockClientTLSPolicyClient is a mock of ClientTLSPolicyClient interface.
type MockClientTLSPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientTLSPolicyClientMockRecorder
}

// MockClientTLSPolicyClientMockRecorder is the mock recorder for MockClientTLSPolicyClient.
type MockClientTLSPolicyClientMockRecorder struct {
	mock *MockClientTLSPolicyClient
}

// NewMockClientTLSPolicyClient creates a new mock instance.
func NewMockClientTLSPolicyClient(ctrl *gomock.Controller) *MockClientTLSPolicyClient {
	mock := &MockClientTLSPolicyClient{ctrl: ctrl}
	mock.recorder = &MockClientTLSPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientTLSPolicyClient) EXPECT() *MockClientTLSPolicyClientMockRecorder {
	return m.recorder
}

// CreateClientTLSPolicy mocks base method.
func (m *MockClientTLSPolicyClient) CreateClientTLSPolicy(ctx context.Context, obj *v2.ClientTLSPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClientTLSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClientTLSPolicy indicates an expected call of CreateClientTLSPolicy.
func (mr *MockClientTLSPolicyClientMockRecorder) CreateClientTLSPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientTLSPolicy", reflect.TypeOf((*MockClientTLSPolicyClient)(nil).CreateClientTLSPolicy), varargs...)
}

// DeleteAllOfClientTLSPolicy mocks base method.
func (m *MockClientTLSPolicyClient) DeleteAllOfClientTLSPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfClientTLSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfClientTLSPolicy indicates an expected call of DeleteAllOfClientTLSPolicy.
func (mr *MockClientTLSPolicyClientMockRecorder) DeleteAllOfClientTLSPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfClientTLSPolicy", reflect.TypeOf((*MockClientTLSPolicyClient)(nil).DeleteAllOfClientTLSPolicy), varargs...)
}

// DeleteClientTLSPolicy mocks base method.
func (m *MockClientTLSPolicyClient) DeleteClientTLSPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClientTLSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientTLSPolicy indicates an expected call of DeleteClientTLSPolicy.
func (mr *MockClientTLSPolicyClientMockRecorder) DeleteClientTLSPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientTLSPolicy", reflect.TypeOf((*MockClientTLSPolicyClient)(nil).DeleteClientTLSPolicy), varargs...)
}

// GetClientTLSPolicy mocks base method.
func (m *MockClientTLSPolicyClient) GetClientTLSPolicy(ctx context.Context, key client.ObjectKey) (*v2.ClientTLSPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientTLSPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.ClientTLSPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientTLSPolicy indicates an expected call of GetClientTLSPolicy.
func (mr *MockClientTLSPolicyClientMockRecorder) GetClientTLSPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientTLSPolicy", reflect.TypeOf((*MockClientTLSPolicyClient)(nil).GetClientTLSPolicy), ctx, key)
}

// ListClientTLSPolicy mocks base method.
func (m *MockClientTLSPolicyClient) ListClientTLSPolicy(ctx context.Context, opts ...client.ListOption) (*v2.ClientTLSPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClientTLSPolicy", varargs...)
	ret0, _ := ret[0].(*v2.ClientTLSPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClientTLSPolicy indicates an expected call of ListClientTLSPolicy.
func (mr *MockClientTLSPolicyClientMockRecorder) ListClientTLSPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClientTLSPolicy", reflect.TypeOf((*MockClientTLSPolicyClient)(nil).ListClientTLSPolicy), varargs...)
}

// PatchClientTLSPolicy mocks base method.
func (m *MockClientTLSPolicyClient) PatchClientTLSPolicy(ctx context.Context, obj *v2.ClientTLSPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchClientTLSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClientTLSPolicy indicates an expected call of PatchClientTLSPolicy.
func (mr *MockClientTLSPolicyClientMockRecorder) PatchClientTLSPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClientTLSPolicy", reflect.TypeOf((*MockClientTLSPolicyClient)(nil).PatchClientTLSPolicy), varargs...)
}

// PatchClientTLSPolicyStatus mocks base method.
func (m *MockClientTLSPolicyClient) PatchClientTLSPolicyStatus(ctx context.Context, obj *v2.ClientTLSPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchClientTLSPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClientTLSPolicyStatus indicates an expected call of PatchClientTLSPolicyStatus.
func (mr *MockClientTLSPolicyClientMockRecorder) PatchClientTLSPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClientTLSPolicyStatus", reflect.TypeOf((*MockClientTLSPolicyClient)(nil).PatchClientTLSPolicyStatus), varargs...)
}

// UpdateClientTLSPolicy mocks base method.
func (m *MockClientTLSPolicyClient) UpdateClientTLSPolicy(ctx context.Context, obj *v2.ClientTLSPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClientTLSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClientTLSPolicy indicates an expected call of UpdateClientTLSPolicy.
func (mr *MockClientTLSPolicyClientMockRecorder) UpdateClientTLSPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientTLSPolicy", reflect.TypeOf((*MockClientTLSPolicyClient)(nil).UpdateClientTLSPolicy), varargs...)
}

// UpdateClientTLSPolicyStatus mocks base method.
func (m *MockClientTLSPolicyClient) UpdateClientTLSPolicyStatus(ctx context.Context, obj *v2.ClientTLSPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClientTLSPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClientTLSPolicyStatus indicates an expected call of UpdateClientTLSPolicyStatus.
func (mr *MockClientTLSPolicyClientMockRecorder) UpdateClientTLSPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientTLSPolicyStatus", reflect.TypeOf((*MockClientTLSPolicyClient)(nil).UpdateClientTLSPolicyStatus), varargs...)
}

// UpsertClientTLSPolicy mocks base method.
func (m *MockClientTLSPolicyClient) UpsertClientTLSPolicy(ctx context.Context, obj *v2.ClientTLSPolicy, transitionFuncs ...v2.ClientTLSPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertClientTLSPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertClientTLSPolicy indicates an expected call of UpsertClientTLSPolicy.
func (mr *MockClientTLSPolicyClientMockRecorder) UpsertClientTLSPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertClientTLSPolicy", reflect.TypeOf((*MockClientTLSPolicyClient)(nil).UpsertClientTLSPolicy), varargs...)
}

// MockMulticlusterClientTLSPolicyClient is a mock of MulticlusterClientTLSPolicyClient interface.
type MockMulticlusterClientTLSPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientTLSPolicyClientMockRecorder
}

// MockMulticlusterClientTLSPolicyClientMockRecorder is the mock recorder for MockMulticlusterClientTLSPolicyClient.
type MockMulticlusterClientTLSPolicyClientMockRecorder struct {
	mock *MockMulticlusterClientTLSPolicyClient
}

// NewMockMulticlusterClientTLSPolicyClient creates a new mock instance.
func NewMockMulticlusterClientTLSPolicyClient(ctrl *gomock.Controller) *MockMulticlusterClientTLSPolicyClient {
	mock := &MockMulticlusterClientTLSPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientTLSPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientTLSPolicyClient) EXPECT() *MockMulticlusterClientTLSPolicyClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientTLSPolicyClient) Cluster(cluster string) (v2.ClientTLSPolicyClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.ClientTLSPolicyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientTLSPolicyClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientTLSPolicyClient)(nil).Cluster), cluster)
}

// MockGraphQLAllowedQueryPolicyReader is a mock of GraphQLAllowedQueryPolicyReader interface.
type MockGraphQLAllowedQueryPolicyReader struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLAllowedQueryPolicyReaderMockRecorder
}

// MockGraphQLAllowedQueryPolicyReaderMockRecorder is the mock recorder for MockGraphQLAllowedQueryPolicyReader.
type MockGraphQLAllowedQueryPolicyReaderMockRecorder struct {
	mock *MockGraphQLAllowedQueryPolicyReader
}

// NewMockGraphQLAllowedQueryPolicyReader creates a new mock instance.
func NewMockGraphQLAllowedQueryPolicyReader(ctrl *gomock.Controller) *MockGraphQLAllowedQueryPolicyReader {
	mock := &MockGraphQLAllowedQueryPolicyReader{ctrl: ctrl}
	mock.recorder = &MockGraphQLAllowedQueryPolicyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLAllowedQueryPolicyReader) EXPECT() *MockGraphQLAllowedQueryPolicyReaderMockRecorder {
	return m.recorder
}

// GetGraphQLAllowedQueryPolicy mocks base method.
func (m *MockGraphQLAllowedQueryPolicyReader) GetGraphQLAllowedQueryPolicy(ctx context.Context, key client.ObjectKey) (*v2.GraphQLAllowedQueryPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGraphQLAllowedQueryPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.GraphQLAllowedQueryPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGraphQLAllowedQueryPolicy indicates an expected call of GetGraphQLAllowedQueryPolicy.
func (mr *MockGraphQLAllowedQueryPolicyReaderMockRecorder) GetGraphQLAllowedQueryPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGraphQLAllowedQueryPolicy", reflect.TypeOf((*MockGraphQLAllowedQueryPolicyReader)(nil).GetGraphQLAllowedQueryPolicy), ctx, key)
}

// ListGraphQLAllowedQueryPolicy mocks base method.
func (m *MockGraphQLAllowedQueryPolicyReader) ListGraphQLAllowedQueryPolicy(ctx context.Context, opts ...client.ListOption) (*v2.GraphQLAllowedQueryPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGraphQLAllowedQueryPolicy", varargs...)
	ret0, _ := ret[0].(*v2.GraphQLAllowedQueryPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGraphQLAllowedQueryPolicy indicates an expected call of ListGraphQLAllowedQueryPolicy.
func (mr *MockGraphQLAllowedQueryPolicyReaderMockRecorder) ListGraphQLAllowedQueryPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphQLAllowedQueryPolicy", reflect.TypeOf((*MockGraphQLAllowedQueryPolicyReader)(nil).ListGraphQLAllowedQueryPolicy), varargs...)
}

// MockGraphQLAllowedQueryPolicyWriter is a mock of GraphQLAllowedQueryPolicyWriter interface.
type MockGraphQLAllowedQueryPolicyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLAllowedQueryPolicyWriterMockRecorder
}

// MockGraphQLAllowedQueryPolicyWriterMockRecorder is the mock recorder for MockGraphQLAllowedQueryPolicyWriter.
type MockGraphQLAllowedQueryPolicyWriterMockRecorder struct {
	mock *MockGraphQLAllowedQueryPolicyWriter
}

// NewMockGraphQLAllowedQueryPolicyWriter creates a new mock instance.
func NewMockGraphQLAllowedQueryPolicyWriter(ctrl *gomock.Controller) *MockGraphQLAllowedQueryPolicyWriter {
	mock := &MockGraphQLAllowedQueryPolicyWriter{ctrl: ctrl}
	mock.recorder = &MockGraphQLAllowedQueryPolicyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLAllowedQueryPolicyWriter) EXPECT() *MockGraphQLAllowedQueryPolicyWriterMockRecorder {
	return m.recorder
}

// CreateGraphQLAllowedQueryPolicy mocks base method.
func (m *MockGraphQLAllowedQueryPolicyWriter) CreateGraphQLAllowedQueryPolicy(ctx context.Context, obj *v2.GraphQLAllowedQueryPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGraphQLAllowedQueryPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGraphQLAllowedQueryPolicy indicates an expected call of CreateGraphQLAllowedQueryPolicy.
func (mr *MockGraphQLAllowedQueryPolicyWriterMockRecorder) CreateGraphQLAllowedQueryPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphQLAllowedQueryPolicy", reflect.TypeOf((*MockGraphQLAllowedQueryPolicyWriter)(nil).CreateGraphQLAllowedQueryPolicy), varargs...)
}

// DeleteAllOfGraphQLAllowedQueryPolicy mocks base method.
func (m *MockGraphQLAllowedQueryPolicyWriter) DeleteAllOfGraphQLAllowedQueryPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfGraphQLAllowedQueryPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfGraphQLAllowedQueryPolicy indicates an expected call of DeleteAllOfGraphQLAllowedQueryPolicy.
func (mr *MockGraphQLAllowedQueryPolicyWriterMockRecorder) DeleteAllOfGraphQLAllowedQueryPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfGraphQLAllowedQueryPolicy", reflect.TypeOf((*MockGraphQLAllowedQueryPolicyWriter)(nil).DeleteAllOfGraphQLAllowedQueryPolicy), varargs...)
}

// DeleteGraphQLAllowedQueryPolicy mocks base method.
func (m *MockGraphQLAllowedQueryPolicyWriter) DeleteGraphQLAllowedQueryPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGraphQLAllowedQueryPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGraphQLAllowedQueryPolicy indicates an expected call of DeleteGraphQLAllowedQueryPolicy.
func (mr *MockGraphQLAllowedQueryPolicyWriterMockRecorder) DeleteGraphQLAllowedQueryPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphQLAllowedQueryPolicy", reflect.TypeOf((*MockGraphQLAllowedQueryPolicyWriter)(nil).DeleteGraphQLAllowedQueryPolicy), varargs...)
}

// PatchGraphQLAllowedQueryPolicy mocks base method.
func (m *MockGraphQLAllowedQueryPolicyWriter) PatchGraphQLAllowedQueryPolicy(ctx context.Context, obj *v2.GraphQLAllowedQueryPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGraphQLAllowedQueryPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGraphQLAllowedQueryPolicy indicates an expected call of PatchGraphQLAllowedQueryPolicy.
func (mr *MockGraphQLAllowedQueryPolicyWriterMockRecorder) PatchGraphQLAllowedQueryPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGraphQLAllowedQueryPolicy", reflect.TypeOf((*MockGraphQLAllowedQueryPolicyWriter)(nil).PatchGraphQLAllowedQueryPolicy), varargs...)
}

// UpdateGraphQLAllowedQueryPolicy mocks base method.
func (m *MockGraphQLAllowedQueryPolicyWriter) UpdateGraphQLAllowedQueryPolicy(ctx context.Context, obj *v2.GraphQLAllowedQueryPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGraphQLAllowedQueryPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLAllowedQueryPolicy indicates an expected call of UpdateGraphQLAllowedQueryPolicy.
func (mr *MockGraphQLAllowedQueryPolicyWriterMockRecorder) UpdateGraphQLAllowedQueryPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLAllowedQueryPolicy", reflect.TypeOf((*MockGraphQLAllowedQueryPolicyWriter)(nil).UpdateGraphQLAllowedQueryPolicy), varargs...)
}

// UpsertGraphQLAllowedQueryPolicy mocks base method.
func (m *MockGraphQLAllowedQueryPolicyWriter) UpsertGraphQLAllowedQueryPolicy(ctx context.Context, obj *v2.GraphQLAllowedQueryPolicy, transitionFuncs ...v2.GraphQLAllowedQueryPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertGraphQLAllowedQueryPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertGraphQLAllowedQueryPolicy indicates an expected call of UpsertGraphQLAllowedQueryPolicy.
func (mr *MockGraphQLAllowedQueryPolicyWriterMockRecorder) UpsertGraphQLAllowedQueryPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGraphQLAllowedQueryPolicy", reflect.TypeOf((*MockGraphQLAllowedQueryPolicyWriter)(nil).UpsertGraphQLAllowedQueryPolicy), varargs...)
}

// MockGraphQLAllowedQueryPolicyStatusWriter is a mock of GraphQLAllowedQueryPolicyStatusWriter interface.
type MockGraphQLAllowedQueryPolicyStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLAllowedQueryPolicyStatusWriterMockRecorder
}

// MockGraphQLAllowedQueryPolicyStatusWriterMockRecorder is the mock recorder for MockGraphQLAllowedQueryPolicyStatusWriter.
type MockGraphQLAllowedQueryPolicyStatusWriterMockRecorder struct {
	mock *MockGraphQLAllowedQueryPolicyStatusWriter
}

// NewMockGraphQLAllowedQueryPolicyStatusWriter creates a new mock instance.
func NewMockGraphQLAllowedQueryPolicyStatusWriter(ctrl *gomock.Controller) *MockGraphQLAllowedQueryPolicyStatusWriter {
	mock := &MockGraphQLAllowedQueryPolicyStatusWriter{ctrl: ctrl}
	mock.recorder = &MockGraphQLAllowedQueryPolicyStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLAllowedQueryPolicyStatusWriter) EXPECT() *MockGraphQLAllowedQueryPolicyStatusWriterMockRecorder {
	return m.recorder
}

// PatchGraphQLAllowedQueryPolicyStatus mocks base method.
func (m *MockGraphQLAllowedQueryPolicyStatusWriter) PatchGraphQLAllowedQueryPolicyStatus(ctx context.Context, obj *v2.GraphQLAllowedQueryPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGraphQLAllowedQueryPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGraphQLAllowedQueryPolicyStatus indicates an expected call of PatchGraphQLAllowedQueryPolicyStatus.
func (mr *MockGraphQLAllowedQueryPolicyStatusWriterMockRecorder) PatchGraphQLAllowedQueryPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGraphQLAllowedQueryPolicyStatus", reflect.TypeOf((*MockGraphQLAllowedQueryPolicyStatusWriter)(nil).PatchGraphQLAllowedQueryPolicyStatus), varargs...)
}

// UpdateGraphQLAllowedQueryPolicyStatus mocks base method.
func (m *MockGraphQLAllowedQueryPolicyStatusWriter) UpdateGraphQLAllowedQueryPolicyStatus(ctx context.Context, obj *v2.GraphQLAllowedQueryPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGraphQLAllowedQueryPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLAllowedQueryPolicyStatus indicates an expected call of UpdateGraphQLAllowedQueryPolicyStatus.
func (mr *MockGraphQLAllowedQueryPolicyStatusWriterMockRecorder) UpdateGraphQLAllowedQueryPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLAllowedQueryPolicyStatus", reflect.TypeOf((*MockGraphQLAllowedQueryPolicyStatusWriter)(nil).UpdateGraphQLAllowedQueryPolicyStatus), varargs...)
}

// MockGraphQLAllowedQueryPolicyClient is a mock of GraphQLAllowedQueryPolicyClient interface.
type MockGraphQLAllowedQueryPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLAllowedQueryPolicyClientMockRecorder
}

// MockGraphQLAllowedQueryPolicyClientMockRecorder is the mock recorder for MockGraphQLAllowedQueryPolicyClient.
type MockGraphQLAllowedQueryPolicyClientMockRecorder struct {
	mock *MockGraphQLAllowedQueryPolicyClient
}

// NewMockGraphQLAllowedQueryPolicyClient creates a new mock instance.
func NewMockGraphQLAllowedQueryPolicyClient(ctrl *gomock.Controller) *MockGraphQLAllowedQueryPolicyClient {
	mock := &MockGraphQLAllowedQueryPolicyClient{ctrl: ctrl}
	mock.recorder = &MockGraphQLAllowedQueryPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLAllowedQueryPolicyClient) EXPECT() *MockGraphQLAllowedQueryPolicyClientMockRecorder {
	return m.recorder
}

// CreateGraphQLAllowedQueryPolicy mocks base method.
func (m *MockGraphQLAllowedQueryPolicyClient) CreateGraphQLAllowedQueryPolicy(ctx context.Context, obj *v2.GraphQLAllowedQueryPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGraphQLAllowedQueryPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGraphQLAllowedQueryPolicy indicates an expected call of CreateGraphQLAllowedQueryPolicy.
func (mr *MockGraphQLAllowedQueryPolicyClientMockRecorder) CreateGraphQLAllowedQueryPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphQLAllowedQueryPolicy", reflect.TypeOf((*MockGraphQLAllowedQueryPolicyClient)(nil).CreateGraphQLAllowedQueryPolicy), varargs...)
}

// DeleteAllOfGraphQLAllowedQueryPolicy mocks base method.
func (m *MockGraphQLAllowedQueryPolicyClient) DeleteAllOfGraphQLAllowedQueryPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfGraphQLAllowedQueryPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfGraphQLAllowedQueryPolicy indicates an expected call of DeleteAllOfGraphQLAllowedQueryPolicy.
func (mr *MockGraphQLAllowedQueryPolicyClientMockRecorder) DeleteAllOfGraphQLAllowedQueryPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfGraphQLAllowedQueryPolicy", reflect.TypeOf((*MockGraphQLAllowedQueryPolicyClient)(nil).DeleteAllOfGraphQLAllowedQueryPolicy), varargs...)
}

// DeleteGraphQLAllowedQueryPolicy mocks base method.
func (m *MockGraphQLAllowedQueryPolicyClient) DeleteGraphQLAllowedQueryPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGraphQLAllowedQueryPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGraphQLAllowedQueryPolicy indicates an expected call of DeleteGraphQLAllowedQueryPolicy.
func (mr *MockGraphQLAllowedQueryPolicyClientMockRecorder) DeleteGraphQLAllowedQueryPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphQLAllowedQueryPolicy", reflect.TypeOf((*MockGraphQLAllowedQueryPolicyClient)(nil).DeleteGraphQLAllowedQueryPolicy), varargs...)
}

// GetGraphQLAllowedQueryPolicy mocks base method.
func (m *MockGraphQLAllowedQueryPolicyClient) GetGraphQLAllowedQueryPolicy(ctx context.Context, key client.ObjectKey) (*v2.GraphQLAllowedQueryPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGraphQLAllowedQueryPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.GraphQLAllowedQueryPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGraphQLAllowedQueryPolicy indicates an expected call of GetGraphQLAllowedQueryPolicy.
func (mr *MockGraphQLAllowedQueryPolicyClientMockRecorder) GetGraphQLAllowedQueryPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGraphQLAllowedQueryPolicy", reflect.TypeOf((*MockGraphQLAllowedQueryPolicyClient)(nil).GetGraphQLAllowedQueryPolicy), ctx, key)
}

// ListGraphQLAllowedQueryPolicy mocks base method.
func (m *MockGraphQLAllowedQueryPolicyClient) ListGraphQLAllowedQueryPolicy(ctx context.Context, opts ...client.ListOption) (*v2.GraphQLAllowedQueryPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGraphQLAllowedQueryPolicy", varargs...)
	ret0, _ := ret[0].(*v2.GraphQLAllowedQueryPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGraphQLAllowedQueryPolicy indicates an expected call of ListGraphQLAllowedQueryPolicy.
func (mr *MockGraphQLAllowedQueryPolicyClientMockRecorder) ListGraphQLAllowedQueryPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphQLAllowedQueryPolicy", reflect.TypeOf((*MockGraphQLAllowedQueryPolicyClient)(nil).ListGraphQLAllowedQueryPolicy), varargs...)
}

// PatchGraphQLAllowedQueryPolicy mocks base method.
func (m *MockGraphQLAllowedQueryPolicyClient) PatchGraphQLAllowedQueryPolicy(ctx context.Context, obj *v2.GraphQLAllowedQueryPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGraphQLAllowedQueryPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGraphQLAllowedQueryPolicy indicates an expected call of PatchGraphQLAllowedQueryPolicy.
func (mr *MockGraphQLAllowedQueryPolicyClientMockRecorder) PatchGraphQLAllowedQueryPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGraphQLAllowedQueryPolicy", reflect.TypeOf((*MockGraphQLAllowedQueryPolicyClient)(nil).PatchGraphQLAllowedQueryPolicy), varargs...)
}

// PatchGraphQLAllowedQueryPolicyStatus mocks base method.
func (m *MockGraphQLAllowedQueryPolicyClient) PatchGraphQLAllowedQueryPolicyStatus(ctx context.Context, obj *v2.GraphQLAllowedQueryPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGraphQLAllowedQueryPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGraphQLAllowedQueryPolicyStatus indicates an expected call of PatchGraphQLAllowedQueryPolicyStatus.
func (mr *MockGraphQLAllowedQueryPolicyClientMockRecorder) PatchGraphQLAllowedQueryPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGraphQLAllowedQueryPolicyStatus", reflect.TypeOf((*MockGraphQLAllowedQueryPolicyClient)(nil).PatchGraphQLAllowedQueryPolicyStatus), varargs...)
}

// UpdateGraphQLAllowedQueryPolicy mocks base method.
func (m *MockGraphQLAllowedQueryPolicyClient) UpdateGraphQLAllowedQueryPolicy(ctx context.Context, obj *v2.GraphQLAllowedQueryPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGraphQLAllowedQueryPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLAllowedQueryPolicy indicates an expected call of UpdateGraphQLAllowedQueryPolicy.
func (mr *MockGraphQLAllowedQueryPolicyClientMockRecorder) UpdateGraphQLAllowedQueryPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLAllowedQueryPolicy", reflect.TypeOf((*MockGraphQLAllowedQueryPolicyClient)(nil).UpdateGraphQLAllowedQueryPolicy), varargs...)
}

// UpdateGraphQLAllowedQueryPolicyStatus mocks base method.
func (m *MockGraphQLAllowedQueryPolicyClient) UpdateGraphQLAllowedQueryPolicyStatus(ctx context.Context, obj *v2.GraphQLAllowedQueryPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGraphQLAllowedQueryPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLAllowedQueryPolicyStatus indicates an expected call of UpdateGraphQLAllowedQueryPolicyStatus.
func (mr *MockGraphQLAllowedQueryPolicyClientMockRecorder) UpdateGraphQLAllowedQueryPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLAllowedQueryPolicyStatus", reflect.TypeOf((*MockGraphQLAllowedQueryPolicyClient)(nil).UpdateGraphQLAllowedQueryPolicyStatus), varargs...)
}

// UpsertGraphQLAllowedQueryPolicy mocks base method.
func (m *MockGraphQLAllowedQueryPolicyClient) UpsertGraphQLAllowedQueryPolicy(ctx context.Context, obj *v2.GraphQLAllowedQueryPolicy, transitionFuncs ...v2.GraphQLAllowedQueryPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertGraphQLAllowedQueryPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertGraphQLAllowedQueryPolicy indicates an expected call of UpsertGraphQLAllowedQueryPolicy.
func (mr *MockGraphQLAllowedQueryPolicyClientMockRecorder) UpsertGraphQLAllowedQueryPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGraphQLAllowedQueryPolicy", reflect.TypeOf((*MockGraphQLAllowedQueryPolicyClient)(nil).UpsertGraphQLAllowedQueryPolicy), varargs...)
}

// MockMulticlusterGraphQLAllowedQueryPolicyClient is a mock of MulticlusterGraphQLAllowedQueryPolicyClient interface.
type MockMulticlusterGraphQLAllowedQueryPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGraphQLAllowedQueryPolicyClientMockRecorder
}

// MockMulticlusterGraphQLAllowedQueryPolicyClientMockRecorder is the mock recorder for MockMulticlusterGraphQLAllowedQueryPolicyClient.
type MockMulticlusterGraphQLAllowedQueryPolicyClientMockRecorder struct {
	mock *MockMulticlusterGraphQLAllowedQueryPolicyClient
}

// NewMockMulticlusterGraphQLAllowedQueryPolicyClient creates a new mock instance.
func NewMockMulticlusterGraphQLAllowedQueryPolicyClient(ctrl *gomock.Controller) *MockMulticlusterGraphQLAllowedQueryPolicyClient {
	mock := &MockMulticlusterGraphQLAllowedQueryPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGraphQLAllowedQueryPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGraphQLAllowedQueryPolicyClient) EXPECT() *MockMulticlusterGraphQLAllowedQueryPolicyClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterGraphQLAllowedQueryPolicyClient) Cluster(cluster string) (v2.GraphQLAllowedQueryPolicyClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.GraphQLAllowedQueryPolicyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterGraphQLAllowedQueryPolicyClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterGraphQLAllowedQueryPolicyClient)(nil).Cluster), cluster)
}

// MockDLPPolicyReader is a mock of DLPPolicyReader interface.
type MockDLPPolicyReader struct {
	ctrl     *gomock.Controller
	recorder *MockDLPPolicyReaderMockRecorder
}

// MockDLPPolicyReaderMockRecorder is the mock recorder for MockDLPPolicyReader.
type MockDLPPolicyReaderMockRecorder struct {
	mock *MockDLPPolicyReader
}

// NewMockDLPPolicyReader creates a new mock instance.
func NewMockDLPPolicyReader(ctrl *gomock.Controller) *MockDLPPolicyReader {
	mock := &MockDLPPolicyReader{ctrl: ctrl}
	mock.recorder = &MockDLPPolicyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDLPPolicyReader) EXPECT() *MockDLPPolicyReaderMockRecorder {
	return m.recorder
}

// GetDLPPolicy mocks base method.
func (m *MockDLPPolicyReader) GetDLPPolicy(ctx context.Context, key client.ObjectKey) (*v2.DLPPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDLPPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.DLPPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDLPPolicy indicates an expected call of GetDLPPolicy.
func (mr *MockDLPPolicyReaderMockRecorder) GetDLPPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDLPPolicy", reflect.TypeOf((*MockDLPPolicyReader)(nil).GetDLPPolicy), ctx, key)
}

// ListDLPPolicy mocks base method.
func (m *MockDLPPolicyReader) ListDLPPolicy(ctx context.Context, opts ...client.ListOption) (*v2.DLPPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDLPPolicy", varargs...)
	ret0, _ := ret[0].(*v2.DLPPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDLPPolicy indicates an expected call of ListDLPPolicy.
func (mr *MockDLPPolicyReaderMockRecorder) ListDLPPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDLPPolicy", reflect.TypeOf((*MockDLPPolicyReader)(nil).ListDLPPolicy), varargs...)
}

// MockDLPPolicyWriter is a mock of DLPPolicyWriter interface.
type MockDLPPolicyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDLPPolicyWriterMockRecorder
}

// MockDLPPolicyWriterMockRecorder is the mock recorder for MockDLPPolicyWriter.
type MockDLPPolicyWriterMockRecorder struct {
	mock *MockDLPPolicyWriter
}

// NewMockDLPPolicyWriter creates a new mock instance.
func NewMockDLPPolicyWriter(ctrl *gomock.Controller) *MockDLPPolicyWriter {
	mock := &MockDLPPolicyWriter{ctrl: ctrl}
	mock.recorder = &MockDLPPolicyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDLPPolicyWriter) EXPECT() *MockDLPPolicyWriterMockRecorder {
	return m.recorder
}

// CreateDLPPolicy mocks base method.
func (m *MockDLPPolicyWriter) CreateDLPPolicy(ctx context.Context, obj *v2.DLPPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDLPPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDLPPolicy indicates an expected call of CreateDLPPolicy.
func (mr *MockDLPPolicyWriterMockRecorder) CreateDLPPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDLPPolicy", reflect.TypeOf((*MockDLPPolicyWriter)(nil).CreateDLPPolicy), varargs...)
}

// DeleteAllOfDLPPolicy mocks base method.
func (m *MockDLPPolicyWriter) DeleteAllOfDLPPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfDLPPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfDLPPolicy indicates an expected call of DeleteAllOfDLPPolicy.
func (mr *MockDLPPolicyWriterMockRecorder) DeleteAllOfDLPPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfDLPPolicy", reflect.TypeOf((*MockDLPPolicyWriter)(nil).DeleteAllOfDLPPolicy), varargs...)
}

// DeleteDLPPolicy mocks base method.
func (m *MockDLPPolicyWriter) DeleteDLPPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDLPPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDLPPolicy indicates an expected call of DeleteDLPPolicy.
func (mr *MockDLPPolicyWriterMockRecorder) DeleteDLPPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDLPPolicy", reflect.TypeOf((*MockDLPPolicyWriter)(nil).DeleteDLPPolicy), varargs...)
}

// PatchDLPPolicy mocks base method.
func (m *MockDLPPolicyWriter) PatchDLPPolicy(ctx context.Context, obj *v2.DLPPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchDLPPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDLPPolicy indicates an expected call of PatchDLPPolicy.
func (mr *MockDLPPolicyWriterMockRecorder) PatchDLPPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDLPPolicy", reflect.TypeOf((*MockDLPPolicyWriter)(nil).PatchDLPPolicy), varargs...)
}

// UpdateDLPPolicy mocks base method.
func (m *MockDLPPolicyWriter) UpdateDLPPolicy(ctx context.Context, obj *v2.DLPPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDLPPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDLPPolicy indicates an expected call of UpdateDLPPolicy.
func (mr *MockDLPPolicyWriterMockRecorder) UpdateDLPPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDLPPolicy", reflect.TypeOf((*MockDLPPolicyWriter)(nil).UpdateDLPPolicy), varargs...)
}

// UpsertDLPPolicy mocks base method.
func (m *MockDLPPolicyWriter) UpsertDLPPolicy(ctx context.Context, obj *v2.DLPPolicy, transitionFuncs ...v2.DLPPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertDLPPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertDLPPolicy indicates an expected call of UpsertDLPPolicy.
func (mr *MockDLPPolicyWriterMockRecorder) UpsertDLPPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertDLPPolicy", reflect.TypeOf((*MockDLPPolicyWriter)(nil).UpsertDLPPolicy), varargs...)
}

// MockDLPPolicyStatusWriter is a mock of DLPPolicyStatusWriter interface.
type MockDLPPolicyStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDLPPolicyStatusWriterMockRecorder
}

// MockDLPPolicyStatusWriterMockRecorder is the mock recorder for MockDLPPolicyStatusWriter.
type MockDLPPolicyStatusWriterMockRecorder struct {
	mock *MockDLPPolicyStatusWriter
}

// NewMockDLPPolicyStatusWriter creates a new mock instance.
func NewMockDLPPolicyStatusWriter(ctrl *gomock.Controller) *MockDLPPolicyStatusWriter {
	mock := &MockDLPPolicyStatusWriter{ctrl: ctrl}
	mock.recorder = &MockDLPPolicyStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDLPPolicyStatusWriter) EXPECT() *MockDLPPolicyStatusWriterMockRecorder {
	return m.recorder
}

// PatchDLPPolicyStatus mocks base method.
func (m *MockDLPPolicyStatusWriter) PatchDLPPolicyStatus(ctx context.Context, obj *v2.DLPPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchDLPPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDLPPolicyStatus indicates an expected call of PatchDLPPolicyStatus.
func (mr *MockDLPPolicyStatusWriterMockRecorder) PatchDLPPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDLPPolicyStatus", reflect.TypeOf((*MockDLPPolicyStatusWriter)(nil).PatchDLPPolicyStatus), varargs...)
}

// UpdateDLPPolicyStatus mocks base method.
func (m *MockDLPPolicyStatusWriter) UpdateDLPPolicyStatus(ctx context.Context, obj *v2.DLPPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDLPPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDLPPolicyStatus indicates an expected call of UpdateDLPPolicyStatus.
func (mr *MockDLPPolicyStatusWriterMockRecorder) UpdateDLPPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDLPPolicyStatus", reflect.TypeOf((*MockDLPPolicyStatusWriter)(nil).UpdateDLPPolicyStatus), varargs...)
}

// MockDLPPolicyClient is a mock of DLPPolicyClient interface.
type MockDLPPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockDLPPolicyClientMockRecorder
}

// MockDLPPolicyClientMockRecorder is the mock recorder for MockDLPPolicyClient.
type MockDLPPolicyClientMockRecorder struct {
	mock *MockDLPPolicyClient
}

// NewMockDLPPolicyClient creates a new mock instance.
func NewMockDLPPolicyClient(ctrl *gomock.Controller) *MockDLPPolicyClient {
	mock := &MockDLPPolicyClient{ctrl: ctrl}
	mock.recorder = &MockDLPPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDLPPolicyClient) EXPECT() *MockDLPPolicyClientMockRecorder {
	return m.recorder
}

// CreateDLPPolicy mocks base method.
func (m *MockDLPPolicyClient) CreateDLPPolicy(ctx context.Context, obj *v2.DLPPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDLPPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDLPPolicy indicates an expected call of CreateDLPPolicy.
func (mr *MockDLPPolicyClientMockRecorder) CreateDLPPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDLPPolicy", reflect.TypeOf((*MockDLPPolicyClient)(nil).CreateDLPPolicy), varargs...)
}

// DeleteAllOfDLPPolicy mocks base method.
func (m *MockDLPPolicyClient) DeleteAllOfDLPPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfDLPPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfDLPPolicy indicates an expected call of DeleteAllOfDLPPolicy.
func (mr *MockDLPPolicyClientMockRecorder) DeleteAllOfDLPPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfDLPPolicy", reflect.TypeOf((*MockDLPPolicyClient)(nil).DeleteAllOfDLPPolicy), varargs...)
}

// DeleteDLPPolicy mocks base method.
func (m *MockDLPPolicyClient) DeleteDLPPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDLPPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDLPPolicy indicates an expected call of DeleteDLPPolicy.
func (mr *MockDLPPolicyClientMockRecorder) DeleteDLPPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDLPPolicy", reflect.TypeOf((*MockDLPPolicyClient)(nil).DeleteDLPPolicy), varargs...)
}

// GetDLPPolicy mocks base method.
func (m *MockDLPPolicyClient) GetDLPPolicy(ctx context.Context, key client.ObjectKey) (*v2.DLPPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDLPPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.DLPPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDLPPolicy indicates an expected call of GetDLPPolicy.
func (mr *MockDLPPolicyClientMockRecorder) GetDLPPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDLPPolicy", reflect.TypeOf((*MockDLPPolicyClient)(nil).GetDLPPolicy), ctx, key)
}

// ListDLPPolicy mocks base method.
func (m *MockDLPPolicyClient) ListDLPPolicy(ctx context.Context, opts ...client.ListOption) (*v2.DLPPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDLPPolicy", varargs...)
	ret0, _ := ret[0].(*v2.DLPPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDLPPolicy indicates an expected call of ListDLPPolicy.
func (mr *MockDLPPolicyClientMockRecorder) ListDLPPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDLPPolicy", reflect.TypeOf((*MockDLPPolicyClient)(nil).ListDLPPolicy), varargs...)
}

// PatchDLPPolicy mocks base method.
func (m *MockDLPPolicyClient) PatchDLPPolicy(ctx context.Context, obj *v2.DLPPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchDLPPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDLPPolicy indicates an expected call of PatchDLPPolicy.
func (mr *MockDLPPolicyClientMockRecorder) PatchDLPPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDLPPolicy", reflect.TypeOf((*MockDLPPolicyClient)(nil).PatchDLPPolicy), varargs...)
}

// PatchDLPPolicyStatus mocks base method.
func (m *MockDLPPolicyClient) PatchDLPPolicyStatus(ctx context.Context, obj *v2.DLPPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchDLPPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDLPPolicyStatus indicates an expected call of PatchDLPPolicyStatus.
func (mr *MockDLPPolicyClientMockRecorder) PatchDLPPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDLPPolicyStatus", reflect.TypeOf((*MockDLPPolicyClient)(nil).PatchDLPPolicyStatus), varargs...)
}

// UpdateDLPPolicy mocks base method.
func (m *MockDLPPolicyClient) UpdateDLPPolicy(ctx context.Context, obj *v2.DLPPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDLPPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDLPPolicy indicates an expected call of UpdateDLPPolicy.
func (mr *MockDLPPolicyClientMockRecorder) UpdateDLPPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDLPPolicy", reflect.TypeOf((*MockDLPPolicyClient)(nil).UpdateDLPPolicy), varargs...)
}

// UpdateDLPPolicyStatus mocks base method.
func (m *MockDLPPolicyClient) UpdateDLPPolicyStatus(ctx context.Context, obj *v2.DLPPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDLPPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDLPPolicyStatus indicates an expected call of UpdateDLPPolicyStatus.
func (mr *MockDLPPolicyClientMockRecorder) UpdateDLPPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDLPPolicyStatus", reflect.TypeOf((*MockDLPPolicyClient)(nil).UpdateDLPPolicyStatus), varargs...)
}

// UpsertDLPPolicy mocks base method.
func (m *MockDLPPolicyClient) UpsertDLPPolicy(ctx context.Context, obj *v2.DLPPolicy, transitionFuncs ...v2.DLPPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertDLPPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertDLPPolicy indicates an expected call of UpsertDLPPolicy.
func (mr *MockDLPPolicyClientMockRecorder) UpsertDLPPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertDLPPolicy", reflect.TypeOf((*MockDLPPolicyClient)(nil).UpsertDLPPolicy), varargs...)
}

// MockMulticlusterDLPPolicyClient is a mock of MulticlusterDLPPolicyClient interface.
type MockMulticlusterDLPPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterDLPPolicyClientMockRecorder
}

// MockMulticlusterDLPPolicyClientMockRecorder is the mock recorder for MockMulticlusterDLPPolicyClient.
type MockMulticlusterDLPPolicyClientMockRecorder struct {
	mock *MockMulticlusterDLPPolicyClient
}

// NewMockMulticlusterDLPPolicyClient creates a new mock instance.
func NewMockMulticlusterDLPPolicyClient(ctrl *gomock.Controller) *MockMulticlusterDLPPolicyClient {
	mock := &MockMulticlusterDLPPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterDLPPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterDLPPolicyClient) EXPECT() *MockMulticlusterDLPPolicyClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterDLPPolicyClient) Cluster(cluster string) (v2.DLPPolicyClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.DLPPolicyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterDLPPolicyClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterDLPPolicyClient)(nil).Cluster), cluster)
}
