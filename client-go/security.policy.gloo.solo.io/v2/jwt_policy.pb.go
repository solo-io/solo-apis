// Control access or route traffic based on verified claims in a JSON web token (JWT).
// JWTs follow an open standard for securely sharing information between a client and your apps.
// JWTs are commonly used to support stateless, simple, scalable, and interoperable authentication and authorization flows.
// For more information, see the [RFC 7519 JWT specification](https://datatracker.ietf.org/doc/html/rfc7519).
//
// JWT policies are applied at the route level.
// You can have multiple JWT providers in the same policy, or in different policies.
// Keep in mind that you cannot apply multiple JWT policies to the same route in a route table.
//
// **Examples**:
// The following example is a basic JWT policy with a local JWT issuer and inline public key.
// For more examples of using Gloo JWT policies, see the [JWT guides](https://docs.solo.io/gloo-gateway/latest/policies/jwt/).
//
// Sample JWT payload from the JWT provider:
// ```json
// {
//   "org": "solo-io",
//   "email": "user@solo.io",
//   "iss": "https://localhost",
//   "exp": 4804324736,
//   "iat": 1648651136
// }
// ```
//
// The following policy enables JWT authentication for the selected `httpbin` route.
// It adds the values of the `org` and `email` claims from the JWT payload to the `X-Org` and `X-Email` headers in the request, if present.
// It also checks requests by using the token found in the `X-Auth` header with the prefix `Bearer <token>`, or in a query parameter `auth_token=<token>`.
// Note that if a request has both the header and query parameter, both tokens must be valid for Gloo Gateway to accept the request.
//
// ```yaml
// apiVersion: security.policy.gloo.solo.io/v2
// kind: JWTPolicy
// metadata:
//   annotations:
//     cluster.solo.io/cluster: ""
//   name: jwt-policy
//   namespace: default
// spec:
//   applyToRoutes:
//   - route:
//       labels:
//         route: httpbin
//   config:
//     phase:
//       preAuthz: {}
//     providers:
//       provider1:
//         claimsToHeaders:
//         - append: true
//           claim: org
//           header: x-org
//         - append: true
//           claim: email
//           header: x-email
//         issuer: https://localhost
//         local:
//           inline: |-
//             -----BEGIN PUBLIC KEY-----
//             MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnknfKiIDREaE/vxu8rtz
//             oMaPop6rsiX7GANCRcqFks0j96Gb+UssKD8zJs2JBvEe4n0wNKVeLRbOctII+ZEO
//             G8b+Dqig/1ubq3xiGbDBbZqHiFKjFQVUnII3Un9VRtDcJdgaaPGHnhlPs79sJNgQ
//             e6AWJmfAasdT7i3MVEW7/dXcROiMRGapmxv+nQbKdoeiCJDULRdMSodhg/WJw2sH
//             LLVxh4fPSF7cRxj36Y9FKWcGUH+YKe7n4gufAeEsHk+tPBndymYpmcMjb6W9HrJO
//             39vvyMTjLAUyElCEfeMqCpFBCElhaGbF8ZncbV6vvDEkOxMX/m1TYhoJr1E2U8y/
//             NwIDAQAB
//             -----END PUBLIC KEY-----
//         tokenSource:
//           headers:
//           - name: X-Auth
//             prefix: 'Bearer '
//           queryParams:
//           - auth_token
// ```

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/policy/v2/security/jwt_policy.proto

package v2

import (
	reflect "reflect"
	sync "sync"

	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/solo-io/cue/encoding/protobuf/cue"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Decide whether to clear the route cache after the JWT filter.
type JWTPolicySpec_Config_ClearRouteCache int32

const (
	// The default behavior, which clears the route cache when the auth response is successful or if the JWT policy adds a claim in the 'claimsToHeader' field. This way, the gateway recomputes route matching, such as to route traffic based on the claims you add in the JWT policy.
	JWTPolicySpec_Config_AUTO JWTPolicySpec_Config_ClearRouteCache = 0
	// Set to false so that the route cache is not cleared after the JWT filter. This way, you can configure traffic rules based on routing details from both before and after the JWT filter.
	// For example, you might want to reject with a direct response any requests that send a header that is also set in the JWT policy's 'claimsToHeader' field.
	JWTPolicySpec_Config_FALSE JWTPolicySpec_Config_ClearRouteCache = 1
	// Set to true so that the route cache is always cleared after the JWT filter. This way, the gateway recomputes route matching, such as to route traffic based on the claims you add in the JWT policy.
	JWTPolicySpec_Config_TRUE JWTPolicySpec_Config_ClearRouteCache = 2
)

// Enum value maps for JWTPolicySpec_Config_ClearRouteCache.
var (
	JWTPolicySpec_Config_ClearRouteCache_name = map[int32]string{
		0: "AUTO",
		1: "FALSE",
		2: "TRUE",
	}
	JWTPolicySpec_Config_ClearRouteCache_value = map[string]int32{
		"AUTO":  0,
		"FALSE": 1,
		"TRUE":  2,
	}
)

func (x JWTPolicySpec_Config_ClearRouteCache) Enum() *JWTPolicySpec_Config_ClearRouteCache {
	p := new(JWTPolicySpec_Config_ClearRouteCache)
	*p = x
	return p
}

func (x JWTPolicySpec_Config_ClearRouteCache) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JWTPolicySpec_Config_ClearRouteCache) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_enumTypes[0].Descriptor()
}

func (JWTPolicySpec_Config_ClearRouteCache) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_enumTypes[0]
}

func (x JWTPolicySpec_Config_ClearRouteCache) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JWTPolicySpec_Config_ClearRouteCache.Descriptor instead.
func (JWTPolicySpec_Config_ClearRouteCache) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{0, 0, 0}
}

// Fill out the spec of the JWT policy to enable JWT authentication for routes.
type JWTPolicySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Select the routes where the policy will be applied.
	// If empty, the policy is not applied to any routes in the workspace.
	// If omitted, the policy applies to all routes in the workspace.
	ApplyToRoutes []*v2.RouteSelector `protobuf:"bytes,1,rep,name=apply_to_routes,json=applyToRoutes,proto3" json:"apply_to_routes,omitempty"`
	// The details of the JWT policy to apply to the selected routes.
	Config *JWTPolicySpec_Config `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *JWTPolicySpec) Reset() {
	*x = JWTPolicySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicySpec) ProtoMessage() {}

func (x *JWTPolicySpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicySpec.ProtoReflect.Descriptor instead.
func (*JWTPolicySpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{0}
}

func (x *JWTPolicySpec) GetApplyToRoutes() []*v2.RouteSelector {
	if x != nil {
		return x.ApplyToRoutes
	}
	return nil
}

func (x *JWTPolicySpec) GetConfig() *JWTPolicySpec_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

// The status of the policy after it is applied to your Gloo environment.Status
type JWTPolicyStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state and workspace conditions of the applied resource.
	Common *v2.Status `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	// The number of routes selected by the policy.
	NumSelectedRoutes uint32 `protobuf:"varint,2,opt,name=num_selected_routes,json=numSelectedRoutes,proto3" json:"num_selected_routes,omitempty"`
}

func (x *JWTPolicyStatus) Reset() {
	*x = JWTPolicyStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicyStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicyStatus) ProtoMessage() {}

func (x *JWTPolicyStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicyStatus.ProtoReflect.Descriptor instead.
func (*JWTPolicyStatus) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{1}
}

func (x *JWTPolicyStatus) GetCommon() *v2.Status {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *JWTPolicyStatus) GetNumSelectedRoutes() uint32 {
	if x != nil {
		return x.NumSelectedRoutes
	}
	return 0
}

// The report shows the resources that the policy selects after the policy is successfully applied.
type JWTPolicyReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the resource in each workspace that it exists in.
	Workspaces map[string]*v2.Report `protobuf:"bytes,1,rep,name=workspaces,proto3" json:"workspaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A list of references to all routes selected by the policy.
	SelectedRoutes []*v2.RouteReference `protobuf:"bytes,2,rep,name=selected_routes,json=selectedRoutes,proto3" json:"selected_routes,omitempty"`
}

func (x *JWTPolicyReport) Reset() {
	*x = JWTPolicyReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicyReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicyReport) ProtoMessage() {}

func (x *JWTPolicyReport) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicyReport.ProtoReflect.Descriptor instead.
func (*JWTPolicyReport) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{2}
}

func (x *JWTPolicyReport) GetWorkspaces() map[string]*v2.Report {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

func (x *JWTPolicyReport) GetSelectedRoutes() []*v2.RouteReference {
	if x != nil {
		return x.SelectedRoutes
	}
	return nil
}

// Configure the details of the JWT policy, including the provider, phase, matching claims or scopes, and other settings.
type JWTPolicySpec_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set up the provider for the JWT configuration.
	// You can have multiple providers in the same JWT policy, or create separate policies per provider.
	//
	// Note: You can name the providers to help you map the provider when viewing logs to debug.
	// However, the provider name does not affect the policy's behavior and cannot be used by other resources to select the policy.
	Providers map[string]*JWTPolicySpec_Config_Provider `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional: Set when to apply the JWT filter in the request chain,
	// either before (`preAuthz`) or after (`postAuthz`) authorization to have access to the JWT token.
	// If no phase is specified, defaults to `preAuthz`.
	Phase *v2.PrioritizedPhase `protobuf:"bytes,2,opt,name=phase,proto3" json:"phase,omitempty"`
	// Allow requests to succeed even if JWT authentication is missing or fails.
	// For example, you might apply multiple policies to your routes to require
	// JWT auth OR another method such as external auth. Set this value to "true"
	// to allow a failed JWT auth request to pass through to the other authentication
	// method. By default, this value is "false" so that requests that fail JWT
	// authentication then fail authorization immediately.
	AllowMissingOrFailed bool `protobuf:"varint,3,opt,name=allow_missing_or_failed,json=allowMissingOrFailed,proto3" json:"allow_missing_or_failed,omitempty"`
	// Optional: Decide whether to clear the route cache after the JWT filter. By clearing the route cache, the gateway recomputes route matching. This way, you can configure traffic rules after JWT auth, such as claim-based routing on cleared routes or direct response on cached routes.
	// Defaults to the 'AUTO' option.
	ClearRouteCache JWTPolicySpec_Config_ClearRouteCache `protobuf:"varint,4,opt,name=clear_route_cache,json=clearRouteCache,proto3,enum=security.policy.gloo.solo.io.JWTPolicySpec_Config_ClearRouteCache" json:"clear_route_cache,omitempty"`
	// Optional: A key-value list of claims to require for JWT authorization. The JWT must meet all of the claims to be allowed (logically AND'd together).
	// For each claim, you can specify values that must or must not be present.
	Claims []*JWTPolicySpec_Config_ClaimMatcher `protobuf:"bytes,5,rep,name=claims,proto3" json:"claims,omitempty"`
	// Optional: An unordered list of required JWT scopes. The JWT "scope" claim must have all of the listed scopes to be allowed (logically AND'd together).
	// Scopes typically come from an identity provider and are formatted similar to `"<product>:<permission>"` or `"is:<role>"`.
	// For more information, see the [IETF docs](https://datatracker.ietf.org/doc/html/rfc8693#name-scope-scopes-claim).
	//
	// For example, you might use this field to set `email` and `is:developer` as required scopes.
	// Then the scope claim in the JWT must have all of those required scopes, but could also have others.
	// JWTs with scopes such as `"scope":"email is:developer"` or `"scope":"email is:developer phone address"` would be allowed.
	// JWTs with only one of the required scopes, such as `"scope":"email address"` would not be allowed.
	//
	// If you want to set scopes that if present in the claim are not allowed (`notValues`),
	// or to allow a request to succeed with just one of many listed scopes (`email OR is:developer`),
	// use the claims field instead.
	// To skip scope validation, omit this value or leave the list empty.
	// Note that nested scopes (a scope with multiple sub scopes) are not supported at this time.
	RequiredScopes []string `protobuf:"bytes,6,rep,name=required_scopes,json=requiredScopes,proto3" json:"required_scopes,omitempty"`
}

func (x *JWTPolicySpec_Config) Reset() {
	*x = JWTPolicySpec_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicySpec_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicySpec_Config) ProtoMessage() {}

func (x *JWTPolicySpec_Config) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicySpec_Config.ProtoReflect.Descriptor instead.
func (*JWTPolicySpec_Config) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{0, 0}
}

func (x *JWTPolicySpec_Config) GetProviders() map[string]*JWTPolicySpec_Config_Provider {
	if x != nil {
		return x.Providers
	}
	return nil
}

func (x *JWTPolicySpec_Config) GetPhase() *v2.PrioritizedPhase {
	if x != nil {
		return x.Phase
	}
	return nil
}

func (x *JWTPolicySpec_Config) GetAllowMissingOrFailed() bool {
	if x != nil {
		return x.AllowMissingOrFailed
	}
	return false
}

func (x *JWTPolicySpec_Config) GetClearRouteCache() JWTPolicySpec_Config_ClearRouteCache {
	if x != nil {
		return x.ClearRouteCache
	}
	return JWTPolicySpec_Config_AUTO
}

func (x *JWTPolicySpec_Config) GetClaims() []*JWTPolicySpec_Config_ClaimMatcher {
	if x != nil {
		return x.Claims
	}
	return nil
}

func (x *JWTPolicySpec_Config) GetRequiredScopes() []string {
	if x != nil {
		return x.RequiredScopes
	}
	return nil
}

// Configure how to verify the details of a JWT, such as the issuer, source, audience, matching claims or scopes, and other settings.
type JWTPolicySpec_Config_Provider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional: The principal that issued the JWT, usually a URL or an email address.
	// If specified, the `iss` field in JWT token of the incoming request must match this field, or else the request is denied.
	// If omitted, the `iss` field in the JWT token is not checked.
	Issuer string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// Optional: A list of intended audiences for this JWT token.
	// If specified, a JWT token containing any of these `aud` field values is accepted.
	// If omitted, the `aud` field in the JWT token is not checked.
	Audiences []string `protobuf:"bytes,2,rep,name=audiences,proto3" json:"audiences,omitempty"`
	// Optional: Where to extract the JWT from the HTTP request.
	// If no explicit token source location is specified, the following default locations are tried in order:
	//
	// First, the Authorization header using the `Bearer ` prefix, such as: `Authorization: Bearer <token>`.
	//
	// Second, the `access_token` query parameter, such as: `https://<url>/path?access_token=<token>`.
	//
	// Gloo can verify multiple JWTs for a request.
	// Each JWT is extracted from the location that is specified per provider, or from the default locations previously described.
	// Note that if a single request contains multiple sources,
	// such as both a header and query parameter, then all tokens found in the request must be valid for the request to be accepted.
	// Configured fields are case sensitive and are matched verbatim.
	TokenSource *JWTPolicySpec_Config_Provider_TokenSource `protobuf:"bytes,3,opt,name=token_source,json=tokenSource,proto3" json:"token_source,omitempty"`
	// Required: Where to find the public keys of the current provider to verify the JWT.
	//
	// Types that are assignable to JwksSource:
	//
	//	*JWTPolicySpec_Config_Provider_Local
	//	*JWTPolicySpec_Config_Provider_Remote
	JwksSource isJWTPolicySpec_Config_Provider_JwksSource `protobuf_oneof:"jwks_source"`
	// Optional: Specify the claims from the JWT payload to copy to individual headers before forwarding the request to the upstream destination.
	// To copy the entire payload to a single header instead, use the OutputPayloadToHeader field.
	ClaimsToHeaders []*JWTPolicySpec_Config_Provider_ClaimsToHeader `protobuf:"bytes,6,rep,name=claims_to_headers,json=claimsToHeaders,proto3" json:"claims_to_headers,omitempty"`
	// Optional: Keep the JWT in the request post verification.
	KeepToken bool `protobuf:"varint,7,opt,name=keep_token,json=keepToken,proto3" json:"keep_token,omitempty"`
	// Optional: Verify time constraints, such as `exp` and `npf`. Default is 60s.
	// For information about the value format, see the [Google protocol buffer documentation](https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/u-int32-value).
	ClockSkewSeconds *wrappers.UInt32Value `protobuf:"bytes,8,opt,name=clock_skew_seconds,json=clockSkewSeconds,proto3" json:"clock_skew_seconds,omitempty"`
	// Optional: Copy the output of the JWT payload to a single header before forwarding the request to the upstream destination. The header is the name that you enter in this field.
	// The payload data is base64-encoded before forwarding.
	// If this field is omitted or empty, the payload is not forwarded with the request.
	// To send select claims in the payload in individual headers, use the ClaimsToHeaders field instead.
	OutputPayloadToHeader string `protobuf:"bytes,9,opt,name=output_payload_to_header,json=outputPayloadToHeader,proto3" json:"output_payload_to_header,omitempty"`
}

func (x *JWTPolicySpec_Config_Provider) Reset() {
	*x = JWTPolicySpec_Config_Provider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicySpec_Config_Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicySpec_Config_Provider) ProtoMessage() {}

func (x *JWTPolicySpec_Config_Provider) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicySpec_Config_Provider.ProtoReflect.Descriptor instead.
func (*JWTPolicySpec_Config_Provider) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *JWTPolicySpec_Config_Provider) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *JWTPolicySpec_Config_Provider) GetAudiences() []string {
	if x != nil {
		return x.Audiences
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider) GetTokenSource() *JWTPolicySpec_Config_Provider_TokenSource {
	if x != nil {
		return x.TokenSource
	}
	return nil
}

func (m *JWTPolicySpec_Config_Provider) GetJwksSource() isJWTPolicySpec_Config_Provider_JwksSource {
	if m != nil {
		return m.JwksSource
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider) GetLocal() *JWTPolicySpec_Config_Provider_LocalJWKS {
	if x, ok := x.GetJwksSource().(*JWTPolicySpec_Config_Provider_Local); ok {
		return x.Local
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider) GetRemote() *JWTPolicySpec_Config_Provider_RemoteJWKS {
	if x, ok := x.GetJwksSource().(*JWTPolicySpec_Config_Provider_Remote); ok {
		return x.Remote
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider) GetClaimsToHeaders() []*JWTPolicySpec_Config_Provider_ClaimsToHeader {
	if x != nil {
		return x.ClaimsToHeaders
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider) GetKeepToken() bool {
	if x != nil {
		return x.KeepToken
	}
	return false
}

func (x *JWTPolicySpec_Config_Provider) GetClockSkewSeconds() *wrappers.UInt32Value {
	if x != nil {
		return x.ClockSkewSeconds
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider) GetOutputPayloadToHeader() string {
	if x != nil {
		return x.OutputPayloadToHeader
	}
	return ""
}

type isJWTPolicySpec_Config_Provider_JwksSource interface {
	isJWTPolicySpec_Config_Provider_JwksSource()
}

type JWTPolicySpec_Config_Provider_Local struct {
	// Get the public keys to validate the JWT from a local source,
	// such as a Kubernetes secret or an inline, raw string JWKS.
	Local *JWTPolicySpec_Config_Provider_LocalJWKS `protobuf:"bytes,4,opt,name=local,proto3,oneof"`
}

type JWTPolicySpec_Config_Provider_Remote struct {
	// Get the public keys from a remote JSON Web Key Set (JWKS) server.
	// This server must be accessible from your cluster.
	Remote *JWTPolicySpec_Config_Provider_RemoteJWKS `protobuf:"bytes,5,opt,name=remote,proto3,oneof"`
}

func (*JWTPolicySpec_Config_Provider_Local) isJWTPolicySpec_Config_Provider_JwksSource() {}

func (*JWTPolicySpec_Config_Provider_Remote) isJWTPolicySpec_Config_Provider_JwksSource() {}

// Optionally configure a list of key-value claims for JWT authorization rules. The JWT must meet all of the claims to be allowed (logically AND'd together).
// For each claim, you can specify values that must or must not be present. If a claim has multiple supported values, any of these values is allowed (logically OR'd together).
// You can also use wildcards, such as `"*"` to allow any value, or for example `"*@solo.io"` to allow any `@solo.io` email. Nested claims are not supported at this time.
type JWTPolicySpec_Config_ClaimMatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the JWT claim's key.
	// [RFC 7519 spec](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1) reserves seven claims, and the [IANA JSON Web Token Claims](https://www.iana.org/assignments/jwt/jwt.xhtml#claims) outline many more registered claims to encourage interoperability across providers. Further, your OIDC provider might have custom claims, such as described in the [Auth0 docs](https://auth0.com/docs/get-started/apis/scopes/sample-use-cases-scopes-and-claims).
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Optional: A list of allowed values for the JWT claim. If a claim has multiple supported values, any of these values is allowed (logically OR'd together).
	// You can also use wildcards, such as `"*"` to allow any value or for example `"*@solo.io"` to allow any `@solo.io` email. Nested claims are not supported at this time.
	// Note: You must set at least one of "values" or "not_values".
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	// Optional: A list of values that are not allowed for the JWT claim. If a claim contains one of these values, the request is denied.
	// You can also use wildcards, such as `"*"` to deny any value, or for example `"*@solo.io"` to deny any `@solo.io` email.
	// Note: You must set at least one of "values" or "not_values".
	NotValues []string `protobuf:"bytes,3,rep,name=not_values,json=notValues,proto3" json:"not_values,omitempty"`
}

func (x *JWTPolicySpec_Config_ClaimMatcher) Reset() {
	*x = JWTPolicySpec_Config_ClaimMatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicySpec_Config_ClaimMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicySpec_Config_ClaimMatcher) ProtoMessage() {}

func (x *JWTPolicySpec_Config_ClaimMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicySpec_Config_ClaimMatcher.ProtoReflect.Descriptor instead.
func (*JWTPolicySpec_Config_ClaimMatcher) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *JWTPolicySpec_Config_ClaimMatcher) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *JWTPolicySpec_Config_ClaimMatcher) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *JWTPolicySpec_Config_ClaimMatcher) GetNotValues() []string {
	if x != nil {
		return x.NotValues
	}
	return nil
}

// Optional: Where to extract the JWT from the HTTP request.
//
// If omitted, defaults to the header `"Authorization: Bearer <token>"` or the query parameter `"access_token=<Token>"`.
// Note that if a request has both the header and query parameter, both tokens must be valid for Gloo Gateway to accept the request.
// Configured fields are case sensitive and are matched verbatim.
type JWTPolicySpec_Config_Provider_TokenSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Try to retrieve the token from these headers.
	Headers []*JWTPolicySpec_Config_Provider_TokenSourceFromHeader `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
	// Try to retrieve the token from these query parameters.
	QueryParams []string `protobuf:"bytes,2,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty"`
}

func (x *JWTPolicySpec_Config_Provider_TokenSource) Reset() {
	*x = JWTPolicySpec_Config_Provider_TokenSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicySpec_Config_Provider_TokenSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicySpec_Config_Provider_TokenSource) ProtoMessage() {}

func (x *JWTPolicySpec_Config_Provider_TokenSource) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicySpec_Config_Provider_TokenSource.ProtoReflect.Descriptor instead.
func (*JWTPolicySpec_Config_Provider_TokenSource) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *JWTPolicySpec_Config_Provider_TokenSource) GetHeaders() []*JWTPolicySpec_Config_Provider_TokenSourceFromHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider_TokenSource) GetQueryParams() []string {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

// Get the public keys to validate the JWT from a local source,
// such as a Kubernetes secret or inline configuration.
type JWTPolicySpec_Config_Provider_LocalJWKS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Specifier:
	//
	//	*JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef_
	//	*JWTPolicySpec_Config_Provider_LocalJWKS_Inline
	Specifier isJWTPolicySpec_Config_Provider_LocalJWKS_Specifier `protobuf_oneof:"specifier"`
}

func (x *JWTPolicySpec_Config_Provider_LocalJWKS) Reset() {
	*x = JWTPolicySpec_Config_Provider_LocalJWKS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicySpec_Config_Provider_LocalJWKS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicySpec_Config_Provider_LocalJWKS) ProtoMessage() {}

func (x *JWTPolicySpec_Config_Provider_LocalJWKS) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicySpec_Config_Provider_LocalJWKS.ProtoReflect.Descriptor instead.
func (*JWTPolicySpec_Config_Provider_LocalJWKS) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (m *JWTPolicySpec_Config_Provider_LocalJWKS) GetSpecifier() isJWTPolicySpec_Config_Provider_LocalJWKS_Specifier {
	if m != nil {
		return m.Specifier
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider_LocalJWKS) GetSecretRef() *JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef {
	if x, ok := x.GetSpecifier().(*JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef_); ok {
		return x.SecretRef
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider_LocalJWKS) GetInline() string {
	if x, ok := x.GetSpecifier().(*JWTPolicySpec_Config_Provider_LocalJWKS_Inline); ok {
		return x.Inline
	}
	return ""
}

type isJWTPolicySpec_Config_Provider_LocalJWKS_Specifier interface {
	isJWTPolicySpec_Config_Provider_LocalJWKS_Specifier()
}

type JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef_ struct {
	// Refer to a secret that has the PEM-formatted public key.
	SecretRef *JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef `protobuf:"bytes,1,opt,name=secret_ref,json=secretRef,proto3,oneof"`
}

type JWTPolicySpec_Config_Provider_LocalJWKS_Inline struct {
	// Provide an inline PEM-formatted public key in the configuration of this JWT policy.
	Inline string `protobuf:"bytes,2,opt,name=inline,proto3,oneof"`
}

func (*JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef_) isJWTPolicySpec_Config_Provider_LocalJWKS_Specifier() {
}

func (*JWTPolicySpec_Config_Provider_LocalJWKS_Inline) isJWTPolicySpec_Config_Provider_LocalJWKS_Specifier() {
}

// Get the public keys from a remote JSON Web Key Set (JWKS) server.
// This server must be accessible from your cluster.
type JWTPolicySpec_Config_Provider_RemoteJWKS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL to access the remote destination for JWKS server.
	// This value sets the host and path in the request.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The destination that represents the JWKS server.
	// If the JWKS server runs in your cluster, the destination can be a Kubernetes Service or Gloo VirtualDestination.
	// If the JWKS server is a remote URL, the destination must be a Gloo ExternalService.
	DestinationRef *v2.DestinationReference `protobuf:"bytes,2,opt,name=destination_ref,json=destinationRef,proto3" json:"destination_ref,omitempty"`
	// Duration after which the cached JWKS expires.
	//
	// If omitted, defaults to 5 minutes.
	// For information about the value format, see the [Google protocol buffer documentation](https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/duration).
	CacheDuration *duration.Duration `protobuf:"bytes,3,opt,name=cache_duration,json=cacheDuration,proto3" json:"cache_duration,omitempty"`
	// Set the maximum duration in seconds that a response can take to arrive upon request.
	//
	// If omitted, defaults to 5 seconds.
	// For information about the value format, see the [Google protocol buffer documentation](https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/duration).
	Timeout *duration.Duration `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Fetch the JWKS asynchronously in the main thread before activating the listener.
	// Then, the fetched JWKS can be used by all worker threads.
	//
	// When set to false (default):
	// The JWKS is fetched on-demand when requests come. The first few requests are paused until the JWKS is fetched.
	// Because the JWKS cache is per worker thread, each worker thread fetches its own JWKS.
	// You might leave async fetching disabled in simple environments with minimal traffic or resources,
	// during testing to simplify debugging issues, or when you want more control over when and how the JWKS is fetched.
	//
	// When set to true:
	// The JWKS is fetched in the main thread before activating the listener.
	// Then, the JWKS can be used by all worker threads. Each worker thread doesn't need to fetch its own.
	// This way, the JWKS is ready when requests come.
	// You might enable async fetching to reduce latency, improve responsiveness, and have consistent JWKS across worker threads
	// such as in multi-threaded, concurrent, and large-scale environments.
	EnableAsyncFetch bool `protobuf:"varint,5,opt,name=enable_async_fetch,json=enableAsyncFetch,proto3" json:"enable_async_fetch,omitempty"`
}

func (x *JWTPolicySpec_Config_Provider_RemoteJWKS) Reset() {
	*x = JWTPolicySpec_Config_Provider_RemoteJWKS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicySpec_Config_Provider_RemoteJWKS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicySpec_Config_Provider_RemoteJWKS) ProtoMessage() {}

func (x *JWTPolicySpec_Config_Provider_RemoteJWKS) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicySpec_Config_Provider_RemoteJWKS.ProtoReflect.Descriptor instead.
func (*JWTPolicySpec_Config_Provider_RemoteJWKS) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *JWTPolicySpec_Config_Provider_RemoteJWKS) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *JWTPolicySpec_Config_Provider_RemoteJWKS) GetDestinationRef() *v2.DestinationReference {
	if x != nil {
		return x.DestinationRef
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider_RemoteJWKS) GetCacheDuration() *duration.Duration {
	if x != nil {
		return x.CacheDuration
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider_RemoteJWKS) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider_RemoteJWKS) GetEnableAsyncFetch() bool {
	if x != nil {
		return x.EnableAsyncFetch
	}
	return false
}

// Specify the claims from the JWT payload to copy to individual headers before forwarding the request to the upstream destination.
type JWTPolicySpec_Config_Provider_ClaimsToHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Claim name, such as `"sub"`.
	Claim string `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim,omitempty"`
	// The request header to copy the claim to, such as `"x-sub"`.
	Header string `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// If the header already exists, append this copied value to it (true), or overwrite the existing value (false).
	Append bool `protobuf:"varint,3,opt,name=append,proto3" json:"append,omitempty"`
}

func (x *JWTPolicySpec_Config_Provider_ClaimsToHeader) Reset() {
	*x = JWTPolicySpec_Config_Provider_ClaimsToHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicySpec_Config_Provider_ClaimsToHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicySpec_Config_Provider_ClaimsToHeader) ProtoMessage() {}

func (x *JWTPolicySpec_Config_Provider_ClaimsToHeader) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicySpec_Config_Provider_ClaimsToHeader.ProtoReflect.Descriptor instead.
func (*JWTPolicySpec_Config_Provider_ClaimsToHeader) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{0, 0, 0, 3}
}

func (x *JWTPolicySpec_Config_Provider_ClaimsToHeader) GetClaim() string {
	if x != nil {
		return x.Claim
	}
	return ""
}

func (x *JWTPolicySpec_Config_Provider_ClaimsToHeader) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *JWTPolicySpec_Config_Provider_ClaimsToHeader) GetAppend() bool {
	if x != nil {
		return x.Append
	}
	return false
}

// Describes how to retrieve the JWT from a header.
type JWTPolicySpec_Config_Provider_TokenSourceFromHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of header, such as `"Authorization"`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The prefix before the token, such as `"Bearer "` (with a space before the token).
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *JWTPolicySpec_Config_Provider_TokenSourceFromHeader) Reset() {
	*x = JWTPolicySpec_Config_Provider_TokenSourceFromHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicySpec_Config_Provider_TokenSourceFromHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicySpec_Config_Provider_TokenSourceFromHeader) ProtoMessage() {}

func (x *JWTPolicySpec_Config_Provider_TokenSourceFromHeader) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicySpec_Config_Provider_TokenSourceFromHeader.ProtoReflect.Descriptor instead.
func (*JWTPolicySpec_Config_Provider_TokenSourceFromHeader) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *JWTPolicySpec_Config_Provider_TokenSourceFromHeader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JWTPolicySpec_Config_Provider_TokenSourceFromHeader) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Refer to the secret explicitly by the cluster and namespace where the secret is located.
	ObjectRef *v2.ObjectReference `protobuf:"bytes,1,opt,name=objectRef,proto3" json:"objectRef,omitempty"`
	// Refer to the key of data that has the PEM-formatted public key within the specified secret.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef) Reset() {
	*x = JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef) ProtoMessage() {}

func (x *JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef.ProtoReflect.Descriptor instead.
func (*JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

func (x *JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef) GetObjectRef() *v2.ObjectReference {
	if x != nil {
		return x.ObjectRef
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

var File_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDesc = []byte{
	0x0a, 0x5c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x6a, 0x77,
	0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x1a, 0x1f, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x63, 0x75, 0x65, 0x2f, 0x63, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x65,
	0x78, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f,
	0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x53, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f,
	0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d,
	0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67,
	0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf1, 0x12, 0x0a, 0x0d,
	0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4a, 0x0a,
	0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x54, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xc7, 0x11, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x5f, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a,
	0x65, 0x64, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x6f, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x6e, 0x0a, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x42, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x52, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x1a, 0xef, 0x0b, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x0c, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4a, 0x57, 0x4b, 0x53, 0x48, 0x00, 0x52, 0x05,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x60, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4a, 0x57, 0x4b, 0x53, 0x48, 0x00, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x76, 0x0a, 0x11, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0f,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4a,
	0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6b, 0x65, 0x77, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x6b, 0x65, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x1a, 0xd8, 0x01, 0x0a, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x6c, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x66, 0x72,
	0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0x87,
	0x02, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4a, 0x57, 0x4b, 0x53, 0x12, 0x70, 0x0a, 0x0a,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4f, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x4a, 0x57, 0x4b, 0x53, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65,
	0x66, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x66, 0x12, 0x18,
	0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x61, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x12, 0x42, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x97, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x4a, 0x57, 0x4b, 0x53, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x52, 0x0a, 0x0f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x40, 0x0a,
	0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x1a, 0x56, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x54, 0x6f, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x6a, 0x77,
	0x6b, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x79, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x51, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4a, 0x57, 0x54, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x0c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x30, 0x0a,
	0x0f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41,
	0x4c, 0x53, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x55, 0x45, 0x10, 0x02, 0x22,
	0x76, 0x0a, 0x0f, 0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x0f, 0x4a, 0x57, 0x54, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5d, 0x0a, 0x0a, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4a,
	0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x5a, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x5d, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d,
	0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x32, 0xc0, 0xf5, 0x04, 0x01, 0xb8, 0xf5, 0x04, 0x01, 0xd0,
	0xf5, 0x04, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescData = file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_goTypes = []interface{}{
	(JWTPolicySpec_Config_ClearRouteCache)(0),                   // 0: security.policy.gloo.solo.io.JWTPolicySpec.Config.ClearRouteCache
	(*JWTPolicySpec)(nil),                                       // 1: security.policy.gloo.solo.io.JWTPolicySpec
	(*JWTPolicyStatus)(nil),                                     // 2: security.policy.gloo.solo.io.JWTPolicyStatus
	(*JWTPolicyReport)(nil),                                     // 3: security.policy.gloo.solo.io.JWTPolicyReport
	(*JWTPolicySpec_Config)(nil),                                // 4: security.policy.gloo.solo.io.JWTPolicySpec.Config
	(*JWTPolicySpec_Config_Provider)(nil),                       // 5: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider
	nil,                                                         // 6: security.policy.gloo.solo.io.JWTPolicySpec.Config.ProvidersEntry
	(*JWTPolicySpec_Config_ClaimMatcher)(nil),                   // 7: security.policy.gloo.solo.io.JWTPolicySpec.Config.ClaimMatcher
	(*JWTPolicySpec_Config_Provider_TokenSource)(nil),           // 8: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.TokenSource
	(*JWTPolicySpec_Config_Provider_LocalJWKS)(nil),             // 9: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.LocalJWKS
	(*JWTPolicySpec_Config_Provider_RemoteJWKS)(nil),            // 10: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.RemoteJWKS
	(*JWTPolicySpec_Config_Provider_ClaimsToHeader)(nil),        // 11: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.ClaimsToHeader
	(*JWTPolicySpec_Config_Provider_TokenSourceFromHeader)(nil), // 12: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.TokenSource.fromHeader
	(*JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef)(nil),   // 13: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.LocalJWKS.SecretRef
	nil,                             // 14: security.policy.gloo.solo.io.JWTPolicyReport.WorkspacesEntry
	(*v2.RouteSelector)(nil),        // 15: common.gloo.solo.io.RouteSelector
	(*v2.Status)(nil),               // 16: common.gloo.solo.io.Status
	(*v2.RouteReference)(nil),       // 17: common.gloo.solo.io.RouteReference
	(*v2.PrioritizedPhase)(nil),     // 18: common.gloo.solo.io.PrioritizedPhase
	(*wrappers.UInt32Value)(nil),    // 19: google.protobuf.UInt32Value
	(*v2.DestinationReference)(nil), // 20: common.gloo.solo.io.DestinationReference
	(*duration.Duration)(nil),       // 21: google.protobuf.Duration
	(*v2.ObjectReference)(nil),      // 22: common.gloo.solo.io.ObjectReference
	(*v2.Report)(nil),               // 23: common.gloo.solo.io.Report
}
var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_depIdxs = []int32{
	15, // 0: security.policy.gloo.solo.io.JWTPolicySpec.apply_to_routes:type_name -> common.gloo.solo.io.RouteSelector
	4,  // 1: security.policy.gloo.solo.io.JWTPolicySpec.config:type_name -> security.policy.gloo.solo.io.JWTPolicySpec.Config
	16, // 2: security.policy.gloo.solo.io.JWTPolicyStatus.common:type_name -> common.gloo.solo.io.Status
	14, // 3: security.policy.gloo.solo.io.JWTPolicyReport.workspaces:type_name -> security.policy.gloo.solo.io.JWTPolicyReport.WorkspacesEntry
	17, // 4: security.policy.gloo.solo.io.JWTPolicyReport.selected_routes:type_name -> common.gloo.solo.io.RouteReference
	6,  // 5: security.policy.gloo.solo.io.JWTPolicySpec.Config.providers:type_name -> security.policy.gloo.solo.io.JWTPolicySpec.Config.ProvidersEntry
	18, // 6: security.policy.gloo.solo.io.JWTPolicySpec.Config.phase:type_name -> common.gloo.solo.io.PrioritizedPhase
	0,  // 7: security.policy.gloo.solo.io.JWTPolicySpec.Config.clear_route_cache:type_name -> security.policy.gloo.solo.io.JWTPolicySpec.Config.ClearRouteCache
	7,  // 8: security.policy.gloo.solo.io.JWTPolicySpec.Config.claims:type_name -> security.policy.gloo.solo.io.JWTPolicySpec.Config.ClaimMatcher
	8,  // 9: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.token_source:type_name -> security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.TokenSource
	9,  // 10: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.local:type_name -> security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.LocalJWKS
	10, // 11: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.remote:type_name -> security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.RemoteJWKS
	11, // 12: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.claims_to_headers:type_name -> security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.ClaimsToHeader
	19, // 13: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.clock_skew_seconds:type_name -> google.protobuf.UInt32Value
	5,  // 14: security.policy.gloo.solo.io.JWTPolicySpec.Config.ProvidersEntry.value:type_name -> security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider
	12, // 15: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.TokenSource.headers:type_name -> security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.TokenSource.fromHeader
	13, // 16: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.LocalJWKS.secret_ref:type_name -> security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.LocalJWKS.SecretRef
	20, // 17: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.RemoteJWKS.destination_ref:type_name -> common.gloo.solo.io.DestinationReference
	21, // 18: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.RemoteJWKS.cache_duration:type_name -> google.protobuf.Duration
	21, // 19: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.RemoteJWKS.timeout:type_name -> google.protobuf.Duration
	22, // 20: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.LocalJWKS.SecretRef.objectRef:type_name -> common.gloo.solo.io.ObjectReference
	23, // 21: security.policy.gloo.solo.io.JWTPolicyReport.WorkspacesEntry.value:type_name -> common.gloo.solo.io.Report
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_init()
}
func file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_init() {
	if File_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicyStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicyReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicySpec_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicySpec_Config_Provider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicySpec_Config_ClaimMatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicySpec_Config_Provider_TokenSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicySpec_Config_Provider_LocalJWKS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicySpec_Config_Provider_RemoteJWKS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicySpec_Config_Provider_ClaimsToHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicySpec_Config_Provider_TokenSourceFromHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*JWTPolicySpec_Config_Provider_Local)(nil),
		(*JWTPolicySpec_Config_Provider_Remote)(nil),
	}
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef_)(nil),
		(*JWTPolicySpec_Config_Provider_LocalJWKS_Inline)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto = out.File
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_policy_v2_security_jwt_policy_proto_depIdxs = nil
}
