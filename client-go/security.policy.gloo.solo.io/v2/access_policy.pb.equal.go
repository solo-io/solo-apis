// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/policy/v2/security/access_policy.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *AccessPolicySpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*AccessPolicySpec)
	if !ok {
		that2, ok := that.(AccessPolicySpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetApplyToDestinations()) != len(target.GetApplyToDestinations()) {
		return false
	}
	for idx, v := range m.GetApplyToDestinations() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetApplyToDestinations()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetApplyToDestinations()[idx]) {
				return false
			}
		}

	}

	if len(m.GetApplyToWorkloads()) != len(target.GetApplyToWorkloads()) {
		return false
	}
	for idx, v := range m.GetApplyToWorkloads() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetApplyToWorkloads()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetApplyToWorkloads()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetConfig(), target.GetConfig()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *AccessPolicyStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*AccessPolicyStatus)
	if !ok {
		that2, ok := that.(AccessPolicyStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetCommon()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCommon()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCommon(), target.GetCommon()) {
			return false
		}
	}

	if m.GetNumSelectedDestinationPorts() != target.GetNumSelectedDestinationPorts() {
		return false
	}

	return true
}

// Equal function
func (m *AccessPolicyReport) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*AccessPolicyReport)
	if !ok {
		that2, ok := that.(AccessPolicyReport)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetWorkspaces()) != len(target.GetWorkspaces()) {
		return false
	}
	for k, v := range m.GetWorkspaces() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetWorkspaces()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetWorkspaces()[k]) {
				return false
			}
		}

	}

	if len(m.GetSelectedDestinationPorts()) != len(target.GetSelectedDestinationPorts()) {
		return false
	}
	for idx, v := range m.GetSelectedDestinationPorts() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetSelectedDestinationPorts()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetSelectedDestinationPorts()[idx]) {
				return false
			}
		}

	}

	if len(m.GetAllowedServiceAccounts()) != len(target.GetAllowedServiceAccounts()) {
		return false
	}
	for idx, v := range m.GetAllowedServiceAccounts() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetAllowedServiceAccounts()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetAllowedServiceAccounts()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *AccessPolicySpec_NamespaceWorkloadSelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*AccessPolicySpec_NamespaceWorkloadSelector)
	if !ok {
		that2, ok := that.(AccessPolicySpec_NamespaceWorkloadSelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetSelector()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSelector()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSelector(), target.GetSelector()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *AccessPolicySpec_Config) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*AccessPolicySpec_Config)
	if !ok {
		that2, ok := that.(AccessPolicySpec_Config)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetAuthn()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAuthn()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAuthn(), target.GetAuthn()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetAuthz()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAuthz()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAuthz(), target.GetAuthz()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetEnforcementLayers()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEnforcementLayers()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEnforcementLayers(), target.GetEnforcementLayers()) {
			return false
		}
	}

	if len(m.GetAuthzList()) != len(target.GetAuthzList()) {
		return false
	}
	for idx, v := range m.GetAuthzList() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetAuthzList()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetAuthzList()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *AccessPolicySpec_NamespaceWorkloadSelector_ObjectSelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*AccessPolicySpec_NamespaceWorkloadSelector_ObjectSelector)
	if !ok {
		that2, ok := that.(AccessPolicySpec_NamespaceWorkloadSelector_ObjectSelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetLabels()) != len(target.GetLabels()) {
		return false
	}
	for k, v := range m.GetLabels() {

		if strings.Compare(v, target.GetLabels()[k]) != 0 {
			return false
		}

	}

	if strings.Compare(m.GetNamespace(), target.GetNamespace()) != 0 {
		return false
	}

	if strings.Compare(m.GetCluster(), target.GetCluster()) != 0 {
		return false
	}

	if strings.Compare(m.GetWorkspace(), target.GetWorkspace()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *AccessPolicySpec_Config_Authentication) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*AccessPolicySpec_Config_Authentication)
	if !ok {
		that2, ok := that.(AccessPolicySpec_Config_Authentication)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetTlsMode() != target.GetTlsMode() {
		return false
	}

	return true
}

// Equal function
func (m *AccessPolicySpec_Config_Authorization) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*AccessPolicySpec_Config_Authorization)
	if !ok {
		that2, ok := that.(AccessPolicySpec_Config_Authorization)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetAllowedClients()) != len(target.GetAllowedClients()) {
		return false
	}
	for idx, v := range m.GetAllowedClients() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetAllowedClients()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetAllowedClients()[idx]) {
				return false
			}
		}

	}

	if len(m.GetAllowedPaths()) != len(target.GetAllowedPaths()) {
		return false
	}
	for idx, v := range m.GetAllowedPaths() {

		if strings.Compare(v, target.GetAllowedPaths()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetAllowedMethods()) != len(target.GetAllowedMethods()) {
		return false
	}
	for idx, v := range m.GetAllowedMethods() {

		if strings.Compare(v, target.GetAllowedMethods()[idx]) != 0 {
			return false
		}

	}

	if h, ok := interface{}(m.GetMatch()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMatch()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMatch(), target.GetMatch()) {
			return false
		}
	}

	if len(m.GetAllowedIpBlocks()) != len(target.GetAllowedIpBlocks()) {
		return false
	}
	for idx, v := range m.GetAllowedIpBlocks() {

		if strings.Compare(v, target.GetAllowedIpBlocks()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetAllowedRemoteIpBlocks()) != len(target.GetAllowedRemoteIpBlocks()) {
		return false
	}
	for idx, v := range m.GetAllowedRemoteIpBlocks() {

		if strings.Compare(v, target.GetAllowedRemoteIpBlocks()[idx]) != 0 {
			return false
		}

	}

	if m.GetDryRun() != target.GetDryRun() {
		return false
	}

	return true
}

// Equal function
func (m *AccessPolicySpec_Config_Authorization_MatchSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*AccessPolicySpec_Config_Authorization_MatchSpec)
	if !ok {
		that2, ok := that.(AccessPolicySpec_Config_Authorization_MatchSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetRequest()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRequest()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRequest(), target.GetRequest()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *AccessPolicySpec_Config_Authorization_MatchSpec_RequestSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*AccessPolicySpec_Config_Authorization_MatchSpec_RequestSpec)
	if !ok {
		that2, ok := that.(AccessPolicySpec_Config_Authorization_MatchSpec_RequestSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetHeaders()) != len(target.GetHeaders()) {
		return false
	}
	for k, v := range m.GetHeaders() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetHeaders()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetHeaders()[k]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *AccessPolicySpec_Config_Authorization_MatchSpec_RequestSpec_HeaderValues) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*AccessPolicySpec_Config_Authorization_MatchSpec_RequestSpec_HeaderValues)
	if !ok {
		that2, ok := that.(AccessPolicySpec_Config_Authorization_MatchSpec_RequestSpec_HeaderValues)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetValues()) != len(target.GetValues()) {
		return false
	}
	for idx, v := range m.GetValues() {

		if strings.Compare(v, target.GetValues()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetNotValues()) != len(target.GetNotValues()) {
		return false
	}
	for idx, v := range m.GetNotValues() {

		if strings.Compare(v, target.GetNotValues()[idx]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *AccessPolicyReport_IdentityReference) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*AccessPolicyReport_IdentityReference)
	if !ok {
		that2, ok := that.(AccessPolicyReport_IdentityReference)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetIdentityIndex() != target.GetIdentityIndex() {
		return false
	}

	if h, ok := interface{}(m.GetServiceAccount()).(equality.Equalizer); ok {
		if !h.Equal(target.GetServiceAccount()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetServiceAccount(), target.GetServiceAccount()) {
			return false
		}
	}

	if m.GetAuthzIndex() != target.GetAuthzIndex() {
		return false
	}

	return true
}
