// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/policy/v2/security/access_policy.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *AccessPolicySpec) Clone() proto.Message {
	var target *AccessPolicySpec
	if m == nil {
		return target
	}
	target = &AccessPolicySpec{}

	if m.GetApplyToDestinations() != nil {
		target.ApplyToDestinations = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.DestinationSelector, len(m.GetApplyToDestinations()))
		for idx, v := range m.GetApplyToDestinations() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ApplyToDestinations[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.DestinationSelector)
			} else {
				target.ApplyToDestinations[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.DestinationSelector)
			}

		}
	}

	if m.GetApplyToWorkloads() != nil {
		target.ApplyToWorkloads = make([]*AccessPolicySpec_NamespaceWorkloadSelector, len(m.GetApplyToWorkloads()))
		for idx, v := range m.GetApplyToWorkloads() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ApplyToWorkloads[idx] = h.Clone().(*AccessPolicySpec_NamespaceWorkloadSelector)
			} else {
				target.ApplyToWorkloads[idx] = proto.Clone(v).(*AccessPolicySpec_NamespaceWorkloadSelector)
			}

		}
	}

	if h, ok := interface{}(m.GetConfig()).(clone.Cloner); ok {
		target.Config = h.Clone().(*AccessPolicySpec_Config)
	} else {
		target.Config = proto.Clone(m.GetConfig()).(*AccessPolicySpec_Config)
	}

	return target
}

// Clone function
func (m *AccessPolicyStatus) Clone() proto.Message {
	var target *AccessPolicyStatus
	if m == nil {
		return target
	}
	target = &AccessPolicyStatus{}

	if h, ok := interface{}(m.GetCommon()).(clone.Cloner); ok {
		target.Common = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	} else {
		target.Common = proto.Clone(m.GetCommon()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	}

	target.NumSelectedDestinationPorts = m.GetNumSelectedDestinationPorts()

	target.NumSelectedNamespaces = m.GetNumSelectedNamespaces()

	target.NumAllowedServiceAccounts = m.GetNumAllowedServiceAccounts()

	return target
}

// Clone function
func (m *AccessPolicyReport) Clone() proto.Message {
	var target *AccessPolicyReport
	if m == nil {
		return target
	}
	target = &AccessPolicyReport{}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			}

		}
	}

	if m.GetSelectedDestinationPorts() != nil {
		target.SelectedDestinationPorts = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.DestinationReference, len(m.GetSelectedDestinationPorts()))
		for idx, v := range m.GetSelectedDestinationPorts() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SelectedDestinationPorts[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.DestinationReference)
			} else {
				target.SelectedDestinationPorts[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.DestinationReference)
			}

		}
	}

	if m.GetAllowedServiceAccounts() != nil {
		target.AllowedServiceAccounts = make([]*AccessPolicyReport_IdentityReference, len(m.GetAllowedServiceAccounts()))
		for idx, v := range m.GetAllowedServiceAccounts() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.AllowedServiceAccounts[idx] = h.Clone().(*AccessPolicyReport_IdentityReference)
			} else {
				target.AllowedServiceAccounts[idx] = proto.Clone(v).(*AccessPolicyReport_IdentityReference)
			}

		}
	}

	if m.GetSelectedNamespaces() != nil {
		target.SelectedNamespaces = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference, len(m.GetSelectedNamespaces()))
		for idx, v := range m.GetSelectedNamespaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SelectedNamespaces[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			} else {
				target.SelectedNamespaces[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			}

		}
	}

	return target
}

// Clone function
func (m *AccessPolicySpec_NamespaceWorkloadSelector) Clone() proto.Message {
	var target *AccessPolicySpec_NamespaceWorkloadSelector
	if m == nil {
		return target
	}
	target = &AccessPolicySpec_NamespaceWorkloadSelector{}

	if h, ok := interface{}(m.GetSelector()).(clone.Cloner); ok {
		target.Selector = h.Clone().(*AccessPolicySpec_NamespaceWorkloadSelector_ObjectSelector)
	} else {
		target.Selector = proto.Clone(m.GetSelector()).(*AccessPolicySpec_NamespaceWorkloadSelector_ObjectSelector)
	}

	return target
}

// Clone function
func (m *AccessPolicySpec_Config) Clone() proto.Message {
	var target *AccessPolicySpec_Config
	if m == nil {
		return target
	}
	target = &AccessPolicySpec_Config{}

	if h, ok := interface{}(m.GetAuthn()).(clone.Cloner); ok {
		target.Authn = h.Clone().(*AccessPolicySpec_Config_Authentication)
	} else {
		target.Authn = proto.Clone(m.GetAuthn()).(*AccessPolicySpec_Config_Authentication)
	}

	if h, ok := interface{}(m.GetAuthz()).(clone.Cloner); ok {
		target.Authz = h.Clone().(*AccessPolicySpec_Config_Authorization)
	} else {
		target.Authz = proto.Clone(m.GetAuthz()).(*AccessPolicySpec_Config_Authorization)
	}

	if h, ok := interface{}(m.GetEnforcementLayers()).(clone.Cloner); ok {
		target.EnforcementLayers = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.EnforcementLayers)
	} else {
		target.EnforcementLayers = proto.Clone(m.GetEnforcementLayers()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.EnforcementLayers)
	}

	if m.GetAuthzList() != nil {
		target.AuthzList = make([]*AccessPolicySpec_Config_Authorization, len(m.GetAuthzList()))
		for idx, v := range m.GetAuthzList() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.AuthzList[idx] = h.Clone().(*AccessPolicySpec_Config_Authorization)
			} else {
				target.AuthzList[idx] = proto.Clone(v).(*AccessPolicySpec_Config_Authorization)
			}

		}
	}

	return target
}

// Clone function
func (m *AccessPolicySpec_NamespaceWorkloadSelector_ObjectSelector) Clone() proto.Message {
	var target *AccessPolicySpec_NamespaceWorkloadSelector_ObjectSelector
	if m == nil {
		return target
	}
	target = &AccessPolicySpec_NamespaceWorkloadSelector_ObjectSelector{}

	if m.GetLabels() != nil {
		target.Labels = make(map[string]string, len(m.GetLabels()))
		for k, v := range m.GetLabels() {

			target.Labels[k] = v

		}
	}

	target.Namespace = m.GetNamespace()

	target.Cluster = m.GetCluster()

	target.Workspace = m.GetWorkspace()

	return target
}

// Clone function
func (m *AccessPolicySpec_Config_Authentication) Clone() proto.Message {
	var target *AccessPolicySpec_Config_Authentication
	if m == nil {
		return target
	}
	target = &AccessPolicySpec_Config_Authentication{}

	target.TlsMode = m.GetTlsMode()

	return target
}

// Clone function
func (m *AccessPolicySpec_Config_Authorization) Clone() proto.Message {
	var target *AccessPolicySpec_Config_Authorization
	if m == nil {
		return target
	}
	target = &AccessPolicySpec_Config_Authorization{}

	if m.GetAllowedClients() != nil {
		target.AllowedClients = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.IdentitySelector, len(m.GetAllowedClients()))
		for idx, v := range m.GetAllowedClients() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.AllowedClients[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.IdentitySelector)
			} else {
				target.AllowedClients[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.IdentitySelector)
			}

		}
	}

	if m.GetAllowedPaths() != nil {
		target.AllowedPaths = make([]string, len(m.GetAllowedPaths()))
		for idx, v := range m.GetAllowedPaths() {

			target.AllowedPaths[idx] = v

		}
	}

	if m.GetAllowedMethods() != nil {
		target.AllowedMethods = make([]string, len(m.GetAllowedMethods()))
		for idx, v := range m.GetAllowedMethods() {

			target.AllowedMethods[idx] = v

		}
	}

	if h, ok := interface{}(m.GetMatch()).(clone.Cloner); ok {
		target.Match = h.Clone().(*AccessPolicySpec_Config_Authorization_MatchSpec)
	} else {
		target.Match = proto.Clone(m.GetMatch()).(*AccessPolicySpec_Config_Authorization_MatchSpec)
	}

	if m.GetAllowedIpBlocks() != nil {
		target.AllowedIpBlocks = make([]string, len(m.GetAllowedIpBlocks()))
		for idx, v := range m.GetAllowedIpBlocks() {

			target.AllowedIpBlocks[idx] = v

		}
	}

	if m.GetAllowedRemoteIpBlocks() != nil {
		target.AllowedRemoteIpBlocks = make([]string, len(m.GetAllowedRemoteIpBlocks()))
		for idx, v := range m.GetAllowedRemoteIpBlocks() {

			target.AllowedRemoteIpBlocks[idx] = v

		}
	}

	target.DryRun = m.GetDryRun()

	return target
}

// Clone function
func (m *AccessPolicySpec_Config_Authorization_MatchSpec) Clone() proto.Message {
	var target *AccessPolicySpec_Config_Authorization_MatchSpec
	if m == nil {
		return target
	}
	target = &AccessPolicySpec_Config_Authorization_MatchSpec{}

	if h, ok := interface{}(m.GetRequest()).(clone.Cloner); ok {
		target.Request = h.Clone().(*AccessPolicySpec_Config_Authorization_MatchSpec_RequestSpec)
	} else {
		target.Request = proto.Clone(m.GetRequest()).(*AccessPolicySpec_Config_Authorization_MatchSpec_RequestSpec)
	}

	return target
}

// Clone function
func (m *AccessPolicySpec_Config_Authorization_MatchSpec_RequestSpec) Clone() proto.Message {
	var target *AccessPolicySpec_Config_Authorization_MatchSpec_RequestSpec
	if m == nil {
		return target
	}
	target = &AccessPolicySpec_Config_Authorization_MatchSpec_RequestSpec{}

	if m.GetHeaders() != nil {
		target.Headers = make(map[string]*AccessPolicySpec_Config_Authorization_MatchSpec_RequestSpec_HeaderValues, len(m.GetHeaders()))
		for k, v := range m.GetHeaders() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Headers[k] = h.Clone().(*AccessPolicySpec_Config_Authorization_MatchSpec_RequestSpec_HeaderValues)
			} else {
				target.Headers[k] = proto.Clone(v).(*AccessPolicySpec_Config_Authorization_MatchSpec_RequestSpec_HeaderValues)
			}

		}
	}

	return target
}

// Clone function
func (m *AccessPolicySpec_Config_Authorization_MatchSpec_RequestSpec_HeaderValues) Clone() proto.Message {
	var target *AccessPolicySpec_Config_Authorization_MatchSpec_RequestSpec_HeaderValues
	if m == nil {
		return target
	}
	target = &AccessPolicySpec_Config_Authorization_MatchSpec_RequestSpec_HeaderValues{}

	if m.GetValues() != nil {
		target.Values = make([]string, len(m.GetValues()))
		for idx, v := range m.GetValues() {

			target.Values[idx] = v

		}
	}

	if m.GetNotValues() != nil {
		target.NotValues = make([]string, len(m.GetNotValues()))
		for idx, v := range m.GetNotValues() {

			target.NotValues[idx] = v

		}
	}

	return target
}

// Clone function
func (m *AccessPolicyReport_IdentityReference) Clone() proto.Message {
	var target *AccessPolicyReport_IdentityReference
	if m == nil {
		return target
	}
	target = &AccessPolicyReport_IdentityReference{}

	target.IdentityIndex = m.GetIdentityIndex()

	if h, ok := interface{}(m.GetServiceAccount()).(clone.Cloner); ok {
		target.ServiceAccount = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
	} else {
		target.ServiceAccount = proto.Clone(m.GetServiceAccount()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
	}

	target.AuthzIndex = m.GetAuthzIndex()

	return target
}
