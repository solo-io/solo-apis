// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v2alpha1 is a generated GoMock package.
package mock_v2alpha1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	v2alpha1 "github.com/solo-io/solo-apis/client-go/internal.gloo.solo.io/v2alpha1"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v2alpha1.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2alpha1.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// SpireRegistrationEntries mocks base method.
func (m *MockClientset) SpireRegistrationEntries() v2alpha1.SpireRegistrationEntryClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpireRegistrationEntries")
	ret0, _ := ret[0].(v2alpha1.SpireRegistrationEntryClient)
	return ret0
}

// SpireRegistrationEntries indicates an expected call of SpireRegistrationEntries.
func (mr *MockClientsetMockRecorder) SpireRegistrationEntries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpireRegistrationEntries", reflect.TypeOf((*MockClientset)(nil).SpireRegistrationEntries))
}

// MockSpireRegistrationEntryReader is a mock of SpireRegistrationEntryReader interface.
type MockSpireRegistrationEntryReader struct {
	ctrl     *gomock.Controller
	recorder *MockSpireRegistrationEntryReaderMockRecorder
}

// MockSpireRegistrationEntryReaderMockRecorder is the mock recorder for MockSpireRegistrationEntryReader.
type MockSpireRegistrationEntryReaderMockRecorder struct {
	mock *MockSpireRegistrationEntryReader
}

// NewMockSpireRegistrationEntryReader creates a new mock instance.
func NewMockSpireRegistrationEntryReader(ctrl *gomock.Controller) *MockSpireRegistrationEntryReader {
	mock := &MockSpireRegistrationEntryReader{ctrl: ctrl}
	mock.recorder = &MockSpireRegistrationEntryReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpireRegistrationEntryReader) EXPECT() *MockSpireRegistrationEntryReaderMockRecorder {
	return m.recorder
}

// GetSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryReader) GetSpireRegistrationEntry(ctx context.Context, key client.ObjectKey) (*v2alpha1.SpireRegistrationEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpireRegistrationEntry", ctx, key)
	ret0, _ := ret[0].(*v2alpha1.SpireRegistrationEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpireRegistrationEntry indicates an expected call of GetSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryReaderMockRecorder) GetSpireRegistrationEntry(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryReader)(nil).GetSpireRegistrationEntry), ctx, key)
}

// ListSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryReader) ListSpireRegistrationEntry(ctx context.Context, opts ...client.ListOption) (*v2alpha1.SpireRegistrationEntryList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(*v2alpha1.SpireRegistrationEntryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpireRegistrationEntry indicates an expected call of ListSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryReaderMockRecorder) ListSpireRegistrationEntry(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryReader)(nil).ListSpireRegistrationEntry), varargs...)
}

// MockSpireRegistrationEntryWriter is a mock of SpireRegistrationEntryWriter interface.
type MockSpireRegistrationEntryWriter struct {
	ctrl     *gomock.Controller
	recorder *MockSpireRegistrationEntryWriterMockRecorder
}

// MockSpireRegistrationEntryWriterMockRecorder is the mock recorder for MockSpireRegistrationEntryWriter.
type MockSpireRegistrationEntryWriterMockRecorder struct {
	mock *MockSpireRegistrationEntryWriter
}

// NewMockSpireRegistrationEntryWriter creates a new mock instance.
func NewMockSpireRegistrationEntryWriter(ctrl *gomock.Controller) *MockSpireRegistrationEntryWriter {
	mock := &MockSpireRegistrationEntryWriter{ctrl: ctrl}
	mock.recorder = &MockSpireRegistrationEntryWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpireRegistrationEntryWriter) EXPECT() *MockSpireRegistrationEntryWriterMockRecorder {
	return m.recorder
}

// CreateSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryWriter) CreateSpireRegistrationEntry(ctx context.Context, obj *v2alpha1.SpireRegistrationEntry, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSpireRegistrationEntry indicates an expected call of CreateSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryWriterMockRecorder) CreateSpireRegistrationEntry(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryWriter)(nil).CreateSpireRegistrationEntry), varargs...)
}

// DeleteAllOfSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryWriter) DeleteAllOfSpireRegistrationEntry(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfSpireRegistrationEntry indicates an expected call of DeleteAllOfSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryWriterMockRecorder) DeleteAllOfSpireRegistrationEntry(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryWriter)(nil).DeleteAllOfSpireRegistrationEntry), varargs...)
}

// DeleteSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryWriter) DeleteSpireRegistrationEntry(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSpireRegistrationEntry indicates an expected call of DeleteSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryWriterMockRecorder) DeleteSpireRegistrationEntry(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryWriter)(nil).DeleteSpireRegistrationEntry), varargs...)
}

// PatchSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryWriter) PatchSpireRegistrationEntry(ctx context.Context, obj *v2alpha1.SpireRegistrationEntry, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchSpireRegistrationEntry indicates an expected call of PatchSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryWriterMockRecorder) PatchSpireRegistrationEntry(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryWriter)(nil).PatchSpireRegistrationEntry), varargs...)
}

// UpdateSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryWriter) UpdateSpireRegistrationEntry(ctx context.Context, obj *v2alpha1.SpireRegistrationEntry, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpireRegistrationEntry indicates an expected call of UpdateSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryWriterMockRecorder) UpdateSpireRegistrationEntry(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryWriter)(nil).UpdateSpireRegistrationEntry), varargs...)
}

// UpsertSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryWriter) UpsertSpireRegistrationEntry(ctx context.Context, obj *v2alpha1.SpireRegistrationEntry, transitionFuncs ...v2alpha1.SpireRegistrationEntryTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertSpireRegistrationEntry indicates an expected call of UpsertSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryWriterMockRecorder) UpsertSpireRegistrationEntry(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryWriter)(nil).UpsertSpireRegistrationEntry), varargs...)
}

// MockSpireRegistrationEntryStatusWriter is a mock of SpireRegistrationEntryStatusWriter interface.
type MockSpireRegistrationEntryStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockSpireRegistrationEntryStatusWriterMockRecorder
}

// MockSpireRegistrationEntryStatusWriterMockRecorder is the mock recorder for MockSpireRegistrationEntryStatusWriter.
type MockSpireRegistrationEntryStatusWriterMockRecorder struct {
	mock *MockSpireRegistrationEntryStatusWriter
}

// NewMockSpireRegistrationEntryStatusWriter creates a new mock instance.
func NewMockSpireRegistrationEntryStatusWriter(ctrl *gomock.Controller) *MockSpireRegistrationEntryStatusWriter {
	mock := &MockSpireRegistrationEntryStatusWriter{ctrl: ctrl}
	mock.recorder = &MockSpireRegistrationEntryStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpireRegistrationEntryStatusWriter) EXPECT() *MockSpireRegistrationEntryStatusWriterMockRecorder {
	return m.recorder
}

// PatchSpireRegistrationEntryStatus mocks base method.
func (m *MockSpireRegistrationEntryStatusWriter) PatchSpireRegistrationEntryStatus(ctx context.Context, obj *v2alpha1.SpireRegistrationEntry, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchSpireRegistrationEntryStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchSpireRegistrationEntryStatus indicates an expected call of PatchSpireRegistrationEntryStatus.
func (mr *MockSpireRegistrationEntryStatusWriterMockRecorder) PatchSpireRegistrationEntryStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSpireRegistrationEntryStatus", reflect.TypeOf((*MockSpireRegistrationEntryStatusWriter)(nil).PatchSpireRegistrationEntryStatus), varargs...)
}

// UpdateSpireRegistrationEntryStatus mocks base method.
func (m *MockSpireRegistrationEntryStatusWriter) UpdateSpireRegistrationEntryStatus(ctx context.Context, obj *v2alpha1.SpireRegistrationEntry, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSpireRegistrationEntryStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpireRegistrationEntryStatus indicates an expected call of UpdateSpireRegistrationEntryStatus.
func (mr *MockSpireRegistrationEntryStatusWriterMockRecorder) UpdateSpireRegistrationEntryStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpireRegistrationEntryStatus", reflect.TypeOf((*MockSpireRegistrationEntryStatusWriter)(nil).UpdateSpireRegistrationEntryStatus), varargs...)
}

// MockSpireRegistrationEntryClient is a mock of SpireRegistrationEntryClient interface.
type MockSpireRegistrationEntryClient struct {
	ctrl     *gomock.Controller
	recorder *MockSpireRegistrationEntryClientMockRecorder
}

// MockSpireRegistrationEntryClientMockRecorder is the mock recorder for MockSpireRegistrationEntryClient.
type MockSpireRegistrationEntryClientMockRecorder struct {
	mock *MockSpireRegistrationEntryClient
}

// NewMockSpireRegistrationEntryClient creates a new mock instance.
func NewMockSpireRegistrationEntryClient(ctrl *gomock.Controller) *MockSpireRegistrationEntryClient {
	mock := &MockSpireRegistrationEntryClient{ctrl: ctrl}
	mock.recorder = &MockSpireRegistrationEntryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpireRegistrationEntryClient) EXPECT() *MockSpireRegistrationEntryClientMockRecorder {
	return m.recorder
}

// CreateSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryClient) CreateSpireRegistrationEntry(ctx context.Context, obj *v2alpha1.SpireRegistrationEntry, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSpireRegistrationEntry indicates an expected call of CreateSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryClientMockRecorder) CreateSpireRegistrationEntry(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryClient)(nil).CreateSpireRegistrationEntry), varargs...)
}

// DeleteAllOfSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryClient) DeleteAllOfSpireRegistrationEntry(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfSpireRegistrationEntry indicates an expected call of DeleteAllOfSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryClientMockRecorder) DeleteAllOfSpireRegistrationEntry(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryClient)(nil).DeleteAllOfSpireRegistrationEntry), varargs...)
}

// DeleteSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryClient) DeleteSpireRegistrationEntry(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSpireRegistrationEntry indicates an expected call of DeleteSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryClientMockRecorder) DeleteSpireRegistrationEntry(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryClient)(nil).DeleteSpireRegistrationEntry), varargs...)
}

// GetSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryClient) GetSpireRegistrationEntry(ctx context.Context, key client.ObjectKey) (*v2alpha1.SpireRegistrationEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpireRegistrationEntry", ctx, key)
	ret0, _ := ret[0].(*v2alpha1.SpireRegistrationEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpireRegistrationEntry indicates an expected call of GetSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryClientMockRecorder) GetSpireRegistrationEntry(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryClient)(nil).GetSpireRegistrationEntry), ctx, key)
}

// ListSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryClient) ListSpireRegistrationEntry(ctx context.Context, opts ...client.ListOption) (*v2alpha1.SpireRegistrationEntryList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(*v2alpha1.SpireRegistrationEntryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpireRegistrationEntry indicates an expected call of ListSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryClientMockRecorder) ListSpireRegistrationEntry(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryClient)(nil).ListSpireRegistrationEntry), varargs...)
}

// PatchSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryClient) PatchSpireRegistrationEntry(ctx context.Context, obj *v2alpha1.SpireRegistrationEntry, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchSpireRegistrationEntry indicates an expected call of PatchSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryClientMockRecorder) PatchSpireRegistrationEntry(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryClient)(nil).PatchSpireRegistrationEntry), varargs...)
}

// PatchSpireRegistrationEntryStatus mocks base method.
func (m *MockSpireRegistrationEntryClient) PatchSpireRegistrationEntryStatus(ctx context.Context, obj *v2alpha1.SpireRegistrationEntry, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchSpireRegistrationEntryStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchSpireRegistrationEntryStatus indicates an expected call of PatchSpireRegistrationEntryStatus.
func (mr *MockSpireRegistrationEntryClientMockRecorder) PatchSpireRegistrationEntryStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSpireRegistrationEntryStatus", reflect.TypeOf((*MockSpireRegistrationEntryClient)(nil).PatchSpireRegistrationEntryStatus), varargs...)
}

// UpdateSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryClient) UpdateSpireRegistrationEntry(ctx context.Context, obj *v2alpha1.SpireRegistrationEntry, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpireRegistrationEntry indicates an expected call of UpdateSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryClientMockRecorder) UpdateSpireRegistrationEntry(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryClient)(nil).UpdateSpireRegistrationEntry), varargs...)
}

// UpdateSpireRegistrationEntryStatus mocks base method.
func (m *MockSpireRegistrationEntryClient) UpdateSpireRegistrationEntryStatus(ctx context.Context, obj *v2alpha1.SpireRegistrationEntry, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSpireRegistrationEntryStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpireRegistrationEntryStatus indicates an expected call of UpdateSpireRegistrationEntryStatus.
func (mr *MockSpireRegistrationEntryClientMockRecorder) UpdateSpireRegistrationEntryStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpireRegistrationEntryStatus", reflect.TypeOf((*MockSpireRegistrationEntryClient)(nil).UpdateSpireRegistrationEntryStatus), varargs...)
}

// UpsertSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryClient) UpsertSpireRegistrationEntry(ctx context.Context, obj *v2alpha1.SpireRegistrationEntry, transitionFuncs ...v2alpha1.SpireRegistrationEntryTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertSpireRegistrationEntry indicates an expected call of UpsertSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryClientMockRecorder) UpsertSpireRegistrationEntry(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryClient)(nil).UpsertSpireRegistrationEntry), varargs...)
}

// MockMulticlusterSpireRegistrationEntryClient is a mock of MulticlusterSpireRegistrationEntryClient interface.
type MockMulticlusterSpireRegistrationEntryClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterSpireRegistrationEntryClientMockRecorder
}

// MockMulticlusterSpireRegistrationEntryClientMockRecorder is the mock recorder for MockMulticlusterSpireRegistrationEntryClient.
type MockMulticlusterSpireRegistrationEntryClientMockRecorder struct {
	mock *MockMulticlusterSpireRegistrationEntryClient
}

// NewMockMulticlusterSpireRegistrationEntryClient creates a new mock instance.
func NewMockMulticlusterSpireRegistrationEntryClient(ctrl *gomock.Controller) *MockMulticlusterSpireRegistrationEntryClient {
	mock := &MockMulticlusterSpireRegistrationEntryClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterSpireRegistrationEntryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterSpireRegistrationEntryClient) EXPECT() *MockMulticlusterSpireRegistrationEntryClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterSpireRegistrationEntryClient) Cluster(cluster string) (v2alpha1.SpireRegistrationEntryClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2alpha1.SpireRegistrationEntryClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterSpireRegistrationEntryClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterSpireRegistrationEntryClient)(nil).Cluster), cluster)
}
