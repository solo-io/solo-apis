// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"

	v2alpha1 "github.com/solo-io/solo-apis/client-go/internal.gloo.solo.io/v2alpha1"
	controller "github.com/solo-io/solo-apis/client-go/internal.gloo.solo.io/v2alpha1/controller"
)

// MockMulticlusterSpireRegistrationEntryReconciler is a mock of MulticlusterSpireRegistrationEntryReconciler interface.
type MockMulticlusterSpireRegistrationEntryReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterSpireRegistrationEntryReconcilerMockRecorder
}

// MockMulticlusterSpireRegistrationEntryReconcilerMockRecorder is the mock recorder for MockMulticlusterSpireRegistrationEntryReconciler.
type MockMulticlusterSpireRegistrationEntryReconcilerMockRecorder struct {
	mock *MockMulticlusterSpireRegistrationEntryReconciler
}

// NewMockMulticlusterSpireRegistrationEntryReconciler creates a new mock instance.
func NewMockMulticlusterSpireRegistrationEntryReconciler(ctrl *gomock.Controller) *MockMulticlusterSpireRegistrationEntryReconciler {
	mock := &MockMulticlusterSpireRegistrationEntryReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterSpireRegistrationEntryReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterSpireRegistrationEntryReconciler) EXPECT() *MockMulticlusterSpireRegistrationEntryReconcilerMockRecorder {
	return m.recorder
}

// ReconcileSpireRegistrationEntry mocks base method.
func (m *MockMulticlusterSpireRegistrationEntryReconciler) ReconcileSpireRegistrationEntry(clusterName string, obj *v2alpha1.SpireRegistrationEntry) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileSpireRegistrationEntry", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileSpireRegistrationEntry indicates an expected call of ReconcileSpireRegistrationEntry.
func (mr *MockMulticlusterSpireRegistrationEntryReconcilerMockRecorder) ReconcileSpireRegistrationEntry(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileSpireRegistrationEntry", reflect.TypeOf((*MockMulticlusterSpireRegistrationEntryReconciler)(nil).ReconcileSpireRegistrationEntry), clusterName, obj)
}

// MockMulticlusterSpireRegistrationEntryDeletionReconciler is a mock of MulticlusterSpireRegistrationEntryDeletionReconciler interface.
type MockMulticlusterSpireRegistrationEntryDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterSpireRegistrationEntryDeletionReconcilerMockRecorder
}

// MockMulticlusterSpireRegistrationEntryDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterSpireRegistrationEntryDeletionReconciler.
type MockMulticlusterSpireRegistrationEntryDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterSpireRegistrationEntryDeletionReconciler
}

// NewMockMulticlusterSpireRegistrationEntryDeletionReconciler creates a new mock instance.
func NewMockMulticlusterSpireRegistrationEntryDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterSpireRegistrationEntryDeletionReconciler {
	mock := &MockMulticlusterSpireRegistrationEntryDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterSpireRegistrationEntryDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterSpireRegistrationEntryDeletionReconciler) EXPECT() *MockMulticlusterSpireRegistrationEntryDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileSpireRegistrationEntryDeletion mocks base method.
func (m *MockMulticlusterSpireRegistrationEntryDeletionReconciler) ReconcileSpireRegistrationEntryDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileSpireRegistrationEntryDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileSpireRegistrationEntryDeletion indicates an expected call of ReconcileSpireRegistrationEntryDeletion.
func (mr *MockMulticlusterSpireRegistrationEntryDeletionReconcilerMockRecorder) ReconcileSpireRegistrationEntryDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileSpireRegistrationEntryDeletion", reflect.TypeOf((*MockMulticlusterSpireRegistrationEntryDeletionReconciler)(nil).ReconcileSpireRegistrationEntryDeletion), clusterName, req)
}

// MockMulticlusterSpireRegistrationEntryReconcileLoop is a mock of MulticlusterSpireRegistrationEntryReconcileLoop interface.
type MockMulticlusterSpireRegistrationEntryReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterSpireRegistrationEntryReconcileLoopMockRecorder
}

// MockMulticlusterSpireRegistrationEntryReconcileLoopMockRecorder is the mock recorder for MockMulticlusterSpireRegistrationEntryReconcileLoop.
type MockMulticlusterSpireRegistrationEntryReconcileLoopMockRecorder struct {
	mock *MockMulticlusterSpireRegistrationEntryReconcileLoop
}

// NewMockMulticlusterSpireRegistrationEntryReconcileLoop creates a new mock instance.
func NewMockMulticlusterSpireRegistrationEntryReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterSpireRegistrationEntryReconcileLoop {
	mock := &MockMulticlusterSpireRegistrationEntryReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterSpireRegistrationEntryReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterSpireRegistrationEntryReconcileLoop) EXPECT() *MockMulticlusterSpireRegistrationEntryReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterSpireRegistrationEntryReconciler mocks base method.
func (m *MockMulticlusterSpireRegistrationEntryReconcileLoop) AddMulticlusterSpireRegistrationEntryReconciler(ctx context.Context, rec controller.MulticlusterSpireRegistrationEntryReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterSpireRegistrationEntryReconciler", varargs...)
}

// AddMulticlusterSpireRegistrationEntryReconciler indicates an expected call of AddMulticlusterSpireRegistrationEntryReconciler.
func (mr *MockMulticlusterSpireRegistrationEntryReconcileLoopMockRecorder) AddMulticlusterSpireRegistrationEntryReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterSpireRegistrationEntryReconciler", reflect.TypeOf((*MockMulticlusterSpireRegistrationEntryReconcileLoop)(nil).AddMulticlusterSpireRegistrationEntryReconciler), varargs...)
}
