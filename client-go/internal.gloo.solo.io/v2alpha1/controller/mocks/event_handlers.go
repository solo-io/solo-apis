// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go
//
// Generated by this command:
//
//	mockgen -source ./event_handlers.go -destination mocks/event_handlers.go
//

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"

	v2alpha1 "github.com/solo-io/solo-apis/client-go/internal.gloo.solo.io/v2alpha1"
	controller "github.com/solo-io/solo-apis/client-go/internal.gloo.solo.io/v2alpha1/controller"
)

// MockSpireRegistrationEntryEventHandler is a mock of SpireRegistrationEntryEventHandler interface.
type MockSpireRegistrationEntryEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSpireRegistrationEntryEventHandlerMockRecorder
}

// MockSpireRegistrationEntryEventHandlerMockRecorder is the mock recorder for MockSpireRegistrationEntryEventHandler.
type MockSpireRegistrationEntryEventHandlerMockRecorder struct {
	mock *MockSpireRegistrationEntryEventHandler
}

// NewMockSpireRegistrationEntryEventHandler creates a new mock instance.
func NewMockSpireRegistrationEntryEventHandler(ctrl *gomock.Controller) *MockSpireRegistrationEntryEventHandler {
	mock := &MockSpireRegistrationEntryEventHandler{ctrl: ctrl}
	mock.recorder = &MockSpireRegistrationEntryEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpireRegistrationEntryEventHandler) EXPECT() *MockSpireRegistrationEntryEventHandlerMockRecorder {
	return m.recorder
}

// CreateSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryEventHandler) CreateSpireRegistrationEntry(obj *v2alpha1.SpireRegistrationEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSpireRegistrationEntry", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSpireRegistrationEntry indicates an expected call of CreateSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryEventHandlerMockRecorder) CreateSpireRegistrationEntry(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryEventHandler)(nil).CreateSpireRegistrationEntry), obj)
}

// DeleteSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryEventHandler) DeleteSpireRegistrationEntry(obj *v2alpha1.SpireRegistrationEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSpireRegistrationEntry", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSpireRegistrationEntry indicates an expected call of DeleteSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryEventHandlerMockRecorder) DeleteSpireRegistrationEntry(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryEventHandler)(nil).DeleteSpireRegistrationEntry), obj)
}

// GenericSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryEventHandler) GenericSpireRegistrationEntry(obj *v2alpha1.SpireRegistrationEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericSpireRegistrationEntry", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericSpireRegistrationEntry indicates an expected call of GenericSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryEventHandlerMockRecorder) GenericSpireRegistrationEntry(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryEventHandler)(nil).GenericSpireRegistrationEntry), obj)
}

// UpdateSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryEventHandler) UpdateSpireRegistrationEntry(old, new *v2alpha1.SpireRegistrationEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpireRegistrationEntry", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpireRegistrationEntry indicates an expected call of UpdateSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryEventHandlerMockRecorder) UpdateSpireRegistrationEntry(old, new any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryEventHandler)(nil).UpdateSpireRegistrationEntry), old, new)
}

// MockSpireRegistrationEntryEventWatcher is a mock of SpireRegistrationEntryEventWatcher interface.
type MockSpireRegistrationEntryEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockSpireRegistrationEntryEventWatcherMockRecorder
}

// MockSpireRegistrationEntryEventWatcherMockRecorder is the mock recorder for MockSpireRegistrationEntryEventWatcher.
type MockSpireRegistrationEntryEventWatcherMockRecorder struct {
	mock *MockSpireRegistrationEntryEventWatcher
}

// NewMockSpireRegistrationEntryEventWatcher creates a new mock instance.
func NewMockSpireRegistrationEntryEventWatcher(ctrl *gomock.Controller) *MockSpireRegistrationEntryEventWatcher {
	mock := &MockSpireRegistrationEntryEventWatcher{ctrl: ctrl}
	mock.recorder = &MockSpireRegistrationEntryEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpireRegistrationEntryEventWatcher) EXPECT() *MockSpireRegistrationEntryEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockSpireRegistrationEntryEventWatcher) AddEventHandler(ctx context.Context, h controller.SpireRegistrationEntryEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockSpireRegistrationEntryEventWatcherMockRecorder) AddEventHandler(ctx, h any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockSpireRegistrationEntryEventWatcher)(nil).AddEventHandler), varargs...)
}
