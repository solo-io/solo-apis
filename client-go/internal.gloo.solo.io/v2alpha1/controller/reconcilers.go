// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	internal_gloo_solo_io_v2alpha1 "github.com/solo-io/solo-apis/client-go/internal.gloo.solo.io/v2alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the SpireRegistrationEntry Resource.
// implemented by the user
type SpireRegistrationEntryReconciler interface {
	ReconcileSpireRegistrationEntry(obj *internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry) (reconcile.Result, error)
}

// Reconcile deletion events for the SpireRegistrationEntry Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type SpireRegistrationEntryDeletionReconciler interface {
	ReconcileSpireRegistrationEntryDeletion(req reconcile.Request) error
}

type SpireRegistrationEntryReconcilerFuncs struct {
	OnReconcileSpireRegistrationEntry         func(obj *internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry) (reconcile.Result, error)
	OnReconcileSpireRegistrationEntryDeletion func(req reconcile.Request) error
}

func (f *SpireRegistrationEntryReconcilerFuncs) ReconcileSpireRegistrationEntry(obj *internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry) (reconcile.Result, error) {
	if f.OnReconcileSpireRegistrationEntry == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileSpireRegistrationEntry(obj)
}

func (f *SpireRegistrationEntryReconcilerFuncs) ReconcileSpireRegistrationEntryDeletion(req reconcile.Request) error {
	if f.OnReconcileSpireRegistrationEntryDeletion == nil {
		return nil
	}
	return f.OnReconcileSpireRegistrationEntryDeletion(req)
}

// Reconcile and finalize the SpireRegistrationEntry Resource
// implemented by the user
type SpireRegistrationEntryFinalizer interface {
	SpireRegistrationEntryReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	SpireRegistrationEntryFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeSpireRegistrationEntry(obj *internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry) error
}

type SpireRegistrationEntryReconcileLoop interface {
	RunSpireRegistrationEntryReconciler(ctx context.Context, rec SpireRegistrationEntryReconciler, predicates ...predicate.Predicate) error
}

type spireRegistrationEntryReconcileLoop struct {
	loop reconcile.Loop
}

func NewSpireRegistrationEntryReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) SpireRegistrationEntryReconcileLoop {
	return &spireRegistrationEntryReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry{}, options),
	}
}

func (c *spireRegistrationEntryReconcileLoop) RunSpireRegistrationEntryReconciler(ctx context.Context, reconciler SpireRegistrationEntryReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericSpireRegistrationEntryReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(SpireRegistrationEntryFinalizer); ok {
		reconcilerWrapper = genericSpireRegistrationEntryFinalizer{
			genericSpireRegistrationEntryReconciler: genericReconciler,
			finalizingReconciler:                    finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericSpireRegistrationEntryHandler implements a generic reconcile.Reconciler
type genericSpireRegistrationEntryReconciler struct {
	reconciler SpireRegistrationEntryReconciler
}

func (r genericSpireRegistrationEntryReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: SpireRegistrationEntry handler received event for %T", object)
	}
	return r.reconciler.ReconcileSpireRegistrationEntry(obj)
}

func (r genericSpireRegistrationEntryReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(SpireRegistrationEntryDeletionReconciler); ok {
		return deletionReconciler.ReconcileSpireRegistrationEntryDeletion(request)
	}
	return nil
}

// genericSpireRegistrationEntryFinalizer implements a generic reconcile.FinalizingReconciler
type genericSpireRegistrationEntryFinalizer struct {
	genericSpireRegistrationEntryReconciler
	finalizingReconciler SpireRegistrationEntryFinalizer
}

func (r genericSpireRegistrationEntryFinalizer) FinalizerName() string {
	return r.finalizingReconciler.SpireRegistrationEntryFinalizerName()
}

func (r genericSpireRegistrationEntryFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry)
	if !ok {
		return errors.Errorf("internal error: SpireRegistrationEntry handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeSpireRegistrationEntry(obj)
}
