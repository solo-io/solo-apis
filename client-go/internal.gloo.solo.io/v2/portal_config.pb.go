// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/internal/v2/portal_config.proto

package v2

import (
	reflect "reflect"
	sync "sync"

	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	v21 "github.com/solo-io/solo-apis/client-go/apimanagement.gloo.solo.io/v2"
	v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PortalConfigSpec_Unit int32

const (
	PortalConfigSpec_UNKNOWN PortalConfigSpec_Unit = 0
	PortalConfigSpec_SECOND  PortalConfigSpec_Unit = 1
	PortalConfigSpec_MINUTE  PortalConfigSpec_Unit = 2
	PortalConfigSpec_HOUR    PortalConfigSpec_Unit = 3
	PortalConfigSpec_DAY     PortalConfigSpec_Unit = 4
)

// Enum value maps for PortalConfigSpec_Unit.
var (
	PortalConfigSpec_Unit_name = map[int32]string{
		0: "UNKNOWN",
		1: "SECOND",
		2: "MINUTE",
		3: "HOUR",
		4: "DAY",
	}
	PortalConfigSpec_Unit_value = map[string]int32{
		"UNKNOWN": 0,
		"SECOND":  1,
		"MINUTE":  2,
		"HOUR":    3,
		"DAY":     4,
	}
)

func (x PortalConfigSpec_Unit) Enum() *PortalConfigSpec_Unit {
	p := new(PortalConfigSpec_Unit)
	*p = x
	return p
}

func (x PortalConfigSpec_Unit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortalConfigSpec_Unit) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_enumTypes[0].Descriptor()
}

func (PortalConfigSpec_Unit) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_enumTypes[0]
}

func (x PortalConfigSpec_Unit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortalConfigSpec_Unit.Descriptor instead.
func (PortalConfigSpec_Unit) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDescGZIP(), []int{0, 0}
}

// PortalConfig is a internal representation of the user facing Portal resource.
// It is used to provide configuration information for a single Portal backend.
// The PortalConfig contains a list of all API resources that are exposed by the Portal,
// the associated usage plans for each API, and all usage plans available
// across the Portal.
type PortalConfigSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Portal level metadata configured by the user in the user facing Portal resource as a JSON value.
	// For information about the value format, see the [Google protocol buffer documentation](https://protobuf.dev/reference/protobuf/google.protobuf/#value).
	//
	// +kubebuilder:validation:Type=value
	PortalCustomMetadata *_struct.Value `protobuf:"bytes,1,opt,name=portal_custom_metadata,json=portalCustomMetadata,proto3" json:"portal_custom_metadata,omitempty"`
	// The list of API resources that are exposed by the Portal.
	Apis []*PortalConfigSpec_API `protobuf:"bytes,2,rep,name=apis,proto3" json:"apis,omitempty"`
	// The list of usage plans that are available across the Portal.
	UsagePlans []*PortalConfigSpec_UsagePlan `protobuf:"bytes,3,rep,name=usage_plans,json=usagePlans,proto3" json:"usage_plans,omitempty"`
	// Reference to the Portal resource that this PortalConfig resource is derived from.
	PortalRef *v2.ObjectReference `protobuf:"bytes,4,opt,name=portal_ref,json=portalRef,proto3" json:"portal_ref,omitempty"`
	// The domains on which this Portal will be served. The Host header received by the
	// Portal Web App will be matched to one of these domains in order to determine which Portal will be served.
	Domains []string `protobuf:"bytes,5,rep,name=domains,proto3" json:"domains,omitempty"`
	// The list of groups that are available across the Portal.
	Groups []*PortalConfigSpec_Group `protobuf:"bytes,6,rep,name=groups,proto3" json:"groups,omitempty"`
	// Indicates whether the Portal is public or private, this is based on the visibility setting specified in the
	// `Portal` resource
	Public bool `protobuf:"varint,7,opt,name=public,proto3" json:"public,omitempty"`
}

func (x *PortalConfigSpec) Reset() {
	*x = PortalConfigSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalConfigSpec) ProtoMessage() {}

func (x *PortalConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalConfigSpec.ProtoReflect.Descriptor instead.
func (*PortalConfigSpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDescGZIP(), []int{0}
}

func (x *PortalConfigSpec) GetPortalCustomMetadata() *_struct.Value {
	if x != nil {
		return x.PortalCustomMetadata
	}
	return nil
}

func (x *PortalConfigSpec) GetApis() []*PortalConfigSpec_API {
	if x != nil {
		return x.Apis
	}
	return nil
}

func (x *PortalConfigSpec) GetUsagePlans() []*PortalConfigSpec_UsagePlan {
	if x != nil {
		return x.UsagePlans
	}
	return nil
}

func (x *PortalConfigSpec) GetPortalRef() *v2.ObjectReference {
	if x != nil {
		return x.PortalRef
	}
	return nil
}

func (x *PortalConfigSpec) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *PortalConfigSpec) GetGroups() []*PortalConfigSpec_Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *PortalConfigSpec) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

// The status of the resource after it is applied to your Gloo environment.
type PortalConfigStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state and workspace conditions of the applied resource.
	Common *v2.Status `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	// The name of the workspace that owns the PortalConfig schema.
	OwnedByWorkspace string `protobuf:"bytes,2,opt,name=owned_by_workspace,json=ownedByWorkspace,proto3" json:"owned_by_workspace,omitempty"`
}

func (x *PortalConfigStatus) Reset() {
	*x = PortalConfigStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalConfigStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalConfigStatus) ProtoMessage() {}

func (x *PortalConfigStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalConfigStatus.ProtoReflect.Descriptor instead.
func (*PortalConfigStatus) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDescGZIP(), []int{1}
}

func (x *PortalConfigStatus) GetCommon() *v2.Status {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *PortalConfigStatus) GetOwnedByWorkspace() string {
	if x != nil {
		return x.OwnedByWorkspace
	}
	return ""
}

type PortalConfigReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workspaces map[string]*v2.Report `protobuf:"bytes,1,rep,name=workspaces,proto3" json:"workspaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The name of the workspace that owns the PortalConfig schema.
	OwnerWorkspace string `protobuf:"bytes,2,opt,name=owner_workspace,json=ownerWorkspace,proto3" json:"owner_workspace,omitempty"`
}

func (x *PortalConfigReport) Reset() {
	*x = PortalConfigReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalConfigReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalConfigReport) ProtoMessage() {}

func (x *PortalConfigReport) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalConfigReport.ProtoReflect.Descriptor instead.
func (*PortalConfigReport) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDescGZIP(), []int{2}
}

func (x *PortalConfigReport) GetWorkspaces() map[string]*v2.Report {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

func (x *PortalConfigReport) GetOwnerWorkspace() string {
	if x != nil {
		return x.OwnerWorkspace
	}
	return ""
}

// A Portal group represents a set of group names, which has visibility into a set of APIs and the ability
// to manage API keys selected usage plans.
type PortalConfigSpec_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the group this is derived from the `PortalGroup` resource
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The apis that are visible to this group
	Apis []*v2.ObjectReference `protobuf:"bytes,2,rep,name=apis,proto3" json:"apis,omitempty"`
	// The names of the usage plans that are visible to this group
	UsagePlans []string `protobuf:"bytes,3,rep,name=usage_plans,json=usagePlans,proto3" json:"usage_plans,omitempty"`
	// The list of membership claims that are used to determine whether a user is a member of this group
	MembershipClaims []*v21.Membership `protobuf:"bytes,4,rep,name=membership_claims,json=membershipClaims,proto3" json:"membership_claims,omitempty"`
}

func (x *PortalConfigSpec_Group) Reset() {
	*x = PortalConfigSpec_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalConfigSpec_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalConfigSpec_Group) ProtoMessage() {}

func (x *PortalConfigSpec_Group) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalConfigSpec_Group.ProtoReflect.Descriptor instead.
func (*PortalConfigSpec_Group) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PortalConfigSpec_Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PortalConfigSpec_Group) GetApis() []*v2.ObjectReference {
	if x != nil {
		return x.Apis
	}
	return nil
}

func (x *PortalConfigSpec_Group) GetUsagePlans() []string {
	if x != nil {
		return x.UsagePlans
	}
	return nil
}

func (x *PortalConfigSpec_Group) GetMembershipClaims() []*v21.Membership {
	if x != nil {
		return x.MembershipClaims
	}
	return nil
}

// TODO(jmhbh): Update this doc when we decide to support operation level usage plans.
// An API that is exposed by the Portal. API metadata is sourced from the
// referenced RouteTable and api_schema is a reference to the stitched API schema for the RouteTable.
// Also references a list of usage plan names that are associated with the API.
type PortalConfigSpec_API struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When set, the [/apis](https://docs.solo.io/gloo-gateway/main/portal/openapi/redocly/#tag/APIs/operation/ListAPIs)
	// endpoint in the portal will return `apiProduct` in the response which can be used to group multiple APIs together.
	ApiProductId string `protobuf:"bytes,1,opt,name=api_product_id,json=apiProductId,proto3" json:"api_product_id,omitempty"`
	// The api product display name
	ApiProductDisplayName string `protobuf:"bytes,2,opt,name=api_product_display_name,json=apiProductDisplayName,proto3" json:"api_product_display_name,omitempty"`
	// The ID for this API.
	ApiId string `protobuf:"bytes,3,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	// The version of the openAPI specification for this route table. Must be unique within the apiProduct.
	// `apiProduct` is required if `apiVersion` is set.
	ApiVersion     string                           `protobuf:"bytes,4,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	Title          string                           `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Description    string                           `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	TermsOfService string                           `protobuf:"bytes,7,opt,name=terms_of_service,json=termsOfService,proto3" json:"terms_of_service,omitempty"`
	Contact        string                           `protobuf:"bytes,8,opt,name=contact,proto3" json:"contact,omitempty"`
	License        string                           `protobuf:"bytes,9,opt,name=license,proto3" json:"license,omitempty"`
	Lifecycle      string                           `protobuf:"bytes,10,opt,name=lifecycle,proto3" json:"lifecycle,omitempty"`
	ApiSchema      *v2.ObjectReference              `protobuf:"bytes,11,opt,name=api_schema,json=apiSchema,proto3" json:"api_schema,omitempty"`
	RouteTable     *v2.ObjectReference              `protobuf:"bytes,12,opt,name=route_table,json=routeTable,proto3" json:"route_table,omitempty"`
	UsagePlans     []*PortalConfigSpec_UsagePlanRef `protobuf:"bytes,13,rep,name=usage_plans,json=usagePlans,proto3" json:"usage_plans,omitempty"`
	// The API is private if its associated route table contains labels matching the privateAPILabels specified
	// in the portal resource
	IsPrivate      bool              `protobuf:"varint,14,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	CustomMetadata map[string]string `protobuf:"bytes,15,rep,name=custom_metadata,json=customMetadata,proto3" json:"custom_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PortalConfigSpec_API) Reset() {
	*x = PortalConfigSpec_API{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalConfigSpec_API) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalConfigSpec_API) ProtoMessage() {}

func (x *PortalConfigSpec_API) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalConfigSpec_API.ProtoReflect.Descriptor instead.
func (*PortalConfigSpec_API) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PortalConfigSpec_API) GetApiProductId() string {
	if x != nil {
		return x.ApiProductId
	}
	return ""
}

func (x *PortalConfigSpec_API) GetApiProductDisplayName() string {
	if x != nil {
		return x.ApiProductDisplayName
	}
	return ""
}

func (x *PortalConfigSpec_API) GetApiId() string {
	if x != nil {
		return x.ApiId
	}
	return ""
}

func (x *PortalConfigSpec_API) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *PortalConfigSpec_API) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PortalConfigSpec_API) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PortalConfigSpec_API) GetTermsOfService() string {
	if x != nil {
		return x.TermsOfService
	}
	return ""
}

func (x *PortalConfigSpec_API) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *PortalConfigSpec_API) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *PortalConfigSpec_API) GetLifecycle() string {
	if x != nil {
		return x.Lifecycle
	}
	return ""
}

func (x *PortalConfigSpec_API) GetApiSchema() *v2.ObjectReference {
	if x != nil {
		return x.ApiSchema
	}
	return nil
}

func (x *PortalConfigSpec_API) GetRouteTable() *v2.ObjectReference {
	if x != nil {
		return x.RouteTable
	}
	return nil
}

func (x *PortalConfigSpec_API) GetUsagePlans() []*PortalConfigSpec_UsagePlanRef {
	if x != nil {
		return x.UsagePlans
	}
	return nil
}

func (x *PortalConfigSpec_API) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *PortalConfigSpec_API) GetCustomMetadata() map[string]string {
	if x != nil {
		return x.CustomMetadata
	}
	return nil
}

// A usage plan contains a list of auth policies and one rate limit policy.
type PortalConfigSpec_UsagePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName     string                            `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description     string                            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ExtAuthPolicies []*PortalConfigSpec_ExtAuthPolicy `protobuf:"bytes,4,rep,name=ext_auth_policies,json=extAuthPolicies,proto3" json:"ext_auth_policies,omitempty"`
	RateLimitPolicy *PortalConfigSpec_RateLimitPolicy `protobuf:"bytes,5,opt,name=rate_limit_policy,json=rateLimitPolicy,proto3" json:"rate_limit_policy,omitempty"`
}

func (x *PortalConfigSpec_UsagePlan) Reset() {
	*x = PortalConfigSpec_UsagePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalConfigSpec_UsagePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalConfigSpec_UsagePlan) ProtoMessage() {}

func (x *PortalConfigSpec_UsagePlan) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalConfigSpec_UsagePlan.ProtoReflect.Descriptor instead.
func (*PortalConfigSpec_UsagePlan) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDescGZIP(), []int{0, 2}
}

func (x *PortalConfigSpec_UsagePlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PortalConfigSpec_UsagePlan) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PortalConfigSpec_UsagePlan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PortalConfigSpec_UsagePlan) GetExtAuthPolicies() []*PortalConfigSpec_ExtAuthPolicy {
	if x != nil {
		return x.ExtAuthPolicies
	}
	return nil
}

func (x *PortalConfigSpec_UsagePlan) GetRateLimitPolicy() *PortalConfigSpec_RateLimitPolicy {
	if x != nil {
		return x.RateLimitPolicy
	}
	return nil
}

// Reference to a usage plan by name.
type PortalConfigSpec_UsagePlanRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PortalConfigSpec_UsagePlanRef) Reset() {
	*x = PortalConfigSpec_UsagePlanRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalConfigSpec_UsagePlanRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalConfigSpec_UsagePlanRef) ProtoMessage() {}

func (x *PortalConfigSpec_UsagePlanRef) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalConfigSpec_UsagePlanRef.ProtoReflect.Descriptor instead.
func (*PortalConfigSpec_UsagePlanRef) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDescGZIP(), []int{0, 3}
}

func (x *PortalConfigSpec_UsagePlanRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// An ext auth policy identified by its authentication type and contains a list of
// unique label selectors that are used to identify the set of clients that
// are authorized to use the auth policy.
type PortalConfigSpec_ExtAuthPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AuthCfg:
	//
	//	*PortalConfigSpec_ExtAuthPolicy_ApiKeyAuth
	//	*PortalConfigSpec_ExtAuthPolicy_OidcAuth
	//	*PortalConfigSpec_ExtAuthPolicy_AccessTokenValidation
	AuthCfg          isPortalConfigSpec_ExtAuthPolicy_AuthCfg `protobuf_oneof:"auth_cfg"`
	ExtAuthPolicyRef *v2.ObjectReference                      `protobuf:"bytes,4,opt,name=ext_auth_policy_ref,json=extAuthPolicyRef,proto3" json:"ext_auth_policy_ref,omitempty"`
	AuthConfigId     string                                   `protobuf:"bytes,5,opt,name=auth_config_id,json=authConfigId,proto3" json:"auth_config_id,omitempty"`
}

func (x *PortalConfigSpec_ExtAuthPolicy) Reset() {
	*x = PortalConfigSpec_ExtAuthPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalConfigSpec_ExtAuthPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalConfigSpec_ExtAuthPolicy) ProtoMessage() {}

func (x *PortalConfigSpec_ExtAuthPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalConfigSpec_ExtAuthPolicy.ProtoReflect.Descriptor instead.
func (*PortalConfigSpec_ExtAuthPolicy) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDescGZIP(), []int{0, 4}
}

func (m *PortalConfigSpec_ExtAuthPolicy) GetAuthCfg() isPortalConfigSpec_ExtAuthPolicy_AuthCfg {
	if m != nil {
		return m.AuthCfg
	}
	return nil
}

func (x *PortalConfigSpec_ExtAuthPolicy) GetApiKeyAuth() *PortalConfigSpec_ApiKeyAuth {
	if x, ok := x.GetAuthCfg().(*PortalConfigSpec_ExtAuthPolicy_ApiKeyAuth); ok {
		return x.ApiKeyAuth
	}
	return nil
}

func (x *PortalConfigSpec_ExtAuthPolicy) GetOidcAuth() *PortalConfigSpec_OidcAuth {
	if x, ok := x.GetAuthCfg().(*PortalConfigSpec_ExtAuthPolicy_OidcAuth); ok {
		return x.OidcAuth
	}
	return nil
}

func (x *PortalConfigSpec_ExtAuthPolicy) GetAccessTokenValidation() *PortalConfigSpec_AccessTokenValidation {
	if x, ok := x.GetAuthCfg().(*PortalConfigSpec_ExtAuthPolicy_AccessTokenValidation); ok {
		return x.AccessTokenValidation
	}
	return nil
}

func (x *PortalConfigSpec_ExtAuthPolicy) GetExtAuthPolicyRef() *v2.ObjectReference {
	if x != nil {
		return x.ExtAuthPolicyRef
	}
	return nil
}

func (x *PortalConfigSpec_ExtAuthPolicy) GetAuthConfigId() string {
	if x != nil {
		return x.AuthConfigId
	}
	return ""
}

type isPortalConfigSpec_ExtAuthPolicy_AuthCfg interface {
	isPortalConfigSpec_ExtAuthPolicy_AuthCfg()
}

type PortalConfigSpec_ExtAuthPolicy_ApiKeyAuth struct {
	ApiKeyAuth *PortalConfigSpec_ApiKeyAuth `protobuf:"bytes,1,opt,name=api_key_auth,json=apiKeyAuth,proto3,oneof"`
}

type PortalConfigSpec_ExtAuthPolicy_OidcAuth struct {
	OidcAuth *PortalConfigSpec_OidcAuth `protobuf:"bytes,2,opt,name=oidc_auth,json=oidcAuth,proto3,oneof"`
}

type PortalConfigSpec_ExtAuthPolicy_AccessTokenValidation struct {
	AccessTokenValidation *PortalConfigSpec_AccessTokenValidation `protobuf:"bytes,3,opt,name=access_token_validation,json=accessTokenValidation,proto3,oneof"`
}

func (*PortalConfigSpec_ExtAuthPolicy_ApiKeyAuth) isPortalConfigSpec_ExtAuthPolicy_AuthCfg() {}

func (*PortalConfigSpec_ExtAuthPolicy_OidcAuth) isPortalConfigSpec_ExtAuthPolicy_AuthCfg() {}

func (*PortalConfigSpec_ExtAuthPolicy_AccessTokenValidation) isPortalConfigSpec_ExtAuthPolicy_AuthCfg() {
}

type PortalConfigSpec_ApiKeyAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtAuthLabelSelector map[string]string `protobuf:"bytes,1,rep,name=ext_auth_label_selector,json=extAuthLabelSelector,proto3" json:"ext_auth_label_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PortalConfigSpec_ApiKeyAuth) Reset() {
	*x = PortalConfigSpec_ApiKeyAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalConfigSpec_ApiKeyAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalConfigSpec_ApiKeyAuth) ProtoMessage() {}

func (x *PortalConfigSpec_ApiKeyAuth) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalConfigSpec_ApiKeyAuth.ProtoReflect.Descriptor instead.
func (*PortalConfigSpec_ApiKeyAuth) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDescGZIP(), []int{0, 5}
}

func (x *PortalConfigSpec_ApiKeyAuth) GetExtAuthLabelSelector() map[string]string {
	if x != nil {
		return x.ExtAuthLabelSelector
	}
	return nil
}

type PortalConfigSpec_OidcAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WellKnownOpenidConfig string `protobuf:"bytes,1,opt,name=well_known_openid_config,json=wellKnownOpenidConfig,proto3" json:"well_known_openid_config,omitempty"`
}

func (x *PortalConfigSpec_OidcAuth) Reset() {
	*x = PortalConfigSpec_OidcAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalConfigSpec_OidcAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalConfigSpec_OidcAuth) ProtoMessage() {}

func (x *PortalConfigSpec_OidcAuth) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalConfigSpec_OidcAuth.ProtoReflect.Descriptor instead.
func (*PortalConfigSpec_OidcAuth) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDescGZIP(), []int{0, 6}
}

func (x *PortalConfigSpec_OidcAuth) GetWellKnownOpenidConfig() string {
	if x != nil {
		return x.WellKnownOpenidConfig
	}
	return ""
}

type PortalConfigSpec_AccessTokenValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BearerFormat string `protobuf:"bytes,1,opt,name=bearer_format,json=bearerFormat,proto3" json:"bearer_format,omitempty"`
}

func (x *PortalConfigSpec_AccessTokenValidation) Reset() {
	*x = PortalConfigSpec_AccessTokenValidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalConfigSpec_AccessTokenValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalConfigSpec_AccessTokenValidation) ProtoMessage() {}

func (x *PortalConfigSpec_AccessTokenValidation) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalConfigSpec_AccessTokenValidation.ProtoReflect.Descriptor instead.
func (*PortalConfigSpec_AccessTokenValidation) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDescGZIP(), []int{0, 7}
}

func (x *PortalConfigSpec_AccessTokenValidation) GetBearerFormat() string {
	if x != nil {
		return x.BearerFormat
	}
	return ""
}

type PortalConfigSpec_RateLimitPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit               PortalConfigSpec_Unit `protobuf:"varint,1,opt,name=unit,proto3,enum=internal.gloo.solo.io.PortalConfigSpec_Unit" json:"unit,omitempty"`
	RequestsPerUnit    uint32                `protobuf:"varint,2,opt,name=requests_per_unit,json=requestsPerUnit,proto3" json:"requests_per_unit,omitempty"`
	RateLimitPolicyRef *v2.ObjectReference   `protobuf:"bytes,3,opt,name=rate_limit_policy_ref,json=rateLimitPolicyRef,proto3" json:"rate_limit_policy_ref,omitempty"`
}

func (x *PortalConfigSpec_RateLimitPolicy) Reset() {
	*x = PortalConfigSpec_RateLimitPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalConfigSpec_RateLimitPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalConfigSpec_RateLimitPolicy) ProtoMessage() {}

func (x *PortalConfigSpec_RateLimitPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalConfigSpec_RateLimitPolicy.ProtoReflect.Descriptor instead.
func (*PortalConfigSpec_RateLimitPolicy) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDescGZIP(), []int{0, 8}
}

func (x *PortalConfigSpec_RateLimitPolicy) GetUnit() PortalConfigSpec_Unit {
	if x != nil {
		return x.Unit
	}
	return PortalConfigSpec_UNKNOWN
}

func (x *PortalConfigSpec_RateLimitPolicy) GetRequestsPerUnit() uint32 {
	if x != nil {
		return x.RequestsPerUnit
	}
	return 0
}

func (x *PortalConfigSpec_RateLimitPolicy) GetRateLimitPolicyRef() *v2.ObjectReference {
	if x != nil {
		return x.RateLimitPolicyRef
	}
	return nil
}

var File_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDesc = []byte{
	0x0a, 0x5b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x1a, 0x12, 0x65, 0x78, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65,
	0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f,
	0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f,
	0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73,
	0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x76, 0x32, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x5f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f,
	0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x16, 0x0a, 0x10, 0x50,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x4c, 0x0a, 0x16, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a,
	0x04, 0x61, 0x70, 0x69, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x04, 0x61, 0x70, 0x69, 0x73, 0x12, 0x52,
	0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x70, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x12, 0x45, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x1a, 0xcb, 0x01, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x04, 0x61, 0x70, 0x69, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x04, 0x61, 0x70, 0x69, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x11, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x10, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x1a, 0xff,
	0x05, 0x0a, 0x03, 0x41, 0x50, 0x49, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x61, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x6f,
	0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x61, 0x70, 0x69,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x55, 0x0a,
	0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x66, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x41, 0x0a,
	0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0xac, 0x02, 0x0a, 0x09, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x78, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x11, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f,
	0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a,
	0x22, 0x0a, 0x0c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x66, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x1a, 0xb8, 0x03, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x56, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x48,
	0x00, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x4f, 0x0a,
	0x09, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4f, 0x69, 0x64, 0x63, 0x41, 0x75,
	0x74, 0x68, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x69, 0x64, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x77,
	0x0a, 0x17, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x15, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x65, 0x78, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66, 0x12, 0x24, 0x0a, 0x0e,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x66, 0x67, 0x1a, 0xdb,
	0x01, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x83, 0x01,
	0x0a, 0x17, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41,
	0x75, 0x74, 0x68, 0x2e, 0x45, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x65,
	0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x1a, 0x47, 0x0a, 0x19, 0x45, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x08,
	0x4f, 0x69, 0x64, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x18, 0x77, 0x65, 0x6c, 0x6c,
	0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x77, 0x65, 0x6c, 0x6c,
	0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0x3c, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a,
	0xd8, 0x01, 0x0a, 0x0f, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x40, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x50, 0x65, 0x72, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x57, 0x0a, 0x15, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66, 0x22, 0x3e, 0x0a, 0x04, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x55, 0x52, 0x10,
	0x03, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x41, 0x59, 0x10, 0x04, 0x22, 0x77, 0x0a, 0x12, 0x50, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x59, 0x0a, 0x0a, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x5a,
	0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x59, 0x5a, 0x4b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f,
	0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x32, 0xc0, 0xf5, 0x04, 0x01, 0xb8, 0xf5, 0x04,
	0x01, 0xd0, 0xf5, 0x04, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDescData = file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_goTypes = []interface{}{
	(PortalConfigSpec_Unit)(0),                     // 0: internal.gloo.solo.io.PortalConfigSpec.Unit
	(*PortalConfigSpec)(nil),                       // 1: internal.gloo.solo.io.PortalConfigSpec
	(*PortalConfigStatus)(nil),                     // 2: internal.gloo.solo.io.PortalConfigStatus
	(*PortalConfigReport)(nil),                     // 3: internal.gloo.solo.io.PortalConfigReport
	(*PortalConfigSpec_Group)(nil),                 // 4: internal.gloo.solo.io.PortalConfigSpec.Group
	(*PortalConfigSpec_API)(nil),                   // 5: internal.gloo.solo.io.PortalConfigSpec.API
	(*PortalConfigSpec_UsagePlan)(nil),             // 6: internal.gloo.solo.io.PortalConfigSpec.UsagePlan
	(*PortalConfigSpec_UsagePlanRef)(nil),          // 7: internal.gloo.solo.io.PortalConfigSpec.UsagePlanRef
	(*PortalConfigSpec_ExtAuthPolicy)(nil),         // 8: internal.gloo.solo.io.PortalConfigSpec.ExtAuthPolicy
	(*PortalConfigSpec_ApiKeyAuth)(nil),            // 9: internal.gloo.solo.io.PortalConfigSpec.ApiKeyAuth
	(*PortalConfigSpec_OidcAuth)(nil),              // 10: internal.gloo.solo.io.PortalConfigSpec.OidcAuth
	(*PortalConfigSpec_AccessTokenValidation)(nil), // 11: internal.gloo.solo.io.PortalConfigSpec.AccessTokenValidation
	(*PortalConfigSpec_RateLimitPolicy)(nil),       // 12: internal.gloo.solo.io.PortalConfigSpec.RateLimitPolicy
	nil,                                            // 13: internal.gloo.solo.io.PortalConfigSpec.API.CustomMetadataEntry
	nil,                                            // 14: internal.gloo.solo.io.PortalConfigSpec.ApiKeyAuth.ExtAuthLabelSelectorEntry
	nil,                                            // 15: internal.gloo.solo.io.PortalConfigReport.WorkspacesEntry
	(*_struct.Value)(nil),                          // 16: google.protobuf.Value
	(*v2.ObjectReference)(nil),                     // 17: common.gloo.solo.io.ObjectReference
	(*v2.Status)(nil),                              // 18: common.gloo.solo.io.Status
	(*v21.Membership)(nil),                         // 19: apimanagement.gloo.solo.io.Membership
	(*v2.Report)(nil),                              // 20: common.gloo.solo.io.Report
}
var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_depIdxs = []int32{
	16, // 0: internal.gloo.solo.io.PortalConfigSpec.portal_custom_metadata:type_name -> google.protobuf.Value
	5,  // 1: internal.gloo.solo.io.PortalConfigSpec.apis:type_name -> internal.gloo.solo.io.PortalConfigSpec.API
	6,  // 2: internal.gloo.solo.io.PortalConfigSpec.usage_plans:type_name -> internal.gloo.solo.io.PortalConfigSpec.UsagePlan
	17, // 3: internal.gloo.solo.io.PortalConfigSpec.portal_ref:type_name -> common.gloo.solo.io.ObjectReference
	4,  // 4: internal.gloo.solo.io.PortalConfigSpec.groups:type_name -> internal.gloo.solo.io.PortalConfigSpec.Group
	18, // 5: internal.gloo.solo.io.PortalConfigStatus.common:type_name -> common.gloo.solo.io.Status
	15, // 6: internal.gloo.solo.io.PortalConfigReport.workspaces:type_name -> internal.gloo.solo.io.PortalConfigReport.WorkspacesEntry
	17, // 7: internal.gloo.solo.io.PortalConfigSpec.Group.apis:type_name -> common.gloo.solo.io.ObjectReference
	19, // 8: internal.gloo.solo.io.PortalConfigSpec.Group.membership_claims:type_name -> apimanagement.gloo.solo.io.Membership
	17, // 9: internal.gloo.solo.io.PortalConfigSpec.API.api_schema:type_name -> common.gloo.solo.io.ObjectReference
	17, // 10: internal.gloo.solo.io.PortalConfigSpec.API.route_table:type_name -> common.gloo.solo.io.ObjectReference
	7,  // 11: internal.gloo.solo.io.PortalConfigSpec.API.usage_plans:type_name -> internal.gloo.solo.io.PortalConfigSpec.UsagePlanRef
	13, // 12: internal.gloo.solo.io.PortalConfigSpec.API.custom_metadata:type_name -> internal.gloo.solo.io.PortalConfigSpec.API.CustomMetadataEntry
	8,  // 13: internal.gloo.solo.io.PortalConfigSpec.UsagePlan.ext_auth_policies:type_name -> internal.gloo.solo.io.PortalConfigSpec.ExtAuthPolicy
	12, // 14: internal.gloo.solo.io.PortalConfigSpec.UsagePlan.rate_limit_policy:type_name -> internal.gloo.solo.io.PortalConfigSpec.RateLimitPolicy
	9,  // 15: internal.gloo.solo.io.PortalConfigSpec.ExtAuthPolicy.api_key_auth:type_name -> internal.gloo.solo.io.PortalConfigSpec.ApiKeyAuth
	10, // 16: internal.gloo.solo.io.PortalConfigSpec.ExtAuthPolicy.oidc_auth:type_name -> internal.gloo.solo.io.PortalConfigSpec.OidcAuth
	11, // 17: internal.gloo.solo.io.PortalConfigSpec.ExtAuthPolicy.access_token_validation:type_name -> internal.gloo.solo.io.PortalConfigSpec.AccessTokenValidation
	17, // 18: internal.gloo.solo.io.PortalConfigSpec.ExtAuthPolicy.ext_auth_policy_ref:type_name -> common.gloo.solo.io.ObjectReference
	14, // 19: internal.gloo.solo.io.PortalConfigSpec.ApiKeyAuth.ext_auth_label_selector:type_name -> internal.gloo.solo.io.PortalConfigSpec.ApiKeyAuth.ExtAuthLabelSelectorEntry
	0,  // 20: internal.gloo.solo.io.PortalConfigSpec.RateLimitPolicy.unit:type_name -> internal.gloo.solo.io.PortalConfigSpec.Unit
	17, // 21: internal.gloo.solo.io.PortalConfigSpec.RateLimitPolicy.rate_limit_policy_ref:type_name -> common.gloo.solo.io.ObjectReference
	20, // 22: internal.gloo.solo.io.PortalConfigReport.WorkspacesEntry.value:type_name -> common.gloo.solo.io.Report
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_init()
}
func file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_init() {
	if File_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalConfigSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalConfigStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalConfigReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalConfigSpec_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalConfigSpec_API); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalConfigSpec_UsagePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalConfigSpec_UsagePlanRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalConfigSpec_ExtAuthPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalConfigSpec_ApiKeyAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalConfigSpec_OidcAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalConfigSpec_AccessTokenValidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalConfigSpec_RateLimitPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*PortalConfigSpec_ExtAuthPolicy_ApiKeyAuth)(nil),
		(*PortalConfigSpec_ExtAuthPolicy_OidcAuth)(nil),
		(*PortalConfigSpec_ExtAuthPolicy_AccessTokenValidation)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto = out.File
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_internal_v2_portal_config_proto_depIdxs = nil
}
