// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/internal/v2/certificate_request.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *CertificateRequestSpec) Clone() proto.Message {
	var target *CertificateRequestSpec
	if m == nil {
		return target
	}
	target = &CertificateRequestSpec{}

	if m.GetCertificateSigningRequest() != nil {
		target.CertificateSigningRequest = make([]byte, len(m.GetCertificateSigningRequest()))
		copy(target.CertificateSigningRequest, m.GetCertificateSigningRequest())
	}

	return target
}

// Clone function
func (m *CertificateRequestStatus) Clone() proto.Message {
	var target *CertificateRequestStatus
	if m == nil {
		return target
	}
	target = &CertificateRequestStatus{}

	target.ObservedGeneration = m.GetObservedGeneration()

	target.Error = m.GetError()

	target.State = m.GetState()

	if m.GetSignedCertificate() != nil {
		target.SignedCertificate = make([]byte, len(m.GetSignedCertificate()))
		copy(target.SignedCertificate, m.GetSignedCertificate())
	}

	if m.GetSigningRootCa() != nil {
		target.SigningRootCa = make([]byte, len(m.GetSigningRootCa()))
		copy(target.SigningRootCa, m.GetSigningRootCa())
	}

	if m.GetCertChain() != nil {
		target.CertChain = make([]byte, len(m.GetCertChain()))
		copy(target.CertChain, m.GetCertChain())
	}

	return target
}
