// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/internal/v2/mesh.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *MeshSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*MeshSpec)
	if !ok {
		that2, ok := that.(MeshSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetInstallation()).(equality.Equalizer); ok {
		if !h.Equal(target.GetInstallation()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetInstallation(), target.GetInstallation()) {
			return false
		}
	}

	if strings.Compare(m.GetTrustDomain(), target.GetTrustDomain()) != 0 {
		return false
	}

	if strings.Compare(m.GetIstiodServiceAccount(), target.GetIstiodServiceAccount()) != 0 {
		return false
	}

	if len(m.GetDiscoveryNamespaces()) != len(target.GetDiscoveryNamespaces()) {
		return false
	}
	for idx, v := range m.GetDiscoveryNamespaces() {

		if strings.Compare(v, target.GetDiscoveryNamespaces()[idx]) != 0 {
			return false
		}

	}

	if m.GetSmartDnsProxyingEnabled() != target.GetSmartDnsProxyingEnabled() {
		return false
	}

	if strings.Compare(m.GetRootNamespace(), target.GetRootNamespace()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetAgentInfo()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAgentInfo()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAgentInfo(), target.GetAgentInfo()) {
			return false
		}
	}

	if strings.Compare(m.GetHub(), target.GetHub()) != 0 {
		return false
	}

	if strings.Compare(m.GetTag(), target.GetTag()) != 0 {
		return false
	}

	if m.GetIpFamily() != target.GetIpFamily() {
		return false
	}

	if m.GetAmbientCapable() != target.GetAmbientCapable() {
		return false
	}

	return true
}

// Equal function
func (m *MeshStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*MeshStatus)
	if !ok {
		that2, ok := that.(MeshStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetObservedGeneration() != target.GetObservedGeneration() {
		return false
	}

	return true
}

// Equal function
func (m *MeshSpec_Installation) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*MeshSpec_Installation)
	if !ok {
		that2, ok := that.(MeshSpec_Installation)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetNamespace(), target.GetNamespace()) != 0 {
		return false
	}

	if strings.Compare(m.GetCluster(), target.GetCluster()) != 0 {
		return false
	}

	if len(m.GetPodLabels()) != len(target.GetPodLabels()) {
		return false
	}
	for k, v := range m.GetPodLabels() {

		if strings.Compare(v, target.GetPodLabels()[k]) != 0 {
			return false
		}

	}

	if strings.Compare(m.GetVersion(), target.GetVersion()) != 0 {
		return false
	}

	if strings.Compare(m.GetRevision(), target.GetRevision()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *MeshSpec_AgentInfo) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*MeshSpec_AgentInfo)
	if !ok {
		that2, ok := that.(MeshSpec_AgentInfo)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetNamespace(), target.GetNamespace()) != 0 {
		return false
	}

	if strings.Compare(m.GetVersion(), target.GetVersion()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetRelayRootTlsSecret()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRelayRootTlsSecret()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRelayRootTlsSecret(), target.GetRelayRootTlsSecret()) {
			return false
		}
	}

	return true
}
