// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/internal/v2/discovered_gateway.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *DiscoveredGatewaySpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DiscoveredGatewaySpec)
	if !ok {
		that2, ok := that.(DiscoveredGatewaySpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetService()).(equality.Equalizer); ok {
		if !h.Equal(target.GetService()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetService(), target.GetService()) {
			return false
		}
	}

	if len(m.GetWorkloadLabels()) != len(target.GetWorkloadLabels()) {
		return false
	}
	for k, v := range m.GetWorkloadLabels() {

		if strings.Compare(v, target.GetWorkloadLabels()[k]) != 0 {
			return false
		}

	}

	if len(m.GetExternalAddresses()) != len(target.GetExternalAddresses()) {
		return false
	}
	for idx, v := range m.GetExternalAddresses() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetExternalAddresses()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetExternalAddresses()[idx]) {
				return false
			}
		}

	}

	if m.GetServiceType() != target.GetServiceType() {
		return false
	}

	if len(m.GetServiceAccountRefs()) != len(target.GetServiceAccountRefs()) {
		return false
	}
	for idx, v := range m.GetServiceAccountRefs() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetServiceAccountRefs()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetServiceAccountRefs()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *DiscoveredGatewayStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DiscoveredGatewayStatus)
	if !ok {
		that2, ok := that.(DiscoveredGatewayStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetGeneric()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGeneric()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGeneric(), target.GetGeneric()) {
			return false
		}
	}

	if len(m.GetVirtualGateways()) != len(target.GetVirtualGateways()) {
		return false
	}
	for idx, v := range m.GetVirtualGateways() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetVirtualGateways()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetVirtualGateways()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *DiscoveredGatewaySpec_ExternalAddress) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DiscoveredGatewaySpec_ExternalAddress)
	if !ok {
		that2, ok := that.(DiscoveredGatewaySpec_ExternalAddress)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetAddress(), target.GetAddress()) != 0 {
		return false
	}

	if len(m.GetPorts()) != len(target.GetPorts()) {
		return false
	}
	for idx, v := range m.GetPorts() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetPorts()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetPorts()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetLocality()).(equality.Equalizer); ok {
		if !h.Equal(target.GetLocality()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetLocality(), target.GetLocality()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *DiscoveredGatewaySpec_Port) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DiscoveredGatewaySpec_Port)
	if !ok {
		that2, ok := that.(DiscoveredGatewaySpec_Port)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetNumber() != target.GetNumber() {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetProtocol(), target.GetProtocol()) != 0 {
		return false
	}

	return true
}
