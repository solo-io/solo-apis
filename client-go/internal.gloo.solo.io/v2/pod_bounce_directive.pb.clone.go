// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/internal/v2/pod_bounce_directive.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *PodBounceDirectiveSpec) Clone() proto.Message {
	var target *PodBounceDirectiveSpec
	if m == nil {
		return target
	}
	target = &PodBounceDirectiveSpec{}

	if m.GetPodsToBounce() != nil {
		target.PodsToBounce = make([]*PodBounceDirectiveSpec_PodSelector, len(m.GetPodsToBounce()))
		for idx, v := range m.GetPodsToBounce() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.PodsToBounce[idx] = h.Clone().(*PodBounceDirectiveSpec_PodSelector)
			} else {
				target.PodsToBounce[idx] = proto.Clone(v).(*PodBounceDirectiveSpec_PodSelector)
			}

		}
	}

	if h, ok := interface{}(m.GetMeshRef()).(clone.Cloner); ok {
		target.MeshRef = h.Clone().(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ObjectRef)
	} else {
		target.MeshRef = proto.Clone(m.GetMeshRef()).(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ObjectRef)
	}

	return target
}

// Clone function
func (m *PodBounceDirectiveStatus) Clone() proto.Message {
	var target *PodBounceDirectiveStatus
	if m == nil {
		return target
	}
	target = &PodBounceDirectiveStatus{}

	target.ObservedGeneration = m.GetObservedGeneration()

	target.State = m.GetState()

	target.Error = m.GetError()

	if m.GetPodsBounced() != nil {
		target.PodsBounced = make([]*PodBounceDirectiveStatus_BouncedPodSet, len(m.GetPodsBounced()))
		for idx, v := range m.GetPodsBounced() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.PodsBounced[idx] = h.Clone().(*PodBounceDirectiveStatus_BouncedPodSet)
			} else {
				target.PodsBounced[idx] = proto.Clone(v).(*PodBounceDirectiveStatus_BouncedPodSet)
			}

		}
	}

	return target
}

// Clone function
func (m *PodBounceDirectiveSpec_PodSelector) Clone() proto.Message {
	var target *PodBounceDirectiveSpec_PodSelector
	if m == nil {
		return target
	}
	target = &PodBounceDirectiveSpec_PodSelector{}

	target.Namespace = m.GetNamespace()

	if m.GetLabels() != nil {
		target.Labels = make(map[string]string, len(m.GetLabels()))
		for k, v := range m.GetLabels() {

			target.Labels[k] = v

		}
	}

	target.WaitForReplicas = m.GetWaitForReplicas()

	if h, ok := interface{}(m.GetRootCertSync()).(clone.Cloner); ok {
		target.RootCertSync = h.Clone().(*PodBounceDirectiveSpec_PodSelector_RootCertSync)
	} else {
		target.RootCertSync = proto.Clone(m.GetRootCertSync()).(*PodBounceDirectiveSpec_PodSelector_RootCertSync)
	}

	return target
}

// Clone function
func (m *PodBounceDirectiveSpec_PodSelector_RootCertSync) Clone() proto.Message {
	var target *PodBounceDirectiveSpec_PodSelector_RootCertSync
	if m == nil {
		return target
	}
	target = &PodBounceDirectiveSpec_PodSelector_RootCertSync{}

	if h, ok := interface{}(m.GetSecretRef()).(clone.Cloner); ok {
		target.SecretRef = h.Clone().(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ObjectRef)
	} else {
		target.SecretRef = proto.Clone(m.GetSecretRef()).(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ObjectRef)
	}

	target.SecretKey = m.GetSecretKey()

	if h, ok := interface{}(m.GetConfigMapRef()).(clone.Cloner); ok {
		target.ConfigMapRef = h.Clone().(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ObjectRef)
	} else {
		target.ConfigMapRef = proto.Clone(m.GetConfigMapRef()).(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ObjectRef)
	}

	target.ConfigMapKey = m.GetConfigMapKey()

	return target
}

// Clone function
func (m *PodBounceDirectiveStatus_BouncedPodSet) Clone() proto.Message {
	var target *PodBounceDirectiveStatus_BouncedPodSet
	if m == nil {
		return target
	}
	target = &PodBounceDirectiveStatus_BouncedPodSet{}

	if m.GetBouncedPods() != nil {
		target.BouncedPods = make([]string, len(m.GetBouncedPods()))
		for idx, v := range m.GetBouncedPods() {

			target.BouncedPods[idx] = v

		}
	}

	return target
}
