// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/internal/v2/discovered_gateway.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"

	github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *DiscoveredGatewaySpec) Clone() proto.Message {
	var target *DiscoveredGatewaySpec
	if m == nil {
		return target
	}
	target = &DiscoveredGatewaySpec{}

	if h, ok := interface{}(m.GetService()).(clone.Cloner); ok {
		target.Service = h.Clone().(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ClusterObjectRef)
	} else {
		target.Service = proto.Clone(m.GetService()).(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ClusterObjectRef)
	}

	if m.GetWorkloadLabels() != nil {
		target.WorkloadLabels = make(map[string]string, len(m.GetWorkloadLabels()))
		for k, v := range m.GetWorkloadLabels() {

			target.WorkloadLabels[k] = v

		}
	}

	if m.GetExternalAddresses() != nil {
		target.ExternalAddresses = make([]*DiscoveredGatewaySpec_ExternalAddress, len(m.GetExternalAddresses()))
		for idx, v := range m.GetExternalAddresses() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ExternalAddresses[idx] = h.Clone().(*DiscoveredGatewaySpec_ExternalAddress)
			} else {
				target.ExternalAddresses[idx] = proto.Clone(v).(*DiscoveredGatewaySpec_ExternalAddress)
			}

		}
	}

	target.ServiceType = m.GetServiceType()

	if m.GetServiceAccountRefs() != nil {
		target.ServiceAccountRefs = make([]*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ClusterObjectRef, len(m.GetServiceAccountRefs()))
		for idx, v := range m.GetServiceAccountRefs() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ServiceAccountRefs[idx] = h.Clone().(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ClusterObjectRef)
			} else {
				target.ServiceAccountRefs[idx] = proto.Clone(v).(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ClusterObjectRef)
			}

		}
	}

	return target
}

// Clone function
func (m *DiscoveredGatewayStatus) Clone() proto.Message {
	var target *DiscoveredGatewayStatus
	if m == nil {
		return target
	}
	target = &DiscoveredGatewayStatus{}

	if h, ok := interface{}(m.GetCommon()).(clone.Cloner); ok {
		target.Common = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	} else {
		target.Common = proto.Clone(m.GetCommon()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	}

	target.NumVirtualGateways = m.GetNumVirtualGateways()

	return target
}

// Clone function
func (m *DiscoveredGatewayReport) Clone() proto.Message {
	var target *DiscoveredGatewayReport
	if m == nil {
		return target
	}
	target = &DiscoveredGatewayReport{}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			}

		}
	}

	if m.GetVirtualGateways() != nil {
		target.VirtualGateways = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference, len(m.GetVirtualGateways()))
		for idx, v := range m.GetVirtualGateways() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.VirtualGateways[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			} else {
				target.VirtualGateways[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			}

		}
	}

	return target
}

// Clone function
func (m *DiscoveredGatewaySpec_ExternalAddress) Clone() proto.Message {
	var target *DiscoveredGatewaySpec_ExternalAddress
	if m == nil {
		return target
	}
	target = &DiscoveredGatewaySpec_ExternalAddress{}

	target.Address = m.GetAddress()

	if m.GetPorts() != nil {
		target.Ports = make([]*DiscoveredGatewaySpec_Port, len(m.GetPorts()))
		for idx, v := range m.GetPorts() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Ports[idx] = h.Clone().(*DiscoveredGatewaySpec_Port)
			} else {
				target.Ports[idx] = proto.Clone(v).(*DiscoveredGatewaySpec_Port)
			}

		}
	}

	if h, ok := interface{}(m.GetLocality()).(clone.Cloner); ok {
		target.Locality = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Locality)
	} else {
		target.Locality = proto.Clone(m.GetLocality()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Locality)
	}

	return target
}

// Clone function
func (m *DiscoveredGatewaySpec_Port) Clone() proto.Message {
	var target *DiscoveredGatewaySpec_Port
	if m == nil {
		return target
	}
	target = &DiscoveredGatewaySpec_Port{}

	target.Number = m.GetNumber()

	target.Name = m.GetName()

	target.Protocol = m.GetProtocol()

	return target
}
