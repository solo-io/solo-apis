// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v2 is a generated GoMock package.
package mock_v2

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	v2 "github.com/solo-io/solo-apis/client-go/internal.gloo.solo.io/v2"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v2.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// CertificateRequests mocks base method.
func (m *MockClientset) CertificateRequests() v2.CertificateRequestClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificateRequests")
	ret0, _ := ret[0].(v2.CertificateRequestClient)
	return ret0
}

// CertificateRequests indicates an expected call of CertificateRequests.
func (mr *MockClientsetMockRecorder) CertificateRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificateRequests", reflect.TypeOf((*MockClientset)(nil).CertificateRequests))
}

// DiscoveredCNIS mocks base method.
func (m *MockClientset) DiscoveredCNIS() v2.DiscoveredCNIClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoveredCNIS")
	ret0, _ := ret[0].(v2.DiscoveredCNIClient)
	return ret0
}

// DiscoveredCNIS indicates an expected call of DiscoveredCNIS.
func (mr *MockClientsetMockRecorder) DiscoveredCNIS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoveredCNIS", reflect.TypeOf((*MockClientset)(nil).DiscoveredCNIS))
}

// DiscoveredGateways mocks base method.
func (m *MockClientset) DiscoveredGateways() v2.DiscoveredGatewayClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoveredGateways")
	ret0, _ := ret[0].(v2.DiscoveredGatewayClient)
	return ret0
}

// DiscoveredGateways indicates an expected call of DiscoveredGateways.
func (mr *MockClientsetMockRecorder) DiscoveredGateways() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoveredGateways", reflect.TypeOf((*MockClientset)(nil).DiscoveredGateways))
}

// IssuedCertificates mocks base method.
func (m *MockClientset) IssuedCertificates() v2.IssuedCertificateClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuedCertificates")
	ret0, _ := ret[0].(v2.IssuedCertificateClient)
	return ret0
}

// IssuedCertificates indicates an expected call of IssuedCertificates.
func (mr *MockClientsetMockRecorder) IssuedCertificates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuedCertificates", reflect.TypeOf((*MockClientset)(nil).IssuedCertificates))
}

// Meshes mocks base method.
func (m *MockClientset) Meshes() v2.MeshClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meshes")
	ret0, _ := ret[0].(v2.MeshClient)
	return ret0
}

// Meshes indicates an expected call of Meshes.
func (mr *MockClientsetMockRecorder) Meshes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meshes", reflect.TypeOf((*MockClientset)(nil).Meshes))
}

// PodBounceDirectives mocks base method.
func (m *MockClientset) PodBounceDirectives() v2.PodBounceDirectiveClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodBounceDirectives")
	ret0, _ := ret[0].(v2.PodBounceDirectiveClient)
	return ret0
}

// PodBounceDirectives indicates an expected call of PodBounceDirectives.
func (mr *MockClientsetMockRecorder) PodBounceDirectives() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodBounceDirectives", reflect.TypeOf((*MockClientset)(nil).PodBounceDirectives))
}

// PortalConfigs mocks base method.
func (m *MockClientset) PortalConfigs() v2.PortalConfigClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortalConfigs")
	ret0, _ := ret[0].(v2.PortalConfigClient)
	return ret0
}

// PortalConfigs indicates an expected call of PortalConfigs.
func (mr *MockClientsetMockRecorder) PortalConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortalConfigs", reflect.TypeOf((*MockClientset)(nil).PortalConfigs))
}

// SpireRegistrationEntries mocks base method.
func (m *MockClientset) SpireRegistrationEntries() v2.SpireRegistrationEntryClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpireRegistrationEntries")
	ret0, _ := ret[0].(v2.SpireRegistrationEntryClient)
	return ret0
}

// SpireRegistrationEntries indicates an expected call of SpireRegistrationEntries.
func (mr *MockClientsetMockRecorder) SpireRegistrationEntries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpireRegistrationEntries", reflect.TypeOf((*MockClientset)(nil).SpireRegistrationEntries))
}

// XdsConfigs mocks base method.
func (m *MockClientset) XdsConfigs() v2.XdsConfigClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XdsConfigs")
	ret0, _ := ret[0].(v2.XdsConfigClient)
	return ret0
}

// XdsConfigs indicates an expected call of XdsConfigs.
func (mr *MockClientsetMockRecorder) XdsConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XdsConfigs", reflect.TypeOf((*MockClientset)(nil).XdsConfigs))
}

// MockIssuedCertificateReader is a mock of IssuedCertificateReader interface.
type MockIssuedCertificateReader struct {
	ctrl     *gomock.Controller
	recorder *MockIssuedCertificateReaderMockRecorder
}

// MockIssuedCertificateReaderMockRecorder is the mock recorder for MockIssuedCertificateReader.
type MockIssuedCertificateReaderMockRecorder struct {
	mock *MockIssuedCertificateReader
}

// NewMockIssuedCertificateReader creates a new mock instance.
func NewMockIssuedCertificateReader(ctrl *gomock.Controller) *MockIssuedCertificateReader {
	mock := &MockIssuedCertificateReader{ctrl: ctrl}
	mock.recorder = &MockIssuedCertificateReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuedCertificateReader) EXPECT() *MockIssuedCertificateReaderMockRecorder {
	return m.recorder
}

// GetIssuedCertificate mocks base method.
func (m *MockIssuedCertificateReader) GetIssuedCertificate(ctx context.Context, key client.ObjectKey) (*v2.IssuedCertificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuedCertificate", ctx, key)
	ret0, _ := ret[0].(*v2.IssuedCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuedCertificate indicates an expected call of GetIssuedCertificate.
func (mr *MockIssuedCertificateReaderMockRecorder) GetIssuedCertificate(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateReader)(nil).GetIssuedCertificate), ctx, key)
}

// ListIssuedCertificate mocks base method.
func (m *MockIssuedCertificateReader) ListIssuedCertificate(ctx context.Context, opts ...client.ListOption) (*v2.IssuedCertificateList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIssuedCertificate", varargs...)
	ret0, _ := ret[0].(*v2.IssuedCertificateList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIssuedCertificate indicates an expected call of ListIssuedCertificate.
func (mr *MockIssuedCertificateReaderMockRecorder) ListIssuedCertificate(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateReader)(nil).ListIssuedCertificate), varargs...)
}

// MockIssuedCertificateWriter is a mock of IssuedCertificateWriter interface.
type MockIssuedCertificateWriter struct {
	ctrl     *gomock.Controller
	recorder *MockIssuedCertificateWriterMockRecorder
}

// MockIssuedCertificateWriterMockRecorder is the mock recorder for MockIssuedCertificateWriter.
type MockIssuedCertificateWriterMockRecorder struct {
	mock *MockIssuedCertificateWriter
}

// NewMockIssuedCertificateWriter creates a new mock instance.
func NewMockIssuedCertificateWriter(ctrl *gomock.Controller) *MockIssuedCertificateWriter {
	mock := &MockIssuedCertificateWriter{ctrl: ctrl}
	mock.recorder = &MockIssuedCertificateWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuedCertificateWriter) EXPECT() *MockIssuedCertificateWriterMockRecorder {
	return m.recorder
}

// CreateIssuedCertificate mocks base method.
func (m *MockIssuedCertificateWriter) CreateIssuedCertificate(ctx context.Context, obj *v2.IssuedCertificate, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIssuedCertificate indicates an expected call of CreateIssuedCertificate.
func (mr *MockIssuedCertificateWriterMockRecorder) CreateIssuedCertificate(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateWriter)(nil).CreateIssuedCertificate), varargs...)
}

// DeleteAllOfIssuedCertificate mocks base method.
func (m *MockIssuedCertificateWriter) DeleteAllOfIssuedCertificate(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfIssuedCertificate indicates an expected call of DeleteAllOfIssuedCertificate.
func (mr *MockIssuedCertificateWriterMockRecorder) DeleteAllOfIssuedCertificate(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateWriter)(nil).DeleteAllOfIssuedCertificate), varargs...)
}

// DeleteIssuedCertificate mocks base method.
func (m *MockIssuedCertificateWriter) DeleteIssuedCertificate(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIssuedCertificate indicates an expected call of DeleteIssuedCertificate.
func (mr *MockIssuedCertificateWriterMockRecorder) DeleteIssuedCertificate(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateWriter)(nil).DeleteIssuedCertificate), varargs...)
}

// PatchIssuedCertificate mocks base method.
func (m *MockIssuedCertificateWriter) PatchIssuedCertificate(ctx context.Context, obj *v2.IssuedCertificate, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchIssuedCertificate indicates an expected call of PatchIssuedCertificate.
func (mr *MockIssuedCertificateWriterMockRecorder) PatchIssuedCertificate(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateWriter)(nil).PatchIssuedCertificate), varargs...)
}

// UpdateIssuedCertificate mocks base method.
func (m *MockIssuedCertificateWriter) UpdateIssuedCertificate(ctx context.Context, obj *v2.IssuedCertificate, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIssuedCertificate indicates an expected call of UpdateIssuedCertificate.
func (mr *MockIssuedCertificateWriterMockRecorder) UpdateIssuedCertificate(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateWriter)(nil).UpdateIssuedCertificate), varargs...)
}

// UpsertIssuedCertificate mocks base method.
func (m *MockIssuedCertificateWriter) UpsertIssuedCertificate(ctx context.Context, obj *v2.IssuedCertificate, transitionFuncs ...v2.IssuedCertificateTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertIssuedCertificate indicates an expected call of UpsertIssuedCertificate.
func (mr *MockIssuedCertificateWriterMockRecorder) UpsertIssuedCertificate(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateWriter)(nil).UpsertIssuedCertificate), varargs...)
}

// MockIssuedCertificateStatusWriter is a mock of IssuedCertificateStatusWriter interface.
type MockIssuedCertificateStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockIssuedCertificateStatusWriterMockRecorder
}

// MockIssuedCertificateStatusWriterMockRecorder is the mock recorder for MockIssuedCertificateStatusWriter.
type MockIssuedCertificateStatusWriterMockRecorder struct {
	mock *MockIssuedCertificateStatusWriter
}

// NewMockIssuedCertificateStatusWriter creates a new mock instance.
func NewMockIssuedCertificateStatusWriter(ctrl *gomock.Controller) *MockIssuedCertificateStatusWriter {
	mock := &MockIssuedCertificateStatusWriter{ctrl: ctrl}
	mock.recorder = &MockIssuedCertificateStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuedCertificateStatusWriter) EXPECT() *MockIssuedCertificateStatusWriterMockRecorder {
	return m.recorder
}

// PatchIssuedCertificateStatus mocks base method.
func (m *MockIssuedCertificateStatusWriter) PatchIssuedCertificateStatus(ctx context.Context, obj *v2.IssuedCertificate, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchIssuedCertificateStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchIssuedCertificateStatus indicates an expected call of PatchIssuedCertificateStatus.
func (mr *MockIssuedCertificateStatusWriterMockRecorder) PatchIssuedCertificateStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchIssuedCertificateStatus", reflect.TypeOf((*MockIssuedCertificateStatusWriter)(nil).PatchIssuedCertificateStatus), varargs...)
}

// UpdateIssuedCertificateStatus mocks base method.
func (m *MockIssuedCertificateStatusWriter) UpdateIssuedCertificateStatus(ctx context.Context, obj *v2.IssuedCertificate, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIssuedCertificateStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIssuedCertificateStatus indicates an expected call of UpdateIssuedCertificateStatus.
func (mr *MockIssuedCertificateStatusWriterMockRecorder) UpdateIssuedCertificateStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssuedCertificateStatus", reflect.TypeOf((*MockIssuedCertificateStatusWriter)(nil).UpdateIssuedCertificateStatus), varargs...)
}

// MockIssuedCertificateClient is a mock of IssuedCertificateClient interface.
type MockIssuedCertificateClient struct {
	ctrl     *gomock.Controller
	recorder *MockIssuedCertificateClientMockRecorder
}

// MockIssuedCertificateClientMockRecorder is the mock recorder for MockIssuedCertificateClient.
type MockIssuedCertificateClientMockRecorder struct {
	mock *MockIssuedCertificateClient
}

// NewMockIssuedCertificateClient creates a new mock instance.
func NewMockIssuedCertificateClient(ctrl *gomock.Controller) *MockIssuedCertificateClient {
	mock := &MockIssuedCertificateClient{ctrl: ctrl}
	mock.recorder = &MockIssuedCertificateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuedCertificateClient) EXPECT() *MockIssuedCertificateClientMockRecorder {
	return m.recorder
}

// CreateIssuedCertificate mocks base method.
func (m *MockIssuedCertificateClient) CreateIssuedCertificate(ctx context.Context, obj *v2.IssuedCertificate, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIssuedCertificate indicates an expected call of CreateIssuedCertificate.
func (mr *MockIssuedCertificateClientMockRecorder) CreateIssuedCertificate(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateClient)(nil).CreateIssuedCertificate), varargs...)
}

// DeleteAllOfIssuedCertificate mocks base method.
func (m *MockIssuedCertificateClient) DeleteAllOfIssuedCertificate(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfIssuedCertificate indicates an expected call of DeleteAllOfIssuedCertificate.
func (mr *MockIssuedCertificateClientMockRecorder) DeleteAllOfIssuedCertificate(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateClient)(nil).DeleteAllOfIssuedCertificate), varargs...)
}

// DeleteIssuedCertificate mocks base method.
func (m *MockIssuedCertificateClient) DeleteIssuedCertificate(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIssuedCertificate indicates an expected call of DeleteIssuedCertificate.
func (mr *MockIssuedCertificateClientMockRecorder) DeleteIssuedCertificate(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateClient)(nil).DeleteIssuedCertificate), varargs...)
}

// GetIssuedCertificate mocks base method.
func (m *MockIssuedCertificateClient) GetIssuedCertificate(ctx context.Context, key client.ObjectKey) (*v2.IssuedCertificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuedCertificate", ctx, key)
	ret0, _ := ret[0].(*v2.IssuedCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuedCertificate indicates an expected call of GetIssuedCertificate.
func (mr *MockIssuedCertificateClientMockRecorder) GetIssuedCertificate(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateClient)(nil).GetIssuedCertificate), ctx, key)
}

// ListIssuedCertificate mocks base method.
func (m *MockIssuedCertificateClient) ListIssuedCertificate(ctx context.Context, opts ...client.ListOption) (*v2.IssuedCertificateList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIssuedCertificate", varargs...)
	ret0, _ := ret[0].(*v2.IssuedCertificateList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIssuedCertificate indicates an expected call of ListIssuedCertificate.
func (mr *MockIssuedCertificateClientMockRecorder) ListIssuedCertificate(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateClient)(nil).ListIssuedCertificate), varargs...)
}

// PatchIssuedCertificate mocks base method.
func (m *MockIssuedCertificateClient) PatchIssuedCertificate(ctx context.Context, obj *v2.IssuedCertificate, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchIssuedCertificate indicates an expected call of PatchIssuedCertificate.
func (mr *MockIssuedCertificateClientMockRecorder) PatchIssuedCertificate(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateClient)(nil).PatchIssuedCertificate), varargs...)
}

// PatchIssuedCertificateStatus mocks base method.
func (m *MockIssuedCertificateClient) PatchIssuedCertificateStatus(ctx context.Context, obj *v2.IssuedCertificate, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchIssuedCertificateStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchIssuedCertificateStatus indicates an expected call of PatchIssuedCertificateStatus.
func (mr *MockIssuedCertificateClientMockRecorder) PatchIssuedCertificateStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchIssuedCertificateStatus", reflect.TypeOf((*MockIssuedCertificateClient)(nil).PatchIssuedCertificateStatus), varargs...)
}

// UpdateIssuedCertificate mocks base method.
func (m *MockIssuedCertificateClient) UpdateIssuedCertificate(ctx context.Context, obj *v2.IssuedCertificate, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIssuedCertificate indicates an expected call of UpdateIssuedCertificate.
func (mr *MockIssuedCertificateClientMockRecorder) UpdateIssuedCertificate(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateClient)(nil).UpdateIssuedCertificate), varargs...)
}

// UpdateIssuedCertificateStatus mocks base method.
func (m *MockIssuedCertificateClient) UpdateIssuedCertificateStatus(ctx context.Context, obj *v2.IssuedCertificate, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIssuedCertificateStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIssuedCertificateStatus indicates an expected call of UpdateIssuedCertificateStatus.
func (mr *MockIssuedCertificateClientMockRecorder) UpdateIssuedCertificateStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssuedCertificateStatus", reflect.TypeOf((*MockIssuedCertificateClient)(nil).UpdateIssuedCertificateStatus), varargs...)
}

// UpsertIssuedCertificate mocks base method.
func (m *MockIssuedCertificateClient) UpsertIssuedCertificate(ctx context.Context, obj *v2.IssuedCertificate, transitionFuncs ...v2.IssuedCertificateTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertIssuedCertificate indicates an expected call of UpsertIssuedCertificate.
func (mr *MockIssuedCertificateClientMockRecorder) UpsertIssuedCertificate(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateClient)(nil).UpsertIssuedCertificate), varargs...)
}

// MockMulticlusterIssuedCertificateClient is a mock of MulticlusterIssuedCertificateClient interface.
type MockMulticlusterIssuedCertificateClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterIssuedCertificateClientMockRecorder
}

// MockMulticlusterIssuedCertificateClientMockRecorder is the mock recorder for MockMulticlusterIssuedCertificateClient.
type MockMulticlusterIssuedCertificateClientMockRecorder struct {
	mock *MockMulticlusterIssuedCertificateClient
}

// NewMockMulticlusterIssuedCertificateClient creates a new mock instance.
func NewMockMulticlusterIssuedCertificateClient(ctrl *gomock.Controller) *MockMulticlusterIssuedCertificateClient {
	mock := &MockMulticlusterIssuedCertificateClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterIssuedCertificateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterIssuedCertificateClient) EXPECT() *MockMulticlusterIssuedCertificateClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterIssuedCertificateClient) Cluster(cluster string) (v2.IssuedCertificateClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.IssuedCertificateClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterIssuedCertificateClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterIssuedCertificateClient)(nil).Cluster), cluster)
}

// MockCertificateRequestReader is a mock of CertificateRequestReader interface.
type MockCertificateRequestReader struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestReaderMockRecorder
}

// MockCertificateRequestReaderMockRecorder is the mock recorder for MockCertificateRequestReader.
type MockCertificateRequestReaderMockRecorder struct {
	mock *MockCertificateRequestReader
}

// NewMockCertificateRequestReader creates a new mock instance.
func NewMockCertificateRequestReader(ctrl *gomock.Controller) *MockCertificateRequestReader {
	mock := &MockCertificateRequestReader{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateRequestReader) EXPECT() *MockCertificateRequestReaderMockRecorder {
	return m.recorder
}

// GetCertificateRequest mocks base method.
func (m *MockCertificateRequestReader) GetCertificateRequest(ctx context.Context, key client.ObjectKey) (*v2.CertificateRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateRequest", ctx, key)
	ret0, _ := ret[0].(*v2.CertificateRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateRequest indicates an expected call of GetCertificateRequest.
func (mr *MockCertificateRequestReaderMockRecorder) GetCertificateRequest(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateRequest", reflect.TypeOf((*MockCertificateRequestReader)(nil).GetCertificateRequest), ctx, key)
}

// ListCertificateRequest mocks base method.
func (m *MockCertificateRequestReader) ListCertificateRequest(ctx context.Context, opts ...client.ListOption) (*v2.CertificateRequestList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCertificateRequest", varargs...)
	ret0, _ := ret[0].(*v2.CertificateRequestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificateRequest indicates an expected call of ListCertificateRequest.
func (mr *MockCertificateRequestReaderMockRecorder) ListCertificateRequest(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificateRequest", reflect.TypeOf((*MockCertificateRequestReader)(nil).ListCertificateRequest), varargs...)
}

// MockCertificateRequestWriter is a mock of CertificateRequestWriter interface.
type MockCertificateRequestWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestWriterMockRecorder
}

// MockCertificateRequestWriterMockRecorder is the mock recorder for MockCertificateRequestWriter.
type MockCertificateRequestWriterMockRecorder struct {
	mock *MockCertificateRequestWriter
}

// NewMockCertificateRequestWriter creates a new mock instance.
func NewMockCertificateRequestWriter(ctrl *gomock.Controller) *MockCertificateRequestWriter {
	mock := &MockCertificateRequestWriter{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateRequestWriter) EXPECT() *MockCertificateRequestWriterMockRecorder {
	return m.recorder
}

// CreateCertificateRequest mocks base method.
func (m *MockCertificateRequestWriter) CreateCertificateRequest(ctx context.Context, obj *v2.CertificateRequest, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCertificateRequest indicates an expected call of CreateCertificateRequest.
func (mr *MockCertificateRequestWriterMockRecorder) CreateCertificateRequest(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateRequest", reflect.TypeOf((*MockCertificateRequestWriter)(nil).CreateCertificateRequest), varargs...)
}

// DeleteAllOfCertificateRequest mocks base method.
func (m *MockCertificateRequestWriter) DeleteAllOfCertificateRequest(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfCertificateRequest indicates an expected call of DeleteAllOfCertificateRequest.
func (mr *MockCertificateRequestWriterMockRecorder) DeleteAllOfCertificateRequest(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfCertificateRequest", reflect.TypeOf((*MockCertificateRequestWriter)(nil).DeleteAllOfCertificateRequest), varargs...)
}

// DeleteCertificateRequest mocks base method.
func (m *MockCertificateRequestWriter) DeleteCertificateRequest(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificateRequest indicates an expected call of DeleteCertificateRequest.
func (mr *MockCertificateRequestWriterMockRecorder) DeleteCertificateRequest(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificateRequest", reflect.TypeOf((*MockCertificateRequestWriter)(nil).DeleteCertificateRequest), varargs...)
}

// PatchCertificateRequest mocks base method.
func (m *MockCertificateRequestWriter) PatchCertificateRequest(ctx context.Context, obj *v2.CertificateRequest, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCertificateRequest indicates an expected call of PatchCertificateRequest.
func (mr *MockCertificateRequestWriterMockRecorder) PatchCertificateRequest(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCertificateRequest", reflect.TypeOf((*MockCertificateRequestWriter)(nil).PatchCertificateRequest), varargs...)
}

// UpdateCertificateRequest mocks base method.
func (m *MockCertificateRequestWriter) UpdateCertificateRequest(ctx context.Context, obj *v2.CertificateRequest, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertificateRequest indicates an expected call of UpdateCertificateRequest.
func (mr *MockCertificateRequestWriterMockRecorder) UpdateCertificateRequest(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateRequest", reflect.TypeOf((*MockCertificateRequestWriter)(nil).UpdateCertificateRequest), varargs...)
}

// UpsertCertificateRequest mocks base method.
func (m *MockCertificateRequestWriter) UpsertCertificateRequest(ctx context.Context, obj *v2.CertificateRequest, transitionFuncs ...v2.CertificateRequestTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCertificateRequest indicates an expected call of UpsertCertificateRequest.
func (mr *MockCertificateRequestWriterMockRecorder) UpsertCertificateRequest(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCertificateRequest", reflect.TypeOf((*MockCertificateRequestWriter)(nil).UpsertCertificateRequest), varargs...)
}

// MockCertificateRequestStatusWriter is a mock of CertificateRequestStatusWriter interface.
type MockCertificateRequestStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestStatusWriterMockRecorder
}

// MockCertificateRequestStatusWriterMockRecorder is the mock recorder for MockCertificateRequestStatusWriter.
type MockCertificateRequestStatusWriterMockRecorder struct {
	mock *MockCertificateRequestStatusWriter
}

// NewMockCertificateRequestStatusWriter creates a new mock instance.
func NewMockCertificateRequestStatusWriter(ctrl *gomock.Controller) *MockCertificateRequestStatusWriter {
	mock := &MockCertificateRequestStatusWriter{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateRequestStatusWriter) EXPECT() *MockCertificateRequestStatusWriterMockRecorder {
	return m.recorder
}

// PatchCertificateRequestStatus mocks base method.
func (m *MockCertificateRequestStatusWriter) PatchCertificateRequestStatus(ctx context.Context, obj *v2.CertificateRequest, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCertificateRequestStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCertificateRequestStatus indicates an expected call of PatchCertificateRequestStatus.
func (mr *MockCertificateRequestStatusWriterMockRecorder) PatchCertificateRequestStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCertificateRequestStatus", reflect.TypeOf((*MockCertificateRequestStatusWriter)(nil).PatchCertificateRequestStatus), varargs...)
}

// UpdateCertificateRequestStatus mocks base method.
func (m *MockCertificateRequestStatusWriter) UpdateCertificateRequestStatus(ctx context.Context, obj *v2.CertificateRequest, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCertificateRequestStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertificateRequestStatus indicates an expected call of UpdateCertificateRequestStatus.
func (mr *MockCertificateRequestStatusWriterMockRecorder) UpdateCertificateRequestStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateRequestStatus", reflect.TypeOf((*MockCertificateRequestStatusWriter)(nil).UpdateCertificateRequestStatus), varargs...)
}

// MockCertificateRequestClient is a mock of CertificateRequestClient interface.
type MockCertificateRequestClient struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestClientMockRecorder
}

// MockCertificateRequestClientMockRecorder is the mock recorder for MockCertificateRequestClient.
type MockCertificateRequestClientMockRecorder struct {
	mock *MockCertificateRequestClient
}

// NewMockCertificateRequestClient creates a new mock instance.
func NewMockCertificateRequestClient(ctrl *gomock.Controller) *MockCertificateRequestClient {
	mock := &MockCertificateRequestClient{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateRequestClient) EXPECT() *MockCertificateRequestClientMockRecorder {
	return m.recorder
}

// CreateCertificateRequest mocks base method.
func (m *MockCertificateRequestClient) CreateCertificateRequest(ctx context.Context, obj *v2.CertificateRequest, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCertificateRequest indicates an expected call of CreateCertificateRequest.
func (mr *MockCertificateRequestClientMockRecorder) CreateCertificateRequest(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).CreateCertificateRequest), varargs...)
}

// DeleteAllOfCertificateRequest mocks base method.
func (m *MockCertificateRequestClient) DeleteAllOfCertificateRequest(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfCertificateRequest indicates an expected call of DeleteAllOfCertificateRequest.
func (mr *MockCertificateRequestClientMockRecorder) DeleteAllOfCertificateRequest(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).DeleteAllOfCertificateRequest), varargs...)
}

// DeleteCertificateRequest mocks base method.
func (m *MockCertificateRequestClient) DeleteCertificateRequest(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificateRequest indicates an expected call of DeleteCertificateRequest.
func (mr *MockCertificateRequestClientMockRecorder) DeleteCertificateRequest(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).DeleteCertificateRequest), varargs...)
}

// GetCertificateRequest mocks base method.
func (m *MockCertificateRequestClient) GetCertificateRequest(ctx context.Context, key client.ObjectKey) (*v2.CertificateRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateRequest", ctx, key)
	ret0, _ := ret[0].(*v2.CertificateRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateRequest indicates an expected call of GetCertificateRequest.
func (mr *MockCertificateRequestClientMockRecorder) GetCertificateRequest(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).GetCertificateRequest), ctx, key)
}

// ListCertificateRequest mocks base method.
func (m *MockCertificateRequestClient) ListCertificateRequest(ctx context.Context, opts ...client.ListOption) (*v2.CertificateRequestList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCertificateRequest", varargs...)
	ret0, _ := ret[0].(*v2.CertificateRequestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificateRequest indicates an expected call of ListCertificateRequest.
func (mr *MockCertificateRequestClientMockRecorder) ListCertificateRequest(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).ListCertificateRequest), varargs...)
}

// PatchCertificateRequest mocks base method.
func (m *MockCertificateRequestClient) PatchCertificateRequest(ctx context.Context, obj *v2.CertificateRequest, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCertificateRequest indicates an expected call of PatchCertificateRequest.
func (mr *MockCertificateRequestClientMockRecorder) PatchCertificateRequest(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).PatchCertificateRequest), varargs...)
}

// PatchCertificateRequestStatus mocks base method.
func (m *MockCertificateRequestClient) PatchCertificateRequestStatus(ctx context.Context, obj *v2.CertificateRequest, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCertificateRequestStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCertificateRequestStatus indicates an expected call of PatchCertificateRequestStatus.
func (mr *MockCertificateRequestClientMockRecorder) PatchCertificateRequestStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCertificateRequestStatus", reflect.TypeOf((*MockCertificateRequestClient)(nil).PatchCertificateRequestStatus), varargs...)
}

// UpdateCertificateRequest mocks base method.
func (m *MockCertificateRequestClient) UpdateCertificateRequest(ctx context.Context, obj *v2.CertificateRequest, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertificateRequest indicates an expected call of UpdateCertificateRequest.
func (mr *MockCertificateRequestClientMockRecorder) UpdateCertificateRequest(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).UpdateCertificateRequest), varargs...)
}

// UpdateCertificateRequestStatus mocks base method.
func (m *MockCertificateRequestClient) UpdateCertificateRequestStatus(ctx context.Context, obj *v2.CertificateRequest, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCertificateRequestStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertificateRequestStatus indicates an expected call of UpdateCertificateRequestStatus.
func (mr *MockCertificateRequestClientMockRecorder) UpdateCertificateRequestStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateRequestStatus", reflect.TypeOf((*MockCertificateRequestClient)(nil).UpdateCertificateRequestStatus), varargs...)
}

// UpsertCertificateRequest mocks base method.
func (m *MockCertificateRequestClient) UpsertCertificateRequest(ctx context.Context, obj *v2.CertificateRequest, transitionFuncs ...v2.CertificateRequestTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCertificateRequest indicates an expected call of UpsertCertificateRequest.
func (mr *MockCertificateRequestClientMockRecorder) UpsertCertificateRequest(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).UpsertCertificateRequest), varargs...)
}

// MockMulticlusterCertificateRequestClient is a mock of MulticlusterCertificateRequestClient interface.
type MockMulticlusterCertificateRequestClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterCertificateRequestClientMockRecorder
}

// MockMulticlusterCertificateRequestClientMockRecorder is the mock recorder for MockMulticlusterCertificateRequestClient.
type MockMulticlusterCertificateRequestClientMockRecorder struct {
	mock *MockMulticlusterCertificateRequestClient
}

// NewMockMulticlusterCertificateRequestClient creates a new mock instance.
func NewMockMulticlusterCertificateRequestClient(ctrl *gomock.Controller) *MockMulticlusterCertificateRequestClient {
	mock := &MockMulticlusterCertificateRequestClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterCertificateRequestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterCertificateRequestClient) EXPECT() *MockMulticlusterCertificateRequestClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterCertificateRequestClient) Cluster(cluster string) (v2.CertificateRequestClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.CertificateRequestClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterCertificateRequestClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterCertificateRequestClient)(nil).Cluster), cluster)
}

// MockPodBounceDirectiveReader is a mock of PodBounceDirectiveReader interface.
type MockPodBounceDirectiveReader struct {
	ctrl     *gomock.Controller
	recorder *MockPodBounceDirectiveReaderMockRecorder
}

// MockPodBounceDirectiveReaderMockRecorder is the mock recorder for MockPodBounceDirectiveReader.
type MockPodBounceDirectiveReaderMockRecorder struct {
	mock *MockPodBounceDirectiveReader
}

// NewMockPodBounceDirectiveReader creates a new mock instance.
func NewMockPodBounceDirectiveReader(ctrl *gomock.Controller) *MockPodBounceDirectiveReader {
	mock := &MockPodBounceDirectiveReader{ctrl: ctrl}
	mock.recorder = &MockPodBounceDirectiveReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodBounceDirectiveReader) EXPECT() *MockPodBounceDirectiveReaderMockRecorder {
	return m.recorder
}

// GetPodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveReader) GetPodBounceDirective(ctx context.Context, key client.ObjectKey) (*v2.PodBounceDirective, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodBounceDirective", ctx, key)
	ret0, _ := ret[0].(*v2.PodBounceDirective)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodBounceDirective indicates an expected call of GetPodBounceDirective.
func (mr *MockPodBounceDirectiveReaderMockRecorder) GetPodBounceDirective(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveReader)(nil).GetPodBounceDirective), ctx, key)
}

// ListPodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveReader) ListPodBounceDirective(ctx context.Context, opts ...client.ListOption) (*v2.PodBounceDirectiveList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPodBounceDirective", varargs...)
	ret0, _ := ret[0].(*v2.PodBounceDirectiveList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPodBounceDirective indicates an expected call of ListPodBounceDirective.
func (mr *MockPodBounceDirectiveReaderMockRecorder) ListPodBounceDirective(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveReader)(nil).ListPodBounceDirective), varargs...)
}

// MockPodBounceDirectiveWriter is a mock of PodBounceDirectiveWriter interface.
type MockPodBounceDirectiveWriter struct {
	ctrl     *gomock.Controller
	recorder *MockPodBounceDirectiveWriterMockRecorder
}

// MockPodBounceDirectiveWriterMockRecorder is the mock recorder for MockPodBounceDirectiveWriter.
type MockPodBounceDirectiveWriterMockRecorder struct {
	mock *MockPodBounceDirectiveWriter
}

// NewMockPodBounceDirectiveWriter creates a new mock instance.
func NewMockPodBounceDirectiveWriter(ctrl *gomock.Controller) *MockPodBounceDirectiveWriter {
	mock := &MockPodBounceDirectiveWriter{ctrl: ctrl}
	mock.recorder = &MockPodBounceDirectiveWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodBounceDirectiveWriter) EXPECT() *MockPodBounceDirectiveWriterMockRecorder {
	return m.recorder
}

// CreatePodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveWriter) CreatePodBounceDirective(ctx context.Context, obj *v2.PodBounceDirective, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePodBounceDirective", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePodBounceDirective indicates an expected call of CreatePodBounceDirective.
func (mr *MockPodBounceDirectiveWriterMockRecorder) CreatePodBounceDirective(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveWriter)(nil).CreatePodBounceDirective), varargs...)
}

// DeleteAllOfPodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveWriter) DeleteAllOfPodBounceDirective(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfPodBounceDirective", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfPodBounceDirective indicates an expected call of DeleteAllOfPodBounceDirective.
func (mr *MockPodBounceDirectiveWriterMockRecorder) DeleteAllOfPodBounceDirective(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfPodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveWriter)(nil).DeleteAllOfPodBounceDirective), varargs...)
}

// DeletePodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveWriter) DeletePodBounceDirective(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePodBounceDirective", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePodBounceDirective indicates an expected call of DeletePodBounceDirective.
func (mr *MockPodBounceDirectiveWriterMockRecorder) DeletePodBounceDirective(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveWriter)(nil).DeletePodBounceDirective), varargs...)
}

// PatchPodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveWriter) PatchPodBounceDirective(ctx context.Context, obj *v2.PodBounceDirective, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchPodBounceDirective", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPodBounceDirective indicates an expected call of PatchPodBounceDirective.
func (mr *MockPodBounceDirectiveWriterMockRecorder) PatchPodBounceDirective(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveWriter)(nil).PatchPodBounceDirective), varargs...)
}

// UpdatePodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveWriter) UpdatePodBounceDirective(ctx context.Context, obj *v2.PodBounceDirective, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePodBounceDirective", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePodBounceDirective indicates an expected call of UpdatePodBounceDirective.
func (mr *MockPodBounceDirectiveWriterMockRecorder) UpdatePodBounceDirective(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveWriter)(nil).UpdatePodBounceDirective), varargs...)
}

// UpsertPodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveWriter) UpsertPodBounceDirective(ctx context.Context, obj *v2.PodBounceDirective, transitionFuncs ...v2.PodBounceDirectiveTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertPodBounceDirective", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPodBounceDirective indicates an expected call of UpsertPodBounceDirective.
func (mr *MockPodBounceDirectiveWriterMockRecorder) UpsertPodBounceDirective(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveWriter)(nil).UpsertPodBounceDirective), varargs...)
}

// MockPodBounceDirectiveStatusWriter is a mock of PodBounceDirectiveStatusWriter interface.
type MockPodBounceDirectiveStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockPodBounceDirectiveStatusWriterMockRecorder
}

// MockPodBounceDirectiveStatusWriterMockRecorder is the mock recorder for MockPodBounceDirectiveStatusWriter.
type MockPodBounceDirectiveStatusWriterMockRecorder struct {
	mock *MockPodBounceDirectiveStatusWriter
}

// NewMockPodBounceDirectiveStatusWriter creates a new mock instance.
func NewMockPodBounceDirectiveStatusWriter(ctrl *gomock.Controller) *MockPodBounceDirectiveStatusWriter {
	mock := &MockPodBounceDirectiveStatusWriter{ctrl: ctrl}
	mock.recorder = &MockPodBounceDirectiveStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodBounceDirectiveStatusWriter) EXPECT() *MockPodBounceDirectiveStatusWriterMockRecorder {
	return m.recorder
}

// PatchPodBounceDirectiveStatus mocks base method.
func (m *MockPodBounceDirectiveStatusWriter) PatchPodBounceDirectiveStatus(ctx context.Context, obj *v2.PodBounceDirective, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchPodBounceDirectiveStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPodBounceDirectiveStatus indicates an expected call of PatchPodBounceDirectiveStatus.
func (mr *MockPodBounceDirectiveStatusWriterMockRecorder) PatchPodBounceDirectiveStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPodBounceDirectiveStatus", reflect.TypeOf((*MockPodBounceDirectiveStatusWriter)(nil).PatchPodBounceDirectiveStatus), varargs...)
}

// UpdatePodBounceDirectiveStatus mocks base method.
func (m *MockPodBounceDirectiveStatusWriter) UpdatePodBounceDirectiveStatus(ctx context.Context, obj *v2.PodBounceDirective, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePodBounceDirectiveStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePodBounceDirectiveStatus indicates an expected call of UpdatePodBounceDirectiveStatus.
func (mr *MockPodBounceDirectiveStatusWriterMockRecorder) UpdatePodBounceDirectiveStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePodBounceDirectiveStatus", reflect.TypeOf((*MockPodBounceDirectiveStatusWriter)(nil).UpdatePodBounceDirectiveStatus), varargs...)
}

// MockPodBounceDirectiveClient is a mock of PodBounceDirectiveClient interface.
type MockPodBounceDirectiveClient struct {
	ctrl     *gomock.Controller
	recorder *MockPodBounceDirectiveClientMockRecorder
}

// MockPodBounceDirectiveClientMockRecorder is the mock recorder for MockPodBounceDirectiveClient.
type MockPodBounceDirectiveClientMockRecorder struct {
	mock *MockPodBounceDirectiveClient
}

// NewMockPodBounceDirectiveClient creates a new mock instance.
func NewMockPodBounceDirectiveClient(ctrl *gomock.Controller) *MockPodBounceDirectiveClient {
	mock := &MockPodBounceDirectiveClient{ctrl: ctrl}
	mock.recorder = &MockPodBounceDirectiveClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodBounceDirectiveClient) EXPECT() *MockPodBounceDirectiveClientMockRecorder {
	return m.recorder
}

// CreatePodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveClient) CreatePodBounceDirective(ctx context.Context, obj *v2.PodBounceDirective, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePodBounceDirective", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePodBounceDirective indicates an expected call of CreatePodBounceDirective.
func (mr *MockPodBounceDirectiveClientMockRecorder) CreatePodBounceDirective(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveClient)(nil).CreatePodBounceDirective), varargs...)
}

// DeleteAllOfPodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveClient) DeleteAllOfPodBounceDirective(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfPodBounceDirective", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfPodBounceDirective indicates an expected call of DeleteAllOfPodBounceDirective.
func (mr *MockPodBounceDirectiveClientMockRecorder) DeleteAllOfPodBounceDirective(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfPodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveClient)(nil).DeleteAllOfPodBounceDirective), varargs...)
}

// DeletePodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveClient) DeletePodBounceDirective(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePodBounceDirective", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePodBounceDirective indicates an expected call of DeletePodBounceDirective.
func (mr *MockPodBounceDirectiveClientMockRecorder) DeletePodBounceDirective(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveClient)(nil).DeletePodBounceDirective), varargs...)
}

// GetPodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveClient) GetPodBounceDirective(ctx context.Context, key client.ObjectKey) (*v2.PodBounceDirective, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodBounceDirective", ctx, key)
	ret0, _ := ret[0].(*v2.PodBounceDirective)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodBounceDirective indicates an expected call of GetPodBounceDirective.
func (mr *MockPodBounceDirectiveClientMockRecorder) GetPodBounceDirective(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveClient)(nil).GetPodBounceDirective), ctx, key)
}

// ListPodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveClient) ListPodBounceDirective(ctx context.Context, opts ...client.ListOption) (*v2.PodBounceDirectiveList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPodBounceDirective", varargs...)
	ret0, _ := ret[0].(*v2.PodBounceDirectiveList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPodBounceDirective indicates an expected call of ListPodBounceDirective.
func (mr *MockPodBounceDirectiveClientMockRecorder) ListPodBounceDirective(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveClient)(nil).ListPodBounceDirective), varargs...)
}

// PatchPodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveClient) PatchPodBounceDirective(ctx context.Context, obj *v2.PodBounceDirective, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchPodBounceDirective", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPodBounceDirective indicates an expected call of PatchPodBounceDirective.
func (mr *MockPodBounceDirectiveClientMockRecorder) PatchPodBounceDirective(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveClient)(nil).PatchPodBounceDirective), varargs...)
}

// PatchPodBounceDirectiveStatus mocks base method.
func (m *MockPodBounceDirectiveClient) PatchPodBounceDirectiveStatus(ctx context.Context, obj *v2.PodBounceDirective, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchPodBounceDirectiveStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPodBounceDirectiveStatus indicates an expected call of PatchPodBounceDirectiveStatus.
func (mr *MockPodBounceDirectiveClientMockRecorder) PatchPodBounceDirectiveStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPodBounceDirectiveStatus", reflect.TypeOf((*MockPodBounceDirectiveClient)(nil).PatchPodBounceDirectiveStatus), varargs...)
}

// UpdatePodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveClient) UpdatePodBounceDirective(ctx context.Context, obj *v2.PodBounceDirective, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePodBounceDirective", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePodBounceDirective indicates an expected call of UpdatePodBounceDirective.
func (mr *MockPodBounceDirectiveClientMockRecorder) UpdatePodBounceDirective(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveClient)(nil).UpdatePodBounceDirective), varargs...)
}

// UpdatePodBounceDirectiveStatus mocks base method.
func (m *MockPodBounceDirectiveClient) UpdatePodBounceDirectiveStatus(ctx context.Context, obj *v2.PodBounceDirective, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePodBounceDirectiveStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePodBounceDirectiveStatus indicates an expected call of UpdatePodBounceDirectiveStatus.
func (mr *MockPodBounceDirectiveClientMockRecorder) UpdatePodBounceDirectiveStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePodBounceDirectiveStatus", reflect.TypeOf((*MockPodBounceDirectiveClient)(nil).UpdatePodBounceDirectiveStatus), varargs...)
}

// UpsertPodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveClient) UpsertPodBounceDirective(ctx context.Context, obj *v2.PodBounceDirective, transitionFuncs ...v2.PodBounceDirectiveTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertPodBounceDirective", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPodBounceDirective indicates an expected call of UpsertPodBounceDirective.
func (mr *MockPodBounceDirectiveClientMockRecorder) UpsertPodBounceDirective(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveClient)(nil).UpsertPodBounceDirective), varargs...)
}

// MockMulticlusterPodBounceDirectiveClient is a mock of MulticlusterPodBounceDirectiveClient interface.
type MockMulticlusterPodBounceDirectiveClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterPodBounceDirectiveClientMockRecorder
}

// MockMulticlusterPodBounceDirectiveClientMockRecorder is the mock recorder for MockMulticlusterPodBounceDirectiveClient.
type MockMulticlusterPodBounceDirectiveClientMockRecorder struct {
	mock *MockMulticlusterPodBounceDirectiveClient
}

// NewMockMulticlusterPodBounceDirectiveClient creates a new mock instance.
func NewMockMulticlusterPodBounceDirectiveClient(ctrl *gomock.Controller) *MockMulticlusterPodBounceDirectiveClient {
	mock := &MockMulticlusterPodBounceDirectiveClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterPodBounceDirectiveClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterPodBounceDirectiveClient) EXPECT() *MockMulticlusterPodBounceDirectiveClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterPodBounceDirectiveClient) Cluster(cluster string) (v2.PodBounceDirectiveClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.PodBounceDirectiveClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterPodBounceDirectiveClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterPodBounceDirectiveClient)(nil).Cluster), cluster)
}

// MockXdsConfigReader is a mock of XdsConfigReader interface.
type MockXdsConfigReader struct {
	ctrl     *gomock.Controller
	recorder *MockXdsConfigReaderMockRecorder
}

// MockXdsConfigReaderMockRecorder is the mock recorder for MockXdsConfigReader.
type MockXdsConfigReaderMockRecorder struct {
	mock *MockXdsConfigReader
}

// NewMockXdsConfigReader creates a new mock instance.
func NewMockXdsConfigReader(ctrl *gomock.Controller) *MockXdsConfigReader {
	mock := &MockXdsConfigReader{ctrl: ctrl}
	mock.recorder = &MockXdsConfigReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXdsConfigReader) EXPECT() *MockXdsConfigReaderMockRecorder {
	return m.recorder
}

// GetXdsConfig mocks base method.
func (m *MockXdsConfigReader) GetXdsConfig(ctx context.Context, key client.ObjectKey) (*v2.XdsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetXdsConfig", ctx, key)
	ret0, _ := ret[0].(*v2.XdsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetXdsConfig indicates an expected call of GetXdsConfig.
func (mr *MockXdsConfigReaderMockRecorder) GetXdsConfig(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetXdsConfig", reflect.TypeOf((*MockXdsConfigReader)(nil).GetXdsConfig), ctx, key)
}

// ListXdsConfig mocks base method.
func (m *MockXdsConfigReader) ListXdsConfig(ctx context.Context, opts ...client.ListOption) (*v2.XdsConfigList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListXdsConfig", varargs...)
	ret0, _ := ret[0].(*v2.XdsConfigList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListXdsConfig indicates an expected call of ListXdsConfig.
func (mr *MockXdsConfigReaderMockRecorder) ListXdsConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListXdsConfig", reflect.TypeOf((*MockXdsConfigReader)(nil).ListXdsConfig), varargs...)
}

// MockXdsConfigWriter is a mock of XdsConfigWriter interface.
type MockXdsConfigWriter struct {
	ctrl     *gomock.Controller
	recorder *MockXdsConfigWriterMockRecorder
}

// MockXdsConfigWriterMockRecorder is the mock recorder for MockXdsConfigWriter.
type MockXdsConfigWriterMockRecorder struct {
	mock *MockXdsConfigWriter
}

// NewMockXdsConfigWriter creates a new mock instance.
func NewMockXdsConfigWriter(ctrl *gomock.Controller) *MockXdsConfigWriter {
	mock := &MockXdsConfigWriter{ctrl: ctrl}
	mock.recorder = &MockXdsConfigWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXdsConfigWriter) EXPECT() *MockXdsConfigWriterMockRecorder {
	return m.recorder
}

// CreateXdsConfig mocks base method.
func (m *MockXdsConfigWriter) CreateXdsConfig(ctx context.Context, obj *v2.XdsConfig, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateXdsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateXdsConfig indicates an expected call of CreateXdsConfig.
func (mr *MockXdsConfigWriterMockRecorder) CreateXdsConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateXdsConfig", reflect.TypeOf((*MockXdsConfigWriter)(nil).CreateXdsConfig), varargs...)
}

// DeleteAllOfXdsConfig mocks base method.
func (m *MockXdsConfigWriter) DeleteAllOfXdsConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfXdsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfXdsConfig indicates an expected call of DeleteAllOfXdsConfig.
func (mr *MockXdsConfigWriterMockRecorder) DeleteAllOfXdsConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfXdsConfig", reflect.TypeOf((*MockXdsConfigWriter)(nil).DeleteAllOfXdsConfig), varargs...)
}

// DeleteXdsConfig mocks base method.
func (m *MockXdsConfigWriter) DeleteXdsConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteXdsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteXdsConfig indicates an expected call of DeleteXdsConfig.
func (mr *MockXdsConfigWriterMockRecorder) DeleteXdsConfig(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteXdsConfig", reflect.TypeOf((*MockXdsConfigWriter)(nil).DeleteXdsConfig), varargs...)
}

// PatchXdsConfig mocks base method.
func (m *MockXdsConfigWriter) PatchXdsConfig(ctx context.Context, obj *v2.XdsConfig, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchXdsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchXdsConfig indicates an expected call of PatchXdsConfig.
func (mr *MockXdsConfigWriterMockRecorder) PatchXdsConfig(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchXdsConfig", reflect.TypeOf((*MockXdsConfigWriter)(nil).PatchXdsConfig), varargs...)
}

// UpdateXdsConfig mocks base method.
func (m *MockXdsConfigWriter) UpdateXdsConfig(ctx context.Context, obj *v2.XdsConfig, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateXdsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateXdsConfig indicates an expected call of UpdateXdsConfig.
func (mr *MockXdsConfigWriterMockRecorder) UpdateXdsConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateXdsConfig", reflect.TypeOf((*MockXdsConfigWriter)(nil).UpdateXdsConfig), varargs...)
}

// UpsertXdsConfig mocks base method.
func (m *MockXdsConfigWriter) UpsertXdsConfig(ctx context.Context, obj *v2.XdsConfig, transitionFuncs ...v2.XdsConfigTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertXdsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertXdsConfig indicates an expected call of UpsertXdsConfig.
func (mr *MockXdsConfigWriterMockRecorder) UpsertXdsConfig(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertXdsConfig", reflect.TypeOf((*MockXdsConfigWriter)(nil).UpsertXdsConfig), varargs...)
}

// MockXdsConfigStatusWriter is a mock of XdsConfigStatusWriter interface.
type MockXdsConfigStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockXdsConfigStatusWriterMockRecorder
}

// MockXdsConfigStatusWriterMockRecorder is the mock recorder for MockXdsConfigStatusWriter.
type MockXdsConfigStatusWriterMockRecorder struct {
	mock *MockXdsConfigStatusWriter
}

// NewMockXdsConfigStatusWriter creates a new mock instance.
func NewMockXdsConfigStatusWriter(ctrl *gomock.Controller) *MockXdsConfigStatusWriter {
	mock := &MockXdsConfigStatusWriter{ctrl: ctrl}
	mock.recorder = &MockXdsConfigStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXdsConfigStatusWriter) EXPECT() *MockXdsConfigStatusWriterMockRecorder {
	return m.recorder
}

// PatchXdsConfigStatus mocks base method.
func (m *MockXdsConfigStatusWriter) PatchXdsConfigStatus(ctx context.Context, obj *v2.XdsConfig, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchXdsConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchXdsConfigStatus indicates an expected call of PatchXdsConfigStatus.
func (mr *MockXdsConfigStatusWriterMockRecorder) PatchXdsConfigStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchXdsConfigStatus", reflect.TypeOf((*MockXdsConfigStatusWriter)(nil).PatchXdsConfigStatus), varargs...)
}

// UpdateXdsConfigStatus mocks base method.
func (m *MockXdsConfigStatusWriter) UpdateXdsConfigStatus(ctx context.Context, obj *v2.XdsConfig, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateXdsConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateXdsConfigStatus indicates an expected call of UpdateXdsConfigStatus.
func (mr *MockXdsConfigStatusWriterMockRecorder) UpdateXdsConfigStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateXdsConfigStatus", reflect.TypeOf((*MockXdsConfigStatusWriter)(nil).UpdateXdsConfigStatus), varargs...)
}

// MockXdsConfigClient is a mock of XdsConfigClient interface.
type MockXdsConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockXdsConfigClientMockRecorder
}

// MockXdsConfigClientMockRecorder is the mock recorder for MockXdsConfigClient.
type MockXdsConfigClientMockRecorder struct {
	mock *MockXdsConfigClient
}

// NewMockXdsConfigClient creates a new mock instance.
func NewMockXdsConfigClient(ctrl *gomock.Controller) *MockXdsConfigClient {
	mock := &MockXdsConfigClient{ctrl: ctrl}
	mock.recorder = &MockXdsConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXdsConfigClient) EXPECT() *MockXdsConfigClientMockRecorder {
	return m.recorder
}

// CreateXdsConfig mocks base method.
func (m *MockXdsConfigClient) CreateXdsConfig(ctx context.Context, obj *v2.XdsConfig, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateXdsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateXdsConfig indicates an expected call of CreateXdsConfig.
func (mr *MockXdsConfigClientMockRecorder) CreateXdsConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateXdsConfig", reflect.TypeOf((*MockXdsConfigClient)(nil).CreateXdsConfig), varargs...)
}

// DeleteAllOfXdsConfig mocks base method.
func (m *MockXdsConfigClient) DeleteAllOfXdsConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfXdsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfXdsConfig indicates an expected call of DeleteAllOfXdsConfig.
func (mr *MockXdsConfigClientMockRecorder) DeleteAllOfXdsConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfXdsConfig", reflect.TypeOf((*MockXdsConfigClient)(nil).DeleteAllOfXdsConfig), varargs...)
}

// DeleteXdsConfig mocks base method.
func (m *MockXdsConfigClient) DeleteXdsConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteXdsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteXdsConfig indicates an expected call of DeleteXdsConfig.
func (mr *MockXdsConfigClientMockRecorder) DeleteXdsConfig(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteXdsConfig", reflect.TypeOf((*MockXdsConfigClient)(nil).DeleteXdsConfig), varargs...)
}

// GetXdsConfig mocks base method.
func (m *MockXdsConfigClient) GetXdsConfig(ctx context.Context, key client.ObjectKey) (*v2.XdsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetXdsConfig", ctx, key)
	ret0, _ := ret[0].(*v2.XdsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetXdsConfig indicates an expected call of GetXdsConfig.
func (mr *MockXdsConfigClientMockRecorder) GetXdsConfig(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetXdsConfig", reflect.TypeOf((*MockXdsConfigClient)(nil).GetXdsConfig), ctx, key)
}

// ListXdsConfig mocks base method.
func (m *MockXdsConfigClient) ListXdsConfig(ctx context.Context, opts ...client.ListOption) (*v2.XdsConfigList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListXdsConfig", varargs...)
	ret0, _ := ret[0].(*v2.XdsConfigList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListXdsConfig indicates an expected call of ListXdsConfig.
func (mr *MockXdsConfigClientMockRecorder) ListXdsConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListXdsConfig", reflect.TypeOf((*MockXdsConfigClient)(nil).ListXdsConfig), varargs...)
}

// PatchXdsConfig mocks base method.
func (m *MockXdsConfigClient) PatchXdsConfig(ctx context.Context, obj *v2.XdsConfig, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchXdsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchXdsConfig indicates an expected call of PatchXdsConfig.
func (mr *MockXdsConfigClientMockRecorder) PatchXdsConfig(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchXdsConfig", reflect.TypeOf((*MockXdsConfigClient)(nil).PatchXdsConfig), varargs...)
}

// PatchXdsConfigStatus mocks base method.
func (m *MockXdsConfigClient) PatchXdsConfigStatus(ctx context.Context, obj *v2.XdsConfig, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchXdsConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchXdsConfigStatus indicates an expected call of PatchXdsConfigStatus.
func (mr *MockXdsConfigClientMockRecorder) PatchXdsConfigStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchXdsConfigStatus", reflect.TypeOf((*MockXdsConfigClient)(nil).PatchXdsConfigStatus), varargs...)
}

// UpdateXdsConfig mocks base method.
func (m *MockXdsConfigClient) UpdateXdsConfig(ctx context.Context, obj *v2.XdsConfig, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateXdsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateXdsConfig indicates an expected call of UpdateXdsConfig.
func (mr *MockXdsConfigClientMockRecorder) UpdateXdsConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateXdsConfig", reflect.TypeOf((*MockXdsConfigClient)(nil).UpdateXdsConfig), varargs...)
}

// UpdateXdsConfigStatus mocks base method.
func (m *MockXdsConfigClient) UpdateXdsConfigStatus(ctx context.Context, obj *v2.XdsConfig, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateXdsConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateXdsConfigStatus indicates an expected call of UpdateXdsConfigStatus.
func (mr *MockXdsConfigClientMockRecorder) UpdateXdsConfigStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateXdsConfigStatus", reflect.TypeOf((*MockXdsConfigClient)(nil).UpdateXdsConfigStatus), varargs...)
}

// UpsertXdsConfig mocks base method.
func (m *MockXdsConfigClient) UpsertXdsConfig(ctx context.Context, obj *v2.XdsConfig, transitionFuncs ...v2.XdsConfigTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertXdsConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertXdsConfig indicates an expected call of UpsertXdsConfig.
func (mr *MockXdsConfigClientMockRecorder) UpsertXdsConfig(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertXdsConfig", reflect.TypeOf((*MockXdsConfigClient)(nil).UpsertXdsConfig), varargs...)
}

// MockMulticlusterXdsConfigClient is a mock of MulticlusterXdsConfigClient interface.
type MockMulticlusterXdsConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterXdsConfigClientMockRecorder
}

// MockMulticlusterXdsConfigClientMockRecorder is the mock recorder for MockMulticlusterXdsConfigClient.
type MockMulticlusterXdsConfigClientMockRecorder struct {
	mock *MockMulticlusterXdsConfigClient
}

// NewMockMulticlusterXdsConfigClient creates a new mock instance.
func NewMockMulticlusterXdsConfigClient(ctrl *gomock.Controller) *MockMulticlusterXdsConfigClient {
	mock := &MockMulticlusterXdsConfigClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterXdsConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterXdsConfigClient) EXPECT() *MockMulticlusterXdsConfigClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterXdsConfigClient) Cluster(cluster string) (v2.XdsConfigClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.XdsConfigClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterXdsConfigClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterXdsConfigClient)(nil).Cluster), cluster)
}

// MockDiscoveredGatewayReader is a mock of DiscoveredGatewayReader interface.
type MockDiscoveredGatewayReader struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredGatewayReaderMockRecorder
}

// MockDiscoveredGatewayReaderMockRecorder is the mock recorder for MockDiscoveredGatewayReader.
type MockDiscoveredGatewayReaderMockRecorder struct {
	mock *MockDiscoveredGatewayReader
}

// NewMockDiscoveredGatewayReader creates a new mock instance.
func NewMockDiscoveredGatewayReader(ctrl *gomock.Controller) *MockDiscoveredGatewayReader {
	mock := &MockDiscoveredGatewayReader{ctrl: ctrl}
	mock.recorder = &MockDiscoveredGatewayReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredGatewayReader) EXPECT() *MockDiscoveredGatewayReaderMockRecorder {
	return m.recorder
}

// GetDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayReader) GetDiscoveredGateway(ctx context.Context, key client.ObjectKey) (*v2.DiscoveredGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscoveredGateway", ctx, key)
	ret0, _ := ret[0].(*v2.DiscoveredGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscoveredGateway indicates an expected call of GetDiscoveredGateway.
func (mr *MockDiscoveredGatewayReaderMockRecorder) GetDiscoveredGateway(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayReader)(nil).GetDiscoveredGateway), ctx, key)
}

// ListDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayReader) ListDiscoveredGateway(ctx context.Context, opts ...client.ListOption) (*v2.DiscoveredGatewayList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDiscoveredGateway", varargs...)
	ret0, _ := ret[0].(*v2.DiscoveredGatewayList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDiscoveredGateway indicates an expected call of ListDiscoveredGateway.
func (mr *MockDiscoveredGatewayReaderMockRecorder) ListDiscoveredGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayReader)(nil).ListDiscoveredGateway), varargs...)
}

// MockDiscoveredGatewayWriter is a mock of DiscoveredGatewayWriter interface.
type MockDiscoveredGatewayWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredGatewayWriterMockRecorder
}

// MockDiscoveredGatewayWriterMockRecorder is the mock recorder for MockDiscoveredGatewayWriter.
type MockDiscoveredGatewayWriterMockRecorder struct {
	mock *MockDiscoveredGatewayWriter
}

// NewMockDiscoveredGatewayWriter creates a new mock instance.
func NewMockDiscoveredGatewayWriter(ctrl *gomock.Controller) *MockDiscoveredGatewayWriter {
	mock := &MockDiscoveredGatewayWriter{ctrl: ctrl}
	mock.recorder = &MockDiscoveredGatewayWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredGatewayWriter) EXPECT() *MockDiscoveredGatewayWriterMockRecorder {
	return m.recorder
}

// CreateDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayWriter) CreateDiscoveredGateway(ctx context.Context, obj *v2.DiscoveredGateway, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDiscoveredGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDiscoveredGateway indicates an expected call of CreateDiscoveredGateway.
func (mr *MockDiscoveredGatewayWriterMockRecorder) CreateDiscoveredGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayWriter)(nil).CreateDiscoveredGateway), varargs...)
}

// DeleteAllOfDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayWriter) DeleteAllOfDiscoveredGateway(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfDiscoveredGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfDiscoveredGateway indicates an expected call of DeleteAllOfDiscoveredGateway.
func (mr *MockDiscoveredGatewayWriterMockRecorder) DeleteAllOfDiscoveredGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayWriter)(nil).DeleteAllOfDiscoveredGateway), varargs...)
}

// DeleteDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayWriter) DeleteDiscoveredGateway(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDiscoveredGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDiscoveredGateway indicates an expected call of DeleteDiscoveredGateway.
func (mr *MockDiscoveredGatewayWriterMockRecorder) DeleteDiscoveredGateway(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayWriter)(nil).DeleteDiscoveredGateway), varargs...)
}

// PatchDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayWriter) PatchDiscoveredGateway(ctx context.Context, obj *v2.DiscoveredGateway, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchDiscoveredGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDiscoveredGateway indicates an expected call of PatchDiscoveredGateway.
func (mr *MockDiscoveredGatewayWriterMockRecorder) PatchDiscoveredGateway(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayWriter)(nil).PatchDiscoveredGateway), varargs...)
}

// UpdateDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayWriter) UpdateDiscoveredGateway(ctx context.Context, obj *v2.DiscoveredGateway, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDiscoveredGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDiscoveredGateway indicates an expected call of UpdateDiscoveredGateway.
func (mr *MockDiscoveredGatewayWriterMockRecorder) UpdateDiscoveredGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayWriter)(nil).UpdateDiscoveredGateway), varargs...)
}

// UpsertDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayWriter) UpsertDiscoveredGateway(ctx context.Context, obj *v2.DiscoveredGateway, transitionFuncs ...v2.DiscoveredGatewayTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertDiscoveredGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertDiscoveredGateway indicates an expected call of UpsertDiscoveredGateway.
func (mr *MockDiscoveredGatewayWriterMockRecorder) UpsertDiscoveredGateway(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayWriter)(nil).UpsertDiscoveredGateway), varargs...)
}

// MockDiscoveredGatewayStatusWriter is a mock of DiscoveredGatewayStatusWriter interface.
type MockDiscoveredGatewayStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredGatewayStatusWriterMockRecorder
}

// MockDiscoveredGatewayStatusWriterMockRecorder is the mock recorder for MockDiscoveredGatewayStatusWriter.
type MockDiscoveredGatewayStatusWriterMockRecorder struct {
	mock *MockDiscoveredGatewayStatusWriter
}

// NewMockDiscoveredGatewayStatusWriter creates a new mock instance.
func NewMockDiscoveredGatewayStatusWriter(ctrl *gomock.Controller) *MockDiscoveredGatewayStatusWriter {
	mock := &MockDiscoveredGatewayStatusWriter{ctrl: ctrl}
	mock.recorder = &MockDiscoveredGatewayStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredGatewayStatusWriter) EXPECT() *MockDiscoveredGatewayStatusWriterMockRecorder {
	return m.recorder
}

// PatchDiscoveredGatewayStatus mocks base method.
func (m *MockDiscoveredGatewayStatusWriter) PatchDiscoveredGatewayStatus(ctx context.Context, obj *v2.DiscoveredGateway, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchDiscoveredGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDiscoveredGatewayStatus indicates an expected call of PatchDiscoveredGatewayStatus.
func (mr *MockDiscoveredGatewayStatusWriterMockRecorder) PatchDiscoveredGatewayStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDiscoveredGatewayStatus", reflect.TypeOf((*MockDiscoveredGatewayStatusWriter)(nil).PatchDiscoveredGatewayStatus), varargs...)
}

// UpdateDiscoveredGatewayStatus mocks base method.
func (m *MockDiscoveredGatewayStatusWriter) UpdateDiscoveredGatewayStatus(ctx context.Context, obj *v2.DiscoveredGateway, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDiscoveredGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDiscoveredGatewayStatus indicates an expected call of UpdateDiscoveredGatewayStatus.
func (mr *MockDiscoveredGatewayStatusWriterMockRecorder) UpdateDiscoveredGatewayStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiscoveredGatewayStatus", reflect.TypeOf((*MockDiscoveredGatewayStatusWriter)(nil).UpdateDiscoveredGatewayStatus), varargs...)
}

// MockDiscoveredGatewayClient is a mock of DiscoveredGatewayClient interface.
type MockDiscoveredGatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredGatewayClientMockRecorder
}

// MockDiscoveredGatewayClientMockRecorder is the mock recorder for MockDiscoveredGatewayClient.
type MockDiscoveredGatewayClientMockRecorder struct {
	mock *MockDiscoveredGatewayClient
}

// NewMockDiscoveredGatewayClient creates a new mock instance.
func NewMockDiscoveredGatewayClient(ctrl *gomock.Controller) *MockDiscoveredGatewayClient {
	mock := &MockDiscoveredGatewayClient{ctrl: ctrl}
	mock.recorder = &MockDiscoveredGatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredGatewayClient) EXPECT() *MockDiscoveredGatewayClientMockRecorder {
	return m.recorder
}

// CreateDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayClient) CreateDiscoveredGateway(ctx context.Context, obj *v2.DiscoveredGateway, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDiscoveredGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDiscoveredGateway indicates an expected call of CreateDiscoveredGateway.
func (mr *MockDiscoveredGatewayClientMockRecorder) CreateDiscoveredGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayClient)(nil).CreateDiscoveredGateway), varargs...)
}

// DeleteAllOfDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayClient) DeleteAllOfDiscoveredGateway(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfDiscoveredGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfDiscoveredGateway indicates an expected call of DeleteAllOfDiscoveredGateway.
func (mr *MockDiscoveredGatewayClientMockRecorder) DeleteAllOfDiscoveredGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayClient)(nil).DeleteAllOfDiscoveredGateway), varargs...)
}

// DeleteDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayClient) DeleteDiscoveredGateway(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDiscoveredGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDiscoveredGateway indicates an expected call of DeleteDiscoveredGateway.
func (mr *MockDiscoveredGatewayClientMockRecorder) DeleteDiscoveredGateway(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayClient)(nil).DeleteDiscoveredGateway), varargs...)
}

// GetDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayClient) GetDiscoveredGateway(ctx context.Context, key client.ObjectKey) (*v2.DiscoveredGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscoveredGateway", ctx, key)
	ret0, _ := ret[0].(*v2.DiscoveredGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscoveredGateway indicates an expected call of GetDiscoveredGateway.
func (mr *MockDiscoveredGatewayClientMockRecorder) GetDiscoveredGateway(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayClient)(nil).GetDiscoveredGateway), ctx, key)
}

// ListDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayClient) ListDiscoveredGateway(ctx context.Context, opts ...client.ListOption) (*v2.DiscoveredGatewayList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDiscoveredGateway", varargs...)
	ret0, _ := ret[0].(*v2.DiscoveredGatewayList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDiscoveredGateway indicates an expected call of ListDiscoveredGateway.
func (mr *MockDiscoveredGatewayClientMockRecorder) ListDiscoveredGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayClient)(nil).ListDiscoveredGateway), varargs...)
}

// PatchDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayClient) PatchDiscoveredGateway(ctx context.Context, obj *v2.DiscoveredGateway, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchDiscoveredGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDiscoveredGateway indicates an expected call of PatchDiscoveredGateway.
func (mr *MockDiscoveredGatewayClientMockRecorder) PatchDiscoveredGateway(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayClient)(nil).PatchDiscoveredGateway), varargs...)
}

// PatchDiscoveredGatewayStatus mocks base method.
func (m *MockDiscoveredGatewayClient) PatchDiscoveredGatewayStatus(ctx context.Context, obj *v2.DiscoveredGateway, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchDiscoveredGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDiscoveredGatewayStatus indicates an expected call of PatchDiscoveredGatewayStatus.
func (mr *MockDiscoveredGatewayClientMockRecorder) PatchDiscoveredGatewayStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDiscoveredGatewayStatus", reflect.TypeOf((*MockDiscoveredGatewayClient)(nil).PatchDiscoveredGatewayStatus), varargs...)
}

// UpdateDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayClient) UpdateDiscoveredGateway(ctx context.Context, obj *v2.DiscoveredGateway, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDiscoveredGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDiscoveredGateway indicates an expected call of UpdateDiscoveredGateway.
func (mr *MockDiscoveredGatewayClientMockRecorder) UpdateDiscoveredGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayClient)(nil).UpdateDiscoveredGateway), varargs...)
}

// UpdateDiscoveredGatewayStatus mocks base method.
func (m *MockDiscoveredGatewayClient) UpdateDiscoveredGatewayStatus(ctx context.Context, obj *v2.DiscoveredGateway, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDiscoveredGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDiscoveredGatewayStatus indicates an expected call of UpdateDiscoveredGatewayStatus.
func (mr *MockDiscoveredGatewayClientMockRecorder) UpdateDiscoveredGatewayStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiscoveredGatewayStatus", reflect.TypeOf((*MockDiscoveredGatewayClient)(nil).UpdateDiscoveredGatewayStatus), varargs...)
}

// UpsertDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayClient) UpsertDiscoveredGateway(ctx context.Context, obj *v2.DiscoveredGateway, transitionFuncs ...v2.DiscoveredGatewayTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertDiscoveredGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertDiscoveredGateway indicates an expected call of UpsertDiscoveredGateway.
func (mr *MockDiscoveredGatewayClientMockRecorder) UpsertDiscoveredGateway(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayClient)(nil).UpsertDiscoveredGateway), varargs...)
}

// MockMulticlusterDiscoveredGatewayClient is a mock of MulticlusterDiscoveredGatewayClient interface.
type MockMulticlusterDiscoveredGatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterDiscoveredGatewayClientMockRecorder
}

// MockMulticlusterDiscoveredGatewayClientMockRecorder is the mock recorder for MockMulticlusterDiscoveredGatewayClient.
type MockMulticlusterDiscoveredGatewayClientMockRecorder struct {
	mock *MockMulticlusterDiscoveredGatewayClient
}

// NewMockMulticlusterDiscoveredGatewayClient creates a new mock instance.
func NewMockMulticlusterDiscoveredGatewayClient(ctrl *gomock.Controller) *MockMulticlusterDiscoveredGatewayClient {
	mock := &MockMulticlusterDiscoveredGatewayClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterDiscoveredGatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterDiscoveredGatewayClient) EXPECT() *MockMulticlusterDiscoveredGatewayClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterDiscoveredGatewayClient) Cluster(cluster string) (v2.DiscoveredGatewayClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.DiscoveredGatewayClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterDiscoveredGatewayClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterDiscoveredGatewayClient)(nil).Cluster), cluster)
}

// MockMeshReader is a mock of MeshReader interface.
type MockMeshReader struct {
	ctrl     *gomock.Controller
	recorder *MockMeshReaderMockRecorder
}

// MockMeshReaderMockRecorder is the mock recorder for MockMeshReader.
type MockMeshReaderMockRecorder struct {
	mock *MockMeshReader
}

// NewMockMeshReader creates a new mock instance.
func NewMockMeshReader(ctrl *gomock.Controller) *MockMeshReader {
	mock := &MockMeshReader{ctrl: ctrl}
	mock.recorder = &MockMeshReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshReader) EXPECT() *MockMeshReaderMockRecorder {
	return m.recorder
}

// GetMesh mocks base method.
func (m *MockMeshReader) GetMesh(ctx context.Context, key client.ObjectKey) (*v2.Mesh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMesh", ctx, key)
	ret0, _ := ret[0].(*v2.Mesh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMesh indicates an expected call of GetMesh.
func (mr *MockMeshReaderMockRecorder) GetMesh(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMesh", reflect.TypeOf((*MockMeshReader)(nil).GetMesh), ctx, key)
}

// ListMesh mocks base method.
func (m *MockMeshReader) ListMesh(ctx context.Context, opts ...client.ListOption) (*v2.MeshList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMesh", varargs...)
	ret0, _ := ret[0].(*v2.MeshList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMesh indicates an expected call of ListMesh.
func (mr *MockMeshReaderMockRecorder) ListMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMesh", reflect.TypeOf((*MockMeshReader)(nil).ListMesh), varargs...)
}

// MockMeshWriter is a mock of MeshWriter interface.
type MockMeshWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWriterMockRecorder
}

// MockMeshWriterMockRecorder is the mock recorder for MockMeshWriter.
type MockMeshWriterMockRecorder struct {
	mock *MockMeshWriter
}

// NewMockMeshWriter creates a new mock instance.
func NewMockMeshWriter(ctrl *gomock.Controller) *MockMeshWriter {
	mock := &MockMeshWriter{ctrl: ctrl}
	mock.recorder = &MockMeshWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshWriter) EXPECT() *MockMeshWriterMockRecorder {
	return m.recorder
}

// CreateMesh mocks base method.
func (m *MockMeshWriter) CreateMesh(ctx context.Context, obj *v2.Mesh, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMesh indicates an expected call of CreateMesh.
func (mr *MockMeshWriterMockRecorder) CreateMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMesh", reflect.TypeOf((*MockMeshWriter)(nil).CreateMesh), varargs...)
}

// DeleteAllOfMesh mocks base method.
func (m *MockMeshWriter) DeleteAllOfMesh(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMesh indicates an expected call of DeleteAllOfMesh.
func (mr *MockMeshWriterMockRecorder) DeleteAllOfMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMesh", reflect.TypeOf((*MockMeshWriter)(nil).DeleteAllOfMesh), varargs...)
}

// DeleteMesh mocks base method.
func (m *MockMeshWriter) DeleteMesh(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMesh indicates an expected call of DeleteMesh.
func (mr *MockMeshWriterMockRecorder) DeleteMesh(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMesh", reflect.TypeOf((*MockMeshWriter)(nil).DeleteMesh), varargs...)
}

// PatchMesh mocks base method.
func (m *MockMeshWriter) PatchMesh(ctx context.Context, obj *v2.Mesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMesh indicates an expected call of PatchMesh.
func (mr *MockMeshWriterMockRecorder) PatchMesh(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMesh", reflect.TypeOf((*MockMeshWriter)(nil).PatchMesh), varargs...)
}

// UpdateMesh mocks base method.
func (m *MockMeshWriter) UpdateMesh(ctx context.Context, obj *v2.Mesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMesh indicates an expected call of UpdateMesh.
func (mr *MockMeshWriterMockRecorder) UpdateMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMesh", reflect.TypeOf((*MockMeshWriter)(nil).UpdateMesh), varargs...)
}

// UpsertMesh mocks base method.
func (m *MockMeshWriter) UpsertMesh(ctx context.Context, obj *v2.Mesh, transitionFuncs ...v2.MeshTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMesh indicates an expected call of UpsertMesh.
func (mr *MockMeshWriterMockRecorder) UpsertMesh(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMesh", reflect.TypeOf((*MockMeshWriter)(nil).UpsertMesh), varargs...)
}

// MockMeshStatusWriter is a mock of MeshStatusWriter interface.
type MockMeshStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMeshStatusWriterMockRecorder
}

// MockMeshStatusWriterMockRecorder is the mock recorder for MockMeshStatusWriter.
type MockMeshStatusWriterMockRecorder struct {
	mock *MockMeshStatusWriter
}

// NewMockMeshStatusWriter creates a new mock instance.
func NewMockMeshStatusWriter(ctrl *gomock.Controller) *MockMeshStatusWriter {
	mock := &MockMeshStatusWriter{ctrl: ctrl}
	mock.recorder = &MockMeshStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshStatusWriter) EXPECT() *MockMeshStatusWriterMockRecorder {
	return m.recorder
}

// PatchMeshStatus mocks base method.
func (m *MockMeshStatusWriter) PatchMeshStatus(ctx context.Context, obj *v2.Mesh, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshStatus indicates an expected call of PatchMeshStatus.
func (mr *MockMeshStatusWriterMockRecorder) PatchMeshStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshStatus", reflect.TypeOf((*MockMeshStatusWriter)(nil).PatchMeshStatus), varargs...)
}

// UpdateMeshStatus mocks base method.
func (m *MockMeshStatusWriter) UpdateMeshStatus(ctx context.Context, obj *v2.Mesh, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshStatus indicates an expected call of UpdateMeshStatus.
func (mr *MockMeshStatusWriterMockRecorder) UpdateMeshStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshStatus", reflect.TypeOf((*MockMeshStatusWriter)(nil).UpdateMeshStatus), varargs...)
}

// MockMeshClient is a mock of MeshClient interface.
type MockMeshClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeshClientMockRecorder
}

// MockMeshClientMockRecorder is the mock recorder for MockMeshClient.
type MockMeshClientMockRecorder struct {
	mock *MockMeshClient
}

// NewMockMeshClient creates a new mock instance.
func NewMockMeshClient(ctrl *gomock.Controller) *MockMeshClient {
	mock := &MockMeshClient{ctrl: ctrl}
	mock.recorder = &MockMeshClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshClient) EXPECT() *MockMeshClientMockRecorder {
	return m.recorder
}

// CreateMesh mocks base method.
func (m *MockMeshClient) CreateMesh(ctx context.Context, obj *v2.Mesh, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMesh indicates an expected call of CreateMesh.
func (mr *MockMeshClientMockRecorder) CreateMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMesh", reflect.TypeOf((*MockMeshClient)(nil).CreateMesh), varargs...)
}

// DeleteAllOfMesh mocks base method.
func (m *MockMeshClient) DeleteAllOfMesh(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMesh indicates an expected call of DeleteAllOfMesh.
func (mr *MockMeshClientMockRecorder) DeleteAllOfMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMesh", reflect.TypeOf((*MockMeshClient)(nil).DeleteAllOfMesh), varargs...)
}

// DeleteMesh mocks base method.
func (m *MockMeshClient) DeleteMesh(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMesh indicates an expected call of DeleteMesh.
func (mr *MockMeshClientMockRecorder) DeleteMesh(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMesh", reflect.TypeOf((*MockMeshClient)(nil).DeleteMesh), varargs...)
}

// GetMesh mocks base method.
func (m *MockMeshClient) GetMesh(ctx context.Context, key client.ObjectKey) (*v2.Mesh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMesh", ctx, key)
	ret0, _ := ret[0].(*v2.Mesh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMesh indicates an expected call of GetMesh.
func (mr *MockMeshClientMockRecorder) GetMesh(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMesh", reflect.TypeOf((*MockMeshClient)(nil).GetMesh), ctx, key)
}

// ListMesh mocks base method.
func (m *MockMeshClient) ListMesh(ctx context.Context, opts ...client.ListOption) (*v2.MeshList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMesh", varargs...)
	ret0, _ := ret[0].(*v2.MeshList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMesh indicates an expected call of ListMesh.
func (mr *MockMeshClientMockRecorder) ListMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMesh", reflect.TypeOf((*MockMeshClient)(nil).ListMesh), varargs...)
}

// PatchMesh mocks base method.
func (m *MockMeshClient) PatchMesh(ctx context.Context, obj *v2.Mesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMesh indicates an expected call of PatchMesh.
func (mr *MockMeshClientMockRecorder) PatchMesh(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMesh", reflect.TypeOf((*MockMeshClient)(nil).PatchMesh), varargs...)
}

// PatchMeshStatus mocks base method.
func (m *MockMeshClient) PatchMeshStatus(ctx context.Context, obj *v2.Mesh, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshStatus indicates an expected call of PatchMeshStatus.
func (mr *MockMeshClientMockRecorder) PatchMeshStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshStatus", reflect.TypeOf((*MockMeshClient)(nil).PatchMeshStatus), varargs...)
}

// UpdateMesh mocks base method.
func (m *MockMeshClient) UpdateMesh(ctx context.Context, obj *v2.Mesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMesh indicates an expected call of UpdateMesh.
func (mr *MockMeshClientMockRecorder) UpdateMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMesh", reflect.TypeOf((*MockMeshClient)(nil).UpdateMesh), varargs...)
}

// UpdateMeshStatus mocks base method.
func (m *MockMeshClient) UpdateMeshStatus(ctx context.Context, obj *v2.Mesh, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshStatus indicates an expected call of UpdateMeshStatus.
func (mr *MockMeshClientMockRecorder) UpdateMeshStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshStatus", reflect.TypeOf((*MockMeshClient)(nil).UpdateMeshStatus), varargs...)
}

// UpsertMesh mocks base method.
func (m *MockMeshClient) UpsertMesh(ctx context.Context, obj *v2.Mesh, transitionFuncs ...v2.MeshTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMesh indicates an expected call of UpsertMesh.
func (mr *MockMeshClientMockRecorder) UpsertMesh(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMesh", reflect.TypeOf((*MockMeshClient)(nil).UpsertMesh), varargs...)
}

// MockMulticlusterMeshClient is a mock of MulticlusterMeshClient interface.
type MockMulticlusterMeshClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMeshClientMockRecorder
}

// MockMulticlusterMeshClientMockRecorder is the mock recorder for MockMulticlusterMeshClient.
type MockMulticlusterMeshClientMockRecorder struct {
	mock *MockMulticlusterMeshClient
}

// NewMockMulticlusterMeshClient creates a new mock instance.
func NewMockMulticlusterMeshClient(ctrl *gomock.Controller) *MockMulticlusterMeshClient {
	mock := &MockMulticlusterMeshClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMeshClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterMeshClient) EXPECT() *MockMulticlusterMeshClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterMeshClient) Cluster(cluster string) (v2.MeshClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.MeshClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterMeshClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterMeshClient)(nil).Cluster), cluster)
}

// MockDiscoveredCNIReader is a mock of DiscoveredCNIReader interface.
type MockDiscoveredCNIReader struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredCNIReaderMockRecorder
}

// MockDiscoveredCNIReaderMockRecorder is the mock recorder for MockDiscoveredCNIReader.
type MockDiscoveredCNIReaderMockRecorder struct {
	mock *MockDiscoveredCNIReader
}

// NewMockDiscoveredCNIReader creates a new mock instance.
func NewMockDiscoveredCNIReader(ctrl *gomock.Controller) *MockDiscoveredCNIReader {
	mock := &MockDiscoveredCNIReader{ctrl: ctrl}
	mock.recorder = &MockDiscoveredCNIReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredCNIReader) EXPECT() *MockDiscoveredCNIReaderMockRecorder {
	return m.recorder
}

// GetDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIReader) GetDiscoveredCNI(ctx context.Context, key client.ObjectKey) (*v2.DiscoveredCNI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscoveredCNI", ctx, key)
	ret0, _ := ret[0].(*v2.DiscoveredCNI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscoveredCNI indicates an expected call of GetDiscoveredCNI.
func (mr *MockDiscoveredCNIReaderMockRecorder) GetDiscoveredCNI(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIReader)(nil).GetDiscoveredCNI), ctx, key)
}

// ListDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIReader) ListDiscoveredCNI(ctx context.Context, opts ...client.ListOption) (*v2.DiscoveredCNIList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDiscoveredCNI", varargs...)
	ret0, _ := ret[0].(*v2.DiscoveredCNIList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDiscoveredCNI indicates an expected call of ListDiscoveredCNI.
func (mr *MockDiscoveredCNIReaderMockRecorder) ListDiscoveredCNI(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIReader)(nil).ListDiscoveredCNI), varargs...)
}

// MockDiscoveredCNIWriter is a mock of DiscoveredCNIWriter interface.
type MockDiscoveredCNIWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredCNIWriterMockRecorder
}

// MockDiscoveredCNIWriterMockRecorder is the mock recorder for MockDiscoveredCNIWriter.
type MockDiscoveredCNIWriterMockRecorder struct {
	mock *MockDiscoveredCNIWriter
}

// NewMockDiscoveredCNIWriter creates a new mock instance.
func NewMockDiscoveredCNIWriter(ctrl *gomock.Controller) *MockDiscoveredCNIWriter {
	mock := &MockDiscoveredCNIWriter{ctrl: ctrl}
	mock.recorder = &MockDiscoveredCNIWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredCNIWriter) EXPECT() *MockDiscoveredCNIWriterMockRecorder {
	return m.recorder
}

// CreateDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIWriter) CreateDiscoveredCNI(ctx context.Context, obj *v2.DiscoveredCNI, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDiscoveredCNI", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDiscoveredCNI indicates an expected call of CreateDiscoveredCNI.
func (mr *MockDiscoveredCNIWriterMockRecorder) CreateDiscoveredCNI(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIWriter)(nil).CreateDiscoveredCNI), varargs...)
}

// DeleteAllOfDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIWriter) DeleteAllOfDiscoveredCNI(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfDiscoveredCNI", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfDiscoveredCNI indicates an expected call of DeleteAllOfDiscoveredCNI.
func (mr *MockDiscoveredCNIWriterMockRecorder) DeleteAllOfDiscoveredCNI(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIWriter)(nil).DeleteAllOfDiscoveredCNI), varargs...)
}

// DeleteDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIWriter) DeleteDiscoveredCNI(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDiscoveredCNI", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDiscoveredCNI indicates an expected call of DeleteDiscoveredCNI.
func (mr *MockDiscoveredCNIWriterMockRecorder) DeleteDiscoveredCNI(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIWriter)(nil).DeleteDiscoveredCNI), varargs...)
}

// PatchDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIWriter) PatchDiscoveredCNI(ctx context.Context, obj *v2.DiscoveredCNI, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchDiscoveredCNI", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDiscoveredCNI indicates an expected call of PatchDiscoveredCNI.
func (mr *MockDiscoveredCNIWriterMockRecorder) PatchDiscoveredCNI(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIWriter)(nil).PatchDiscoveredCNI), varargs...)
}

// UpdateDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIWriter) UpdateDiscoveredCNI(ctx context.Context, obj *v2.DiscoveredCNI, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDiscoveredCNI", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDiscoveredCNI indicates an expected call of UpdateDiscoveredCNI.
func (mr *MockDiscoveredCNIWriterMockRecorder) UpdateDiscoveredCNI(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIWriter)(nil).UpdateDiscoveredCNI), varargs...)
}

// UpsertDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIWriter) UpsertDiscoveredCNI(ctx context.Context, obj *v2.DiscoveredCNI, transitionFuncs ...v2.DiscoveredCNITransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertDiscoveredCNI", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertDiscoveredCNI indicates an expected call of UpsertDiscoveredCNI.
func (mr *MockDiscoveredCNIWriterMockRecorder) UpsertDiscoveredCNI(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIWriter)(nil).UpsertDiscoveredCNI), varargs...)
}

// MockDiscoveredCNIStatusWriter is a mock of DiscoveredCNIStatusWriter interface.
type MockDiscoveredCNIStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredCNIStatusWriterMockRecorder
}

// MockDiscoveredCNIStatusWriterMockRecorder is the mock recorder for MockDiscoveredCNIStatusWriter.
type MockDiscoveredCNIStatusWriterMockRecorder struct {
	mock *MockDiscoveredCNIStatusWriter
}

// NewMockDiscoveredCNIStatusWriter creates a new mock instance.
func NewMockDiscoveredCNIStatusWriter(ctrl *gomock.Controller) *MockDiscoveredCNIStatusWriter {
	mock := &MockDiscoveredCNIStatusWriter{ctrl: ctrl}
	mock.recorder = &MockDiscoveredCNIStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredCNIStatusWriter) EXPECT() *MockDiscoveredCNIStatusWriterMockRecorder {
	return m.recorder
}

// PatchDiscoveredCNIStatus mocks base method.
func (m *MockDiscoveredCNIStatusWriter) PatchDiscoveredCNIStatus(ctx context.Context, obj *v2.DiscoveredCNI, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchDiscoveredCNIStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDiscoveredCNIStatus indicates an expected call of PatchDiscoveredCNIStatus.
func (mr *MockDiscoveredCNIStatusWriterMockRecorder) PatchDiscoveredCNIStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDiscoveredCNIStatus", reflect.TypeOf((*MockDiscoveredCNIStatusWriter)(nil).PatchDiscoveredCNIStatus), varargs...)
}

// UpdateDiscoveredCNIStatus mocks base method.
func (m *MockDiscoveredCNIStatusWriter) UpdateDiscoveredCNIStatus(ctx context.Context, obj *v2.DiscoveredCNI, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDiscoveredCNIStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDiscoveredCNIStatus indicates an expected call of UpdateDiscoveredCNIStatus.
func (mr *MockDiscoveredCNIStatusWriterMockRecorder) UpdateDiscoveredCNIStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiscoveredCNIStatus", reflect.TypeOf((*MockDiscoveredCNIStatusWriter)(nil).UpdateDiscoveredCNIStatus), varargs...)
}

// MockDiscoveredCNIClient is a mock of DiscoveredCNIClient interface.
type MockDiscoveredCNIClient struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredCNIClientMockRecorder
}

// MockDiscoveredCNIClientMockRecorder is the mock recorder for MockDiscoveredCNIClient.
type MockDiscoveredCNIClientMockRecorder struct {
	mock *MockDiscoveredCNIClient
}

// NewMockDiscoveredCNIClient creates a new mock instance.
func NewMockDiscoveredCNIClient(ctrl *gomock.Controller) *MockDiscoveredCNIClient {
	mock := &MockDiscoveredCNIClient{ctrl: ctrl}
	mock.recorder = &MockDiscoveredCNIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredCNIClient) EXPECT() *MockDiscoveredCNIClientMockRecorder {
	return m.recorder
}

// CreateDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIClient) CreateDiscoveredCNI(ctx context.Context, obj *v2.DiscoveredCNI, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDiscoveredCNI", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDiscoveredCNI indicates an expected call of CreateDiscoveredCNI.
func (mr *MockDiscoveredCNIClientMockRecorder) CreateDiscoveredCNI(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIClient)(nil).CreateDiscoveredCNI), varargs...)
}

// DeleteAllOfDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIClient) DeleteAllOfDiscoveredCNI(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfDiscoveredCNI", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfDiscoveredCNI indicates an expected call of DeleteAllOfDiscoveredCNI.
func (mr *MockDiscoveredCNIClientMockRecorder) DeleteAllOfDiscoveredCNI(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIClient)(nil).DeleteAllOfDiscoveredCNI), varargs...)
}

// DeleteDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIClient) DeleteDiscoveredCNI(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDiscoveredCNI", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDiscoveredCNI indicates an expected call of DeleteDiscoveredCNI.
func (mr *MockDiscoveredCNIClientMockRecorder) DeleteDiscoveredCNI(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIClient)(nil).DeleteDiscoveredCNI), varargs...)
}

// GetDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIClient) GetDiscoveredCNI(ctx context.Context, key client.ObjectKey) (*v2.DiscoveredCNI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscoveredCNI", ctx, key)
	ret0, _ := ret[0].(*v2.DiscoveredCNI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscoveredCNI indicates an expected call of GetDiscoveredCNI.
func (mr *MockDiscoveredCNIClientMockRecorder) GetDiscoveredCNI(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIClient)(nil).GetDiscoveredCNI), ctx, key)
}

// ListDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIClient) ListDiscoveredCNI(ctx context.Context, opts ...client.ListOption) (*v2.DiscoveredCNIList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDiscoveredCNI", varargs...)
	ret0, _ := ret[0].(*v2.DiscoveredCNIList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDiscoveredCNI indicates an expected call of ListDiscoveredCNI.
func (mr *MockDiscoveredCNIClientMockRecorder) ListDiscoveredCNI(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIClient)(nil).ListDiscoveredCNI), varargs...)
}

// PatchDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIClient) PatchDiscoveredCNI(ctx context.Context, obj *v2.DiscoveredCNI, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchDiscoveredCNI", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDiscoveredCNI indicates an expected call of PatchDiscoveredCNI.
func (mr *MockDiscoveredCNIClientMockRecorder) PatchDiscoveredCNI(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIClient)(nil).PatchDiscoveredCNI), varargs...)
}

// PatchDiscoveredCNIStatus mocks base method.
func (m *MockDiscoveredCNIClient) PatchDiscoveredCNIStatus(ctx context.Context, obj *v2.DiscoveredCNI, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchDiscoveredCNIStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDiscoveredCNIStatus indicates an expected call of PatchDiscoveredCNIStatus.
func (mr *MockDiscoveredCNIClientMockRecorder) PatchDiscoveredCNIStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDiscoveredCNIStatus", reflect.TypeOf((*MockDiscoveredCNIClient)(nil).PatchDiscoveredCNIStatus), varargs...)
}

// UpdateDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIClient) UpdateDiscoveredCNI(ctx context.Context, obj *v2.DiscoveredCNI, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDiscoveredCNI", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDiscoveredCNI indicates an expected call of UpdateDiscoveredCNI.
func (mr *MockDiscoveredCNIClientMockRecorder) UpdateDiscoveredCNI(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIClient)(nil).UpdateDiscoveredCNI), varargs...)
}

// UpdateDiscoveredCNIStatus mocks base method.
func (m *MockDiscoveredCNIClient) UpdateDiscoveredCNIStatus(ctx context.Context, obj *v2.DiscoveredCNI, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDiscoveredCNIStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDiscoveredCNIStatus indicates an expected call of UpdateDiscoveredCNIStatus.
func (mr *MockDiscoveredCNIClientMockRecorder) UpdateDiscoveredCNIStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiscoveredCNIStatus", reflect.TypeOf((*MockDiscoveredCNIClient)(nil).UpdateDiscoveredCNIStatus), varargs...)
}

// UpsertDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIClient) UpsertDiscoveredCNI(ctx context.Context, obj *v2.DiscoveredCNI, transitionFuncs ...v2.DiscoveredCNITransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertDiscoveredCNI", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertDiscoveredCNI indicates an expected call of UpsertDiscoveredCNI.
func (mr *MockDiscoveredCNIClientMockRecorder) UpsertDiscoveredCNI(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIClient)(nil).UpsertDiscoveredCNI), varargs...)
}

// MockMulticlusterDiscoveredCNIClient is a mock of MulticlusterDiscoveredCNIClient interface.
type MockMulticlusterDiscoveredCNIClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterDiscoveredCNIClientMockRecorder
}

// MockMulticlusterDiscoveredCNIClientMockRecorder is the mock recorder for MockMulticlusterDiscoveredCNIClient.
type MockMulticlusterDiscoveredCNIClientMockRecorder struct {
	mock *MockMulticlusterDiscoveredCNIClient
}

// NewMockMulticlusterDiscoveredCNIClient creates a new mock instance.
func NewMockMulticlusterDiscoveredCNIClient(ctrl *gomock.Controller) *MockMulticlusterDiscoveredCNIClient {
	mock := &MockMulticlusterDiscoveredCNIClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterDiscoveredCNIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterDiscoveredCNIClient) EXPECT() *MockMulticlusterDiscoveredCNIClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterDiscoveredCNIClient) Cluster(cluster string) (v2.DiscoveredCNIClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.DiscoveredCNIClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterDiscoveredCNIClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterDiscoveredCNIClient)(nil).Cluster), cluster)
}

// MockPortalConfigReader is a mock of PortalConfigReader interface.
type MockPortalConfigReader struct {
	ctrl     *gomock.Controller
	recorder *MockPortalConfigReaderMockRecorder
}

// MockPortalConfigReaderMockRecorder is the mock recorder for MockPortalConfigReader.
type MockPortalConfigReaderMockRecorder struct {
	mock *MockPortalConfigReader
}

// NewMockPortalConfigReader creates a new mock instance.
func NewMockPortalConfigReader(ctrl *gomock.Controller) *MockPortalConfigReader {
	mock := &MockPortalConfigReader{ctrl: ctrl}
	mock.recorder = &MockPortalConfigReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalConfigReader) EXPECT() *MockPortalConfigReaderMockRecorder {
	return m.recorder
}

// GetPortalConfig mocks base method.
func (m *MockPortalConfigReader) GetPortalConfig(ctx context.Context, key client.ObjectKey) (*v2.PortalConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortalConfig", ctx, key)
	ret0, _ := ret[0].(*v2.PortalConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortalConfig indicates an expected call of GetPortalConfig.
func (mr *MockPortalConfigReaderMockRecorder) GetPortalConfig(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortalConfig", reflect.TypeOf((*MockPortalConfigReader)(nil).GetPortalConfig), ctx, key)
}

// ListPortalConfig mocks base method.
func (m *MockPortalConfigReader) ListPortalConfig(ctx context.Context, opts ...client.ListOption) (*v2.PortalConfigList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPortalConfig", varargs...)
	ret0, _ := ret[0].(*v2.PortalConfigList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortalConfig indicates an expected call of ListPortalConfig.
func (mr *MockPortalConfigReaderMockRecorder) ListPortalConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortalConfig", reflect.TypeOf((*MockPortalConfigReader)(nil).ListPortalConfig), varargs...)
}

// MockPortalConfigWriter is a mock of PortalConfigWriter interface.
type MockPortalConfigWriter struct {
	ctrl     *gomock.Controller
	recorder *MockPortalConfigWriterMockRecorder
}

// MockPortalConfigWriterMockRecorder is the mock recorder for MockPortalConfigWriter.
type MockPortalConfigWriterMockRecorder struct {
	mock *MockPortalConfigWriter
}

// NewMockPortalConfigWriter creates a new mock instance.
func NewMockPortalConfigWriter(ctrl *gomock.Controller) *MockPortalConfigWriter {
	mock := &MockPortalConfigWriter{ctrl: ctrl}
	mock.recorder = &MockPortalConfigWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalConfigWriter) EXPECT() *MockPortalConfigWriterMockRecorder {
	return m.recorder
}

// CreatePortalConfig mocks base method.
func (m *MockPortalConfigWriter) CreatePortalConfig(ctx context.Context, obj *v2.PortalConfig, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePortalConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePortalConfig indicates an expected call of CreatePortalConfig.
func (mr *MockPortalConfigWriterMockRecorder) CreatePortalConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortalConfig", reflect.TypeOf((*MockPortalConfigWriter)(nil).CreatePortalConfig), varargs...)
}

// DeleteAllOfPortalConfig mocks base method.
func (m *MockPortalConfigWriter) DeleteAllOfPortalConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfPortalConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfPortalConfig indicates an expected call of DeleteAllOfPortalConfig.
func (mr *MockPortalConfigWriterMockRecorder) DeleteAllOfPortalConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfPortalConfig", reflect.TypeOf((*MockPortalConfigWriter)(nil).DeleteAllOfPortalConfig), varargs...)
}

// DeletePortalConfig mocks base method.
func (m *MockPortalConfigWriter) DeletePortalConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePortalConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePortalConfig indicates an expected call of DeletePortalConfig.
func (mr *MockPortalConfigWriterMockRecorder) DeletePortalConfig(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortalConfig", reflect.TypeOf((*MockPortalConfigWriter)(nil).DeletePortalConfig), varargs...)
}

// PatchPortalConfig mocks base method.
func (m *MockPortalConfigWriter) PatchPortalConfig(ctx context.Context, obj *v2.PortalConfig, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchPortalConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPortalConfig indicates an expected call of PatchPortalConfig.
func (mr *MockPortalConfigWriterMockRecorder) PatchPortalConfig(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPortalConfig", reflect.TypeOf((*MockPortalConfigWriter)(nil).PatchPortalConfig), varargs...)
}

// UpdatePortalConfig mocks base method.
func (m *MockPortalConfigWriter) UpdatePortalConfig(ctx context.Context, obj *v2.PortalConfig, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePortalConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePortalConfig indicates an expected call of UpdatePortalConfig.
func (mr *MockPortalConfigWriterMockRecorder) UpdatePortalConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortalConfig", reflect.TypeOf((*MockPortalConfigWriter)(nil).UpdatePortalConfig), varargs...)
}

// UpsertPortalConfig mocks base method.
func (m *MockPortalConfigWriter) UpsertPortalConfig(ctx context.Context, obj *v2.PortalConfig, transitionFuncs ...v2.PortalConfigTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertPortalConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPortalConfig indicates an expected call of UpsertPortalConfig.
func (mr *MockPortalConfigWriterMockRecorder) UpsertPortalConfig(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPortalConfig", reflect.TypeOf((*MockPortalConfigWriter)(nil).UpsertPortalConfig), varargs...)
}

// MockPortalConfigStatusWriter is a mock of PortalConfigStatusWriter interface.
type MockPortalConfigStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockPortalConfigStatusWriterMockRecorder
}

// MockPortalConfigStatusWriterMockRecorder is the mock recorder for MockPortalConfigStatusWriter.
type MockPortalConfigStatusWriterMockRecorder struct {
	mock *MockPortalConfigStatusWriter
}

// NewMockPortalConfigStatusWriter creates a new mock instance.
func NewMockPortalConfigStatusWriter(ctrl *gomock.Controller) *MockPortalConfigStatusWriter {
	mock := &MockPortalConfigStatusWriter{ctrl: ctrl}
	mock.recorder = &MockPortalConfigStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalConfigStatusWriter) EXPECT() *MockPortalConfigStatusWriterMockRecorder {
	return m.recorder
}

// PatchPortalConfigStatus mocks base method.
func (m *MockPortalConfigStatusWriter) PatchPortalConfigStatus(ctx context.Context, obj *v2.PortalConfig, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchPortalConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPortalConfigStatus indicates an expected call of PatchPortalConfigStatus.
func (mr *MockPortalConfigStatusWriterMockRecorder) PatchPortalConfigStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPortalConfigStatus", reflect.TypeOf((*MockPortalConfigStatusWriter)(nil).PatchPortalConfigStatus), varargs...)
}

// UpdatePortalConfigStatus mocks base method.
func (m *MockPortalConfigStatusWriter) UpdatePortalConfigStatus(ctx context.Context, obj *v2.PortalConfig, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePortalConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePortalConfigStatus indicates an expected call of UpdatePortalConfigStatus.
func (mr *MockPortalConfigStatusWriterMockRecorder) UpdatePortalConfigStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortalConfigStatus", reflect.TypeOf((*MockPortalConfigStatusWriter)(nil).UpdatePortalConfigStatus), varargs...)
}

// MockPortalConfigClient is a mock of PortalConfigClient interface.
type MockPortalConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockPortalConfigClientMockRecorder
}

// MockPortalConfigClientMockRecorder is the mock recorder for MockPortalConfigClient.
type MockPortalConfigClientMockRecorder struct {
	mock *MockPortalConfigClient
}

// NewMockPortalConfigClient creates a new mock instance.
func NewMockPortalConfigClient(ctrl *gomock.Controller) *MockPortalConfigClient {
	mock := &MockPortalConfigClient{ctrl: ctrl}
	mock.recorder = &MockPortalConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalConfigClient) EXPECT() *MockPortalConfigClientMockRecorder {
	return m.recorder
}

// CreatePortalConfig mocks base method.
func (m *MockPortalConfigClient) CreatePortalConfig(ctx context.Context, obj *v2.PortalConfig, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePortalConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePortalConfig indicates an expected call of CreatePortalConfig.
func (mr *MockPortalConfigClientMockRecorder) CreatePortalConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortalConfig", reflect.TypeOf((*MockPortalConfigClient)(nil).CreatePortalConfig), varargs...)
}

// DeleteAllOfPortalConfig mocks base method.
func (m *MockPortalConfigClient) DeleteAllOfPortalConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfPortalConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfPortalConfig indicates an expected call of DeleteAllOfPortalConfig.
func (mr *MockPortalConfigClientMockRecorder) DeleteAllOfPortalConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfPortalConfig", reflect.TypeOf((*MockPortalConfigClient)(nil).DeleteAllOfPortalConfig), varargs...)
}

// DeletePortalConfig mocks base method.
func (m *MockPortalConfigClient) DeletePortalConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePortalConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePortalConfig indicates an expected call of DeletePortalConfig.
func (mr *MockPortalConfigClientMockRecorder) DeletePortalConfig(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortalConfig", reflect.TypeOf((*MockPortalConfigClient)(nil).DeletePortalConfig), varargs...)
}

// GetPortalConfig mocks base method.
func (m *MockPortalConfigClient) GetPortalConfig(ctx context.Context, key client.ObjectKey) (*v2.PortalConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortalConfig", ctx, key)
	ret0, _ := ret[0].(*v2.PortalConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortalConfig indicates an expected call of GetPortalConfig.
func (mr *MockPortalConfigClientMockRecorder) GetPortalConfig(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortalConfig", reflect.TypeOf((*MockPortalConfigClient)(nil).GetPortalConfig), ctx, key)
}

// ListPortalConfig mocks base method.
func (m *MockPortalConfigClient) ListPortalConfig(ctx context.Context, opts ...client.ListOption) (*v2.PortalConfigList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPortalConfig", varargs...)
	ret0, _ := ret[0].(*v2.PortalConfigList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortalConfig indicates an expected call of ListPortalConfig.
func (mr *MockPortalConfigClientMockRecorder) ListPortalConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortalConfig", reflect.TypeOf((*MockPortalConfigClient)(nil).ListPortalConfig), varargs...)
}

// PatchPortalConfig mocks base method.
func (m *MockPortalConfigClient) PatchPortalConfig(ctx context.Context, obj *v2.PortalConfig, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchPortalConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPortalConfig indicates an expected call of PatchPortalConfig.
func (mr *MockPortalConfigClientMockRecorder) PatchPortalConfig(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPortalConfig", reflect.TypeOf((*MockPortalConfigClient)(nil).PatchPortalConfig), varargs...)
}

// PatchPortalConfigStatus mocks base method.
func (m *MockPortalConfigClient) PatchPortalConfigStatus(ctx context.Context, obj *v2.PortalConfig, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchPortalConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPortalConfigStatus indicates an expected call of PatchPortalConfigStatus.
func (mr *MockPortalConfigClientMockRecorder) PatchPortalConfigStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPortalConfigStatus", reflect.TypeOf((*MockPortalConfigClient)(nil).PatchPortalConfigStatus), varargs...)
}

// UpdatePortalConfig mocks base method.
func (m *MockPortalConfigClient) UpdatePortalConfig(ctx context.Context, obj *v2.PortalConfig, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePortalConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePortalConfig indicates an expected call of UpdatePortalConfig.
func (mr *MockPortalConfigClientMockRecorder) UpdatePortalConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortalConfig", reflect.TypeOf((*MockPortalConfigClient)(nil).UpdatePortalConfig), varargs...)
}

// UpdatePortalConfigStatus mocks base method.
func (m *MockPortalConfigClient) UpdatePortalConfigStatus(ctx context.Context, obj *v2.PortalConfig, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePortalConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePortalConfigStatus indicates an expected call of UpdatePortalConfigStatus.
func (mr *MockPortalConfigClientMockRecorder) UpdatePortalConfigStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortalConfigStatus", reflect.TypeOf((*MockPortalConfigClient)(nil).UpdatePortalConfigStatus), varargs...)
}

// UpsertPortalConfig mocks base method.
func (m *MockPortalConfigClient) UpsertPortalConfig(ctx context.Context, obj *v2.PortalConfig, transitionFuncs ...v2.PortalConfigTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertPortalConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPortalConfig indicates an expected call of UpsertPortalConfig.
func (mr *MockPortalConfigClientMockRecorder) UpsertPortalConfig(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPortalConfig", reflect.TypeOf((*MockPortalConfigClient)(nil).UpsertPortalConfig), varargs...)
}

// MockMulticlusterPortalConfigClient is a mock of MulticlusterPortalConfigClient interface.
type MockMulticlusterPortalConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterPortalConfigClientMockRecorder
}

// MockMulticlusterPortalConfigClientMockRecorder is the mock recorder for MockMulticlusterPortalConfigClient.
type MockMulticlusterPortalConfigClientMockRecorder struct {
	mock *MockMulticlusterPortalConfigClient
}

// NewMockMulticlusterPortalConfigClient creates a new mock instance.
func NewMockMulticlusterPortalConfigClient(ctrl *gomock.Controller) *MockMulticlusterPortalConfigClient {
	mock := &MockMulticlusterPortalConfigClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterPortalConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterPortalConfigClient) EXPECT() *MockMulticlusterPortalConfigClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterPortalConfigClient) Cluster(cluster string) (v2.PortalConfigClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.PortalConfigClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterPortalConfigClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterPortalConfigClient)(nil).Cluster), cluster)
}

// MockSpireRegistrationEntryReader is a mock of SpireRegistrationEntryReader interface.
type MockSpireRegistrationEntryReader struct {
	ctrl     *gomock.Controller
	recorder *MockSpireRegistrationEntryReaderMockRecorder
}

// MockSpireRegistrationEntryReaderMockRecorder is the mock recorder for MockSpireRegistrationEntryReader.
type MockSpireRegistrationEntryReaderMockRecorder struct {
	mock *MockSpireRegistrationEntryReader
}

// NewMockSpireRegistrationEntryReader creates a new mock instance.
func NewMockSpireRegistrationEntryReader(ctrl *gomock.Controller) *MockSpireRegistrationEntryReader {
	mock := &MockSpireRegistrationEntryReader{ctrl: ctrl}
	mock.recorder = &MockSpireRegistrationEntryReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpireRegistrationEntryReader) EXPECT() *MockSpireRegistrationEntryReaderMockRecorder {
	return m.recorder
}

// GetSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryReader) GetSpireRegistrationEntry(ctx context.Context, key client.ObjectKey) (*v2.SpireRegistrationEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpireRegistrationEntry", ctx, key)
	ret0, _ := ret[0].(*v2.SpireRegistrationEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpireRegistrationEntry indicates an expected call of GetSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryReaderMockRecorder) GetSpireRegistrationEntry(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryReader)(nil).GetSpireRegistrationEntry), ctx, key)
}

// ListSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryReader) ListSpireRegistrationEntry(ctx context.Context, opts ...client.ListOption) (*v2.SpireRegistrationEntryList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(*v2.SpireRegistrationEntryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpireRegistrationEntry indicates an expected call of ListSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryReaderMockRecorder) ListSpireRegistrationEntry(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryReader)(nil).ListSpireRegistrationEntry), varargs...)
}

// MockSpireRegistrationEntryWriter is a mock of SpireRegistrationEntryWriter interface.
type MockSpireRegistrationEntryWriter struct {
	ctrl     *gomock.Controller
	recorder *MockSpireRegistrationEntryWriterMockRecorder
}

// MockSpireRegistrationEntryWriterMockRecorder is the mock recorder for MockSpireRegistrationEntryWriter.
type MockSpireRegistrationEntryWriterMockRecorder struct {
	mock *MockSpireRegistrationEntryWriter
}

// NewMockSpireRegistrationEntryWriter creates a new mock instance.
func NewMockSpireRegistrationEntryWriter(ctrl *gomock.Controller) *MockSpireRegistrationEntryWriter {
	mock := &MockSpireRegistrationEntryWriter{ctrl: ctrl}
	mock.recorder = &MockSpireRegistrationEntryWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpireRegistrationEntryWriter) EXPECT() *MockSpireRegistrationEntryWriterMockRecorder {
	return m.recorder
}

// CreateSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryWriter) CreateSpireRegistrationEntry(ctx context.Context, obj *v2.SpireRegistrationEntry, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSpireRegistrationEntry indicates an expected call of CreateSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryWriterMockRecorder) CreateSpireRegistrationEntry(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryWriter)(nil).CreateSpireRegistrationEntry), varargs...)
}

// DeleteAllOfSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryWriter) DeleteAllOfSpireRegistrationEntry(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfSpireRegistrationEntry indicates an expected call of DeleteAllOfSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryWriterMockRecorder) DeleteAllOfSpireRegistrationEntry(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryWriter)(nil).DeleteAllOfSpireRegistrationEntry), varargs...)
}

// DeleteSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryWriter) DeleteSpireRegistrationEntry(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSpireRegistrationEntry indicates an expected call of DeleteSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryWriterMockRecorder) DeleteSpireRegistrationEntry(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryWriter)(nil).DeleteSpireRegistrationEntry), varargs...)
}

// PatchSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryWriter) PatchSpireRegistrationEntry(ctx context.Context, obj *v2.SpireRegistrationEntry, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchSpireRegistrationEntry indicates an expected call of PatchSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryWriterMockRecorder) PatchSpireRegistrationEntry(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryWriter)(nil).PatchSpireRegistrationEntry), varargs...)
}

// UpdateSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryWriter) UpdateSpireRegistrationEntry(ctx context.Context, obj *v2.SpireRegistrationEntry, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpireRegistrationEntry indicates an expected call of UpdateSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryWriterMockRecorder) UpdateSpireRegistrationEntry(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryWriter)(nil).UpdateSpireRegistrationEntry), varargs...)
}

// UpsertSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryWriter) UpsertSpireRegistrationEntry(ctx context.Context, obj *v2.SpireRegistrationEntry, transitionFuncs ...v2.SpireRegistrationEntryTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertSpireRegistrationEntry indicates an expected call of UpsertSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryWriterMockRecorder) UpsertSpireRegistrationEntry(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryWriter)(nil).UpsertSpireRegistrationEntry), varargs...)
}

// MockSpireRegistrationEntryStatusWriter is a mock of SpireRegistrationEntryStatusWriter interface.
type MockSpireRegistrationEntryStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockSpireRegistrationEntryStatusWriterMockRecorder
}

// MockSpireRegistrationEntryStatusWriterMockRecorder is the mock recorder for MockSpireRegistrationEntryStatusWriter.
type MockSpireRegistrationEntryStatusWriterMockRecorder struct {
	mock *MockSpireRegistrationEntryStatusWriter
}

// NewMockSpireRegistrationEntryStatusWriter creates a new mock instance.
func NewMockSpireRegistrationEntryStatusWriter(ctrl *gomock.Controller) *MockSpireRegistrationEntryStatusWriter {
	mock := &MockSpireRegistrationEntryStatusWriter{ctrl: ctrl}
	mock.recorder = &MockSpireRegistrationEntryStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpireRegistrationEntryStatusWriter) EXPECT() *MockSpireRegistrationEntryStatusWriterMockRecorder {
	return m.recorder
}

// PatchSpireRegistrationEntryStatus mocks base method.
func (m *MockSpireRegistrationEntryStatusWriter) PatchSpireRegistrationEntryStatus(ctx context.Context, obj *v2.SpireRegistrationEntry, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchSpireRegistrationEntryStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchSpireRegistrationEntryStatus indicates an expected call of PatchSpireRegistrationEntryStatus.
func (mr *MockSpireRegistrationEntryStatusWriterMockRecorder) PatchSpireRegistrationEntryStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSpireRegistrationEntryStatus", reflect.TypeOf((*MockSpireRegistrationEntryStatusWriter)(nil).PatchSpireRegistrationEntryStatus), varargs...)
}

// UpdateSpireRegistrationEntryStatus mocks base method.
func (m *MockSpireRegistrationEntryStatusWriter) UpdateSpireRegistrationEntryStatus(ctx context.Context, obj *v2.SpireRegistrationEntry, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSpireRegistrationEntryStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpireRegistrationEntryStatus indicates an expected call of UpdateSpireRegistrationEntryStatus.
func (mr *MockSpireRegistrationEntryStatusWriterMockRecorder) UpdateSpireRegistrationEntryStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpireRegistrationEntryStatus", reflect.TypeOf((*MockSpireRegistrationEntryStatusWriter)(nil).UpdateSpireRegistrationEntryStatus), varargs...)
}

// MockSpireRegistrationEntryClient is a mock of SpireRegistrationEntryClient interface.
type MockSpireRegistrationEntryClient struct {
	ctrl     *gomock.Controller
	recorder *MockSpireRegistrationEntryClientMockRecorder
}

// MockSpireRegistrationEntryClientMockRecorder is the mock recorder for MockSpireRegistrationEntryClient.
type MockSpireRegistrationEntryClientMockRecorder struct {
	mock *MockSpireRegistrationEntryClient
}

// NewMockSpireRegistrationEntryClient creates a new mock instance.
func NewMockSpireRegistrationEntryClient(ctrl *gomock.Controller) *MockSpireRegistrationEntryClient {
	mock := &MockSpireRegistrationEntryClient{ctrl: ctrl}
	mock.recorder = &MockSpireRegistrationEntryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpireRegistrationEntryClient) EXPECT() *MockSpireRegistrationEntryClientMockRecorder {
	return m.recorder
}

// CreateSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryClient) CreateSpireRegistrationEntry(ctx context.Context, obj *v2.SpireRegistrationEntry, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSpireRegistrationEntry indicates an expected call of CreateSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryClientMockRecorder) CreateSpireRegistrationEntry(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryClient)(nil).CreateSpireRegistrationEntry), varargs...)
}

// DeleteAllOfSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryClient) DeleteAllOfSpireRegistrationEntry(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfSpireRegistrationEntry indicates an expected call of DeleteAllOfSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryClientMockRecorder) DeleteAllOfSpireRegistrationEntry(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryClient)(nil).DeleteAllOfSpireRegistrationEntry), varargs...)
}

// DeleteSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryClient) DeleteSpireRegistrationEntry(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSpireRegistrationEntry indicates an expected call of DeleteSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryClientMockRecorder) DeleteSpireRegistrationEntry(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryClient)(nil).DeleteSpireRegistrationEntry), varargs...)
}

// GetSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryClient) GetSpireRegistrationEntry(ctx context.Context, key client.ObjectKey) (*v2.SpireRegistrationEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpireRegistrationEntry", ctx, key)
	ret0, _ := ret[0].(*v2.SpireRegistrationEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpireRegistrationEntry indicates an expected call of GetSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryClientMockRecorder) GetSpireRegistrationEntry(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryClient)(nil).GetSpireRegistrationEntry), ctx, key)
}

// ListSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryClient) ListSpireRegistrationEntry(ctx context.Context, opts ...client.ListOption) (*v2.SpireRegistrationEntryList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(*v2.SpireRegistrationEntryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpireRegistrationEntry indicates an expected call of ListSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryClientMockRecorder) ListSpireRegistrationEntry(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryClient)(nil).ListSpireRegistrationEntry), varargs...)
}

// PatchSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryClient) PatchSpireRegistrationEntry(ctx context.Context, obj *v2.SpireRegistrationEntry, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchSpireRegistrationEntry indicates an expected call of PatchSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryClientMockRecorder) PatchSpireRegistrationEntry(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryClient)(nil).PatchSpireRegistrationEntry), varargs...)
}

// PatchSpireRegistrationEntryStatus mocks base method.
func (m *MockSpireRegistrationEntryClient) PatchSpireRegistrationEntryStatus(ctx context.Context, obj *v2.SpireRegistrationEntry, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchSpireRegistrationEntryStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchSpireRegistrationEntryStatus indicates an expected call of PatchSpireRegistrationEntryStatus.
func (mr *MockSpireRegistrationEntryClientMockRecorder) PatchSpireRegistrationEntryStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSpireRegistrationEntryStatus", reflect.TypeOf((*MockSpireRegistrationEntryClient)(nil).PatchSpireRegistrationEntryStatus), varargs...)
}

// UpdateSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryClient) UpdateSpireRegistrationEntry(ctx context.Context, obj *v2.SpireRegistrationEntry, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpireRegistrationEntry indicates an expected call of UpdateSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryClientMockRecorder) UpdateSpireRegistrationEntry(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryClient)(nil).UpdateSpireRegistrationEntry), varargs...)
}

// UpdateSpireRegistrationEntryStatus mocks base method.
func (m *MockSpireRegistrationEntryClient) UpdateSpireRegistrationEntryStatus(ctx context.Context, obj *v2.SpireRegistrationEntry, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSpireRegistrationEntryStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpireRegistrationEntryStatus indicates an expected call of UpdateSpireRegistrationEntryStatus.
func (mr *MockSpireRegistrationEntryClientMockRecorder) UpdateSpireRegistrationEntryStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpireRegistrationEntryStatus", reflect.TypeOf((*MockSpireRegistrationEntryClient)(nil).UpdateSpireRegistrationEntryStatus), varargs...)
}

// UpsertSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryClient) UpsertSpireRegistrationEntry(ctx context.Context, obj *v2.SpireRegistrationEntry, transitionFuncs ...v2.SpireRegistrationEntryTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertSpireRegistrationEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertSpireRegistrationEntry indicates an expected call of UpsertSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryClientMockRecorder) UpsertSpireRegistrationEntry(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryClient)(nil).UpsertSpireRegistrationEntry), varargs...)
}

// MockMulticlusterSpireRegistrationEntryClient is a mock of MulticlusterSpireRegistrationEntryClient interface.
type MockMulticlusterSpireRegistrationEntryClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterSpireRegistrationEntryClientMockRecorder
}

// MockMulticlusterSpireRegistrationEntryClientMockRecorder is the mock recorder for MockMulticlusterSpireRegistrationEntryClient.
type MockMulticlusterSpireRegistrationEntryClientMockRecorder struct {
	mock *MockMulticlusterSpireRegistrationEntryClient
}

// NewMockMulticlusterSpireRegistrationEntryClient creates a new mock instance.
func NewMockMulticlusterSpireRegistrationEntryClient(ctrl *gomock.Controller) *MockMulticlusterSpireRegistrationEntryClient {
	mock := &MockMulticlusterSpireRegistrationEntryClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterSpireRegistrationEntryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterSpireRegistrationEntryClient) EXPECT() *MockMulticlusterSpireRegistrationEntryClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterSpireRegistrationEntryClient) Cluster(cluster string) (v2.SpireRegistrationEntryClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.SpireRegistrationEntryClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterSpireRegistrationEntryClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterSpireRegistrationEntryClient)(nil).Cluster), cluster)
}
