// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/internal/v2/pod_bounce_directive.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *PodBounceDirectiveSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PodBounceDirectiveSpec)
	if !ok {
		that2, ok := that.(PodBounceDirectiveSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetPodsToBounce()) != len(target.GetPodsToBounce()) {
		return false
	}
	for idx, v := range m.GetPodsToBounce() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetPodsToBounce()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetPodsToBounce()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetMeshRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMeshRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMeshRef(), target.GetMeshRef()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *PodBounceDirectiveStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PodBounceDirectiveStatus)
	if !ok {
		that2, ok := that.(PodBounceDirectiveStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetObservedGeneration() != target.GetObservedGeneration() {
		return false
	}

	if m.GetState() != target.GetState() {
		return false
	}

	if strings.Compare(m.GetError(), target.GetError()) != 0 {
		return false
	}

	if len(m.GetPodsBounced()) != len(target.GetPodsBounced()) {
		return false
	}
	for idx, v := range m.GetPodsBounced() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetPodsBounced()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetPodsBounced()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *PodBounceDirectiveSpec_PodSelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PodBounceDirectiveSpec_PodSelector)
	if !ok {
		that2, ok := that.(PodBounceDirectiveSpec_PodSelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetNamespace(), target.GetNamespace()) != 0 {
		return false
	}

	if len(m.GetLabels()) != len(target.GetLabels()) {
		return false
	}
	for k, v := range m.GetLabels() {

		if strings.Compare(v, target.GetLabels()[k]) != 0 {
			return false
		}

	}

	if m.GetWaitForReplicas() != target.GetWaitForReplicas() {
		return false
	}

	if h, ok := interface{}(m.GetRootCertSync()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRootCertSync()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRootCertSync(), target.GetRootCertSync()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *PodBounceDirectiveSpec_PodSelector_RootCertSync) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PodBounceDirectiveSpec_PodSelector_RootCertSync)
	if !ok {
		that2, ok := that.(PodBounceDirectiveSpec_PodSelector_RootCertSync)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetSecretRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSecretRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSecretRef(), target.GetSecretRef()) {
			return false
		}
	}

	if strings.Compare(m.GetSecretKey(), target.GetSecretKey()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetConfigMapRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetConfigMapRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetConfigMapRef(), target.GetConfigMapRef()) {
			return false
		}
	}

	if strings.Compare(m.GetConfigMapKey(), target.GetConfigMapKey()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *PodBounceDirectiveStatus_BouncedPodSet) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PodBounceDirectiveStatus_BouncedPodSet)
	if !ok {
		that2, ok := that.(PodBounceDirectiveStatus_BouncedPodSet)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetBouncedPods()) != len(target.GetBouncedPods()) {
		return false
	}
	for idx, v := range m.GetBouncedPods() {

		if strings.Compare(v, target.GetBouncedPods()[idx]) != 0 {
			return false
		}

	}

	return true
}
