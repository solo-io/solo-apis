// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v2

import (
	"context"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the internal.gloo.solo.io/v2 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the internal.gloo.solo.io/v2 APIs
type Clientset interface {
	// clienset for the internal.gloo.solo.io/v2/v2 APIs
	IssuedCertificates() IssuedCertificateClient
	// clienset for the internal.gloo.solo.io/v2/v2 APIs
	CertificateRequests() CertificateRequestClient
	// clienset for the internal.gloo.solo.io/v2/v2 APIs
	PodBounceDirectives() PodBounceDirectiveClient
	// clienset for the internal.gloo.solo.io/v2/v2 APIs
	XdsConfigs() XdsConfigClient
	// clienset for the internal.gloo.solo.io/v2/v2 APIs
	DiscoveredGateways() DiscoveredGatewayClient
	// clienset for the internal.gloo.solo.io/v2/v2 APIs
	Meshes() MeshClient
	// clienset for the internal.gloo.solo.io/v2/v2 APIs
	DiscoveredCNIS() DiscoveredCNIClient
	// clienset for the internal.gloo.solo.io/v2/v2 APIs
	PortalConfigs() PortalConfigClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := SchemeBuilder.AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the internal.gloo.solo.io/v2/v2 APIs
func (c *clientSet) IssuedCertificates() IssuedCertificateClient {
	return NewIssuedCertificateClient(c.client)
}

// clienset for the internal.gloo.solo.io/v2/v2 APIs
func (c *clientSet) CertificateRequests() CertificateRequestClient {
	return NewCertificateRequestClient(c.client)
}

// clienset for the internal.gloo.solo.io/v2/v2 APIs
func (c *clientSet) PodBounceDirectives() PodBounceDirectiveClient {
	return NewPodBounceDirectiveClient(c.client)
}

// clienset for the internal.gloo.solo.io/v2/v2 APIs
func (c *clientSet) XdsConfigs() XdsConfigClient {
	return NewXdsConfigClient(c.client)
}

// clienset for the internal.gloo.solo.io/v2/v2 APIs
func (c *clientSet) DiscoveredGateways() DiscoveredGatewayClient {
	return NewDiscoveredGatewayClient(c.client)
}

// clienset for the internal.gloo.solo.io/v2/v2 APIs
func (c *clientSet) Meshes() MeshClient {
	return NewMeshClient(c.client)
}

// clienset for the internal.gloo.solo.io/v2/v2 APIs
func (c *clientSet) DiscoveredCNIS() DiscoveredCNIClient {
	return NewDiscoveredCNIClient(c.client)
}

// clienset for the internal.gloo.solo.io/v2/v2 APIs
func (c *clientSet) PortalConfigs() PortalConfigClient {
	return NewPortalConfigClient(c.client)
}

// Reader knows how to read and list IssuedCertificates.
type IssuedCertificateReader interface {
	// Get retrieves a IssuedCertificate for the given object key
	GetIssuedCertificate(ctx context.Context, key client.ObjectKey) (*IssuedCertificate, error)

	// List retrieves list of IssuedCertificates for a given namespace and list options.
	ListIssuedCertificate(ctx context.Context, opts ...client.ListOption) (*IssuedCertificateList, error)
}

// IssuedCertificateTransitionFunction instructs the IssuedCertificateWriter how to transition between an existing
// IssuedCertificate object and a desired on an Upsert
type IssuedCertificateTransitionFunction func(existing, desired *IssuedCertificate) error

// Writer knows how to create, delete, and update IssuedCertificates.
type IssuedCertificateWriter interface {
	// Create saves the IssuedCertificate object.
	CreateIssuedCertificate(ctx context.Context, obj *IssuedCertificate, opts ...client.CreateOption) error

	// Delete deletes the IssuedCertificate object.
	DeleteIssuedCertificate(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given IssuedCertificate object.
	UpdateIssuedCertificate(ctx context.Context, obj *IssuedCertificate, opts ...client.UpdateOption) error

	// Patch patches the given IssuedCertificate object.
	PatchIssuedCertificate(ctx context.Context, obj *IssuedCertificate, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all IssuedCertificate objects matching the given options.
	DeleteAllOfIssuedCertificate(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the IssuedCertificate object.
	UpsertIssuedCertificate(ctx context.Context, obj *IssuedCertificate, transitionFuncs ...IssuedCertificateTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a IssuedCertificate object.
type IssuedCertificateStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given IssuedCertificate object.
	UpdateIssuedCertificateStatus(ctx context.Context, obj *IssuedCertificate, opts ...client.UpdateOption) error

	// Patch patches the given IssuedCertificate object's subresource.
	PatchIssuedCertificateStatus(ctx context.Context, obj *IssuedCertificate, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on IssuedCertificates.
type IssuedCertificateClient interface {
	IssuedCertificateReader
	IssuedCertificateWriter
	IssuedCertificateStatusWriter
}

type issuedCertificateClient struct {
	client client.Client
}

func NewIssuedCertificateClient(client client.Client) *issuedCertificateClient {
	return &issuedCertificateClient{client: client}
}

func (c *issuedCertificateClient) GetIssuedCertificate(ctx context.Context, key client.ObjectKey) (*IssuedCertificate, error) {
	obj := &IssuedCertificate{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *issuedCertificateClient) ListIssuedCertificate(ctx context.Context, opts ...client.ListOption) (*IssuedCertificateList, error) {
	list := &IssuedCertificateList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *issuedCertificateClient) CreateIssuedCertificate(ctx context.Context, obj *IssuedCertificate, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *issuedCertificateClient) DeleteIssuedCertificate(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &IssuedCertificate{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *issuedCertificateClient) UpdateIssuedCertificate(ctx context.Context, obj *IssuedCertificate, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *issuedCertificateClient) PatchIssuedCertificate(ctx context.Context, obj *IssuedCertificate, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *issuedCertificateClient) DeleteAllOfIssuedCertificate(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &IssuedCertificate{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *issuedCertificateClient) UpsertIssuedCertificate(ctx context.Context, obj *IssuedCertificate, transitionFuncs ...IssuedCertificateTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*IssuedCertificate), desired.(*IssuedCertificate)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *issuedCertificateClient) UpdateIssuedCertificateStatus(ctx context.Context, obj *IssuedCertificate, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *issuedCertificateClient) PatchIssuedCertificateStatus(ctx context.Context, obj *IssuedCertificate, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides IssuedCertificateClients for multiple clusters.
type MulticlusterIssuedCertificateClient interface {
	// Cluster returns a IssuedCertificateClient for the given cluster
	Cluster(cluster string) (IssuedCertificateClient, error)
}

type multiclusterIssuedCertificateClient struct {
	client multicluster.Client
}

func NewMulticlusterIssuedCertificateClient(client multicluster.Client) MulticlusterIssuedCertificateClient {
	return &multiclusterIssuedCertificateClient{client: client}
}

func (m *multiclusterIssuedCertificateClient) Cluster(cluster string) (IssuedCertificateClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewIssuedCertificateClient(client), nil
}

// Reader knows how to read and list CertificateRequests.
type CertificateRequestReader interface {
	// Get retrieves a CertificateRequest for the given object key
	GetCertificateRequest(ctx context.Context, key client.ObjectKey) (*CertificateRequest, error)

	// List retrieves list of CertificateRequests for a given namespace and list options.
	ListCertificateRequest(ctx context.Context, opts ...client.ListOption) (*CertificateRequestList, error)
}

// CertificateRequestTransitionFunction instructs the CertificateRequestWriter how to transition between an existing
// CertificateRequest object and a desired on an Upsert
type CertificateRequestTransitionFunction func(existing, desired *CertificateRequest) error

// Writer knows how to create, delete, and update CertificateRequests.
type CertificateRequestWriter interface {
	// Create saves the CertificateRequest object.
	CreateCertificateRequest(ctx context.Context, obj *CertificateRequest, opts ...client.CreateOption) error

	// Delete deletes the CertificateRequest object.
	DeleteCertificateRequest(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given CertificateRequest object.
	UpdateCertificateRequest(ctx context.Context, obj *CertificateRequest, opts ...client.UpdateOption) error

	// Patch patches the given CertificateRequest object.
	PatchCertificateRequest(ctx context.Context, obj *CertificateRequest, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all CertificateRequest objects matching the given options.
	DeleteAllOfCertificateRequest(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the CertificateRequest object.
	UpsertCertificateRequest(ctx context.Context, obj *CertificateRequest, transitionFuncs ...CertificateRequestTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a CertificateRequest object.
type CertificateRequestStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given CertificateRequest object.
	UpdateCertificateRequestStatus(ctx context.Context, obj *CertificateRequest, opts ...client.UpdateOption) error

	// Patch patches the given CertificateRequest object's subresource.
	PatchCertificateRequestStatus(ctx context.Context, obj *CertificateRequest, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on CertificateRequests.
type CertificateRequestClient interface {
	CertificateRequestReader
	CertificateRequestWriter
	CertificateRequestStatusWriter
}

type certificateRequestClient struct {
	client client.Client
}

func NewCertificateRequestClient(client client.Client) *certificateRequestClient {
	return &certificateRequestClient{client: client}
}

func (c *certificateRequestClient) GetCertificateRequest(ctx context.Context, key client.ObjectKey) (*CertificateRequest, error) {
	obj := &CertificateRequest{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *certificateRequestClient) ListCertificateRequest(ctx context.Context, opts ...client.ListOption) (*CertificateRequestList, error) {
	list := &CertificateRequestList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *certificateRequestClient) CreateCertificateRequest(ctx context.Context, obj *CertificateRequest, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *certificateRequestClient) DeleteCertificateRequest(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &CertificateRequest{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *certificateRequestClient) UpdateCertificateRequest(ctx context.Context, obj *CertificateRequest, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *certificateRequestClient) PatchCertificateRequest(ctx context.Context, obj *CertificateRequest, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *certificateRequestClient) DeleteAllOfCertificateRequest(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &CertificateRequest{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *certificateRequestClient) UpsertCertificateRequest(ctx context.Context, obj *CertificateRequest, transitionFuncs ...CertificateRequestTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*CertificateRequest), desired.(*CertificateRequest)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *certificateRequestClient) UpdateCertificateRequestStatus(ctx context.Context, obj *CertificateRequest, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *certificateRequestClient) PatchCertificateRequestStatus(ctx context.Context, obj *CertificateRequest, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides CertificateRequestClients for multiple clusters.
type MulticlusterCertificateRequestClient interface {
	// Cluster returns a CertificateRequestClient for the given cluster
	Cluster(cluster string) (CertificateRequestClient, error)
}

type multiclusterCertificateRequestClient struct {
	client multicluster.Client
}

func NewMulticlusterCertificateRequestClient(client multicluster.Client) MulticlusterCertificateRequestClient {
	return &multiclusterCertificateRequestClient{client: client}
}

func (m *multiclusterCertificateRequestClient) Cluster(cluster string) (CertificateRequestClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewCertificateRequestClient(client), nil
}

// Reader knows how to read and list PodBounceDirectives.
type PodBounceDirectiveReader interface {
	// Get retrieves a PodBounceDirective for the given object key
	GetPodBounceDirective(ctx context.Context, key client.ObjectKey) (*PodBounceDirective, error)

	// List retrieves list of PodBounceDirectives for a given namespace and list options.
	ListPodBounceDirective(ctx context.Context, opts ...client.ListOption) (*PodBounceDirectiveList, error)
}

// PodBounceDirectiveTransitionFunction instructs the PodBounceDirectiveWriter how to transition between an existing
// PodBounceDirective object and a desired on an Upsert
type PodBounceDirectiveTransitionFunction func(existing, desired *PodBounceDirective) error

// Writer knows how to create, delete, and update PodBounceDirectives.
type PodBounceDirectiveWriter interface {
	// Create saves the PodBounceDirective object.
	CreatePodBounceDirective(ctx context.Context, obj *PodBounceDirective, opts ...client.CreateOption) error

	// Delete deletes the PodBounceDirective object.
	DeletePodBounceDirective(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given PodBounceDirective object.
	UpdatePodBounceDirective(ctx context.Context, obj *PodBounceDirective, opts ...client.UpdateOption) error

	// Patch patches the given PodBounceDirective object.
	PatchPodBounceDirective(ctx context.Context, obj *PodBounceDirective, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all PodBounceDirective objects matching the given options.
	DeleteAllOfPodBounceDirective(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the PodBounceDirective object.
	UpsertPodBounceDirective(ctx context.Context, obj *PodBounceDirective, transitionFuncs ...PodBounceDirectiveTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a PodBounceDirective object.
type PodBounceDirectiveStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given PodBounceDirective object.
	UpdatePodBounceDirectiveStatus(ctx context.Context, obj *PodBounceDirective, opts ...client.UpdateOption) error

	// Patch patches the given PodBounceDirective object's subresource.
	PatchPodBounceDirectiveStatus(ctx context.Context, obj *PodBounceDirective, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on PodBounceDirectives.
type PodBounceDirectiveClient interface {
	PodBounceDirectiveReader
	PodBounceDirectiveWriter
	PodBounceDirectiveStatusWriter
}

type podBounceDirectiveClient struct {
	client client.Client
}

func NewPodBounceDirectiveClient(client client.Client) *podBounceDirectiveClient {
	return &podBounceDirectiveClient{client: client}
}

func (c *podBounceDirectiveClient) GetPodBounceDirective(ctx context.Context, key client.ObjectKey) (*PodBounceDirective, error) {
	obj := &PodBounceDirective{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *podBounceDirectiveClient) ListPodBounceDirective(ctx context.Context, opts ...client.ListOption) (*PodBounceDirectiveList, error) {
	list := &PodBounceDirectiveList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *podBounceDirectiveClient) CreatePodBounceDirective(ctx context.Context, obj *PodBounceDirective, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *podBounceDirectiveClient) DeletePodBounceDirective(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &PodBounceDirective{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *podBounceDirectiveClient) UpdatePodBounceDirective(ctx context.Context, obj *PodBounceDirective, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *podBounceDirectiveClient) PatchPodBounceDirective(ctx context.Context, obj *PodBounceDirective, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *podBounceDirectiveClient) DeleteAllOfPodBounceDirective(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &PodBounceDirective{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *podBounceDirectiveClient) UpsertPodBounceDirective(ctx context.Context, obj *PodBounceDirective, transitionFuncs ...PodBounceDirectiveTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*PodBounceDirective), desired.(*PodBounceDirective)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *podBounceDirectiveClient) UpdatePodBounceDirectiveStatus(ctx context.Context, obj *PodBounceDirective, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *podBounceDirectiveClient) PatchPodBounceDirectiveStatus(ctx context.Context, obj *PodBounceDirective, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides PodBounceDirectiveClients for multiple clusters.
type MulticlusterPodBounceDirectiveClient interface {
	// Cluster returns a PodBounceDirectiveClient for the given cluster
	Cluster(cluster string) (PodBounceDirectiveClient, error)
}

type multiclusterPodBounceDirectiveClient struct {
	client multicluster.Client
}

func NewMulticlusterPodBounceDirectiveClient(client multicluster.Client) MulticlusterPodBounceDirectiveClient {
	return &multiclusterPodBounceDirectiveClient{client: client}
}

func (m *multiclusterPodBounceDirectiveClient) Cluster(cluster string) (PodBounceDirectiveClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewPodBounceDirectiveClient(client), nil
}

// Reader knows how to read and list XdsConfigs.
type XdsConfigReader interface {
	// Get retrieves a XdsConfig for the given object key
	GetXdsConfig(ctx context.Context, key client.ObjectKey) (*XdsConfig, error)

	// List retrieves list of XdsConfigs for a given namespace and list options.
	ListXdsConfig(ctx context.Context, opts ...client.ListOption) (*XdsConfigList, error)
}

// XdsConfigTransitionFunction instructs the XdsConfigWriter how to transition between an existing
// XdsConfig object and a desired on an Upsert
type XdsConfigTransitionFunction func(existing, desired *XdsConfig) error

// Writer knows how to create, delete, and update XdsConfigs.
type XdsConfigWriter interface {
	// Create saves the XdsConfig object.
	CreateXdsConfig(ctx context.Context, obj *XdsConfig, opts ...client.CreateOption) error

	// Delete deletes the XdsConfig object.
	DeleteXdsConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given XdsConfig object.
	UpdateXdsConfig(ctx context.Context, obj *XdsConfig, opts ...client.UpdateOption) error

	// Patch patches the given XdsConfig object.
	PatchXdsConfig(ctx context.Context, obj *XdsConfig, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all XdsConfig objects matching the given options.
	DeleteAllOfXdsConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the XdsConfig object.
	UpsertXdsConfig(ctx context.Context, obj *XdsConfig, transitionFuncs ...XdsConfigTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a XdsConfig object.
type XdsConfigStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given XdsConfig object.
	UpdateXdsConfigStatus(ctx context.Context, obj *XdsConfig, opts ...client.UpdateOption) error

	// Patch patches the given XdsConfig object's subresource.
	PatchXdsConfigStatus(ctx context.Context, obj *XdsConfig, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on XdsConfigs.
type XdsConfigClient interface {
	XdsConfigReader
	XdsConfigWriter
	XdsConfigStatusWriter
}

type xdsConfigClient struct {
	client client.Client
}

func NewXdsConfigClient(client client.Client) *xdsConfigClient {
	return &xdsConfigClient{client: client}
}

func (c *xdsConfigClient) GetXdsConfig(ctx context.Context, key client.ObjectKey) (*XdsConfig, error) {
	obj := &XdsConfig{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *xdsConfigClient) ListXdsConfig(ctx context.Context, opts ...client.ListOption) (*XdsConfigList, error) {
	list := &XdsConfigList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *xdsConfigClient) CreateXdsConfig(ctx context.Context, obj *XdsConfig, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *xdsConfigClient) DeleteXdsConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &XdsConfig{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *xdsConfigClient) UpdateXdsConfig(ctx context.Context, obj *XdsConfig, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *xdsConfigClient) PatchXdsConfig(ctx context.Context, obj *XdsConfig, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *xdsConfigClient) DeleteAllOfXdsConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &XdsConfig{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *xdsConfigClient) UpsertXdsConfig(ctx context.Context, obj *XdsConfig, transitionFuncs ...XdsConfigTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*XdsConfig), desired.(*XdsConfig)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *xdsConfigClient) UpdateXdsConfigStatus(ctx context.Context, obj *XdsConfig, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *xdsConfigClient) PatchXdsConfigStatus(ctx context.Context, obj *XdsConfig, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides XdsConfigClients for multiple clusters.
type MulticlusterXdsConfigClient interface {
	// Cluster returns a XdsConfigClient for the given cluster
	Cluster(cluster string) (XdsConfigClient, error)
}

type multiclusterXdsConfigClient struct {
	client multicluster.Client
}

func NewMulticlusterXdsConfigClient(client multicluster.Client) MulticlusterXdsConfigClient {
	return &multiclusterXdsConfigClient{client: client}
}

func (m *multiclusterXdsConfigClient) Cluster(cluster string) (XdsConfigClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewXdsConfigClient(client), nil
}

// Reader knows how to read and list DiscoveredGateways.
type DiscoveredGatewayReader interface {
	// Get retrieves a DiscoveredGateway for the given object key
	GetDiscoveredGateway(ctx context.Context, key client.ObjectKey) (*DiscoveredGateway, error)

	// List retrieves list of DiscoveredGateways for a given namespace and list options.
	ListDiscoveredGateway(ctx context.Context, opts ...client.ListOption) (*DiscoveredGatewayList, error)
}

// DiscoveredGatewayTransitionFunction instructs the DiscoveredGatewayWriter how to transition between an existing
// DiscoveredGateway object and a desired on an Upsert
type DiscoveredGatewayTransitionFunction func(existing, desired *DiscoveredGateway) error

// Writer knows how to create, delete, and update DiscoveredGateways.
type DiscoveredGatewayWriter interface {
	// Create saves the DiscoveredGateway object.
	CreateDiscoveredGateway(ctx context.Context, obj *DiscoveredGateway, opts ...client.CreateOption) error

	// Delete deletes the DiscoveredGateway object.
	DeleteDiscoveredGateway(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given DiscoveredGateway object.
	UpdateDiscoveredGateway(ctx context.Context, obj *DiscoveredGateway, opts ...client.UpdateOption) error

	// Patch patches the given DiscoveredGateway object.
	PatchDiscoveredGateway(ctx context.Context, obj *DiscoveredGateway, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all DiscoveredGateway objects matching the given options.
	DeleteAllOfDiscoveredGateway(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the DiscoveredGateway object.
	UpsertDiscoveredGateway(ctx context.Context, obj *DiscoveredGateway, transitionFuncs ...DiscoveredGatewayTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a DiscoveredGateway object.
type DiscoveredGatewayStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given DiscoveredGateway object.
	UpdateDiscoveredGatewayStatus(ctx context.Context, obj *DiscoveredGateway, opts ...client.UpdateOption) error

	// Patch patches the given DiscoveredGateway object's subresource.
	PatchDiscoveredGatewayStatus(ctx context.Context, obj *DiscoveredGateway, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on DiscoveredGateways.
type DiscoveredGatewayClient interface {
	DiscoveredGatewayReader
	DiscoveredGatewayWriter
	DiscoveredGatewayStatusWriter
}

type discoveredGatewayClient struct {
	client client.Client
}

func NewDiscoveredGatewayClient(client client.Client) *discoveredGatewayClient {
	return &discoveredGatewayClient{client: client}
}

func (c *discoveredGatewayClient) GetDiscoveredGateway(ctx context.Context, key client.ObjectKey) (*DiscoveredGateway, error) {
	obj := &DiscoveredGateway{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *discoveredGatewayClient) ListDiscoveredGateway(ctx context.Context, opts ...client.ListOption) (*DiscoveredGatewayList, error) {
	list := &DiscoveredGatewayList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *discoveredGatewayClient) CreateDiscoveredGateway(ctx context.Context, obj *DiscoveredGateway, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *discoveredGatewayClient) DeleteDiscoveredGateway(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &DiscoveredGateway{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *discoveredGatewayClient) UpdateDiscoveredGateway(ctx context.Context, obj *DiscoveredGateway, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *discoveredGatewayClient) PatchDiscoveredGateway(ctx context.Context, obj *DiscoveredGateway, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *discoveredGatewayClient) DeleteAllOfDiscoveredGateway(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &DiscoveredGateway{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *discoveredGatewayClient) UpsertDiscoveredGateway(ctx context.Context, obj *DiscoveredGateway, transitionFuncs ...DiscoveredGatewayTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*DiscoveredGateway), desired.(*DiscoveredGateway)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *discoveredGatewayClient) UpdateDiscoveredGatewayStatus(ctx context.Context, obj *DiscoveredGateway, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *discoveredGatewayClient) PatchDiscoveredGatewayStatus(ctx context.Context, obj *DiscoveredGateway, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides DiscoveredGatewayClients for multiple clusters.
type MulticlusterDiscoveredGatewayClient interface {
	// Cluster returns a DiscoveredGatewayClient for the given cluster
	Cluster(cluster string) (DiscoveredGatewayClient, error)
}

type multiclusterDiscoveredGatewayClient struct {
	client multicluster.Client
}

func NewMulticlusterDiscoveredGatewayClient(client multicluster.Client) MulticlusterDiscoveredGatewayClient {
	return &multiclusterDiscoveredGatewayClient{client: client}
}

func (m *multiclusterDiscoveredGatewayClient) Cluster(cluster string) (DiscoveredGatewayClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewDiscoveredGatewayClient(client), nil
}

// Reader knows how to read and list Meshs.
type MeshReader interface {
	// Get retrieves a Mesh for the given object key
	GetMesh(ctx context.Context, key client.ObjectKey) (*Mesh, error)

	// List retrieves list of Meshs for a given namespace and list options.
	ListMesh(ctx context.Context, opts ...client.ListOption) (*MeshList, error)
}

// MeshTransitionFunction instructs the MeshWriter how to transition between an existing
// Mesh object and a desired on an Upsert
type MeshTransitionFunction func(existing, desired *Mesh) error

// Writer knows how to create, delete, and update Meshs.
type MeshWriter interface {
	// Create saves the Mesh object.
	CreateMesh(ctx context.Context, obj *Mesh, opts ...client.CreateOption) error

	// Delete deletes the Mesh object.
	DeleteMesh(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given Mesh object.
	UpdateMesh(ctx context.Context, obj *Mesh, opts ...client.UpdateOption) error

	// Patch patches the given Mesh object.
	PatchMesh(ctx context.Context, obj *Mesh, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all Mesh objects matching the given options.
	DeleteAllOfMesh(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the Mesh object.
	UpsertMesh(ctx context.Context, obj *Mesh, transitionFuncs ...MeshTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a Mesh object.
type MeshStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given Mesh object.
	UpdateMeshStatus(ctx context.Context, obj *Mesh, opts ...client.UpdateOption) error

	// Patch patches the given Mesh object's subresource.
	PatchMeshStatus(ctx context.Context, obj *Mesh, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on Meshs.
type MeshClient interface {
	MeshReader
	MeshWriter
	MeshStatusWriter
}

type meshClient struct {
	client client.Client
}

func NewMeshClient(client client.Client) *meshClient {
	return &meshClient{client: client}
}

func (c *meshClient) GetMesh(ctx context.Context, key client.ObjectKey) (*Mesh, error) {
	obj := &Mesh{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *meshClient) ListMesh(ctx context.Context, opts ...client.ListOption) (*MeshList, error) {
	list := &MeshList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *meshClient) CreateMesh(ctx context.Context, obj *Mesh, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *meshClient) DeleteMesh(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &Mesh{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *meshClient) UpdateMesh(ctx context.Context, obj *Mesh, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *meshClient) PatchMesh(ctx context.Context, obj *Mesh, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *meshClient) DeleteAllOfMesh(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &Mesh{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *meshClient) UpsertMesh(ctx context.Context, obj *Mesh, transitionFuncs ...MeshTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*Mesh), desired.(*Mesh)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *meshClient) UpdateMeshStatus(ctx context.Context, obj *Mesh, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *meshClient) PatchMeshStatus(ctx context.Context, obj *Mesh, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides MeshClients for multiple clusters.
type MulticlusterMeshClient interface {
	// Cluster returns a MeshClient for the given cluster
	Cluster(cluster string) (MeshClient, error)
}

type multiclusterMeshClient struct {
	client multicluster.Client
}

func NewMulticlusterMeshClient(client multicluster.Client) MulticlusterMeshClient {
	return &multiclusterMeshClient{client: client}
}

func (m *multiclusterMeshClient) Cluster(cluster string) (MeshClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewMeshClient(client), nil
}

// Reader knows how to read and list DiscoveredCNIs.
type DiscoveredCNIReader interface {
	// Get retrieves a DiscoveredCNI for the given object key
	GetDiscoveredCNI(ctx context.Context, key client.ObjectKey) (*DiscoveredCNI, error)

	// List retrieves list of DiscoveredCNIs for a given namespace and list options.
	ListDiscoveredCNI(ctx context.Context, opts ...client.ListOption) (*DiscoveredCNIList, error)
}

// DiscoveredCNITransitionFunction instructs the DiscoveredCNIWriter how to transition between an existing
// DiscoveredCNI object and a desired on an Upsert
type DiscoveredCNITransitionFunction func(existing, desired *DiscoveredCNI) error

// Writer knows how to create, delete, and update DiscoveredCNIs.
type DiscoveredCNIWriter interface {
	// Create saves the DiscoveredCNI object.
	CreateDiscoveredCNI(ctx context.Context, obj *DiscoveredCNI, opts ...client.CreateOption) error

	// Delete deletes the DiscoveredCNI object.
	DeleteDiscoveredCNI(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given DiscoveredCNI object.
	UpdateDiscoveredCNI(ctx context.Context, obj *DiscoveredCNI, opts ...client.UpdateOption) error

	// Patch patches the given DiscoveredCNI object.
	PatchDiscoveredCNI(ctx context.Context, obj *DiscoveredCNI, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all DiscoveredCNI objects matching the given options.
	DeleteAllOfDiscoveredCNI(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the DiscoveredCNI object.
	UpsertDiscoveredCNI(ctx context.Context, obj *DiscoveredCNI, transitionFuncs ...DiscoveredCNITransitionFunction) error
}

// StatusWriter knows how to update status subresource of a DiscoveredCNI object.
type DiscoveredCNIStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given DiscoveredCNI object.
	UpdateDiscoveredCNIStatus(ctx context.Context, obj *DiscoveredCNI, opts ...client.UpdateOption) error

	// Patch patches the given DiscoveredCNI object's subresource.
	PatchDiscoveredCNIStatus(ctx context.Context, obj *DiscoveredCNI, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on DiscoveredCNIs.
type DiscoveredCNIClient interface {
	DiscoveredCNIReader
	DiscoveredCNIWriter
	DiscoveredCNIStatusWriter
}

type discoveredCNIClient struct {
	client client.Client
}

func NewDiscoveredCNIClient(client client.Client) *discoveredCNIClient {
	return &discoveredCNIClient{client: client}
}

func (c *discoveredCNIClient) GetDiscoveredCNI(ctx context.Context, key client.ObjectKey) (*DiscoveredCNI, error) {
	obj := &DiscoveredCNI{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *discoveredCNIClient) ListDiscoveredCNI(ctx context.Context, opts ...client.ListOption) (*DiscoveredCNIList, error) {
	list := &DiscoveredCNIList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *discoveredCNIClient) CreateDiscoveredCNI(ctx context.Context, obj *DiscoveredCNI, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *discoveredCNIClient) DeleteDiscoveredCNI(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &DiscoveredCNI{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *discoveredCNIClient) UpdateDiscoveredCNI(ctx context.Context, obj *DiscoveredCNI, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *discoveredCNIClient) PatchDiscoveredCNI(ctx context.Context, obj *DiscoveredCNI, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *discoveredCNIClient) DeleteAllOfDiscoveredCNI(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &DiscoveredCNI{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *discoveredCNIClient) UpsertDiscoveredCNI(ctx context.Context, obj *DiscoveredCNI, transitionFuncs ...DiscoveredCNITransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*DiscoveredCNI), desired.(*DiscoveredCNI)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *discoveredCNIClient) UpdateDiscoveredCNIStatus(ctx context.Context, obj *DiscoveredCNI, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *discoveredCNIClient) PatchDiscoveredCNIStatus(ctx context.Context, obj *DiscoveredCNI, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides DiscoveredCNIClients for multiple clusters.
type MulticlusterDiscoveredCNIClient interface {
	// Cluster returns a DiscoveredCNIClient for the given cluster
	Cluster(cluster string) (DiscoveredCNIClient, error)
}

type multiclusterDiscoveredCNIClient struct {
	client multicluster.Client
}

func NewMulticlusterDiscoveredCNIClient(client multicluster.Client) MulticlusterDiscoveredCNIClient {
	return &multiclusterDiscoveredCNIClient{client: client}
}

func (m *multiclusterDiscoveredCNIClient) Cluster(cluster string) (DiscoveredCNIClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewDiscoveredCNIClient(client), nil
}

// Reader knows how to read and list PortalConfigs.
type PortalConfigReader interface {
	// Get retrieves a PortalConfig for the given object key
	GetPortalConfig(ctx context.Context, key client.ObjectKey) (*PortalConfig, error)

	// List retrieves list of PortalConfigs for a given namespace and list options.
	ListPortalConfig(ctx context.Context, opts ...client.ListOption) (*PortalConfigList, error)
}

// PortalConfigTransitionFunction instructs the PortalConfigWriter how to transition between an existing
// PortalConfig object and a desired on an Upsert
type PortalConfigTransitionFunction func(existing, desired *PortalConfig) error

// Writer knows how to create, delete, and update PortalConfigs.
type PortalConfigWriter interface {
	// Create saves the PortalConfig object.
	CreatePortalConfig(ctx context.Context, obj *PortalConfig, opts ...client.CreateOption) error

	// Delete deletes the PortalConfig object.
	DeletePortalConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given PortalConfig object.
	UpdatePortalConfig(ctx context.Context, obj *PortalConfig, opts ...client.UpdateOption) error

	// Patch patches the given PortalConfig object.
	PatchPortalConfig(ctx context.Context, obj *PortalConfig, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all PortalConfig objects matching the given options.
	DeleteAllOfPortalConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the PortalConfig object.
	UpsertPortalConfig(ctx context.Context, obj *PortalConfig, transitionFuncs ...PortalConfigTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a PortalConfig object.
type PortalConfigStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given PortalConfig object.
	UpdatePortalConfigStatus(ctx context.Context, obj *PortalConfig, opts ...client.UpdateOption) error

	// Patch patches the given PortalConfig object's subresource.
	PatchPortalConfigStatus(ctx context.Context, obj *PortalConfig, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on PortalConfigs.
type PortalConfigClient interface {
	PortalConfigReader
	PortalConfigWriter
	PortalConfigStatusWriter
}

type portalConfigClient struct {
	client client.Client
}

func NewPortalConfigClient(client client.Client) *portalConfigClient {
	return &portalConfigClient{client: client}
}

func (c *portalConfigClient) GetPortalConfig(ctx context.Context, key client.ObjectKey) (*PortalConfig, error) {
	obj := &PortalConfig{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *portalConfigClient) ListPortalConfig(ctx context.Context, opts ...client.ListOption) (*PortalConfigList, error) {
	list := &PortalConfigList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *portalConfigClient) CreatePortalConfig(ctx context.Context, obj *PortalConfig, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *portalConfigClient) DeletePortalConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &PortalConfig{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *portalConfigClient) UpdatePortalConfig(ctx context.Context, obj *PortalConfig, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *portalConfigClient) PatchPortalConfig(ctx context.Context, obj *PortalConfig, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *portalConfigClient) DeleteAllOfPortalConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &PortalConfig{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *portalConfigClient) UpsertPortalConfig(ctx context.Context, obj *PortalConfig, transitionFuncs ...PortalConfigTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*PortalConfig), desired.(*PortalConfig)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *portalConfigClient) UpdatePortalConfigStatus(ctx context.Context, obj *PortalConfig, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *portalConfigClient) PatchPortalConfigStatus(ctx context.Context, obj *PortalConfig, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides PortalConfigClients for multiple clusters.
type MulticlusterPortalConfigClient interface {
	// Cluster returns a PortalConfigClient for the given cluster
	Cluster(cluster string) (PortalConfigClient, error)
}

type multiclusterPortalConfigClient struct {
	client multicluster.Client
}

func NewMulticlusterPortalConfigClient(client multicluster.Client) MulticlusterPortalConfigClient {
	return &multiclusterPortalConfigClient{client: client}
}

func (m *multiclusterPortalConfigClient) Cluster(cluster string) (PortalConfigClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewPortalConfigClient(client), nil
}
