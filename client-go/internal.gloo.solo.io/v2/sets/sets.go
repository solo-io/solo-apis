// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v2sets

import (
	internal_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/internal.gloo.solo.io/v2"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type IssuedCertificateSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*internal_gloo_solo_io_v2.IssuedCertificate) bool) []*internal_gloo_solo_io_v2.IssuedCertificate
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*internal_gloo_solo_io_v2.IssuedCertificate) bool) []*internal_gloo_solo_io_v2.IssuedCertificate
	// Return the Set as a map of key to resource.
	Map() map[string]*internal_gloo_solo_io_v2.IssuedCertificate
	// Insert a resource into the set.
	Insert(issuedCertificate ...*internal_gloo_solo_io_v2.IssuedCertificate)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(issuedCertificateSet IssuedCertificateSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(issuedCertificate ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(issuedCertificate ezkube.ResourceId)
	// Return the union with the provided set
	Union(set IssuedCertificateSet) IssuedCertificateSet
	// Return the difference with the provided set
	Difference(set IssuedCertificateSet) IssuedCertificateSet
	// Return the intersection with the provided set
	Intersection(set IssuedCertificateSet) IssuedCertificateSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*internal_gloo_solo_io_v2.IssuedCertificate, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another IssuedCertificateSet
	Delta(newSet IssuedCertificateSet) sksets.ResourceDelta
	// Create a deep copy of the current IssuedCertificateSet
	Clone() IssuedCertificateSet
}

func makeGenericIssuedCertificateSet(issuedCertificateList []*internal_gloo_solo_io_v2.IssuedCertificate) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range issuedCertificateList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type issuedCertificateSet struct {
	set sksets.ResourceSet
}

func NewIssuedCertificateSet(issuedCertificateList ...*internal_gloo_solo_io_v2.IssuedCertificate) IssuedCertificateSet {
	return &issuedCertificateSet{set: makeGenericIssuedCertificateSet(issuedCertificateList)}
}

func NewIssuedCertificateSetFromList(issuedCertificateList *internal_gloo_solo_io_v2.IssuedCertificateList) IssuedCertificateSet {
	list := make([]*internal_gloo_solo_io_v2.IssuedCertificate, 0, len(issuedCertificateList.Items))
	for idx := range issuedCertificateList.Items {
		list = append(list, &issuedCertificateList.Items[idx])
	}
	return &issuedCertificateSet{set: makeGenericIssuedCertificateSet(list)}
}

func (s *issuedCertificateSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *issuedCertificateSet) List(filterResource ...func(*internal_gloo_solo_io_v2.IssuedCertificate) bool) []*internal_gloo_solo_io_v2.IssuedCertificate {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*internal_gloo_solo_io_v2.IssuedCertificate))
		})
	}

	objs := s.Generic().List(genericFilters...)
	issuedCertificateList := make([]*internal_gloo_solo_io_v2.IssuedCertificate, 0, len(objs))
	for _, obj := range objs {
		issuedCertificateList = append(issuedCertificateList, obj.(*internal_gloo_solo_io_v2.IssuedCertificate))
	}
	return issuedCertificateList
}

func (s *issuedCertificateSet) UnsortedList(filterResource ...func(*internal_gloo_solo_io_v2.IssuedCertificate) bool) []*internal_gloo_solo_io_v2.IssuedCertificate {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*internal_gloo_solo_io_v2.IssuedCertificate))
		})
	}

	var issuedCertificateList []*internal_gloo_solo_io_v2.IssuedCertificate
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		issuedCertificateList = append(issuedCertificateList, obj.(*internal_gloo_solo_io_v2.IssuedCertificate))
	}
	return issuedCertificateList
}

func (s *issuedCertificateSet) Map() map[string]*internal_gloo_solo_io_v2.IssuedCertificate {
	if s == nil {
		return nil
	}

	newMap := map[string]*internal_gloo_solo_io_v2.IssuedCertificate{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*internal_gloo_solo_io_v2.IssuedCertificate)
	}
	return newMap
}

func (s *issuedCertificateSet) Insert(
	issuedCertificateList ...*internal_gloo_solo_io_v2.IssuedCertificate,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range issuedCertificateList {
		s.Generic().Insert(obj)
	}
}

func (s *issuedCertificateSet) Has(issuedCertificate ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(issuedCertificate)
}

func (s *issuedCertificateSet) Equal(
	issuedCertificateSet IssuedCertificateSet,
) bool {
	if s == nil {
		return issuedCertificateSet == nil
	}
	return s.Generic().Equal(issuedCertificateSet.Generic())
}

func (s *issuedCertificateSet) Delete(IssuedCertificate ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(IssuedCertificate)
}

func (s *issuedCertificateSet) Union(set IssuedCertificateSet) IssuedCertificateSet {
	if s == nil {
		return set
	}
	return NewIssuedCertificateSet(append(s.List(), set.List()...)...)
}

func (s *issuedCertificateSet) Difference(set IssuedCertificateSet) IssuedCertificateSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &issuedCertificateSet{set: newSet}
}

func (s *issuedCertificateSet) Intersection(set IssuedCertificateSet) IssuedCertificateSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var issuedCertificateList []*internal_gloo_solo_io_v2.IssuedCertificate
	for _, obj := range newSet.List() {
		issuedCertificateList = append(issuedCertificateList, obj.(*internal_gloo_solo_io_v2.IssuedCertificate))
	}
	return NewIssuedCertificateSet(issuedCertificateList...)
}

func (s *issuedCertificateSet) Find(id ezkube.ResourceId) (*internal_gloo_solo_io_v2.IssuedCertificate, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find IssuedCertificate %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&internal_gloo_solo_io_v2.IssuedCertificate{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*internal_gloo_solo_io_v2.IssuedCertificate), nil
}

func (s *issuedCertificateSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *issuedCertificateSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *issuedCertificateSet) Delta(newSet IssuedCertificateSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *issuedCertificateSet) Clone() IssuedCertificateSet {
	if s == nil {
		return nil
	}
	return &issuedCertificateSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type CertificateRequestSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*internal_gloo_solo_io_v2.CertificateRequest) bool) []*internal_gloo_solo_io_v2.CertificateRequest
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*internal_gloo_solo_io_v2.CertificateRequest) bool) []*internal_gloo_solo_io_v2.CertificateRequest
	// Return the Set as a map of key to resource.
	Map() map[string]*internal_gloo_solo_io_v2.CertificateRequest
	// Insert a resource into the set.
	Insert(certificateRequest ...*internal_gloo_solo_io_v2.CertificateRequest)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(certificateRequestSet CertificateRequestSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(certificateRequest ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(certificateRequest ezkube.ResourceId)
	// Return the union with the provided set
	Union(set CertificateRequestSet) CertificateRequestSet
	// Return the difference with the provided set
	Difference(set CertificateRequestSet) CertificateRequestSet
	// Return the intersection with the provided set
	Intersection(set CertificateRequestSet) CertificateRequestSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*internal_gloo_solo_io_v2.CertificateRequest, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another CertificateRequestSet
	Delta(newSet CertificateRequestSet) sksets.ResourceDelta
	// Create a deep copy of the current CertificateRequestSet
	Clone() CertificateRequestSet
}

func makeGenericCertificateRequestSet(certificateRequestList []*internal_gloo_solo_io_v2.CertificateRequest) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range certificateRequestList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type certificateRequestSet struct {
	set sksets.ResourceSet
}

func NewCertificateRequestSet(certificateRequestList ...*internal_gloo_solo_io_v2.CertificateRequest) CertificateRequestSet {
	return &certificateRequestSet{set: makeGenericCertificateRequestSet(certificateRequestList)}
}

func NewCertificateRequestSetFromList(certificateRequestList *internal_gloo_solo_io_v2.CertificateRequestList) CertificateRequestSet {
	list := make([]*internal_gloo_solo_io_v2.CertificateRequest, 0, len(certificateRequestList.Items))
	for idx := range certificateRequestList.Items {
		list = append(list, &certificateRequestList.Items[idx])
	}
	return &certificateRequestSet{set: makeGenericCertificateRequestSet(list)}
}

func (s *certificateRequestSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *certificateRequestSet) List(filterResource ...func(*internal_gloo_solo_io_v2.CertificateRequest) bool) []*internal_gloo_solo_io_v2.CertificateRequest {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*internal_gloo_solo_io_v2.CertificateRequest))
		})
	}

	objs := s.Generic().List(genericFilters...)
	certificateRequestList := make([]*internal_gloo_solo_io_v2.CertificateRequest, 0, len(objs))
	for _, obj := range objs {
		certificateRequestList = append(certificateRequestList, obj.(*internal_gloo_solo_io_v2.CertificateRequest))
	}
	return certificateRequestList
}

func (s *certificateRequestSet) UnsortedList(filterResource ...func(*internal_gloo_solo_io_v2.CertificateRequest) bool) []*internal_gloo_solo_io_v2.CertificateRequest {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*internal_gloo_solo_io_v2.CertificateRequest))
		})
	}

	var certificateRequestList []*internal_gloo_solo_io_v2.CertificateRequest
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		certificateRequestList = append(certificateRequestList, obj.(*internal_gloo_solo_io_v2.CertificateRequest))
	}
	return certificateRequestList
}

func (s *certificateRequestSet) Map() map[string]*internal_gloo_solo_io_v2.CertificateRequest {
	if s == nil {
		return nil
	}

	newMap := map[string]*internal_gloo_solo_io_v2.CertificateRequest{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*internal_gloo_solo_io_v2.CertificateRequest)
	}
	return newMap
}

func (s *certificateRequestSet) Insert(
	certificateRequestList ...*internal_gloo_solo_io_v2.CertificateRequest,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range certificateRequestList {
		s.Generic().Insert(obj)
	}
}

func (s *certificateRequestSet) Has(certificateRequest ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(certificateRequest)
}

func (s *certificateRequestSet) Equal(
	certificateRequestSet CertificateRequestSet,
) bool {
	if s == nil {
		return certificateRequestSet == nil
	}
	return s.Generic().Equal(certificateRequestSet.Generic())
}

func (s *certificateRequestSet) Delete(CertificateRequest ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(CertificateRequest)
}

func (s *certificateRequestSet) Union(set CertificateRequestSet) CertificateRequestSet {
	if s == nil {
		return set
	}
	return NewCertificateRequestSet(append(s.List(), set.List()...)...)
}

func (s *certificateRequestSet) Difference(set CertificateRequestSet) CertificateRequestSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &certificateRequestSet{set: newSet}
}

func (s *certificateRequestSet) Intersection(set CertificateRequestSet) CertificateRequestSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var certificateRequestList []*internal_gloo_solo_io_v2.CertificateRequest
	for _, obj := range newSet.List() {
		certificateRequestList = append(certificateRequestList, obj.(*internal_gloo_solo_io_v2.CertificateRequest))
	}
	return NewCertificateRequestSet(certificateRequestList...)
}

func (s *certificateRequestSet) Find(id ezkube.ResourceId) (*internal_gloo_solo_io_v2.CertificateRequest, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find CertificateRequest %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&internal_gloo_solo_io_v2.CertificateRequest{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*internal_gloo_solo_io_v2.CertificateRequest), nil
}

func (s *certificateRequestSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *certificateRequestSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *certificateRequestSet) Delta(newSet CertificateRequestSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *certificateRequestSet) Clone() CertificateRequestSet {
	if s == nil {
		return nil
	}
	return &certificateRequestSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type PodBounceDirectiveSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*internal_gloo_solo_io_v2.PodBounceDirective) bool) []*internal_gloo_solo_io_v2.PodBounceDirective
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*internal_gloo_solo_io_v2.PodBounceDirective) bool) []*internal_gloo_solo_io_v2.PodBounceDirective
	// Return the Set as a map of key to resource.
	Map() map[string]*internal_gloo_solo_io_v2.PodBounceDirective
	// Insert a resource into the set.
	Insert(podBounceDirective ...*internal_gloo_solo_io_v2.PodBounceDirective)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(podBounceDirectiveSet PodBounceDirectiveSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(podBounceDirective ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(podBounceDirective ezkube.ResourceId)
	// Return the union with the provided set
	Union(set PodBounceDirectiveSet) PodBounceDirectiveSet
	// Return the difference with the provided set
	Difference(set PodBounceDirectiveSet) PodBounceDirectiveSet
	// Return the intersection with the provided set
	Intersection(set PodBounceDirectiveSet) PodBounceDirectiveSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*internal_gloo_solo_io_v2.PodBounceDirective, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another PodBounceDirectiveSet
	Delta(newSet PodBounceDirectiveSet) sksets.ResourceDelta
	// Create a deep copy of the current PodBounceDirectiveSet
	Clone() PodBounceDirectiveSet
}

func makeGenericPodBounceDirectiveSet(podBounceDirectiveList []*internal_gloo_solo_io_v2.PodBounceDirective) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range podBounceDirectiveList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type podBounceDirectiveSet struct {
	set sksets.ResourceSet
}

func NewPodBounceDirectiveSet(podBounceDirectiveList ...*internal_gloo_solo_io_v2.PodBounceDirective) PodBounceDirectiveSet {
	return &podBounceDirectiveSet{set: makeGenericPodBounceDirectiveSet(podBounceDirectiveList)}
}

func NewPodBounceDirectiveSetFromList(podBounceDirectiveList *internal_gloo_solo_io_v2.PodBounceDirectiveList) PodBounceDirectiveSet {
	list := make([]*internal_gloo_solo_io_v2.PodBounceDirective, 0, len(podBounceDirectiveList.Items))
	for idx := range podBounceDirectiveList.Items {
		list = append(list, &podBounceDirectiveList.Items[idx])
	}
	return &podBounceDirectiveSet{set: makeGenericPodBounceDirectiveSet(list)}
}

func (s *podBounceDirectiveSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *podBounceDirectiveSet) List(filterResource ...func(*internal_gloo_solo_io_v2.PodBounceDirective) bool) []*internal_gloo_solo_io_v2.PodBounceDirective {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*internal_gloo_solo_io_v2.PodBounceDirective))
		})
	}

	objs := s.Generic().List(genericFilters...)
	podBounceDirectiveList := make([]*internal_gloo_solo_io_v2.PodBounceDirective, 0, len(objs))
	for _, obj := range objs {
		podBounceDirectiveList = append(podBounceDirectiveList, obj.(*internal_gloo_solo_io_v2.PodBounceDirective))
	}
	return podBounceDirectiveList
}

func (s *podBounceDirectiveSet) UnsortedList(filterResource ...func(*internal_gloo_solo_io_v2.PodBounceDirective) bool) []*internal_gloo_solo_io_v2.PodBounceDirective {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*internal_gloo_solo_io_v2.PodBounceDirective))
		})
	}

	var podBounceDirectiveList []*internal_gloo_solo_io_v2.PodBounceDirective
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		podBounceDirectiveList = append(podBounceDirectiveList, obj.(*internal_gloo_solo_io_v2.PodBounceDirective))
	}
	return podBounceDirectiveList
}

func (s *podBounceDirectiveSet) Map() map[string]*internal_gloo_solo_io_v2.PodBounceDirective {
	if s == nil {
		return nil
	}

	newMap := map[string]*internal_gloo_solo_io_v2.PodBounceDirective{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*internal_gloo_solo_io_v2.PodBounceDirective)
	}
	return newMap
}

func (s *podBounceDirectiveSet) Insert(
	podBounceDirectiveList ...*internal_gloo_solo_io_v2.PodBounceDirective,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range podBounceDirectiveList {
		s.Generic().Insert(obj)
	}
}

func (s *podBounceDirectiveSet) Has(podBounceDirective ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(podBounceDirective)
}

func (s *podBounceDirectiveSet) Equal(
	podBounceDirectiveSet PodBounceDirectiveSet,
) bool {
	if s == nil {
		return podBounceDirectiveSet == nil
	}
	return s.Generic().Equal(podBounceDirectiveSet.Generic())
}

func (s *podBounceDirectiveSet) Delete(PodBounceDirective ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(PodBounceDirective)
}

func (s *podBounceDirectiveSet) Union(set PodBounceDirectiveSet) PodBounceDirectiveSet {
	if s == nil {
		return set
	}
	return NewPodBounceDirectiveSet(append(s.List(), set.List()...)...)
}

func (s *podBounceDirectiveSet) Difference(set PodBounceDirectiveSet) PodBounceDirectiveSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &podBounceDirectiveSet{set: newSet}
}

func (s *podBounceDirectiveSet) Intersection(set PodBounceDirectiveSet) PodBounceDirectiveSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var podBounceDirectiveList []*internal_gloo_solo_io_v2.PodBounceDirective
	for _, obj := range newSet.List() {
		podBounceDirectiveList = append(podBounceDirectiveList, obj.(*internal_gloo_solo_io_v2.PodBounceDirective))
	}
	return NewPodBounceDirectiveSet(podBounceDirectiveList...)
}

func (s *podBounceDirectiveSet) Find(id ezkube.ResourceId) (*internal_gloo_solo_io_v2.PodBounceDirective, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find PodBounceDirective %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&internal_gloo_solo_io_v2.PodBounceDirective{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*internal_gloo_solo_io_v2.PodBounceDirective), nil
}

func (s *podBounceDirectiveSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *podBounceDirectiveSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *podBounceDirectiveSet) Delta(newSet PodBounceDirectiveSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *podBounceDirectiveSet) Clone() PodBounceDirectiveSet {
	if s == nil {
		return nil
	}
	return &podBounceDirectiveSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type XdsConfigSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*internal_gloo_solo_io_v2.XdsConfig) bool) []*internal_gloo_solo_io_v2.XdsConfig
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*internal_gloo_solo_io_v2.XdsConfig) bool) []*internal_gloo_solo_io_v2.XdsConfig
	// Return the Set as a map of key to resource.
	Map() map[string]*internal_gloo_solo_io_v2.XdsConfig
	// Insert a resource into the set.
	Insert(xdsConfig ...*internal_gloo_solo_io_v2.XdsConfig)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(xdsConfigSet XdsConfigSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(xdsConfig ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(xdsConfig ezkube.ResourceId)
	// Return the union with the provided set
	Union(set XdsConfigSet) XdsConfigSet
	// Return the difference with the provided set
	Difference(set XdsConfigSet) XdsConfigSet
	// Return the intersection with the provided set
	Intersection(set XdsConfigSet) XdsConfigSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*internal_gloo_solo_io_v2.XdsConfig, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another XdsConfigSet
	Delta(newSet XdsConfigSet) sksets.ResourceDelta
	// Create a deep copy of the current XdsConfigSet
	Clone() XdsConfigSet
}

func makeGenericXdsConfigSet(xdsConfigList []*internal_gloo_solo_io_v2.XdsConfig) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range xdsConfigList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type xdsConfigSet struct {
	set sksets.ResourceSet
}

func NewXdsConfigSet(xdsConfigList ...*internal_gloo_solo_io_v2.XdsConfig) XdsConfigSet {
	return &xdsConfigSet{set: makeGenericXdsConfigSet(xdsConfigList)}
}

func NewXdsConfigSetFromList(xdsConfigList *internal_gloo_solo_io_v2.XdsConfigList) XdsConfigSet {
	list := make([]*internal_gloo_solo_io_v2.XdsConfig, 0, len(xdsConfigList.Items))
	for idx := range xdsConfigList.Items {
		list = append(list, &xdsConfigList.Items[idx])
	}
	return &xdsConfigSet{set: makeGenericXdsConfigSet(list)}
}

func (s *xdsConfigSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *xdsConfigSet) List(filterResource ...func(*internal_gloo_solo_io_v2.XdsConfig) bool) []*internal_gloo_solo_io_v2.XdsConfig {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*internal_gloo_solo_io_v2.XdsConfig))
		})
	}

	objs := s.Generic().List(genericFilters...)
	xdsConfigList := make([]*internal_gloo_solo_io_v2.XdsConfig, 0, len(objs))
	for _, obj := range objs {
		xdsConfigList = append(xdsConfigList, obj.(*internal_gloo_solo_io_v2.XdsConfig))
	}
	return xdsConfigList
}

func (s *xdsConfigSet) UnsortedList(filterResource ...func(*internal_gloo_solo_io_v2.XdsConfig) bool) []*internal_gloo_solo_io_v2.XdsConfig {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*internal_gloo_solo_io_v2.XdsConfig))
		})
	}

	var xdsConfigList []*internal_gloo_solo_io_v2.XdsConfig
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		xdsConfigList = append(xdsConfigList, obj.(*internal_gloo_solo_io_v2.XdsConfig))
	}
	return xdsConfigList
}

func (s *xdsConfigSet) Map() map[string]*internal_gloo_solo_io_v2.XdsConfig {
	if s == nil {
		return nil
	}

	newMap := map[string]*internal_gloo_solo_io_v2.XdsConfig{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*internal_gloo_solo_io_v2.XdsConfig)
	}
	return newMap
}

func (s *xdsConfigSet) Insert(
	xdsConfigList ...*internal_gloo_solo_io_v2.XdsConfig,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range xdsConfigList {
		s.Generic().Insert(obj)
	}
}

func (s *xdsConfigSet) Has(xdsConfig ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(xdsConfig)
}

func (s *xdsConfigSet) Equal(
	xdsConfigSet XdsConfigSet,
) bool {
	if s == nil {
		return xdsConfigSet == nil
	}
	return s.Generic().Equal(xdsConfigSet.Generic())
}

func (s *xdsConfigSet) Delete(XdsConfig ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(XdsConfig)
}

func (s *xdsConfigSet) Union(set XdsConfigSet) XdsConfigSet {
	if s == nil {
		return set
	}
	return NewXdsConfigSet(append(s.List(), set.List()...)...)
}

func (s *xdsConfigSet) Difference(set XdsConfigSet) XdsConfigSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &xdsConfigSet{set: newSet}
}

func (s *xdsConfigSet) Intersection(set XdsConfigSet) XdsConfigSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var xdsConfigList []*internal_gloo_solo_io_v2.XdsConfig
	for _, obj := range newSet.List() {
		xdsConfigList = append(xdsConfigList, obj.(*internal_gloo_solo_io_v2.XdsConfig))
	}
	return NewXdsConfigSet(xdsConfigList...)
}

func (s *xdsConfigSet) Find(id ezkube.ResourceId) (*internal_gloo_solo_io_v2.XdsConfig, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find XdsConfig %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&internal_gloo_solo_io_v2.XdsConfig{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*internal_gloo_solo_io_v2.XdsConfig), nil
}

func (s *xdsConfigSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *xdsConfigSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *xdsConfigSet) Delta(newSet XdsConfigSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *xdsConfigSet) Clone() XdsConfigSet {
	if s == nil {
		return nil
	}
	return &xdsConfigSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type DiscoveredGatewaySet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*internal_gloo_solo_io_v2.DiscoveredGateway) bool) []*internal_gloo_solo_io_v2.DiscoveredGateway
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*internal_gloo_solo_io_v2.DiscoveredGateway) bool) []*internal_gloo_solo_io_v2.DiscoveredGateway
	// Return the Set as a map of key to resource.
	Map() map[string]*internal_gloo_solo_io_v2.DiscoveredGateway
	// Insert a resource into the set.
	Insert(discoveredGateway ...*internal_gloo_solo_io_v2.DiscoveredGateway)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(discoveredGatewaySet DiscoveredGatewaySet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(discoveredGateway ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(discoveredGateway ezkube.ResourceId)
	// Return the union with the provided set
	Union(set DiscoveredGatewaySet) DiscoveredGatewaySet
	// Return the difference with the provided set
	Difference(set DiscoveredGatewaySet) DiscoveredGatewaySet
	// Return the intersection with the provided set
	Intersection(set DiscoveredGatewaySet) DiscoveredGatewaySet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*internal_gloo_solo_io_v2.DiscoveredGateway, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another DiscoveredGatewaySet
	Delta(newSet DiscoveredGatewaySet) sksets.ResourceDelta
	// Create a deep copy of the current DiscoveredGatewaySet
	Clone() DiscoveredGatewaySet
}

func makeGenericDiscoveredGatewaySet(discoveredGatewayList []*internal_gloo_solo_io_v2.DiscoveredGateway) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range discoveredGatewayList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type discoveredGatewaySet struct {
	set sksets.ResourceSet
}

func NewDiscoveredGatewaySet(discoveredGatewayList ...*internal_gloo_solo_io_v2.DiscoveredGateway) DiscoveredGatewaySet {
	return &discoveredGatewaySet{set: makeGenericDiscoveredGatewaySet(discoveredGatewayList)}
}

func NewDiscoveredGatewaySetFromList(discoveredGatewayList *internal_gloo_solo_io_v2.DiscoveredGatewayList) DiscoveredGatewaySet {
	list := make([]*internal_gloo_solo_io_v2.DiscoveredGateway, 0, len(discoveredGatewayList.Items))
	for idx := range discoveredGatewayList.Items {
		list = append(list, &discoveredGatewayList.Items[idx])
	}
	return &discoveredGatewaySet{set: makeGenericDiscoveredGatewaySet(list)}
}

func (s *discoveredGatewaySet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *discoveredGatewaySet) List(filterResource ...func(*internal_gloo_solo_io_v2.DiscoveredGateway) bool) []*internal_gloo_solo_io_v2.DiscoveredGateway {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*internal_gloo_solo_io_v2.DiscoveredGateway))
		})
	}

	objs := s.Generic().List(genericFilters...)
	discoveredGatewayList := make([]*internal_gloo_solo_io_v2.DiscoveredGateway, 0, len(objs))
	for _, obj := range objs {
		discoveredGatewayList = append(discoveredGatewayList, obj.(*internal_gloo_solo_io_v2.DiscoveredGateway))
	}
	return discoveredGatewayList
}

func (s *discoveredGatewaySet) UnsortedList(filterResource ...func(*internal_gloo_solo_io_v2.DiscoveredGateway) bool) []*internal_gloo_solo_io_v2.DiscoveredGateway {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*internal_gloo_solo_io_v2.DiscoveredGateway))
		})
	}

	var discoveredGatewayList []*internal_gloo_solo_io_v2.DiscoveredGateway
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		discoveredGatewayList = append(discoveredGatewayList, obj.(*internal_gloo_solo_io_v2.DiscoveredGateway))
	}
	return discoveredGatewayList
}

func (s *discoveredGatewaySet) Map() map[string]*internal_gloo_solo_io_v2.DiscoveredGateway {
	if s == nil {
		return nil
	}

	newMap := map[string]*internal_gloo_solo_io_v2.DiscoveredGateway{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*internal_gloo_solo_io_v2.DiscoveredGateway)
	}
	return newMap
}

func (s *discoveredGatewaySet) Insert(
	discoveredGatewayList ...*internal_gloo_solo_io_v2.DiscoveredGateway,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range discoveredGatewayList {
		s.Generic().Insert(obj)
	}
}

func (s *discoveredGatewaySet) Has(discoveredGateway ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(discoveredGateway)
}

func (s *discoveredGatewaySet) Equal(
	discoveredGatewaySet DiscoveredGatewaySet,
) bool {
	if s == nil {
		return discoveredGatewaySet == nil
	}
	return s.Generic().Equal(discoveredGatewaySet.Generic())
}

func (s *discoveredGatewaySet) Delete(DiscoveredGateway ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(DiscoveredGateway)
}

func (s *discoveredGatewaySet) Union(set DiscoveredGatewaySet) DiscoveredGatewaySet {
	if s == nil {
		return set
	}
	return NewDiscoveredGatewaySet(append(s.List(), set.List()...)...)
}

func (s *discoveredGatewaySet) Difference(set DiscoveredGatewaySet) DiscoveredGatewaySet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &discoveredGatewaySet{set: newSet}
}

func (s *discoveredGatewaySet) Intersection(set DiscoveredGatewaySet) DiscoveredGatewaySet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var discoveredGatewayList []*internal_gloo_solo_io_v2.DiscoveredGateway
	for _, obj := range newSet.List() {
		discoveredGatewayList = append(discoveredGatewayList, obj.(*internal_gloo_solo_io_v2.DiscoveredGateway))
	}
	return NewDiscoveredGatewaySet(discoveredGatewayList...)
}

func (s *discoveredGatewaySet) Find(id ezkube.ResourceId) (*internal_gloo_solo_io_v2.DiscoveredGateway, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find DiscoveredGateway %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&internal_gloo_solo_io_v2.DiscoveredGateway{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*internal_gloo_solo_io_v2.DiscoveredGateway), nil
}

func (s *discoveredGatewaySet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *discoveredGatewaySet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *discoveredGatewaySet) Delta(newSet DiscoveredGatewaySet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *discoveredGatewaySet) Clone() DiscoveredGatewaySet {
	if s == nil {
		return nil
	}
	return &discoveredGatewaySet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type MeshSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*internal_gloo_solo_io_v2.Mesh) bool) []*internal_gloo_solo_io_v2.Mesh
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*internal_gloo_solo_io_v2.Mesh) bool) []*internal_gloo_solo_io_v2.Mesh
	// Return the Set as a map of key to resource.
	Map() map[string]*internal_gloo_solo_io_v2.Mesh
	// Insert a resource into the set.
	Insert(mesh ...*internal_gloo_solo_io_v2.Mesh)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(meshSet MeshSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(mesh ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(mesh ezkube.ResourceId)
	// Return the union with the provided set
	Union(set MeshSet) MeshSet
	// Return the difference with the provided set
	Difference(set MeshSet) MeshSet
	// Return the intersection with the provided set
	Intersection(set MeshSet) MeshSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*internal_gloo_solo_io_v2.Mesh, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another MeshSet
	Delta(newSet MeshSet) sksets.ResourceDelta
	// Create a deep copy of the current MeshSet
	Clone() MeshSet
}

func makeGenericMeshSet(meshList []*internal_gloo_solo_io_v2.Mesh) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range meshList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type meshSet struct {
	set sksets.ResourceSet
}

func NewMeshSet(meshList ...*internal_gloo_solo_io_v2.Mesh) MeshSet {
	return &meshSet{set: makeGenericMeshSet(meshList)}
}

func NewMeshSetFromList(meshList *internal_gloo_solo_io_v2.MeshList) MeshSet {
	list := make([]*internal_gloo_solo_io_v2.Mesh, 0, len(meshList.Items))
	for idx := range meshList.Items {
		list = append(list, &meshList.Items[idx])
	}
	return &meshSet{set: makeGenericMeshSet(list)}
}

func (s *meshSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *meshSet) List(filterResource ...func(*internal_gloo_solo_io_v2.Mesh) bool) []*internal_gloo_solo_io_v2.Mesh {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*internal_gloo_solo_io_v2.Mesh))
		})
	}

	objs := s.Generic().List(genericFilters...)
	meshList := make([]*internal_gloo_solo_io_v2.Mesh, 0, len(objs))
	for _, obj := range objs {
		meshList = append(meshList, obj.(*internal_gloo_solo_io_v2.Mesh))
	}
	return meshList
}

func (s *meshSet) UnsortedList(filterResource ...func(*internal_gloo_solo_io_v2.Mesh) bool) []*internal_gloo_solo_io_v2.Mesh {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*internal_gloo_solo_io_v2.Mesh))
		})
	}

	var meshList []*internal_gloo_solo_io_v2.Mesh
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		meshList = append(meshList, obj.(*internal_gloo_solo_io_v2.Mesh))
	}
	return meshList
}

func (s *meshSet) Map() map[string]*internal_gloo_solo_io_v2.Mesh {
	if s == nil {
		return nil
	}

	newMap := map[string]*internal_gloo_solo_io_v2.Mesh{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*internal_gloo_solo_io_v2.Mesh)
	}
	return newMap
}

func (s *meshSet) Insert(
	meshList ...*internal_gloo_solo_io_v2.Mesh,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range meshList {
		s.Generic().Insert(obj)
	}
}

func (s *meshSet) Has(mesh ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(mesh)
}

func (s *meshSet) Equal(
	meshSet MeshSet,
) bool {
	if s == nil {
		return meshSet == nil
	}
	return s.Generic().Equal(meshSet.Generic())
}

func (s *meshSet) Delete(Mesh ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(Mesh)
}

func (s *meshSet) Union(set MeshSet) MeshSet {
	if s == nil {
		return set
	}
	return NewMeshSet(append(s.List(), set.List()...)...)
}

func (s *meshSet) Difference(set MeshSet) MeshSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &meshSet{set: newSet}
}

func (s *meshSet) Intersection(set MeshSet) MeshSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var meshList []*internal_gloo_solo_io_v2.Mesh
	for _, obj := range newSet.List() {
		meshList = append(meshList, obj.(*internal_gloo_solo_io_v2.Mesh))
	}
	return NewMeshSet(meshList...)
}

func (s *meshSet) Find(id ezkube.ResourceId) (*internal_gloo_solo_io_v2.Mesh, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find Mesh %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&internal_gloo_solo_io_v2.Mesh{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*internal_gloo_solo_io_v2.Mesh), nil
}

func (s *meshSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *meshSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *meshSet) Delta(newSet MeshSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *meshSet) Clone() MeshSet {
	if s == nil {
		return nil
	}
	return &meshSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type DiscoveredCNISet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*internal_gloo_solo_io_v2.DiscoveredCNI) bool) []*internal_gloo_solo_io_v2.DiscoveredCNI
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*internal_gloo_solo_io_v2.DiscoveredCNI) bool) []*internal_gloo_solo_io_v2.DiscoveredCNI
	// Return the Set as a map of key to resource.
	Map() map[string]*internal_gloo_solo_io_v2.DiscoveredCNI
	// Insert a resource into the set.
	Insert(discoveredCNI ...*internal_gloo_solo_io_v2.DiscoveredCNI)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(discoveredCNISet DiscoveredCNISet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(discoveredCNI ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(discoveredCNI ezkube.ResourceId)
	// Return the union with the provided set
	Union(set DiscoveredCNISet) DiscoveredCNISet
	// Return the difference with the provided set
	Difference(set DiscoveredCNISet) DiscoveredCNISet
	// Return the intersection with the provided set
	Intersection(set DiscoveredCNISet) DiscoveredCNISet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*internal_gloo_solo_io_v2.DiscoveredCNI, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another DiscoveredCNISet
	Delta(newSet DiscoveredCNISet) sksets.ResourceDelta
	// Create a deep copy of the current DiscoveredCNISet
	Clone() DiscoveredCNISet
}

func makeGenericDiscoveredCNISet(discoveredCNIList []*internal_gloo_solo_io_v2.DiscoveredCNI) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range discoveredCNIList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type discoveredCNISet struct {
	set sksets.ResourceSet
}

func NewDiscoveredCNISet(discoveredCNIList ...*internal_gloo_solo_io_v2.DiscoveredCNI) DiscoveredCNISet {
	return &discoveredCNISet{set: makeGenericDiscoveredCNISet(discoveredCNIList)}
}

func NewDiscoveredCNISetFromList(discoveredCNIList *internal_gloo_solo_io_v2.DiscoveredCNIList) DiscoveredCNISet {
	list := make([]*internal_gloo_solo_io_v2.DiscoveredCNI, 0, len(discoveredCNIList.Items))
	for idx := range discoveredCNIList.Items {
		list = append(list, &discoveredCNIList.Items[idx])
	}
	return &discoveredCNISet{set: makeGenericDiscoveredCNISet(list)}
}

func (s *discoveredCNISet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *discoveredCNISet) List(filterResource ...func(*internal_gloo_solo_io_v2.DiscoveredCNI) bool) []*internal_gloo_solo_io_v2.DiscoveredCNI {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*internal_gloo_solo_io_v2.DiscoveredCNI))
		})
	}

	objs := s.Generic().List(genericFilters...)
	discoveredCNIList := make([]*internal_gloo_solo_io_v2.DiscoveredCNI, 0, len(objs))
	for _, obj := range objs {
		discoveredCNIList = append(discoveredCNIList, obj.(*internal_gloo_solo_io_v2.DiscoveredCNI))
	}
	return discoveredCNIList
}

func (s *discoveredCNISet) UnsortedList(filterResource ...func(*internal_gloo_solo_io_v2.DiscoveredCNI) bool) []*internal_gloo_solo_io_v2.DiscoveredCNI {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*internal_gloo_solo_io_v2.DiscoveredCNI))
		})
	}

	var discoveredCNIList []*internal_gloo_solo_io_v2.DiscoveredCNI
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		discoveredCNIList = append(discoveredCNIList, obj.(*internal_gloo_solo_io_v2.DiscoveredCNI))
	}
	return discoveredCNIList
}

func (s *discoveredCNISet) Map() map[string]*internal_gloo_solo_io_v2.DiscoveredCNI {
	if s == nil {
		return nil
	}

	newMap := map[string]*internal_gloo_solo_io_v2.DiscoveredCNI{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*internal_gloo_solo_io_v2.DiscoveredCNI)
	}
	return newMap
}

func (s *discoveredCNISet) Insert(
	discoveredCNIList ...*internal_gloo_solo_io_v2.DiscoveredCNI,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range discoveredCNIList {
		s.Generic().Insert(obj)
	}
}

func (s *discoveredCNISet) Has(discoveredCNI ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(discoveredCNI)
}

func (s *discoveredCNISet) Equal(
	discoveredCNISet DiscoveredCNISet,
) bool {
	if s == nil {
		return discoveredCNISet == nil
	}
	return s.Generic().Equal(discoveredCNISet.Generic())
}

func (s *discoveredCNISet) Delete(DiscoveredCNI ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(DiscoveredCNI)
}

func (s *discoveredCNISet) Union(set DiscoveredCNISet) DiscoveredCNISet {
	if s == nil {
		return set
	}
	return NewDiscoveredCNISet(append(s.List(), set.List()...)...)
}

func (s *discoveredCNISet) Difference(set DiscoveredCNISet) DiscoveredCNISet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &discoveredCNISet{set: newSet}
}

func (s *discoveredCNISet) Intersection(set DiscoveredCNISet) DiscoveredCNISet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var discoveredCNIList []*internal_gloo_solo_io_v2.DiscoveredCNI
	for _, obj := range newSet.List() {
		discoveredCNIList = append(discoveredCNIList, obj.(*internal_gloo_solo_io_v2.DiscoveredCNI))
	}
	return NewDiscoveredCNISet(discoveredCNIList...)
}

func (s *discoveredCNISet) Find(id ezkube.ResourceId) (*internal_gloo_solo_io_v2.DiscoveredCNI, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find DiscoveredCNI %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&internal_gloo_solo_io_v2.DiscoveredCNI{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*internal_gloo_solo_io_v2.DiscoveredCNI), nil
}

func (s *discoveredCNISet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *discoveredCNISet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *discoveredCNISet) Delta(newSet DiscoveredCNISet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *discoveredCNISet) Clone() DiscoveredCNISet {
	if s == nil {
		return nil
	}
	return &discoveredCNISet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type PortalConfigSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*internal_gloo_solo_io_v2.PortalConfig) bool) []*internal_gloo_solo_io_v2.PortalConfig
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*internal_gloo_solo_io_v2.PortalConfig) bool) []*internal_gloo_solo_io_v2.PortalConfig
	// Return the Set as a map of key to resource.
	Map() map[string]*internal_gloo_solo_io_v2.PortalConfig
	// Insert a resource into the set.
	Insert(portalConfig ...*internal_gloo_solo_io_v2.PortalConfig)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(portalConfigSet PortalConfigSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(portalConfig ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(portalConfig ezkube.ResourceId)
	// Return the union with the provided set
	Union(set PortalConfigSet) PortalConfigSet
	// Return the difference with the provided set
	Difference(set PortalConfigSet) PortalConfigSet
	// Return the intersection with the provided set
	Intersection(set PortalConfigSet) PortalConfigSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*internal_gloo_solo_io_v2.PortalConfig, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another PortalConfigSet
	Delta(newSet PortalConfigSet) sksets.ResourceDelta
	// Create a deep copy of the current PortalConfigSet
	Clone() PortalConfigSet
}

func makeGenericPortalConfigSet(portalConfigList []*internal_gloo_solo_io_v2.PortalConfig) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range portalConfigList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type portalConfigSet struct {
	set sksets.ResourceSet
}

func NewPortalConfigSet(portalConfigList ...*internal_gloo_solo_io_v2.PortalConfig) PortalConfigSet {
	return &portalConfigSet{set: makeGenericPortalConfigSet(portalConfigList)}
}

func NewPortalConfigSetFromList(portalConfigList *internal_gloo_solo_io_v2.PortalConfigList) PortalConfigSet {
	list := make([]*internal_gloo_solo_io_v2.PortalConfig, 0, len(portalConfigList.Items))
	for idx := range portalConfigList.Items {
		list = append(list, &portalConfigList.Items[idx])
	}
	return &portalConfigSet{set: makeGenericPortalConfigSet(list)}
}

func (s *portalConfigSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *portalConfigSet) List(filterResource ...func(*internal_gloo_solo_io_v2.PortalConfig) bool) []*internal_gloo_solo_io_v2.PortalConfig {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*internal_gloo_solo_io_v2.PortalConfig))
		})
	}

	objs := s.Generic().List(genericFilters...)
	portalConfigList := make([]*internal_gloo_solo_io_v2.PortalConfig, 0, len(objs))
	for _, obj := range objs {
		portalConfigList = append(portalConfigList, obj.(*internal_gloo_solo_io_v2.PortalConfig))
	}
	return portalConfigList
}

func (s *portalConfigSet) UnsortedList(filterResource ...func(*internal_gloo_solo_io_v2.PortalConfig) bool) []*internal_gloo_solo_io_v2.PortalConfig {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*internal_gloo_solo_io_v2.PortalConfig))
		})
	}

	var portalConfigList []*internal_gloo_solo_io_v2.PortalConfig
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		portalConfigList = append(portalConfigList, obj.(*internal_gloo_solo_io_v2.PortalConfig))
	}
	return portalConfigList
}

func (s *portalConfigSet) Map() map[string]*internal_gloo_solo_io_v2.PortalConfig {
	if s == nil {
		return nil
	}

	newMap := map[string]*internal_gloo_solo_io_v2.PortalConfig{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*internal_gloo_solo_io_v2.PortalConfig)
	}
	return newMap
}

func (s *portalConfigSet) Insert(
	portalConfigList ...*internal_gloo_solo_io_v2.PortalConfig,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range portalConfigList {
		s.Generic().Insert(obj)
	}
}

func (s *portalConfigSet) Has(portalConfig ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(portalConfig)
}

func (s *portalConfigSet) Equal(
	portalConfigSet PortalConfigSet,
) bool {
	if s == nil {
		return portalConfigSet == nil
	}
	return s.Generic().Equal(portalConfigSet.Generic())
}

func (s *portalConfigSet) Delete(PortalConfig ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(PortalConfig)
}

func (s *portalConfigSet) Union(set PortalConfigSet) PortalConfigSet {
	if s == nil {
		return set
	}
	return NewPortalConfigSet(append(s.List(), set.List()...)...)
}

func (s *portalConfigSet) Difference(set PortalConfigSet) PortalConfigSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &portalConfigSet{set: newSet}
}

func (s *portalConfigSet) Intersection(set PortalConfigSet) PortalConfigSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var portalConfigList []*internal_gloo_solo_io_v2.PortalConfig
	for _, obj := range newSet.List() {
		portalConfigList = append(portalConfigList, obj.(*internal_gloo_solo_io_v2.PortalConfig))
	}
	return NewPortalConfigSet(portalConfigList...)
}

func (s *portalConfigSet) Find(id ezkube.ResourceId) (*internal_gloo_solo_io_v2.PortalConfig, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find PortalConfig %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&internal_gloo_solo_io_v2.PortalConfig{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*internal_gloo_solo_io_v2.PortalConfig), nil
}

func (s *portalConfigSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *portalConfigSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *portalConfigSet) Delta(newSet PortalConfigSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *portalConfigSet) Clone() PortalConfigSet {
	if s == nil {
		return nil
	}
	return &portalConfigSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}
