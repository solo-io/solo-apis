// Code generated by MockGen. DO NOT EDIT.
// Source: ./sets.go

// Package mock_v2sets is a generated GoMock package.
package mock_v2sets

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sets "github.com/solo-io/skv2/contrib/pkg/sets"
	ezkube "github.com/solo-io/skv2/pkg/ezkube"
	sets0 "k8s.io/apimachinery/pkg/util/sets"

	v2 "github.com/solo-io/solo-apis/client-go/internal.gloo.solo.io/v2"
	v2sets "github.com/solo-io/solo-apis/client-go/internal.gloo.solo.io/v2/sets"
)

// MockIssuedCertificateSet is a mock of IssuedCertificateSet interface.
type MockIssuedCertificateSet struct {
	ctrl     *gomock.Controller
	recorder *MockIssuedCertificateSetMockRecorder
}

// MockIssuedCertificateSetMockRecorder is the mock recorder for MockIssuedCertificateSet.
type MockIssuedCertificateSetMockRecorder struct {
	mock *MockIssuedCertificateSet
}

// NewMockIssuedCertificateSet creates a new mock instance.
func NewMockIssuedCertificateSet(ctrl *gomock.Controller) *MockIssuedCertificateSet {
	mock := &MockIssuedCertificateSet{ctrl: ctrl}
	mock.recorder = &MockIssuedCertificateSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuedCertificateSet) EXPECT() *MockIssuedCertificateSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockIssuedCertificateSet) Clone() v2sets.IssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.IssuedCertificateSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockIssuedCertificateSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockIssuedCertificateSet) Delete(issuedCertificate ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", issuedCertificate)
}

// Delete indicates an expected call of Delete.
func (mr *MockIssuedCertificateSetMockRecorder) Delete(issuedCertificate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Delete), issuedCertificate)
}

// Delta mocks base method.
func (m *MockIssuedCertificateSet) Delta(newSet v2sets.IssuedCertificateSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockIssuedCertificateSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockIssuedCertificateSet) Difference(set v2sets.IssuedCertificateSet) v2sets.IssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.IssuedCertificateSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockIssuedCertificateSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockIssuedCertificateSet) Equal(issuedCertificateSet v2sets.IssuedCertificateSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", issuedCertificateSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockIssuedCertificateSetMockRecorder) Equal(issuedCertificateSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Equal), issuedCertificateSet)
}

// Find mocks base method.
func (m *MockIssuedCertificateSet) Find(id ezkube.ResourceId) (*v2.IssuedCertificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.IssuedCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIssuedCertificateSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockIssuedCertificateSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockIssuedCertificateSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockIssuedCertificateSet) Has(issuedCertificate ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", issuedCertificate)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockIssuedCertificateSetMockRecorder) Has(issuedCertificate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Has), issuedCertificate)
}

// Insert mocks base method.
func (m *MockIssuedCertificateSet) Insert(issuedCertificate ...*v2.IssuedCertificate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range issuedCertificate {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockIssuedCertificateSetMockRecorder) Insert(issuedCertificate ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Insert), issuedCertificate...)
}

// Intersection mocks base method.
func (m *MockIssuedCertificateSet) Intersection(set v2sets.IssuedCertificateSet) v2sets.IssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.IssuedCertificateSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockIssuedCertificateSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockIssuedCertificateSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockIssuedCertificateSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockIssuedCertificateSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockIssuedCertificateSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Length))
}

// List mocks base method.
func (m *MockIssuedCertificateSet) List(filterResource ...func(*v2.IssuedCertificate) bool) []*v2.IssuedCertificate {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.IssuedCertificate)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockIssuedCertificateSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIssuedCertificateSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockIssuedCertificateSet) Map() map[string]*v2.IssuedCertificate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.IssuedCertificate)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockIssuedCertificateSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Map))
}

// Union mocks base method.
func (m *MockIssuedCertificateSet) Union(set v2sets.IssuedCertificateSet) v2sets.IssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.IssuedCertificateSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockIssuedCertificateSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockIssuedCertificateSet) UnsortedList(filterResource ...func(*v2.IssuedCertificate) bool) []*v2.IssuedCertificate {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.IssuedCertificate)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockIssuedCertificateSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockIssuedCertificateSet)(nil).UnsortedList), filterResource...)
}

// MockCertificateRequestSet is a mock of CertificateRequestSet interface.
type MockCertificateRequestSet struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestSetMockRecorder
}

// MockCertificateRequestSetMockRecorder is the mock recorder for MockCertificateRequestSet.
type MockCertificateRequestSetMockRecorder struct {
	mock *MockCertificateRequestSet
}

// NewMockCertificateRequestSet creates a new mock instance.
func NewMockCertificateRequestSet(ctrl *gomock.Controller) *MockCertificateRequestSet {
	mock := &MockCertificateRequestSet{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateRequestSet) EXPECT() *MockCertificateRequestSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockCertificateRequestSet) Clone() v2sets.CertificateRequestSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.CertificateRequestSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockCertificateRequestSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockCertificateRequestSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockCertificateRequestSet) Delete(certificateRequest ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", certificateRequest)
}

// Delete indicates an expected call of Delete.
func (mr *MockCertificateRequestSetMockRecorder) Delete(certificateRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCertificateRequestSet)(nil).Delete), certificateRequest)
}

// Delta mocks base method.
func (m *MockCertificateRequestSet) Delta(newSet v2sets.CertificateRequestSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockCertificateRequestSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockCertificateRequestSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockCertificateRequestSet) Difference(set v2sets.CertificateRequestSet) v2sets.CertificateRequestSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.CertificateRequestSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockCertificateRequestSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockCertificateRequestSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockCertificateRequestSet) Equal(certificateRequestSet v2sets.CertificateRequestSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", certificateRequestSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockCertificateRequestSetMockRecorder) Equal(certificateRequestSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockCertificateRequestSet)(nil).Equal), certificateRequestSet)
}

// Find mocks base method.
func (m *MockCertificateRequestSet) Find(id ezkube.ResourceId) (*v2.CertificateRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.CertificateRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCertificateRequestSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCertificateRequestSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockCertificateRequestSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockCertificateRequestSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockCertificateRequestSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockCertificateRequestSet) Has(certificateRequest ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", certificateRequest)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockCertificateRequestSetMockRecorder) Has(certificateRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockCertificateRequestSet)(nil).Has), certificateRequest)
}

// Insert mocks base method.
func (m *MockCertificateRequestSet) Insert(certificateRequest ...*v2.CertificateRequest) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range certificateRequest {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockCertificateRequestSetMockRecorder) Insert(certificateRequest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCertificateRequestSet)(nil).Insert), certificateRequest...)
}

// Intersection mocks base method.
func (m *MockCertificateRequestSet) Intersection(set v2sets.CertificateRequestSet) v2sets.CertificateRequestSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.CertificateRequestSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockCertificateRequestSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockCertificateRequestSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockCertificateRequestSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockCertificateRequestSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockCertificateRequestSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockCertificateRequestSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockCertificateRequestSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockCertificateRequestSet)(nil).Length))
}

// List mocks base method.
func (m *MockCertificateRequestSet) List(filterResource ...func(*v2.CertificateRequest) bool) []*v2.CertificateRequest {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.CertificateRequest)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockCertificateRequestSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCertificateRequestSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockCertificateRequestSet) Map() map[string]*v2.CertificateRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.CertificateRequest)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockCertificateRequestSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockCertificateRequestSet)(nil).Map))
}

// Union mocks base method.
func (m *MockCertificateRequestSet) Union(set v2sets.CertificateRequestSet) v2sets.CertificateRequestSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.CertificateRequestSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockCertificateRequestSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockCertificateRequestSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockCertificateRequestSet) UnsortedList(filterResource ...func(*v2.CertificateRequest) bool) []*v2.CertificateRequest {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.CertificateRequest)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockCertificateRequestSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockCertificateRequestSet)(nil).UnsortedList), filterResource...)
}

// MockPodBounceDirectiveSet is a mock of PodBounceDirectiveSet interface.
type MockPodBounceDirectiveSet struct {
	ctrl     *gomock.Controller
	recorder *MockPodBounceDirectiveSetMockRecorder
}

// MockPodBounceDirectiveSetMockRecorder is the mock recorder for MockPodBounceDirectiveSet.
type MockPodBounceDirectiveSetMockRecorder struct {
	mock *MockPodBounceDirectiveSet
}

// NewMockPodBounceDirectiveSet creates a new mock instance.
func NewMockPodBounceDirectiveSet(ctrl *gomock.Controller) *MockPodBounceDirectiveSet {
	mock := &MockPodBounceDirectiveSet{ctrl: ctrl}
	mock.recorder = &MockPodBounceDirectiveSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodBounceDirectiveSet) EXPECT() *MockPodBounceDirectiveSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockPodBounceDirectiveSet) Clone() v2sets.PodBounceDirectiveSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.PodBounceDirectiveSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockPodBounceDirectiveSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockPodBounceDirectiveSet) Delete(podBounceDirective ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", podBounceDirective)
}

// Delete indicates an expected call of Delete.
func (mr *MockPodBounceDirectiveSetMockRecorder) Delete(podBounceDirective interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Delete), podBounceDirective)
}

// Delta mocks base method.
func (m *MockPodBounceDirectiveSet) Delta(newSet v2sets.PodBounceDirectiveSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockPodBounceDirectiveSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockPodBounceDirectiveSet) Difference(set v2sets.PodBounceDirectiveSet) v2sets.PodBounceDirectiveSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.PodBounceDirectiveSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockPodBounceDirectiveSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockPodBounceDirectiveSet) Equal(podBounceDirectiveSet v2sets.PodBounceDirectiveSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", podBounceDirectiveSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockPodBounceDirectiveSetMockRecorder) Equal(podBounceDirectiveSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Equal), podBounceDirectiveSet)
}

// Find mocks base method.
func (m *MockPodBounceDirectiveSet) Find(id ezkube.ResourceId) (*v2.PodBounceDirective, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.PodBounceDirective)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockPodBounceDirectiveSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockPodBounceDirectiveSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockPodBounceDirectiveSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockPodBounceDirectiveSet) Has(podBounceDirective ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", podBounceDirective)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockPodBounceDirectiveSetMockRecorder) Has(podBounceDirective interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Has), podBounceDirective)
}

// Insert mocks base method.
func (m *MockPodBounceDirectiveSet) Insert(podBounceDirective ...*v2.PodBounceDirective) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range podBounceDirective {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockPodBounceDirectiveSetMockRecorder) Insert(podBounceDirective ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Insert), podBounceDirective...)
}

// Intersection mocks base method.
func (m *MockPodBounceDirectiveSet) Intersection(set v2sets.PodBounceDirectiveSet) v2sets.PodBounceDirectiveSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.PodBounceDirectiveSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockPodBounceDirectiveSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockPodBounceDirectiveSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockPodBounceDirectiveSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockPodBounceDirectiveSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockPodBounceDirectiveSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Length))
}

// List mocks base method.
func (m *MockPodBounceDirectiveSet) List(filterResource ...func(*v2.PodBounceDirective) bool) []*v2.PodBounceDirective {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.PodBounceDirective)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockPodBounceDirectiveSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockPodBounceDirectiveSet) Map() map[string]*v2.PodBounceDirective {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.PodBounceDirective)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockPodBounceDirectiveSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Map))
}

// Union mocks base method.
func (m *MockPodBounceDirectiveSet) Union(set v2sets.PodBounceDirectiveSet) v2sets.PodBounceDirectiveSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.PodBounceDirectiveSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockPodBounceDirectiveSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockPodBounceDirectiveSet) UnsortedList(filterResource ...func(*v2.PodBounceDirective) bool) []*v2.PodBounceDirective {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.PodBounceDirective)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockPodBounceDirectiveSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).UnsortedList), filterResource...)
}

// MockXdsConfigSet is a mock of XdsConfigSet interface.
type MockXdsConfigSet struct {
	ctrl     *gomock.Controller
	recorder *MockXdsConfigSetMockRecorder
}

// MockXdsConfigSetMockRecorder is the mock recorder for MockXdsConfigSet.
type MockXdsConfigSetMockRecorder struct {
	mock *MockXdsConfigSet
}

// NewMockXdsConfigSet creates a new mock instance.
func NewMockXdsConfigSet(ctrl *gomock.Controller) *MockXdsConfigSet {
	mock := &MockXdsConfigSet{ctrl: ctrl}
	mock.recorder = &MockXdsConfigSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXdsConfigSet) EXPECT() *MockXdsConfigSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockXdsConfigSet) Clone() v2sets.XdsConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.XdsConfigSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockXdsConfigSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockXdsConfigSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockXdsConfigSet) Delete(xdsConfig ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", xdsConfig)
}

// Delete indicates an expected call of Delete.
func (mr *MockXdsConfigSetMockRecorder) Delete(xdsConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockXdsConfigSet)(nil).Delete), xdsConfig)
}

// Delta mocks base method.
func (m *MockXdsConfigSet) Delta(newSet v2sets.XdsConfigSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockXdsConfigSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockXdsConfigSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockXdsConfigSet) Difference(set v2sets.XdsConfigSet) v2sets.XdsConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.XdsConfigSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockXdsConfigSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockXdsConfigSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockXdsConfigSet) Equal(xdsConfigSet v2sets.XdsConfigSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", xdsConfigSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockXdsConfigSetMockRecorder) Equal(xdsConfigSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockXdsConfigSet)(nil).Equal), xdsConfigSet)
}

// Find mocks base method.
func (m *MockXdsConfigSet) Find(id ezkube.ResourceId) (*v2.XdsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.XdsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockXdsConfigSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockXdsConfigSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockXdsConfigSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockXdsConfigSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockXdsConfigSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockXdsConfigSet) Has(xdsConfig ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", xdsConfig)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockXdsConfigSetMockRecorder) Has(xdsConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockXdsConfigSet)(nil).Has), xdsConfig)
}

// Insert mocks base method.
func (m *MockXdsConfigSet) Insert(xdsConfig ...*v2.XdsConfig) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range xdsConfig {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockXdsConfigSetMockRecorder) Insert(xdsConfig ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockXdsConfigSet)(nil).Insert), xdsConfig...)
}

// Intersection mocks base method.
func (m *MockXdsConfigSet) Intersection(set v2sets.XdsConfigSet) v2sets.XdsConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.XdsConfigSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockXdsConfigSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockXdsConfigSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockXdsConfigSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockXdsConfigSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockXdsConfigSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockXdsConfigSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockXdsConfigSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockXdsConfigSet)(nil).Length))
}

// List mocks base method.
func (m *MockXdsConfigSet) List(filterResource ...func(*v2.XdsConfig) bool) []*v2.XdsConfig {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.XdsConfig)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockXdsConfigSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockXdsConfigSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockXdsConfigSet) Map() map[string]*v2.XdsConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.XdsConfig)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockXdsConfigSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockXdsConfigSet)(nil).Map))
}

// Union mocks base method.
func (m *MockXdsConfigSet) Union(set v2sets.XdsConfigSet) v2sets.XdsConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.XdsConfigSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockXdsConfigSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockXdsConfigSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockXdsConfigSet) UnsortedList(filterResource ...func(*v2.XdsConfig) bool) []*v2.XdsConfig {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.XdsConfig)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockXdsConfigSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockXdsConfigSet)(nil).UnsortedList), filterResource...)
}

// MockDiscoveredGatewaySet is a mock of DiscoveredGatewaySet interface.
type MockDiscoveredGatewaySet struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredGatewaySetMockRecorder
}

// MockDiscoveredGatewaySetMockRecorder is the mock recorder for MockDiscoveredGatewaySet.
type MockDiscoveredGatewaySetMockRecorder struct {
	mock *MockDiscoveredGatewaySet
}

// NewMockDiscoveredGatewaySet creates a new mock instance.
func NewMockDiscoveredGatewaySet(ctrl *gomock.Controller) *MockDiscoveredGatewaySet {
	mock := &MockDiscoveredGatewaySet{ctrl: ctrl}
	mock.recorder = &MockDiscoveredGatewaySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredGatewaySet) EXPECT() *MockDiscoveredGatewaySetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockDiscoveredGatewaySet) Clone() v2sets.DiscoveredGatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.DiscoveredGatewaySet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockDiscoveredGatewaySetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockDiscoveredGatewaySet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockDiscoveredGatewaySet) Delete(discoveredGateway ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", discoveredGateway)
}

// Delete indicates an expected call of Delete.
func (mr *MockDiscoveredGatewaySetMockRecorder) Delete(discoveredGateway interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDiscoveredGatewaySet)(nil).Delete), discoveredGateway)
}

// Delta mocks base method.
func (m *MockDiscoveredGatewaySet) Delta(newSet v2sets.DiscoveredGatewaySet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockDiscoveredGatewaySetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockDiscoveredGatewaySet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockDiscoveredGatewaySet) Difference(set v2sets.DiscoveredGatewaySet) v2sets.DiscoveredGatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.DiscoveredGatewaySet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockDiscoveredGatewaySetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockDiscoveredGatewaySet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockDiscoveredGatewaySet) Equal(discoveredGatewaySet v2sets.DiscoveredGatewaySet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", discoveredGatewaySet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockDiscoveredGatewaySetMockRecorder) Equal(discoveredGatewaySet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockDiscoveredGatewaySet)(nil).Equal), discoveredGatewaySet)
}

// Find mocks base method.
func (m *MockDiscoveredGatewaySet) Find(id ezkube.ResourceId) (*v2.DiscoveredGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.DiscoveredGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockDiscoveredGatewaySetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDiscoveredGatewaySet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockDiscoveredGatewaySet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockDiscoveredGatewaySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockDiscoveredGatewaySet)(nil).Generic))
}

// Has mocks base method.
func (m *MockDiscoveredGatewaySet) Has(discoveredGateway ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", discoveredGateway)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockDiscoveredGatewaySetMockRecorder) Has(discoveredGateway interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockDiscoveredGatewaySet)(nil).Has), discoveredGateway)
}

// Insert mocks base method.
func (m *MockDiscoveredGatewaySet) Insert(discoveredGateway ...*v2.DiscoveredGateway) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range discoveredGateway {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockDiscoveredGatewaySetMockRecorder) Insert(discoveredGateway ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDiscoveredGatewaySet)(nil).Insert), discoveredGateway...)
}

// Intersection mocks base method.
func (m *MockDiscoveredGatewaySet) Intersection(set v2sets.DiscoveredGatewaySet) v2sets.DiscoveredGatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.DiscoveredGatewaySet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockDiscoveredGatewaySetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockDiscoveredGatewaySet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockDiscoveredGatewaySet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockDiscoveredGatewaySetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockDiscoveredGatewaySet)(nil).Keys))
}

// Length mocks base method.
func (m *MockDiscoveredGatewaySet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockDiscoveredGatewaySetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockDiscoveredGatewaySet)(nil).Length))
}

// List mocks base method.
func (m *MockDiscoveredGatewaySet) List(filterResource ...func(*v2.DiscoveredGateway) bool) []*v2.DiscoveredGateway {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.DiscoveredGateway)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockDiscoveredGatewaySetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDiscoveredGatewaySet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockDiscoveredGatewaySet) Map() map[string]*v2.DiscoveredGateway {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.DiscoveredGateway)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockDiscoveredGatewaySetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockDiscoveredGatewaySet)(nil).Map))
}

// Union mocks base method.
func (m *MockDiscoveredGatewaySet) Union(set v2sets.DiscoveredGatewaySet) v2sets.DiscoveredGatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.DiscoveredGatewaySet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockDiscoveredGatewaySetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockDiscoveredGatewaySet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockDiscoveredGatewaySet) UnsortedList(filterResource ...func(*v2.DiscoveredGateway) bool) []*v2.DiscoveredGateway {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.DiscoveredGateway)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockDiscoveredGatewaySetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockDiscoveredGatewaySet)(nil).UnsortedList), filterResource...)
}

// MockMeshSet is a mock of MeshSet interface.
type MockMeshSet struct {
	ctrl     *gomock.Controller
	recorder *MockMeshSetMockRecorder
}

// MockMeshSetMockRecorder is the mock recorder for MockMeshSet.
type MockMeshSetMockRecorder struct {
	mock *MockMeshSet
}

// NewMockMeshSet creates a new mock instance.
func NewMockMeshSet(ctrl *gomock.Controller) *MockMeshSet {
	mock := &MockMeshSet{ctrl: ctrl}
	mock.recorder = &MockMeshSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshSet) EXPECT() *MockMeshSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockMeshSet) Clone() v2sets.MeshSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.MeshSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockMeshSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockMeshSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockMeshSet) Delete(mesh ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", mesh)
}

// Delete indicates an expected call of Delete.
func (mr *MockMeshSetMockRecorder) Delete(mesh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMeshSet)(nil).Delete), mesh)
}

// Delta mocks base method.
func (m *MockMeshSet) Delta(newSet v2sets.MeshSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockMeshSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockMeshSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockMeshSet) Difference(set v2sets.MeshSet) v2sets.MeshSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.MeshSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockMeshSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockMeshSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockMeshSet) Equal(meshSet v2sets.MeshSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", meshSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockMeshSetMockRecorder) Equal(meshSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockMeshSet)(nil).Equal), meshSet)
}

// Find mocks base method.
func (m *MockMeshSet) Find(id ezkube.ResourceId) (*v2.Mesh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.Mesh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMeshSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMeshSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockMeshSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockMeshSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockMeshSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockMeshSet) Has(mesh ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", mesh)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockMeshSetMockRecorder) Has(mesh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockMeshSet)(nil).Has), mesh)
}

// Insert mocks base method.
func (m *MockMeshSet) Insert(mesh ...*v2.Mesh) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range mesh {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockMeshSetMockRecorder) Insert(mesh ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockMeshSet)(nil).Insert), mesh...)
}

// Intersection mocks base method.
func (m *MockMeshSet) Intersection(set v2sets.MeshSet) v2sets.MeshSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.MeshSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockMeshSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockMeshSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockMeshSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockMeshSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockMeshSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockMeshSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockMeshSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockMeshSet)(nil).Length))
}

// List mocks base method.
func (m *MockMeshSet) List(filterResource ...func(*v2.Mesh) bool) []*v2.Mesh {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.Mesh)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockMeshSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMeshSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockMeshSet) Map() map[string]*v2.Mesh {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.Mesh)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockMeshSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockMeshSet)(nil).Map))
}

// Union mocks base method.
func (m *MockMeshSet) Union(set v2sets.MeshSet) v2sets.MeshSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.MeshSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockMeshSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockMeshSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockMeshSet) UnsortedList(filterResource ...func(*v2.Mesh) bool) []*v2.Mesh {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.Mesh)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockMeshSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockMeshSet)(nil).UnsortedList), filterResource...)
}

// MockDiscoveredCNISet is a mock of DiscoveredCNISet interface.
type MockDiscoveredCNISet struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredCNISetMockRecorder
}

// MockDiscoveredCNISetMockRecorder is the mock recorder for MockDiscoveredCNISet.
type MockDiscoveredCNISetMockRecorder struct {
	mock *MockDiscoveredCNISet
}

// NewMockDiscoveredCNISet creates a new mock instance.
func NewMockDiscoveredCNISet(ctrl *gomock.Controller) *MockDiscoveredCNISet {
	mock := &MockDiscoveredCNISet{ctrl: ctrl}
	mock.recorder = &MockDiscoveredCNISetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredCNISet) EXPECT() *MockDiscoveredCNISetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockDiscoveredCNISet) Clone() v2sets.DiscoveredCNISet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.DiscoveredCNISet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockDiscoveredCNISetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockDiscoveredCNISet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockDiscoveredCNISet) Delete(discoveredCNI ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", discoveredCNI)
}

// Delete indicates an expected call of Delete.
func (mr *MockDiscoveredCNISetMockRecorder) Delete(discoveredCNI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDiscoveredCNISet)(nil).Delete), discoveredCNI)
}

// Delta mocks base method.
func (m *MockDiscoveredCNISet) Delta(newSet v2sets.DiscoveredCNISet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockDiscoveredCNISetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockDiscoveredCNISet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockDiscoveredCNISet) Difference(set v2sets.DiscoveredCNISet) v2sets.DiscoveredCNISet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.DiscoveredCNISet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockDiscoveredCNISetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockDiscoveredCNISet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockDiscoveredCNISet) Equal(discoveredCNISet v2sets.DiscoveredCNISet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", discoveredCNISet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockDiscoveredCNISetMockRecorder) Equal(discoveredCNISet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockDiscoveredCNISet)(nil).Equal), discoveredCNISet)
}

// Find mocks base method.
func (m *MockDiscoveredCNISet) Find(id ezkube.ResourceId) (*v2.DiscoveredCNI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.DiscoveredCNI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockDiscoveredCNISetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDiscoveredCNISet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockDiscoveredCNISet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockDiscoveredCNISetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockDiscoveredCNISet)(nil).Generic))
}

// Has mocks base method.
func (m *MockDiscoveredCNISet) Has(discoveredCNI ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", discoveredCNI)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockDiscoveredCNISetMockRecorder) Has(discoveredCNI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockDiscoveredCNISet)(nil).Has), discoveredCNI)
}

// Insert mocks base method.
func (m *MockDiscoveredCNISet) Insert(discoveredCNI ...*v2.DiscoveredCNI) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range discoveredCNI {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockDiscoveredCNISetMockRecorder) Insert(discoveredCNI ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDiscoveredCNISet)(nil).Insert), discoveredCNI...)
}

// Intersection mocks base method.
func (m *MockDiscoveredCNISet) Intersection(set v2sets.DiscoveredCNISet) v2sets.DiscoveredCNISet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.DiscoveredCNISet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockDiscoveredCNISetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockDiscoveredCNISet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockDiscoveredCNISet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockDiscoveredCNISetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockDiscoveredCNISet)(nil).Keys))
}

// Length mocks base method.
func (m *MockDiscoveredCNISet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockDiscoveredCNISetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockDiscoveredCNISet)(nil).Length))
}

// List mocks base method.
func (m *MockDiscoveredCNISet) List(filterResource ...func(*v2.DiscoveredCNI) bool) []*v2.DiscoveredCNI {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.DiscoveredCNI)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockDiscoveredCNISetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDiscoveredCNISet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockDiscoveredCNISet) Map() map[string]*v2.DiscoveredCNI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.DiscoveredCNI)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockDiscoveredCNISetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockDiscoveredCNISet)(nil).Map))
}

// Union mocks base method.
func (m *MockDiscoveredCNISet) Union(set v2sets.DiscoveredCNISet) v2sets.DiscoveredCNISet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.DiscoveredCNISet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockDiscoveredCNISetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockDiscoveredCNISet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockDiscoveredCNISet) UnsortedList(filterResource ...func(*v2.DiscoveredCNI) bool) []*v2.DiscoveredCNI {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.DiscoveredCNI)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockDiscoveredCNISetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockDiscoveredCNISet)(nil).UnsortedList), filterResource...)
}

// MockPortalConfigSet is a mock of PortalConfigSet interface.
type MockPortalConfigSet struct {
	ctrl     *gomock.Controller
	recorder *MockPortalConfigSetMockRecorder
}

// MockPortalConfigSetMockRecorder is the mock recorder for MockPortalConfigSet.
type MockPortalConfigSetMockRecorder struct {
	mock *MockPortalConfigSet
}

// NewMockPortalConfigSet creates a new mock instance.
func NewMockPortalConfigSet(ctrl *gomock.Controller) *MockPortalConfigSet {
	mock := &MockPortalConfigSet{ctrl: ctrl}
	mock.recorder = &MockPortalConfigSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalConfigSet) EXPECT() *MockPortalConfigSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockPortalConfigSet) Clone() v2sets.PortalConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.PortalConfigSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockPortalConfigSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockPortalConfigSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockPortalConfigSet) Delete(portalConfig ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", portalConfig)
}

// Delete indicates an expected call of Delete.
func (mr *MockPortalConfigSetMockRecorder) Delete(portalConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPortalConfigSet)(nil).Delete), portalConfig)
}

// Delta mocks base method.
func (m *MockPortalConfigSet) Delta(newSet v2sets.PortalConfigSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockPortalConfigSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockPortalConfigSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockPortalConfigSet) Difference(set v2sets.PortalConfigSet) v2sets.PortalConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.PortalConfigSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockPortalConfigSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockPortalConfigSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockPortalConfigSet) Equal(portalConfigSet v2sets.PortalConfigSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", portalConfigSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockPortalConfigSetMockRecorder) Equal(portalConfigSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockPortalConfigSet)(nil).Equal), portalConfigSet)
}

// Find mocks base method.
func (m *MockPortalConfigSet) Find(id ezkube.ResourceId) (*v2.PortalConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.PortalConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockPortalConfigSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPortalConfigSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockPortalConfigSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockPortalConfigSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockPortalConfigSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockPortalConfigSet) Has(portalConfig ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", portalConfig)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockPortalConfigSetMockRecorder) Has(portalConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockPortalConfigSet)(nil).Has), portalConfig)
}

// Insert mocks base method.
func (m *MockPortalConfigSet) Insert(portalConfig ...*v2.PortalConfig) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range portalConfig {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockPortalConfigSetMockRecorder) Insert(portalConfig ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPortalConfigSet)(nil).Insert), portalConfig...)
}

// Intersection mocks base method.
func (m *MockPortalConfigSet) Intersection(set v2sets.PortalConfigSet) v2sets.PortalConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.PortalConfigSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockPortalConfigSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockPortalConfigSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockPortalConfigSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockPortalConfigSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockPortalConfigSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockPortalConfigSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockPortalConfigSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockPortalConfigSet)(nil).Length))
}

// List mocks base method.
func (m *MockPortalConfigSet) List(filterResource ...func(*v2.PortalConfig) bool) []*v2.PortalConfig {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.PortalConfig)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockPortalConfigSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPortalConfigSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockPortalConfigSet) Map() map[string]*v2.PortalConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.PortalConfig)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockPortalConfigSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockPortalConfigSet)(nil).Map))
}

// Union mocks base method.
func (m *MockPortalConfigSet) Union(set v2sets.PortalConfigSet) v2sets.PortalConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.PortalConfigSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockPortalConfigSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockPortalConfigSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockPortalConfigSet) UnsortedList(filterResource ...func(*v2.PortalConfig) bool) []*v2.PortalConfig {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.PortalConfig)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockPortalConfigSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockPortalConfigSet)(nil).UnsortedList), filterResource...)
}
