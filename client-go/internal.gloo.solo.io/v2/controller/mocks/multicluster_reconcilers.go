// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"

	v2 "github.com/solo-io/solo-apis/client-go/internal.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/client-go/internal.gloo.solo.io/v2/controller"
)

// MockMulticlusterIssuedCertificateReconciler is a mock of MulticlusterIssuedCertificateReconciler interface.
type MockMulticlusterIssuedCertificateReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterIssuedCertificateReconcilerMockRecorder
}

// MockMulticlusterIssuedCertificateReconcilerMockRecorder is the mock recorder for MockMulticlusterIssuedCertificateReconciler.
type MockMulticlusterIssuedCertificateReconcilerMockRecorder struct {
	mock *MockMulticlusterIssuedCertificateReconciler
}

// NewMockMulticlusterIssuedCertificateReconciler creates a new mock instance.
func NewMockMulticlusterIssuedCertificateReconciler(ctrl *gomock.Controller) *MockMulticlusterIssuedCertificateReconciler {
	mock := &MockMulticlusterIssuedCertificateReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterIssuedCertificateReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterIssuedCertificateReconciler) EXPECT() *MockMulticlusterIssuedCertificateReconcilerMockRecorder {
	return m.recorder
}

// ReconcileIssuedCertificate mocks base method.
func (m *MockMulticlusterIssuedCertificateReconciler) ReconcileIssuedCertificate(clusterName string, obj *v2.IssuedCertificate) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileIssuedCertificate", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileIssuedCertificate indicates an expected call of ReconcileIssuedCertificate.
func (mr *MockMulticlusterIssuedCertificateReconcilerMockRecorder) ReconcileIssuedCertificate(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileIssuedCertificate", reflect.TypeOf((*MockMulticlusterIssuedCertificateReconciler)(nil).ReconcileIssuedCertificate), clusterName, obj)
}

// MockMulticlusterIssuedCertificateDeletionReconciler is a mock of MulticlusterIssuedCertificateDeletionReconciler interface.
type MockMulticlusterIssuedCertificateDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterIssuedCertificateDeletionReconcilerMockRecorder
}

// MockMulticlusterIssuedCertificateDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterIssuedCertificateDeletionReconciler.
type MockMulticlusterIssuedCertificateDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterIssuedCertificateDeletionReconciler
}

// NewMockMulticlusterIssuedCertificateDeletionReconciler creates a new mock instance.
func NewMockMulticlusterIssuedCertificateDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterIssuedCertificateDeletionReconciler {
	mock := &MockMulticlusterIssuedCertificateDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterIssuedCertificateDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterIssuedCertificateDeletionReconciler) EXPECT() *MockMulticlusterIssuedCertificateDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileIssuedCertificateDeletion mocks base method.
func (m *MockMulticlusterIssuedCertificateDeletionReconciler) ReconcileIssuedCertificateDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileIssuedCertificateDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileIssuedCertificateDeletion indicates an expected call of ReconcileIssuedCertificateDeletion.
func (mr *MockMulticlusterIssuedCertificateDeletionReconcilerMockRecorder) ReconcileIssuedCertificateDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileIssuedCertificateDeletion", reflect.TypeOf((*MockMulticlusterIssuedCertificateDeletionReconciler)(nil).ReconcileIssuedCertificateDeletion), clusterName, req)
}

// MockMulticlusterIssuedCertificateReconcileLoop is a mock of MulticlusterIssuedCertificateReconcileLoop interface.
type MockMulticlusterIssuedCertificateReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterIssuedCertificateReconcileLoopMockRecorder
}

// MockMulticlusterIssuedCertificateReconcileLoopMockRecorder is the mock recorder for MockMulticlusterIssuedCertificateReconcileLoop.
type MockMulticlusterIssuedCertificateReconcileLoopMockRecorder struct {
	mock *MockMulticlusterIssuedCertificateReconcileLoop
}

// NewMockMulticlusterIssuedCertificateReconcileLoop creates a new mock instance.
func NewMockMulticlusterIssuedCertificateReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterIssuedCertificateReconcileLoop {
	mock := &MockMulticlusterIssuedCertificateReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterIssuedCertificateReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterIssuedCertificateReconcileLoop) EXPECT() *MockMulticlusterIssuedCertificateReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterIssuedCertificateReconciler mocks base method.
func (m *MockMulticlusterIssuedCertificateReconcileLoop) AddMulticlusterIssuedCertificateReconciler(ctx context.Context, rec controller.MulticlusterIssuedCertificateReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterIssuedCertificateReconciler", varargs...)
}

// AddMulticlusterIssuedCertificateReconciler indicates an expected call of AddMulticlusterIssuedCertificateReconciler.
func (mr *MockMulticlusterIssuedCertificateReconcileLoopMockRecorder) AddMulticlusterIssuedCertificateReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterIssuedCertificateReconciler", reflect.TypeOf((*MockMulticlusterIssuedCertificateReconcileLoop)(nil).AddMulticlusterIssuedCertificateReconciler), varargs...)
}

// MockMulticlusterCertificateRequestReconciler is a mock of MulticlusterCertificateRequestReconciler interface.
type MockMulticlusterCertificateRequestReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterCertificateRequestReconcilerMockRecorder
}

// MockMulticlusterCertificateRequestReconcilerMockRecorder is the mock recorder for MockMulticlusterCertificateRequestReconciler.
type MockMulticlusterCertificateRequestReconcilerMockRecorder struct {
	mock *MockMulticlusterCertificateRequestReconciler
}

// NewMockMulticlusterCertificateRequestReconciler creates a new mock instance.
func NewMockMulticlusterCertificateRequestReconciler(ctrl *gomock.Controller) *MockMulticlusterCertificateRequestReconciler {
	mock := &MockMulticlusterCertificateRequestReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterCertificateRequestReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterCertificateRequestReconciler) EXPECT() *MockMulticlusterCertificateRequestReconcilerMockRecorder {
	return m.recorder
}

// ReconcileCertificateRequest mocks base method.
func (m *MockMulticlusterCertificateRequestReconciler) ReconcileCertificateRequest(clusterName string, obj *v2.CertificateRequest) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCertificateRequest", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileCertificateRequest indicates an expected call of ReconcileCertificateRequest.
func (mr *MockMulticlusterCertificateRequestReconcilerMockRecorder) ReconcileCertificateRequest(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCertificateRequest", reflect.TypeOf((*MockMulticlusterCertificateRequestReconciler)(nil).ReconcileCertificateRequest), clusterName, obj)
}

// MockMulticlusterCertificateRequestDeletionReconciler is a mock of MulticlusterCertificateRequestDeletionReconciler interface.
type MockMulticlusterCertificateRequestDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterCertificateRequestDeletionReconcilerMockRecorder
}

// MockMulticlusterCertificateRequestDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterCertificateRequestDeletionReconciler.
type MockMulticlusterCertificateRequestDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterCertificateRequestDeletionReconciler
}

// NewMockMulticlusterCertificateRequestDeletionReconciler creates a new mock instance.
func NewMockMulticlusterCertificateRequestDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterCertificateRequestDeletionReconciler {
	mock := &MockMulticlusterCertificateRequestDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterCertificateRequestDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterCertificateRequestDeletionReconciler) EXPECT() *MockMulticlusterCertificateRequestDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileCertificateRequestDeletion mocks base method.
func (m *MockMulticlusterCertificateRequestDeletionReconciler) ReconcileCertificateRequestDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCertificateRequestDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileCertificateRequestDeletion indicates an expected call of ReconcileCertificateRequestDeletion.
func (mr *MockMulticlusterCertificateRequestDeletionReconcilerMockRecorder) ReconcileCertificateRequestDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCertificateRequestDeletion", reflect.TypeOf((*MockMulticlusterCertificateRequestDeletionReconciler)(nil).ReconcileCertificateRequestDeletion), clusterName, req)
}

// MockMulticlusterCertificateRequestReconcileLoop is a mock of MulticlusterCertificateRequestReconcileLoop interface.
type MockMulticlusterCertificateRequestReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterCertificateRequestReconcileLoopMockRecorder
}

// MockMulticlusterCertificateRequestReconcileLoopMockRecorder is the mock recorder for MockMulticlusterCertificateRequestReconcileLoop.
type MockMulticlusterCertificateRequestReconcileLoopMockRecorder struct {
	mock *MockMulticlusterCertificateRequestReconcileLoop
}

// NewMockMulticlusterCertificateRequestReconcileLoop creates a new mock instance.
func NewMockMulticlusterCertificateRequestReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterCertificateRequestReconcileLoop {
	mock := &MockMulticlusterCertificateRequestReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterCertificateRequestReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterCertificateRequestReconcileLoop) EXPECT() *MockMulticlusterCertificateRequestReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterCertificateRequestReconciler mocks base method.
func (m *MockMulticlusterCertificateRequestReconcileLoop) AddMulticlusterCertificateRequestReconciler(ctx context.Context, rec controller.MulticlusterCertificateRequestReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterCertificateRequestReconciler", varargs...)
}

// AddMulticlusterCertificateRequestReconciler indicates an expected call of AddMulticlusterCertificateRequestReconciler.
func (mr *MockMulticlusterCertificateRequestReconcileLoopMockRecorder) AddMulticlusterCertificateRequestReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterCertificateRequestReconciler", reflect.TypeOf((*MockMulticlusterCertificateRequestReconcileLoop)(nil).AddMulticlusterCertificateRequestReconciler), varargs...)
}

// MockMulticlusterPodBounceDirectiveReconciler is a mock of MulticlusterPodBounceDirectiveReconciler interface.
type MockMulticlusterPodBounceDirectiveReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterPodBounceDirectiveReconcilerMockRecorder
}

// MockMulticlusterPodBounceDirectiveReconcilerMockRecorder is the mock recorder for MockMulticlusterPodBounceDirectiveReconciler.
type MockMulticlusterPodBounceDirectiveReconcilerMockRecorder struct {
	mock *MockMulticlusterPodBounceDirectiveReconciler
}

// NewMockMulticlusterPodBounceDirectiveReconciler creates a new mock instance.
func NewMockMulticlusterPodBounceDirectiveReconciler(ctrl *gomock.Controller) *MockMulticlusterPodBounceDirectiveReconciler {
	mock := &MockMulticlusterPodBounceDirectiveReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterPodBounceDirectiveReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterPodBounceDirectiveReconciler) EXPECT() *MockMulticlusterPodBounceDirectiveReconcilerMockRecorder {
	return m.recorder
}

// ReconcilePodBounceDirective mocks base method.
func (m *MockMulticlusterPodBounceDirectiveReconciler) ReconcilePodBounceDirective(clusterName string, obj *v2.PodBounceDirective) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePodBounceDirective", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcilePodBounceDirective indicates an expected call of ReconcilePodBounceDirective.
func (mr *MockMulticlusterPodBounceDirectiveReconcilerMockRecorder) ReconcilePodBounceDirective(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePodBounceDirective", reflect.TypeOf((*MockMulticlusterPodBounceDirectiveReconciler)(nil).ReconcilePodBounceDirective), clusterName, obj)
}

// MockMulticlusterPodBounceDirectiveDeletionReconciler is a mock of MulticlusterPodBounceDirectiveDeletionReconciler interface.
type MockMulticlusterPodBounceDirectiveDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterPodBounceDirectiveDeletionReconcilerMockRecorder
}

// MockMulticlusterPodBounceDirectiveDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterPodBounceDirectiveDeletionReconciler.
type MockMulticlusterPodBounceDirectiveDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterPodBounceDirectiveDeletionReconciler
}

// NewMockMulticlusterPodBounceDirectiveDeletionReconciler creates a new mock instance.
func NewMockMulticlusterPodBounceDirectiveDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterPodBounceDirectiveDeletionReconciler {
	mock := &MockMulticlusterPodBounceDirectiveDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterPodBounceDirectiveDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterPodBounceDirectiveDeletionReconciler) EXPECT() *MockMulticlusterPodBounceDirectiveDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcilePodBounceDirectiveDeletion mocks base method.
func (m *MockMulticlusterPodBounceDirectiveDeletionReconciler) ReconcilePodBounceDirectiveDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePodBounceDirectiveDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcilePodBounceDirectiveDeletion indicates an expected call of ReconcilePodBounceDirectiveDeletion.
func (mr *MockMulticlusterPodBounceDirectiveDeletionReconcilerMockRecorder) ReconcilePodBounceDirectiveDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePodBounceDirectiveDeletion", reflect.TypeOf((*MockMulticlusterPodBounceDirectiveDeletionReconciler)(nil).ReconcilePodBounceDirectiveDeletion), clusterName, req)
}

// MockMulticlusterPodBounceDirectiveReconcileLoop is a mock of MulticlusterPodBounceDirectiveReconcileLoop interface.
type MockMulticlusterPodBounceDirectiveReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterPodBounceDirectiveReconcileLoopMockRecorder
}

// MockMulticlusterPodBounceDirectiveReconcileLoopMockRecorder is the mock recorder for MockMulticlusterPodBounceDirectiveReconcileLoop.
type MockMulticlusterPodBounceDirectiveReconcileLoopMockRecorder struct {
	mock *MockMulticlusterPodBounceDirectiveReconcileLoop
}

// NewMockMulticlusterPodBounceDirectiveReconcileLoop creates a new mock instance.
func NewMockMulticlusterPodBounceDirectiveReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterPodBounceDirectiveReconcileLoop {
	mock := &MockMulticlusterPodBounceDirectiveReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterPodBounceDirectiveReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterPodBounceDirectiveReconcileLoop) EXPECT() *MockMulticlusterPodBounceDirectiveReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterPodBounceDirectiveReconciler mocks base method.
func (m *MockMulticlusterPodBounceDirectiveReconcileLoop) AddMulticlusterPodBounceDirectiveReconciler(ctx context.Context, rec controller.MulticlusterPodBounceDirectiveReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterPodBounceDirectiveReconciler", varargs...)
}

// AddMulticlusterPodBounceDirectiveReconciler indicates an expected call of AddMulticlusterPodBounceDirectiveReconciler.
func (mr *MockMulticlusterPodBounceDirectiveReconcileLoopMockRecorder) AddMulticlusterPodBounceDirectiveReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterPodBounceDirectiveReconciler", reflect.TypeOf((*MockMulticlusterPodBounceDirectiveReconcileLoop)(nil).AddMulticlusterPodBounceDirectiveReconciler), varargs...)
}

// MockMulticlusterXdsConfigReconciler is a mock of MulticlusterXdsConfigReconciler interface.
type MockMulticlusterXdsConfigReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterXdsConfigReconcilerMockRecorder
}

// MockMulticlusterXdsConfigReconcilerMockRecorder is the mock recorder for MockMulticlusterXdsConfigReconciler.
type MockMulticlusterXdsConfigReconcilerMockRecorder struct {
	mock *MockMulticlusterXdsConfigReconciler
}

// NewMockMulticlusterXdsConfigReconciler creates a new mock instance.
func NewMockMulticlusterXdsConfigReconciler(ctrl *gomock.Controller) *MockMulticlusterXdsConfigReconciler {
	mock := &MockMulticlusterXdsConfigReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterXdsConfigReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterXdsConfigReconciler) EXPECT() *MockMulticlusterXdsConfigReconcilerMockRecorder {
	return m.recorder
}

// ReconcileXdsConfig mocks base method.
func (m *MockMulticlusterXdsConfigReconciler) ReconcileXdsConfig(clusterName string, obj *v2.XdsConfig) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileXdsConfig", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileXdsConfig indicates an expected call of ReconcileXdsConfig.
func (mr *MockMulticlusterXdsConfigReconcilerMockRecorder) ReconcileXdsConfig(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileXdsConfig", reflect.TypeOf((*MockMulticlusterXdsConfigReconciler)(nil).ReconcileXdsConfig), clusterName, obj)
}

// MockMulticlusterXdsConfigDeletionReconciler is a mock of MulticlusterXdsConfigDeletionReconciler interface.
type MockMulticlusterXdsConfigDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterXdsConfigDeletionReconcilerMockRecorder
}

// MockMulticlusterXdsConfigDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterXdsConfigDeletionReconciler.
type MockMulticlusterXdsConfigDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterXdsConfigDeletionReconciler
}

// NewMockMulticlusterXdsConfigDeletionReconciler creates a new mock instance.
func NewMockMulticlusterXdsConfigDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterXdsConfigDeletionReconciler {
	mock := &MockMulticlusterXdsConfigDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterXdsConfigDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterXdsConfigDeletionReconciler) EXPECT() *MockMulticlusterXdsConfigDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileXdsConfigDeletion mocks base method.
func (m *MockMulticlusterXdsConfigDeletionReconciler) ReconcileXdsConfigDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileXdsConfigDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileXdsConfigDeletion indicates an expected call of ReconcileXdsConfigDeletion.
func (mr *MockMulticlusterXdsConfigDeletionReconcilerMockRecorder) ReconcileXdsConfigDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileXdsConfigDeletion", reflect.TypeOf((*MockMulticlusterXdsConfigDeletionReconciler)(nil).ReconcileXdsConfigDeletion), clusterName, req)
}

// MockMulticlusterXdsConfigReconcileLoop is a mock of MulticlusterXdsConfigReconcileLoop interface.
type MockMulticlusterXdsConfigReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterXdsConfigReconcileLoopMockRecorder
}

// MockMulticlusterXdsConfigReconcileLoopMockRecorder is the mock recorder for MockMulticlusterXdsConfigReconcileLoop.
type MockMulticlusterXdsConfigReconcileLoopMockRecorder struct {
	mock *MockMulticlusterXdsConfigReconcileLoop
}

// NewMockMulticlusterXdsConfigReconcileLoop creates a new mock instance.
func NewMockMulticlusterXdsConfigReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterXdsConfigReconcileLoop {
	mock := &MockMulticlusterXdsConfigReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterXdsConfigReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterXdsConfigReconcileLoop) EXPECT() *MockMulticlusterXdsConfigReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterXdsConfigReconciler mocks base method.
func (m *MockMulticlusterXdsConfigReconcileLoop) AddMulticlusterXdsConfigReconciler(ctx context.Context, rec controller.MulticlusterXdsConfigReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterXdsConfigReconciler", varargs...)
}

// AddMulticlusterXdsConfigReconciler indicates an expected call of AddMulticlusterXdsConfigReconciler.
func (mr *MockMulticlusterXdsConfigReconcileLoopMockRecorder) AddMulticlusterXdsConfigReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterXdsConfigReconciler", reflect.TypeOf((*MockMulticlusterXdsConfigReconcileLoop)(nil).AddMulticlusterXdsConfigReconciler), varargs...)
}

// MockMulticlusterDiscoveredGatewayReconciler is a mock of MulticlusterDiscoveredGatewayReconciler interface.
type MockMulticlusterDiscoveredGatewayReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterDiscoveredGatewayReconcilerMockRecorder
}

// MockMulticlusterDiscoveredGatewayReconcilerMockRecorder is the mock recorder for MockMulticlusterDiscoveredGatewayReconciler.
type MockMulticlusterDiscoveredGatewayReconcilerMockRecorder struct {
	mock *MockMulticlusterDiscoveredGatewayReconciler
}

// NewMockMulticlusterDiscoveredGatewayReconciler creates a new mock instance.
func NewMockMulticlusterDiscoveredGatewayReconciler(ctrl *gomock.Controller) *MockMulticlusterDiscoveredGatewayReconciler {
	mock := &MockMulticlusterDiscoveredGatewayReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterDiscoveredGatewayReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterDiscoveredGatewayReconciler) EXPECT() *MockMulticlusterDiscoveredGatewayReconcilerMockRecorder {
	return m.recorder
}

// ReconcileDiscoveredGateway mocks base method.
func (m *MockMulticlusterDiscoveredGatewayReconciler) ReconcileDiscoveredGateway(clusterName string, obj *v2.DiscoveredGateway) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDiscoveredGateway", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileDiscoveredGateway indicates an expected call of ReconcileDiscoveredGateway.
func (mr *MockMulticlusterDiscoveredGatewayReconcilerMockRecorder) ReconcileDiscoveredGateway(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDiscoveredGateway", reflect.TypeOf((*MockMulticlusterDiscoveredGatewayReconciler)(nil).ReconcileDiscoveredGateway), clusterName, obj)
}

// MockMulticlusterDiscoveredGatewayDeletionReconciler is a mock of MulticlusterDiscoveredGatewayDeletionReconciler interface.
type MockMulticlusterDiscoveredGatewayDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterDiscoveredGatewayDeletionReconcilerMockRecorder
}

// MockMulticlusterDiscoveredGatewayDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterDiscoveredGatewayDeletionReconciler.
type MockMulticlusterDiscoveredGatewayDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterDiscoveredGatewayDeletionReconciler
}

// NewMockMulticlusterDiscoveredGatewayDeletionReconciler creates a new mock instance.
func NewMockMulticlusterDiscoveredGatewayDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterDiscoveredGatewayDeletionReconciler {
	mock := &MockMulticlusterDiscoveredGatewayDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterDiscoveredGatewayDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterDiscoveredGatewayDeletionReconciler) EXPECT() *MockMulticlusterDiscoveredGatewayDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileDiscoveredGatewayDeletion mocks base method.
func (m *MockMulticlusterDiscoveredGatewayDeletionReconciler) ReconcileDiscoveredGatewayDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDiscoveredGatewayDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileDiscoveredGatewayDeletion indicates an expected call of ReconcileDiscoveredGatewayDeletion.
func (mr *MockMulticlusterDiscoveredGatewayDeletionReconcilerMockRecorder) ReconcileDiscoveredGatewayDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDiscoveredGatewayDeletion", reflect.TypeOf((*MockMulticlusterDiscoveredGatewayDeletionReconciler)(nil).ReconcileDiscoveredGatewayDeletion), clusterName, req)
}

// MockMulticlusterDiscoveredGatewayReconcileLoop is a mock of MulticlusterDiscoveredGatewayReconcileLoop interface.
type MockMulticlusterDiscoveredGatewayReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterDiscoveredGatewayReconcileLoopMockRecorder
}

// MockMulticlusterDiscoveredGatewayReconcileLoopMockRecorder is the mock recorder for MockMulticlusterDiscoveredGatewayReconcileLoop.
type MockMulticlusterDiscoveredGatewayReconcileLoopMockRecorder struct {
	mock *MockMulticlusterDiscoveredGatewayReconcileLoop
}

// NewMockMulticlusterDiscoveredGatewayReconcileLoop creates a new mock instance.
func NewMockMulticlusterDiscoveredGatewayReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterDiscoveredGatewayReconcileLoop {
	mock := &MockMulticlusterDiscoveredGatewayReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterDiscoveredGatewayReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterDiscoveredGatewayReconcileLoop) EXPECT() *MockMulticlusterDiscoveredGatewayReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterDiscoveredGatewayReconciler mocks base method.
func (m *MockMulticlusterDiscoveredGatewayReconcileLoop) AddMulticlusterDiscoveredGatewayReconciler(ctx context.Context, rec controller.MulticlusterDiscoveredGatewayReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterDiscoveredGatewayReconciler", varargs...)
}

// AddMulticlusterDiscoveredGatewayReconciler indicates an expected call of AddMulticlusterDiscoveredGatewayReconciler.
func (mr *MockMulticlusterDiscoveredGatewayReconcileLoopMockRecorder) AddMulticlusterDiscoveredGatewayReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterDiscoveredGatewayReconciler", reflect.TypeOf((*MockMulticlusterDiscoveredGatewayReconcileLoop)(nil).AddMulticlusterDiscoveredGatewayReconciler), varargs...)
}

// MockMulticlusterMeshReconciler is a mock of MulticlusterMeshReconciler interface.
type MockMulticlusterMeshReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMeshReconcilerMockRecorder
}

// MockMulticlusterMeshReconcilerMockRecorder is the mock recorder for MockMulticlusterMeshReconciler.
type MockMulticlusterMeshReconcilerMockRecorder struct {
	mock *MockMulticlusterMeshReconciler
}

// NewMockMulticlusterMeshReconciler creates a new mock instance.
func NewMockMulticlusterMeshReconciler(ctrl *gomock.Controller) *MockMulticlusterMeshReconciler {
	mock := &MockMulticlusterMeshReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMeshReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterMeshReconciler) EXPECT() *MockMulticlusterMeshReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMesh mocks base method.
func (m *MockMulticlusterMeshReconciler) ReconcileMesh(clusterName string, obj *v2.Mesh) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMesh", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileMesh indicates an expected call of ReconcileMesh.
func (mr *MockMulticlusterMeshReconcilerMockRecorder) ReconcileMesh(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMesh", reflect.TypeOf((*MockMulticlusterMeshReconciler)(nil).ReconcileMesh), clusterName, obj)
}

// MockMulticlusterMeshDeletionReconciler is a mock of MulticlusterMeshDeletionReconciler interface.
type MockMulticlusterMeshDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMeshDeletionReconcilerMockRecorder
}

// MockMulticlusterMeshDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterMeshDeletionReconciler.
type MockMulticlusterMeshDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterMeshDeletionReconciler
}

// NewMockMulticlusterMeshDeletionReconciler creates a new mock instance.
func NewMockMulticlusterMeshDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterMeshDeletionReconciler {
	mock := &MockMulticlusterMeshDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMeshDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterMeshDeletionReconciler) EXPECT() *MockMulticlusterMeshDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMeshDeletion mocks base method.
func (m *MockMulticlusterMeshDeletionReconciler) ReconcileMeshDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMeshDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileMeshDeletion indicates an expected call of ReconcileMeshDeletion.
func (mr *MockMulticlusterMeshDeletionReconcilerMockRecorder) ReconcileMeshDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMeshDeletion", reflect.TypeOf((*MockMulticlusterMeshDeletionReconciler)(nil).ReconcileMeshDeletion), clusterName, req)
}

// MockMulticlusterMeshReconcileLoop is a mock of MulticlusterMeshReconcileLoop interface.
type MockMulticlusterMeshReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMeshReconcileLoopMockRecorder
}

// MockMulticlusterMeshReconcileLoopMockRecorder is the mock recorder for MockMulticlusterMeshReconcileLoop.
type MockMulticlusterMeshReconcileLoopMockRecorder struct {
	mock *MockMulticlusterMeshReconcileLoop
}

// NewMockMulticlusterMeshReconcileLoop creates a new mock instance.
func NewMockMulticlusterMeshReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterMeshReconcileLoop {
	mock := &MockMulticlusterMeshReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMeshReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterMeshReconcileLoop) EXPECT() *MockMulticlusterMeshReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterMeshReconciler mocks base method.
func (m *MockMulticlusterMeshReconcileLoop) AddMulticlusterMeshReconciler(ctx context.Context, rec controller.MulticlusterMeshReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterMeshReconciler", varargs...)
}

// AddMulticlusterMeshReconciler indicates an expected call of AddMulticlusterMeshReconciler.
func (mr *MockMulticlusterMeshReconcileLoopMockRecorder) AddMulticlusterMeshReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterMeshReconciler", reflect.TypeOf((*MockMulticlusterMeshReconcileLoop)(nil).AddMulticlusterMeshReconciler), varargs...)
}

// MockMulticlusterDiscoveredCNIReconciler is a mock of MulticlusterDiscoveredCNIReconciler interface.
type MockMulticlusterDiscoveredCNIReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterDiscoveredCNIReconcilerMockRecorder
}

// MockMulticlusterDiscoveredCNIReconcilerMockRecorder is the mock recorder for MockMulticlusterDiscoveredCNIReconciler.
type MockMulticlusterDiscoveredCNIReconcilerMockRecorder struct {
	mock *MockMulticlusterDiscoveredCNIReconciler
}

// NewMockMulticlusterDiscoveredCNIReconciler creates a new mock instance.
func NewMockMulticlusterDiscoveredCNIReconciler(ctrl *gomock.Controller) *MockMulticlusterDiscoveredCNIReconciler {
	mock := &MockMulticlusterDiscoveredCNIReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterDiscoveredCNIReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterDiscoveredCNIReconciler) EXPECT() *MockMulticlusterDiscoveredCNIReconcilerMockRecorder {
	return m.recorder
}

// ReconcileDiscoveredCNI mocks base method.
func (m *MockMulticlusterDiscoveredCNIReconciler) ReconcileDiscoveredCNI(clusterName string, obj *v2.DiscoveredCNI) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDiscoveredCNI", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileDiscoveredCNI indicates an expected call of ReconcileDiscoveredCNI.
func (mr *MockMulticlusterDiscoveredCNIReconcilerMockRecorder) ReconcileDiscoveredCNI(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDiscoveredCNI", reflect.TypeOf((*MockMulticlusterDiscoveredCNIReconciler)(nil).ReconcileDiscoveredCNI), clusterName, obj)
}

// MockMulticlusterDiscoveredCNIDeletionReconciler is a mock of MulticlusterDiscoveredCNIDeletionReconciler interface.
type MockMulticlusterDiscoveredCNIDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterDiscoveredCNIDeletionReconcilerMockRecorder
}

// MockMulticlusterDiscoveredCNIDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterDiscoveredCNIDeletionReconciler.
type MockMulticlusterDiscoveredCNIDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterDiscoveredCNIDeletionReconciler
}

// NewMockMulticlusterDiscoveredCNIDeletionReconciler creates a new mock instance.
func NewMockMulticlusterDiscoveredCNIDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterDiscoveredCNIDeletionReconciler {
	mock := &MockMulticlusterDiscoveredCNIDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterDiscoveredCNIDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterDiscoveredCNIDeletionReconciler) EXPECT() *MockMulticlusterDiscoveredCNIDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileDiscoveredCNIDeletion mocks base method.
func (m *MockMulticlusterDiscoveredCNIDeletionReconciler) ReconcileDiscoveredCNIDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDiscoveredCNIDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileDiscoveredCNIDeletion indicates an expected call of ReconcileDiscoveredCNIDeletion.
func (mr *MockMulticlusterDiscoveredCNIDeletionReconcilerMockRecorder) ReconcileDiscoveredCNIDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDiscoveredCNIDeletion", reflect.TypeOf((*MockMulticlusterDiscoveredCNIDeletionReconciler)(nil).ReconcileDiscoveredCNIDeletion), clusterName, req)
}

// MockMulticlusterDiscoveredCNIReconcileLoop is a mock of MulticlusterDiscoveredCNIReconcileLoop interface.
type MockMulticlusterDiscoveredCNIReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterDiscoveredCNIReconcileLoopMockRecorder
}

// MockMulticlusterDiscoveredCNIReconcileLoopMockRecorder is the mock recorder for MockMulticlusterDiscoveredCNIReconcileLoop.
type MockMulticlusterDiscoveredCNIReconcileLoopMockRecorder struct {
	mock *MockMulticlusterDiscoveredCNIReconcileLoop
}

// NewMockMulticlusterDiscoveredCNIReconcileLoop creates a new mock instance.
func NewMockMulticlusterDiscoveredCNIReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterDiscoveredCNIReconcileLoop {
	mock := &MockMulticlusterDiscoveredCNIReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterDiscoveredCNIReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterDiscoveredCNIReconcileLoop) EXPECT() *MockMulticlusterDiscoveredCNIReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterDiscoveredCNIReconciler mocks base method.
func (m *MockMulticlusterDiscoveredCNIReconcileLoop) AddMulticlusterDiscoveredCNIReconciler(ctx context.Context, rec controller.MulticlusterDiscoveredCNIReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterDiscoveredCNIReconciler", varargs...)
}

// AddMulticlusterDiscoveredCNIReconciler indicates an expected call of AddMulticlusterDiscoveredCNIReconciler.
func (mr *MockMulticlusterDiscoveredCNIReconcileLoopMockRecorder) AddMulticlusterDiscoveredCNIReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterDiscoveredCNIReconciler", reflect.TypeOf((*MockMulticlusterDiscoveredCNIReconcileLoop)(nil).AddMulticlusterDiscoveredCNIReconciler), varargs...)
}

// MockMulticlusterPortalConfigReconciler is a mock of MulticlusterPortalConfigReconciler interface.
type MockMulticlusterPortalConfigReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterPortalConfigReconcilerMockRecorder
}

// MockMulticlusterPortalConfigReconcilerMockRecorder is the mock recorder for MockMulticlusterPortalConfigReconciler.
type MockMulticlusterPortalConfigReconcilerMockRecorder struct {
	mock *MockMulticlusterPortalConfigReconciler
}

// NewMockMulticlusterPortalConfigReconciler creates a new mock instance.
func NewMockMulticlusterPortalConfigReconciler(ctrl *gomock.Controller) *MockMulticlusterPortalConfigReconciler {
	mock := &MockMulticlusterPortalConfigReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterPortalConfigReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterPortalConfigReconciler) EXPECT() *MockMulticlusterPortalConfigReconcilerMockRecorder {
	return m.recorder
}

// ReconcilePortalConfig mocks base method.
func (m *MockMulticlusterPortalConfigReconciler) ReconcilePortalConfig(clusterName string, obj *v2.PortalConfig) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePortalConfig", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcilePortalConfig indicates an expected call of ReconcilePortalConfig.
func (mr *MockMulticlusterPortalConfigReconcilerMockRecorder) ReconcilePortalConfig(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePortalConfig", reflect.TypeOf((*MockMulticlusterPortalConfigReconciler)(nil).ReconcilePortalConfig), clusterName, obj)
}

// MockMulticlusterPortalConfigDeletionReconciler is a mock of MulticlusterPortalConfigDeletionReconciler interface.
type MockMulticlusterPortalConfigDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterPortalConfigDeletionReconcilerMockRecorder
}

// MockMulticlusterPortalConfigDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterPortalConfigDeletionReconciler.
type MockMulticlusterPortalConfigDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterPortalConfigDeletionReconciler
}

// NewMockMulticlusterPortalConfigDeletionReconciler creates a new mock instance.
func NewMockMulticlusterPortalConfigDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterPortalConfigDeletionReconciler {
	mock := &MockMulticlusterPortalConfigDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterPortalConfigDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterPortalConfigDeletionReconciler) EXPECT() *MockMulticlusterPortalConfigDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcilePortalConfigDeletion mocks base method.
func (m *MockMulticlusterPortalConfigDeletionReconciler) ReconcilePortalConfigDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePortalConfigDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcilePortalConfigDeletion indicates an expected call of ReconcilePortalConfigDeletion.
func (mr *MockMulticlusterPortalConfigDeletionReconcilerMockRecorder) ReconcilePortalConfigDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePortalConfigDeletion", reflect.TypeOf((*MockMulticlusterPortalConfigDeletionReconciler)(nil).ReconcilePortalConfigDeletion), clusterName, req)
}

// MockMulticlusterPortalConfigReconcileLoop is a mock of MulticlusterPortalConfigReconcileLoop interface.
type MockMulticlusterPortalConfigReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterPortalConfigReconcileLoopMockRecorder
}

// MockMulticlusterPortalConfigReconcileLoopMockRecorder is the mock recorder for MockMulticlusterPortalConfigReconcileLoop.
type MockMulticlusterPortalConfigReconcileLoopMockRecorder struct {
	mock *MockMulticlusterPortalConfigReconcileLoop
}

// NewMockMulticlusterPortalConfigReconcileLoop creates a new mock instance.
func NewMockMulticlusterPortalConfigReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterPortalConfigReconcileLoop {
	mock := &MockMulticlusterPortalConfigReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterPortalConfigReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterPortalConfigReconcileLoop) EXPECT() *MockMulticlusterPortalConfigReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterPortalConfigReconciler mocks base method.
func (m *MockMulticlusterPortalConfigReconcileLoop) AddMulticlusterPortalConfigReconciler(ctx context.Context, rec controller.MulticlusterPortalConfigReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterPortalConfigReconciler", varargs...)
}

// AddMulticlusterPortalConfigReconciler indicates an expected call of AddMulticlusterPortalConfigReconciler.
func (mr *MockMulticlusterPortalConfigReconcileLoopMockRecorder) AddMulticlusterPortalConfigReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterPortalConfigReconciler", reflect.TypeOf((*MockMulticlusterPortalConfigReconcileLoop)(nil).AddMulticlusterPortalConfigReconciler), varargs...)
}

// MockMulticlusterSpireRegistrationEntryReconciler is a mock of MulticlusterSpireRegistrationEntryReconciler interface.
type MockMulticlusterSpireRegistrationEntryReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterSpireRegistrationEntryReconcilerMockRecorder
}

// MockMulticlusterSpireRegistrationEntryReconcilerMockRecorder is the mock recorder for MockMulticlusterSpireRegistrationEntryReconciler.
type MockMulticlusterSpireRegistrationEntryReconcilerMockRecorder struct {
	mock *MockMulticlusterSpireRegistrationEntryReconciler
}

// NewMockMulticlusterSpireRegistrationEntryReconciler creates a new mock instance.
func NewMockMulticlusterSpireRegistrationEntryReconciler(ctrl *gomock.Controller) *MockMulticlusterSpireRegistrationEntryReconciler {
	mock := &MockMulticlusterSpireRegistrationEntryReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterSpireRegistrationEntryReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterSpireRegistrationEntryReconciler) EXPECT() *MockMulticlusterSpireRegistrationEntryReconcilerMockRecorder {
	return m.recorder
}

// ReconcileSpireRegistrationEntry mocks base method.
func (m *MockMulticlusterSpireRegistrationEntryReconciler) ReconcileSpireRegistrationEntry(clusterName string, obj *v2.SpireRegistrationEntry) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileSpireRegistrationEntry", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileSpireRegistrationEntry indicates an expected call of ReconcileSpireRegistrationEntry.
func (mr *MockMulticlusterSpireRegistrationEntryReconcilerMockRecorder) ReconcileSpireRegistrationEntry(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileSpireRegistrationEntry", reflect.TypeOf((*MockMulticlusterSpireRegistrationEntryReconciler)(nil).ReconcileSpireRegistrationEntry), clusterName, obj)
}

// MockMulticlusterSpireRegistrationEntryDeletionReconciler is a mock of MulticlusterSpireRegistrationEntryDeletionReconciler interface.
type MockMulticlusterSpireRegistrationEntryDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterSpireRegistrationEntryDeletionReconcilerMockRecorder
}

// MockMulticlusterSpireRegistrationEntryDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterSpireRegistrationEntryDeletionReconciler.
type MockMulticlusterSpireRegistrationEntryDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterSpireRegistrationEntryDeletionReconciler
}

// NewMockMulticlusterSpireRegistrationEntryDeletionReconciler creates a new mock instance.
func NewMockMulticlusterSpireRegistrationEntryDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterSpireRegistrationEntryDeletionReconciler {
	mock := &MockMulticlusterSpireRegistrationEntryDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterSpireRegistrationEntryDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterSpireRegistrationEntryDeletionReconciler) EXPECT() *MockMulticlusterSpireRegistrationEntryDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileSpireRegistrationEntryDeletion mocks base method.
func (m *MockMulticlusterSpireRegistrationEntryDeletionReconciler) ReconcileSpireRegistrationEntryDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileSpireRegistrationEntryDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileSpireRegistrationEntryDeletion indicates an expected call of ReconcileSpireRegistrationEntryDeletion.
func (mr *MockMulticlusterSpireRegistrationEntryDeletionReconcilerMockRecorder) ReconcileSpireRegistrationEntryDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileSpireRegistrationEntryDeletion", reflect.TypeOf((*MockMulticlusterSpireRegistrationEntryDeletionReconciler)(nil).ReconcileSpireRegistrationEntryDeletion), clusterName, req)
}

// MockMulticlusterSpireRegistrationEntryReconcileLoop is a mock of MulticlusterSpireRegistrationEntryReconcileLoop interface.
type MockMulticlusterSpireRegistrationEntryReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterSpireRegistrationEntryReconcileLoopMockRecorder
}

// MockMulticlusterSpireRegistrationEntryReconcileLoopMockRecorder is the mock recorder for MockMulticlusterSpireRegistrationEntryReconcileLoop.
type MockMulticlusterSpireRegistrationEntryReconcileLoopMockRecorder struct {
	mock *MockMulticlusterSpireRegistrationEntryReconcileLoop
}

// NewMockMulticlusterSpireRegistrationEntryReconcileLoop creates a new mock instance.
func NewMockMulticlusterSpireRegistrationEntryReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterSpireRegistrationEntryReconcileLoop {
	mock := &MockMulticlusterSpireRegistrationEntryReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterSpireRegistrationEntryReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterSpireRegistrationEntryReconcileLoop) EXPECT() *MockMulticlusterSpireRegistrationEntryReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterSpireRegistrationEntryReconciler mocks base method.
func (m *MockMulticlusterSpireRegistrationEntryReconcileLoop) AddMulticlusterSpireRegistrationEntryReconciler(ctx context.Context, rec controller.MulticlusterSpireRegistrationEntryReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterSpireRegistrationEntryReconciler", varargs...)
}

// AddMulticlusterSpireRegistrationEntryReconciler indicates an expected call of AddMulticlusterSpireRegistrationEntryReconciler.
func (mr *MockMulticlusterSpireRegistrationEntryReconcileLoopMockRecorder) AddMulticlusterSpireRegistrationEntryReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterSpireRegistrationEntryReconciler", reflect.TypeOf((*MockMulticlusterSpireRegistrationEntryReconcileLoop)(nil).AddMulticlusterSpireRegistrationEntryReconciler), varargs...)
}
