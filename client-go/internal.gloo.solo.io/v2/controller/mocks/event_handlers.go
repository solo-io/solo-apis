// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go
//
// Generated by this command:
//
//	mockgen -source ./event_handlers.go -destination mocks/event_handlers.go
//

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"

	v2 "github.com/solo-io/solo-apis/client-go/internal.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/client-go/internal.gloo.solo.io/v2/controller"
)

// MockIssuedCertificateEventHandler is a mock of IssuedCertificateEventHandler interface.
type MockIssuedCertificateEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIssuedCertificateEventHandlerMockRecorder
}

// MockIssuedCertificateEventHandlerMockRecorder is the mock recorder for MockIssuedCertificateEventHandler.
type MockIssuedCertificateEventHandlerMockRecorder struct {
	mock *MockIssuedCertificateEventHandler
}

// NewMockIssuedCertificateEventHandler creates a new mock instance.
func NewMockIssuedCertificateEventHandler(ctrl *gomock.Controller) *MockIssuedCertificateEventHandler {
	mock := &MockIssuedCertificateEventHandler{ctrl: ctrl}
	mock.recorder = &MockIssuedCertificateEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuedCertificateEventHandler) EXPECT() *MockIssuedCertificateEventHandlerMockRecorder {
	return m.recorder
}

// CreateIssuedCertificate mocks base method.
func (m *MockIssuedCertificateEventHandler) CreateIssuedCertificate(obj *v2.IssuedCertificate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssuedCertificate", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIssuedCertificate indicates an expected call of CreateIssuedCertificate.
func (mr *MockIssuedCertificateEventHandlerMockRecorder) CreateIssuedCertificate(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateEventHandler)(nil).CreateIssuedCertificate), obj)
}

// DeleteIssuedCertificate mocks base method.
func (m *MockIssuedCertificateEventHandler) DeleteIssuedCertificate(obj *v2.IssuedCertificate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIssuedCertificate", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIssuedCertificate indicates an expected call of DeleteIssuedCertificate.
func (mr *MockIssuedCertificateEventHandlerMockRecorder) DeleteIssuedCertificate(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateEventHandler)(nil).DeleteIssuedCertificate), obj)
}

// GenericIssuedCertificate mocks base method.
func (m *MockIssuedCertificateEventHandler) GenericIssuedCertificate(obj *v2.IssuedCertificate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericIssuedCertificate", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericIssuedCertificate indicates an expected call of GenericIssuedCertificate.
func (mr *MockIssuedCertificateEventHandlerMockRecorder) GenericIssuedCertificate(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateEventHandler)(nil).GenericIssuedCertificate), obj)
}

// UpdateIssuedCertificate mocks base method.
func (m *MockIssuedCertificateEventHandler) UpdateIssuedCertificate(old, new *v2.IssuedCertificate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIssuedCertificate", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIssuedCertificate indicates an expected call of UpdateIssuedCertificate.
func (mr *MockIssuedCertificateEventHandlerMockRecorder) UpdateIssuedCertificate(old, new any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateEventHandler)(nil).UpdateIssuedCertificate), old, new)
}

// MockIssuedCertificateEventWatcher is a mock of IssuedCertificateEventWatcher interface.
type MockIssuedCertificateEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockIssuedCertificateEventWatcherMockRecorder
}

// MockIssuedCertificateEventWatcherMockRecorder is the mock recorder for MockIssuedCertificateEventWatcher.
type MockIssuedCertificateEventWatcherMockRecorder struct {
	mock *MockIssuedCertificateEventWatcher
}

// NewMockIssuedCertificateEventWatcher creates a new mock instance.
func NewMockIssuedCertificateEventWatcher(ctrl *gomock.Controller) *MockIssuedCertificateEventWatcher {
	mock := &MockIssuedCertificateEventWatcher{ctrl: ctrl}
	mock.recorder = &MockIssuedCertificateEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuedCertificateEventWatcher) EXPECT() *MockIssuedCertificateEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockIssuedCertificateEventWatcher) AddEventHandler(ctx context.Context, h controller.IssuedCertificateEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockIssuedCertificateEventWatcherMockRecorder) AddEventHandler(ctx, h any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockIssuedCertificateEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockCertificateRequestEventHandler is a mock of CertificateRequestEventHandler interface.
type MockCertificateRequestEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestEventHandlerMockRecorder
}

// MockCertificateRequestEventHandlerMockRecorder is the mock recorder for MockCertificateRequestEventHandler.
type MockCertificateRequestEventHandlerMockRecorder struct {
	mock *MockCertificateRequestEventHandler
}

// NewMockCertificateRequestEventHandler creates a new mock instance.
func NewMockCertificateRequestEventHandler(ctrl *gomock.Controller) *MockCertificateRequestEventHandler {
	mock := &MockCertificateRequestEventHandler{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateRequestEventHandler) EXPECT() *MockCertificateRequestEventHandlerMockRecorder {
	return m.recorder
}

// CreateCertificateRequest mocks base method.
func (m *MockCertificateRequestEventHandler) CreateCertificateRequest(obj *v2.CertificateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificateRequest", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCertificateRequest indicates an expected call of CreateCertificateRequest.
func (mr *MockCertificateRequestEventHandlerMockRecorder) CreateCertificateRequest(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateRequest", reflect.TypeOf((*MockCertificateRequestEventHandler)(nil).CreateCertificateRequest), obj)
}

// DeleteCertificateRequest mocks base method.
func (m *MockCertificateRequestEventHandler) DeleteCertificateRequest(obj *v2.CertificateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificateRequest", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificateRequest indicates an expected call of DeleteCertificateRequest.
func (mr *MockCertificateRequestEventHandlerMockRecorder) DeleteCertificateRequest(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificateRequest", reflect.TypeOf((*MockCertificateRequestEventHandler)(nil).DeleteCertificateRequest), obj)
}

// GenericCertificateRequest mocks base method.
func (m *MockCertificateRequestEventHandler) GenericCertificateRequest(obj *v2.CertificateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericCertificateRequest", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericCertificateRequest indicates an expected call of GenericCertificateRequest.
func (mr *MockCertificateRequestEventHandlerMockRecorder) GenericCertificateRequest(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericCertificateRequest", reflect.TypeOf((*MockCertificateRequestEventHandler)(nil).GenericCertificateRequest), obj)
}

// UpdateCertificateRequest mocks base method.
func (m *MockCertificateRequestEventHandler) UpdateCertificateRequest(old, new *v2.CertificateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCertificateRequest", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertificateRequest indicates an expected call of UpdateCertificateRequest.
func (mr *MockCertificateRequestEventHandlerMockRecorder) UpdateCertificateRequest(old, new any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateRequest", reflect.TypeOf((*MockCertificateRequestEventHandler)(nil).UpdateCertificateRequest), old, new)
}

// MockCertificateRequestEventWatcher is a mock of CertificateRequestEventWatcher interface.
type MockCertificateRequestEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestEventWatcherMockRecorder
}

// MockCertificateRequestEventWatcherMockRecorder is the mock recorder for MockCertificateRequestEventWatcher.
type MockCertificateRequestEventWatcherMockRecorder struct {
	mock *MockCertificateRequestEventWatcher
}

// NewMockCertificateRequestEventWatcher creates a new mock instance.
func NewMockCertificateRequestEventWatcher(ctrl *gomock.Controller) *MockCertificateRequestEventWatcher {
	mock := &MockCertificateRequestEventWatcher{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateRequestEventWatcher) EXPECT() *MockCertificateRequestEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockCertificateRequestEventWatcher) AddEventHandler(ctx context.Context, h controller.CertificateRequestEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockCertificateRequestEventWatcherMockRecorder) AddEventHandler(ctx, h any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockCertificateRequestEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockPodBounceDirectiveEventHandler is a mock of PodBounceDirectiveEventHandler interface.
type MockPodBounceDirectiveEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPodBounceDirectiveEventHandlerMockRecorder
}

// MockPodBounceDirectiveEventHandlerMockRecorder is the mock recorder for MockPodBounceDirectiveEventHandler.
type MockPodBounceDirectiveEventHandlerMockRecorder struct {
	mock *MockPodBounceDirectiveEventHandler
}

// NewMockPodBounceDirectiveEventHandler creates a new mock instance.
func NewMockPodBounceDirectiveEventHandler(ctrl *gomock.Controller) *MockPodBounceDirectiveEventHandler {
	mock := &MockPodBounceDirectiveEventHandler{ctrl: ctrl}
	mock.recorder = &MockPodBounceDirectiveEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodBounceDirectiveEventHandler) EXPECT() *MockPodBounceDirectiveEventHandlerMockRecorder {
	return m.recorder
}

// CreatePodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveEventHandler) CreatePodBounceDirective(obj *v2.PodBounceDirective) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePodBounceDirective", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePodBounceDirective indicates an expected call of CreatePodBounceDirective.
func (mr *MockPodBounceDirectiveEventHandlerMockRecorder) CreatePodBounceDirective(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveEventHandler)(nil).CreatePodBounceDirective), obj)
}

// DeletePodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveEventHandler) DeletePodBounceDirective(obj *v2.PodBounceDirective) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePodBounceDirective", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePodBounceDirective indicates an expected call of DeletePodBounceDirective.
func (mr *MockPodBounceDirectiveEventHandlerMockRecorder) DeletePodBounceDirective(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveEventHandler)(nil).DeletePodBounceDirective), obj)
}

// GenericPodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveEventHandler) GenericPodBounceDirective(obj *v2.PodBounceDirective) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericPodBounceDirective", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericPodBounceDirective indicates an expected call of GenericPodBounceDirective.
func (mr *MockPodBounceDirectiveEventHandlerMockRecorder) GenericPodBounceDirective(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericPodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveEventHandler)(nil).GenericPodBounceDirective), obj)
}

// UpdatePodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveEventHandler) UpdatePodBounceDirective(old, new *v2.PodBounceDirective) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePodBounceDirective", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePodBounceDirective indicates an expected call of UpdatePodBounceDirective.
func (mr *MockPodBounceDirectiveEventHandlerMockRecorder) UpdatePodBounceDirective(old, new any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveEventHandler)(nil).UpdatePodBounceDirective), old, new)
}

// MockPodBounceDirectiveEventWatcher is a mock of PodBounceDirectiveEventWatcher interface.
type MockPodBounceDirectiveEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockPodBounceDirectiveEventWatcherMockRecorder
}

// MockPodBounceDirectiveEventWatcherMockRecorder is the mock recorder for MockPodBounceDirectiveEventWatcher.
type MockPodBounceDirectiveEventWatcherMockRecorder struct {
	mock *MockPodBounceDirectiveEventWatcher
}

// NewMockPodBounceDirectiveEventWatcher creates a new mock instance.
func NewMockPodBounceDirectiveEventWatcher(ctrl *gomock.Controller) *MockPodBounceDirectiveEventWatcher {
	mock := &MockPodBounceDirectiveEventWatcher{ctrl: ctrl}
	mock.recorder = &MockPodBounceDirectiveEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodBounceDirectiveEventWatcher) EXPECT() *MockPodBounceDirectiveEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockPodBounceDirectiveEventWatcher) AddEventHandler(ctx context.Context, h controller.PodBounceDirectiveEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockPodBounceDirectiveEventWatcherMockRecorder) AddEventHandler(ctx, h any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockPodBounceDirectiveEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockXdsConfigEventHandler is a mock of XdsConfigEventHandler interface.
type MockXdsConfigEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockXdsConfigEventHandlerMockRecorder
}

// MockXdsConfigEventHandlerMockRecorder is the mock recorder for MockXdsConfigEventHandler.
type MockXdsConfigEventHandlerMockRecorder struct {
	mock *MockXdsConfigEventHandler
}

// NewMockXdsConfigEventHandler creates a new mock instance.
func NewMockXdsConfigEventHandler(ctrl *gomock.Controller) *MockXdsConfigEventHandler {
	mock := &MockXdsConfigEventHandler{ctrl: ctrl}
	mock.recorder = &MockXdsConfigEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXdsConfigEventHandler) EXPECT() *MockXdsConfigEventHandlerMockRecorder {
	return m.recorder
}

// CreateXdsConfig mocks base method.
func (m *MockXdsConfigEventHandler) CreateXdsConfig(obj *v2.XdsConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateXdsConfig", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateXdsConfig indicates an expected call of CreateXdsConfig.
func (mr *MockXdsConfigEventHandlerMockRecorder) CreateXdsConfig(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateXdsConfig", reflect.TypeOf((*MockXdsConfigEventHandler)(nil).CreateXdsConfig), obj)
}

// DeleteXdsConfig mocks base method.
func (m *MockXdsConfigEventHandler) DeleteXdsConfig(obj *v2.XdsConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteXdsConfig", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteXdsConfig indicates an expected call of DeleteXdsConfig.
func (mr *MockXdsConfigEventHandlerMockRecorder) DeleteXdsConfig(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteXdsConfig", reflect.TypeOf((*MockXdsConfigEventHandler)(nil).DeleteXdsConfig), obj)
}

// GenericXdsConfig mocks base method.
func (m *MockXdsConfigEventHandler) GenericXdsConfig(obj *v2.XdsConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericXdsConfig", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericXdsConfig indicates an expected call of GenericXdsConfig.
func (mr *MockXdsConfigEventHandlerMockRecorder) GenericXdsConfig(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericXdsConfig", reflect.TypeOf((*MockXdsConfigEventHandler)(nil).GenericXdsConfig), obj)
}

// UpdateXdsConfig mocks base method.
func (m *MockXdsConfigEventHandler) UpdateXdsConfig(old, new *v2.XdsConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateXdsConfig", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateXdsConfig indicates an expected call of UpdateXdsConfig.
func (mr *MockXdsConfigEventHandlerMockRecorder) UpdateXdsConfig(old, new any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateXdsConfig", reflect.TypeOf((*MockXdsConfigEventHandler)(nil).UpdateXdsConfig), old, new)
}

// MockXdsConfigEventWatcher is a mock of XdsConfigEventWatcher interface.
type MockXdsConfigEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockXdsConfigEventWatcherMockRecorder
}

// MockXdsConfigEventWatcherMockRecorder is the mock recorder for MockXdsConfigEventWatcher.
type MockXdsConfigEventWatcherMockRecorder struct {
	mock *MockXdsConfigEventWatcher
}

// NewMockXdsConfigEventWatcher creates a new mock instance.
func NewMockXdsConfigEventWatcher(ctrl *gomock.Controller) *MockXdsConfigEventWatcher {
	mock := &MockXdsConfigEventWatcher{ctrl: ctrl}
	mock.recorder = &MockXdsConfigEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXdsConfigEventWatcher) EXPECT() *MockXdsConfigEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockXdsConfigEventWatcher) AddEventHandler(ctx context.Context, h controller.XdsConfigEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockXdsConfigEventWatcherMockRecorder) AddEventHandler(ctx, h any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockXdsConfigEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockDiscoveredGatewayEventHandler is a mock of DiscoveredGatewayEventHandler interface.
type MockDiscoveredGatewayEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredGatewayEventHandlerMockRecorder
}

// MockDiscoveredGatewayEventHandlerMockRecorder is the mock recorder for MockDiscoveredGatewayEventHandler.
type MockDiscoveredGatewayEventHandlerMockRecorder struct {
	mock *MockDiscoveredGatewayEventHandler
}

// NewMockDiscoveredGatewayEventHandler creates a new mock instance.
func NewMockDiscoveredGatewayEventHandler(ctrl *gomock.Controller) *MockDiscoveredGatewayEventHandler {
	mock := &MockDiscoveredGatewayEventHandler{ctrl: ctrl}
	mock.recorder = &MockDiscoveredGatewayEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredGatewayEventHandler) EXPECT() *MockDiscoveredGatewayEventHandlerMockRecorder {
	return m.recorder
}

// CreateDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayEventHandler) CreateDiscoveredGateway(obj *v2.DiscoveredGateway) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiscoveredGateway", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDiscoveredGateway indicates an expected call of CreateDiscoveredGateway.
func (mr *MockDiscoveredGatewayEventHandlerMockRecorder) CreateDiscoveredGateway(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayEventHandler)(nil).CreateDiscoveredGateway), obj)
}

// DeleteDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayEventHandler) DeleteDiscoveredGateway(obj *v2.DiscoveredGateway) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDiscoveredGateway", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDiscoveredGateway indicates an expected call of DeleteDiscoveredGateway.
func (mr *MockDiscoveredGatewayEventHandlerMockRecorder) DeleteDiscoveredGateway(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayEventHandler)(nil).DeleteDiscoveredGateway), obj)
}

// GenericDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayEventHandler) GenericDiscoveredGateway(obj *v2.DiscoveredGateway) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericDiscoveredGateway", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericDiscoveredGateway indicates an expected call of GenericDiscoveredGateway.
func (mr *MockDiscoveredGatewayEventHandlerMockRecorder) GenericDiscoveredGateway(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayEventHandler)(nil).GenericDiscoveredGateway), obj)
}

// UpdateDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayEventHandler) UpdateDiscoveredGateway(old, new *v2.DiscoveredGateway) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDiscoveredGateway", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDiscoveredGateway indicates an expected call of UpdateDiscoveredGateway.
func (mr *MockDiscoveredGatewayEventHandlerMockRecorder) UpdateDiscoveredGateway(old, new any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayEventHandler)(nil).UpdateDiscoveredGateway), old, new)
}

// MockDiscoveredGatewayEventWatcher is a mock of DiscoveredGatewayEventWatcher interface.
type MockDiscoveredGatewayEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredGatewayEventWatcherMockRecorder
}

// MockDiscoveredGatewayEventWatcherMockRecorder is the mock recorder for MockDiscoveredGatewayEventWatcher.
type MockDiscoveredGatewayEventWatcherMockRecorder struct {
	mock *MockDiscoveredGatewayEventWatcher
}

// NewMockDiscoveredGatewayEventWatcher creates a new mock instance.
func NewMockDiscoveredGatewayEventWatcher(ctrl *gomock.Controller) *MockDiscoveredGatewayEventWatcher {
	mock := &MockDiscoveredGatewayEventWatcher{ctrl: ctrl}
	mock.recorder = &MockDiscoveredGatewayEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredGatewayEventWatcher) EXPECT() *MockDiscoveredGatewayEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockDiscoveredGatewayEventWatcher) AddEventHandler(ctx context.Context, h controller.DiscoveredGatewayEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockDiscoveredGatewayEventWatcherMockRecorder) AddEventHandler(ctx, h any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockDiscoveredGatewayEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockMeshEventHandler is a mock of MeshEventHandler interface.
type MockMeshEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMeshEventHandlerMockRecorder
}

// MockMeshEventHandlerMockRecorder is the mock recorder for MockMeshEventHandler.
type MockMeshEventHandlerMockRecorder struct {
	mock *MockMeshEventHandler
}

// NewMockMeshEventHandler creates a new mock instance.
func NewMockMeshEventHandler(ctrl *gomock.Controller) *MockMeshEventHandler {
	mock := &MockMeshEventHandler{ctrl: ctrl}
	mock.recorder = &MockMeshEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshEventHandler) EXPECT() *MockMeshEventHandlerMockRecorder {
	return m.recorder
}

// CreateMesh mocks base method.
func (m *MockMeshEventHandler) CreateMesh(obj *v2.Mesh) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMesh", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMesh indicates an expected call of CreateMesh.
func (mr *MockMeshEventHandlerMockRecorder) CreateMesh(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMesh", reflect.TypeOf((*MockMeshEventHandler)(nil).CreateMesh), obj)
}

// DeleteMesh mocks base method.
func (m *MockMeshEventHandler) DeleteMesh(obj *v2.Mesh) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMesh", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMesh indicates an expected call of DeleteMesh.
func (mr *MockMeshEventHandlerMockRecorder) DeleteMesh(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMesh", reflect.TypeOf((*MockMeshEventHandler)(nil).DeleteMesh), obj)
}

// GenericMesh mocks base method.
func (m *MockMeshEventHandler) GenericMesh(obj *v2.Mesh) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericMesh", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericMesh indicates an expected call of GenericMesh.
func (mr *MockMeshEventHandlerMockRecorder) GenericMesh(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericMesh", reflect.TypeOf((*MockMeshEventHandler)(nil).GenericMesh), obj)
}

// UpdateMesh mocks base method.
func (m *MockMeshEventHandler) UpdateMesh(old, new *v2.Mesh) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMesh", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMesh indicates an expected call of UpdateMesh.
func (mr *MockMeshEventHandlerMockRecorder) UpdateMesh(old, new any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMesh", reflect.TypeOf((*MockMeshEventHandler)(nil).UpdateMesh), old, new)
}

// MockMeshEventWatcher is a mock of MeshEventWatcher interface.
type MockMeshEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockMeshEventWatcherMockRecorder
}

// MockMeshEventWatcherMockRecorder is the mock recorder for MockMeshEventWatcher.
type MockMeshEventWatcherMockRecorder struct {
	mock *MockMeshEventWatcher
}

// NewMockMeshEventWatcher creates a new mock instance.
func NewMockMeshEventWatcher(ctrl *gomock.Controller) *MockMeshEventWatcher {
	mock := &MockMeshEventWatcher{ctrl: ctrl}
	mock.recorder = &MockMeshEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshEventWatcher) EXPECT() *MockMeshEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockMeshEventWatcher) AddEventHandler(ctx context.Context, h controller.MeshEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockMeshEventWatcherMockRecorder) AddEventHandler(ctx, h any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockMeshEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockDiscoveredCNIEventHandler is a mock of DiscoveredCNIEventHandler interface.
type MockDiscoveredCNIEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredCNIEventHandlerMockRecorder
}

// MockDiscoveredCNIEventHandlerMockRecorder is the mock recorder for MockDiscoveredCNIEventHandler.
type MockDiscoveredCNIEventHandlerMockRecorder struct {
	mock *MockDiscoveredCNIEventHandler
}

// NewMockDiscoveredCNIEventHandler creates a new mock instance.
func NewMockDiscoveredCNIEventHandler(ctrl *gomock.Controller) *MockDiscoveredCNIEventHandler {
	mock := &MockDiscoveredCNIEventHandler{ctrl: ctrl}
	mock.recorder = &MockDiscoveredCNIEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredCNIEventHandler) EXPECT() *MockDiscoveredCNIEventHandlerMockRecorder {
	return m.recorder
}

// CreateDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIEventHandler) CreateDiscoveredCNI(obj *v2.DiscoveredCNI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiscoveredCNI", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDiscoveredCNI indicates an expected call of CreateDiscoveredCNI.
func (mr *MockDiscoveredCNIEventHandlerMockRecorder) CreateDiscoveredCNI(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIEventHandler)(nil).CreateDiscoveredCNI), obj)
}

// DeleteDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIEventHandler) DeleteDiscoveredCNI(obj *v2.DiscoveredCNI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDiscoveredCNI", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDiscoveredCNI indicates an expected call of DeleteDiscoveredCNI.
func (mr *MockDiscoveredCNIEventHandlerMockRecorder) DeleteDiscoveredCNI(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIEventHandler)(nil).DeleteDiscoveredCNI), obj)
}

// GenericDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIEventHandler) GenericDiscoveredCNI(obj *v2.DiscoveredCNI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericDiscoveredCNI", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericDiscoveredCNI indicates an expected call of GenericDiscoveredCNI.
func (mr *MockDiscoveredCNIEventHandlerMockRecorder) GenericDiscoveredCNI(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIEventHandler)(nil).GenericDiscoveredCNI), obj)
}

// UpdateDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIEventHandler) UpdateDiscoveredCNI(old, new *v2.DiscoveredCNI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDiscoveredCNI", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDiscoveredCNI indicates an expected call of UpdateDiscoveredCNI.
func (mr *MockDiscoveredCNIEventHandlerMockRecorder) UpdateDiscoveredCNI(old, new any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIEventHandler)(nil).UpdateDiscoveredCNI), old, new)
}

// MockDiscoveredCNIEventWatcher is a mock of DiscoveredCNIEventWatcher interface.
type MockDiscoveredCNIEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredCNIEventWatcherMockRecorder
}

// MockDiscoveredCNIEventWatcherMockRecorder is the mock recorder for MockDiscoveredCNIEventWatcher.
type MockDiscoveredCNIEventWatcherMockRecorder struct {
	mock *MockDiscoveredCNIEventWatcher
}

// NewMockDiscoveredCNIEventWatcher creates a new mock instance.
func NewMockDiscoveredCNIEventWatcher(ctrl *gomock.Controller) *MockDiscoveredCNIEventWatcher {
	mock := &MockDiscoveredCNIEventWatcher{ctrl: ctrl}
	mock.recorder = &MockDiscoveredCNIEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredCNIEventWatcher) EXPECT() *MockDiscoveredCNIEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockDiscoveredCNIEventWatcher) AddEventHandler(ctx context.Context, h controller.DiscoveredCNIEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockDiscoveredCNIEventWatcherMockRecorder) AddEventHandler(ctx, h any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockDiscoveredCNIEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockPortalConfigEventHandler is a mock of PortalConfigEventHandler interface.
type MockPortalConfigEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPortalConfigEventHandlerMockRecorder
}

// MockPortalConfigEventHandlerMockRecorder is the mock recorder for MockPortalConfigEventHandler.
type MockPortalConfigEventHandlerMockRecorder struct {
	mock *MockPortalConfigEventHandler
}

// NewMockPortalConfigEventHandler creates a new mock instance.
func NewMockPortalConfigEventHandler(ctrl *gomock.Controller) *MockPortalConfigEventHandler {
	mock := &MockPortalConfigEventHandler{ctrl: ctrl}
	mock.recorder = &MockPortalConfigEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalConfigEventHandler) EXPECT() *MockPortalConfigEventHandlerMockRecorder {
	return m.recorder
}

// CreatePortalConfig mocks base method.
func (m *MockPortalConfigEventHandler) CreatePortalConfig(obj *v2.PortalConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePortalConfig", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePortalConfig indicates an expected call of CreatePortalConfig.
func (mr *MockPortalConfigEventHandlerMockRecorder) CreatePortalConfig(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortalConfig", reflect.TypeOf((*MockPortalConfigEventHandler)(nil).CreatePortalConfig), obj)
}

// DeletePortalConfig mocks base method.
func (m *MockPortalConfigEventHandler) DeletePortalConfig(obj *v2.PortalConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePortalConfig", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePortalConfig indicates an expected call of DeletePortalConfig.
func (mr *MockPortalConfigEventHandlerMockRecorder) DeletePortalConfig(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortalConfig", reflect.TypeOf((*MockPortalConfigEventHandler)(nil).DeletePortalConfig), obj)
}

// GenericPortalConfig mocks base method.
func (m *MockPortalConfigEventHandler) GenericPortalConfig(obj *v2.PortalConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericPortalConfig", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericPortalConfig indicates an expected call of GenericPortalConfig.
func (mr *MockPortalConfigEventHandlerMockRecorder) GenericPortalConfig(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericPortalConfig", reflect.TypeOf((*MockPortalConfigEventHandler)(nil).GenericPortalConfig), obj)
}

// UpdatePortalConfig mocks base method.
func (m *MockPortalConfigEventHandler) UpdatePortalConfig(old, new *v2.PortalConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePortalConfig", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePortalConfig indicates an expected call of UpdatePortalConfig.
func (mr *MockPortalConfigEventHandlerMockRecorder) UpdatePortalConfig(old, new any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortalConfig", reflect.TypeOf((*MockPortalConfigEventHandler)(nil).UpdatePortalConfig), old, new)
}

// MockPortalConfigEventWatcher is a mock of PortalConfigEventWatcher interface.
type MockPortalConfigEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockPortalConfigEventWatcherMockRecorder
}

// MockPortalConfigEventWatcherMockRecorder is the mock recorder for MockPortalConfigEventWatcher.
type MockPortalConfigEventWatcherMockRecorder struct {
	mock *MockPortalConfigEventWatcher
}

// NewMockPortalConfigEventWatcher creates a new mock instance.
func NewMockPortalConfigEventWatcher(ctrl *gomock.Controller) *MockPortalConfigEventWatcher {
	mock := &MockPortalConfigEventWatcher{ctrl: ctrl}
	mock.recorder = &MockPortalConfigEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalConfigEventWatcher) EXPECT() *MockPortalConfigEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockPortalConfigEventWatcher) AddEventHandler(ctx context.Context, h controller.PortalConfigEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockPortalConfigEventWatcherMockRecorder) AddEventHandler(ctx, h any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockPortalConfigEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockClusterIstioInstallationEventHandler is a mock of ClusterIstioInstallationEventHandler interface.
type MockClusterIstioInstallationEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockClusterIstioInstallationEventHandlerMockRecorder
}

// MockClusterIstioInstallationEventHandlerMockRecorder is the mock recorder for MockClusterIstioInstallationEventHandler.
type MockClusterIstioInstallationEventHandlerMockRecorder struct {
	mock *MockClusterIstioInstallationEventHandler
}

// NewMockClusterIstioInstallationEventHandler creates a new mock instance.
func NewMockClusterIstioInstallationEventHandler(ctrl *gomock.Controller) *MockClusterIstioInstallationEventHandler {
	mock := &MockClusterIstioInstallationEventHandler{ctrl: ctrl}
	mock.recorder = &MockClusterIstioInstallationEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterIstioInstallationEventHandler) EXPECT() *MockClusterIstioInstallationEventHandlerMockRecorder {
	return m.recorder
}

// CreateClusterIstioInstallation mocks base method.
func (m *MockClusterIstioInstallationEventHandler) CreateClusterIstioInstallation(obj *v2.ClusterIstioInstallation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterIstioInstallation", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClusterIstioInstallation indicates an expected call of CreateClusterIstioInstallation.
func (mr *MockClusterIstioInstallationEventHandlerMockRecorder) CreateClusterIstioInstallation(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterIstioInstallation", reflect.TypeOf((*MockClusterIstioInstallationEventHandler)(nil).CreateClusterIstioInstallation), obj)
}

// DeleteClusterIstioInstallation mocks base method.
func (m *MockClusterIstioInstallationEventHandler) DeleteClusterIstioInstallation(obj *v2.ClusterIstioInstallation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterIstioInstallation", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterIstioInstallation indicates an expected call of DeleteClusterIstioInstallation.
func (mr *MockClusterIstioInstallationEventHandlerMockRecorder) DeleteClusterIstioInstallation(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterIstioInstallation", reflect.TypeOf((*MockClusterIstioInstallationEventHandler)(nil).DeleteClusterIstioInstallation), obj)
}

// GenericClusterIstioInstallation mocks base method.
func (m *MockClusterIstioInstallationEventHandler) GenericClusterIstioInstallation(obj *v2.ClusterIstioInstallation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericClusterIstioInstallation", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericClusterIstioInstallation indicates an expected call of GenericClusterIstioInstallation.
func (mr *MockClusterIstioInstallationEventHandlerMockRecorder) GenericClusterIstioInstallation(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericClusterIstioInstallation", reflect.TypeOf((*MockClusterIstioInstallationEventHandler)(nil).GenericClusterIstioInstallation), obj)
}

// UpdateClusterIstioInstallation mocks base method.
func (m *MockClusterIstioInstallationEventHandler) UpdateClusterIstioInstallation(old, new *v2.ClusterIstioInstallation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterIstioInstallation", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterIstioInstallation indicates an expected call of UpdateClusterIstioInstallation.
func (mr *MockClusterIstioInstallationEventHandlerMockRecorder) UpdateClusterIstioInstallation(old, new any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterIstioInstallation", reflect.TypeOf((*MockClusterIstioInstallationEventHandler)(nil).UpdateClusterIstioInstallation), old, new)
}

// MockClusterIstioInstallationEventWatcher is a mock of ClusterIstioInstallationEventWatcher interface.
type MockClusterIstioInstallationEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockClusterIstioInstallationEventWatcherMockRecorder
}

// MockClusterIstioInstallationEventWatcherMockRecorder is the mock recorder for MockClusterIstioInstallationEventWatcher.
type MockClusterIstioInstallationEventWatcherMockRecorder struct {
	mock *MockClusterIstioInstallationEventWatcher
}

// NewMockClusterIstioInstallationEventWatcher creates a new mock instance.
func NewMockClusterIstioInstallationEventWatcher(ctrl *gomock.Controller) *MockClusterIstioInstallationEventWatcher {
	mock := &MockClusterIstioInstallationEventWatcher{ctrl: ctrl}
	mock.recorder = &MockClusterIstioInstallationEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterIstioInstallationEventWatcher) EXPECT() *MockClusterIstioInstallationEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockClusterIstioInstallationEventWatcher) AddEventHandler(ctx context.Context, h controller.ClusterIstioInstallationEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockClusterIstioInstallationEventWatcherMockRecorder) AddEventHandler(ctx, h any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockClusterIstioInstallationEventWatcher)(nil).AddEventHandler), varargs...)
}
