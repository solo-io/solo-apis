// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"

	v2 "github.com/solo-io/solo-apis/client-go/internal.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/client-go/internal.gloo.solo.io/v2/controller"
)

// MockIssuedCertificateReconciler is a mock of IssuedCertificateReconciler interface.
type MockIssuedCertificateReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockIssuedCertificateReconcilerMockRecorder
}

// MockIssuedCertificateReconcilerMockRecorder is the mock recorder for MockIssuedCertificateReconciler.
type MockIssuedCertificateReconcilerMockRecorder struct {
	mock *MockIssuedCertificateReconciler
}

// NewMockIssuedCertificateReconciler creates a new mock instance.
func NewMockIssuedCertificateReconciler(ctrl *gomock.Controller) *MockIssuedCertificateReconciler {
	mock := &MockIssuedCertificateReconciler{ctrl: ctrl}
	mock.recorder = &MockIssuedCertificateReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuedCertificateReconciler) EXPECT() *MockIssuedCertificateReconcilerMockRecorder {
	return m.recorder
}

// ReconcileIssuedCertificate mocks base method.
func (m *MockIssuedCertificateReconciler) ReconcileIssuedCertificate(obj *v2.IssuedCertificate) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileIssuedCertificate", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileIssuedCertificate indicates an expected call of ReconcileIssuedCertificate.
func (mr *MockIssuedCertificateReconcilerMockRecorder) ReconcileIssuedCertificate(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateReconciler)(nil).ReconcileIssuedCertificate), obj)
}

// MockIssuedCertificateDeletionReconciler is a mock of IssuedCertificateDeletionReconciler interface.
type MockIssuedCertificateDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockIssuedCertificateDeletionReconcilerMockRecorder
}

// MockIssuedCertificateDeletionReconcilerMockRecorder is the mock recorder for MockIssuedCertificateDeletionReconciler.
type MockIssuedCertificateDeletionReconcilerMockRecorder struct {
	mock *MockIssuedCertificateDeletionReconciler
}

// NewMockIssuedCertificateDeletionReconciler creates a new mock instance.
func NewMockIssuedCertificateDeletionReconciler(ctrl *gomock.Controller) *MockIssuedCertificateDeletionReconciler {
	mock := &MockIssuedCertificateDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockIssuedCertificateDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuedCertificateDeletionReconciler) EXPECT() *MockIssuedCertificateDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileIssuedCertificateDeletion mocks base method.
func (m *MockIssuedCertificateDeletionReconciler) ReconcileIssuedCertificateDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileIssuedCertificateDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileIssuedCertificateDeletion indicates an expected call of ReconcileIssuedCertificateDeletion.
func (mr *MockIssuedCertificateDeletionReconcilerMockRecorder) ReconcileIssuedCertificateDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileIssuedCertificateDeletion", reflect.TypeOf((*MockIssuedCertificateDeletionReconciler)(nil).ReconcileIssuedCertificateDeletion), req)
}

// MockIssuedCertificateFinalizer is a mock of IssuedCertificateFinalizer interface.
type MockIssuedCertificateFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockIssuedCertificateFinalizerMockRecorder
}

// MockIssuedCertificateFinalizerMockRecorder is the mock recorder for MockIssuedCertificateFinalizer.
type MockIssuedCertificateFinalizerMockRecorder struct {
	mock *MockIssuedCertificateFinalizer
}

// NewMockIssuedCertificateFinalizer creates a new mock instance.
func NewMockIssuedCertificateFinalizer(ctrl *gomock.Controller) *MockIssuedCertificateFinalizer {
	mock := &MockIssuedCertificateFinalizer{ctrl: ctrl}
	mock.recorder = &MockIssuedCertificateFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuedCertificateFinalizer) EXPECT() *MockIssuedCertificateFinalizerMockRecorder {
	return m.recorder
}

// FinalizeIssuedCertificate mocks base method.
func (m *MockIssuedCertificateFinalizer) FinalizeIssuedCertificate(obj *v2.IssuedCertificate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeIssuedCertificate", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeIssuedCertificate indicates an expected call of FinalizeIssuedCertificate.
func (mr *MockIssuedCertificateFinalizerMockRecorder) FinalizeIssuedCertificate(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateFinalizer)(nil).FinalizeIssuedCertificate), obj)
}

// IssuedCertificateFinalizerName mocks base method.
func (m *MockIssuedCertificateFinalizer) IssuedCertificateFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuedCertificateFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// IssuedCertificateFinalizerName indicates an expected call of IssuedCertificateFinalizerName.
func (mr *MockIssuedCertificateFinalizerMockRecorder) IssuedCertificateFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuedCertificateFinalizerName", reflect.TypeOf((*MockIssuedCertificateFinalizer)(nil).IssuedCertificateFinalizerName))
}

// ReconcileIssuedCertificate mocks base method.
func (m *MockIssuedCertificateFinalizer) ReconcileIssuedCertificate(obj *v2.IssuedCertificate) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileIssuedCertificate", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileIssuedCertificate indicates an expected call of ReconcileIssuedCertificate.
func (mr *MockIssuedCertificateFinalizerMockRecorder) ReconcileIssuedCertificate(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateFinalizer)(nil).ReconcileIssuedCertificate), obj)
}

// MockIssuedCertificateReconcileLoop is a mock of IssuedCertificateReconcileLoop interface.
type MockIssuedCertificateReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockIssuedCertificateReconcileLoopMockRecorder
}

// MockIssuedCertificateReconcileLoopMockRecorder is the mock recorder for MockIssuedCertificateReconcileLoop.
type MockIssuedCertificateReconcileLoopMockRecorder struct {
	mock *MockIssuedCertificateReconcileLoop
}

// NewMockIssuedCertificateReconcileLoop creates a new mock instance.
func NewMockIssuedCertificateReconcileLoop(ctrl *gomock.Controller) *MockIssuedCertificateReconcileLoop {
	mock := &MockIssuedCertificateReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockIssuedCertificateReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuedCertificateReconcileLoop) EXPECT() *MockIssuedCertificateReconcileLoopMockRecorder {
	return m.recorder
}

// RunIssuedCertificateReconciler mocks base method.
func (m *MockIssuedCertificateReconcileLoop) RunIssuedCertificateReconciler(ctx context.Context, rec controller.IssuedCertificateReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunIssuedCertificateReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunIssuedCertificateReconciler indicates an expected call of RunIssuedCertificateReconciler.
func (mr *MockIssuedCertificateReconcileLoopMockRecorder) RunIssuedCertificateReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunIssuedCertificateReconciler", reflect.TypeOf((*MockIssuedCertificateReconcileLoop)(nil).RunIssuedCertificateReconciler), varargs...)
}

// MockCertificateRequestReconciler is a mock of CertificateRequestReconciler interface.
type MockCertificateRequestReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestReconcilerMockRecorder
}

// MockCertificateRequestReconcilerMockRecorder is the mock recorder for MockCertificateRequestReconciler.
type MockCertificateRequestReconcilerMockRecorder struct {
	mock *MockCertificateRequestReconciler
}

// NewMockCertificateRequestReconciler creates a new mock instance.
func NewMockCertificateRequestReconciler(ctrl *gomock.Controller) *MockCertificateRequestReconciler {
	mock := &MockCertificateRequestReconciler{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateRequestReconciler) EXPECT() *MockCertificateRequestReconcilerMockRecorder {
	return m.recorder
}

// ReconcileCertificateRequest mocks base method.
func (m *MockCertificateRequestReconciler) ReconcileCertificateRequest(obj *v2.CertificateRequest) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCertificateRequest", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileCertificateRequest indicates an expected call of ReconcileCertificateRequest.
func (mr *MockCertificateRequestReconcilerMockRecorder) ReconcileCertificateRequest(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCertificateRequest", reflect.TypeOf((*MockCertificateRequestReconciler)(nil).ReconcileCertificateRequest), obj)
}

// MockCertificateRequestDeletionReconciler is a mock of CertificateRequestDeletionReconciler interface.
type MockCertificateRequestDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestDeletionReconcilerMockRecorder
}

// MockCertificateRequestDeletionReconcilerMockRecorder is the mock recorder for MockCertificateRequestDeletionReconciler.
type MockCertificateRequestDeletionReconcilerMockRecorder struct {
	mock *MockCertificateRequestDeletionReconciler
}

// NewMockCertificateRequestDeletionReconciler creates a new mock instance.
func NewMockCertificateRequestDeletionReconciler(ctrl *gomock.Controller) *MockCertificateRequestDeletionReconciler {
	mock := &MockCertificateRequestDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateRequestDeletionReconciler) EXPECT() *MockCertificateRequestDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileCertificateRequestDeletion mocks base method.
func (m *MockCertificateRequestDeletionReconciler) ReconcileCertificateRequestDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCertificateRequestDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileCertificateRequestDeletion indicates an expected call of ReconcileCertificateRequestDeletion.
func (mr *MockCertificateRequestDeletionReconcilerMockRecorder) ReconcileCertificateRequestDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCertificateRequestDeletion", reflect.TypeOf((*MockCertificateRequestDeletionReconciler)(nil).ReconcileCertificateRequestDeletion), req)
}

// MockCertificateRequestFinalizer is a mock of CertificateRequestFinalizer interface.
type MockCertificateRequestFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestFinalizerMockRecorder
}

// MockCertificateRequestFinalizerMockRecorder is the mock recorder for MockCertificateRequestFinalizer.
type MockCertificateRequestFinalizerMockRecorder struct {
	mock *MockCertificateRequestFinalizer
}

// NewMockCertificateRequestFinalizer creates a new mock instance.
func NewMockCertificateRequestFinalizer(ctrl *gomock.Controller) *MockCertificateRequestFinalizer {
	mock := &MockCertificateRequestFinalizer{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateRequestFinalizer) EXPECT() *MockCertificateRequestFinalizerMockRecorder {
	return m.recorder
}

// CertificateRequestFinalizerName mocks base method.
func (m *MockCertificateRequestFinalizer) CertificateRequestFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificateRequestFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// CertificateRequestFinalizerName indicates an expected call of CertificateRequestFinalizerName.
func (mr *MockCertificateRequestFinalizerMockRecorder) CertificateRequestFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificateRequestFinalizerName", reflect.TypeOf((*MockCertificateRequestFinalizer)(nil).CertificateRequestFinalizerName))
}

// FinalizeCertificateRequest mocks base method.
func (m *MockCertificateRequestFinalizer) FinalizeCertificateRequest(obj *v2.CertificateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeCertificateRequest", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeCertificateRequest indicates an expected call of FinalizeCertificateRequest.
func (mr *MockCertificateRequestFinalizerMockRecorder) FinalizeCertificateRequest(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeCertificateRequest", reflect.TypeOf((*MockCertificateRequestFinalizer)(nil).FinalizeCertificateRequest), obj)
}

// ReconcileCertificateRequest mocks base method.
func (m *MockCertificateRequestFinalizer) ReconcileCertificateRequest(obj *v2.CertificateRequest) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCertificateRequest", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileCertificateRequest indicates an expected call of ReconcileCertificateRequest.
func (mr *MockCertificateRequestFinalizerMockRecorder) ReconcileCertificateRequest(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCertificateRequest", reflect.TypeOf((*MockCertificateRequestFinalizer)(nil).ReconcileCertificateRequest), obj)
}

// MockCertificateRequestReconcileLoop is a mock of CertificateRequestReconcileLoop interface.
type MockCertificateRequestReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestReconcileLoopMockRecorder
}

// MockCertificateRequestReconcileLoopMockRecorder is the mock recorder for MockCertificateRequestReconcileLoop.
type MockCertificateRequestReconcileLoopMockRecorder struct {
	mock *MockCertificateRequestReconcileLoop
}

// NewMockCertificateRequestReconcileLoop creates a new mock instance.
func NewMockCertificateRequestReconcileLoop(ctrl *gomock.Controller) *MockCertificateRequestReconcileLoop {
	mock := &MockCertificateRequestReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateRequestReconcileLoop) EXPECT() *MockCertificateRequestReconcileLoopMockRecorder {
	return m.recorder
}

// RunCertificateRequestReconciler mocks base method.
func (m *MockCertificateRequestReconcileLoop) RunCertificateRequestReconciler(ctx context.Context, rec controller.CertificateRequestReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunCertificateRequestReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCertificateRequestReconciler indicates an expected call of RunCertificateRequestReconciler.
func (mr *MockCertificateRequestReconcileLoopMockRecorder) RunCertificateRequestReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCertificateRequestReconciler", reflect.TypeOf((*MockCertificateRequestReconcileLoop)(nil).RunCertificateRequestReconciler), varargs...)
}

// MockPodBounceDirectiveReconciler is a mock of PodBounceDirectiveReconciler interface.
type MockPodBounceDirectiveReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockPodBounceDirectiveReconcilerMockRecorder
}

// MockPodBounceDirectiveReconcilerMockRecorder is the mock recorder for MockPodBounceDirectiveReconciler.
type MockPodBounceDirectiveReconcilerMockRecorder struct {
	mock *MockPodBounceDirectiveReconciler
}

// NewMockPodBounceDirectiveReconciler creates a new mock instance.
func NewMockPodBounceDirectiveReconciler(ctrl *gomock.Controller) *MockPodBounceDirectiveReconciler {
	mock := &MockPodBounceDirectiveReconciler{ctrl: ctrl}
	mock.recorder = &MockPodBounceDirectiveReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodBounceDirectiveReconciler) EXPECT() *MockPodBounceDirectiveReconcilerMockRecorder {
	return m.recorder
}

// ReconcilePodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveReconciler) ReconcilePodBounceDirective(obj *v2.PodBounceDirective) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePodBounceDirective", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcilePodBounceDirective indicates an expected call of ReconcilePodBounceDirective.
func (mr *MockPodBounceDirectiveReconcilerMockRecorder) ReconcilePodBounceDirective(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveReconciler)(nil).ReconcilePodBounceDirective), obj)
}

// MockPodBounceDirectiveDeletionReconciler is a mock of PodBounceDirectiveDeletionReconciler interface.
type MockPodBounceDirectiveDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockPodBounceDirectiveDeletionReconcilerMockRecorder
}

// MockPodBounceDirectiveDeletionReconcilerMockRecorder is the mock recorder for MockPodBounceDirectiveDeletionReconciler.
type MockPodBounceDirectiveDeletionReconcilerMockRecorder struct {
	mock *MockPodBounceDirectiveDeletionReconciler
}

// NewMockPodBounceDirectiveDeletionReconciler creates a new mock instance.
func NewMockPodBounceDirectiveDeletionReconciler(ctrl *gomock.Controller) *MockPodBounceDirectiveDeletionReconciler {
	mock := &MockPodBounceDirectiveDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockPodBounceDirectiveDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodBounceDirectiveDeletionReconciler) EXPECT() *MockPodBounceDirectiveDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcilePodBounceDirectiveDeletion mocks base method.
func (m *MockPodBounceDirectiveDeletionReconciler) ReconcilePodBounceDirectiveDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePodBounceDirectiveDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcilePodBounceDirectiveDeletion indicates an expected call of ReconcilePodBounceDirectiveDeletion.
func (mr *MockPodBounceDirectiveDeletionReconcilerMockRecorder) ReconcilePodBounceDirectiveDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePodBounceDirectiveDeletion", reflect.TypeOf((*MockPodBounceDirectiveDeletionReconciler)(nil).ReconcilePodBounceDirectiveDeletion), req)
}

// MockPodBounceDirectiveFinalizer is a mock of PodBounceDirectiveFinalizer interface.
type MockPodBounceDirectiveFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockPodBounceDirectiveFinalizerMockRecorder
}

// MockPodBounceDirectiveFinalizerMockRecorder is the mock recorder for MockPodBounceDirectiveFinalizer.
type MockPodBounceDirectiveFinalizerMockRecorder struct {
	mock *MockPodBounceDirectiveFinalizer
}

// NewMockPodBounceDirectiveFinalizer creates a new mock instance.
func NewMockPodBounceDirectiveFinalizer(ctrl *gomock.Controller) *MockPodBounceDirectiveFinalizer {
	mock := &MockPodBounceDirectiveFinalizer{ctrl: ctrl}
	mock.recorder = &MockPodBounceDirectiveFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodBounceDirectiveFinalizer) EXPECT() *MockPodBounceDirectiveFinalizerMockRecorder {
	return m.recorder
}

// FinalizePodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveFinalizer) FinalizePodBounceDirective(obj *v2.PodBounceDirective) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizePodBounceDirective", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizePodBounceDirective indicates an expected call of FinalizePodBounceDirective.
func (mr *MockPodBounceDirectiveFinalizerMockRecorder) FinalizePodBounceDirective(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizePodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveFinalizer)(nil).FinalizePodBounceDirective), obj)
}

// PodBounceDirectiveFinalizerName mocks base method.
func (m *MockPodBounceDirectiveFinalizer) PodBounceDirectiveFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodBounceDirectiveFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// PodBounceDirectiveFinalizerName indicates an expected call of PodBounceDirectiveFinalizerName.
func (mr *MockPodBounceDirectiveFinalizerMockRecorder) PodBounceDirectiveFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodBounceDirectiveFinalizerName", reflect.TypeOf((*MockPodBounceDirectiveFinalizer)(nil).PodBounceDirectiveFinalizerName))
}

// ReconcilePodBounceDirective mocks base method.
func (m *MockPodBounceDirectiveFinalizer) ReconcilePodBounceDirective(obj *v2.PodBounceDirective) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePodBounceDirective", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcilePodBounceDirective indicates an expected call of ReconcilePodBounceDirective.
func (mr *MockPodBounceDirectiveFinalizerMockRecorder) ReconcilePodBounceDirective(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePodBounceDirective", reflect.TypeOf((*MockPodBounceDirectiveFinalizer)(nil).ReconcilePodBounceDirective), obj)
}

// MockPodBounceDirectiveReconcileLoop is a mock of PodBounceDirectiveReconcileLoop interface.
type MockPodBounceDirectiveReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockPodBounceDirectiveReconcileLoopMockRecorder
}

// MockPodBounceDirectiveReconcileLoopMockRecorder is the mock recorder for MockPodBounceDirectiveReconcileLoop.
type MockPodBounceDirectiveReconcileLoopMockRecorder struct {
	mock *MockPodBounceDirectiveReconcileLoop
}

// NewMockPodBounceDirectiveReconcileLoop creates a new mock instance.
func NewMockPodBounceDirectiveReconcileLoop(ctrl *gomock.Controller) *MockPodBounceDirectiveReconcileLoop {
	mock := &MockPodBounceDirectiveReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockPodBounceDirectiveReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodBounceDirectiveReconcileLoop) EXPECT() *MockPodBounceDirectiveReconcileLoopMockRecorder {
	return m.recorder
}

// RunPodBounceDirectiveReconciler mocks base method.
func (m *MockPodBounceDirectiveReconcileLoop) RunPodBounceDirectiveReconciler(ctx context.Context, rec controller.PodBounceDirectiveReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunPodBounceDirectiveReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunPodBounceDirectiveReconciler indicates an expected call of RunPodBounceDirectiveReconciler.
func (mr *MockPodBounceDirectiveReconcileLoopMockRecorder) RunPodBounceDirectiveReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPodBounceDirectiveReconciler", reflect.TypeOf((*MockPodBounceDirectiveReconcileLoop)(nil).RunPodBounceDirectiveReconciler), varargs...)
}

// MockXdsConfigReconciler is a mock of XdsConfigReconciler interface.
type MockXdsConfigReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockXdsConfigReconcilerMockRecorder
}

// MockXdsConfigReconcilerMockRecorder is the mock recorder for MockXdsConfigReconciler.
type MockXdsConfigReconcilerMockRecorder struct {
	mock *MockXdsConfigReconciler
}

// NewMockXdsConfigReconciler creates a new mock instance.
func NewMockXdsConfigReconciler(ctrl *gomock.Controller) *MockXdsConfigReconciler {
	mock := &MockXdsConfigReconciler{ctrl: ctrl}
	mock.recorder = &MockXdsConfigReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXdsConfigReconciler) EXPECT() *MockXdsConfigReconcilerMockRecorder {
	return m.recorder
}

// ReconcileXdsConfig mocks base method.
func (m *MockXdsConfigReconciler) ReconcileXdsConfig(obj *v2.XdsConfig) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileXdsConfig", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileXdsConfig indicates an expected call of ReconcileXdsConfig.
func (mr *MockXdsConfigReconcilerMockRecorder) ReconcileXdsConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileXdsConfig", reflect.TypeOf((*MockXdsConfigReconciler)(nil).ReconcileXdsConfig), obj)
}

// MockXdsConfigDeletionReconciler is a mock of XdsConfigDeletionReconciler interface.
type MockXdsConfigDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockXdsConfigDeletionReconcilerMockRecorder
}

// MockXdsConfigDeletionReconcilerMockRecorder is the mock recorder for MockXdsConfigDeletionReconciler.
type MockXdsConfigDeletionReconcilerMockRecorder struct {
	mock *MockXdsConfigDeletionReconciler
}

// NewMockXdsConfigDeletionReconciler creates a new mock instance.
func NewMockXdsConfigDeletionReconciler(ctrl *gomock.Controller) *MockXdsConfigDeletionReconciler {
	mock := &MockXdsConfigDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockXdsConfigDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXdsConfigDeletionReconciler) EXPECT() *MockXdsConfigDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileXdsConfigDeletion mocks base method.
func (m *MockXdsConfigDeletionReconciler) ReconcileXdsConfigDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileXdsConfigDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileXdsConfigDeletion indicates an expected call of ReconcileXdsConfigDeletion.
func (mr *MockXdsConfigDeletionReconcilerMockRecorder) ReconcileXdsConfigDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileXdsConfigDeletion", reflect.TypeOf((*MockXdsConfigDeletionReconciler)(nil).ReconcileXdsConfigDeletion), req)
}

// MockXdsConfigFinalizer is a mock of XdsConfigFinalizer interface.
type MockXdsConfigFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockXdsConfigFinalizerMockRecorder
}

// MockXdsConfigFinalizerMockRecorder is the mock recorder for MockXdsConfigFinalizer.
type MockXdsConfigFinalizerMockRecorder struct {
	mock *MockXdsConfigFinalizer
}

// NewMockXdsConfigFinalizer creates a new mock instance.
func NewMockXdsConfigFinalizer(ctrl *gomock.Controller) *MockXdsConfigFinalizer {
	mock := &MockXdsConfigFinalizer{ctrl: ctrl}
	mock.recorder = &MockXdsConfigFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXdsConfigFinalizer) EXPECT() *MockXdsConfigFinalizerMockRecorder {
	return m.recorder
}

// FinalizeXdsConfig mocks base method.
func (m *MockXdsConfigFinalizer) FinalizeXdsConfig(obj *v2.XdsConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeXdsConfig", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeXdsConfig indicates an expected call of FinalizeXdsConfig.
func (mr *MockXdsConfigFinalizerMockRecorder) FinalizeXdsConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeXdsConfig", reflect.TypeOf((*MockXdsConfigFinalizer)(nil).FinalizeXdsConfig), obj)
}

// ReconcileXdsConfig mocks base method.
func (m *MockXdsConfigFinalizer) ReconcileXdsConfig(obj *v2.XdsConfig) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileXdsConfig", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileXdsConfig indicates an expected call of ReconcileXdsConfig.
func (mr *MockXdsConfigFinalizerMockRecorder) ReconcileXdsConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileXdsConfig", reflect.TypeOf((*MockXdsConfigFinalizer)(nil).ReconcileXdsConfig), obj)
}

// XdsConfigFinalizerName mocks base method.
func (m *MockXdsConfigFinalizer) XdsConfigFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XdsConfigFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// XdsConfigFinalizerName indicates an expected call of XdsConfigFinalizerName.
func (mr *MockXdsConfigFinalizerMockRecorder) XdsConfigFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XdsConfigFinalizerName", reflect.TypeOf((*MockXdsConfigFinalizer)(nil).XdsConfigFinalizerName))
}

// MockXdsConfigReconcileLoop is a mock of XdsConfigReconcileLoop interface.
type MockXdsConfigReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockXdsConfigReconcileLoopMockRecorder
}

// MockXdsConfigReconcileLoopMockRecorder is the mock recorder for MockXdsConfigReconcileLoop.
type MockXdsConfigReconcileLoopMockRecorder struct {
	mock *MockXdsConfigReconcileLoop
}

// NewMockXdsConfigReconcileLoop creates a new mock instance.
func NewMockXdsConfigReconcileLoop(ctrl *gomock.Controller) *MockXdsConfigReconcileLoop {
	mock := &MockXdsConfigReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockXdsConfigReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXdsConfigReconcileLoop) EXPECT() *MockXdsConfigReconcileLoopMockRecorder {
	return m.recorder
}

// RunXdsConfigReconciler mocks base method.
func (m *MockXdsConfigReconcileLoop) RunXdsConfigReconciler(ctx context.Context, rec controller.XdsConfigReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunXdsConfigReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunXdsConfigReconciler indicates an expected call of RunXdsConfigReconciler.
func (mr *MockXdsConfigReconcileLoopMockRecorder) RunXdsConfigReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunXdsConfigReconciler", reflect.TypeOf((*MockXdsConfigReconcileLoop)(nil).RunXdsConfigReconciler), varargs...)
}

// MockDiscoveredGatewayReconciler is a mock of DiscoveredGatewayReconciler interface.
type MockDiscoveredGatewayReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredGatewayReconcilerMockRecorder
}

// MockDiscoveredGatewayReconcilerMockRecorder is the mock recorder for MockDiscoveredGatewayReconciler.
type MockDiscoveredGatewayReconcilerMockRecorder struct {
	mock *MockDiscoveredGatewayReconciler
}

// NewMockDiscoveredGatewayReconciler creates a new mock instance.
func NewMockDiscoveredGatewayReconciler(ctrl *gomock.Controller) *MockDiscoveredGatewayReconciler {
	mock := &MockDiscoveredGatewayReconciler{ctrl: ctrl}
	mock.recorder = &MockDiscoveredGatewayReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredGatewayReconciler) EXPECT() *MockDiscoveredGatewayReconcilerMockRecorder {
	return m.recorder
}

// ReconcileDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayReconciler) ReconcileDiscoveredGateway(obj *v2.DiscoveredGateway) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDiscoveredGateway", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileDiscoveredGateway indicates an expected call of ReconcileDiscoveredGateway.
func (mr *MockDiscoveredGatewayReconcilerMockRecorder) ReconcileDiscoveredGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayReconciler)(nil).ReconcileDiscoveredGateway), obj)
}

// MockDiscoveredGatewayDeletionReconciler is a mock of DiscoveredGatewayDeletionReconciler interface.
type MockDiscoveredGatewayDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredGatewayDeletionReconcilerMockRecorder
}

// MockDiscoveredGatewayDeletionReconcilerMockRecorder is the mock recorder for MockDiscoveredGatewayDeletionReconciler.
type MockDiscoveredGatewayDeletionReconcilerMockRecorder struct {
	mock *MockDiscoveredGatewayDeletionReconciler
}

// NewMockDiscoveredGatewayDeletionReconciler creates a new mock instance.
func NewMockDiscoveredGatewayDeletionReconciler(ctrl *gomock.Controller) *MockDiscoveredGatewayDeletionReconciler {
	mock := &MockDiscoveredGatewayDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockDiscoveredGatewayDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredGatewayDeletionReconciler) EXPECT() *MockDiscoveredGatewayDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileDiscoveredGatewayDeletion mocks base method.
func (m *MockDiscoveredGatewayDeletionReconciler) ReconcileDiscoveredGatewayDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDiscoveredGatewayDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileDiscoveredGatewayDeletion indicates an expected call of ReconcileDiscoveredGatewayDeletion.
func (mr *MockDiscoveredGatewayDeletionReconcilerMockRecorder) ReconcileDiscoveredGatewayDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDiscoveredGatewayDeletion", reflect.TypeOf((*MockDiscoveredGatewayDeletionReconciler)(nil).ReconcileDiscoveredGatewayDeletion), req)
}

// MockDiscoveredGatewayFinalizer is a mock of DiscoveredGatewayFinalizer interface.
type MockDiscoveredGatewayFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredGatewayFinalizerMockRecorder
}

// MockDiscoveredGatewayFinalizerMockRecorder is the mock recorder for MockDiscoveredGatewayFinalizer.
type MockDiscoveredGatewayFinalizerMockRecorder struct {
	mock *MockDiscoveredGatewayFinalizer
}

// NewMockDiscoveredGatewayFinalizer creates a new mock instance.
func NewMockDiscoveredGatewayFinalizer(ctrl *gomock.Controller) *MockDiscoveredGatewayFinalizer {
	mock := &MockDiscoveredGatewayFinalizer{ctrl: ctrl}
	mock.recorder = &MockDiscoveredGatewayFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredGatewayFinalizer) EXPECT() *MockDiscoveredGatewayFinalizerMockRecorder {
	return m.recorder
}

// DiscoveredGatewayFinalizerName mocks base method.
func (m *MockDiscoveredGatewayFinalizer) DiscoveredGatewayFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoveredGatewayFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DiscoveredGatewayFinalizerName indicates an expected call of DiscoveredGatewayFinalizerName.
func (mr *MockDiscoveredGatewayFinalizerMockRecorder) DiscoveredGatewayFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoveredGatewayFinalizerName", reflect.TypeOf((*MockDiscoveredGatewayFinalizer)(nil).DiscoveredGatewayFinalizerName))
}

// FinalizeDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayFinalizer) FinalizeDiscoveredGateway(obj *v2.DiscoveredGateway) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeDiscoveredGateway", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeDiscoveredGateway indicates an expected call of FinalizeDiscoveredGateway.
func (mr *MockDiscoveredGatewayFinalizerMockRecorder) FinalizeDiscoveredGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayFinalizer)(nil).FinalizeDiscoveredGateway), obj)
}

// ReconcileDiscoveredGateway mocks base method.
func (m *MockDiscoveredGatewayFinalizer) ReconcileDiscoveredGateway(obj *v2.DiscoveredGateway) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDiscoveredGateway", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileDiscoveredGateway indicates an expected call of ReconcileDiscoveredGateway.
func (mr *MockDiscoveredGatewayFinalizerMockRecorder) ReconcileDiscoveredGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDiscoveredGateway", reflect.TypeOf((*MockDiscoveredGatewayFinalizer)(nil).ReconcileDiscoveredGateway), obj)
}

// MockDiscoveredGatewayReconcileLoop is a mock of DiscoveredGatewayReconcileLoop interface.
type MockDiscoveredGatewayReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredGatewayReconcileLoopMockRecorder
}

// MockDiscoveredGatewayReconcileLoopMockRecorder is the mock recorder for MockDiscoveredGatewayReconcileLoop.
type MockDiscoveredGatewayReconcileLoopMockRecorder struct {
	mock *MockDiscoveredGatewayReconcileLoop
}

// NewMockDiscoveredGatewayReconcileLoop creates a new mock instance.
func NewMockDiscoveredGatewayReconcileLoop(ctrl *gomock.Controller) *MockDiscoveredGatewayReconcileLoop {
	mock := &MockDiscoveredGatewayReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockDiscoveredGatewayReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredGatewayReconcileLoop) EXPECT() *MockDiscoveredGatewayReconcileLoopMockRecorder {
	return m.recorder
}

// RunDiscoveredGatewayReconciler mocks base method.
func (m *MockDiscoveredGatewayReconcileLoop) RunDiscoveredGatewayReconciler(ctx context.Context, rec controller.DiscoveredGatewayReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunDiscoveredGatewayReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunDiscoveredGatewayReconciler indicates an expected call of RunDiscoveredGatewayReconciler.
func (mr *MockDiscoveredGatewayReconcileLoopMockRecorder) RunDiscoveredGatewayReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunDiscoveredGatewayReconciler", reflect.TypeOf((*MockDiscoveredGatewayReconcileLoop)(nil).RunDiscoveredGatewayReconciler), varargs...)
}

// MockMeshReconciler is a mock of MeshReconciler interface.
type MockMeshReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMeshReconcilerMockRecorder
}

// MockMeshReconcilerMockRecorder is the mock recorder for MockMeshReconciler.
type MockMeshReconcilerMockRecorder struct {
	mock *MockMeshReconciler
}

// NewMockMeshReconciler creates a new mock instance.
func NewMockMeshReconciler(ctrl *gomock.Controller) *MockMeshReconciler {
	mock := &MockMeshReconciler{ctrl: ctrl}
	mock.recorder = &MockMeshReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshReconciler) EXPECT() *MockMeshReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMesh mocks base method.
func (m *MockMeshReconciler) ReconcileMesh(obj *v2.Mesh) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMesh", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileMesh indicates an expected call of ReconcileMesh.
func (mr *MockMeshReconcilerMockRecorder) ReconcileMesh(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMesh", reflect.TypeOf((*MockMeshReconciler)(nil).ReconcileMesh), obj)
}

// MockMeshDeletionReconciler is a mock of MeshDeletionReconciler interface.
type MockMeshDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMeshDeletionReconcilerMockRecorder
}

// MockMeshDeletionReconcilerMockRecorder is the mock recorder for MockMeshDeletionReconciler.
type MockMeshDeletionReconcilerMockRecorder struct {
	mock *MockMeshDeletionReconciler
}

// NewMockMeshDeletionReconciler creates a new mock instance.
func NewMockMeshDeletionReconciler(ctrl *gomock.Controller) *MockMeshDeletionReconciler {
	mock := &MockMeshDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMeshDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshDeletionReconciler) EXPECT() *MockMeshDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMeshDeletion mocks base method.
func (m *MockMeshDeletionReconciler) ReconcileMeshDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMeshDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileMeshDeletion indicates an expected call of ReconcileMeshDeletion.
func (mr *MockMeshDeletionReconcilerMockRecorder) ReconcileMeshDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMeshDeletion", reflect.TypeOf((*MockMeshDeletionReconciler)(nil).ReconcileMeshDeletion), req)
}

// MockMeshFinalizer is a mock of MeshFinalizer interface.
type MockMeshFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockMeshFinalizerMockRecorder
}

// MockMeshFinalizerMockRecorder is the mock recorder for MockMeshFinalizer.
type MockMeshFinalizerMockRecorder struct {
	mock *MockMeshFinalizer
}

// NewMockMeshFinalizer creates a new mock instance.
func NewMockMeshFinalizer(ctrl *gomock.Controller) *MockMeshFinalizer {
	mock := &MockMeshFinalizer{ctrl: ctrl}
	mock.recorder = &MockMeshFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshFinalizer) EXPECT() *MockMeshFinalizerMockRecorder {
	return m.recorder
}

// FinalizeMesh mocks base method.
func (m *MockMeshFinalizer) FinalizeMesh(obj *v2.Mesh) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeMesh", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeMesh indicates an expected call of FinalizeMesh.
func (mr *MockMeshFinalizerMockRecorder) FinalizeMesh(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeMesh", reflect.TypeOf((*MockMeshFinalizer)(nil).FinalizeMesh), obj)
}

// MeshFinalizerName mocks base method.
func (m *MockMeshFinalizer) MeshFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeshFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// MeshFinalizerName indicates an expected call of MeshFinalizerName.
func (mr *MockMeshFinalizerMockRecorder) MeshFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeshFinalizerName", reflect.TypeOf((*MockMeshFinalizer)(nil).MeshFinalizerName))
}

// ReconcileMesh mocks base method.
func (m *MockMeshFinalizer) ReconcileMesh(obj *v2.Mesh) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMesh", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileMesh indicates an expected call of ReconcileMesh.
func (mr *MockMeshFinalizerMockRecorder) ReconcileMesh(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMesh", reflect.TypeOf((*MockMeshFinalizer)(nil).ReconcileMesh), obj)
}

// MockMeshReconcileLoop is a mock of MeshReconcileLoop interface.
type MockMeshReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMeshReconcileLoopMockRecorder
}

// MockMeshReconcileLoopMockRecorder is the mock recorder for MockMeshReconcileLoop.
type MockMeshReconcileLoopMockRecorder struct {
	mock *MockMeshReconcileLoop
}

// NewMockMeshReconcileLoop creates a new mock instance.
func NewMockMeshReconcileLoop(ctrl *gomock.Controller) *MockMeshReconcileLoop {
	mock := &MockMeshReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMeshReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshReconcileLoop) EXPECT() *MockMeshReconcileLoopMockRecorder {
	return m.recorder
}

// RunMeshReconciler mocks base method.
func (m *MockMeshReconcileLoop) RunMeshReconciler(ctx context.Context, rec controller.MeshReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunMeshReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunMeshReconciler indicates an expected call of RunMeshReconciler.
func (mr *MockMeshReconcileLoopMockRecorder) RunMeshReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunMeshReconciler", reflect.TypeOf((*MockMeshReconcileLoop)(nil).RunMeshReconciler), varargs...)
}

// MockDiscoveredCNIReconciler is a mock of DiscoveredCNIReconciler interface.
type MockDiscoveredCNIReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredCNIReconcilerMockRecorder
}

// MockDiscoveredCNIReconcilerMockRecorder is the mock recorder for MockDiscoveredCNIReconciler.
type MockDiscoveredCNIReconcilerMockRecorder struct {
	mock *MockDiscoveredCNIReconciler
}

// NewMockDiscoveredCNIReconciler creates a new mock instance.
func NewMockDiscoveredCNIReconciler(ctrl *gomock.Controller) *MockDiscoveredCNIReconciler {
	mock := &MockDiscoveredCNIReconciler{ctrl: ctrl}
	mock.recorder = &MockDiscoveredCNIReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredCNIReconciler) EXPECT() *MockDiscoveredCNIReconcilerMockRecorder {
	return m.recorder
}

// ReconcileDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIReconciler) ReconcileDiscoveredCNI(obj *v2.DiscoveredCNI) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDiscoveredCNI", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileDiscoveredCNI indicates an expected call of ReconcileDiscoveredCNI.
func (mr *MockDiscoveredCNIReconcilerMockRecorder) ReconcileDiscoveredCNI(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIReconciler)(nil).ReconcileDiscoveredCNI), obj)
}

// MockDiscoveredCNIDeletionReconciler is a mock of DiscoveredCNIDeletionReconciler interface.
type MockDiscoveredCNIDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredCNIDeletionReconcilerMockRecorder
}

// MockDiscoveredCNIDeletionReconcilerMockRecorder is the mock recorder for MockDiscoveredCNIDeletionReconciler.
type MockDiscoveredCNIDeletionReconcilerMockRecorder struct {
	mock *MockDiscoveredCNIDeletionReconciler
}

// NewMockDiscoveredCNIDeletionReconciler creates a new mock instance.
func NewMockDiscoveredCNIDeletionReconciler(ctrl *gomock.Controller) *MockDiscoveredCNIDeletionReconciler {
	mock := &MockDiscoveredCNIDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockDiscoveredCNIDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredCNIDeletionReconciler) EXPECT() *MockDiscoveredCNIDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileDiscoveredCNIDeletion mocks base method.
func (m *MockDiscoveredCNIDeletionReconciler) ReconcileDiscoveredCNIDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDiscoveredCNIDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileDiscoveredCNIDeletion indicates an expected call of ReconcileDiscoveredCNIDeletion.
func (mr *MockDiscoveredCNIDeletionReconcilerMockRecorder) ReconcileDiscoveredCNIDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDiscoveredCNIDeletion", reflect.TypeOf((*MockDiscoveredCNIDeletionReconciler)(nil).ReconcileDiscoveredCNIDeletion), req)
}

// MockDiscoveredCNIFinalizer is a mock of DiscoveredCNIFinalizer interface.
type MockDiscoveredCNIFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredCNIFinalizerMockRecorder
}

// MockDiscoveredCNIFinalizerMockRecorder is the mock recorder for MockDiscoveredCNIFinalizer.
type MockDiscoveredCNIFinalizerMockRecorder struct {
	mock *MockDiscoveredCNIFinalizer
}

// NewMockDiscoveredCNIFinalizer creates a new mock instance.
func NewMockDiscoveredCNIFinalizer(ctrl *gomock.Controller) *MockDiscoveredCNIFinalizer {
	mock := &MockDiscoveredCNIFinalizer{ctrl: ctrl}
	mock.recorder = &MockDiscoveredCNIFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredCNIFinalizer) EXPECT() *MockDiscoveredCNIFinalizerMockRecorder {
	return m.recorder
}

// DiscoveredCNIFinalizerName mocks base method.
func (m *MockDiscoveredCNIFinalizer) DiscoveredCNIFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoveredCNIFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DiscoveredCNIFinalizerName indicates an expected call of DiscoveredCNIFinalizerName.
func (mr *MockDiscoveredCNIFinalizerMockRecorder) DiscoveredCNIFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoveredCNIFinalizerName", reflect.TypeOf((*MockDiscoveredCNIFinalizer)(nil).DiscoveredCNIFinalizerName))
}

// FinalizeDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIFinalizer) FinalizeDiscoveredCNI(obj *v2.DiscoveredCNI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeDiscoveredCNI", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeDiscoveredCNI indicates an expected call of FinalizeDiscoveredCNI.
func (mr *MockDiscoveredCNIFinalizerMockRecorder) FinalizeDiscoveredCNI(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIFinalizer)(nil).FinalizeDiscoveredCNI), obj)
}

// ReconcileDiscoveredCNI mocks base method.
func (m *MockDiscoveredCNIFinalizer) ReconcileDiscoveredCNI(obj *v2.DiscoveredCNI) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDiscoveredCNI", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileDiscoveredCNI indicates an expected call of ReconcileDiscoveredCNI.
func (mr *MockDiscoveredCNIFinalizerMockRecorder) ReconcileDiscoveredCNI(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDiscoveredCNI", reflect.TypeOf((*MockDiscoveredCNIFinalizer)(nil).ReconcileDiscoveredCNI), obj)
}

// MockDiscoveredCNIReconcileLoop is a mock of DiscoveredCNIReconcileLoop interface.
type MockDiscoveredCNIReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveredCNIReconcileLoopMockRecorder
}

// MockDiscoveredCNIReconcileLoopMockRecorder is the mock recorder for MockDiscoveredCNIReconcileLoop.
type MockDiscoveredCNIReconcileLoopMockRecorder struct {
	mock *MockDiscoveredCNIReconcileLoop
}

// NewMockDiscoveredCNIReconcileLoop creates a new mock instance.
func NewMockDiscoveredCNIReconcileLoop(ctrl *gomock.Controller) *MockDiscoveredCNIReconcileLoop {
	mock := &MockDiscoveredCNIReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockDiscoveredCNIReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveredCNIReconcileLoop) EXPECT() *MockDiscoveredCNIReconcileLoopMockRecorder {
	return m.recorder
}

// RunDiscoveredCNIReconciler mocks base method.
func (m *MockDiscoveredCNIReconcileLoop) RunDiscoveredCNIReconciler(ctx context.Context, rec controller.DiscoveredCNIReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunDiscoveredCNIReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunDiscoveredCNIReconciler indicates an expected call of RunDiscoveredCNIReconciler.
func (mr *MockDiscoveredCNIReconcileLoopMockRecorder) RunDiscoveredCNIReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunDiscoveredCNIReconciler", reflect.TypeOf((*MockDiscoveredCNIReconcileLoop)(nil).RunDiscoveredCNIReconciler), varargs...)
}

// MockPortalConfigReconciler is a mock of PortalConfigReconciler interface.
type MockPortalConfigReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockPortalConfigReconcilerMockRecorder
}

// MockPortalConfigReconcilerMockRecorder is the mock recorder for MockPortalConfigReconciler.
type MockPortalConfigReconcilerMockRecorder struct {
	mock *MockPortalConfigReconciler
}

// NewMockPortalConfigReconciler creates a new mock instance.
func NewMockPortalConfigReconciler(ctrl *gomock.Controller) *MockPortalConfigReconciler {
	mock := &MockPortalConfigReconciler{ctrl: ctrl}
	mock.recorder = &MockPortalConfigReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalConfigReconciler) EXPECT() *MockPortalConfigReconcilerMockRecorder {
	return m.recorder
}

// ReconcilePortalConfig mocks base method.
func (m *MockPortalConfigReconciler) ReconcilePortalConfig(obj *v2.PortalConfig) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePortalConfig", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcilePortalConfig indicates an expected call of ReconcilePortalConfig.
func (mr *MockPortalConfigReconcilerMockRecorder) ReconcilePortalConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePortalConfig", reflect.TypeOf((*MockPortalConfigReconciler)(nil).ReconcilePortalConfig), obj)
}

// MockPortalConfigDeletionReconciler is a mock of PortalConfigDeletionReconciler interface.
type MockPortalConfigDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockPortalConfigDeletionReconcilerMockRecorder
}

// MockPortalConfigDeletionReconcilerMockRecorder is the mock recorder for MockPortalConfigDeletionReconciler.
type MockPortalConfigDeletionReconcilerMockRecorder struct {
	mock *MockPortalConfigDeletionReconciler
}

// NewMockPortalConfigDeletionReconciler creates a new mock instance.
func NewMockPortalConfigDeletionReconciler(ctrl *gomock.Controller) *MockPortalConfigDeletionReconciler {
	mock := &MockPortalConfigDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockPortalConfigDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalConfigDeletionReconciler) EXPECT() *MockPortalConfigDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcilePortalConfigDeletion mocks base method.
func (m *MockPortalConfigDeletionReconciler) ReconcilePortalConfigDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePortalConfigDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcilePortalConfigDeletion indicates an expected call of ReconcilePortalConfigDeletion.
func (mr *MockPortalConfigDeletionReconcilerMockRecorder) ReconcilePortalConfigDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePortalConfigDeletion", reflect.TypeOf((*MockPortalConfigDeletionReconciler)(nil).ReconcilePortalConfigDeletion), req)
}

// MockPortalConfigFinalizer is a mock of PortalConfigFinalizer interface.
type MockPortalConfigFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockPortalConfigFinalizerMockRecorder
}

// MockPortalConfigFinalizerMockRecorder is the mock recorder for MockPortalConfigFinalizer.
type MockPortalConfigFinalizerMockRecorder struct {
	mock *MockPortalConfigFinalizer
}

// NewMockPortalConfigFinalizer creates a new mock instance.
func NewMockPortalConfigFinalizer(ctrl *gomock.Controller) *MockPortalConfigFinalizer {
	mock := &MockPortalConfigFinalizer{ctrl: ctrl}
	mock.recorder = &MockPortalConfigFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalConfigFinalizer) EXPECT() *MockPortalConfigFinalizerMockRecorder {
	return m.recorder
}

// FinalizePortalConfig mocks base method.
func (m *MockPortalConfigFinalizer) FinalizePortalConfig(obj *v2.PortalConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizePortalConfig", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizePortalConfig indicates an expected call of FinalizePortalConfig.
func (mr *MockPortalConfigFinalizerMockRecorder) FinalizePortalConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizePortalConfig", reflect.TypeOf((*MockPortalConfigFinalizer)(nil).FinalizePortalConfig), obj)
}

// PortalConfigFinalizerName mocks base method.
func (m *MockPortalConfigFinalizer) PortalConfigFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortalConfigFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// PortalConfigFinalizerName indicates an expected call of PortalConfigFinalizerName.
func (mr *MockPortalConfigFinalizerMockRecorder) PortalConfigFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortalConfigFinalizerName", reflect.TypeOf((*MockPortalConfigFinalizer)(nil).PortalConfigFinalizerName))
}

// ReconcilePortalConfig mocks base method.
func (m *MockPortalConfigFinalizer) ReconcilePortalConfig(obj *v2.PortalConfig) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePortalConfig", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcilePortalConfig indicates an expected call of ReconcilePortalConfig.
func (mr *MockPortalConfigFinalizerMockRecorder) ReconcilePortalConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePortalConfig", reflect.TypeOf((*MockPortalConfigFinalizer)(nil).ReconcilePortalConfig), obj)
}

// MockPortalConfigReconcileLoop is a mock of PortalConfigReconcileLoop interface.
type MockPortalConfigReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockPortalConfigReconcileLoopMockRecorder
}

// MockPortalConfigReconcileLoopMockRecorder is the mock recorder for MockPortalConfigReconcileLoop.
type MockPortalConfigReconcileLoopMockRecorder struct {
	mock *MockPortalConfigReconcileLoop
}

// NewMockPortalConfigReconcileLoop creates a new mock instance.
func NewMockPortalConfigReconcileLoop(ctrl *gomock.Controller) *MockPortalConfigReconcileLoop {
	mock := &MockPortalConfigReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockPortalConfigReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalConfigReconcileLoop) EXPECT() *MockPortalConfigReconcileLoopMockRecorder {
	return m.recorder
}

// RunPortalConfigReconciler mocks base method.
func (m *MockPortalConfigReconcileLoop) RunPortalConfigReconciler(ctx context.Context, rec controller.PortalConfigReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunPortalConfigReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunPortalConfigReconciler indicates an expected call of RunPortalConfigReconciler.
func (mr *MockPortalConfigReconcileLoopMockRecorder) RunPortalConfigReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPortalConfigReconciler", reflect.TypeOf((*MockPortalConfigReconcileLoop)(nil).RunPortalConfigReconciler), varargs...)
}
