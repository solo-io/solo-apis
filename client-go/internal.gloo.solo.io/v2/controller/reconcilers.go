// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	internal_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/internal.gloo.solo.io/v2"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the IssuedCertificate Resource.
// implemented by the user
type IssuedCertificateReconciler interface {
	ReconcileIssuedCertificate(obj *internal_gloo_solo_io_v2.IssuedCertificate) (reconcile.Result, error)
}

// Reconcile deletion events for the IssuedCertificate Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type IssuedCertificateDeletionReconciler interface {
	ReconcileIssuedCertificateDeletion(req reconcile.Request) error
}

type IssuedCertificateReconcilerFuncs struct {
	OnReconcileIssuedCertificate         func(obj *internal_gloo_solo_io_v2.IssuedCertificate) (reconcile.Result, error)
	OnReconcileIssuedCertificateDeletion func(req reconcile.Request) error
}

func (f *IssuedCertificateReconcilerFuncs) ReconcileIssuedCertificate(obj *internal_gloo_solo_io_v2.IssuedCertificate) (reconcile.Result, error) {
	if f.OnReconcileIssuedCertificate == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileIssuedCertificate(obj)
}

func (f *IssuedCertificateReconcilerFuncs) ReconcileIssuedCertificateDeletion(req reconcile.Request) error {
	if f.OnReconcileIssuedCertificateDeletion == nil {
		return nil
	}
	return f.OnReconcileIssuedCertificateDeletion(req)
}

// Reconcile and finalize the IssuedCertificate Resource
// implemented by the user
type IssuedCertificateFinalizer interface {
	IssuedCertificateReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	IssuedCertificateFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeIssuedCertificate(obj *internal_gloo_solo_io_v2.IssuedCertificate) error
}

type IssuedCertificateReconcileLoop interface {
	RunIssuedCertificateReconciler(ctx context.Context, rec IssuedCertificateReconciler, predicates ...predicate.Predicate) error
}

type issuedCertificateReconcileLoop struct {
	loop reconcile.Loop
}

func NewIssuedCertificateReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) IssuedCertificateReconcileLoop {
	return &issuedCertificateReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &internal_gloo_solo_io_v2.IssuedCertificate{}, options),
	}
}

func (c *issuedCertificateReconcileLoop) RunIssuedCertificateReconciler(ctx context.Context, reconciler IssuedCertificateReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericIssuedCertificateReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(IssuedCertificateFinalizer); ok {
		reconcilerWrapper = genericIssuedCertificateFinalizer{
			genericIssuedCertificateReconciler: genericReconciler,
			finalizingReconciler:               finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericIssuedCertificateHandler implements a generic reconcile.Reconciler
type genericIssuedCertificateReconciler struct {
	reconciler IssuedCertificateReconciler
}

func (r genericIssuedCertificateReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*internal_gloo_solo_io_v2.IssuedCertificate)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: IssuedCertificate handler received event for %T", object)
	}
	return r.reconciler.ReconcileIssuedCertificate(obj)
}

func (r genericIssuedCertificateReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(IssuedCertificateDeletionReconciler); ok {
		return deletionReconciler.ReconcileIssuedCertificateDeletion(request)
	}
	return nil
}

// genericIssuedCertificateFinalizer implements a generic reconcile.FinalizingReconciler
type genericIssuedCertificateFinalizer struct {
	genericIssuedCertificateReconciler
	finalizingReconciler IssuedCertificateFinalizer
}

func (r genericIssuedCertificateFinalizer) FinalizerName() string {
	return r.finalizingReconciler.IssuedCertificateFinalizerName()
}

func (r genericIssuedCertificateFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.IssuedCertificate)
	if !ok {
		return errors.Errorf("internal error: IssuedCertificate handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeIssuedCertificate(obj)
}

// Reconcile Upsert events for the CertificateRequest Resource.
// implemented by the user
type CertificateRequestReconciler interface {
	ReconcileCertificateRequest(obj *internal_gloo_solo_io_v2.CertificateRequest) (reconcile.Result, error)
}

// Reconcile deletion events for the CertificateRequest Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type CertificateRequestDeletionReconciler interface {
	ReconcileCertificateRequestDeletion(req reconcile.Request) error
}

type CertificateRequestReconcilerFuncs struct {
	OnReconcileCertificateRequest         func(obj *internal_gloo_solo_io_v2.CertificateRequest) (reconcile.Result, error)
	OnReconcileCertificateRequestDeletion func(req reconcile.Request) error
}

func (f *CertificateRequestReconcilerFuncs) ReconcileCertificateRequest(obj *internal_gloo_solo_io_v2.CertificateRequest) (reconcile.Result, error) {
	if f.OnReconcileCertificateRequest == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileCertificateRequest(obj)
}

func (f *CertificateRequestReconcilerFuncs) ReconcileCertificateRequestDeletion(req reconcile.Request) error {
	if f.OnReconcileCertificateRequestDeletion == nil {
		return nil
	}
	return f.OnReconcileCertificateRequestDeletion(req)
}

// Reconcile and finalize the CertificateRequest Resource
// implemented by the user
type CertificateRequestFinalizer interface {
	CertificateRequestReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	CertificateRequestFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeCertificateRequest(obj *internal_gloo_solo_io_v2.CertificateRequest) error
}

type CertificateRequestReconcileLoop interface {
	RunCertificateRequestReconciler(ctx context.Context, rec CertificateRequestReconciler, predicates ...predicate.Predicate) error
}

type certificateRequestReconcileLoop struct {
	loop reconcile.Loop
}

func NewCertificateRequestReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) CertificateRequestReconcileLoop {
	return &certificateRequestReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &internal_gloo_solo_io_v2.CertificateRequest{}, options),
	}
}

func (c *certificateRequestReconcileLoop) RunCertificateRequestReconciler(ctx context.Context, reconciler CertificateRequestReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericCertificateRequestReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(CertificateRequestFinalizer); ok {
		reconcilerWrapper = genericCertificateRequestFinalizer{
			genericCertificateRequestReconciler: genericReconciler,
			finalizingReconciler:                finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericCertificateRequestHandler implements a generic reconcile.Reconciler
type genericCertificateRequestReconciler struct {
	reconciler CertificateRequestReconciler
}

func (r genericCertificateRequestReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*internal_gloo_solo_io_v2.CertificateRequest)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: CertificateRequest handler received event for %T", object)
	}
	return r.reconciler.ReconcileCertificateRequest(obj)
}

func (r genericCertificateRequestReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(CertificateRequestDeletionReconciler); ok {
		return deletionReconciler.ReconcileCertificateRequestDeletion(request)
	}
	return nil
}

// genericCertificateRequestFinalizer implements a generic reconcile.FinalizingReconciler
type genericCertificateRequestFinalizer struct {
	genericCertificateRequestReconciler
	finalizingReconciler CertificateRequestFinalizer
}

func (r genericCertificateRequestFinalizer) FinalizerName() string {
	return r.finalizingReconciler.CertificateRequestFinalizerName()
}

func (r genericCertificateRequestFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.CertificateRequest)
	if !ok {
		return errors.Errorf("internal error: CertificateRequest handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeCertificateRequest(obj)
}

// Reconcile Upsert events for the PodBounceDirective Resource.
// implemented by the user
type PodBounceDirectiveReconciler interface {
	ReconcilePodBounceDirective(obj *internal_gloo_solo_io_v2.PodBounceDirective) (reconcile.Result, error)
}

// Reconcile deletion events for the PodBounceDirective Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type PodBounceDirectiveDeletionReconciler interface {
	ReconcilePodBounceDirectiveDeletion(req reconcile.Request) error
}

type PodBounceDirectiveReconcilerFuncs struct {
	OnReconcilePodBounceDirective         func(obj *internal_gloo_solo_io_v2.PodBounceDirective) (reconcile.Result, error)
	OnReconcilePodBounceDirectiveDeletion func(req reconcile.Request) error
}

func (f *PodBounceDirectiveReconcilerFuncs) ReconcilePodBounceDirective(obj *internal_gloo_solo_io_v2.PodBounceDirective) (reconcile.Result, error) {
	if f.OnReconcilePodBounceDirective == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcilePodBounceDirective(obj)
}

func (f *PodBounceDirectiveReconcilerFuncs) ReconcilePodBounceDirectiveDeletion(req reconcile.Request) error {
	if f.OnReconcilePodBounceDirectiveDeletion == nil {
		return nil
	}
	return f.OnReconcilePodBounceDirectiveDeletion(req)
}

// Reconcile and finalize the PodBounceDirective Resource
// implemented by the user
type PodBounceDirectiveFinalizer interface {
	PodBounceDirectiveReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	PodBounceDirectiveFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizePodBounceDirective(obj *internal_gloo_solo_io_v2.PodBounceDirective) error
}

type PodBounceDirectiveReconcileLoop interface {
	RunPodBounceDirectiveReconciler(ctx context.Context, rec PodBounceDirectiveReconciler, predicates ...predicate.Predicate) error
}

type podBounceDirectiveReconcileLoop struct {
	loop reconcile.Loop
}

func NewPodBounceDirectiveReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) PodBounceDirectiveReconcileLoop {
	return &podBounceDirectiveReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &internal_gloo_solo_io_v2.PodBounceDirective{}, options),
	}
}

func (c *podBounceDirectiveReconcileLoop) RunPodBounceDirectiveReconciler(ctx context.Context, reconciler PodBounceDirectiveReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericPodBounceDirectiveReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(PodBounceDirectiveFinalizer); ok {
		reconcilerWrapper = genericPodBounceDirectiveFinalizer{
			genericPodBounceDirectiveReconciler: genericReconciler,
			finalizingReconciler:                finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericPodBounceDirectiveHandler implements a generic reconcile.Reconciler
type genericPodBounceDirectiveReconciler struct {
	reconciler PodBounceDirectiveReconciler
}

func (r genericPodBounceDirectiveReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*internal_gloo_solo_io_v2.PodBounceDirective)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: PodBounceDirective handler received event for %T", object)
	}
	return r.reconciler.ReconcilePodBounceDirective(obj)
}

func (r genericPodBounceDirectiveReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(PodBounceDirectiveDeletionReconciler); ok {
		return deletionReconciler.ReconcilePodBounceDirectiveDeletion(request)
	}
	return nil
}

// genericPodBounceDirectiveFinalizer implements a generic reconcile.FinalizingReconciler
type genericPodBounceDirectiveFinalizer struct {
	genericPodBounceDirectiveReconciler
	finalizingReconciler PodBounceDirectiveFinalizer
}

func (r genericPodBounceDirectiveFinalizer) FinalizerName() string {
	return r.finalizingReconciler.PodBounceDirectiveFinalizerName()
}

func (r genericPodBounceDirectiveFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.PodBounceDirective)
	if !ok {
		return errors.Errorf("internal error: PodBounceDirective handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizePodBounceDirective(obj)
}

// Reconcile Upsert events for the XdsConfig Resource.
// implemented by the user
type XdsConfigReconciler interface {
	ReconcileXdsConfig(obj *internal_gloo_solo_io_v2.XdsConfig) (reconcile.Result, error)
}

// Reconcile deletion events for the XdsConfig Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type XdsConfigDeletionReconciler interface {
	ReconcileXdsConfigDeletion(req reconcile.Request) error
}

type XdsConfigReconcilerFuncs struct {
	OnReconcileXdsConfig         func(obj *internal_gloo_solo_io_v2.XdsConfig) (reconcile.Result, error)
	OnReconcileXdsConfigDeletion func(req reconcile.Request) error
}

func (f *XdsConfigReconcilerFuncs) ReconcileXdsConfig(obj *internal_gloo_solo_io_v2.XdsConfig) (reconcile.Result, error) {
	if f.OnReconcileXdsConfig == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileXdsConfig(obj)
}

func (f *XdsConfigReconcilerFuncs) ReconcileXdsConfigDeletion(req reconcile.Request) error {
	if f.OnReconcileXdsConfigDeletion == nil {
		return nil
	}
	return f.OnReconcileXdsConfigDeletion(req)
}

// Reconcile and finalize the XdsConfig Resource
// implemented by the user
type XdsConfigFinalizer interface {
	XdsConfigReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	XdsConfigFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeXdsConfig(obj *internal_gloo_solo_io_v2.XdsConfig) error
}

type XdsConfigReconcileLoop interface {
	RunXdsConfigReconciler(ctx context.Context, rec XdsConfigReconciler, predicates ...predicate.Predicate) error
}

type xdsConfigReconcileLoop struct {
	loop reconcile.Loop
}

func NewXdsConfigReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) XdsConfigReconcileLoop {
	return &xdsConfigReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &internal_gloo_solo_io_v2.XdsConfig{}, options),
	}
}

func (c *xdsConfigReconcileLoop) RunXdsConfigReconciler(ctx context.Context, reconciler XdsConfigReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericXdsConfigReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(XdsConfigFinalizer); ok {
		reconcilerWrapper = genericXdsConfigFinalizer{
			genericXdsConfigReconciler: genericReconciler,
			finalizingReconciler:       finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericXdsConfigHandler implements a generic reconcile.Reconciler
type genericXdsConfigReconciler struct {
	reconciler XdsConfigReconciler
}

func (r genericXdsConfigReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*internal_gloo_solo_io_v2.XdsConfig)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: XdsConfig handler received event for %T", object)
	}
	return r.reconciler.ReconcileXdsConfig(obj)
}

func (r genericXdsConfigReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(XdsConfigDeletionReconciler); ok {
		return deletionReconciler.ReconcileXdsConfigDeletion(request)
	}
	return nil
}

// genericXdsConfigFinalizer implements a generic reconcile.FinalizingReconciler
type genericXdsConfigFinalizer struct {
	genericXdsConfigReconciler
	finalizingReconciler XdsConfigFinalizer
}

func (r genericXdsConfigFinalizer) FinalizerName() string {
	return r.finalizingReconciler.XdsConfigFinalizerName()
}

func (r genericXdsConfigFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.XdsConfig)
	if !ok {
		return errors.Errorf("internal error: XdsConfig handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeXdsConfig(obj)
}

// Reconcile Upsert events for the DiscoveredGateway Resource.
// implemented by the user
type DiscoveredGatewayReconciler interface {
	ReconcileDiscoveredGateway(obj *internal_gloo_solo_io_v2.DiscoveredGateway) (reconcile.Result, error)
}

// Reconcile deletion events for the DiscoveredGateway Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type DiscoveredGatewayDeletionReconciler interface {
	ReconcileDiscoveredGatewayDeletion(req reconcile.Request) error
}

type DiscoveredGatewayReconcilerFuncs struct {
	OnReconcileDiscoveredGateway         func(obj *internal_gloo_solo_io_v2.DiscoveredGateway) (reconcile.Result, error)
	OnReconcileDiscoveredGatewayDeletion func(req reconcile.Request) error
}

func (f *DiscoveredGatewayReconcilerFuncs) ReconcileDiscoveredGateway(obj *internal_gloo_solo_io_v2.DiscoveredGateway) (reconcile.Result, error) {
	if f.OnReconcileDiscoveredGateway == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileDiscoveredGateway(obj)
}

func (f *DiscoveredGatewayReconcilerFuncs) ReconcileDiscoveredGatewayDeletion(req reconcile.Request) error {
	if f.OnReconcileDiscoveredGatewayDeletion == nil {
		return nil
	}
	return f.OnReconcileDiscoveredGatewayDeletion(req)
}

// Reconcile and finalize the DiscoveredGateway Resource
// implemented by the user
type DiscoveredGatewayFinalizer interface {
	DiscoveredGatewayReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	DiscoveredGatewayFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeDiscoveredGateway(obj *internal_gloo_solo_io_v2.DiscoveredGateway) error
}

type DiscoveredGatewayReconcileLoop interface {
	RunDiscoveredGatewayReconciler(ctx context.Context, rec DiscoveredGatewayReconciler, predicates ...predicate.Predicate) error
}

type discoveredGatewayReconcileLoop struct {
	loop reconcile.Loop
}

func NewDiscoveredGatewayReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) DiscoveredGatewayReconcileLoop {
	return &discoveredGatewayReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &internal_gloo_solo_io_v2.DiscoveredGateway{}, options),
	}
}

func (c *discoveredGatewayReconcileLoop) RunDiscoveredGatewayReconciler(ctx context.Context, reconciler DiscoveredGatewayReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericDiscoveredGatewayReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(DiscoveredGatewayFinalizer); ok {
		reconcilerWrapper = genericDiscoveredGatewayFinalizer{
			genericDiscoveredGatewayReconciler: genericReconciler,
			finalizingReconciler:               finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericDiscoveredGatewayHandler implements a generic reconcile.Reconciler
type genericDiscoveredGatewayReconciler struct {
	reconciler DiscoveredGatewayReconciler
}

func (r genericDiscoveredGatewayReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*internal_gloo_solo_io_v2.DiscoveredGateway)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: DiscoveredGateway handler received event for %T", object)
	}
	return r.reconciler.ReconcileDiscoveredGateway(obj)
}

func (r genericDiscoveredGatewayReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(DiscoveredGatewayDeletionReconciler); ok {
		return deletionReconciler.ReconcileDiscoveredGatewayDeletion(request)
	}
	return nil
}

// genericDiscoveredGatewayFinalizer implements a generic reconcile.FinalizingReconciler
type genericDiscoveredGatewayFinalizer struct {
	genericDiscoveredGatewayReconciler
	finalizingReconciler DiscoveredGatewayFinalizer
}

func (r genericDiscoveredGatewayFinalizer) FinalizerName() string {
	return r.finalizingReconciler.DiscoveredGatewayFinalizerName()
}

func (r genericDiscoveredGatewayFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.DiscoveredGateway)
	if !ok {
		return errors.Errorf("internal error: DiscoveredGateway handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeDiscoveredGateway(obj)
}

// Reconcile Upsert events for the Mesh Resource.
// implemented by the user
type MeshReconciler interface {
	ReconcileMesh(obj *internal_gloo_solo_io_v2.Mesh) (reconcile.Result, error)
}

// Reconcile deletion events for the Mesh Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MeshDeletionReconciler interface {
	ReconcileMeshDeletion(req reconcile.Request) error
}

type MeshReconcilerFuncs struct {
	OnReconcileMesh         func(obj *internal_gloo_solo_io_v2.Mesh) (reconcile.Result, error)
	OnReconcileMeshDeletion func(req reconcile.Request) error
}

func (f *MeshReconcilerFuncs) ReconcileMesh(obj *internal_gloo_solo_io_v2.Mesh) (reconcile.Result, error) {
	if f.OnReconcileMesh == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileMesh(obj)
}

func (f *MeshReconcilerFuncs) ReconcileMeshDeletion(req reconcile.Request) error {
	if f.OnReconcileMeshDeletion == nil {
		return nil
	}
	return f.OnReconcileMeshDeletion(req)
}

// Reconcile and finalize the Mesh Resource
// implemented by the user
type MeshFinalizer interface {
	MeshReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	MeshFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeMesh(obj *internal_gloo_solo_io_v2.Mesh) error
}

type MeshReconcileLoop interface {
	RunMeshReconciler(ctx context.Context, rec MeshReconciler, predicates ...predicate.Predicate) error
}

type meshReconcileLoop struct {
	loop reconcile.Loop
}

func NewMeshReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) MeshReconcileLoop {
	return &meshReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &internal_gloo_solo_io_v2.Mesh{}, options),
	}
}

func (c *meshReconcileLoop) RunMeshReconciler(ctx context.Context, reconciler MeshReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericMeshReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(MeshFinalizer); ok {
		reconcilerWrapper = genericMeshFinalizer{
			genericMeshReconciler: genericReconciler,
			finalizingReconciler:  finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericMeshHandler implements a generic reconcile.Reconciler
type genericMeshReconciler struct {
	reconciler MeshReconciler
}

func (r genericMeshReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*internal_gloo_solo_io_v2.Mesh)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: Mesh handler received event for %T", object)
	}
	return r.reconciler.ReconcileMesh(obj)
}

func (r genericMeshReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(MeshDeletionReconciler); ok {
		return deletionReconciler.ReconcileMeshDeletion(request)
	}
	return nil
}

// genericMeshFinalizer implements a generic reconcile.FinalizingReconciler
type genericMeshFinalizer struct {
	genericMeshReconciler
	finalizingReconciler MeshFinalizer
}

func (r genericMeshFinalizer) FinalizerName() string {
	return r.finalizingReconciler.MeshFinalizerName()
}

func (r genericMeshFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.Mesh)
	if !ok {
		return errors.Errorf("internal error: Mesh handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeMesh(obj)
}

// Reconcile Upsert events for the DiscoveredCNI Resource.
// implemented by the user
type DiscoveredCNIReconciler interface {
	ReconcileDiscoveredCNI(obj *internal_gloo_solo_io_v2.DiscoveredCNI) (reconcile.Result, error)
}

// Reconcile deletion events for the DiscoveredCNI Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type DiscoveredCNIDeletionReconciler interface {
	ReconcileDiscoveredCNIDeletion(req reconcile.Request) error
}

type DiscoveredCNIReconcilerFuncs struct {
	OnReconcileDiscoveredCNI         func(obj *internal_gloo_solo_io_v2.DiscoveredCNI) (reconcile.Result, error)
	OnReconcileDiscoveredCNIDeletion func(req reconcile.Request) error
}

func (f *DiscoveredCNIReconcilerFuncs) ReconcileDiscoveredCNI(obj *internal_gloo_solo_io_v2.DiscoveredCNI) (reconcile.Result, error) {
	if f.OnReconcileDiscoveredCNI == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileDiscoveredCNI(obj)
}

func (f *DiscoveredCNIReconcilerFuncs) ReconcileDiscoveredCNIDeletion(req reconcile.Request) error {
	if f.OnReconcileDiscoveredCNIDeletion == nil {
		return nil
	}
	return f.OnReconcileDiscoveredCNIDeletion(req)
}

// Reconcile and finalize the DiscoveredCNI Resource
// implemented by the user
type DiscoveredCNIFinalizer interface {
	DiscoveredCNIReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	DiscoveredCNIFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeDiscoveredCNI(obj *internal_gloo_solo_io_v2.DiscoveredCNI) error
}

type DiscoveredCNIReconcileLoop interface {
	RunDiscoveredCNIReconciler(ctx context.Context, rec DiscoveredCNIReconciler, predicates ...predicate.Predicate) error
}

type discoveredCNIReconcileLoop struct {
	loop reconcile.Loop
}

func NewDiscoveredCNIReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) DiscoveredCNIReconcileLoop {
	return &discoveredCNIReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &internal_gloo_solo_io_v2.DiscoveredCNI{}, options),
	}
}

func (c *discoveredCNIReconcileLoop) RunDiscoveredCNIReconciler(ctx context.Context, reconciler DiscoveredCNIReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericDiscoveredCNIReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(DiscoveredCNIFinalizer); ok {
		reconcilerWrapper = genericDiscoveredCNIFinalizer{
			genericDiscoveredCNIReconciler: genericReconciler,
			finalizingReconciler:           finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericDiscoveredCNIHandler implements a generic reconcile.Reconciler
type genericDiscoveredCNIReconciler struct {
	reconciler DiscoveredCNIReconciler
}

func (r genericDiscoveredCNIReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*internal_gloo_solo_io_v2.DiscoveredCNI)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: DiscoveredCNI handler received event for %T", object)
	}
	return r.reconciler.ReconcileDiscoveredCNI(obj)
}

func (r genericDiscoveredCNIReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(DiscoveredCNIDeletionReconciler); ok {
		return deletionReconciler.ReconcileDiscoveredCNIDeletion(request)
	}
	return nil
}

// genericDiscoveredCNIFinalizer implements a generic reconcile.FinalizingReconciler
type genericDiscoveredCNIFinalizer struct {
	genericDiscoveredCNIReconciler
	finalizingReconciler DiscoveredCNIFinalizer
}

func (r genericDiscoveredCNIFinalizer) FinalizerName() string {
	return r.finalizingReconciler.DiscoveredCNIFinalizerName()
}

func (r genericDiscoveredCNIFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.DiscoveredCNI)
	if !ok {
		return errors.Errorf("internal error: DiscoveredCNI handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeDiscoveredCNI(obj)
}

// Reconcile Upsert events for the PortalConfig Resource.
// implemented by the user
type PortalConfigReconciler interface {
	ReconcilePortalConfig(obj *internal_gloo_solo_io_v2.PortalConfig) (reconcile.Result, error)
}

// Reconcile deletion events for the PortalConfig Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type PortalConfigDeletionReconciler interface {
	ReconcilePortalConfigDeletion(req reconcile.Request) error
}

type PortalConfigReconcilerFuncs struct {
	OnReconcilePortalConfig         func(obj *internal_gloo_solo_io_v2.PortalConfig) (reconcile.Result, error)
	OnReconcilePortalConfigDeletion func(req reconcile.Request) error
}

func (f *PortalConfigReconcilerFuncs) ReconcilePortalConfig(obj *internal_gloo_solo_io_v2.PortalConfig) (reconcile.Result, error) {
	if f.OnReconcilePortalConfig == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcilePortalConfig(obj)
}

func (f *PortalConfigReconcilerFuncs) ReconcilePortalConfigDeletion(req reconcile.Request) error {
	if f.OnReconcilePortalConfigDeletion == nil {
		return nil
	}
	return f.OnReconcilePortalConfigDeletion(req)
}

// Reconcile and finalize the PortalConfig Resource
// implemented by the user
type PortalConfigFinalizer interface {
	PortalConfigReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	PortalConfigFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizePortalConfig(obj *internal_gloo_solo_io_v2.PortalConfig) error
}

type PortalConfigReconcileLoop interface {
	RunPortalConfigReconciler(ctx context.Context, rec PortalConfigReconciler, predicates ...predicate.Predicate) error
}

type portalConfigReconcileLoop struct {
	loop reconcile.Loop
}

func NewPortalConfigReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) PortalConfigReconcileLoop {
	return &portalConfigReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &internal_gloo_solo_io_v2.PortalConfig{}, options),
	}
}

func (c *portalConfigReconcileLoop) RunPortalConfigReconciler(ctx context.Context, reconciler PortalConfigReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericPortalConfigReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(PortalConfigFinalizer); ok {
		reconcilerWrapper = genericPortalConfigFinalizer{
			genericPortalConfigReconciler: genericReconciler,
			finalizingReconciler:          finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericPortalConfigHandler implements a generic reconcile.Reconciler
type genericPortalConfigReconciler struct {
	reconciler PortalConfigReconciler
}

func (r genericPortalConfigReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*internal_gloo_solo_io_v2.PortalConfig)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: PortalConfig handler received event for %T", object)
	}
	return r.reconciler.ReconcilePortalConfig(obj)
}

func (r genericPortalConfigReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(PortalConfigDeletionReconciler); ok {
		return deletionReconciler.ReconcilePortalConfigDeletion(request)
	}
	return nil
}

// genericPortalConfigFinalizer implements a generic reconcile.FinalizingReconciler
type genericPortalConfigFinalizer struct {
	genericPortalConfigReconciler
	finalizingReconciler PortalConfigFinalizer
}

func (r genericPortalConfigFinalizer) FinalizerName() string {
	return r.finalizingReconciler.PortalConfigFinalizerName()
}

func (r genericPortalConfigFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.PortalConfig)
	if !ok {
		return errors.Errorf("internal error: PortalConfig handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizePortalConfig(obj)
}
