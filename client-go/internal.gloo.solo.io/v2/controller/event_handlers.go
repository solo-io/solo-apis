// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	internal_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/internal.gloo.solo.io/v2"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the IssuedCertificate Resource
// DEPRECATED: Prefer reconciler pattern.
type IssuedCertificateEventHandler interface {
	CreateIssuedCertificate(obj *internal_gloo_solo_io_v2.IssuedCertificate) error
	UpdateIssuedCertificate(old, new *internal_gloo_solo_io_v2.IssuedCertificate) error
	DeleteIssuedCertificate(obj *internal_gloo_solo_io_v2.IssuedCertificate) error
	GenericIssuedCertificate(obj *internal_gloo_solo_io_v2.IssuedCertificate) error
}

type IssuedCertificateEventHandlerFuncs struct {
	OnCreate  func(obj *internal_gloo_solo_io_v2.IssuedCertificate) error
	OnUpdate  func(old, new *internal_gloo_solo_io_v2.IssuedCertificate) error
	OnDelete  func(obj *internal_gloo_solo_io_v2.IssuedCertificate) error
	OnGeneric func(obj *internal_gloo_solo_io_v2.IssuedCertificate) error
}

func (f *IssuedCertificateEventHandlerFuncs) CreateIssuedCertificate(obj *internal_gloo_solo_io_v2.IssuedCertificate) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *IssuedCertificateEventHandlerFuncs) DeleteIssuedCertificate(obj *internal_gloo_solo_io_v2.IssuedCertificate) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *IssuedCertificateEventHandlerFuncs) UpdateIssuedCertificate(objOld, objNew *internal_gloo_solo_io_v2.IssuedCertificate) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *IssuedCertificateEventHandlerFuncs) GenericIssuedCertificate(obj *internal_gloo_solo_io_v2.IssuedCertificate) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type IssuedCertificateEventWatcher interface {
	AddEventHandler(ctx context.Context, h IssuedCertificateEventHandler, predicates ...predicate.Predicate) error
}

type issuedCertificateEventWatcher struct {
	watcher events.EventWatcher
}

func NewIssuedCertificateEventWatcher(name string, mgr manager.Manager) IssuedCertificateEventWatcher {
	return &issuedCertificateEventWatcher{
		watcher: events.NewWatcher(name, mgr, &internal_gloo_solo_io_v2.IssuedCertificate{}),
	}
}

func (c *issuedCertificateEventWatcher) AddEventHandler(ctx context.Context, h IssuedCertificateEventHandler, predicates ...predicate.Predicate) error {
	handler := genericIssuedCertificateHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericIssuedCertificateHandler implements a generic events.EventHandler
type genericIssuedCertificateHandler struct {
	handler IssuedCertificateEventHandler
}

func (h genericIssuedCertificateHandler) Create(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.IssuedCertificate)
	if !ok {
		return errors.Errorf("internal error: IssuedCertificate handler received event for %T", object)
	}
	return h.handler.CreateIssuedCertificate(obj)
}

func (h genericIssuedCertificateHandler) Delete(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.IssuedCertificate)
	if !ok {
		return errors.Errorf("internal error: IssuedCertificate handler received event for %T", object)
	}
	return h.handler.DeleteIssuedCertificate(obj)
}

func (h genericIssuedCertificateHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*internal_gloo_solo_io_v2.IssuedCertificate)
	if !ok {
		return errors.Errorf("internal error: IssuedCertificate handler received event for %T", old)
	}
	objNew, ok := new.(*internal_gloo_solo_io_v2.IssuedCertificate)
	if !ok {
		return errors.Errorf("internal error: IssuedCertificate handler received event for %T", new)
	}
	return h.handler.UpdateIssuedCertificate(objOld, objNew)
}

func (h genericIssuedCertificateHandler) Generic(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.IssuedCertificate)
	if !ok {
		return errors.Errorf("internal error: IssuedCertificate handler received event for %T", object)
	}
	return h.handler.GenericIssuedCertificate(obj)
}

// Handle events for the CertificateRequest Resource
// DEPRECATED: Prefer reconciler pattern.
type CertificateRequestEventHandler interface {
	CreateCertificateRequest(obj *internal_gloo_solo_io_v2.CertificateRequest) error
	UpdateCertificateRequest(old, new *internal_gloo_solo_io_v2.CertificateRequest) error
	DeleteCertificateRequest(obj *internal_gloo_solo_io_v2.CertificateRequest) error
	GenericCertificateRequest(obj *internal_gloo_solo_io_v2.CertificateRequest) error
}

type CertificateRequestEventHandlerFuncs struct {
	OnCreate  func(obj *internal_gloo_solo_io_v2.CertificateRequest) error
	OnUpdate  func(old, new *internal_gloo_solo_io_v2.CertificateRequest) error
	OnDelete  func(obj *internal_gloo_solo_io_v2.CertificateRequest) error
	OnGeneric func(obj *internal_gloo_solo_io_v2.CertificateRequest) error
}

func (f *CertificateRequestEventHandlerFuncs) CreateCertificateRequest(obj *internal_gloo_solo_io_v2.CertificateRequest) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *CertificateRequestEventHandlerFuncs) DeleteCertificateRequest(obj *internal_gloo_solo_io_v2.CertificateRequest) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *CertificateRequestEventHandlerFuncs) UpdateCertificateRequest(objOld, objNew *internal_gloo_solo_io_v2.CertificateRequest) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *CertificateRequestEventHandlerFuncs) GenericCertificateRequest(obj *internal_gloo_solo_io_v2.CertificateRequest) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type CertificateRequestEventWatcher interface {
	AddEventHandler(ctx context.Context, h CertificateRequestEventHandler, predicates ...predicate.Predicate) error
}

type certificateRequestEventWatcher struct {
	watcher events.EventWatcher
}

func NewCertificateRequestEventWatcher(name string, mgr manager.Manager) CertificateRequestEventWatcher {
	return &certificateRequestEventWatcher{
		watcher: events.NewWatcher(name, mgr, &internal_gloo_solo_io_v2.CertificateRequest{}),
	}
}

func (c *certificateRequestEventWatcher) AddEventHandler(ctx context.Context, h CertificateRequestEventHandler, predicates ...predicate.Predicate) error {
	handler := genericCertificateRequestHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericCertificateRequestHandler implements a generic events.EventHandler
type genericCertificateRequestHandler struct {
	handler CertificateRequestEventHandler
}

func (h genericCertificateRequestHandler) Create(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.CertificateRequest)
	if !ok {
		return errors.Errorf("internal error: CertificateRequest handler received event for %T", object)
	}
	return h.handler.CreateCertificateRequest(obj)
}

func (h genericCertificateRequestHandler) Delete(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.CertificateRequest)
	if !ok {
		return errors.Errorf("internal error: CertificateRequest handler received event for %T", object)
	}
	return h.handler.DeleteCertificateRequest(obj)
}

func (h genericCertificateRequestHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*internal_gloo_solo_io_v2.CertificateRequest)
	if !ok {
		return errors.Errorf("internal error: CertificateRequest handler received event for %T", old)
	}
	objNew, ok := new.(*internal_gloo_solo_io_v2.CertificateRequest)
	if !ok {
		return errors.Errorf("internal error: CertificateRequest handler received event for %T", new)
	}
	return h.handler.UpdateCertificateRequest(objOld, objNew)
}

func (h genericCertificateRequestHandler) Generic(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.CertificateRequest)
	if !ok {
		return errors.Errorf("internal error: CertificateRequest handler received event for %T", object)
	}
	return h.handler.GenericCertificateRequest(obj)
}

// Handle events for the PodBounceDirective Resource
// DEPRECATED: Prefer reconciler pattern.
type PodBounceDirectiveEventHandler interface {
	CreatePodBounceDirective(obj *internal_gloo_solo_io_v2.PodBounceDirective) error
	UpdatePodBounceDirective(old, new *internal_gloo_solo_io_v2.PodBounceDirective) error
	DeletePodBounceDirective(obj *internal_gloo_solo_io_v2.PodBounceDirective) error
	GenericPodBounceDirective(obj *internal_gloo_solo_io_v2.PodBounceDirective) error
}

type PodBounceDirectiveEventHandlerFuncs struct {
	OnCreate  func(obj *internal_gloo_solo_io_v2.PodBounceDirective) error
	OnUpdate  func(old, new *internal_gloo_solo_io_v2.PodBounceDirective) error
	OnDelete  func(obj *internal_gloo_solo_io_v2.PodBounceDirective) error
	OnGeneric func(obj *internal_gloo_solo_io_v2.PodBounceDirective) error
}

func (f *PodBounceDirectiveEventHandlerFuncs) CreatePodBounceDirective(obj *internal_gloo_solo_io_v2.PodBounceDirective) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *PodBounceDirectiveEventHandlerFuncs) DeletePodBounceDirective(obj *internal_gloo_solo_io_v2.PodBounceDirective) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *PodBounceDirectiveEventHandlerFuncs) UpdatePodBounceDirective(objOld, objNew *internal_gloo_solo_io_v2.PodBounceDirective) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *PodBounceDirectiveEventHandlerFuncs) GenericPodBounceDirective(obj *internal_gloo_solo_io_v2.PodBounceDirective) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type PodBounceDirectiveEventWatcher interface {
	AddEventHandler(ctx context.Context, h PodBounceDirectiveEventHandler, predicates ...predicate.Predicate) error
}

type podBounceDirectiveEventWatcher struct {
	watcher events.EventWatcher
}

func NewPodBounceDirectiveEventWatcher(name string, mgr manager.Manager) PodBounceDirectiveEventWatcher {
	return &podBounceDirectiveEventWatcher{
		watcher: events.NewWatcher(name, mgr, &internal_gloo_solo_io_v2.PodBounceDirective{}),
	}
}

func (c *podBounceDirectiveEventWatcher) AddEventHandler(ctx context.Context, h PodBounceDirectiveEventHandler, predicates ...predicate.Predicate) error {
	handler := genericPodBounceDirectiveHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericPodBounceDirectiveHandler implements a generic events.EventHandler
type genericPodBounceDirectiveHandler struct {
	handler PodBounceDirectiveEventHandler
}

func (h genericPodBounceDirectiveHandler) Create(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.PodBounceDirective)
	if !ok {
		return errors.Errorf("internal error: PodBounceDirective handler received event for %T", object)
	}
	return h.handler.CreatePodBounceDirective(obj)
}

func (h genericPodBounceDirectiveHandler) Delete(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.PodBounceDirective)
	if !ok {
		return errors.Errorf("internal error: PodBounceDirective handler received event for %T", object)
	}
	return h.handler.DeletePodBounceDirective(obj)
}

func (h genericPodBounceDirectiveHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*internal_gloo_solo_io_v2.PodBounceDirective)
	if !ok {
		return errors.Errorf("internal error: PodBounceDirective handler received event for %T", old)
	}
	objNew, ok := new.(*internal_gloo_solo_io_v2.PodBounceDirective)
	if !ok {
		return errors.Errorf("internal error: PodBounceDirective handler received event for %T", new)
	}
	return h.handler.UpdatePodBounceDirective(objOld, objNew)
}

func (h genericPodBounceDirectiveHandler) Generic(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.PodBounceDirective)
	if !ok {
		return errors.Errorf("internal error: PodBounceDirective handler received event for %T", object)
	}
	return h.handler.GenericPodBounceDirective(obj)
}

// Handle events for the XdsConfig Resource
// DEPRECATED: Prefer reconciler pattern.
type XdsConfigEventHandler interface {
	CreateXdsConfig(obj *internal_gloo_solo_io_v2.XdsConfig) error
	UpdateXdsConfig(old, new *internal_gloo_solo_io_v2.XdsConfig) error
	DeleteXdsConfig(obj *internal_gloo_solo_io_v2.XdsConfig) error
	GenericXdsConfig(obj *internal_gloo_solo_io_v2.XdsConfig) error
}

type XdsConfigEventHandlerFuncs struct {
	OnCreate  func(obj *internal_gloo_solo_io_v2.XdsConfig) error
	OnUpdate  func(old, new *internal_gloo_solo_io_v2.XdsConfig) error
	OnDelete  func(obj *internal_gloo_solo_io_v2.XdsConfig) error
	OnGeneric func(obj *internal_gloo_solo_io_v2.XdsConfig) error
}

func (f *XdsConfigEventHandlerFuncs) CreateXdsConfig(obj *internal_gloo_solo_io_v2.XdsConfig) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *XdsConfigEventHandlerFuncs) DeleteXdsConfig(obj *internal_gloo_solo_io_v2.XdsConfig) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *XdsConfigEventHandlerFuncs) UpdateXdsConfig(objOld, objNew *internal_gloo_solo_io_v2.XdsConfig) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *XdsConfigEventHandlerFuncs) GenericXdsConfig(obj *internal_gloo_solo_io_v2.XdsConfig) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type XdsConfigEventWatcher interface {
	AddEventHandler(ctx context.Context, h XdsConfigEventHandler, predicates ...predicate.Predicate) error
}

type xdsConfigEventWatcher struct {
	watcher events.EventWatcher
}

func NewXdsConfigEventWatcher(name string, mgr manager.Manager) XdsConfigEventWatcher {
	return &xdsConfigEventWatcher{
		watcher: events.NewWatcher(name, mgr, &internal_gloo_solo_io_v2.XdsConfig{}),
	}
}

func (c *xdsConfigEventWatcher) AddEventHandler(ctx context.Context, h XdsConfigEventHandler, predicates ...predicate.Predicate) error {
	handler := genericXdsConfigHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericXdsConfigHandler implements a generic events.EventHandler
type genericXdsConfigHandler struct {
	handler XdsConfigEventHandler
}

func (h genericXdsConfigHandler) Create(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.XdsConfig)
	if !ok {
		return errors.Errorf("internal error: XdsConfig handler received event for %T", object)
	}
	return h.handler.CreateXdsConfig(obj)
}

func (h genericXdsConfigHandler) Delete(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.XdsConfig)
	if !ok {
		return errors.Errorf("internal error: XdsConfig handler received event for %T", object)
	}
	return h.handler.DeleteXdsConfig(obj)
}

func (h genericXdsConfigHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*internal_gloo_solo_io_v2.XdsConfig)
	if !ok {
		return errors.Errorf("internal error: XdsConfig handler received event for %T", old)
	}
	objNew, ok := new.(*internal_gloo_solo_io_v2.XdsConfig)
	if !ok {
		return errors.Errorf("internal error: XdsConfig handler received event for %T", new)
	}
	return h.handler.UpdateXdsConfig(objOld, objNew)
}

func (h genericXdsConfigHandler) Generic(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.XdsConfig)
	if !ok {
		return errors.Errorf("internal error: XdsConfig handler received event for %T", object)
	}
	return h.handler.GenericXdsConfig(obj)
}

// Handle events for the DiscoveredGateway Resource
// DEPRECATED: Prefer reconciler pattern.
type DiscoveredGatewayEventHandler interface {
	CreateDiscoveredGateway(obj *internal_gloo_solo_io_v2.DiscoveredGateway) error
	UpdateDiscoveredGateway(old, new *internal_gloo_solo_io_v2.DiscoveredGateway) error
	DeleteDiscoveredGateway(obj *internal_gloo_solo_io_v2.DiscoveredGateway) error
	GenericDiscoveredGateway(obj *internal_gloo_solo_io_v2.DiscoveredGateway) error
}

type DiscoveredGatewayEventHandlerFuncs struct {
	OnCreate  func(obj *internal_gloo_solo_io_v2.DiscoveredGateway) error
	OnUpdate  func(old, new *internal_gloo_solo_io_v2.DiscoveredGateway) error
	OnDelete  func(obj *internal_gloo_solo_io_v2.DiscoveredGateway) error
	OnGeneric func(obj *internal_gloo_solo_io_v2.DiscoveredGateway) error
}

func (f *DiscoveredGatewayEventHandlerFuncs) CreateDiscoveredGateway(obj *internal_gloo_solo_io_v2.DiscoveredGateway) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *DiscoveredGatewayEventHandlerFuncs) DeleteDiscoveredGateway(obj *internal_gloo_solo_io_v2.DiscoveredGateway) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *DiscoveredGatewayEventHandlerFuncs) UpdateDiscoveredGateway(objOld, objNew *internal_gloo_solo_io_v2.DiscoveredGateway) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *DiscoveredGatewayEventHandlerFuncs) GenericDiscoveredGateway(obj *internal_gloo_solo_io_v2.DiscoveredGateway) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type DiscoveredGatewayEventWatcher interface {
	AddEventHandler(ctx context.Context, h DiscoveredGatewayEventHandler, predicates ...predicate.Predicate) error
}

type discoveredGatewayEventWatcher struct {
	watcher events.EventWatcher
}

func NewDiscoveredGatewayEventWatcher(name string, mgr manager.Manager) DiscoveredGatewayEventWatcher {
	return &discoveredGatewayEventWatcher{
		watcher: events.NewWatcher(name, mgr, &internal_gloo_solo_io_v2.DiscoveredGateway{}),
	}
}

func (c *discoveredGatewayEventWatcher) AddEventHandler(ctx context.Context, h DiscoveredGatewayEventHandler, predicates ...predicate.Predicate) error {
	handler := genericDiscoveredGatewayHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericDiscoveredGatewayHandler implements a generic events.EventHandler
type genericDiscoveredGatewayHandler struct {
	handler DiscoveredGatewayEventHandler
}

func (h genericDiscoveredGatewayHandler) Create(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.DiscoveredGateway)
	if !ok {
		return errors.Errorf("internal error: DiscoveredGateway handler received event for %T", object)
	}
	return h.handler.CreateDiscoveredGateway(obj)
}

func (h genericDiscoveredGatewayHandler) Delete(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.DiscoveredGateway)
	if !ok {
		return errors.Errorf("internal error: DiscoveredGateway handler received event for %T", object)
	}
	return h.handler.DeleteDiscoveredGateway(obj)
}

func (h genericDiscoveredGatewayHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*internal_gloo_solo_io_v2.DiscoveredGateway)
	if !ok {
		return errors.Errorf("internal error: DiscoveredGateway handler received event for %T", old)
	}
	objNew, ok := new.(*internal_gloo_solo_io_v2.DiscoveredGateway)
	if !ok {
		return errors.Errorf("internal error: DiscoveredGateway handler received event for %T", new)
	}
	return h.handler.UpdateDiscoveredGateway(objOld, objNew)
}

func (h genericDiscoveredGatewayHandler) Generic(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.DiscoveredGateway)
	if !ok {
		return errors.Errorf("internal error: DiscoveredGateway handler received event for %T", object)
	}
	return h.handler.GenericDiscoveredGateway(obj)
}

// Handle events for the Mesh Resource
// DEPRECATED: Prefer reconciler pattern.
type MeshEventHandler interface {
	CreateMesh(obj *internal_gloo_solo_io_v2.Mesh) error
	UpdateMesh(old, new *internal_gloo_solo_io_v2.Mesh) error
	DeleteMesh(obj *internal_gloo_solo_io_v2.Mesh) error
	GenericMesh(obj *internal_gloo_solo_io_v2.Mesh) error
}

type MeshEventHandlerFuncs struct {
	OnCreate  func(obj *internal_gloo_solo_io_v2.Mesh) error
	OnUpdate  func(old, new *internal_gloo_solo_io_v2.Mesh) error
	OnDelete  func(obj *internal_gloo_solo_io_v2.Mesh) error
	OnGeneric func(obj *internal_gloo_solo_io_v2.Mesh) error
}

func (f *MeshEventHandlerFuncs) CreateMesh(obj *internal_gloo_solo_io_v2.Mesh) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *MeshEventHandlerFuncs) DeleteMesh(obj *internal_gloo_solo_io_v2.Mesh) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *MeshEventHandlerFuncs) UpdateMesh(objOld, objNew *internal_gloo_solo_io_v2.Mesh) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *MeshEventHandlerFuncs) GenericMesh(obj *internal_gloo_solo_io_v2.Mesh) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type MeshEventWatcher interface {
	AddEventHandler(ctx context.Context, h MeshEventHandler, predicates ...predicate.Predicate) error
}

type meshEventWatcher struct {
	watcher events.EventWatcher
}

func NewMeshEventWatcher(name string, mgr manager.Manager) MeshEventWatcher {
	return &meshEventWatcher{
		watcher: events.NewWatcher(name, mgr, &internal_gloo_solo_io_v2.Mesh{}),
	}
}

func (c *meshEventWatcher) AddEventHandler(ctx context.Context, h MeshEventHandler, predicates ...predicate.Predicate) error {
	handler := genericMeshHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericMeshHandler implements a generic events.EventHandler
type genericMeshHandler struct {
	handler MeshEventHandler
}

func (h genericMeshHandler) Create(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.Mesh)
	if !ok {
		return errors.Errorf("internal error: Mesh handler received event for %T", object)
	}
	return h.handler.CreateMesh(obj)
}

func (h genericMeshHandler) Delete(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.Mesh)
	if !ok {
		return errors.Errorf("internal error: Mesh handler received event for %T", object)
	}
	return h.handler.DeleteMesh(obj)
}

func (h genericMeshHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*internal_gloo_solo_io_v2.Mesh)
	if !ok {
		return errors.Errorf("internal error: Mesh handler received event for %T", old)
	}
	objNew, ok := new.(*internal_gloo_solo_io_v2.Mesh)
	if !ok {
		return errors.Errorf("internal error: Mesh handler received event for %T", new)
	}
	return h.handler.UpdateMesh(objOld, objNew)
}

func (h genericMeshHandler) Generic(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.Mesh)
	if !ok {
		return errors.Errorf("internal error: Mesh handler received event for %T", object)
	}
	return h.handler.GenericMesh(obj)
}

// Handle events for the DiscoveredCNI Resource
// DEPRECATED: Prefer reconciler pattern.
type DiscoveredCNIEventHandler interface {
	CreateDiscoveredCNI(obj *internal_gloo_solo_io_v2.DiscoveredCNI) error
	UpdateDiscoveredCNI(old, new *internal_gloo_solo_io_v2.DiscoveredCNI) error
	DeleteDiscoveredCNI(obj *internal_gloo_solo_io_v2.DiscoveredCNI) error
	GenericDiscoveredCNI(obj *internal_gloo_solo_io_v2.DiscoveredCNI) error
}

type DiscoveredCNIEventHandlerFuncs struct {
	OnCreate  func(obj *internal_gloo_solo_io_v2.DiscoveredCNI) error
	OnUpdate  func(old, new *internal_gloo_solo_io_v2.DiscoveredCNI) error
	OnDelete  func(obj *internal_gloo_solo_io_v2.DiscoveredCNI) error
	OnGeneric func(obj *internal_gloo_solo_io_v2.DiscoveredCNI) error
}

func (f *DiscoveredCNIEventHandlerFuncs) CreateDiscoveredCNI(obj *internal_gloo_solo_io_v2.DiscoveredCNI) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *DiscoveredCNIEventHandlerFuncs) DeleteDiscoveredCNI(obj *internal_gloo_solo_io_v2.DiscoveredCNI) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *DiscoveredCNIEventHandlerFuncs) UpdateDiscoveredCNI(objOld, objNew *internal_gloo_solo_io_v2.DiscoveredCNI) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *DiscoveredCNIEventHandlerFuncs) GenericDiscoveredCNI(obj *internal_gloo_solo_io_v2.DiscoveredCNI) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type DiscoveredCNIEventWatcher interface {
	AddEventHandler(ctx context.Context, h DiscoveredCNIEventHandler, predicates ...predicate.Predicate) error
}

type discoveredCNIEventWatcher struct {
	watcher events.EventWatcher
}

func NewDiscoveredCNIEventWatcher(name string, mgr manager.Manager) DiscoveredCNIEventWatcher {
	return &discoveredCNIEventWatcher{
		watcher: events.NewWatcher(name, mgr, &internal_gloo_solo_io_v2.DiscoveredCNI{}),
	}
}

func (c *discoveredCNIEventWatcher) AddEventHandler(ctx context.Context, h DiscoveredCNIEventHandler, predicates ...predicate.Predicate) error {
	handler := genericDiscoveredCNIHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericDiscoveredCNIHandler implements a generic events.EventHandler
type genericDiscoveredCNIHandler struct {
	handler DiscoveredCNIEventHandler
}

func (h genericDiscoveredCNIHandler) Create(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.DiscoveredCNI)
	if !ok {
		return errors.Errorf("internal error: DiscoveredCNI handler received event for %T", object)
	}
	return h.handler.CreateDiscoveredCNI(obj)
}

func (h genericDiscoveredCNIHandler) Delete(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.DiscoveredCNI)
	if !ok {
		return errors.Errorf("internal error: DiscoveredCNI handler received event for %T", object)
	}
	return h.handler.DeleteDiscoveredCNI(obj)
}

func (h genericDiscoveredCNIHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*internal_gloo_solo_io_v2.DiscoveredCNI)
	if !ok {
		return errors.Errorf("internal error: DiscoveredCNI handler received event for %T", old)
	}
	objNew, ok := new.(*internal_gloo_solo_io_v2.DiscoveredCNI)
	if !ok {
		return errors.Errorf("internal error: DiscoveredCNI handler received event for %T", new)
	}
	return h.handler.UpdateDiscoveredCNI(objOld, objNew)
}

func (h genericDiscoveredCNIHandler) Generic(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.DiscoveredCNI)
	if !ok {
		return errors.Errorf("internal error: DiscoveredCNI handler received event for %T", object)
	}
	return h.handler.GenericDiscoveredCNI(obj)
}

// Handle events for the PortalConfig Resource
// DEPRECATED: Prefer reconciler pattern.
type PortalConfigEventHandler interface {
	CreatePortalConfig(obj *internal_gloo_solo_io_v2.PortalConfig) error
	UpdatePortalConfig(old, new *internal_gloo_solo_io_v2.PortalConfig) error
	DeletePortalConfig(obj *internal_gloo_solo_io_v2.PortalConfig) error
	GenericPortalConfig(obj *internal_gloo_solo_io_v2.PortalConfig) error
}

type PortalConfigEventHandlerFuncs struct {
	OnCreate  func(obj *internal_gloo_solo_io_v2.PortalConfig) error
	OnUpdate  func(old, new *internal_gloo_solo_io_v2.PortalConfig) error
	OnDelete  func(obj *internal_gloo_solo_io_v2.PortalConfig) error
	OnGeneric func(obj *internal_gloo_solo_io_v2.PortalConfig) error
}

func (f *PortalConfigEventHandlerFuncs) CreatePortalConfig(obj *internal_gloo_solo_io_v2.PortalConfig) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *PortalConfigEventHandlerFuncs) DeletePortalConfig(obj *internal_gloo_solo_io_v2.PortalConfig) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *PortalConfigEventHandlerFuncs) UpdatePortalConfig(objOld, objNew *internal_gloo_solo_io_v2.PortalConfig) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *PortalConfigEventHandlerFuncs) GenericPortalConfig(obj *internal_gloo_solo_io_v2.PortalConfig) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type PortalConfigEventWatcher interface {
	AddEventHandler(ctx context.Context, h PortalConfigEventHandler, predicates ...predicate.Predicate) error
}

type portalConfigEventWatcher struct {
	watcher events.EventWatcher
}

func NewPortalConfigEventWatcher(name string, mgr manager.Manager) PortalConfigEventWatcher {
	return &portalConfigEventWatcher{
		watcher: events.NewWatcher(name, mgr, &internal_gloo_solo_io_v2.PortalConfig{}),
	}
}

func (c *portalConfigEventWatcher) AddEventHandler(ctx context.Context, h PortalConfigEventHandler, predicates ...predicate.Predicate) error {
	handler := genericPortalConfigHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericPortalConfigHandler implements a generic events.EventHandler
type genericPortalConfigHandler struct {
	handler PortalConfigEventHandler
}

func (h genericPortalConfigHandler) Create(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.PortalConfig)
	if !ok {
		return errors.Errorf("internal error: PortalConfig handler received event for %T", object)
	}
	return h.handler.CreatePortalConfig(obj)
}

func (h genericPortalConfigHandler) Delete(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.PortalConfig)
	if !ok {
		return errors.Errorf("internal error: PortalConfig handler received event for %T", object)
	}
	return h.handler.DeletePortalConfig(obj)
}

func (h genericPortalConfigHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*internal_gloo_solo_io_v2.PortalConfig)
	if !ok {
		return errors.Errorf("internal error: PortalConfig handler received event for %T", old)
	}
	objNew, ok := new.(*internal_gloo_solo_io_v2.PortalConfig)
	if !ok {
		return errors.Errorf("internal error: PortalConfig handler received event for %T", new)
	}
	return h.handler.UpdatePortalConfig(objOld, objNew)
}

func (h genericPortalConfigHandler) Generic(object client.Object) error {
	obj, ok := object.(*internal_gloo_solo_io_v2.PortalConfig)
	if !ok {
		return errors.Errorf("internal error: PortalConfig handler received event for %T", object)
	}
	return h.handler.GenericPortalConfig(obj)
}
