// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/internal/v2/spire.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *SpireRegistrationEntrySpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*SpireRegistrationEntrySpec)
	if !ok {
		that2, ok := that.(SpireRegistrationEntrySpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetSelectors()) != len(target.GetSelectors()) {
		return false
	}
	for idx, v := range m.GetSelectors() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetSelectors()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetSelectors()[idx]) {
				return false
			}
		}

	}

	if strings.Compare(m.GetParentId(), target.GetParentId()) != 0 {
		return false
	}

	if strings.Compare(m.GetSpiffeId(), target.GetSpiffeId()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetX509SvidTtl()).(equality.Equalizer); ok {
		if !h.Equal(target.GetX509SvidTtl()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetX509SvidTtl(), target.GetX509SvidTtl()) {
			return false
		}
	}

	if len(m.GetDnsNames()) != len(target.GetDnsNames()) {
		return false
	}
	for idx, v := range m.GetDnsNames() {

		if strings.Compare(v, target.GetDnsNames()[idx]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *SpireRegistrationEntryStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*SpireRegistrationEntryStatus)
	if !ok {
		that2, ok := that.(SpireRegistrationEntryStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetCommon()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCommon()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCommon(), target.GetCommon()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *SpireRegistrationEntrySpec_Selector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*SpireRegistrationEntrySpec_Selector)
	if !ok {
		that2, ok := that.(SpireRegistrationEntrySpec_Selector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetType(), target.GetType()) != 0 {
		return false
	}

	if strings.Compare(m.GetValue(), target.GetValue()) != 0 {
		return false
	}

	return true
}
