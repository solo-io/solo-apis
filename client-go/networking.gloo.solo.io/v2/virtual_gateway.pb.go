// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/networking/v2/virtual_gateway.proto

package v2

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/solo-io/protoc-gen-ext/extproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TLSConfig_TLSMode int32

const (
	// The SNI string presented by the client will be used as the match criterion in a
	// VirtualService TLS route to determine the destination service from the service registry.
	TLSConfig_PASSTHROUGH TLSConfig_TLSMode = 0
	// Secure connections with standard TLS semantics.
	TLSConfig_SIMPLE TLSConfig_TLSMode = 1
	// Secure connections to the downstream using mutual TLS by presenting server certificates for authentication.
	TLSConfig_MUTUAL TLSConfig_TLSMode = 2
	// Similar to the passthrough mode, except servers with this TLS mode do not require an associated VirtualService
	// to map from the SNI value to service in the registry. The destination details such as the service/subset/port
	// are encoded in the SNI value. The proxy will forward to the upstream (Envoy) cluster (a group of endpoints)
	// specified by the SNI value. This server is typically used to provide connectivity between services in disparate
	// L3 networks that otherwise do not have direct connectivity between their respective endpoints.
	// Use of this mode assumes that both the source and the destination are using Istio mTLS to secure traffic.
	// In order for this mode to be enabled, the gateway deployment must be configured with the ISTIO_META_ROUTER_MODE=sni-dnat
	// environment variable.
	TLSConfig_AUTO_PASSTHROUGH TLSConfig_TLSMode = 3
	// Secure connections from the downstream using mutual TLS by presenting server certificates for authentication.
	// Compared to Mutual mode, this mode uses certificates, representing gateway workload identity, generated automatically
	// by Istio for mTLS authentication. When this mode is used, all other fields in `TLSConfig` should be empty.
	TLSConfig_ISTIO_MUTUAL TLSConfig_TLSMode = 4
)

// Enum value maps for TLSConfig_TLSMode.
var (
	TLSConfig_TLSMode_name = map[int32]string{
		0: "PASSTHROUGH",
		1: "SIMPLE",
		2: "MUTUAL",
		3: "AUTO_PASSTHROUGH",
		4: "ISTIO_MUTUAL",
	}
	TLSConfig_TLSMode_value = map[string]int32{
		"PASSTHROUGH":      0,
		"SIMPLE":           1,
		"MUTUAL":           2,
		"AUTO_PASSTHROUGH": 3,
		"ISTIO_MUTUAL":     4,
	}
)

func (x TLSConfig_TLSMode) Enum() *TLSConfig_TLSMode {
	p := new(TLSConfig_TLSMode)
	*p = x
	return p
}

func (x TLSConfig_TLSMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TLSConfig_TLSMode) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_enumTypes[0].Descriptor()
}

func (TLSConfig_TLSMode) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_enumTypes[0]
}

func (x TLSConfig_TLSMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TLSConfig_TLSMode.Descriptor instead.
func (TLSConfig_TLSMode) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDescGZIP(), []int{1, 0}
}

type TLSConfig_Parameters_ProtocolVersion int32

const (
	// Automatically choose the optimal TLS version.
	TLSConfig_Parameters_TLS_AUTO TLSConfig_Parameters_ProtocolVersion = 0
	// TLS 1.0
	TLSConfig_Parameters_TLSv1_0 TLSConfig_Parameters_ProtocolVersion = 1
	// TLS 1.1
	TLSConfig_Parameters_TLSv1_1 TLSConfig_Parameters_ProtocolVersion = 2
	// TLS 1.2
	TLSConfig_Parameters_TLSv1_2 TLSConfig_Parameters_ProtocolVersion = 3
	// TLS 1.3
	TLSConfig_Parameters_TLSv1_3 TLSConfig_Parameters_ProtocolVersion = 4
)

// Enum value maps for TLSConfig_Parameters_ProtocolVersion.
var (
	TLSConfig_Parameters_ProtocolVersion_name = map[int32]string{
		0: "TLS_AUTO",
		1: "TLSv1_0",
		2: "TLSv1_1",
		3: "TLSv1_2",
		4: "TLSv1_3",
	}
	TLSConfig_Parameters_ProtocolVersion_value = map[string]int32{
		"TLS_AUTO": 0,
		"TLSv1_0":  1,
		"TLSv1_1":  2,
		"TLSv1_2":  3,
		"TLSv1_3":  4,
	}
)

func (x TLSConfig_Parameters_ProtocolVersion) Enum() *TLSConfig_Parameters_ProtocolVersion {
	p := new(TLSConfig_Parameters_ProtocolVersion)
	*p = x
	return p
}

func (x TLSConfig_Parameters_ProtocolVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TLSConfig_Parameters_ProtocolVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_enumTypes[1].Descriptor()
}

func (TLSConfig_Parameters_ProtocolVersion) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_enumTypes[1]
}

func (x TLSConfig_Parameters_ProtocolVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TLSConfig_Parameters_ProtocolVersion.Descriptor instead.
func (TLSConfig_Parameters_ProtocolVersion) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDescGZIP(), []int{1, 1, 0}
}

// `VirtualGateway` represents a logical gateway configuration served by Gateway workloads within
// the same workspace. The specification describes a set of ports that the virtual gateway listens
// for incoming or outgoing HTTP/TCP connections, the type of protocol to use, SNI configuration etc.
//
// For example, the following VirtualGateway resource configures the gateway to listen for incoming
// HTTP requests on port 80, and delegate the route configuration of the '*.bookinfo.com' hostname
// to be provided by the bookinfo workspace. The VirtualGateway is
// applied to a specific set of gateway pods/VMs with the `app:my-gateway-controller`
// label within the same workspace as the VirtualGateway resource.
//
// ```yaml
// apiVersion: networking.gloo.solo.io/v2
// kind: VirtualGateway
// metadata:
//
//	name: my-gateway
//	namespace: some-config-namespace
//	labels:
//	  workspace.solo.io/exported: 'true'
//
// spec:
//
//	workloads:
//	  - selector:
//	      labels:
//	        app: my-gateway-controller
//	listeners:
//	  - port:
//	      number: 80
//	    allowedRouteTables:
//	      - host: '*.bookinfo.com'
//	        selector:
//	          workspace: bookinfo
//
// ```
// For example, the following VirtualGateway resource configures the gateway to listen for incoming
// HTTP requests on port 80, delegate any `*.foo.com` request to the `HTTPRouteTable` resource(s)
// provided by the `foo-ws` workspace. Further, on the same port 80, it also delegates any
// `*.bar.com` request to the route configurations provided by the `bar-ws` workspace.
//
// ```yaml
// apiVersion: networking.gloo.solo.io/v2
// kind: VirtualGateway
// metadata:
//
//	name: my-gateway
//	namespace: some-config-namespace
//	labels:
//	  workspace.solo.io/exported: 'true'
//
// spec:
//
//	workloads:
//	  - selector:
//	      labels:
//	        app: my-gateway-controller
//	listeners:
//	  - port:
//	      number: 80
//	    allowedRouteTables:
//	      - host: '*.foo.com'
//	        selector:
//	          workspace: foo-ws
//	      - host: '*.bar.com'
//	        selector:
//	          workspace: bar-ws
//
// ```
//
// For example, the following VirtualGateway resource configures the gateway to act
// as a load balancer listening on port 80 and 9080 (http), 443 (https), and
// 9443(https) for ingress.  The VirtualGateway resource is
// applied to a specific set of gateway pods/VMs with the `app: my-gateway-controller`
// label within the same workspace. The route table(s) associated with each
// port 80, 9443 and 443 must be provided by the foo-ws workspace, with hosts that
// match `*.foo.com`. The route table(s) for port 9080 must be provided by the bar-ws
// workspace with hosts that match `*.bar.com`.
//
// ```yaml
// apiVersion: networking.gloo.solo.io/v2
// kind: VirtualGateway
// metadata:
//
//	name: my-gateway
//	namespace: some-config-namespace
//	labels:
//	  workspace.solo.io/exported: 'true'
//
// spec:
//
//	workloads:
//	  - selector:
//	      labels:
//	        app: my-gateway-controller
//	listeners:
//	  - port:
//	      number: 80
//	    httpsRedirect: true
//	    allowedRouteTables:
//	      - host: '*.foo.com'
//	        selector:
//	          workspace: foo-ws
//	  - port:
//	      number: 443
//	    tls:
//	      mode: SIMPLE
//	      files:
//	        privateKey: /etc/certs/privatekey.pem
//	        serverCert: /etc/certs/servercert.pem
//	    allowedRouteTables:
//	      - host: '*.foo.com'
//	        selector:
//	          workspace: foo-ws
//	  - port:
//	      number: 9443
//	    tls:
//	      mode: SIMPLE
//	      secretName: my-secret
//	    allowedRouteTables:
//	      - host: '*.foo.com'
//	        selector:
//	          workspace: foo-ws
//	  - port:
//	      number: 9080
//	    allowedRouteTables:
//	      - host: '*.bar.com'
//	        selector:
//	          workspace: foo-ws
//
// ```
// For example, the following VirtualGateway resource configures the gateway to listen for incoming
// HTTP requests on port 80, delegate any `*.foo.com` request to the `HTTPRouteTable` resource(s)
// provided by the `foo-ws` workspace. This routeTable is restricted to using CloudProvider functionality
// which routes to cloud functions `backend-function-*` in region us-east-2 and which assume the
// `dev-team-B-*` IAM role.
//
// ```yaml
// apiVersion: networking.gloo.solo.io/v2
// kind: VirtualGateway
// metadata:
//
//	name: my-gateway
//	namespace: some-config-namespace
//	labels:
//	  workspace.solo.io/exported: 'true'
//
// spec:
//
//	workloads:
//	  - selector:
//	      labels:
//	        app: my-gateway-controller
//	listeners:
//	  - port:
//	      number: 80
//	    allowedRouteTables:
//	      - host: '*.foo.com'
//	        selector:
//	          workspace: foo-ws
//
// ```
type VirtualGatewaySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional: Select which gateway workloads implement this virtual gateway in the same workspace.
	// A gateway workload will be selected if it matches any of the provided selectors.
	// For 'selector.name', specify the gateway service's name.
	// For 'selector.labels', specify the gateway service's 'spec.selector' label.
	// If workloads is nil, it will be applied to all gateway workloads.
	Workloads []*v2.WorkloadSelector `protobuf:"bytes,1,rep,name=workloads,proto3" json:"workloads,omitempty"`
	// Required: One or more listeners for the virtual gateway.
	// Each listener specifies a port and virtual host(s) for traffic received on those ports.
	Listeners []*VirtualGatewaySpec_Listener `protobuf:"bytes,2,rep,name=listeners,proto3" json:"listeners,omitempty"`
}

func (x *VirtualGatewaySpec) Reset() {
	*x = VirtualGatewaySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec) ProtoMessage() {}

func (x *VirtualGatewaySpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDescGZIP(), []int{0}
}

func (x *VirtualGatewaySpec) GetWorkloads() []*v2.WorkloadSelector {
	if x != nil {
		return x.Workloads
	}
	return nil
}

func (x *VirtualGatewaySpec) GetListeners() []*VirtualGatewaySpec_Listener {
	if x != nil {
		return x.Listeners
	}
	return nil
}

// TLSConfig contains the options necessary to configure a listener to use TLS
type TLSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Certificates:
	//
	//	*TLSConfig_SecretName
	//	*TLSConfig_Files_
	Certificates isTLSConfig_Certificates `protobuf_oneof:"certificates"`
	// Verify that the Subject Alternative Name in the peer certificate is one of the specified values.
	// note that a ca_certs must be provided if this option is used.
	VerifySubjectAltName []string              `protobuf:"bytes,3,rep,name=verify_subject_alt_name,json=verifySubjectAltName,proto3" json:"verify_subject_alt_name,omitempty"`
	Parameters           *TLSConfig_Parameters `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// TLS modes enforced by the proxy
	Mode TLSConfig_TLSMode `protobuf:"varint,5,opt,name=mode,proto3,enum=networking.gloo.solo.io.TLSConfig_TLSMode" json:"mode,omitempty"`
}

func (x *TLSConfig) Reset() {
	*x = TLSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSConfig) ProtoMessage() {}

func (x *TLSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSConfig.ProtoReflect.Descriptor instead.
func (*TLSConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDescGZIP(), []int{1}
}

func (m *TLSConfig) GetCertificates() isTLSConfig_Certificates {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (x *TLSConfig) GetSecretName() string {
	if x, ok := x.GetCertificates().(*TLSConfig_SecretName); ok {
		return x.SecretName
	}
	return ""
}

func (x *TLSConfig) GetFiles() *TLSConfig_Files {
	if x, ok := x.GetCertificates().(*TLSConfig_Files_); ok {
		return x.Files
	}
	return nil
}

func (x *TLSConfig) GetVerifySubjectAltName() []string {
	if x != nil {
		return x.VerifySubjectAltName
	}
	return nil
}

func (x *TLSConfig) GetParameters() *TLSConfig_Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *TLSConfig) GetMode() TLSConfig_TLSMode {
	if x != nil {
		return x.Mode
	}
	return TLSConfig_PASSTHROUGH
}

type isTLSConfig_Certificates interface {
	isTLSConfig_Certificates()
}

type TLSConfig_SecretName struct {
	// SecretName is the name of the kubernetes secret which contains the ssl secret. Each
	// Gateway will look for a secret with this name on its own local cluster in its own namespace.
	SecretName string `protobuf:"bytes,1,opt,name=secret_name,json=secretName,proto3,oneof"`
}

type TLSConfig_Files_ struct {
	// Files reference paths to certificates which can be read by the proxy off of its local filesystem
	Files *TLSConfig_Files `protobuf:"bytes,2,opt,name=files,proto3,oneof"`
}

func (*TLSConfig_SecretName) isTLSConfig_Certificates() {}

func (*TLSConfig_Files_) isTLSConfig_Certificates() {}

type VirtualGatewayStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state and workspace conditions of the applied resource.
	Common *v2.Status `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	// The number of route tables allowed to bind to this virtual gateway.
	RouteTablesCount uint32 `protobuf:"varint,2,opt,name=route_tables_count,json=routeTablesCount,proto3" json:"route_tables_count,omitempty"`
	// The number of workloads selected by this virtual gateway.
	SelectedWorkloadsCount uint32 `protobuf:"varint,3,opt,name=selected_workloads_count,json=selectedWorkloadsCount,proto3" json:"selected_workloads_count,omitempty"`
	// The number of external services exposed by this virtual gateway.
	ExternalServicesCount uint32 `protobuf:"varint,4,opt,name=external_services_count,json=externalServicesCount,proto3" json:"external_services_count,omitempty"`
}

func (x *VirtualGatewayStatus) Reset() {
	*x = VirtualGatewayStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewayStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewayStatus) ProtoMessage() {}

func (x *VirtualGatewayStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewayStatus.ProtoReflect.Descriptor instead.
func (*VirtualGatewayStatus) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDescGZIP(), []int{2}
}

func (x *VirtualGatewayStatus) GetCommon() *v2.Status {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *VirtualGatewayStatus) GetRouteTablesCount() uint32 {
	if x != nil {
		return x.RouteTablesCount
	}
	return 0
}

func (x *VirtualGatewayStatus) GetSelectedWorkloadsCount() uint32 {
	if x != nil {
		return x.SelectedWorkloadsCount
	}
	return 0
}

func (x *VirtualGatewayStatus) GetExternalServicesCount() uint32 {
	if x != nil {
		return x.ExternalServicesCount
	}
	return 0
}

type VirtualGatewayReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workspaces map[string]*v2.Report `protobuf:"bytes,1,rep,name=workspaces,proto3" json:"workspaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A list of route tables allowed to bind to this virtual gateway.
	AllowedRouteTables []*v2.ObjectReference `protobuf:"bytes,2,rep,name=allowed_route_tables,json=allowedRouteTables,proto3" json:"allowed_route_tables,omitempty"`
	// A list of workloads selected by this virtual gateway.
	SelectedWorkloads []*v2.ObjectReference `protobuf:"bytes,3,rep,name=selected_workloads,json=selectedWorkloads,proto3" json:"selected_workloads,omitempty"`
	// list of external services exposed by this virtual gateway.
	ExposedExternalServices []*v2.ObjectReference `protobuf:"bytes,4,rep,name=exposed_external_services,json=exposedExternalServices,proto3" json:"exposed_external_services,omitempty"`
	// A list of listener/RouteTable combinations showing which route tables are attached to which listeners.
	ListenerRouteTables []*ListenerRouteTable `protobuf:"bytes,5,rep,name=listener_route_tables,json=listenerRouteTables,proto3" json:"listener_route_tables,omitempty"`
}

func (x *VirtualGatewayReport) Reset() {
	*x = VirtualGatewayReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewayReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewayReport) ProtoMessage() {}

func (x *VirtualGatewayReport) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewayReport.ProtoReflect.Descriptor instead.
func (*VirtualGatewayReport) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDescGZIP(), []int{3}
}

func (x *VirtualGatewayReport) GetWorkspaces() map[string]*v2.Report {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

func (x *VirtualGatewayReport) GetAllowedRouteTables() []*v2.ObjectReference {
	if x != nil {
		return x.AllowedRouteTables
	}
	return nil
}

func (x *VirtualGatewayReport) GetSelectedWorkloads() []*v2.ObjectReference {
	if x != nil {
		return x.SelectedWorkloads
	}
	return nil
}

func (x *VirtualGatewayReport) GetExposedExternalServices() []*v2.ObjectReference {
	if x != nil {
		return x.ExposedExternalServices
	}
	return nil
}

func (x *VirtualGatewayReport) GetListenerRouteTables() []*ListenerRouteTable {
	if x != nil {
		return x.ListenerRouteTables
	}
	return nil
}

// ListenerRouteTable represents an association between a RouteTable and a particular VirtualGateway listener.
type ListenerRouteTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of the listener in the list of listeners on the virtual gateway
	ListenerIdx uint32 `protobuf:"varint,1,opt,name=listener_idx,json=listenerIdx,proto3" json:"listener_idx,omitempty"`
	// A reference to a route table
	RouteTableRef *v2.ObjectReference `protobuf:"bytes,2,opt,name=route_table_ref,json=routeTableRef,proto3" json:"route_table_ref,omitempty"`
}

func (x *ListenerRouteTable) Reset() {
	*x = ListenerRouteTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenerRouteTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerRouteTable) ProtoMessage() {}

func (x *ListenerRouteTable) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerRouteTable.ProtoReflect.Descriptor instead.
func (*ListenerRouteTable) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDescGZIP(), []int{4}
}

func (x *ListenerRouteTable) GetListenerIdx() uint32 {
	if x != nil {
		return x.ListenerIdx
	}
	return 0
}

func (x *ListenerRouteTable) GetRouteTableRef() *v2.ObjectReference {
	if x != nil {
		return x.RouteTableRef
	}
	return nil
}

type VirtualGatewaySpec_Listener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required: The port on the gateway workload's service on
	// which the gateway will listen for connections to route.
	Port *v2.PortSelector `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
	// Optional: settings for configuring TLS behavior for this listener
	// Specify either tls or httpsRedirect but not both.
	//
	// Types that are assignable to TlsSettings:
	//
	//	*VirtualGatewaySpec_Listener_Tls
	//	*VirtualGatewaySpec_Listener_HttpsRedirect
	TlsSettings isVirtualGatewaySpec_Listener_TlsSettings `protobuf_oneof:"tls_settings"`
	// Required: choose ONE type of listener, http or tcp, or tls.
	// Defaults to http.
	//
	// Types that are assignable to ListenerType:
	//
	//	*VirtualGatewaySpec_Listener_Http
	//	*VirtualGatewaySpec_Listener_Tcp
	ListenerType isVirtualGatewaySpec_Listener_ListenerType `protobuf_oneof:"listener_type"`
	// Optional: Filter RouteTables which can bind to this listener by the host names and object metadata.
	// Wildcard matching for host name is supported here.
	// If omitted, any route table will be allowed to bind to this VirtualGateway.
	AllowedRouteTables []*VirtualGatewaySpec_Listener_RouteTableFilter `protobuf:"bytes,6,rep,name=allowed_route_tables,json=allowedRouteTables,proto3" json:"allowed_route_tables,omitempty"`
	// Optional: List of ExternalServices exposed by this VirtualGateway.
	// If empty, any ExternalService will be exposed by this VirtualGateway.
	// Specifically used for configuring egress traffic.
	ExposedExternalServices []*VirtualGatewaySpec_Listener_ExternalServiceFilter `protobuf:"bytes,9,rep,name=exposed_external_services,json=exposedExternalServices,proto3" json:"exposed_external_services,omitempty"`
	// Optional: Apply an application protocol to use when deciding what additional capabilities to
	// add to the gateway, such as routing and rich metrics. If no protocol is selected, it will be inferred
	// from the listener type and its TLS settings. With an `http` listener, the `app_protocol` will default to
	// `HTTP` if there are no TLS settings and `HTTPS` if there are. With a `tcp` listener, the `app_protocol`
	// will default to `TCP` or `TLS` depending on the presence of TLS settings.
	AppProtocol string `protobuf:"bytes,7,opt,name=app_protocol,json=appProtocol,proto3" json:"app_protocol,omitempty"`
}

func (x *VirtualGatewaySpec_Listener) Reset() {
	*x = VirtualGatewaySpec_Listener{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_Listener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_Listener) ProtoMessage() {}

func (x *VirtualGatewaySpec_Listener) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_Listener.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_Listener) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDescGZIP(), []int{0, 0}
}

func (x *VirtualGatewaySpec_Listener) GetPort() *v2.PortSelector {
	if x != nil {
		return x.Port
	}
	return nil
}

func (m *VirtualGatewaySpec_Listener) GetTlsSettings() isVirtualGatewaySpec_Listener_TlsSettings {
	if m != nil {
		return m.TlsSettings
	}
	return nil
}

func (x *VirtualGatewaySpec_Listener) GetTls() *TLSConfig {
	if x, ok := x.GetTlsSettings().(*VirtualGatewaySpec_Listener_Tls); ok {
		return x.Tls
	}
	return nil
}

func (x *VirtualGatewaySpec_Listener) GetHttpsRedirect() bool {
	if x, ok := x.GetTlsSettings().(*VirtualGatewaySpec_Listener_HttpsRedirect); ok {
		return x.HttpsRedirect
	}
	return false
}

func (m *VirtualGatewaySpec_Listener) GetListenerType() isVirtualGatewaySpec_Listener_ListenerType {
	if m != nil {
		return m.ListenerType
	}
	return nil
}

func (x *VirtualGatewaySpec_Listener) GetHttp() *VirtualGatewaySpec_Listener_HTTPServer {
	if x, ok := x.GetListenerType().(*VirtualGatewaySpec_Listener_Http); ok {
		return x.Http
	}
	return nil
}

func (x *VirtualGatewaySpec_Listener) GetTcp() *VirtualGatewaySpec_Listener_TCPServer {
	if x, ok := x.GetListenerType().(*VirtualGatewaySpec_Listener_Tcp); ok {
		return x.Tcp
	}
	return nil
}

func (x *VirtualGatewaySpec_Listener) GetAllowedRouteTables() []*VirtualGatewaySpec_Listener_RouteTableFilter {
	if x != nil {
		return x.AllowedRouteTables
	}
	return nil
}

func (x *VirtualGatewaySpec_Listener) GetExposedExternalServices() []*VirtualGatewaySpec_Listener_ExternalServiceFilter {
	if x != nil {
		return x.ExposedExternalServices
	}
	return nil
}

func (x *VirtualGatewaySpec_Listener) GetAppProtocol() string {
	if x != nil {
		return x.AppProtocol
	}
	return ""
}

type isVirtualGatewaySpec_Listener_TlsSettings interface {
	isVirtualGatewaySpec_Listener_TlsSettings()
}

type VirtualGatewaySpec_Listener_Tls struct {
	// TLS configure for a virtual host or listener to use TLS
	Tls *TLSConfig `protobuf:"bytes,2,opt,name=tls,proto3,oneof"`
}

type VirtualGatewaySpec_Listener_HttpsRedirect struct {
	// If set to true, the load balancer will send a 301 redirect for all http connections,
	// asking the clients to use HTTPS.
	HttpsRedirect bool `protobuf:"varint,3,opt,name=https_redirect,json=httpsRedirect,proto3,oneof"`
}

func (*VirtualGatewaySpec_Listener_Tls) isVirtualGatewaySpec_Listener_TlsSettings() {}

func (*VirtualGatewaySpec_Listener_HttpsRedirect) isVirtualGatewaySpec_Listener_TlsSettings() {}

type isVirtualGatewaySpec_Listener_ListenerType interface {
	isVirtualGatewaySpec_Listener_ListenerType()
}

type VirtualGatewaySpec_Listener_Http struct {
	// Serves http requests on the hosts specified for a given listener.
	// The listener will route traffic based on the HTTPRouteTable resource(s)
	// that is attached to the virtual gateway.
	Http *VirtualGatewaySpec_Listener_HTTPServer `protobuf:"bytes,4,opt,name=http,proto3,oneof"`
}

type VirtualGatewaySpec_Listener_Tcp struct {
	// tcp routes on based on sni server name
	// requires tls to be enabled
	Tcp *VirtualGatewaySpec_Listener_TCPServer `protobuf:"bytes,5,opt,name=tcp,proto3,oneof"`
}

func (*VirtualGatewaySpec_Listener_Http) isVirtualGatewaySpec_Listener_ListenerType() {}

func (*VirtualGatewaySpec_Listener_Tcp) isVirtualGatewaySpec_Listener_ListenerType() {}

// HTTP server indicates HTTP routes will be served for RouteTables which select this gateway.
type VirtualGatewaySpec_Listener_HTTPServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VirtualGatewaySpec_Listener_HTTPServer) Reset() {
	*x = VirtualGatewaySpec_Listener_HTTPServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_Listener_HTTPServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_Listener_HTTPServer) ProtoMessage() {}

func (x *VirtualGatewaySpec_Listener_HTTPServer) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_Listener_HTTPServer.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_Listener_HTTPServer) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDescGZIP(), []int{0, 0, 0}
}

// @exclude TODO: TCPServer
type VirtualGatewaySpec_Listener_TCPServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VirtualGatewaySpec_Listener_TCPServer) Reset() {
	*x = VirtualGatewaySpec_Listener_TCPServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_Listener_TCPServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_Listener_TCPServer) ProtoMessage() {}

func (x *VirtualGatewaySpec_Listener_TCPServer) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_Listener_TCPServer.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_Listener_TCPServer) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDescGZIP(), []int{0, 0, 1}
}

// Filter route tables which can attach to a VGW by host name as well as an object selector.
type VirtualGatewaySpec_Listener_RouteTableFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required: host name to select. Can use * to match host name patterns in multiple objects.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Optional: filter out route tables which do not match the selector, if provided.
	Selector *v2.ObjectSelector `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
	// Optional: Restrict the routes that can be applied to this VirtualGateway to a set of route filter criteria.
	// If empty, all the routes that belong to the matching route tables are allowed to bind to this VirtualGateway.
	AllowedRoutes []*v2.RouteFilter `protobuf:"bytes,8,rep,name=allowed_routes,json=allowedRoutes,proto3" json:"allowed_routes,omitempty"`
}

func (x *VirtualGatewaySpec_Listener_RouteTableFilter) Reset() {
	*x = VirtualGatewaySpec_Listener_RouteTableFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_Listener_RouteTableFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_Listener_RouteTableFilter) ProtoMessage() {}

func (x *VirtualGatewaySpec_Listener_RouteTableFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_Listener_RouteTableFilter.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_Listener_RouteTableFilter) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *VirtualGatewaySpec_Listener_RouteTableFilter) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *VirtualGatewaySpec_Listener_RouteTableFilter) GetSelector() *v2.ObjectSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *VirtualGatewaySpec_Listener_RouteTableFilter) GetAllowedRoutes() []*v2.RouteFilter {
	if x != nil {
		return x.AllowedRoutes
	}
	return nil
}

// Filter ExternalServices which can attach to a VGW by host name.
type VirtualGatewaySpec_Listener_ExternalServiceFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required: host name to select. Can use * to match host name patterns in multiple objects.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Optional: filter out ExternalServices which do not match the selector, if provided.
	Selector *v2.ObjectSelector `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *VirtualGatewaySpec_Listener_ExternalServiceFilter) Reset() {
	*x = VirtualGatewaySpec_Listener_ExternalServiceFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_Listener_ExternalServiceFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_Listener_ExternalServiceFilter) ProtoMessage() {}

func (x *VirtualGatewaySpec_Listener_ExternalServiceFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_Listener_ExternalServiceFilter.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_Listener_ExternalServiceFilter) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *VirtualGatewaySpec_Listener_ExternalServiceFilter) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *VirtualGatewaySpec_Listener_ExternalServiceFilter) GetSelector() *v2.ObjectSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

type TLSConfig_Files struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required if tlsMode is `SIMPLE` or `MUTUAL`. The path to the file that
	// contains the server side TLS certificate.
	ServerCert string `protobuf:"bytes,1,opt,name=server_cert,json=serverCert,proto3" json:"server_cert,omitempty"`
	// Required if tlsMode is `SIMPLE` or `MUTUAL`. The path to the file that
	// contains the server's private key.
	PrivateKey string `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Required if tlsMode is `MUTUAL`. The path to the file that contains the
	// certificate authority(CA) certificates for validating client cert.
	CaCerts string `protobuf:"bytes,3,opt,name=ca_certs,json=caCerts,proto3" json:"ca_certs,omitempty"`
}

func (x *TLSConfig_Files) Reset() {
	*x = TLSConfig_Files{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSConfig_Files) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSConfig_Files) ProtoMessage() {}

func (x *TLSConfig_Files) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSConfig_Files.ProtoReflect.Descriptor instead.
func (*TLSConfig_Files) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDescGZIP(), []int{1, 0}
}

func (x *TLSConfig_Files) GetServerCert() string {
	if x != nil {
		return x.ServerCert
	}
	return ""
}

func (x *TLSConfig_Files) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *TLSConfig_Files) GetCaCerts() string {
	if x != nil {
		return x.CaCerts
	}
	return ""
}

// General TLS parameters. See the [envoy docs](https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/transport_sockets/tls/v3/common.proto#enum-extensions-transport-sockets-tls-v3-tlsparameters-tlsprotocol)
// for more information on the meaning of these values.
type TLSConfig_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinimumProtocolVersion TLSConfig_Parameters_ProtocolVersion `protobuf:"varint,1,opt,name=minimum_protocol_version,json=minimumProtocolVersion,proto3,enum=networking.gloo.solo.io.TLSConfig_Parameters_ProtocolVersion" json:"minimum_protocol_version,omitempty"`
	MaximumProtocolVersion TLSConfig_Parameters_ProtocolVersion `protobuf:"varint,2,opt,name=maximum_protocol_version,json=maximumProtocolVersion,proto3,enum=networking.gloo.solo.io.TLSConfig_Parameters_ProtocolVersion" json:"maximum_protocol_version,omitempty"`
	CipherSuites           []string                             `protobuf:"bytes,3,rep,name=cipher_suites,json=cipherSuites,proto3" json:"cipher_suites,omitempty"`
}

func (x *TLSConfig_Parameters) Reset() {
	*x = TLSConfig_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSConfig_Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSConfig_Parameters) ProtoMessage() {}

func (x *TLSConfig_Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSConfig_Parameters.ProtoReflect.Descriptor instead.
func (*TLSConfig_Parameters) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDescGZIP(), []int{1, 1}
}

func (x *TLSConfig_Parameters) GetMinimumProtocolVersion() TLSConfig_Parameters_ProtocolVersion {
	if x != nil {
		return x.MinimumProtocolVersion
	}
	return TLSConfig_Parameters_TLS_AUTO
}

func (x *TLSConfig_Parameters) GetMaximumProtocolVersion() TLSConfig_Parameters_ProtocolVersion {
	if x != nil {
		return x.MaximumProtocolVersion
	}
	return TLSConfig_Parameters_TLS_AUTO
}

func (x *TLSConfig_Parameters) GetCipherSuites() []string {
	if x != nil {
		return x.CipherSuites
	}
	return nil
}

var File_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDesc = []byte{
	0x0a, 0x5f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x17, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x1a, 0x12, 0x65, 0x78, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x50,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d,
	0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f,
	0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f,
	0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xff, 0x08, 0x0a, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x43, 0x0a, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12,
	0x52, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x73, 0x1a, 0xcf, 0x07, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54,
	0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12,
	0x27, 0x0a, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x01, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12,
	0x52, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x2e, 0x54, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x01, 0x52, 0x03,
	0x74, 0x63, 0x70, 0x12, 0x77, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x45, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x86, 0x01, 0x0a,
	0x19, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x17, 0x65, 0x78,
	0x70, 0x6f, 0x73, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x0c, 0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x0b, 0x0a, 0x09, 0x54, 0x43, 0x50, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x1a, 0xb0, 0x01, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x47, 0x0a,
	0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x6c, 0x0a, 0x15, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x74, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x83, 0x07, 0x0a, 0x09, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x4d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x4c,
	0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3e,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x4c, 0x53, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x1a, 0x64,
	0x0a, 0x05, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x43,
	0x65, 0x72, 0x74, 0x73, 0x1a, 0xf8, 0x02, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x77, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x18,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f,
	0x73, 0x75, 0x69, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x73, 0x22, 0x53, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a,
	0x08, 0x54, 0x4c, 0x53, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54,
	0x4c, 0x53, 0x76, 0x31, 0x5f, 0x30, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x4c, 0x53, 0x76,
	0x31, 0x5f, 0x31, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x4c, 0x53, 0x76, 0x31, 0x5f, 0x32,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x4c, 0x53, 0x76, 0x31, 0x5f, 0x33, 0x10, 0x04, 0x22,
	0x5a, 0x0a, 0x07, 0x54, 0x4c, 0x53, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41,
	0x53, 0x53, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x55, 0x54, 0x55, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x53, 0x54,
	0x49, 0x4f, 0x5f, 0x4d, 0x55, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x04, 0x42, 0x0e, 0x0a, 0x0c, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x14,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc1, 0x04, 0x0a, 0x14, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x5d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x56, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x60,
	0x0a, 0x19, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x5f, 0x0a, 0x15, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x13, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x1a, 0x5a, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x85, 0x01,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x78, 0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x66, 0x42, 0x5b, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f,
	0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x2f, 0x76, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x32, 0xc0, 0xf5, 0x04, 0x01, 0xb8, 0xf5, 0x04, 0x01, 0xd0, 0xf5,
	0x04, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDescData = file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_goTypes = []interface{}{
	(TLSConfig_TLSMode)(0),                                    // 0: networking.gloo.solo.io.TLSConfig.TLSMode
	(TLSConfig_Parameters_ProtocolVersion)(0),                 // 1: networking.gloo.solo.io.TLSConfig.Parameters.ProtocolVersion
	(*VirtualGatewaySpec)(nil),                                // 2: networking.gloo.solo.io.VirtualGatewaySpec
	(*TLSConfig)(nil),                                         // 3: networking.gloo.solo.io.TLSConfig
	(*VirtualGatewayStatus)(nil),                              // 4: networking.gloo.solo.io.VirtualGatewayStatus
	(*VirtualGatewayReport)(nil),                              // 5: networking.gloo.solo.io.VirtualGatewayReport
	(*ListenerRouteTable)(nil),                                // 6: networking.gloo.solo.io.ListenerRouteTable
	(*VirtualGatewaySpec_Listener)(nil),                       // 7: networking.gloo.solo.io.VirtualGatewaySpec.Listener
	(*VirtualGatewaySpec_Listener_HTTPServer)(nil),            // 8: networking.gloo.solo.io.VirtualGatewaySpec.Listener.HTTPServer
	(*VirtualGatewaySpec_Listener_TCPServer)(nil),             // 9: networking.gloo.solo.io.VirtualGatewaySpec.Listener.TCPServer
	(*VirtualGatewaySpec_Listener_RouteTableFilter)(nil),      // 10: networking.gloo.solo.io.VirtualGatewaySpec.Listener.RouteTableFilter
	(*VirtualGatewaySpec_Listener_ExternalServiceFilter)(nil), // 11: networking.gloo.solo.io.VirtualGatewaySpec.Listener.ExternalServiceFilter
	(*TLSConfig_Files)(nil),                                   // 12: networking.gloo.solo.io.TLSConfig.Files
	(*TLSConfig_Parameters)(nil),                              // 13: networking.gloo.solo.io.TLSConfig.Parameters
	nil,                                                       // 14: networking.gloo.solo.io.VirtualGatewayReport.WorkspacesEntry
	(*v2.WorkloadSelector)(nil),                               // 15: common.gloo.solo.io.WorkloadSelector
	(*v2.Status)(nil),                                         // 16: common.gloo.solo.io.Status
	(*v2.ObjectReference)(nil),                                // 17: common.gloo.solo.io.ObjectReference
	(*v2.PortSelector)(nil),                                   // 18: common.gloo.solo.io.PortSelector
	(*v2.ObjectSelector)(nil),                                 // 19: common.gloo.solo.io.ObjectSelector
	(*v2.RouteFilter)(nil),                                    // 20: common.gloo.solo.io.RouteFilter
	(*v2.Report)(nil),                                         // 21: common.gloo.solo.io.Report
}
var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_depIdxs = []int32{
	15, // 0: networking.gloo.solo.io.VirtualGatewaySpec.workloads:type_name -> common.gloo.solo.io.WorkloadSelector
	7,  // 1: networking.gloo.solo.io.VirtualGatewaySpec.listeners:type_name -> networking.gloo.solo.io.VirtualGatewaySpec.Listener
	12, // 2: networking.gloo.solo.io.TLSConfig.files:type_name -> networking.gloo.solo.io.TLSConfig.Files
	13, // 3: networking.gloo.solo.io.TLSConfig.parameters:type_name -> networking.gloo.solo.io.TLSConfig.Parameters
	0,  // 4: networking.gloo.solo.io.TLSConfig.mode:type_name -> networking.gloo.solo.io.TLSConfig.TLSMode
	16, // 5: networking.gloo.solo.io.VirtualGatewayStatus.common:type_name -> common.gloo.solo.io.Status
	14, // 6: networking.gloo.solo.io.VirtualGatewayReport.workspaces:type_name -> networking.gloo.solo.io.VirtualGatewayReport.WorkspacesEntry
	17, // 7: networking.gloo.solo.io.VirtualGatewayReport.allowed_route_tables:type_name -> common.gloo.solo.io.ObjectReference
	17, // 8: networking.gloo.solo.io.VirtualGatewayReport.selected_workloads:type_name -> common.gloo.solo.io.ObjectReference
	17, // 9: networking.gloo.solo.io.VirtualGatewayReport.exposed_external_services:type_name -> common.gloo.solo.io.ObjectReference
	6,  // 10: networking.gloo.solo.io.VirtualGatewayReport.listener_route_tables:type_name -> networking.gloo.solo.io.ListenerRouteTable
	17, // 11: networking.gloo.solo.io.ListenerRouteTable.route_table_ref:type_name -> common.gloo.solo.io.ObjectReference
	18, // 12: networking.gloo.solo.io.VirtualGatewaySpec.Listener.port:type_name -> common.gloo.solo.io.PortSelector
	3,  // 13: networking.gloo.solo.io.VirtualGatewaySpec.Listener.tls:type_name -> networking.gloo.solo.io.TLSConfig
	8,  // 14: networking.gloo.solo.io.VirtualGatewaySpec.Listener.http:type_name -> networking.gloo.solo.io.VirtualGatewaySpec.Listener.HTTPServer
	9,  // 15: networking.gloo.solo.io.VirtualGatewaySpec.Listener.tcp:type_name -> networking.gloo.solo.io.VirtualGatewaySpec.Listener.TCPServer
	10, // 16: networking.gloo.solo.io.VirtualGatewaySpec.Listener.allowed_route_tables:type_name -> networking.gloo.solo.io.VirtualGatewaySpec.Listener.RouteTableFilter
	11, // 17: networking.gloo.solo.io.VirtualGatewaySpec.Listener.exposed_external_services:type_name -> networking.gloo.solo.io.VirtualGatewaySpec.Listener.ExternalServiceFilter
	19, // 18: networking.gloo.solo.io.VirtualGatewaySpec.Listener.RouteTableFilter.selector:type_name -> common.gloo.solo.io.ObjectSelector
	20, // 19: networking.gloo.solo.io.VirtualGatewaySpec.Listener.RouteTableFilter.allowed_routes:type_name -> common.gloo.solo.io.RouteFilter
	19, // 20: networking.gloo.solo.io.VirtualGatewaySpec.Listener.ExternalServiceFilter.selector:type_name -> common.gloo.solo.io.ObjectSelector
	1,  // 21: networking.gloo.solo.io.TLSConfig.Parameters.minimum_protocol_version:type_name -> networking.gloo.solo.io.TLSConfig.Parameters.ProtocolVersion
	1,  // 22: networking.gloo.solo.io.TLSConfig.Parameters.maximum_protocol_version:type_name -> networking.gloo.solo.io.TLSConfig.Parameters.ProtocolVersion
	21, // 23: networking.gloo.solo.io.VirtualGatewayReport.WorkspacesEntry.value:type_name -> common.gloo.solo.io.Report
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_init()
}
func file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_init() {
	if File_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewayStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewayReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenerRouteTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_Listener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_Listener_HTTPServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_Listener_TCPServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_Listener_RouteTableFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_Listener_ExternalServiceFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSConfig_Files); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSConfig_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TLSConfig_SecretName)(nil),
		(*TLSConfig_Files_)(nil),
	}
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*VirtualGatewaySpec_Listener_Tls)(nil),
		(*VirtualGatewaySpec_Listener_HttpsRedirect)(nil),
		(*VirtualGatewaySpec_Listener_Http)(nil),
		(*VirtualGatewaySpec_Listener_Tcp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto = out.File
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2_virtual_gateway_proto_depIdxs = nil
}
