// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/networking/v2/virtual_gateway.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *VirtualGatewaySpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*VirtualGatewaySpec)
	if !ok {
		that2, ok := that.(VirtualGatewaySpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetWorkloads()) != len(target.GetWorkloads()) {
		return false
	}
	for idx, v := range m.GetWorkloads() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetWorkloads()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetWorkloads()[idx]) {
				return false
			}
		}

	}

	if len(m.GetListeners()) != len(target.GetListeners()) {
		return false
	}
	for idx, v := range m.GetListeners() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetListeners()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetListeners()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *TLSConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*TLSConfig)
	if !ok {
		that2, ok := that.(TLSConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetVerifySubjectAltName()) != len(target.GetVerifySubjectAltName()) {
		return false
	}
	for idx, v := range m.GetVerifySubjectAltName() {

		if strings.Compare(v, target.GetVerifySubjectAltName()[idx]) != 0 {
			return false
		}

	}

	if h, ok := interface{}(m.GetParameters()).(equality.Equalizer); ok {
		if !h.Equal(target.GetParameters()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetParameters(), target.GetParameters()) {
			return false
		}
	}

	if m.GetMode() != target.GetMode() {
		return false
	}

	switch m.Certificates.(type) {

	case *TLSConfig_SecretName:
		if _, ok := target.Certificates.(*TLSConfig_SecretName); !ok {
			return false
		}

		if strings.Compare(m.GetSecretName(), target.GetSecretName()) != 0 {
			return false
		}

	case *TLSConfig_Files_:
		if _, ok := target.Certificates.(*TLSConfig_Files_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetFiles()).(equality.Equalizer); ok {
			if !h.Equal(target.GetFiles()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetFiles(), target.GetFiles()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.Certificates != target.Certificates {
			return false
		}
	}

	return true
}

// Equal function
func (m *VirtualGatewayStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*VirtualGatewayStatus)
	if !ok {
		that2, ok := that.(VirtualGatewayStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetGlobal()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGlobal()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGlobal(), target.GetGlobal()) {
			return false
		}
	}

	if len(m.GetWorkspaces()) != len(target.GetWorkspaces()) {
		return false
	}
	for k, v := range m.GetWorkspaces() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetWorkspaces()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetWorkspaces()[k]) {
				return false
			}
		}

	}

	if len(m.GetAllowedRouteTables()) != len(target.GetAllowedRouteTables()) {
		return false
	}
	for idx, v := range m.GetAllowedRouteTables() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetAllowedRouteTables()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetAllowedRouteTables()[idx]) {
				return false
			}
		}

	}

	if len(m.GetWorkloads()) != len(target.GetWorkloads()) {
		return false
	}
	for idx, v := range m.GetWorkloads() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetWorkloads()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetWorkloads()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *VirtualGatewaySpec_Listener) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*VirtualGatewaySpec_Listener)
	if !ok {
		that2, ok := that.(VirtualGatewaySpec_Listener)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetPort()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPort()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPort(), target.GetPort()) {
			return false
		}
	}

	if len(m.GetAllowedRouteTables()) != len(target.GetAllowedRouteTables()) {
		return false
	}
	for idx, v := range m.GetAllowedRouteTables() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetAllowedRouteTables()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetAllowedRouteTables()[idx]) {
				return false
			}
		}

	}

	if strings.Compare(m.GetAppProtocol(), target.GetAppProtocol()) != 0 {
		return false
	}

	switch m.TlsSettings.(type) {

	case *VirtualGatewaySpec_Listener_Tls:
		if _, ok := target.TlsSettings.(*VirtualGatewaySpec_Listener_Tls); !ok {
			return false
		}

		if h, ok := interface{}(m.GetTls()).(equality.Equalizer); ok {
			if !h.Equal(target.GetTls()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetTls(), target.GetTls()) {
				return false
			}
		}

	case *VirtualGatewaySpec_Listener_HttpsRedirect:
		if _, ok := target.TlsSettings.(*VirtualGatewaySpec_Listener_HttpsRedirect); !ok {
			return false
		}

		if m.GetHttpsRedirect() != target.GetHttpsRedirect() {
			return false
		}

	default:
		// m is nil but target is not nil
		if m.TlsSettings != target.TlsSettings {
			return false
		}
	}

	switch m.ListenerType.(type) {

	case *VirtualGatewaySpec_Listener_Http:
		if _, ok := target.ListenerType.(*VirtualGatewaySpec_Listener_Http); !ok {
			return false
		}

		if h, ok := interface{}(m.GetHttp()).(equality.Equalizer); ok {
			if !h.Equal(target.GetHttp()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetHttp(), target.GetHttp()) {
				return false
			}
		}

	case *VirtualGatewaySpec_Listener_Tcp:
		if _, ok := target.ListenerType.(*VirtualGatewaySpec_Listener_Tcp); !ok {
			return false
		}

		if h, ok := interface{}(m.GetTcp()).(equality.Equalizer); ok {
			if !h.Equal(target.GetTcp()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetTcp(), target.GetTcp()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.ListenerType != target.ListenerType {
			return false
		}
	}

	return true
}

// Equal function
func (m *VirtualGatewaySpec_Listener_HTTPServer) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*VirtualGatewaySpec_Listener_HTTPServer)
	if !ok {
		that2, ok := that.(VirtualGatewaySpec_Listener_HTTPServer)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *VirtualGatewaySpec_Listener_TCPServer) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*VirtualGatewaySpec_Listener_TCPServer)
	if !ok {
		that2, ok := that.(VirtualGatewaySpec_Listener_TCPServer)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *VirtualGatewaySpec_Listener_RouteTableFilter) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*VirtualGatewaySpec_Listener_RouteTableFilter)
	if !ok {
		that2, ok := that.(VirtualGatewaySpec_Listener_RouteTableFilter)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetHost(), target.GetHost()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetSelector()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSelector()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSelector(), target.GetSelector()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *TLSConfig_Files) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*TLSConfig_Files)
	if !ok {
		that2, ok := that.(TLSConfig_Files)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetServerCert(), target.GetServerCert()) != 0 {
		return false
	}

	if strings.Compare(m.GetPrivateKey(), target.GetPrivateKey()) != 0 {
		return false
	}

	if strings.Compare(m.GetCaCerts(), target.GetCaCerts()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *TLSConfig_Parameters) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*TLSConfig_Parameters)
	if !ok {
		that2, ok := that.(TLSConfig_Parameters)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetMinimumProtocolVersion() != target.GetMinimumProtocolVersion() {
		return false
	}

	if m.GetMaximumProtocolVersion() != target.GetMaximumProtocolVersion() {
		return false
	}

	if len(m.GetCipherSuites()) != len(target.GetCipherSuites()) {
		return false
	}
	for idx, v := range m.GetCipherSuites() {

		if strings.Compare(v, target.GetCipherSuites()[idx]) != 0 {
			return false
		}

	}

	return true
}
