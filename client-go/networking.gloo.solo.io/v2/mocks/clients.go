// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v2 is a generated GoMock package.
package mock_v2

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	v2 "github.com/solo-io/solo-apis/client-go/networking.gloo.solo.io/v2"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v2.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// ExternalEndpoints mocks base method.
func (m *MockClientset) ExternalEndpoints() v2.ExternalEndpointClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalEndpoints")
	ret0, _ := ret[0].(v2.ExternalEndpointClient)
	return ret0
}

// ExternalEndpoints indicates an expected call of ExternalEndpoints.
func (mr *MockClientsetMockRecorder) ExternalEndpoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalEndpoints", reflect.TypeOf((*MockClientset)(nil).ExternalEndpoints))
}

// ExternalServices mocks base method.
func (m *MockClientset) ExternalServices() v2.ExternalServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalServices")
	ret0, _ := ret[0].(v2.ExternalServiceClient)
	return ret0
}

// ExternalServices indicates an expected call of ExternalServices.
func (mr *MockClientsetMockRecorder) ExternalServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalServices", reflect.TypeOf((*MockClientset)(nil).ExternalServices))
}

// RouteTables mocks base method.
func (m *MockClientset) RouteTables() v2.RouteTableClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteTables")
	ret0, _ := ret[0].(v2.RouteTableClient)
	return ret0
}

// RouteTables indicates an expected call of RouteTables.
func (mr *MockClientsetMockRecorder) RouteTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteTables", reflect.TypeOf((*MockClientset)(nil).RouteTables))
}

// VirtualDestinations mocks base method.
func (m *MockClientset) VirtualDestinations() v2.VirtualDestinationClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualDestinations")
	ret0, _ := ret[0].(v2.VirtualDestinationClient)
	return ret0
}

// VirtualDestinations indicates an expected call of VirtualDestinations.
func (mr *MockClientsetMockRecorder) VirtualDestinations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualDestinations", reflect.TypeOf((*MockClientset)(nil).VirtualDestinations))
}

// VirtualGateways mocks base method.
func (m *MockClientset) VirtualGateways() v2.VirtualGatewayClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualGateways")
	ret0, _ := ret[0].(v2.VirtualGatewayClient)
	return ret0
}

// VirtualGateways indicates an expected call of VirtualGateways.
func (mr *MockClientsetMockRecorder) VirtualGateways() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualGateways", reflect.TypeOf((*MockClientset)(nil).VirtualGateways))
}

// MockExternalServiceReader is a mock of ExternalServiceReader interface.
type MockExternalServiceReader struct {
	ctrl     *gomock.Controller
	recorder *MockExternalServiceReaderMockRecorder
}

// MockExternalServiceReaderMockRecorder is the mock recorder for MockExternalServiceReader.
type MockExternalServiceReaderMockRecorder struct {
	mock *MockExternalServiceReader
}

// NewMockExternalServiceReader creates a new mock instance.
func NewMockExternalServiceReader(ctrl *gomock.Controller) *MockExternalServiceReader {
	mock := &MockExternalServiceReader{ctrl: ctrl}
	mock.recorder = &MockExternalServiceReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalServiceReader) EXPECT() *MockExternalServiceReaderMockRecorder {
	return m.recorder
}

// GetExternalService mocks base method.
func (m *MockExternalServiceReader) GetExternalService(ctx context.Context, key client.ObjectKey) (*v2.ExternalService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalService", ctx, key)
	ret0, _ := ret[0].(*v2.ExternalService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalService indicates an expected call of GetExternalService.
func (mr *MockExternalServiceReaderMockRecorder) GetExternalService(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalService", reflect.TypeOf((*MockExternalServiceReader)(nil).GetExternalService), ctx, key)
}

// ListExternalService mocks base method.
func (m *MockExternalServiceReader) ListExternalService(ctx context.Context, opts ...client.ListOption) (*v2.ExternalServiceList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExternalService", varargs...)
	ret0, _ := ret[0].(*v2.ExternalServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExternalService indicates an expected call of ListExternalService.
func (mr *MockExternalServiceReaderMockRecorder) ListExternalService(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExternalService", reflect.TypeOf((*MockExternalServiceReader)(nil).ListExternalService), varargs...)
}

// MockExternalServiceWriter is a mock of ExternalServiceWriter interface.
type MockExternalServiceWriter struct {
	ctrl     *gomock.Controller
	recorder *MockExternalServiceWriterMockRecorder
}

// MockExternalServiceWriterMockRecorder is the mock recorder for MockExternalServiceWriter.
type MockExternalServiceWriterMockRecorder struct {
	mock *MockExternalServiceWriter
}

// NewMockExternalServiceWriter creates a new mock instance.
func NewMockExternalServiceWriter(ctrl *gomock.Controller) *MockExternalServiceWriter {
	mock := &MockExternalServiceWriter{ctrl: ctrl}
	mock.recorder = &MockExternalServiceWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalServiceWriter) EXPECT() *MockExternalServiceWriterMockRecorder {
	return m.recorder
}

// CreateExternalService mocks base method.
func (m *MockExternalServiceWriter) CreateExternalService(ctx context.Context, obj *v2.ExternalService, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExternalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExternalService indicates an expected call of CreateExternalService.
func (mr *MockExternalServiceWriterMockRecorder) CreateExternalService(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExternalService", reflect.TypeOf((*MockExternalServiceWriter)(nil).CreateExternalService), varargs...)
}

// DeleteAllOfExternalService mocks base method.
func (m *MockExternalServiceWriter) DeleteAllOfExternalService(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfExternalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfExternalService indicates an expected call of DeleteAllOfExternalService.
func (mr *MockExternalServiceWriterMockRecorder) DeleteAllOfExternalService(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfExternalService", reflect.TypeOf((*MockExternalServiceWriter)(nil).DeleteAllOfExternalService), varargs...)
}

// DeleteExternalService mocks base method.
func (m *MockExternalServiceWriter) DeleteExternalService(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExternalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExternalService indicates an expected call of DeleteExternalService.
func (mr *MockExternalServiceWriterMockRecorder) DeleteExternalService(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExternalService", reflect.TypeOf((*MockExternalServiceWriter)(nil).DeleteExternalService), varargs...)
}

// PatchExternalService mocks base method.
func (m *MockExternalServiceWriter) PatchExternalService(ctx context.Context, obj *v2.ExternalService, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchExternalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchExternalService indicates an expected call of PatchExternalService.
func (mr *MockExternalServiceWriterMockRecorder) PatchExternalService(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchExternalService", reflect.TypeOf((*MockExternalServiceWriter)(nil).PatchExternalService), varargs...)
}

// UpdateExternalService mocks base method.
func (m *MockExternalServiceWriter) UpdateExternalService(ctx context.Context, obj *v2.ExternalService, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExternalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExternalService indicates an expected call of UpdateExternalService.
func (mr *MockExternalServiceWriterMockRecorder) UpdateExternalService(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalService", reflect.TypeOf((*MockExternalServiceWriter)(nil).UpdateExternalService), varargs...)
}

// UpsertExternalService mocks base method.
func (m *MockExternalServiceWriter) UpsertExternalService(ctx context.Context, obj *v2.ExternalService, transitionFuncs ...v2.ExternalServiceTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertExternalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertExternalService indicates an expected call of UpsertExternalService.
func (mr *MockExternalServiceWriterMockRecorder) UpsertExternalService(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertExternalService", reflect.TypeOf((*MockExternalServiceWriter)(nil).UpsertExternalService), varargs...)
}

// MockExternalServiceStatusWriter is a mock of ExternalServiceStatusWriter interface.
type MockExternalServiceStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockExternalServiceStatusWriterMockRecorder
}

// MockExternalServiceStatusWriterMockRecorder is the mock recorder for MockExternalServiceStatusWriter.
type MockExternalServiceStatusWriterMockRecorder struct {
	mock *MockExternalServiceStatusWriter
}

// NewMockExternalServiceStatusWriter creates a new mock instance.
func NewMockExternalServiceStatusWriter(ctrl *gomock.Controller) *MockExternalServiceStatusWriter {
	mock := &MockExternalServiceStatusWriter{ctrl: ctrl}
	mock.recorder = &MockExternalServiceStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalServiceStatusWriter) EXPECT() *MockExternalServiceStatusWriterMockRecorder {
	return m.recorder
}

// PatchExternalServiceStatus mocks base method.
func (m *MockExternalServiceStatusWriter) PatchExternalServiceStatus(ctx context.Context, obj *v2.ExternalService, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchExternalServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchExternalServiceStatus indicates an expected call of PatchExternalServiceStatus.
func (mr *MockExternalServiceStatusWriterMockRecorder) PatchExternalServiceStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchExternalServiceStatus", reflect.TypeOf((*MockExternalServiceStatusWriter)(nil).PatchExternalServiceStatus), varargs...)
}

// UpdateExternalServiceStatus mocks base method.
func (m *MockExternalServiceStatusWriter) UpdateExternalServiceStatus(ctx context.Context, obj *v2.ExternalService, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExternalServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExternalServiceStatus indicates an expected call of UpdateExternalServiceStatus.
func (mr *MockExternalServiceStatusWriterMockRecorder) UpdateExternalServiceStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalServiceStatus", reflect.TypeOf((*MockExternalServiceStatusWriter)(nil).UpdateExternalServiceStatus), varargs...)
}

// MockExternalServiceClient is a mock of ExternalServiceClient interface.
type MockExternalServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockExternalServiceClientMockRecorder
}

// MockExternalServiceClientMockRecorder is the mock recorder for MockExternalServiceClient.
type MockExternalServiceClientMockRecorder struct {
	mock *MockExternalServiceClient
}

// NewMockExternalServiceClient creates a new mock instance.
func NewMockExternalServiceClient(ctrl *gomock.Controller) *MockExternalServiceClient {
	mock := &MockExternalServiceClient{ctrl: ctrl}
	mock.recorder = &MockExternalServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalServiceClient) EXPECT() *MockExternalServiceClientMockRecorder {
	return m.recorder
}

// CreateExternalService mocks base method.
func (m *MockExternalServiceClient) CreateExternalService(ctx context.Context, obj *v2.ExternalService, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExternalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExternalService indicates an expected call of CreateExternalService.
func (mr *MockExternalServiceClientMockRecorder) CreateExternalService(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExternalService", reflect.TypeOf((*MockExternalServiceClient)(nil).CreateExternalService), varargs...)
}

// DeleteAllOfExternalService mocks base method.
func (m *MockExternalServiceClient) DeleteAllOfExternalService(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfExternalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfExternalService indicates an expected call of DeleteAllOfExternalService.
func (mr *MockExternalServiceClientMockRecorder) DeleteAllOfExternalService(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfExternalService", reflect.TypeOf((*MockExternalServiceClient)(nil).DeleteAllOfExternalService), varargs...)
}

// DeleteExternalService mocks base method.
func (m *MockExternalServiceClient) DeleteExternalService(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExternalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExternalService indicates an expected call of DeleteExternalService.
func (mr *MockExternalServiceClientMockRecorder) DeleteExternalService(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExternalService", reflect.TypeOf((*MockExternalServiceClient)(nil).DeleteExternalService), varargs...)
}

// GetExternalService mocks base method.
func (m *MockExternalServiceClient) GetExternalService(ctx context.Context, key client.ObjectKey) (*v2.ExternalService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalService", ctx, key)
	ret0, _ := ret[0].(*v2.ExternalService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalService indicates an expected call of GetExternalService.
func (mr *MockExternalServiceClientMockRecorder) GetExternalService(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalService", reflect.TypeOf((*MockExternalServiceClient)(nil).GetExternalService), ctx, key)
}

// ListExternalService mocks base method.
func (m *MockExternalServiceClient) ListExternalService(ctx context.Context, opts ...client.ListOption) (*v2.ExternalServiceList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExternalService", varargs...)
	ret0, _ := ret[0].(*v2.ExternalServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExternalService indicates an expected call of ListExternalService.
func (mr *MockExternalServiceClientMockRecorder) ListExternalService(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExternalService", reflect.TypeOf((*MockExternalServiceClient)(nil).ListExternalService), varargs...)
}

// PatchExternalService mocks base method.
func (m *MockExternalServiceClient) PatchExternalService(ctx context.Context, obj *v2.ExternalService, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchExternalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchExternalService indicates an expected call of PatchExternalService.
func (mr *MockExternalServiceClientMockRecorder) PatchExternalService(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchExternalService", reflect.TypeOf((*MockExternalServiceClient)(nil).PatchExternalService), varargs...)
}

// PatchExternalServiceStatus mocks base method.
func (m *MockExternalServiceClient) PatchExternalServiceStatus(ctx context.Context, obj *v2.ExternalService, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchExternalServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchExternalServiceStatus indicates an expected call of PatchExternalServiceStatus.
func (mr *MockExternalServiceClientMockRecorder) PatchExternalServiceStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchExternalServiceStatus", reflect.TypeOf((*MockExternalServiceClient)(nil).PatchExternalServiceStatus), varargs...)
}

// UpdateExternalService mocks base method.
func (m *MockExternalServiceClient) UpdateExternalService(ctx context.Context, obj *v2.ExternalService, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExternalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExternalService indicates an expected call of UpdateExternalService.
func (mr *MockExternalServiceClientMockRecorder) UpdateExternalService(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalService", reflect.TypeOf((*MockExternalServiceClient)(nil).UpdateExternalService), varargs...)
}

// UpdateExternalServiceStatus mocks base method.
func (m *MockExternalServiceClient) UpdateExternalServiceStatus(ctx context.Context, obj *v2.ExternalService, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExternalServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExternalServiceStatus indicates an expected call of UpdateExternalServiceStatus.
func (mr *MockExternalServiceClientMockRecorder) UpdateExternalServiceStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalServiceStatus", reflect.TypeOf((*MockExternalServiceClient)(nil).UpdateExternalServiceStatus), varargs...)
}

// UpsertExternalService mocks base method.
func (m *MockExternalServiceClient) UpsertExternalService(ctx context.Context, obj *v2.ExternalService, transitionFuncs ...v2.ExternalServiceTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertExternalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertExternalService indicates an expected call of UpsertExternalService.
func (mr *MockExternalServiceClientMockRecorder) UpsertExternalService(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertExternalService", reflect.TypeOf((*MockExternalServiceClient)(nil).UpsertExternalService), varargs...)
}

// MockMulticlusterExternalServiceClient is a mock of MulticlusterExternalServiceClient interface.
type MockMulticlusterExternalServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterExternalServiceClientMockRecorder
}

// MockMulticlusterExternalServiceClientMockRecorder is the mock recorder for MockMulticlusterExternalServiceClient.
type MockMulticlusterExternalServiceClientMockRecorder struct {
	mock *MockMulticlusterExternalServiceClient
}

// NewMockMulticlusterExternalServiceClient creates a new mock instance.
func NewMockMulticlusterExternalServiceClient(ctrl *gomock.Controller) *MockMulticlusterExternalServiceClient {
	mock := &MockMulticlusterExternalServiceClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterExternalServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterExternalServiceClient) EXPECT() *MockMulticlusterExternalServiceClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterExternalServiceClient) Cluster(cluster string) (v2.ExternalServiceClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.ExternalServiceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterExternalServiceClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterExternalServiceClient)(nil).Cluster), cluster)
}

// MockExternalEndpointReader is a mock of ExternalEndpointReader interface.
type MockExternalEndpointReader struct {
	ctrl     *gomock.Controller
	recorder *MockExternalEndpointReaderMockRecorder
}

// MockExternalEndpointReaderMockRecorder is the mock recorder for MockExternalEndpointReader.
type MockExternalEndpointReaderMockRecorder struct {
	mock *MockExternalEndpointReader
}

// NewMockExternalEndpointReader creates a new mock instance.
func NewMockExternalEndpointReader(ctrl *gomock.Controller) *MockExternalEndpointReader {
	mock := &MockExternalEndpointReader{ctrl: ctrl}
	mock.recorder = &MockExternalEndpointReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalEndpointReader) EXPECT() *MockExternalEndpointReaderMockRecorder {
	return m.recorder
}

// GetExternalEndpoint mocks base method.
func (m *MockExternalEndpointReader) GetExternalEndpoint(ctx context.Context, key client.ObjectKey) (*v2.ExternalEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalEndpoint", ctx, key)
	ret0, _ := ret[0].(*v2.ExternalEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalEndpoint indicates an expected call of GetExternalEndpoint.
func (mr *MockExternalEndpointReaderMockRecorder) GetExternalEndpoint(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalEndpoint", reflect.TypeOf((*MockExternalEndpointReader)(nil).GetExternalEndpoint), ctx, key)
}

// ListExternalEndpoint mocks base method.
func (m *MockExternalEndpointReader) ListExternalEndpoint(ctx context.Context, opts ...client.ListOption) (*v2.ExternalEndpointList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExternalEndpoint", varargs...)
	ret0, _ := ret[0].(*v2.ExternalEndpointList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExternalEndpoint indicates an expected call of ListExternalEndpoint.
func (mr *MockExternalEndpointReaderMockRecorder) ListExternalEndpoint(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExternalEndpoint", reflect.TypeOf((*MockExternalEndpointReader)(nil).ListExternalEndpoint), varargs...)
}

// MockExternalEndpointWriter is a mock of ExternalEndpointWriter interface.
type MockExternalEndpointWriter struct {
	ctrl     *gomock.Controller
	recorder *MockExternalEndpointWriterMockRecorder
}

// MockExternalEndpointWriterMockRecorder is the mock recorder for MockExternalEndpointWriter.
type MockExternalEndpointWriterMockRecorder struct {
	mock *MockExternalEndpointWriter
}

// NewMockExternalEndpointWriter creates a new mock instance.
func NewMockExternalEndpointWriter(ctrl *gomock.Controller) *MockExternalEndpointWriter {
	mock := &MockExternalEndpointWriter{ctrl: ctrl}
	mock.recorder = &MockExternalEndpointWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalEndpointWriter) EXPECT() *MockExternalEndpointWriterMockRecorder {
	return m.recorder
}

// CreateExternalEndpoint mocks base method.
func (m *MockExternalEndpointWriter) CreateExternalEndpoint(ctx context.Context, obj *v2.ExternalEndpoint, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExternalEndpoint", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExternalEndpoint indicates an expected call of CreateExternalEndpoint.
func (mr *MockExternalEndpointWriterMockRecorder) CreateExternalEndpoint(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExternalEndpoint", reflect.TypeOf((*MockExternalEndpointWriter)(nil).CreateExternalEndpoint), varargs...)
}

// DeleteAllOfExternalEndpoint mocks base method.
func (m *MockExternalEndpointWriter) DeleteAllOfExternalEndpoint(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfExternalEndpoint", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfExternalEndpoint indicates an expected call of DeleteAllOfExternalEndpoint.
func (mr *MockExternalEndpointWriterMockRecorder) DeleteAllOfExternalEndpoint(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfExternalEndpoint", reflect.TypeOf((*MockExternalEndpointWriter)(nil).DeleteAllOfExternalEndpoint), varargs...)
}

// DeleteExternalEndpoint mocks base method.
func (m *MockExternalEndpointWriter) DeleteExternalEndpoint(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExternalEndpoint", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExternalEndpoint indicates an expected call of DeleteExternalEndpoint.
func (mr *MockExternalEndpointWriterMockRecorder) DeleteExternalEndpoint(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExternalEndpoint", reflect.TypeOf((*MockExternalEndpointWriter)(nil).DeleteExternalEndpoint), varargs...)
}

// PatchExternalEndpoint mocks base method.
func (m *MockExternalEndpointWriter) PatchExternalEndpoint(ctx context.Context, obj *v2.ExternalEndpoint, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchExternalEndpoint", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchExternalEndpoint indicates an expected call of PatchExternalEndpoint.
func (mr *MockExternalEndpointWriterMockRecorder) PatchExternalEndpoint(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchExternalEndpoint", reflect.TypeOf((*MockExternalEndpointWriter)(nil).PatchExternalEndpoint), varargs...)
}

// UpdateExternalEndpoint mocks base method.
func (m *MockExternalEndpointWriter) UpdateExternalEndpoint(ctx context.Context, obj *v2.ExternalEndpoint, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExternalEndpoint", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExternalEndpoint indicates an expected call of UpdateExternalEndpoint.
func (mr *MockExternalEndpointWriterMockRecorder) UpdateExternalEndpoint(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalEndpoint", reflect.TypeOf((*MockExternalEndpointWriter)(nil).UpdateExternalEndpoint), varargs...)
}

// UpsertExternalEndpoint mocks base method.
func (m *MockExternalEndpointWriter) UpsertExternalEndpoint(ctx context.Context, obj *v2.ExternalEndpoint, transitionFuncs ...v2.ExternalEndpointTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertExternalEndpoint", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertExternalEndpoint indicates an expected call of UpsertExternalEndpoint.
func (mr *MockExternalEndpointWriterMockRecorder) UpsertExternalEndpoint(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertExternalEndpoint", reflect.TypeOf((*MockExternalEndpointWriter)(nil).UpsertExternalEndpoint), varargs...)
}

// MockExternalEndpointStatusWriter is a mock of ExternalEndpointStatusWriter interface.
type MockExternalEndpointStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockExternalEndpointStatusWriterMockRecorder
}

// MockExternalEndpointStatusWriterMockRecorder is the mock recorder for MockExternalEndpointStatusWriter.
type MockExternalEndpointStatusWriterMockRecorder struct {
	mock *MockExternalEndpointStatusWriter
}

// NewMockExternalEndpointStatusWriter creates a new mock instance.
func NewMockExternalEndpointStatusWriter(ctrl *gomock.Controller) *MockExternalEndpointStatusWriter {
	mock := &MockExternalEndpointStatusWriter{ctrl: ctrl}
	mock.recorder = &MockExternalEndpointStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalEndpointStatusWriter) EXPECT() *MockExternalEndpointStatusWriterMockRecorder {
	return m.recorder
}

// PatchExternalEndpointStatus mocks base method.
func (m *MockExternalEndpointStatusWriter) PatchExternalEndpointStatus(ctx context.Context, obj *v2.ExternalEndpoint, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchExternalEndpointStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchExternalEndpointStatus indicates an expected call of PatchExternalEndpointStatus.
func (mr *MockExternalEndpointStatusWriterMockRecorder) PatchExternalEndpointStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchExternalEndpointStatus", reflect.TypeOf((*MockExternalEndpointStatusWriter)(nil).PatchExternalEndpointStatus), varargs...)
}

// UpdateExternalEndpointStatus mocks base method.
func (m *MockExternalEndpointStatusWriter) UpdateExternalEndpointStatus(ctx context.Context, obj *v2.ExternalEndpoint, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExternalEndpointStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExternalEndpointStatus indicates an expected call of UpdateExternalEndpointStatus.
func (mr *MockExternalEndpointStatusWriterMockRecorder) UpdateExternalEndpointStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalEndpointStatus", reflect.TypeOf((*MockExternalEndpointStatusWriter)(nil).UpdateExternalEndpointStatus), varargs...)
}

// MockExternalEndpointClient is a mock of ExternalEndpointClient interface.
type MockExternalEndpointClient struct {
	ctrl     *gomock.Controller
	recorder *MockExternalEndpointClientMockRecorder
}

// MockExternalEndpointClientMockRecorder is the mock recorder for MockExternalEndpointClient.
type MockExternalEndpointClientMockRecorder struct {
	mock *MockExternalEndpointClient
}

// NewMockExternalEndpointClient creates a new mock instance.
func NewMockExternalEndpointClient(ctrl *gomock.Controller) *MockExternalEndpointClient {
	mock := &MockExternalEndpointClient{ctrl: ctrl}
	mock.recorder = &MockExternalEndpointClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalEndpointClient) EXPECT() *MockExternalEndpointClientMockRecorder {
	return m.recorder
}

// CreateExternalEndpoint mocks base method.
func (m *MockExternalEndpointClient) CreateExternalEndpoint(ctx context.Context, obj *v2.ExternalEndpoint, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExternalEndpoint", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExternalEndpoint indicates an expected call of CreateExternalEndpoint.
func (mr *MockExternalEndpointClientMockRecorder) CreateExternalEndpoint(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExternalEndpoint", reflect.TypeOf((*MockExternalEndpointClient)(nil).CreateExternalEndpoint), varargs...)
}

// DeleteAllOfExternalEndpoint mocks base method.
func (m *MockExternalEndpointClient) DeleteAllOfExternalEndpoint(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfExternalEndpoint", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfExternalEndpoint indicates an expected call of DeleteAllOfExternalEndpoint.
func (mr *MockExternalEndpointClientMockRecorder) DeleteAllOfExternalEndpoint(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfExternalEndpoint", reflect.TypeOf((*MockExternalEndpointClient)(nil).DeleteAllOfExternalEndpoint), varargs...)
}

// DeleteExternalEndpoint mocks base method.
func (m *MockExternalEndpointClient) DeleteExternalEndpoint(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExternalEndpoint", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExternalEndpoint indicates an expected call of DeleteExternalEndpoint.
func (mr *MockExternalEndpointClientMockRecorder) DeleteExternalEndpoint(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExternalEndpoint", reflect.TypeOf((*MockExternalEndpointClient)(nil).DeleteExternalEndpoint), varargs...)
}

// GetExternalEndpoint mocks base method.
func (m *MockExternalEndpointClient) GetExternalEndpoint(ctx context.Context, key client.ObjectKey) (*v2.ExternalEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalEndpoint", ctx, key)
	ret0, _ := ret[0].(*v2.ExternalEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalEndpoint indicates an expected call of GetExternalEndpoint.
func (mr *MockExternalEndpointClientMockRecorder) GetExternalEndpoint(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalEndpoint", reflect.TypeOf((*MockExternalEndpointClient)(nil).GetExternalEndpoint), ctx, key)
}

// ListExternalEndpoint mocks base method.
func (m *MockExternalEndpointClient) ListExternalEndpoint(ctx context.Context, opts ...client.ListOption) (*v2.ExternalEndpointList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExternalEndpoint", varargs...)
	ret0, _ := ret[0].(*v2.ExternalEndpointList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExternalEndpoint indicates an expected call of ListExternalEndpoint.
func (mr *MockExternalEndpointClientMockRecorder) ListExternalEndpoint(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExternalEndpoint", reflect.TypeOf((*MockExternalEndpointClient)(nil).ListExternalEndpoint), varargs...)
}

// PatchExternalEndpoint mocks base method.
func (m *MockExternalEndpointClient) PatchExternalEndpoint(ctx context.Context, obj *v2.ExternalEndpoint, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchExternalEndpoint", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchExternalEndpoint indicates an expected call of PatchExternalEndpoint.
func (mr *MockExternalEndpointClientMockRecorder) PatchExternalEndpoint(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchExternalEndpoint", reflect.TypeOf((*MockExternalEndpointClient)(nil).PatchExternalEndpoint), varargs...)
}

// PatchExternalEndpointStatus mocks base method.
func (m *MockExternalEndpointClient) PatchExternalEndpointStatus(ctx context.Context, obj *v2.ExternalEndpoint, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchExternalEndpointStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchExternalEndpointStatus indicates an expected call of PatchExternalEndpointStatus.
func (mr *MockExternalEndpointClientMockRecorder) PatchExternalEndpointStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchExternalEndpointStatus", reflect.TypeOf((*MockExternalEndpointClient)(nil).PatchExternalEndpointStatus), varargs...)
}

// UpdateExternalEndpoint mocks base method.
func (m *MockExternalEndpointClient) UpdateExternalEndpoint(ctx context.Context, obj *v2.ExternalEndpoint, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExternalEndpoint", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExternalEndpoint indicates an expected call of UpdateExternalEndpoint.
func (mr *MockExternalEndpointClientMockRecorder) UpdateExternalEndpoint(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalEndpoint", reflect.TypeOf((*MockExternalEndpointClient)(nil).UpdateExternalEndpoint), varargs...)
}

// UpdateExternalEndpointStatus mocks base method.
func (m *MockExternalEndpointClient) UpdateExternalEndpointStatus(ctx context.Context, obj *v2.ExternalEndpoint, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExternalEndpointStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExternalEndpointStatus indicates an expected call of UpdateExternalEndpointStatus.
func (mr *MockExternalEndpointClientMockRecorder) UpdateExternalEndpointStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalEndpointStatus", reflect.TypeOf((*MockExternalEndpointClient)(nil).UpdateExternalEndpointStatus), varargs...)
}

// UpsertExternalEndpoint mocks base method.
func (m *MockExternalEndpointClient) UpsertExternalEndpoint(ctx context.Context, obj *v2.ExternalEndpoint, transitionFuncs ...v2.ExternalEndpointTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertExternalEndpoint", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertExternalEndpoint indicates an expected call of UpsertExternalEndpoint.
func (mr *MockExternalEndpointClientMockRecorder) UpsertExternalEndpoint(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertExternalEndpoint", reflect.TypeOf((*MockExternalEndpointClient)(nil).UpsertExternalEndpoint), varargs...)
}

// MockMulticlusterExternalEndpointClient is a mock of MulticlusterExternalEndpointClient interface.
type MockMulticlusterExternalEndpointClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterExternalEndpointClientMockRecorder
}

// MockMulticlusterExternalEndpointClientMockRecorder is the mock recorder for MockMulticlusterExternalEndpointClient.
type MockMulticlusterExternalEndpointClientMockRecorder struct {
	mock *MockMulticlusterExternalEndpointClient
}

// NewMockMulticlusterExternalEndpointClient creates a new mock instance.
func NewMockMulticlusterExternalEndpointClient(ctrl *gomock.Controller) *MockMulticlusterExternalEndpointClient {
	mock := &MockMulticlusterExternalEndpointClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterExternalEndpointClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterExternalEndpointClient) EXPECT() *MockMulticlusterExternalEndpointClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterExternalEndpointClient) Cluster(cluster string) (v2.ExternalEndpointClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.ExternalEndpointClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterExternalEndpointClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterExternalEndpointClient)(nil).Cluster), cluster)
}

// MockRouteTableReader is a mock of RouteTableReader interface.
type MockRouteTableReader struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableReaderMockRecorder
}

// MockRouteTableReaderMockRecorder is the mock recorder for MockRouteTableReader.
type MockRouteTableReaderMockRecorder struct {
	mock *MockRouteTableReader
}

// NewMockRouteTableReader creates a new mock instance.
func NewMockRouteTableReader(ctrl *gomock.Controller) *MockRouteTableReader {
	mock := &MockRouteTableReader{ctrl: ctrl}
	mock.recorder = &MockRouteTableReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteTableReader) EXPECT() *MockRouteTableReaderMockRecorder {
	return m.recorder
}

// GetRouteTable mocks base method.
func (m *MockRouteTableReader) GetRouteTable(ctx context.Context, key client.ObjectKey) (*v2.RouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteTable", ctx, key)
	ret0, _ := ret[0].(*v2.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteTable indicates an expected call of GetRouteTable.
func (mr *MockRouteTableReaderMockRecorder) GetRouteTable(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteTable", reflect.TypeOf((*MockRouteTableReader)(nil).GetRouteTable), ctx, key)
}

// ListRouteTable mocks base method.
func (m *MockRouteTableReader) ListRouteTable(ctx context.Context, opts ...client.ListOption) (*v2.RouteTableList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRouteTable", varargs...)
	ret0, _ := ret[0].(*v2.RouteTableList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouteTable indicates an expected call of ListRouteTable.
func (mr *MockRouteTableReaderMockRecorder) ListRouteTable(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouteTable", reflect.TypeOf((*MockRouteTableReader)(nil).ListRouteTable), varargs...)
}

// MockRouteTableWriter is a mock of RouteTableWriter interface.
type MockRouteTableWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableWriterMockRecorder
}

// MockRouteTableWriterMockRecorder is the mock recorder for MockRouteTableWriter.
type MockRouteTableWriterMockRecorder struct {
	mock *MockRouteTableWriter
}

// NewMockRouteTableWriter creates a new mock instance.
func NewMockRouteTableWriter(ctrl *gomock.Controller) *MockRouteTableWriter {
	mock := &MockRouteTableWriter{ctrl: ctrl}
	mock.recorder = &MockRouteTableWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteTableWriter) EXPECT() *MockRouteTableWriterMockRecorder {
	return m.recorder
}

// CreateRouteTable mocks base method.
func (m *MockRouteTableWriter) CreateRouteTable(ctx context.Context, obj *v2.RouteTable, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRouteTable indicates an expected call of CreateRouteTable.
func (mr *MockRouteTableWriterMockRecorder) CreateRouteTable(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteTable", reflect.TypeOf((*MockRouteTableWriter)(nil).CreateRouteTable), varargs...)
}

// DeleteAllOfRouteTable mocks base method.
func (m *MockRouteTableWriter) DeleteAllOfRouteTable(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfRouteTable indicates an expected call of DeleteAllOfRouteTable.
func (mr *MockRouteTableWriterMockRecorder) DeleteAllOfRouteTable(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfRouteTable", reflect.TypeOf((*MockRouteTableWriter)(nil).DeleteAllOfRouteTable), varargs...)
}

// DeleteRouteTable mocks base method.
func (m *MockRouteTableWriter) DeleteRouteTable(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouteTable indicates an expected call of DeleteRouteTable.
func (mr *MockRouteTableWriterMockRecorder) DeleteRouteTable(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteTable", reflect.TypeOf((*MockRouteTableWriter)(nil).DeleteRouteTable), varargs...)
}

// PatchRouteTable mocks base method.
func (m *MockRouteTableWriter) PatchRouteTable(ctx context.Context, obj *v2.RouteTable, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRouteTable indicates an expected call of PatchRouteTable.
func (mr *MockRouteTableWriterMockRecorder) PatchRouteTable(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRouteTable", reflect.TypeOf((*MockRouteTableWriter)(nil).PatchRouteTable), varargs...)
}

// UpdateRouteTable mocks base method.
func (m *MockRouteTableWriter) UpdateRouteTable(ctx context.Context, obj *v2.RouteTable, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRouteTable indicates an expected call of UpdateRouteTable.
func (mr *MockRouteTableWriterMockRecorder) UpdateRouteTable(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteTable", reflect.TypeOf((*MockRouteTableWriter)(nil).UpdateRouteTable), varargs...)
}

// UpsertRouteTable mocks base method.
func (m *MockRouteTableWriter) UpsertRouteTable(ctx context.Context, obj *v2.RouteTable, transitionFuncs ...v2.RouteTableTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRouteTable indicates an expected call of UpsertRouteTable.
func (mr *MockRouteTableWriterMockRecorder) UpsertRouteTable(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRouteTable", reflect.TypeOf((*MockRouteTableWriter)(nil).UpsertRouteTable), varargs...)
}

// MockRouteTableStatusWriter is a mock of RouteTableStatusWriter interface.
type MockRouteTableStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableStatusWriterMockRecorder
}

// MockRouteTableStatusWriterMockRecorder is the mock recorder for MockRouteTableStatusWriter.
type MockRouteTableStatusWriterMockRecorder struct {
	mock *MockRouteTableStatusWriter
}

// NewMockRouteTableStatusWriter creates a new mock instance.
func NewMockRouteTableStatusWriter(ctrl *gomock.Controller) *MockRouteTableStatusWriter {
	mock := &MockRouteTableStatusWriter{ctrl: ctrl}
	mock.recorder = &MockRouteTableStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteTableStatusWriter) EXPECT() *MockRouteTableStatusWriterMockRecorder {
	return m.recorder
}

// PatchRouteTableStatus mocks base method.
func (m *MockRouteTableStatusWriter) PatchRouteTableStatus(ctx context.Context, obj *v2.RouteTable, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRouteTableStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRouteTableStatus indicates an expected call of PatchRouteTableStatus.
func (mr *MockRouteTableStatusWriterMockRecorder) PatchRouteTableStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRouteTableStatus", reflect.TypeOf((*MockRouteTableStatusWriter)(nil).PatchRouteTableStatus), varargs...)
}

// UpdateRouteTableStatus mocks base method.
func (m *MockRouteTableStatusWriter) UpdateRouteTableStatus(ctx context.Context, obj *v2.RouteTable, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRouteTableStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRouteTableStatus indicates an expected call of UpdateRouteTableStatus.
func (mr *MockRouteTableStatusWriterMockRecorder) UpdateRouteTableStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteTableStatus", reflect.TypeOf((*MockRouteTableStatusWriter)(nil).UpdateRouteTableStatus), varargs...)
}

// MockRouteTableClient is a mock of RouteTableClient interface.
type MockRouteTableClient struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableClientMockRecorder
}

// MockRouteTableClientMockRecorder is the mock recorder for MockRouteTableClient.
type MockRouteTableClientMockRecorder struct {
	mock *MockRouteTableClient
}

// NewMockRouteTableClient creates a new mock instance.
func NewMockRouteTableClient(ctrl *gomock.Controller) *MockRouteTableClient {
	mock := &MockRouteTableClient{ctrl: ctrl}
	mock.recorder = &MockRouteTableClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteTableClient) EXPECT() *MockRouteTableClientMockRecorder {
	return m.recorder
}

// CreateRouteTable mocks base method.
func (m *MockRouteTableClient) CreateRouteTable(ctx context.Context, obj *v2.RouteTable, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRouteTable indicates an expected call of CreateRouteTable.
func (mr *MockRouteTableClientMockRecorder) CreateRouteTable(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).CreateRouteTable), varargs...)
}

// DeleteAllOfRouteTable mocks base method.
func (m *MockRouteTableClient) DeleteAllOfRouteTable(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfRouteTable indicates an expected call of DeleteAllOfRouteTable.
func (mr *MockRouteTableClientMockRecorder) DeleteAllOfRouteTable(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).DeleteAllOfRouteTable), varargs...)
}

// DeleteRouteTable mocks base method.
func (m *MockRouteTableClient) DeleteRouteTable(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouteTable indicates an expected call of DeleteRouteTable.
func (mr *MockRouteTableClientMockRecorder) DeleteRouteTable(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).DeleteRouteTable), varargs...)
}

// GetRouteTable mocks base method.
func (m *MockRouteTableClient) GetRouteTable(ctx context.Context, key client.ObjectKey) (*v2.RouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteTable", ctx, key)
	ret0, _ := ret[0].(*v2.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteTable indicates an expected call of GetRouteTable.
func (mr *MockRouteTableClientMockRecorder) GetRouteTable(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).GetRouteTable), ctx, key)
}

// ListRouteTable mocks base method.
func (m *MockRouteTableClient) ListRouteTable(ctx context.Context, opts ...client.ListOption) (*v2.RouteTableList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRouteTable", varargs...)
	ret0, _ := ret[0].(*v2.RouteTableList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouteTable indicates an expected call of ListRouteTable.
func (mr *MockRouteTableClientMockRecorder) ListRouteTable(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).ListRouteTable), varargs...)
}

// PatchRouteTable mocks base method.
func (m *MockRouteTableClient) PatchRouteTable(ctx context.Context, obj *v2.RouteTable, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRouteTable indicates an expected call of PatchRouteTable.
func (mr *MockRouteTableClientMockRecorder) PatchRouteTable(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).PatchRouteTable), varargs...)
}

// PatchRouteTableStatus mocks base method.
func (m *MockRouteTableClient) PatchRouteTableStatus(ctx context.Context, obj *v2.RouteTable, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRouteTableStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRouteTableStatus indicates an expected call of PatchRouteTableStatus.
func (mr *MockRouteTableClientMockRecorder) PatchRouteTableStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRouteTableStatus", reflect.TypeOf((*MockRouteTableClient)(nil).PatchRouteTableStatus), varargs...)
}

// UpdateRouteTable mocks base method.
func (m *MockRouteTableClient) UpdateRouteTable(ctx context.Context, obj *v2.RouteTable, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRouteTable indicates an expected call of UpdateRouteTable.
func (mr *MockRouteTableClientMockRecorder) UpdateRouteTable(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).UpdateRouteTable), varargs...)
}

// UpdateRouteTableStatus mocks base method.
func (m *MockRouteTableClient) UpdateRouteTableStatus(ctx context.Context, obj *v2.RouteTable, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRouteTableStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRouteTableStatus indicates an expected call of UpdateRouteTableStatus.
func (mr *MockRouteTableClientMockRecorder) UpdateRouteTableStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteTableStatus", reflect.TypeOf((*MockRouteTableClient)(nil).UpdateRouteTableStatus), varargs...)
}

// UpsertRouteTable mocks base method.
func (m *MockRouteTableClient) UpsertRouteTable(ctx context.Context, obj *v2.RouteTable, transitionFuncs ...v2.RouteTableTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRouteTable indicates an expected call of UpsertRouteTable.
func (mr *MockRouteTableClientMockRecorder) UpsertRouteTable(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).UpsertRouteTable), varargs...)
}

// MockMulticlusterRouteTableClient is a mock of MulticlusterRouteTableClient interface.
type MockMulticlusterRouteTableClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRouteTableClientMockRecorder
}

// MockMulticlusterRouteTableClientMockRecorder is the mock recorder for MockMulticlusterRouteTableClient.
type MockMulticlusterRouteTableClientMockRecorder struct {
	mock *MockMulticlusterRouteTableClient
}

// NewMockMulticlusterRouteTableClient creates a new mock instance.
func NewMockMulticlusterRouteTableClient(ctrl *gomock.Controller) *MockMulticlusterRouteTableClient {
	mock := &MockMulticlusterRouteTableClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRouteTableClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRouteTableClient) EXPECT() *MockMulticlusterRouteTableClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterRouteTableClient) Cluster(cluster string) (v2.RouteTableClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.RouteTableClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterRouteTableClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterRouteTableClient)(nil).Cluster), cluster)
}

// MockVirtualDestinationReader is a mock of VirtualDestinationReader interface.
type MockVirtualDestinationReader struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualDestinationReaderMockRecorder
}

// MockVirtualDestinationReaderMockRecorder is the mock recorder for MockVirtualDestinationReader.
type MockVirtualDestinationReaderMockRecorder struct {
	mock *MockVirtualDestinationReader
}

// NewMockVirtualDestinationReader creates a new mock instance.
func NewMockVirtualDestinationReader(ctrl *gomock.Controller) *MockVirtualDestinationReader {
	mock := &MockVirtualDestinationReader{ctrl: ctrl}
	mock.recorder = &MockVirtualDestinationReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualDestinationReader) EXPECT() *MockVirtualDestinationReaderMockRecorder {
	return m.recorder
}

// GetVirtualDestination mocks base method.
func (m *MockVirtualDestinationReader) GetVirtualDestination(ctx context.Context, key client.ObjectKey) (*v2.VirtualDestination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualDestination", ctx, key)
	ret0, _ := ret[0].(*v2.VirtualDestination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualDestination indicates an expected call of GetVirtualDestination.
func (mr *MockVirtualDestinationReaderMockRecorder) GetVirtualDestination(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualDestination", reflect.TypeOf((*MockVirtualDestinationReader)(nil).GetVirtualDestination), ctx, key)
}

// ListVirtualDestination mocks base method.
func (m *MockVirtualDestinationReader) ListVirtualDestination(ctx context.Context, opts ...client.ListOption) (*v2.VirtualDestinationList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualDestination", varargs...)
	ret0, _ := ret[0].(*v2.VirtualDestinationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualDestination indicates an expected call of ListVirtualDestination.
func (mr *MockVirtualDestinationReaderMockRecorder) ListVirtualDestination(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualDestination", reflect.TypeOf((*MockVirtualDestinationReader)(nil).ListVirtualDestination), varargs...)
}

// MockVirtualDestinationWriter is a mock of VirtualDestinationWriter interface.
type MockVirtualDestinationWriter struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualDestinationWriterMockRecorder
}

// MockVirtualDestinationWriterMockRecorder is the mock recorder for MockVirtualDestinationWriter.
type MockVirtualDestinationWriterMockRecorder struct {
	mock *MockVirtualDestinationWriter
}

// NewMockVirtualDestinationWriter creates a new mock instance.
func NewMockVirtualDestinationWriter(ctrl *gomock.Controller) *MockVirtualDestinationWriter {
	mock := &MockVirtualDestinationWriter{ctrl: ctrl}
	mock.recorder = &MockVirtualDestinationWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualDestinationWriter) EXPECT() *MockVirtualDestinationWriterMockRecorder {
	return m.recorder
}

// CreateVirtualDestination mocks base method.
func (m *MockVirtualDestinationWriter) CreateVirtualDestination(ctx context.Context, obj *v2.VirtualDestination, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualDestination indicates an expected call of CreateVirtualDestination.
func (mr *MockVirtualDestinationWriterMockRecorder) CreateVirtualDestination(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualDestination", reflect.TypeOf((*MockVirtualDestinationWriter)(nil).CreateVirtualDestination), varargs...)
}

// DeleteAllOfVirtualDestination mocks base method.
func (m *MockVirtualDestinationWriter) DeleteAllOfVirtualDestination(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfVirtualDestination indicates an expected call of DeleteAllOfVirtualDestination.
func (mr *MockVirtualDestinationWriterMockRecorder) DeleteAllOfVirtualDestination(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfVirtualDestination", reflect.TypeOf((*MockVirtualDestinationWriter)(nil).DeleteAllOfVirtualDestination), varargs...)
}

// DeleteVirtualDestination mocks base method.
func (m *MockVirtualDestinationWriter) DeleteVirtualDestination(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualDestination indicates an expected call of DeleteVirtualDestination.
func (mr *MockVirtualDestinationWriterMockRecorder) DeleteVirtualDestination(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualDestination", reflect.TypeOf((*MockVirtualDestinationWriter)(nil).DeleteVirtualDestination), varargs...)
}

// PatchVirtualDestination mocks base method.
func (m *MockVirtualDestinationWriter) PatchVirtualDestination(ctx context.Context, obj *v2.VirtualDestination, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualDestination indicates an expected call of PatchVirtualDestination.
func (mr *MockVirtualDestinationWriterMockRecorder) PatchVirtualDestination(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualDestination", reflect.TypeOf((*MockVirtualDestinationWriter)(nil).PatchVirtualDestination), varargs...)
}

// UpdateVirtualDestination mocks base method.
func (m *MockVirtualDestinationWriter) UpdateVirtualDestination(ctx context.Context, obj *v2.VirtualDestination, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualDestination indicates an expected call of UpdateVirtualDestination.
func (mr *MockVirtualDestinationWriterMockRecorder) UpdateVirtualDestination(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualDestination", reflect.TypeOf((*MockVirtualDestinationWriter)(nil).UpdateVirtualDestination), varargs...)
}

// UpsertVirtualDestination mocks base method.
func (m *MockVirtualDestinationWriter) UpsertVirtualDestination(ctx context.Context, obj *v2.VirtualDestination, transitionFuncs ...v2.VirtualDestinationTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVirtualDestination indicates an expected call of UpsertVirtualDestination.
func (mr *MockVirtualDestinationWriterMockRecorder) UpsertVirtualDestination(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVirtualDestination", reflect.TypeOf((*MockVirtualDestinationWriter)(nil).UpsertVirtualDestination), varargs...)
}

// MockVirtualDestinationStatusWriter is a mock of VirtualDestinationStatusWriter interface.
type MockVirtualDestinationStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualDestinationStatusWriterMockRecorder
}

// MockVirtualDestinationStatusWriterMockRecorder is the mock recorder for MockVirtualDestinationStatusWriter.
type MockVirtualDestinationStatusWriterMockRecorder struct {
	mock *MockVirtualDestinationStatusWriter
}

// NewMockVirtualDestinationStatusWriter creates a new mock instance.
func NewMockVirtualDestinationStatusWriter(ctrl *gomock.Controller) *MockVirtualDestinationStatusWriter {
	mock := &MockVirtualDestinationStatusWriter{ctrl: ctrl}
	mock.recorder = &MockVirtualDestinationStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualDestinationStatusWriter) EXPECT() *MockVirtualDestinationStatusWriterMockRecorder {
	return m.recorder
}

// PatchVirtualDestinationStatus mocks base method.
func (m *MockVirtualDestinationStatusWriter) PatchVirtualDestinationStatus(ctx context.Context, obj *v2.VirtualDestination, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualDestinationStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualDestinationStatus indicates an expected call of PatchVirtualDestinationStatus.
func (mr *MockVirtualDestinationStatusWriterMockRecorder) PatchVirtualDestinationStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualDestinationStatus", reflect.TypeOf((*MockVirtualDestinationStatusWriter)(nil).PatchVirtualDestinationStatus), varargs...)
}

// UpdateVirtualDestinationStatus mocks base method.
func (m *MockVirtualDestinationStatusWriter) UpdateVirtualDestinationStatus(ctx context.Context, obj *v2.VirtualDestination, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualDestinationStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualDestinationStatus indicates an expected call of UpdateVirtualDestinationStatus.
func (mr *MockVirtualDestinationStatusWriterMockRecorder) UpdateVirtualDestinationStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualDestinationStatus", reflect.TypeOf((*MockVirtualDestinationStatusWriter)(nil).UpdateVirtualDestinationStatus), varargs...)
}

// MockVirtualDestinationClient is a mock of VirtualDestinationClient interface.
type MockVirtualDestinationClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualDestinationClientMockRecorder
}

// MockVirtualDestinationClientMockRecorder is the mock recorder for MockVirtualDestinationClient.
type MockVirtualDestinationClientMockRecorder struct {
	mock *MockVirtualDestinationClient
}

// NewMockVirtualDestinationClient creates a new mock instance.
func NewMockVirtualDestinationClient(ctrl *gomock.Controller) *MockVirtualDestinationClient {
	mock := &MockVirtualDestinationClient{ctrl: ctrl}
	mock.recorder = &MockVirtualDestinationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualDestinationClient) EXPECT() *MockVirtualDestinationClientMockRecorder {
	return m.recorder
}

// CreateVirtualDestination mocks base method.
func (m *MockVirtualDestinationClient) CreateVirtualDestination(ctx context.Context, obj *v2.VirtualDestination, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualDestination indicates an expected call of CreateVirtualDestination.
func (mr *MockVirtualDestinationClientMockRecorder) CreateVirtualDestination(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualDestination", reflect.TypeOf((*MockVirtualDestinationClient)(nil).CreateVirtualDestination), varargs...)
}

// DeleteAllOfVirtualDestination mocks base method.
func (m *MockVirtualDestinationClient) DeleteAllOfVirtualDestination(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfVirtualDestination indicates an expected call of DeleteAllOfVirtualDestination.
func (mr *MockVirtualDestinationClientMockRecorder) DeleteAllOfVirtualDestination(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfVirtualDestination", reflect.TypeOf((*MockVirtualDestinationClient)(nil).DeleteAllOfVirtualDestination), varargs...)
}

// DeleteVirtualDestination mocks base method.
func (m *MockVirtualDestinationClient) DeleteVirtualDestination(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualDestination indicates an expected call of DeleteVirtualDestination.
func (mr *MockVirtualDestinationClientMockRecorder) DeleteVirtualDestination(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualDestination", reflect.TypeOf((*MockVirtualDestinationClient)(nil).DeleteVirtualDestination), varargs...)
}

// GetVirtualDestination mocks base method.
func (m *MockVirtualDestinationClient) GetVirtualDestination(ctx context.Context, key client.ObjectKey) (*v2.VirtualDestination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualDestination", ctx, key)
	ret0, _ := ret[0].(*v2.VirtualDestination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualDestination indicates an expected call of GetVirtualDestination.
func (mr *MockVirtualDestinationClientMockRecorder) GetVirtualDestination(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualDestination", reflect.TypeOf((*MockVirtualDestinationClient)(nil).GetVirtualDestination), ctx, key)
}

// ListVirtualDestination mocks base method.
func (m *MockVirtualDestinationClient) ListVirtualDestination(ctx context.Context, opts ...client.ListOption) (*v2.VirtualDestinationList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualDestination", varargs...)
	ret0, _ := ret[0].(*v2.VirtualDestinationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualDestination indicates an expected call of ListVirtualDestination.
func (mr *MockVirtualDestinationClientMockRecorder) ListVirtualDestination(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualDestination", reflect.TypeOf((*MockVirtualDestinationClient)(nil).ListVirtualDestination), varargs...)
}

// PatchVirtualDestination mocks base method.
func (m *MockVirtualDestinationClient) PatchVirtualDestination(ctx context.Context, obj *v2.VirtualDestination, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualDestination indicates an expected call of PatchVirtualDestination.
func (mr *MockVirtualDestinationClientMockRecorder) PatchVirtualDestination(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualDestination", reflect.TypeOf((*MockVirtualDestinationClient)(nil).PatchVirtualDestination), varargs...)
}

// PatchVirtualDestinationStatus mocks base method.
func (m *MockVirtualDestinationClient) PatchVirtualDestinationStatus(ctx context.Context, obj *v2.VirtualDestination, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualDestinationStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualDestinationStatus indicates an expected call of PatchVirtualDestinationStatus.
func (mr *MockVirtualDestinationClientMockRecorder) PatchVirtualDestinationStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualDestinationStatus", reflect.TypeOf((*MockVirtualDestinationClient)(nil).PatchVirtualDestinationStatus), varargs...)
}

// UpdateVirtualDestination mocks base method.
func (m *MockVirtualDestinationClient) UpdateVirtualDestination(ctx context.Context, obj *v2.VirtualDestination, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualDestination indicates an expected call of UpdateVirtualDestination.
func (mr *MockVirtualDestinationClientMockRecorder) UpdateVirtualDestination(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualDestination", reflect.TypeOf((*MockVirtualDestinationClient)(nil).UpdateVirtualDestination), varargs...)
}

// UpdateVirtualDestinationStatus mocks base method.
func (m *MockVirtualDestinationClient) UpdateVirtualDestinationStatus(ctx context.Context, obj *v2.VirtualDestination, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualDestinationStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualDestinationStatus indicates an expected call of UpdateVirtualDestinationStatus.
func (mr *MockVirtualDestinationClientMockRecorder) UpdateVirtualDestinationStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualDestinationStatus", reflect.TypeOf((*MockVirtualDestinationClient)(nil).UpdateVirtualDestinationStatus), varargs...)
}

// UpsertVirtualDestination mocks base method.
func (m *MockVirtualDestinationClient) UpsertVirtualDestination(ctx context.Context, obj *v2.VirtualDestination, transitionFuncs ...v2.VirtualDestinationTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVirtualDestination indicates an expected call of UpsertVirtualDestination.
func (mr *MockVirtualDestinationClientMockRecorder) UpsertVirtualDestination(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVirtualDestination", reflect.TypeOf((*MockVirtualDestinationClient)(nil).UpsertVirtualDestination), varargs...)
}

// MockMulticlusterVirtualDestinationClient is a mock of MulticlusterVirtualDestinationClient interface.
type MockMulticlusterVirtualDestinationClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualDestinationClientMockRecorder
}

// MockMulticlusterVirtualDestinationClientMockRecorder is the mock recorder for MockMulticlusterVirtualDestinationClient.
type MockMulticlusterVirtualDestinationClientMockRecorder struct {
	mock *MockMulticlusterVirtualDestinationClient
}

// NewMockMulticlusterVirtualDestinationClient creates a new mock instance.
func NewMockMulticlusterVirtualDestinationClient(ctrl *gomock.Controller) *MockMulticlusterVirtualDestinationClient {
	mock := &MockMulticlusterVirtualDestinationClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualDestinationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterVirtualDestinationClient) EXPECT() *MockMulticlusterVirtualDestinationClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterVirtualDestinationClient) Cluster(cluster string) (v2.VirtualDestinationClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.VirtualDestinationClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterVirtualDestinationClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterVirtualDestinationClient)(nil).Cluster), cluster)
}

// MockVirtualGatewayReader is a mock of VirtualGatewayReader interface.
type MockVirtualGatewayReader struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualGatewayReaderMockRecorder
}

// MockVirtualGatewayReaderMockRecorder is the mock recorder for MockVirtualGatewayReader.
type MockVirtualGatewayReaderMockRecorder struct {
	mock *MockVirtualGatewayReader
}

// NewMockVirtualGatewayReader creates a new mock instance.
func NewMockVirtualGatewayReader(ctrl *gomock.Controller) *MockVirtualGatewayReader {
	mock := &MockVirtualGatewayReader{ctrl: ctrl}
	mock.recorder = &MockVirtualGatewayReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualGatewayReader) EXPECT() *MockVirtualGatewayReaderMockRecorder {
	return m.recorder
}

// GetVirtualGateway mocks base method.
func (m *MockVirtualGatewayReader) GetVirtualGateway(ctx context.Context, key client.ObjectKey) (*v2.VirtualGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualGateway", ctx, key)
	ret0, _ := ret[0].(*v2.VirtualGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualGateway indicates an expected call of GetVirtualGateway.
func (mr *MockVirtualGatewayReaderMockRecorder) GetVirtualGateway(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualGateway", reflect.TypeOf((*MockVirtualGatewayReader)(nil).GetVirtualGateway), ctx, key)
}

// ListVirtualGateway mocks base method.
func (m *MockVirtualGatewayReader) ListVirtualGateway(ctx context.Context, opts ...client.ListOption) (*v2.VirtualGatewayList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualGateway", varargs...)
	ret0, _ := ret[0].(*v2.VirtualGatewayList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualGateway indicates an expected call of ListVirtualGateway.
func (mr *MockVirtualGatewayReaderMockRecorder) ListVirtualGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualGateway", reflect.TypeOf((*MockVirtualGatewayReader)(nil).ListVirtualGateway), varargs...)
}

// MockVirtualGatewayWriter is a mock of VirtualGatewayWriter interface.
type MockVirtualGatewayWriter struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualGatewayWriterMockRecorder
}

// MockVirtualGatewayWriterMockRecorder is the mock recorder for MockVirtualGatewayWriter.
type MockVirtualGatewayWriterMockRecorder struct {
	mock *MockVirtualGatewayWriter
}

// NewMockVirtualGatewayWriter creates a new mock instance.
func NewMockVirtualGatewayWriter(ctrl *gomock.Controller) *MockVirtualGatewayWriter {
	mock := &MockVirtualGatewayWriter{ctrl: ctrl}
	mock.recorder = &MockVirtualGatewayWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualGatewayWriter) EXPECT() *MockVirtualGatewayWriterMockRecorder {
	return m.recorder
}

// CreateVirtualGateway mocks base method.
func (m *MockVirtualGatewayWriter) CreateVirtualGateway(ctx context.Context, obj *v2.VirtualGateway, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualGateway indicates an expected call of CreateVirtualGateway.
func (mr *MockVirtualGatewayWriterMockRecorder) CreateVirtualGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualGateway", reflect.TypeOf((*MockVirtualGatewayWriter)(nil).CreateVirtualGateway), varargs...)
}

// DeleteAllOfVirtualGateway mocks base method.
func (m *MockVirtualGatewayWriter) DeleteAllOfVirtualGateway(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfVirtualGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfVirtualGateway indicates an expected call of DeleteAllOfVirtualGateway.
func (mr *MockVirtualGatewayWriterMockRecorder) DeleteAllOfVirtualGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfVirtualGateway", reflect.TypeOf((*MockVirtualGatewayWriter)(nil).DeleteAllOfVirtualGateway), varargs...)
}

// DeleteVirtualGateway mocks base method.
func (m *MockVirtualGatewayWriter) DeleteVirtualGateway(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualGateway indicates an expected call of DeleteVirtualGateway.
func (mr *MockVirtualGatewayWriterMockRecorder) DeleteVirtualGateway(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualGateway", reflect.TypeOf((*MockVirtualGatewayWriter)(nil).DeleteVirtualGateway), varargs...)
}

// PatchVirtualGateway mocks base method.
func (m *MockVirtualGatewayWriter) PatchVirtualGateway(ctx context.Context, obj *v2.VirtualGateway, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualGateway indicates an expected call of PatchVirtualGateway.
func (mr *MockVirtualGatewayWriterMockRecorder) PatchVirtualGateway(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualGateway", reflect.TypeOf((*MockVirtualGatewayWriter)(nil).PatchVirtualGateway), varargs...)
}

// UpdateVirtualGateway mocks base method.
func (m *MockVirtualGatewayWriter) UpdateVirtualGateway(ctx context.Context, obj *v2.VirtualGateway, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualGateway indicates an expected call of UpdateVirtualGateway.
func (mr *MockVirtualGatewayWriterMockRecorder) UpdateVirtualGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualGateway", reflect.TypeOf((*MockVirtualGatewayWriter)(nil).UpdateVirtualGateway), varargs...)
}

// UpsertVirtualGateway mocks base method.
func (m *MockVirtualGatewayWriter) UpsertVirtualGateway(ctx context.Context, obj *v2.VirtualGateway, transitionFuncs ...v2.VirtualGatewayTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertVirtualGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVirtualGateway indicates an expected call of UpsertVirtualGateway.
func (mr *MockVirtualGatewayWriterMockRecorder) UpsertVirtualGateway(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVirtualGateway", reflect.TypeOf((*MockVirtualGatewayWriter)(nil).UpsertVirtualGateway), varargs...)
}

// MockVirtualGatewayStatusWriter is a mock of VirtualGatewayStatusWriter interface.
type MockVirtualGatewayStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualGatewayStatusWriterMockRecorder
}

// MockVirtualGatewayStatusWriterMockRecorder is the mock recorder for MockVirtualGatewayStatusWriter.
type MockVirtualGatewayStatusWriterMockRecorder struct {
	mock *MockVirtualGatewayStatusWriter
}

// NewMockVirtualGatewayStatusWriter creates a new mock instance.
func NewMockVirtualGatewayStatusWriter(ctrl *gomock.Controller) *MockVirtualGatewayStatusWriter {
	mock := &MockVirtualGatewayStatusWriter{ctrl: ctrl}
	mock.recorder = &MockVirtualGatewayStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualGatewayStatusWriter) EXPECT() *MockVirtualGatewayStatusWriterMockRecorder {
	return m.recorder
}

// PatchVirtualGatewayStatus mocks base method.
func (m *MockVirtualGatewayStatusWriter) PatchVirtualGatewayStatus(ctx context.Context, obj *v2.VirtualGateway, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualGatewayStatus indicates an expected call of PatchVirtualGatewayStatus.
func (mr *MockVirtualGatewayStatusWriterMockRecorder) PatchVirtualGatewayStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualGatewayStatus", reflect.TypeOf((*MockVirtualGatewayStatusWriter)(nil).PatchVirtualGatewayStatus), varargs...)
}

// UpdateVirtualGatewayStatus mocks base method.
func (m *MockVirtualGatewayStatusWriter) UpdateVirtualGatewayStatus(ctx context.Context, obj *v2.VirtualGateway, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualGatewayStatus indicates an expected call of UpdateVirtualGatewayStatus.
func (mr *MockVirtualGatewayStatusWriterMockRecorder) UpdateVirtualGatewayStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualGatewayStatus", reflect.TypeOf((*MockVirtualGatewayStatusWriter)(nil).UpdateVirtualGatewayStatus), varargs...)
}

// MockVirtualGatewayClient is a mock of VirtualGatewayClient interface.
type MockVirtualGatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualGatewayClientMockRecorder
}

// MockVirtualGatewayClientMockRecorder is the mock recorder for MockVirtualGatewayClient.
type MockVirtualGatewayClientMockRecorder struct {
	mock *MockVirtualGatewayClient
}

// NewMockVirtualGatewayClient creates a new mock instance.
func NewMockVirtualGatewayClient(ctrl *gomock.Controller) *MockVirtualGatewayClient {
	mock := &MockVirtualGatewayClient{ctrl: ctrl}
	mock.recorder = &MockVirtualGatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualGatewayClient) EXPECT() *MockVirtualGatewayClientMockRecorder {
	return m.recorder
}

// CreateVirtualGateway mocks base method.
func (m *MockVirtualGatewayClient) CreateVirtualGateway(ctx context.Context, obj *v2.VirtualGateway, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualGateway indicates an expected call of CreateVirtualGateway.
func (mr *MockVirtualGatewayClientMockRecorder) CreateVirtualGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualGateway", reflect.TypeOf((*MockVirtualGatewayClient)(nil).CreateVirtualGateway), varargs...)
}

// DeleteAllOfVirtualGateway mocks base method.
func (m *MockVirtualGatewayClient) DeleteAllOfVirtualGateway(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfVirtualGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfVirtualGateway indicates an expected call of DeleteAllOfVirtualGateway.
func (mr *MockVirtualGatewayClientMockRecorder) DeleteAllOfVirtualGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfVirtualGateway", reflect.TypeOf((*MockVirtualGatewayClient)(nil).DeleteAllOfVirtualGateway), varargs...)
}

// DeleteVirtualGateway mocks base method.
func (m *MockVirtualGatewayClient) DeleteVirtualGateway(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualGateway indicates an expected call of DeleteVirtualGateway.
func (mr *MockVirtualGatewayClientMockRecorder) DeleteVirtualGateway(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualGateway", reflect.TypeOf((*MockVirtualGatewayClient)(nil).DeleteVirtualGateway), varargs...)
}

// GetVirtualGateway mocks base method.
func (m *MockVirtualGatewayClient) GetVirtualGateway(ctx context.Context, key client.ObjectKey) (*v2.VirtualGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualGateway", ctx, key)
	ret0, _ := ret[0].(*v2.VirtualGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualGateway indicates an expected call of GetVirtualGateway.
func (mr *MockVirtualGatewayClientMockRecorder) GetVirtualGateway(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualGateway", reflect.TypeOf((*MockVirtualGatewayClient)(nil).GetVirtualGateway), ctx, key)
}

// ListVirtualGateway mocks base method.
func (m *MockVirtualGatewayClient) ListVirtualGateway(ctx context.Context, opts ...client.ListOption) (*v2.VirtualGatewayList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualGateway", varargs...)
	ret0, _ := ret[0].(*v2.VirtualGatewayList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualGateway indicates an expected call of ListVirtualGateway.
func (mr *MockVirtualGatewayClientMockRecorder) ListVirtualGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualGateway", reflect.TypeOf((*MockVirtualGatewayClient)(nil).ListVirtualGateway), varargs...)
}

// PatchVirtualGateway mocks base method.
func (m *MockVirtualGatewayClient) PatchVirtualGateway(ctx context.Context, obj *v2.VirtualGateway, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualGateway indicates an expected call of PatchVirtualGateway.
func (mr *MockVirtualGatewayClientMockRecorder) PatchVirtualGateway(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualGateway", reflect.TypeOf((*MockVirtualGatewayClient)(nil).PatchVirtualGateway), varargs...)
}

// PatchVirtualGatewayStatus mocks base method.
func (m *MockVirtualGatewayClient) PatchVirtualGatewayStatus(ctx context.Context, obj *v2.VirtualGateway, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualGatewayStatus indicates an expected call of PatchVirtualGatewayStatus.
func (mr *MockVirtualGatewayClientMockRecorder) PatchVirtualGatewayStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualGatewayStatus", reflect.TypeOf((*MockVirtualGatewayClient)(nil).PatchVirtualGatewayStatus), varargs...)
}

// UpdateVirtualGateway mocks base method.
func (m *MockVirtualGatewayClient) UpdateVirtualGateway(ctx context.Context, obj *v2.VirtualGateway, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualGateway indicates an expected call of UpdateVirtualGateway.
func (mr *MockVirtualGatewayClientMockRecorder) UpdateVirtualGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualGateway", reflect.TypeOf((*MockVirtualGatewayClient)(nil).UpdateVirtualGateway), varargs...)
}

// UpdateVirtualGatewayStatus mocks base method.
func (m *MockVirtualGatewayClient) UpdateVirtualGatewayStatus(ctx context.Context, obj *v2.VirtualGateway, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualGatewayStatus indicates an expected call of UpdateVirtualGatewayStatus.
func (mr *MockVirtualGatewayClientMockRecorder) UpdateVirtualGatewayStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualGatewayStatus", reflect.TypeOf((*MockVirtualGatewayClient)(nil).UpdateVirtualGatewayStatus), varargs...)
}

// UpsertVirtualGateway mocks base method.
func (m *MockVirtualGatewayClient) UpsertVirtualGateway(ctx context.Context, obj *v2.VirtualGateway, transitionFuncs ...v2.VirtualGatewayTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertVirtualGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVirtualGateway indicates an expected call of UpsertVirtualGateway.
func (mr *MockVirtualGatewayClientMockRecorder) UpsertVirtualGateway(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVirtualGateway", reflect.TypeOf((*MockVirtualGatewayClient)(nil).UpsertVirtualGateway), varargs...)
}

// MockMulticlusterVirtualGatewayClient is a mock of MulticlusterVirtualGatewayClient interface.
type MockMulticlusterVirtualGatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualGatewayClientMockRecorder
}

// MockMulticlusterVirtualGatewayClientMockRecorder is the mock recorder for MockMulticlusterVirtualGatewayClient.
type MockMulticlusterVirtualGatewayClientMockRecorder struct {
	mock *MockMulticlusterVirtualGatewayClient
}

// NewMockMulticlusterVirtualGatewayClient creates a new mock instance.
func NewMockMulticlusterVirtualGatewayClient(ctrl *gomock.Controller) *MockMulticlusterVirtualGatewayClient {
	mock := &MockMulticlusterVirtualGatewayClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualGatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterVirtualGatewayClient) EXPECT() *MockMulticlusterVirtualGatewayClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterVirtualGatewayClient) Cluster(cluster string) (v2.VirtualGatewayClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.VirtualGatewayClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterVirtualGatewayClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterVirtualGatewayClient)(nil).Cluster), cluster)
}
