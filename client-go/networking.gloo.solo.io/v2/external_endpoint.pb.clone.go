// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/networking/v2/external_endpoint.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *ExternalEndpointSpec) Clone() proto.Message {
	var target *ExternalEndpointSpec
	if m == nil {
		return target
	}
	target = &ExternalEndpointSpec{}

	target.Address = m.GetAddress()

	if m.GetPorts() != nil {
		target.Ports = make([]*ExternalEndpointSpec_Port, len(m.GetPorts()))
		for idx, v := range m.GetPorts() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Ports[idx] = h.Clone().(*ExternalEndpointSpec_Port)
			} else {
				target.Ports[idx] = proto.Clone(v).(*ExternalEndpointSpec_Port)
			}

		}
	}

	if h, ok := interface{}(m.GetLocality()).(clone.Cloner); ok {
		target.Locality = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Locality)
	} else {
		target.Locality = proto.Clone(m.GetLocality()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Locality)
	}

	return target
}

// Clone function
func (m *ExternalEndpointStatus) Clone() proto.Message {
	var target *ExternalEndpointStatus
	if m == nil {
		return target
	}
	target = &ExternalEndpointStatus{}

	if h, ok := interface{}(m.GetGlobal()).(clone.Cloner); ok {
		target.Global = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.GenericGlobalStatus)
	} else {
		target.Global = proto.Clone(m.GetGlobal()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.GenericGlobalStatus)
	}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkspaceStatus, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkspaceStatus)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkspaceStatus)
			}

		}
	}

	return target
}

// Clone function
func (m *ExternalEndpointSpec_Port) Clone() proto.Message {
	var target *ExternalEndpointSpec_Port
	if m == nil {
		return target
	}
	target = &ExternalEndpointSpec_Port{}

	target.Name = m.GetName()

	target.Number = m.GetNumber()

	return target
}
