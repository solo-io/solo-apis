// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/networking/v2/virtual_gateway.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *VirtualGatewaySpec) Clone() proto.Message {
	var target *VirtualGatewaySpec
	if m == nil {
		return target
	}
	target = &VirtualGatewaySpec{}

	if m.GetWorkloads() != nil {
		target.Workloads = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkloadSelector, len(m.GetWorkloads()))
		for idx, v := range m.GetWorkloads() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workloads[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkloadSelector)
			} else {
				target.Workloads[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkloadSelector)
			}

		}
	}

	if m.GetListeners() != nil {
		target.Listeners = make([]*VirtualGatewaySpec_Listener, len(m.GetListeners()))
		for idx, v := range m.GetListeners() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Listeners[idx] = h.Clone().(*VirtualGatewaySpec_Listener)
			} else {
				target.Listeners[idx] = proto.Clone(v).(*VirtualGatewaySpec_Listener)
			}

		}
	}

	return target
}

// Clone function
func (m *TLSConfig) Clone() proto.Message {
	var target *TLSConfig
	if m == nil {
		return target
	}
	target = &TLSConfig{}

	if m.GetVerifySubjectAltName() != nil {
		target.VerifySubjectAltName = make([]string, len(m.GetVerifySubjectAltName()))
		for idx, v := range m.GetVerifySubjectAltName() {

			target.VerifySubjectAltName[idx] = v

		}
	}

	if h, ok := interface{}(m.GetParameters()).(clone.Cloner); ok {
		target.Parameters = h.Clone().(*TLSConfig_Parameters)
	} else {
		target.Parameters = proto.Clone(m.GetParameters()).(*TLSConfig_Parameters)
	}

	target.Mode = m.GetMode()

	switch m.Certificates.(type) {

	case *TLSConfig_SecretName:

		target.Certificates = &TLSConfig_SecretName{
			SecretName: m.GetSecretName(),
		}

	case *TLSConfig_Files_:

		if h, ok := interface{}(m.GetFiles()).(clone.Cloner); ok {
			target.Certificates = &TLSConfig_Files_{
				Files: h.Clone().(*TLSConfig_Files),
			}
		} else {
			target.Certificates = &TLSConfig_Files_{
				Files: proto.Clone(m.GetFiles()).(*TLSConfig_Files),
			}
		}

	}

	return target
}

// Clone function
func (m *VirtualGatewayStatus) Clone() proto.Message {
	var target *VirtualGatewayStatus
	if m == nil {
		return target
	}
	target = &VirtualGatewayStatus{}

	if h, ok := interface{}(m.GetCommon()).(clone.Cloner); ok {
		target.Common = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	} else {
		target.Common = proto.Clone(m.GetCommon()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	}

	target.RouteTablesCount = m.GetRouteTablesCount()

	target.SelectedWorkloadsCount = m.GetSelectedWorkloadsCount()

	return target
}

// Clone function
func (m *VirtualGatewayReport) Clone() proto.Message {
	var target *VirtualGatewayReport
	if m == nil {
		return target
	}
	target = &VirtualGatewayReport{}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Report)
			}

		}
	}

	if m.GetAllowedRouteTables() != nil {
		target.AllowedRouteTables = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference, len(m.GetAllowedRouteTables()))
		for idx, v := range m.GetAllowedRouteTables() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.AllowedRouteTables[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			} else {
				target.AllowedRouteTables[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			}

		}
	}

	if m.GetSelectedWorkloads() != nil {
		target.SelectedWorkloads = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference, len(m.GetSelectedWorkloads()))
		for idx, v := range m.GetSelectedWorkloads() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SelectedWorkloads[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			} else {
				target.SelectedWorkloads[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			}

		}
	}

	return target
}

// Clone function
func (m *VirtualGatewaySpec_Listener) Clone() proto.Message {
	var target *VirtualGatewaySpec_Listener
	if m == nil {
		return target
	}
	target = &VirtualGatewaySpec_Listener{}

	if h, ok := interface{}(m.GetPort()).(clone.Cloner); ok {
		target.Port = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.PortSelector)
	} else {
		target.Port = proto.Clone(m.GetPort()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.PortSelector)
	}

	if m.GetAllowedRouteTables() != nil {
		target.AllowedRouteTables = make([]*VirtualGatewaySpec_Listener_RouteTableFilter, len(m.GetAllowedRouteTables()))
		for idx, v := range m.GetAllowedRouteTables() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.AllowedRouteTables[idx] = h.Clone().(*VirtualGatewaySpec_Listener_RouteTableFilter)
			} else {
				target.AllowedRouteTables[idx] = proto.Clone(v).(*VirtualGatewaySpec_Listener_RouteTableFilter)
			}

		}
	}

	target.AppProtocol = m.GetAppProtocol()

	switch m.TlsSettings.(type) {

	case *VirtualGatewaySpec_Listener_Tls:

		if h, ok := interface{}(m.GetTls()).(clone.Cloner); ok {
			target.TlsSettings = &VirtualGatewaySpec_Listener_Tls{
				Tls: h.Clone().(*TLSConfig),
			}
		} else {
			target.TlsSettings = &VirtualGatewaySpec_Listener_Tls{
				Tls: proto.Clone(m.GetTls()).(*TLSConfig),
			}
		}

	case *VirtualGatewaySpec_Listener_HttpsRedirect:

		target.TlsSettings = &VirtualGatewaySpec_Listener_HttpsRedirect{
			HttpsRedirect: m.GetHttpsRedirect(),
		}

	}

	switch m.ListenerType.(type) {

	case *VirtualGatewaySpec_Listener_Http:

		if h, ok := interface{}(m.GetHttp()).(clone.Cloner); ok {
			target.ListenerType = &VirtualGatewaySpec_Listener_Http{
				Http: h.Clone().(*VirtualGatewaySpec_Listener_HTTPServer),
			}
		} else {
			target.ListenerType = &VirtualGatewaySpec_Listener_Http{
				Http: proto.Clone(m.GetHttp()).(*VirtualGatewaySpec_Listener_HTTPServer),
			}
		}

	case *VirtualGatewaySpec_Listener_Tcp:

		if h, ok := interface{}(m.GetTcp()).(clone.Cloner); ok {
			target.ListenerType = &VirtualGatewaySpec_Listener_Tcp{
				Tcp: h.Clone().(*VirtualGatewaySpec_Listener_TCPServer),
			}
		} else {
			target.ListenerType = &VirtualGatewaySpec_Listener_Tcp{
				Tcp: proto.Clone(m.GetTcp()).(*VirtualGatewaySpec_Listener_TCPServer),
			}
		}

	}

	return target
}

// Clone function
func (m *VirtualGatewaySpec_Listener_HTTPServer) Clone() proto.Message {
	var target *VirtualGatewaySpec_Listener_HTTPServer
	if m == nil {
		return target
	}
	target = &VirtualGatewaySpec_Listener_HTTPServer{}

	return target
}

// Clone function
func (m *VirtualGatewaySpec_Listener_TCPServer) Clone() proto.Message {
	var target *VirtualGatewaySpec_Listener_TCPServer
	if m == nil {
		return target
	}
	target = &VirtualGatewaySpec_Listener_TCPServer{}

	return target
}

// Clone function
func (m *VirtualGatewaySpec_Listener_RouteTableFilter) Clone() proto.Message {
	var target *VirtualGatewaySpec_Listener_RouteTableFilter
	if m == nil {
		return target
	}
	target = &VirtualGatewaySpec_Listener_RouteTableFilter{}

	target.Host = m.GetHost()

	if h, ok := interface{}(m.GetSelector()).(clone.Cloner); ok {
		target.Selector = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectSelector)
	} else {
		target.Selector = proto.Clone(m.GetSelector()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectSelector)
	}

	if m.GetAllowedRoutes() != nil {
		target.AllowedRoutes = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.RouteFilter, len(m.GetAllowedRoutes()))
		for idx, v := range m.GetAllowedRoutes() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.AllowedRoutes[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.RouteFilter)
			} else {
				target.AllowedRoutes[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.RouteFilter)
			}

		}
	}

	return target
}

// Clone function
func (m *TLSConfig_Files) Clone() proto.Message {
	var target *TLSConfig_Files
	if m == nil {
		return target
	}
	target = &TLSConfig_Files{}

	target.ServerCert = m.GetServerCert()

	target.PrivateKey = m.GetPrivateKey()

	target.CaCerts = m.GetCaCerts()

	return target
}

// Clone function
func (m *TLSConfig_Parameters) Clone() proto.Message {
	var target *TLSConfig_Parameters
	if m == nil {
		return target
	}
	target = &TLSConfig_Parameters{}

	target.MinimumProtocolVersion = m.GetMinimumProtocolVersion()

	target.MaximumProtocolVersion = m.GetMaximumProtocolVersion()

	if m.GetCipherSuites() != nil {
		target.CipherSuites = make([]string, len(m.GetCipherSuites()))
		for idx, v := range m.GetCipherSuites() {

			target.CipherSuites[idx] = v

		}
	}

	return target
}
