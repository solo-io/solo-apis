// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/networking/v2/cloud_provider.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *CloudProviderSpec) Clone() proto.Message {
	var target *CloudProviderSpec
	if m == nil {
		return target
	}
	target = &CloudProviderSpec{}

	switch m.Provider.(type) {

	case *CloudProviderSpec_Aws:

		if h, ok := interface{}(m.GetAws()).(clone.Cloner); ok {
			target.Provider = &CloudProviderSpec_Aws{
				Aws: h.Clone().(*AWSProvider),
			}
		} else {
			target.Provider = &CloudProviderSpec_Aws{
				Aws: proto.Clone(m.GetAws()).(*AWSProvider),
			}
		}

	}

	return target
}

// Clone function
func (m *AWSProvider) Clone() proto.Message {
	var target *AWSProvider
	if m == nil {
		return target
	}
	target = &AWSProvider{}

	target.AccountId = m.GetAccountId()

	target.Region = m.GetRegion()

	target.StsEndpoint = m.GetStsEndpoint()

	if h, ok := interface{}(m.GetLambda()).(clone.Cloner); ok {
		target.Lambda = h.Clone().(*LambdaOptions)
	} else {
		target.Lambda = proto.Clone(m.GetLambda()).(*LambdaOptions)
	}

	return target
}

// Clone function
func (m *LambdaOptions) Clone() proto.Message {
	var target *LambdaOptions
	if m == nil {
		return target
	}
	target = &LambdaOptions{}

	target.InvokeRoleName = m.GetInvokeRoleName()

	return target
}

// Clone function
func (m *CloudProviderStatus) Clone() proto.Message {
	var target *CloudProviderStatus
	if m == nil {
		return target
	}
	target = &CloudProviderStatus{}

	if h, ok := interface{}(m.GetGlobal()).(clone.Cloner); ok {
		target.Global = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.GenericGlobalStatus)
	} else {
		target.Global = proto.Clone(m.GetGlobal()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.GenericGlobalStatus)
	}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkspaceStatus, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkspaceStatus)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.WorkspaceStatus)
			}

		}
	}

	if m.GetChildCloudResources() != nil {
		target.ChildCloudResources = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference, len(m.GetChildCloudResources()))
		for idx, v := range m.GetChildCloudResources() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ChildCloudResources[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			} else {
				target.ChildCloudResources[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			}

		}
	}

	target.NumRoutableFunctions = m.GetNumRoutableFunctions()

	if h, ok := interface{}(m.GetOwnerWorkspace()).(clone.Cloner); ok {
		target.OwnerWorkspace = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.OwnerWorkspace)
	} else {
		target.OwnerWorkspace = proto.Clone(m.GetOwnerWorkspace()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.OwnerWorkspace)
	}

	return target
}
