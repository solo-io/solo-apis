// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	networking_gloo_solo_io_v2 "github.com/solo-io/solo-apis/client-go/networking.gloo.solo.io/v2"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the CloudProvider Resource across clusters.
// implemented by the user
type MulticlusterCloudProviderReconciler interface {
	ReconcileCloudProvider(clusterName string, obj *networking_gloo_solo_io_v2.CloudProvider) (reconcile.Result, error)
}

// Reconcile deletion events for the CloudProvider Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterCloudProviderDeletionReconciler interface {
	ReconcileCloudProviderDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterCloudProviderReconcilerFuncs struct {
	OnReconcileCloudProvider         func(clusterName string, obj *networking_gloo_solo_io_v2.CloudProvider) (reconcile.Result, error)
	OnReconcileCloudProviderDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterCloudProviderReconcilerFuncs) ReconcileCloudProvider(clusterName string, obj *networking_gloo_solo_io_v2.CloudProvider) (reconcile.Result, error) {
	if f.OnReconcileCloudProvider == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileCloudProvider(clusterName, obj)
}

func (f *MulticlusterCloudProviderReconcilerFuncs) ReconcileCloudProviderDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileCloudProviderDeletion == nil {
		return nil
	}
	return f.OnReconcileCloudProviderDeletion(clusterName, req)
}

type MulticlusterCloudProviderReconcileLoop interface {
	// AddMulticlusterCloudProviderReconciler adds a MulticlusterCloudProviderReconciler to the MulticlusterCloudProviderReconcileLoop.
	AddMulticlusterCloudProviderReconciler(ctx context.Context, rec MulticlusterCloudProviderReconciler, predicates ...predicate.Predicate)
}

type multiclusterCloudProviderReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterCloudProviderReconcileLoop) AddMulticlusterCloudProviderReconciler(ctx context.Context, rec MulticlusterCloudProviderReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericCloudProviderMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterCloudProviderReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterCloudProviderReconcileLoop {
	return &multiclusterCloudProviderReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &networking_gloo_solo_io_v2.CloudProvider{}, options)}
}

type genericCloudProviderMulticlusterReconciler struct {
	reconciler MulticlusterCloudProviderReconciler
}

func (g genericCloudProviderMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterCloudProviderDeletionReconciler); ok {
		return deletionReconciler.ReconcileCloudProviderDeletion(cluster, req)
	}
	return nil
}

func (g genericCloudProviderMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*networking_gloo_solo_io_v2.CloudProvider)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: CloudProvider handler received event for %T", object)
	}
	return g.reconciler.ReconcileCloudProvider(cluster, obj)
}

// Reconcile Upsert events for the CloudResources Resource across clusters.
// implemented by the user
type MulticlusterCloudResourcesReconciler interface {
	ReconcileCloudResources(clusterName string, obj *networking_gloo_solo_io_v2.CloudResources) (reconcile.Result, error)
}

// Reconcile deletion events for the CloudResources Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterCloudResourcesDeletionReconciler interface {
	ReconcileCloudResourcesDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterCloudResourcesReconcilerFuncs struct {
	OnReconcileCloudResources         func(clusterName string, obj *networking_gloo_solo_io_v2.CloudResources) (reconcile.Result, error)
	OnReconcileCloudResourcesDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterCloudResourcesReconcilerFuncs) ReconcileCloudResources(clusterName string, obj *networking_gloo_solo_io_v2.CloudResources) (reconcile.Result, error) {
	if f.OnReconcileCloudResources == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileCloudResources(clusterName, obj)
}

func (f *MulticlusterCloudResourcesReconcilerFuncs) ReconcileCloudResourcesDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileCloudResourcesDeletion == nil {
		return nil
	}
	return f.OnReconcileCloudResourcesDeletion(clusterName, req)
}

type MulticlusterCloudResourcesReconcileLoop interface {
	// AddMulticlusterCloudResourcesReconciler adds a MulticlusterCloudResourcesReconciler to the MulticlusterCloudResourcesReconcileLoop.
	AddMulticlusterCloudResourcesReconciler(ctx context.Context, rec MulticlusterCloudResourcesReconciler, predicates ...predicate.Predicate)
}

type multiclusterCloudResourcesReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterCloudResourcesReconcileLoop) AddMulticlusterCloudResourcesReconciler(ctx context.Context, rec MulticlusterCloudResourcesReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericCloudResourcesMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterCloudResourcesReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterCloudResourcesReconcileLoop {
	return &multiclusterCloudResourcesReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &networking_gloo_solo_io_v2.CloudResources{}, options)}
}

type genericCloudResourcesMulticlusterReconciler struct {
	reconciler MulticlusterCloudResourcesReconciler
}

func (g genericCloudResourcesMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterCloudResourcesDeletionReconciler); ok {
		return deletionReconciler.ReconcileCloudResourcesDeletion(cluster, req)
	}
	return nil
}

func (g genericCloudResourcesMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*networking_gloo_solo_io_v2.CloudResources)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: CloudResources handler received event for %T", object)
	}
	return g.reconciler.ReconcileCloudResources(cluster, obj)
}

// Reconcile Upsert events for the ExternalService Resource across clusters.
// implemented by the user
type MulticlusterExternalServiceReconciler interface {
	ReconcileExternalService(clusterName string, obj *networking_gloo_solo_io_v2.ExternalService) (reconcile.Result, error)
}

// Reconcile deletion events for the ExternalService Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterExternalServiceDeletionReconciler interface {
	ReconcileExternalServiceDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterExternalServiceReconcilerFuncs struct {
	OnReconcileExternalService         func(clusterName string, obj *networking_gloo_solo_io_v2.ExternalService) (reconcile.Result, error)
	OnReconcileExternalServiceDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterExternalServiceReconcilerFuncs) ReconcileExternalService(clusterName string, obj *networking_gloo_solo_io_v2.ExternalService) (reconcile.Result, error) {
	if f.OnReconcileExternalService == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileExternalService(clusterName, obj)
}

func (f *MulticlusterExternalServiceReconcilerFuncs) ReconcileExternalServiceDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileExternalServiceDeletion == nil {
		return nil
	}
	return f.OnReconcileExternalServiceDeletion(clusterName, req)
}

type MulticlusterExternalServiceReconcileLoop interface {
	// AddMulticlusterExternalServiceReconciler adds a MulticlusterExternalServiceReconciler to the MulticlusterExternalServiceReconcileLoop.
	AddMulticlusterExternalServiceReconciler(ctx context.Context, rec MulticlusterExternalServiceReconciler, predicates ...predicate.Predicate)
}

type multiclusterExternalServiceReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterExternalServiceReconcileLoop) AddMulticlusterExternalServiceReconciler(ctx context.Context, rec MulticlusterExternalServiceReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericExternalServiceMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterExternalServiceReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterExternalServiceReconcileLoop {
	return &multiclusterExternalServiceReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &networking_gloo_solo_io_v2.ExternalService{}, options)}
}

type genericExternalServiceMulticlusterReconciler struct {
	reconciler MulticlusterExternalServiceReconciler
}

func (g genericExternalServiceMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterExternalServiceDeletionReconciler); ok {
		return deletionReconciler.ReconcileExternalServiceDeletion(cluster, req)
	}
	return nil
}

func (g genericExternalServiceMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*networking_gloo_solo_io_v2.ExternalService)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: ExternalService handler received event for %T", object)
	}
	return g.reconciler.ReconcileExternalService(cluster, obj)
}

// Reconcile Upsert events for the ExternalEndpoint Resource across clusters.
// implemented by the user
type MulticlusterExternalEndpointReconciler interface {
	ReconcileExternalEndpoint(clusterName string, obj *networking_gloo_solo_io_v2.ExternalEndpoint) (reconcile.Result, error)
}

// Reconcile deletion events for the ExternalEndpoint Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterExternalEndpointDeletionReconciler interface {
	ReconcileExternalEndpointDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterExternalEndpointReconcilerFuncs struct {
	OnReconcileExternalEndpoint         func(clusterName string, obj *networking_gloo_solo_io_v2.ExternalEndpoint) (reconcile.Result, error)
	OnReconcileExternalEndpointDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterExternalEndpointReconcilerFuncs) ReconcileExternalEndpoint(clusterName string, obj *networking_gloo_solo_io_v2.ExternalEndpoint) (reconcile.Result, error) {
	if f.OnReconcileExternalEndpoint == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileExternalEndpoint(clusterName, obj)
}

func (f *MulticlusterExternalEndpointReconcilerFuncs) ReconcileExternalEndpointDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileExternalEndpointDeletion == nil {
		return nil
	}
	return f.OnReconcileExternalEndpointDeletion(clusterName, req)
}

type MulticlusterExternalEndpointReconcileLoop interface {
	// AddMulticlusterExternalEndpointReconciler adds a MulticlusterExternalEndpointReconciler to the MulticlusterExternalEndpointReconcileLoop.
	AddMulticlusterExternalEndpointReconciler(ctx context.Context, rec MulticlusterExternalEndpointReconciler, predicates ...predicate.Predicate)
}

type multiclusterExternalEndpointReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterExternalEndpointReconcileLoop) AddMulticlusterExternalEndpointReconciler(ctx context.Context, rec MulticlusterExternalEndpointReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericExternalEndpointMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterExternalEndpointReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterExternalEndpointReconcileLoop {
	return &multiclusterExternalEndpointReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &networking_gloo_solo_io_v2.ExternalEndpoint{}, options)}
}

type genericExternalEndpointMulticlusterReconciler struct {
	reconciler MulticlusterExternalEndpointReconciler
}

func (g genericExternalEndpointMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterExternalEndpointDeletionReconciler); ok {
		return deletionReconciler.ReconcileExternalEndpointDeletion(cluster, req)
	}
	return nil
}

func (g genericExternalEndpointMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*networking_gloo_solo_io_v2.ExternalEndpoint)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: ExternalEndpoint handler received event for %T", object)
	}
	return g.reconciler.ReconcileExternalEndpoint(cluster, obj)
}

// Reconcile Upsert events for the RouteTable Resource across clusters.
// implemented by the user
type MulticlusterRouteTableReconciler interface {
	ReconcileRouteTable(clusterName string, obj *networking_gloo_solo_io_v2.RouteTable) (reconcile.Result, error)
}

// Reconcile deletion events for the RouteTable Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterRouteTableDeletionReconciler interface {
	ReconcileRouteTableDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterRouteTableReconcilerFuncs struct {
	OnReconcileRouteTable         func(clusterName string, obj *networking_gloo_solo_io_v2.RouteTable) (reconcile.Result, error)
	OnReconcileRouteTableDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterRouteTableReconcilerFuncs) ReconcileRouteTable(clusterName string, obj *networking_gloo_solo_io_v2.RouteTable) (reconcile.Result, error) {
	if f.OnReconcileRouteTable == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileRouteTable(clusterName, obj)
}

func (f *MulticlusterRouteTableReconcilerFuncs) ReconcileRouteTableDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileRouteTableDeletion == nil {
		return nil
	}
	return f.OnReconcileRouteTableDeletion(clusterName, req)
}

type MulticlusterRouteTableReconcileLoop interface {
	// AddMulticlusterRouteTableReconciler adds a MulticlusterRouteTableReconciler to the MulticlusterRouteTableReconcileLoop.
	AddMulticlusterRouteTableReconciler(ctx context.Context, rec MulticlusterRouteTableReconciler, predicates ...predicate.Predicate)
}

type multiclusterRouteTableReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterRouteTableReconcileLoop) AddMulticlusterRouteTableReconciler(ctx context.Context, rec MulticlusterRouteTableReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericRouteTableMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterRouteTableReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterRouteTableReconcileLoop {
	return &multiclusterRouteTableReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &networking_gloo_solo_io_v2.RouteTable{}, options)}
}

type genericRouteTableMulticlusterReconciler struct {
	reconciler MulticlusterRouteTableReconciler
}

func (g genericRouteTableMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterRouteTableDeletionReconciler); ok {
		return deletionReconciler.ReconcileRouteTableDeletion(cluster, req)
	}
	return nil
}

func (g genericRouteTableMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*networking_gloo_solo_io_v2.RouteTable)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: RouteTable handler received event for %T", object)
	}
	return g.reconciler.ReconcileRouteTable(cluster, obj)
}

// Reconcile Upsert events for the VirtualDestination Resource across clusters.
// implemented by the user
type MulticlusterVirtualDestinationReconciler interface {
	ReconcileVirtualDestination(clusterName string, obj *networking_gloo_solo_io_v2.VirtualDestination) (reconcile.Result, error)
}

// Reconcile deletion events for the VirtualDestination Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterVirtualDestinationDeletionReconciler interface {
	ReconcileVirtualDestinationDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterVirtualDestinationReconcilerFuncs struct {
	OnReconcileVirtualDestination         func(clusterName string, obj *networking_gloo_solo_io_v2.VirtualDestination) (reconcile.Result, error)
	OnReconcileVirtualDestinationDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterVirtualDestinationReconcilerFuncs) ReconcileVirtualDestination(clusterName string, obj *networking_gloo_solo_io_v2.VirtualDestination) (reconcile.Result, error) {
	if f.OnReconcileVirtualDestination == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileVirtualDestination(clusterName, obj)
}

func (f *MulticlusterVirtualDestinationReconcilerFuncs) ReconcileVirtualDestinationDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileVirtualDestinationDeletion == nil {
		return nil
	}
	return f.OnReconcileVirtualDestinationDeletion(clusterName, req)
}

type MulticlusterVirtualDestinationReconcileLoop interface {
	// AddMulticlusterVirtualDestinationReconciler adds a MulticlusterVirtualDestinationReconciler to the MulticlusterVirtualDestinationReconcileLoop.
	AddMulticlusterVirtualDestinationReconciler(ctx context.Context, rec MulticlusterVirtualDestinationReconciler, predicates ...predicate.Predicate)
}

type multiclusterVirtualDestinationReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterVirtualDestinationReconcileLoop) AddMulticlusterVirtualDestinationReconciler(ctx context.Context, rec MulticlusterVirtualDestinationReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericVirtualDestinationMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterVirtualDestinationReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterVirtualDestinationReconcileLoop {
	return &multiclusterVirtualDestinationReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &networking_gloo_solo_io_v2.VirtualDestination{}, options)}
}

type genericVirtualDestinationMulticlusterReconciler struct {
	reconciler MulticlusterVirtualDestinationReconciler
}

func (g genericVirtualDestinationMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterVirtualDestinationDeletionReconciler); ok {
		return deletionReconciler.ReconcileVirtualDestinationDeletion(cluster, req)
	}
	return nil
}

func (g genericVirtualDestinationMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*networking_gloo_solo_io_v2.VirtualDestination)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: VirtualDestination handler received event for %T", object)
	}
	return g.reconciler.ReconcileVirtualDestination(cluster, obj)
}

// Reconcile Upsert events for the VirtualGateway Resource across clusters.
// implemented by the user
type MulticlusterVirtualGatewayReconciler interface {
	ReconcileVirtualGateway(clusterName string, obj *networking_gloo_solo_io_v2.VirtualGateway) (reconcile.Result, error)
}

// Reconcile deletion events for the VirtualGateway Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterVirtualGatewayDeletionReconciler interface {
	ReconcileVirtualGatewayDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterVirtualGatewayReconcilerFuncs struct {
	OnReconcileVirtualGateway         func(clusterName string, obj *networking_gloo_solo_io_v2.VirtualGateway) (reconcile.Result, error)
	OnReconcileVirtualGatewayDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterVirtualGatewayReconcilerFuncs) ReconcileVirtualGateway(clusterName string, obj *networking_gloo_solo_io_v2.VirtualGateway) (reconcile.Result, error) {
	if f.OnReconcileVirtualGateway == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileVirtualGateway(clusterName, obj)
}

func (f *MulticlusterVirtualGatewayReconcilerFuncs) ReconcileVirtualGatewayDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileVirtualGatewayDeletion == nil {
		return nil
	}
	return f.OnReconcileVirtualGatewayDeletion(clusterName, req)
}

type MulticlusterVirtualGatewayReconcileLoop interface {
	// AddMulticlusterVirtualGatewayReconciler adds a MulticlusterVirtualGatewayReconciler to the MulticlusterVirtualGatewayReconcileLoop.
	AddMulticlusterVirtualGatewayReconciler(ctx context.Context, rec MulticlusterVirtualGatewayReconciler, predicates ...predicate.Predicate)
}

type multiclusterVirtualGatewayReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterVirtualGatewayReconcileLoop) AddMulticlusterVirtualGatewayReconciler(ctx context.Context, rec MulticlusterVirtualGatewayReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericVirtualGatewayMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterVirtualGatewayReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterVirtualGatewayReconcileLoop {
	return &multiclusterVirtualGatewayReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &networking_gloo_solo_io_v2.VirtualGateway{}, options)}
}

type genericVirtualGatewayMulticlusterReconciler struct {
	reconciler MulticlusterVirtualGatewayReconciler
}

func (g genericVirtualGatewayMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterVirtualGatewayDeletionReconciler); ok {
		return deletionReconciler.ReconcileVirtualGatewayDeletion(cluster, req)
	}
	return nil
}

func (g genericVirtualGatewayMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*networking_gloo_solo_io_v2.VirtualGateway)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: VirtualGateway handler received event for %T", object)
	}
	return g.reconciler.ReconcileVirtualGateway(cluster, obj)
}
