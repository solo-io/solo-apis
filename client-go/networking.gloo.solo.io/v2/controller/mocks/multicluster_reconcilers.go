// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"

	v2 "github.com/solo-io/solo-apis/client-go/networking.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/client-go/networking.gloo.solo.io/v2/controller"
)

// MockMulticlusterExternalServiceReconciler is a mock of MulticlusterExternalServiceReconciler interface.
type MockMulticlusterExternalServiceReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterExternalServiceReconcilerMockRecorder
}

// MockMulticlusterExternalServiceReconcilerMockRecorder is the mock recorder for MockMulticlusterExternalServiceReconciler.
type MockMulticlusterExternalServiceReconcilerMockRecorder struct {
	mock *MockMulticlusterExternalServiceReconciler
}

// NewMockMulticlusterExternalServiceReconciler creates a new mock instance.
func NewMockMulticlusterExternalServiceReconciler(ctrl *gomock.Controller) *MockMulticlusterExternalServiceReconciler {
	mock := &MockMulticlusterExternalServiceReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterExternalServiceReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterExternalServiceReconciler) EXPECT() *MockMulticlusterExternalServiceReconcilerMockRecorder {
	return m.recorder
}

// ReconcileExternalService mocks base method.
func (m *MockMulticlusterExternalServiceReconciler) ReconcileExternalService(clusterName string, obj *v2.ExternalService) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileExternalService", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileExternalService indicates an expected call of ReconcileExternalService.
func (mr *MockMulticlusterExternalServiceReconcilerMockRecorder) ReconcileExternalService(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileExternalService", reflect.TypeOf((*MockMulticlusterExternalServiceReconciler)(nil).ReconcileExternalService), clusterName, obj)
}

// MockMulticlusterExternalServiceDeletionReconciler is a mock of MulticlusterExternalServiceDeletionReconciler interface.
type MockMulticlusterExternalServiceDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterExternalServiceDeletionReconcilerMockRecorder
}

// MockMulticlusterExternalServiceDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterExternalServiceDeletionReconciler.
type MockMulticlusterExternalServiceDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterExternalServiceDeletionReconciler
}

// NewMockMulticlusterExternalServiceDeletionReconciler creates a new mock instance.
func NewMockMulticlusterExternalServiceDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterExternalServiceDeletionReconciler {
	mock := &MockMulticlusterExternalServiceDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterExternalServiceDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterExternalServiceDeletionReconciler) EXPECT() *MockMulticlusterExternalServiceDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileExternalServiceDeletion mocks base method.
func (m *MockMulticlusterExternalServiceDeletionReconciler) ReconcileExternalServiceDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileExternalServiceDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileExternalServiceDeletion indicates an expected call of ReconcileExternalServiceDeletion.
func (mr *MockMulticlusterExternalServiceDeletionReconcilerMockRecorder) ReconcileExternalServiceDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileExternalServiceDeletion", reflect.TypeOf((*MockMulticlusterExternalServiceDeletionReconciler)(nil).ReconcileExternalServiceDeletion), clusterName, req)
}

// MockMulticlusterExternalServiceReconcileLoop is a mock of MulticlusterExternalServiceReconcileLoop interface.
type MockMulticlusterExternalServiceReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterExternalServiceReconcileLoopMockRecorder
}

// MockMulticlusterExternalServiceReconcileLoopMockRecorder is the mock recorder for MockMulticlusterExternalServiceReconcileLoop.
type MockMulticlusterExternalServiceReconcileLoopMockRecorder struct {
	mock *MockMulticlusterExternalServiceReconcileLoop
}

// NewMockMulticlusterExternalServiceReconcileLoop creates a new mock instance.
func NewMockMulticlusterExternalServiceReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterExternalServiceReconcileLoop {
	mock := &MockMulticlusterExternalServiceReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterExternalServiceReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterExternalServiceReconcileLoop) EXPECT() *MockMulticlusterExternalServiceReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterExternalServiceReconciler mocks base method.
func (m *MockMulticlusterExternalServiceReconcileLoop) AddMulticlusterExternalServiceReconciler(ctx context.Context, rec controller.MulticlusterExternalServiceReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterExternalServiceReconciler", varargs...)
}

// AddMulticlusterExternalServiceReconciler indicates an expected call of AddMulticlusterExternalServiceReconciler.
func (mr *MockMulticlusterExternalServiceReconcileLoopMockRecorder) AddMulticlusterExternalServiceReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterExternalServiceReconciler", reflect.TypeOf((*MockMulticlusterExternalServiceReconcileLoop)(nil).AddMulticlusterExternalServiceReconciler), varargs...)
}

// MockMulticlusterExternalEndpointReconciler is a mock of MulticlusterExternalEndpointReconciler interface.
type MockMulticlusterExternalEndpointReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterExternalEndpointReconcilerMockRecorder
}

// MockMulticlusterExternalEndpointReconcilerMockRecorder is the mock recorder for MockMulticlusterExternalEndpointReconciler.
type MockMulticlusterExternalEndpointReconcilerMockRecorder struct {
	mock *MockMulticlusterExternalEndpointReconciler
}

// NewMockMulticlusterExternalEndpointReconciler creates a new mock instance.
func NewMockMulticlusterExternalEndpointReconciler(ctrl *gomock.Controller) *MockMulticlusterExternalEndpointReconciler {
	mock := &MockMulticlusterExternalEndpointReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterExternalEndpointReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterExternalEndpointReconciler) EXPECT() *MockMulticlusterExternalEndpointReconcilerMockRecorder {
	return m.recorder
}

// ReconcileExternalEndpoint mocks base method.
func (m *MockMulticlusterExternalEndpointReconciler) ReconcileExternalEndpoint(clusterName string, obj *v2.ExternalEndpoint) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileExternalEndpoint", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileExternalEndpoint indicates an expected call of ReconcileExternalEndpoint.
func (mr *MockMulticlusterExternalEndpointReconcilerMockRecorder) ReconcileExternalEndpoint(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileExternalEndpoint", reflect.TypeOf((*MockMulticlusterExternalEndpointReconciler)(nil).ReconcileExternalEndpoint), clusterName, obj)
}

// MockMulticlusterExternalEndpointDeletionReconciler is a mock of MulticlusterExternalEndpointDeletionReconciler interface.
type MockMulticlusterExternalEndpointDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterExternalEndpointDeletionReconcilerMockRecorder
}

// MockMulticlusterExternalEndpointDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterExternalEndpointDeletionReconciler.
type MockMulticlusterExternalEndpointDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterExternalEndpointDeletionReconciler
}

// NewMockMulticlusterExternalEndpointDeletionReconciler creates a new mock instance.
func NewMockMulticlusterExternalEndpointDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterExternalEndpointDeletionReconciler {
	mock := &MockMulticlusterExternalEndpointDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterExternalEndpointDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterExternalEndpointDeletionReconciler) EXPECT() *MockMulticlusterExternalEndpointDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileExternalEndpointDeletion mocks base method.
func (m *MockMulticlusterExternalEndpointDeletionReconciler) ReconcileExternalEndpointDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileExternalEndpointDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileExternalEndpointDeletion indicates an expected call of ReconcileExternalEndpointDeletion.
func (mr *MockMulticlusterExternalEndpointDeletionReconcilerMockRecorder) ReconcileExternalEndpointDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileExternalEndpointDeletion", reflect.TypeOf((*MockMulticlusterExternalEndpointDeletionReconciler)(nil).ReconcileExternalEndpointDeletion), clusterName, req)
}

// MockMulticlusterExternalEndpointReconcileLoop is a mock of MulticlusterExternalEndpointReconcileLoop interface.
type MockMulticlusterExternalEndpointReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterExternalEndpointReconcileLoopMockRecorder
}

// MockMulticlusterExternalEndpointReconcileLoopMockRecorder is the mock recorder for MockMulticlusterExternalEndpointReconcileLoop.
type MockMulticlusterExternalEndpointReconcileLoopMockRecorder struct {
	mock *MockMulticlusterExternalEndpointReconcileLoop
}

// NewMockMulticlusterExternalEndpointReconcileLoop creates a new mock instance.
func NewMockMulticlusterExternalEndpointReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterExternalEndpointReconcileLoop {
	mock := &MockMulticlusterExternalEndpointReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterExternalEndpointReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterExternalEndpointReconcileLoop) EXPECT() *MockMulticlusterExternalEndpointReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterExternalEndpointReconciler mocks base method.
func (m *MockMulticlusterExternalEndpointReconcileLoop) AddMulticlusterExternalEndpointReconciler(ctx context.Context, rec controller.MulticlusterExternalEndpointReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterExternalEndpointReconciler", varargs...)
}

// AddMulticlusterExternalEndpointReconciler indicates an expected call of AddMulticlusterExternalEndpointReconciler.
func (mr *MockMulticlusterExternalEndpointReconcileLoopMockRecorder) AddMulticlusterExternalEndpointReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterExternalEndpointReconciler", reflect.TypeOf((*MockMulticlusterExternalEndpointReconcileLoop)(nil).AddMulticlusterExternalEndpointReconciler), varargs...)
}

// MockMulticlusterRouteTableReconciler is a mock of MulticlusterRouteTableReconciler interface.
type MockMulticlusterRouteTableReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRouteTableReconcilerMockRecorder
}

// MockMulticlusterRouteTableReconcilerMockRecorder is the mock recorder for MockMulticlusterRouteTableReconciler.
type MockMulticlusterRouteTableReconcilerMockRecorder struct {
	mock *MockMulticlusterRouteTableReconciler
}

// NewMockMulticlusterRouteTableReconciler creates a new mock instance.
func NewMockMulticlusterRouteTableReconciler(ctrl *gomock.Controller) *MockMulticlusterRouteTableReconciler {
	mock := &MockMulticlusterRouteTableReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRouteTableReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRouteTableReconciler) EXPECT() *MockMulticlusterRouteTableReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRouteTable mocks base method.
func (m *MockMulticlusterRouteTableReconciler) ReconcileRouteTable(clusterName string, obj *v2.RouteTable) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRouteTable", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRouteTable indicates an expected call of ReconcileRouteTable.
func (mr *MockMulticlusterRouteTableReconcilerMockRecorder) ReconcileRouteTable(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRouteTable", reflect.TypeOf((*MockMulticlusterRouteTableReconciler)(nil).ReconcileRouteTable), clusterName, obj)
}

// MockMulticlusterRouteTableDeletionReconciler is a mock of MulticlusterRouteTableDeletionReconciler interface.
type MockMulticlusterRouteTableDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRouteTableDeletionReconcilerMockRecorder
}

// MockMulticlusterRouteTableDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterRouteTableDeletionReconciler.
type MockMulticlusterRouteTableDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterRouteTableDeletionReconciler
}

// NewMockMulticlusterRouteTableDeletionReconciler creates a new mock instance.
func NewMockMulticlusterRouteTableDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterRouteTableDeletionReconciler {
	mock := &MockMulticlusterRouteTableDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRouteTableDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRouteTableDeletionReconciler) EXPECT() *MockMulticlusterRouteTableDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRouteTableDeletion mocks base method.
func (m *MockMulticlusterRouteTableDeletionReconciler) ReconcileRouteTableDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRouteTableDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileRouteTableDeletion indicates an expected call of ReconcileRouteTableDeletion.
func (mr *MockMulticlusterRouteTableDeletionReconcilerMockRecorder) ReconcileRouteTableDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRouteTableDeletion", reflect.TypeOf((*MockMulticlusterRouteTableDeletionReconciler)(nil).ReconcileRouteTableDeletion), clusterName, req)
}

// MockMulticlusterRouteTableReconcileLoop is a mock of MulticlusterRouteTableReconcileLoop interface.
type MockMulticlusterRouteTableReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRouteTableReconcileLoopMockRecorder
}

// MockMulticlusterRouteTableReconcileLoopMockRecorder is the mock recorder for MockMulticlusterRouteTableReconcileLoop.
type MockMulticlusterRouteTableReconcileLoopMockRecorder struct {
	mock *MockMulticlusterRouteTableReconcileLoop
}

// NewMockMulticlusterRouteTableReconcileLoop creates a new mock instance.
func NewMockMulticlusterRouteTableReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterRouteTableReconcileLoop {
	mock := &MockMulticlusterRouteTableReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRouteTableReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRouteTableReconcileLoop) EXPECT() *MockMulticlusterRouteTableReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterRouteTableReconciler mocks base method.
func (m *MockMulticlusterRouteTableReconcileLoop) AddMulticlusterRouteTableReconciler(ctx context.Context, rec controller.MulticlusterRouteTableReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterRouteTableReconciler", varargs...)
}

// AddMulticlusterRouteTableReconciler indicates an expected call of AddMulticlusterRouteTableReconciler.
func (mr *MockMulticlusterRouteTableReconcileLoopMockRecorder) AddMulticlusterRouteTableReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterRouteTableReconciler", reflect.TypeOf((*MockMulticlusterRouteTableReconcileLoop)(nil).AddMulticlusterRouteTableReconciler), varargs...)
}

// MockMulticlusterVirtualDestinationReconciler is a mock of MulticlusterVirtualDestinationReconciler interface.
type MockMulticlusterVirtualDestinationReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualDestinationReconcilerMockRecorder
}

// MockMulticlusterVirtualDestinationReconcilerMockRecorder is the mock recorder for MockMulticlusterVirtualDestinationReconciler.
type MockMulticlusterVirtualDestinationReconcilerMockRecorder struct {
	mock *MockMulticlusterVirtualDestinationReconciler
}

// NewMockMulticlusterVirtualDestinationReconciler creates a new mock instance.
func NewMockMulticlusterVirtualDestinationReconciler(ctrl *gomock.Controller) *MockMulticlusterVirtualDestinationReconciler {
	mock := &MockMulticlusterVirtualDestinationReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualDestinationReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterVirtualDestinationReconciler) EXPECT() *MockMulticlusterVirtualDestinationReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualDestination mocks base method.
func (m *MockMulticlusterVirtualDestinationReconciler) ReconcileVirtualDestination(clusterName string, obj *v2.VirtualDestination) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualDestination", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualDestination indicates an expected call of ReconcileVirtualDestination.
func (mr *MockMulticlusterVirtualDestinationReconcilerMockRecorder) ReconcileVirtualDestination(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualDestination", reflect.TypeOf((*MockMulticlusterVirtualDestinationReconciler)(nil).ReconcileVirtualDestination), clusterName, obj)
}

// MockMulticlusterVirtualDestinationDeletionReconciler is a mock of MulticlusterVirtualDestinationDeletionReconciler interface.
type MockMulticlusterVirtualDestinationDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualDestinationDeletionReconcilerMockRecorder
}

// MockMulticlusterVirtualDestinationDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterVirtualDestinationDeletionReconciler.
type MockMulticlusterVirtualDestinationDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterVirtualDestinationDeletionReconciler
}

// NewMockMulticlusterVirtualDestinationDeletionReconciler creates a new mock instance.
func NewMockMulticlusterVirtualDestinationDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterVirtualDestinationDeletionReconciler {
	mock := &MockMulticlusterVirtualDestinationDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualDestinationDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterVirtualDestinationDeletionReconciler) EXPECT() *MockMulticlusterVirtualDestinationDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualDestinationDeletion mocks base method.
func (m *MockMulticlusterVirtualDestinationDeletionReconciler) ReconcileVirtualDestinationDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualDestinationDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileVirtualDestinationDeletion indicates an expected call of ReconcileVirtualDestinationDeletion.
func (mr *MockMulticlusterVirtualDestinationDeletionReconcilerMockRecorder) ReconcileVirtualDestinationDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualDestinationDeletion", reflect.TypeOf((*MockMulticlusterVirtualDestinationDeletionReconciler)(nil).ReconcileVirtualDestinationDeletion), clusterName, req)
}

// MockMulticlusterVirtualDestinationReconcileLoop is a mock of MulticlusterVirtualDestinationReconcileLoop interface.
type MockMulticlusterVirtualDestinationReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualDestinationReconcileLoopMockRecorder
}

// MockMulticlusterVirtualDestinationReconcileLoopMockRecorder is the mock recorder for MockMulticlusterVirtualDestinationReconcileLoop.
type MockMulticlusterVirtualDestinationReconcileLoopMockRecorder struct {
	mock *MockMulticlusterVirtualDestinationReconcileLoop
}

// NewMockMulticlusterVirtualDestinationReconcileLoop creates a new mock instance.
func NewMockMulticlusterVirtualDestinationReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterVirtualDestinationReconcileLoop {
	mock := &MockMulticlusterVirtualDestinationReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualDestinationReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterVirtualDestinationReconcileLoop) EXPECT() *MockMulticlusterVirtualDestinationReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterVirtualDestinationReconciler mocks base method.
func (m *MockMulticlusterVirtualDestinationReconcileLoop) AddMulticlusterVirtualDestinationReconciler(ctx context.Context, rec controller.MulticlusterVirtualDestinationReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterVirtualDestinationReconciler", varargs...)
}

// AddMulticlusterVirtualDestinationReconciler indicates an expected call of AddMulticlusterVirtualDestinationReconciler.
func (mr *MockMulticlusterVirtualDestinationReconcileLoopMockRecorder) AddMulticlusterVirtualDestinationReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterVirtualDestinationReconciler", reflect.TypeOf((*MockMulticlusterVirtualDestinationReconcileLoop)(nil).AddMulticlusterVirtualDestinationReconciler), varargs...)
}

// MockMulticlusterVirtualGatewayReconciler is a mock of MulticlusterVirtualGatewayReconciler interface.
type MockMulticlusterVirtualGatewayReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualGatewayReconcilerMockRecorder
}

// MockMulticlusterVirtualGatewayReconcilerMockRecorder is the mock recorder for MockMulticlusterVirtualGatewayReconciler.
type MockMulticlusterVirtualGatewayReconcilerMockRecorder struct {
	mock *MockMulticlusterVirtualGatewayReconciler
}

// NewMockMulticlusterVirtualGatewayReconciler creates a new mock instance.
func NewMockMulticlusterVirtualGatewayReconciler(ctrl *gomock.Controller) *MockMulticlusterVirtualGatewayReconciler {
	mock := &MockMulticlusterVirtualGatewayReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualGatewayReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterVirtualGatewayReconciler) EXPECT() *MockMulticlusterVirtualGatewayReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualGateway mocks base method.
func (m *MockMulticlusterVirtualGatewayReconciler) ReconcileVirtualGateway(clusterName string, obj *v2.VirtualGateway) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualGateway", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualGateway indicates an expected call of ReconcileVirtualGateway.
func (mr *MockMulticlusterVirtualGatewayReconcilerMockRecorder) ReconcileVirtualGateway(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualGateway", reflect.TypeOf((*MockMulticlusterVirtualGatewayReconciler)(nil).ReconcileVirtualGateway), clusterName, obj)
}

// MockMulticlusterVirtualGatewayDeletionReconciler is a mock of MulticlusterVirtualGatewayDeletionReconciler interface.
type MockMulticlusterVirtualGatewayDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualGatewayDeletionReconcilerMockRecorder
}

// MockMulticlusterVirtualGatewayDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterVirtualGatewayDeletionReconciler.
type MockMulticlusterVirtualGatewayDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterVirtualGatewayDeletionReconciler
}

// NewMockMulticlusterVirtualGatewayDeletionReconciler creates a new mock instance.
func NewMockMulticlusterVirtualGatewayDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterVirtualGatewayDeletionReconciler {
	mock := &MockMulticlusterVirtualGatewayDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualGatewayDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterVirtualGatewayDeletionReconciler) EXPECT() *MockMulticlusterVirtualGatewayDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualGatewayDeletion mocks base method.
func (m *MockMulticlusterVirtualGatewayDeletionReconciler) ReconcileVirtualGatewayDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualGatewayDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileVirtualGatewayDeletion indicates an expected call of ReconcileVirtualGatewayDeletion.
func (mr *MockMulticlusterVirtualGatewayDeletionReconcilerMockRecorder) ReconcileVirtualGatewayDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualGatewayDeletion", reflect.TypeOf((*MockMulticlusterVirtualGatewayDeletionReconciler)(nil).ReconcileVirtualGatewayDeletion), clusterName, req)
}

// MockMulticlusterVirtualGatewayReconcileLoop is a mock of MulticlusterVirtualGatewayReconcileLoop interface.
type MockMulticlusterVirtualGatewayReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualGatewayReconcileLoopMockRecorder
}

// MockMulticlusterVirtualGatewayReconcileLoopMockRecorder is the mock recorder for MockMulticlusterVirtualGatewayReconcileLoop.
type MockMulticlusterVirtualGatewayReconcileLoopMockRecorder struct {
	mock *MockMulticlusterVirtualGatewayReconcileLoop
}

// NewMockMulticlusterVirtualGatewayReconcileLoop creates a new mock instance.
func NewMockMulticlusterVirtualGatewayReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterVirtualGatewayReconcileLoop {
	mock := &MockMulticlusterVirtualGatewayReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualGatewayReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterVirtualGatewayReconcileLoop) EXPECT() *MockMulticlusterVirtualGatewayReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterVirtualGatewayReconciler mocks base method.
func (m *MockMulticlusterVirtualGatewayReconcileLoop) AddMulticlusterVirtualGatewayReconciler(ctx context.Context, rec controller.MulticlusterVirtualGatewayReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterVirtualGatewayReconciler", varargs...)
}

// AddMulticlusterVirtualGatewayReconciler indicates an expected call of AddMulticlusterVirtualGatewayReconciler.
func (mr *MockMulticlusterVirtualGatewayReconcileLoopMockRecorder) AddMulticlusterVirtualGatewayReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterVirtualGatewayReconciler", reflect.TypeOf((*MockMulticlusterVirtualGatewayReconcileLoop)(nil).AddMulticlusterVirtualGatewayReconciler), varargs...)
}
