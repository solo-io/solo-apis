// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go
//
// Generated by this command:
//
//	mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go
//

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	gomock "go.uber.org/mock/gomock"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"

	v2alpha1 "github.com/solo-io/solo-apis/client-go/networking.gloo.solo.io/v2alpha1"
	controller "github.com/solo-io/solo-apis/client-go/networking.gloo.solo.io/v2alpha1/controller"
)

// MockMulticlusterExternalWorkloadReconciler is a mock of MulticlusterExternalWorkloadReconciler interface.
type MockMulticlusterExternalWorkloadReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterExternalWorkloadReconcilerMockRecorder
}

// MockMulticlusterExternalWorkloadReconcilerMockRecorder is the mock recorder for MockMulticlusterExternalWorkloadReconciler.
type MockMulticlusterExternalWorkloadReconcilerMockRecorder struct {
	mock *MockMulticlusterExternalWorkloadReconciler
}

// NewMockMulticlusterExternalWorkloadReconciler creates a new mock instance.
func NewMockMulticlusterExternalWorkloadReconciler(ctrl *gomock.Controller) *MockMulticlusterExternalWorkloadReconciler {
	mock := &MockMulticlusterExternalWorkloadReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterExternalWorkloadReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterExternalWorkloadReconciler) EXPECT() *MockMulticlusterExternalWorkloadReconcilerMockRecorder {
	return m.recorder
}

// ReconcileExternalWorkload mocks base method.
func (m *MockMulticlusterExternalWorkloadReconciler) ReconcileExternalWorkload(clusterName string, obj *v2alpha1.ExternalWorkload) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileExternalWorkload", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileExternalWorkload indicates an expected call of ReconcileExternalWorkload.
func (mr *MockMulticlusterExternalWorkloadReconcilerMockRecorder) ReconcileExternalWorkload(clusterName, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileExternalWorkload", reflect.TypeOf((*MockMulticlusterExternalWorkloadReconciler)(nil).ReconcileExternalWorkload), clusterName, obj)
}

// MockMulticlusterExternalWorkloadDeletionReconciler is a mock of MulticlusterExternalWorkloadDeletionReconciler interface.
type MockMulticlusterExternalWorkloadDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterExternalWorkloadDeletionReconcilerMockRecorder
}

// MockMulticlusterExternalWorkloadDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterExternalWorkloadDeletionReconciler.
type MockMulticlusterExternalWorkloadDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterExternalWorkloadDeletionReconciler
}

// NewMockMulticlusterExternalWorkloadDeletionReconciler creates a new mock instance.
func NewMockMulticlusterExternalWorkloadDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterExternalWorkloadDeletionReconciler {
	mock := &MockMulticlusterExternalWorkloadDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterExternalWorkloadDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterExternalWorkloadDeletionReconciler) EXPECT() *MockMulticlusterExternalWorkloadDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileExternalWorkloadDeletion mocks base method.
func (m *MockMulticlusterExternalWorkloadDeletionReconciler) ReconcileExternalWorkloadDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileExternalWorkloadDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileExternalWorkloadDeletion indicates an expected call of ReconcileExternalWorkloadDeletion.
func (mr *MockMulticlusterExternalWorkloadDeletionReconcilerMockRecorder) ReconcileExternalWorkloadDeletion(clusterName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileExternalWorkloadDeletion", reflect.TypeOf((*MockMulticlusterExternalWorkloadDeletionReconciler)(nil).ReconcileExternalWorkloadDeletion), clusterName, req)
}

// MockMulticlusterExternalWorkloadReconcileLoop is a mock of MulticlusterExternalWorkloadReconcileLoop interface.
type MockMulticlusterExternalWorkloadReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterExternalWorkloadReconcileLoopMockRecorder
}

// MockMulticlusterExternalWorkloadReconcileLoopMockRecorder is the mock recorder for MockMulticlusterExternalWorkloadReconcileLoop.
type MockMulticlusterExternalWorkloadReconcileLoopMockRecorder struct {
	mock *MockMulticlusterExternalWorkloadReconcileLoop
}

// NewMockMulticlusterExternalWorkloadReconcileLoop creates a new mock instance.
func NewMockMulticlusterExternalWorkloadReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterExternalWorkloadReconcileLoop {
	mock := &MockMulticlusterExternalWorkloadReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterExternalWorkloadReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterExternalWorkloadReconcileLoop) EXPECT() *MockMulticlusterExternalWorkloadReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterExternalWorkloadReconciler mocks base method.
func (m *MockMulticlusterExternalWorkloadReconcileLoop) AddMulticlusterExternalWorkloadReconciler(ctx context.Context, rec controller.MulticlusterExternalWorkloadReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterExternalWorkloadReconciler", varargs...)
}

// AddMulticlusterExternalWorkloadReconciler indicates an expected call of AddMulticlusterExternalWorkloadReconciler.
func (mr *MockMulticlusterExternalWorkloadReconcileLoopMockRecorder) AddMulticlusterExternalWorkloadReconciler(ctx, rec any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterExternalWorkloadReconciler", reflect.TypeOf((*MockMulticlusterExternalWorkloadReconcileLoop)(nil).AddMulticlusterExternalWorkloadReconciler), varargs...)
}
