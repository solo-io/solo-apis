// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	networking_gloo_solo_io_v2alpha1 "github.com/solo-io/solo-apis/client-go/networking.gloo.solo.io/v2alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the ExternalWorkload Resource
// DEPRECATED: Prefer reconciler pattern.
type ExternalWorkloadEventHandler interface {
	CreateExternalWorkload(obj *networking_gloo_solo_io_v2alpha1.ExternalWorkload) error
	UpdateExternalWorkload(old, new *networking_gloo_solo_io_v2alpha1.ExternalWorkload) error
	DeleteExternalWorkload(obj *networking_gloo_solo_io_v2alpha1.ExternalWorkload) error
	GenericExternalWorkload(obj *networking_gloo_solo_io_v2alpha1.ExternalWorkload) error
}

type ExternalWorkloadEventHandlerFuncs struct {
	OnCreate  func(obj *networking_gloo_solo_io_v2alpha1.ExternalWorkload) error
	OnUpdate  func(old, new *networking_gloo_solo_io_v2alpha1.ExternalWorkload) error
	OnDelete  func(obj *networking_gloo_solo_io_v2alpha1.ExternalWorkload) error
	OnGeneric func(obj *networking_gloo_solo_io_v2alpha1.ExternalWorkload) error
}

func (f *ExternalWorkloadEventHandlerFuncs) CreateExternalWorkload(obj *networking_gloo_solo_io_v2alpha1.ExternalWorkload) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *ExternalWorkloadEventHandlerFuncs) DeleteExternalWorkload(obj *networking_gloo_solo_io_v2alpha1.ExternalWorkload) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *ExternalWorkloadEventHandlerFuncs) UpdateExternalWorkload(objOld, objNew *networking_gloo_solo_io_v2alpha1.ExternalWorkload) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *ExternalWorkloadEventHandlerFuncs) GenericExternalWorkload(obj *networking_gloo_solo_io_v2alpha1.ExternalWorkload) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type ExternalWorkloadEventWatcher interface {
	AddEventHandler(ctx context.Context, h ExternalWorkloadEventHandler, predicates ...predicate.Predicate) error
}

type externalWorkloadEventWatcher struct {
	watcher events.EventWatcher
}

func NewExternalWorkloadEventWatcher(name string, mgr manager.Manager) ExternalWorkloadEventWatcher {
	return &externalWorkloadEventWatcher{
		watcher: events.NewWatcher(name, mgr, &networking_gloo_solo_io_v2alpha1.ExternalWorkload{}),
	}
}

func (c *externalWorkloadEventWatcher) AddEventHandler(ctx context.Context, h ExternalWorkloadEventHandler, predicates ...predicate.Predicate) error {
	handler := genericExternalWorkloadHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericExternalWorkloadHandler implements a generic events.EventHandler
type genericExternalWorkloadHandler struct {
	handler ExternalWorkloadEventHandler
}

func (h genericExternalWorkloadHandler) Create(object client.Object) error {
	obj, ok := object.(*networking_gloo_solo_io_v2alpha1.ExternalWorkload)
	if !ok {
		return errors.Errorf("internal error: ExternalWorkload handler received event for %T", object)
	}
	return h.handler.CreateExternalWorkload(obj)
}

func (h genericExternalWorkloadHandler) Delete(object client.Object) error {
	obj, ok := object.(*networking_gloo_solo_io_v2alpha1.ExternalWorkload)
	if !ok {
		return errors.Errorf("internal error: ExternalWorkload handler received event for %T", object)
	}
	return h.handler.DeleteExternalWorkload(obj)
}

func (h genericExternalWorkloadHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*networking_gloo_solo_io_v2alpha1.ExternalWorkload)
	if !ok {
		return errors.Errorf("internal error: ExternalWorkload handler received event for %T", old)
	}
	objNew, ok := new.(*networking_gloo_solo_io_v2alpha1.ExternalWorkload)
	if !ok {
		return errors.Errorf("internal error: ExternalWorkload handler received event for %T", new)
	}
	return h.handler.UpdateExternalWorkload(objOld, objNew)
}

func (h genericExternalWorkloadHandler) Generic(object client.Object) error {
	obj, ok := object.(*networking_gloo_solo_io_v2alpha1.ExternalWorkload)
	if !ok {
		return errors.Errorf("internal error: ExternalWorkload handler received event for %T", object)
	}
	return h.handler.GenericExternalWorkload(obj)
}
