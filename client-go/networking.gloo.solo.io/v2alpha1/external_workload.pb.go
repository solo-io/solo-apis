// Create an in-mesh identity for workloads that are external to a Kubernetes workload
// cluster to enable routing to and from those workloads in Gloo Mesh.
// For example, after you [onboard a VM to Gloo Mesh](https://docs.solo.io/gloo-mesh-enterprise/main/setup/prod/ext_workload_int/),
// you might create an ExternalWorkload to represent a set of workloads
// that run on the virtual machine or bare metal instance.
// When an ExternalWorkload is defined for a given workspace, it can be referenced in:
// - VirtualDestination resources, as an upstream destination
// - AccessPolicy resources, as an allowed client
// - AccessPolicy resources targeting external workloads that match workload selectors
//
// **Example**: This example provisions an identity for services that listen on port 5000
// and that run either on a GCP VM that uses the specified cloud IAM service account, or
// an AWS VM that is in the specified security group ID.
// The identity is created in the `vm-config` namespace of the `workload-cluster`.
// ```
// apiVersion: networking.gloo.solo.io/v2alpha1
// kind: ExternalWorkload
// metadata:
//   labels:
//     app: http-server
//     version: v1
//   name: http-server
//   namespace: vm-config
// spec:
//   connectedClusters:
//     workload-cluster: vm-config
//   identitySelector:
//     gcp:
//       - serviceAccount: <GCP_VM_service_account>
//     aws:
//       - securityGroupId: <AWS_security_group_id>
//   ports:
//     - name: http
//       number: 5000
// ```

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/networking/v2alpha1/external_workload.proto

package v2alpha1

import (
	reflect "reflect"
	sync "sync"

	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	v2 "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Scheme to use for connecting to the host.
type ExternalWorkloadSpec_Probe_HTTPGetConfig_Scheme int32

const (
	// Use the `http://` scheme for the connection.
	ExternalWorkloadSpec_Probe_HTTPGetConfig_HTTP ExternalWorkloadSpec_Probe_HTTPGetConfig_Scheme = 0
	// Use the `https://` scheme for the connection.
	ExternalWorkloadSpec_Probe_HTTPGetConfig_HTTPS ExternalWorkloadSpec_Probe_HTTPGetConfig_Scheme = 1
)

// Enum value maps for ExternalWorkloadSpec_Probe_HTTPGetConfig_Scheme.
var (
	ExternalWorkloadSpec_Probe_HTTPGetConfig_Scheme_name = map[int32]string{
		0: "HTTP",
		1: "HTTPS",
	}
	ExternalWorkloadSpec_Probe_HTTPGetConfig_Scheme_value = map[string]int32{
		"HTTP":  0,
		"HTTPS": 1,
	}
)

func (x ExternalWorkloadSpec_Probe_HTTPGetConfig_Scheme) Enum() *ExternalWorkloadSpec_Probe_HTTPGetConfig_Scheme {
	p := new(ExternalWorkloadSpec_Probe_HTTPGetConfig_Scheme)
	*p = x
	return p
}

func (x ExternalWorkloadSpec_Probe_HTTPGetConfig_Scheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalWorkloadSpec_Probe_HTTPGetConfig_Scheme) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_enumTypes[0].Descriptor()
}

func (ExternalWorkloadSpec_Probe_HTTPGetConfig_Scheme) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_enumTypes[0]
}

func (x ExternalWorkloadSpec_Probe_HTTPGetConfig_Scheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalWorkloadSpec_Probe_HTTPGetConfig_Scheme.Descriptor instead.
func (ExternalWorkloadSpec_Probe_HTTPGetConfig_Scheme) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescGZIP(), []int{0, 3, 0, 0}
}

// Specifications for the external workload.
type ExternalWorkloadSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ports that the external workloads listen on.
	Ports []*ExternalWorkloadSpec_Port `protobuf:"bytes,1,rep,name=ports,proto3" json:"ports,omitempty"`
	// The conditions under which an external workload is selected. For example, you might
	// select a Google Cloud Platform (GCP) VM by specifying `gcp.serviceAccount: <VM_service_account>`.
	// This field is optional when you use a join token to attest the external workload.
	// If you specify multiple identity selectors, an external workload is selected when at least
	// one of the selectors matches.
	IdentitySelector *ExternalWorkloadSpec_IdentitySelector `protobuf:"bytes,2,opt,name=identity_selector,json=identitySelector,proto3" json:"identity_selector,omitempty"`
	// A map of cluster names to the namespace within the cluster that the external workload
	// is registered in. To scope the external workload to multiple registered clusters, multiple
	// cluster-namespace pairs can be specified. However, within a cluster, only a single
	// namespace can be used to register the external workload.
	ConnectedClusters map[string]string `protobuf:"bytes,3,rep,name=connectedClusters,proto3" json:"connectedClusters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional: Readiness probe for the external workload.
	ReadinessProbe *ExternalWorkloadSpec_Probe `protobuf:"bytes,4,opt,name=readiness_probe,json=readinessProbe,proto3" json:"readiness_probe,omitempty"`
}

func (x *ExternalWorkloadSpec) Reset() {
	*x = ExternalWorkloadSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalWorkloadSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalWorkloadSpec) ProtoMessage() {}

func (x *ExternalWorkloadSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalWorkloadSpec.ProtoReflect.Descriptor instead.
func (*ExternalWorkloadSpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescGZIP(), []int{0}
}

func (x *ExternalWorkloadSpec) GetPorts() []*ExternalWorkloadSpec_Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *ExternalWorkloadSpec) GetIdentitySelector() *ExternalWorkloadSpec_IdentitySelector {
	if x != nil {
		return x.IdentitySelector
	}
	return nil
}

func (x *ExternalWorkloadSpec) GetConnectedClusters() map[string]string {
	if x != nil {
		return x.ConnectedClusters
	}
	return nil
}

func (x *ExternalWorkloadSpec) GetReadinessProbe() *ExternalWorkloadSpec_Probe {
	if x != nil {
		return x.ReadinessProbe
	}
	return nil
}

// The status of the ExternalWorkload after it is applied to your Gloo environment.
type ExternalWorkloadStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state and workspace conditions of the applied resource.
	Common *v2.Status `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	// A map of policy GVK to the number of policies that are applied on this resource,
	// sorted by GVK.
	NumAppliedPolicies map[string]uint32 `protobuf:"bytes,2,rep,name=num_applied_policies,json=numAppliedPolicies,proto3" json:"num_applied_policies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Name of the workspace that owns this ExternalWorkload
	OwnedByWorkspace string `protobuf:"bytes,3,opt,name=owned_by_workspace,json=ownedByWorkspace,proto3" json:"owned_by_workspace,omitempty"`
}

func (x *ExternalWorkloadStatus) Reset() {
	*x = ExternalWorkloadStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalWorkloadStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalWorkloadStatus) ProtoMessage() {}

func (x *ExternalWorkloadStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalWorkloadStatus.ProtoReflect.Descriptor instead.
func (*ExternalWorkloadStatus) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescGZIP(), []int{1}
}

func (x *ExternalWorkloadStatus) GetCommon() *v2.Status {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ExternalWorkloadStatus) GetNumAppliedPolicies() map[string]uint32 {
	if x != nil {
		return x.NumAppliedPolicies
	}
	return nil
}

func (x *ExternalWorkloadStatus) GetOwnedByWorkspace() string {
	if x != nil {
		return x.OwnedByWorkspace
	}
	return ""
}

// The resources that the applied resource selects.
type ExternalWorkloadReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workspaces map[string]*v2.Report `protobuf:"bytes,1,rep,name=workspaces,proto3" json:"workspaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A map of policy GVK to policy references for all the policies that are
	// applied on this resource.
	AppliedDestinationPolicies map[string]*v2.AppliedDestinationPortPolicies `protobuf:"bytes,2,rep,name=applied_destination_policies,json=appliedDestinationPolicies,proto3" json:"applied_destination_policies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The name of the workspace that owns the ExternalWorkload.
	OwnerWorkspace string `protobuf:"bytes,3,opt,name=owner_workspace,json=ownerWorkspace,proto3" json:"owner_workspace,omitempty"`
}

func (x *ExternalWorkloadReport) Reset() {
	*x = ExternalWorkloadReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalWorkloadReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalWorkloadReport) ProtoMessage() {}

func (x *ExternalWorkloadReport) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalWorkloadReport.ProtoReflect.Descriptor instead.
func (*ExternalWorkloadReport) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescGZIP(), []int{2}
}

func (x *ExternalWorkloadReport) GetWorkspaces() map[string]*v2.Report {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

func (x *ExternalWorkloadReport) GetAppliedDestinationPolicies() map[string]*v2.AppliedDestinationPortPolicies {
	if x != nil {
		return x.AppliedDestinationPolicies
	}
	return nil
}

func (x *ExternalWorkloadReport) GetOwnerWorkspace() string {
	if x != nil {
		return x.OwnerWorkspace
	}
	return ""
}

// The port on the backing external workload.
type ExternalWorkloadSpec_Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The logical name assigned to the port.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The protocol of the port.
	// Supported protocols: HTTP, HTTPS, GRPC, HTTP2, MONGO, TCP, TLS
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// The port number. Must be in the range 1 - 65535.
	Number uint32 `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *ExternalWorkloadSpec_Port) Reset() {
	*x = ExternalWorkloadSpec_Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalWorkloadSpec_Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalWorkloadSpec_Port) ProtoMessage() {}

func (x *ExternalWorkloadSpec_Port) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalWorkloadSpec_Port.ProtoReflect.Descriptor instead.
func (*ExternalWorkloadSpec_Port) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ExternalWorkloadSpec_Port) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExternalWorkloadSpec_Port) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *ExternalWorkloadSpec_Port) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

// The conditions under which an external workload is selected. For example, you might
// select a Google Cloud Platform (GCP) VM by specifying `gcp.serviceAccount: <VM_service_account>`.
// This field is optional when you use a join token to attest the external workload.
// If you specify multiple selectors, an external workload is selected when at least
// one of the selectors matches.
type ExternalWorkloadSpec_IdentitySelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional: Selector for external workloads running in AWS.
	Aws []*ExternalWorkloadSpec_IdentitySelector_AWS `protobuf:"bytes,1,rep,name=aws,proto3" json:"aws,omitempty"`
	// Optional: Selector for external workloads running in GCP.
	Gcp []*ExternalWorkloadSpec_IdentitySelector_GCP `protobuf:"bytes,2,rep,name=gcp,proto3" json:"gcp,omitempty"`
	// Optional: Selector for external workloads running in Azure.
	Azure []*ExternalWorkloadSpec_IdentitySelector_Azure `protobuf:"bytes,3,rep,name=azure,proto3" json:"azure,omitempty"`
	// Optional: Join token configuration to attest the external workload.
	JoinToken *ExternalWorkloadSpec_IdentitySelector_JoinToken `protobuf:"bytes,4,opt,name=join_token,json=joinToken,proto3" json:"join_token,omitempty"`
}

func (x *ExternalWorkloadSpec_IdentitySelector) Reset() {
	*x = ExternalWorkloadSpec_IdentitySelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalWorkloadSpec_IdentitySelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalWorkloadSpec_IdentitySelector) ProtoMessage() {}

func (x *ExternalWorkloadSpec_IdentitySelector) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalWorkloadSpec_IdentitySelector.ProtoReflect.Descriptor instead.
func (*ExternalWorkloadSpec_IdentitySelector) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ExternalWorkloadSpec_IdentitySelector) GetAws() []*ExternalWorkloadSpec_IdentitySelector_AWS {
	if x != nil {
		return x.Aws
	}
	return nil
}

func (x *ExternalWorkloadSpec_IdentitySelector) GetGcp() []*ExternalWorkloadSpec_IdentitySelector_GCP {
	if x != nil {
		return x.Gcp
	}
	return nil
}

func (x *ExternalWorkloadSpec_IdentitySelector) GetAzure() []*ExternalWorkloadSpec_IdentitySelector_Azure {
	if x != nil {
		return x.Azure
	}
	return nil
}

func (x *ExternalWorkloadSpec_IdentitySelector) GetJoinToken() *ExternalWorkloadSpec_IdentitySelector_JoinToken {
	if x != nil {
		return x.JoinToken
	}
	return nil
}

// A health check to perform against an external workload
// to determine whether it is ready to receive traffic.
type ExternalWorkloadSpec_Probe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional: Number of seconds after the external workload startup before the probes are initiated.
	// Defaults to 0 seconds.
	InitialDelaySeconds *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=initial_delay_seconds,json=initialDelaySeconds,proto3" json:"initial_delay_seconds,omitempty"`
	// Optional: Number of seconds after which the probe times out.
	// Defaults to 1 second. Minimum value is 1 second.
	TimeoutSeconds *wrappers.UInt32Value `protobuf:"bytes,2,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	// Optional: How often (in seconds) to perform the probe.
	// Defaults to 10 seconds. Minimum value is 1 second.
	PeriodSeconds *wrappers.UInt32Value `protobuf:"bytes,3,opt,name=period_seconds,json=periodSeconds,proto3" json:"period_seconds,omitempty"`
	// Optional: Minimum consecutive successes for the probe to be considered successful after having failed.
	// Defaults to 1.
	SuccessThreshold *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=success_threshold,json=successThreshold,proto3" json:"success_threshold,omitempty"`
	// Optional: Minimum consecutive failures for the probe to be considered failed after having succeeded.
	// Defaults to 3.
	FailureThreshold *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=failure_threshold,json=failureThreshold,proto3" json:"failure_threshold,omitempty"`
	// The handler corresponding to the probe. Specify only one of: httpGet, tcpSocket, exec
	//
	// Types that are assignable to Handler:
	//
	//	*ExternalWorkloadSpec_Probe_HttpGet
	//	*ExternalWorkloadSpec_Probe_TcpSocket
	//	*ExternalWorkloadSpec_Probe_Exec
	Handler isExternalWorkloadSpec_Probe_Handler `protobuf_oneof:"handler"`
}

func (x *ExternalWorkloadSpec_Probe) Reset() {
	*x = ExternalWorkloadSpec_Probe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalWorkloadSpec_Probe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalWorkloadSpec_Probe) ProtoMessage() {}

func (x *ExternalWorkloadSpec_Probe) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalWorkloadSpec_Probe.ProtoReflect.Descriptor instead.
func (*ExternalWorkloadSpec_Probe) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ExternalWorkloadSpec_Probe) GetInitialDelaySeconds() *wrappers.UInt32Value {
	if x != nil {
		return x.InitialDelaySeconds
	}
	return nil
}

func (x *ExternalWorkloadSpec_Probe) GetTimeoutSeconds() *wrappers.UInt32Value {
	if x != nil {
		return x.TimeoutSeconds
	}
	return nil
}

func (x *ExternalWorkloadSpec_Probe) GetPeriodSeconds() *wrappers.UInt32Value {
	if x != nil {
		return x.PeriodSeconds
	}
	return nil
}

func (x *ExternalWorkloadSpec_Probe) GetSuccessThreshold() *wrappers.UInt32Value {
	if x != nil {
		return x.SuccessThreshold
	}
	return nil
}

func (x *ExternalWorkloadSpec_Probe) GetFailureThreshold() *wrappers.UInt32Value {
	if x != nil {
		return x.FailureThreshold
	}
	return nil
}

func (m *ExternalWorkloadSpec_Probe) GetHandler() isExternalWorkloadSpec_Probe_Handler {
	if m != nil {
		return m.Handler
	}
	return nil
}

func (x *ExternalWorkloadSpec_Probe) GetHttpGet() *ExternalWorkloadSpec_Probe_HTTPGetConfig {
	if x, ok := x.GetHandler().(*ExternalWorkloadSpec_Probe_HttpGet); ok {
		return x.HttpGet
	}
	return nil
}

func (x *ExternalWorkloadSpec_Probe) GetTcpSocket() *ExternalWorkloadSpec_Probe_TCPSocketConfig {
	if x, ok := x.GetHandler().(*ExternalWorkloadSpec_Probe_TcpSocket); ok {
		return x.TcpSocket
	}
	return nil
}

func (x *ExternalWorkloadSpec_Probe) GetExec() *ExternalWorkloadSpec_Probe_ExecConfig {
	if x, ok := x.GetHandler().(*ExternalWorkloadSpec_Probe_Exec); ok {
		return x.Exec
	}
	return nil
}

type isExternalWorkloadSpec_Probe_Handler interface {
	isExternalWorkloadSpec_Probe_Handler()
}

type ExternalWorkloadSpec_Probe_HttpGet struct {
	// Configuration for an HTTP probe request.
	HttpGet *ExternalWorkloadSpec_Probe_HTTPGetConfig `protobuf:"bytes,7,opt,name=http_get,json=httpGet,proto3,oneof"`
}

type ExternalWorkloadSpec_Probe_TcpSocket struct {
	// Configuration for a TCP socket probe.
	TcpSocket *ExternalWorkloadSpec_Probe_TCPSocketConfig `protobuf:"bytes,8,opt,name=tcp_socket,json=tcpSocket,proto3,oneof"`
}

type ExternalWorkloadSpec_Probe_Exec struct {
	// Configuration for an exec command probe.
	Exec *ExternalWorkloadSpec_Probe_ExecConfig `protobuf:"bytes,9,opt,name=exec,proto3,oneof"`
}

func (*ExternalWorkloadSpec_Probe_HttpGet) isExternalWorkloadSpec_Probe_Handler() {}

func (*ExternalWorkloadSpec_Probe_TcpSocket) isExternalWorkloadSpec_Probe_Handler() {}

func (*ExternalWorkloadSpec_Probe_Exec) isExternalWorkloadSpec_Probe_Handler() {}

// Selector for external workloads that run in AWS.
// If multiple fields are specified, an external workload is selected only when all match. <!--line 34-35 says the opposite?-->
type ExternalWorkloadSpec_IdentitySelector_AWS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional: The IAM role within the instance profile of the external workload.
	IamRole string `protobuf:"bytes,1,opt,name=iam_role,json=iamRole,proto3" json:"iam_role,omitempty"`
	// Optional: The name of the security group associated with the external workload.
	SecurityGroupName string `protobuf:"bytes,2,opt,name=security_group_name,json=securityGroupName,proto3" json:"security_group_name,omitempty"`
	// Optional: The ID of the security group associated with the external workload.
	SecurityGroupId string `protobuf:"bytes,3,opt,name=security_group_id,json=securityGroupId,proto3" json:"security_group_id,omitempty"`
	// Optional: The ID of the AMI used to launch the external workload.
	ImageId string `protobuf:"bytes,4,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	// Optional: The ID of the external workload instance.
	InstanceId string `protobuf:"bytes,5,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// Optional: The availability zone in which the external workload is running.
	Zone string `protobuf:"bytes,6,opt,name=zone,proto3" json:"zone,omitempty"`
	// Optional: The region where the external workload is running.
	Region string `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	// The tag applied as a key to the external workload.
	Tag *ExternalWorkloadSpec_IdentitySelector_AWS_Tag `protobuf:"bytes,8,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *ExternalWorkloadSpec_IdentitySelector_AWS) Reset() {
	*x = ExternalWorkloadSpec_IdentitySelector_AWS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalWorkloadSpec_IdentitySelector_AWS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalWorkloadSpec_IdentitySelector_AWS) ProtoMessage() {}

func (x *ExternalWorkloadSpec_IdentitySelector_AWS) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalWorkloadSpec_IdentitySelector_AWS.ProtoReflect.Descriptor instead.
func (*ExternalWorkloadSpec_IdentitySelector_AWS) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *ExternalWorkloadSpec_IdentitySelector_AWS) GetIamRole() string {
	if x != nil {
		return x.IamRole
	}
	return ""
}

func (x *ExternalWorkloadSpec_IdentitySelector_AWS) GetSecurityGroupName() string {
	if x != nil {
		return x.SecurityGroupName
	}
	return ""
}

func (x *ExternalWorkloadSpec_IdentitySelector_AWS) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

func (x *ExternalWorkloadSpec_IdentitySelector_AWS) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *ExternalWorkloadSpec_IdentitySelector_AWS) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ExternalWorkloadSpec_IdentitySelector_AWS) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ExternalWorkloadSpec_IdentitySelector_AWS) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ExternalWorkloadSpec_IdentitySelector_AWS) GetTag() *ExternalWorkloadSpec_IdentitySelector_AWS_Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

// Selector for external workloads that run in GCP.
// If multiple fields are specified, an external workload is selected only when all match. <!--line 34-35 says the opposite?-->
type ExternalWorkloadSpec_IdentitySelector_GCP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional: The service account associated with the external workload.
	ServiceAccount string `protobuf:"bytes,1,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Optional: Name of the external workload instance.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Optional: The tag applied as a key to the external workload.
	Tag string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	// Optional: The ID of the project containing the external workload.
	ProjectId string `protobuf:"bytes,4,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Optional: The availability zone in which the external workload is running.
	Zone string `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone,omitempty"`
	// Optional: The label applied as a key-value pair to the external workload.
	// The value for the key is optional.
	Label *ExternalWorkloadSpec_IdentitySelector_GCP_Label `protobuf:"bytes,6,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *ExternalWorkloadSpec_IdentitySelector_GCP) Reset() {
	*x = ExternalWorkloadSpec_IdentitySelector_GCP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalWorkloadSpec_IdentitySelector_GCP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalWorkloadSpec_IdentitySelector_GCP) ProtoMessage() {}

func (x *ExternalWorkloadSpec_IdentitySelector_GCP) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalWorkloadSpec_IdentitySelector_GCP.ProtoReflect.Descriptor instead.
func (*ExternalWorkloadSpec_IdentitySelector_GCP) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *ExternalWorkloadSpec_IdentitySelector_GCP) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *ExternalWorkloadSpec_IdentitySelector_GCP) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExternalWorkloadSpec_IdentitySelector_GCP) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ExternalWorkloadSpec_IdentitySelector_GCP) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ExternalWorkloadSpec_IdentitySelector_GCP) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ExternalWorkloadSpec_IdentitySelector_GCP) GetLabel() *ExternalWorkloadSpec_IdentitySelector_GCP_Label {
	if x != nil {
		return x.Label
	}
	return nil
}

// Selector for external workloads that run in Azure.
// If multiple fields are specified, an external workload is selected only when all match. <!--line 34-35 says the opposite?-->
type ExternalWorkloadSpec_IdentitySelector_Azure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional: The subscription ID of the external workload.
	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	// Optional: The name of the security group associated with the external workload.
	// If specified, the `resourceGroup` field must also be specified.
	SecurityGroup string `protobuf:"bytes,2,opt,name=security_group,json=securityGroup,proto3" json:"security_group,omitempty"`
	// Optional: The name of the virtual network the external workload belongs to.
	// If specified, the `resourceGroup` field must also be specified.
	VirtualNetwork string `protobuf:"bytes,3,opt,name=virtual_network,json=virtualNetwork,proto3" json:"virtual_network,omitempty"`
	// Optional: The name of the subnet in the virtual network the external workload belongs to.
	// If specified, the `resourceGroup` and `virtualNetwork` fields must also be specified.
	Subnet string `protobuf:"bytes,4,opt,name=subnet,proto3" json:"subnet,omitempty"`
	// Optional: The name of the external workload instance.
	// If specified, the `resourceGroup` field must also be specified.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Optional: The resource group the external workload belongs to.
	// The resource group does not act as a selector,
	// but is used in conjunction with the other fields.
	// Must be specified if the `securityGroup`, `virtualNetwork`, `subnet`, or `name` fields are specified.
	ResourceGroup string `protobuf:"bytes,6,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
}

func (x *ExternalWorkloadSpec_IdentitySelector_Azure) Reset() {
	*x = ExternalWorkloadSpec_IdentitySelector_Azure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalWorkloadSpec_IdentitySelector_Azure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalWorkloadSpec_IdentitySelector_Azure) ProtoMessage() {}

func (x *ExternalWorkloadSpec_IdentitySelector_Azure) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalWorkloadSpec_IdentitySelector_Azure.ProtoReflect.Descriptor instead.
func (*ExternalWorkloadSpec_IdentitySelector_Azure) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescGZIP(), []int{0, 2, 2}
}

func (x *ExternalWorkloadSpec_IdentitySelector_Azure) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *ExternalWorkloadSpec_IdentitySelector_Azure) GetSecurityGroup() string {
	if x != nil {
		return x.SecurityGroup
	}
	return ""
}

func (x *ExternalWorkloadSpec_IdentitySelector_Azure) GetVirtualNetwork() string {
	if x != nil {
		return x.VirtualNetwork
	}
	return ""
}

func (x *ExternalWorkloadSpec_IdentitySelector_Azure) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *ExternalWorkloadSpec_IdentitySelector_Azure) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExternalWorkloadSpec_IdentitySelector_Azure) GetResourceGroup() string {
	if x != nil {
		return x.ResourceGroup
	}
	return ""
}

type ExternalWorkloadSpec_IdentitySelector_JoinToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional: Enable the use of join tokens to attest the external workload.
	// Defaults to false.
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *ExternalWorkloadSpec_IdentitySelector_JoinToken) Reset() {
	*x = ExternalWorkloadSpec_IdentitySelector_JoinToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalWorkloadSpec_IdentitySelector_JoinToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalWorkloadSpec_IdentitySelector_JoinToken) ProtoMessage() {}

func (x *ExternalWorkloadSpec_IdentitySelector_JoinToken) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalWorkloadSpec_IdentitySelector_JoinToken.ProtoReflect.Descriptor instead.
func (*ExternalWorkloadSpec_IdentitySelector_JoinToken) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescGZIP(), []int{0, 2, 3}
}

func (x *ExternalWorkloadSpec_IdentitySelector_JoinToken) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

// The tag applied as a key-value pair to the external workload.
type ExternalWorkloadSpec_IdentitySelector_AWS_Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the tag.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value of the tag.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ExternalWorkloadSpec_IdentitySelector_AWS_Tag) Reset() {
	*x = ExternalWorkloadSpec_IdentitySelector_AWS_Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalWorkloadSpec_IdentitySelector_AWS_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalWorkloadSpec_IdentitySelector_AWS_Tag) ProtoMessage() {}

func (x *ExternalWorkloadSpec_IdentitySelector_AWS_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalWorkloadSpec_IdentitySelector_AWS_Tag.ProtoReflect.Descriptor instead.
func (*ExternalWorkloadSpec_IdentitySelector_AWS_Tag) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

func (x *ExternalWorkloadSpec_IdentitySelector_AWS_Tag) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ExternalWorkloadSpec_IdentitySelector_AWS_Tag) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// The label applied as a key-value pair to the external workload.
// The value for the key is optional.
type ExternalWorkloadSpec_IdentitySelector_GCP_Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the label.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value of the label.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ExternalWorkloadSpec_IdentitySelector_GCP_Label) Reset() {
	*x = ExternalWorkloadSpec_IdentitySelector_GCP_Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalWorkloadSpec_IdentitySelector_GCP_Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalWorkloadSpec_IdentitySelector_GCP_Label) ProtoMessage() {}

func (x *ExternalWorkloadSpec_IdentitySelector_GCP_Label) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalWorkloadSpec_IdentitySelector_GCP_Label.ProtoReflect.Descriptor instead.
func (*ExternalWorkloadSpec_IdentitySelector_GCP_Label) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescGZIP(), []int{0, 2, 1, 0}
}

func (x *ExternalWorkloadSpec_IdentitySelector_GCP_Label) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ExternalWorkloadSpec_IdentitySelector_GCP_Label) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Configuration for an HTTP GET probe request.
type ExternalWorkloadSpec_Probe_HTTPGetConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of the port to access. Must be in the range 1 - 65535.
	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// Optional: Path to access on the HTTP server.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Optional: Scheme to use for connecting to the host.
	// Defaults to HTTP.
	Scheme ExternalWorkloadSpec_Probe_HTTPGetConfig_Scheme `protobuf:"varint,3,opt,name=scheme,proto3,enum=networking.gloo.solo.io.ExternalWorkloadSpec_Probe_HTTPGetConfig_Scheme" json:"scheme,omitempty"`
	// Optional: Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []*ExternalWorkloadSpec_Probe_HTTPHeader `protobuf:"bytes,4,rep,name=http_headers,json=httpHeaders,proto3" json:"http_headers,omitempty"`
}

func (x *ExternalWorkloadSpec_Probe_HTTPGetConfig) Reset() {
	*x = ExternalWorkloadSpec_Probe_HTTPGetConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalWorkloadSpec_Probe_HTTPGetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalWorkloadSpec_Probe_HTTPGetConfig) ProtoMessage() {}

func (x *ExternalWorkloadSpec_Probe_HTTPGetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalWorkloadSpec_Probe_HTTPGetConfig.ProtoReflect.Descriptor instead.
func (*ExternalWorkloadSpec_Probe_HTTPGetConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *ExternalWorkloadSpec_Probe_HTTPGetConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ExternalWorkloadSpec_Probe_HTTPGetConfig) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ExternalWorkloadSpec_Probe_HTTPGetConfig) GetScheme() ExternalWorkloadSpec_Probe_HTTPGetConfig_Scheme {
	if x != nil {
		return x.Scheme
	}
	return ExternalWorkloadSpec_Probe_HTTPGetConfig_HTTP
}

func (x *ExternalWorkloadSpec_Probe_HTTPGetConfig) GetHttpHeaders() []*ExternalWorkloadSpec_Probe_HTTPHeader {
	if x != nil {
		return x.HttpHeaders
	}
	return nil
}

// A custom header to use in HTTP probes.
type ExternalWorkloadSpec_Probe_HTTPHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The header field name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The header field value.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ExternalWorkloadSpec_Probe_HTTPHeader) Reset() {
	*x = ExternalWorkloadSpec_Probe_HTTPHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalWorkloadSpec_Probe_HTTPHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalWorkloadSpec_Probe_HTTPHeader) ProtoMessage() {}

func (x *ExternalWorkloadSpec_Probe_HTTPHeader) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalWorkloadSpec_Probe_HTTPHeader.ProtoReflect.Descriptor instead.
func (*ExternalWorkloadSpec_Probe_HTTPHeader) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *ExternalWorkloadSpec_Probe_HTTPHeader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExternalWorkloadSpec_Probe_HTTPHeader) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Configuration for a TCP socket probe.
type ExternalWorkloadSpec_Probe_TCPSocketConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional: Host to connect to. Defaults to `localhost`.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Number of the port to access. Must be in the range 1 - 65535.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ExternalWorkloadSpec_Probe_TCPSocketConfig) Reset() {
	*x = ExternalWorkloadSpec_Probe_TCPSocketConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalWorkloadSpec_Probe_TCPSocketConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalWorkloadSpec_Probe_TCPSocketConfig) ProtoMessage() {}

func (x *ExternalWorkloadSpec_Probe_TCPSocketConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalWorkloadSpec_Probe_TCPSocketConfig.ProtoReflect.Descriptor instead.
func (*ExternalWorkloadSpec_Probe_TCPSocketConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescGZIP(), []int{0, 3, 2}
}

func (x *ExternalWorkloadSpec_Probe_TCPSocketConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ExternalWorkloadSpec_Probe_TCPSocketConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// Configuration for an exec command probe.
type ExternalWorkloadSpec_Probe_ExecConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Command to run. An exit status of zero (0) is considered healthy, and a non-zero status is considered unhealthy.
	Command []string `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"`
}

func (x *ExternalWorkloadSpec_Probe_ExecConfig) Reset() {
	*x = ExternalWorkloadSpec_Probe_ExecConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalWorkloadSpec_Probe_ExecConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalWorkloadSpec_Probe_ExecConfig) ProtoMessage() {}

func (x *ExternalWorkloadSpec_Probe_ExecConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalWorkloadSpec_Probe_ExecConfig.ProtoReflect.Descriptor instead.
func (*ExternalWorkloadSpec_Probe_ExecConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescGZIP(), []int{0, 3, 3}
}

func (x *ExternalWorkloadSpec_Probe_ExecConfig) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

var File_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDesc = []byte{
	0x0a, 0x67, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x1a, 0x12, 0x65, 0x78, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d,
	0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x52, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69,
	0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x9f, 0x17, 0x0a, 0x14, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x6b, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x72, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x1a, 0x44, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x89, 0x0a, 0x0a, 0x10, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x54,
	0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x57, 0x53, 0x52,
	0x03, 0x61, 0x77, 0x73, 0x12, 0x54, 0x0a, 0x03, 0x67, 0x63, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x47, 0x43, 0x50, 0x52, 0x03, 0x67, 0x63, 0x70, 0x12, 0x5a, 0x0a, 0x05, 0x61, 0x7a,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x52,
	0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x12, 0x67, 0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a,
	0xed, 0x02, 0x0a, 0x03, 0x41, 0x57, 0x53, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x61, 0x6d, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x61, 0x6d, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x41, 0x57, 0x53, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x1a, 0x2d, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x98, 0x02, 0x0a, 0x03, 0x47, 0x43, 0x50, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x5e, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x43, 0x50, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x2f, 0x0a, 0x05, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xd3, 0x01, 0x0a, 0x05, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x1a, 0x23, 0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xdb, 0x08, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12,
	0x50, 0x0a, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x45, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x49, 0x0a,
	0x11, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x49, 0x0a, 0x11, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x5e, 0x0a, 0x08, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x07, 0x68, 0x74, 0x74, 0x70,
	0x47, 0x65, 0x74, 0x12, 0x64, 0x0a, 0x0a, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x54, 0x43, 0x50,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x09,
	0x74, 0x63, 0x70, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x54, 0x0a, 0x04, 0x65, 0x78, 0x65,
	0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x04, 0x65, 0x78, 0x65, 0x63, 0x1a,
	0x9b, 0x02, 0x0a, 0x0d, 0x48, 0x54, 0x54, 0x50, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x60, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x0c, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x1d,
	0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x54, 0x54, 0x50, 0x53, 0x10, 0x01, 0x1a, 0x36, 0x0a,
	0x0a, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x39, 0x0a, 0x0f, 0x54, 0x43, 0x50, 0x53, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x1a, 0x26, 0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x22, 0xbd, 0x02, 0x0a, 0x16, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x77, 0x6e, 0x65,
	0x64, 0x42, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x45, 0x0a, 0x17,
	0x4e, 0x75, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x97, 0x04, 0x0a, 0x16, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5f,
	0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x91, 0x01, 0x0a, 0x1c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x5a, 0x0a, 0x0f,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x82, 0x01, 0x0a, 0x1f, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x49,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x61, 0x5a,
	0x53, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f,
	0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0xc0, 0xf5, 0x04, 0x01, 0xb8, 0xf5, 0x04, 0x01, 0xd0, 0xf5, 0x04, 0x01,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescData = file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_goTypes = []interface{}{
	(ExternalWorkloadSpec_Probe_HTTPGetConfig_Scheme)(0),    // 0: networking.gloo.solo.io.ExternalWorkloadSpec.Probe.HTTPGetConfig.Scheme
	(*ExternalWorkloadSpec)(nil),                            // 1: networking.gloo.solo.io.ExternalWorkloadSpec
	(*ExternalWorkloadStatus)(nil),                          // 2: networking.gloo.solo.io.ExternalWorkloadStatus
	(*ExternalWorkloadReport)(nil),                          // 3: networking.gloo.solo.io.ExternalWorkloadReport
	nil,                                                     // 4: networking.gloo.solo.io.ExternalWorkloadSpec.ConnectedClustersEntry
	(*ExternalWorkloadSpec_Port)(nil),                       // 5: networking.gloo.solo.io.ExternalWorkloadSpec.Port
	(*ExternalWorkloadSpec_IdentitySelector)(nil),           // 6: networking.gloo.solo.io.ExternalWorkloadSpec.IdentitySelector
	(*ExternalWorkloadSpec_Probe)(nil),                      // 7: networking.gloo.solo.io.ExternalWorkloadSpec.Probe
	(*ExternalWorkloadSpec_IdentitySelector_AWS)(nil),       // 8: networking.gloo.solo.io.ExternalWorkloadSpec.IdentitySelector.AWS
	(*ExternalWorkloadSpec_IdentitySelector_GCP)(nil),       // 9: networking.gloo.solo.io.ExternalWorkloadSpec.IdentitySelector.GCP
	(*ExternalWorkloadSpec_IdentitySelector_Azure)(nil),     // 10: networking.gloo.solo.io.ExternalWorkloadSpec.IdentitySelector.Azure
	(*ExternalWorkloadSpec_IdentitySelector_JoinToken)(nil), // 11: networking.gloo.solo.io.ExternalWorkloadSpec.IdentitySelector.JoinToken
	(*ExternalWorkloadSpec_IdentitySelector_AWS_Tag)(nil),   // 12: networking.gloo.solo.io.ExternalWorkloadSpec.IdentitySelector.AWS.Tag
	(*ExternalWorkloadSpec_IdentitySelector_GCP_Label)(nil), // 13: networking.gloo.solo.io.ExternalWorkloadSpec.IdentitySelector.GCP.Label
	(*ExternalWorkloadSpec_Probe_HTTPGetConfig)(nil),        // 14: networking.gloo.solo.io.ExternalWorkloadSpec.Probe.HTTPGetConfig
	(*ExternalWorkloadSpec_Probe_HTTPHeader)(nil),           // 15: networking.gloo.solo.io.ExternalWorkloadSpec.Probe.HTTPHeader
	(*ExternalWorkloadSpec_Probe_TCPSocketConfig)(nil),      // 16: networking.gloo.solo.io.ExternalWorkloadSpec.Probe.TCPSocketConfig
	(*ExternalWorkloadSpec_Probe_ExecConfig)(nil),           // 17: networking.gloo.solo.io.ExternalWorkloadSpec.Probe.ExecConfig
	nil,                          // 18: networking.gloo.solo.io.ExternalWorkloadStatus.NumAppliedPoliciesEntry
	nil,                          // 19: networking.gloo.solo.io.ExternalWorkloadReport.WorkspacesEntry
	nil,                          // 20: networking.gloo.solo.io.ExternalWorkloadReport.AppliedDestinationPoliciesEntry
	(*v2.Status)(nil),            // 21: common.gloo.solo.io.Status
	(*wrappers.UInt32Value)(nil), // 22: google.protobuf.UInt32Value
	(*v2.Report)(nil),            // 23: common.gloo.solo.io.Report
	(*v2.AppliedDestinationPortPolicies)(nil), // 24: common.gloo.solo.io.AppliedDestinationPortPolicies
}
var file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_depIdxs = []int32{
	5,  // 0: networking.gloo.solo.io.ExternalWorkloadSpec.ports:type_name -> networking.gloo.solo.io.ExternalWorkloadSpec.Port
	6,  // 1: networking.gloo.solo.io.ExternalWorkloadSpec.identity_selector:type_name -> networking.gloo.solo.io.ExternalWorkloadSpec.IdentitySelector
	4,  // 2: networking.gloo.solo.io.ExternalWorkloadSpec.connectedClusters:type_name -> networking.gloo.solo.io.ExternalWorkloadSpec.ConnectedClustersEntry
	7,  // 3: networking.gloo.solo.io.ExternalWorkloadSpec.readiness_probe:type_name -> networking.gloo.solo.io.ExternalWorkloadSpec.Probe
	21, // 4: networking.gloo.solo.io.ExternalWorkloadStatus.common:type_name -> common.gloo.solo.io.Status
	18, // 5: networking.gloo.solo.io.ExternalWorkloadStatus.num_applied_policies:type_name -> networking.gloo.solo.io.ExternalWorkloadStatus.NumAppliedPoliciesEntry
	19, // 6: networking.gloo.solo.io.ExternalWorkloadReport.workspaces:type_name -> networking.gloo.solo.io.ExternalWorkloadReport.WorkspacesEntry
	20, // 7: networking.gloo.solo.io.ExternalWorkloadReport.applied_destination_policies:type_name -> networking.gloo.solo.io.ExternalWorkloadReport.AppliedDestinationPoliciesEntry
	8,  // 8: networking.gloo.solo.io.ExternalWorkloadSpec.IdentitySelector.aws:type_name -> networking.gloo.solo.io.ExternalWorkloadSpec.IdentitySelector.AWS
	9,  // 9: networking.gloo.solo.io.ExternalWorkloadSpec.IdentitySelector.gcp:type_name -> networking.gloo.solo.io.ExternalWorkloadSpec.IdentitySelector.GCP
	10, // 10: networking.gloo.solo.io.ExternalWorkloadSpec.IdentitySelector.azure:type_name -> networking.gloo.solo.io.ExternalWorkloadSpec.IdentitySelector.Azure
	11, // 11: networking.gloo.solo.io.ExternalWorkloadSpec.IdentitySelector.join_token:type_name -> networking.gloo.solo.io.ExternalWorkloadSpec.IdentitySelector.JoinToken
	22, // 12: networking.gloo.solo.io.ExternalWorkloadSpec.Probe.initial_delay_seconds:type_name -> google.protobuf.UInt32Value
	22, // 13: networking.gloo.solo.io.ExternalWorkloadSpec.Probe.timeout_seconds:type_name -> google.protobuf.UInt32Value
	22, // 14: networking.gloo.solo.io.ExternalWorkloadSpec.Probe.period_seconds:type_name -> google.protobuf.UInt32Value
	22, // 15: networking.gloo.solo.io.ExternalWorkloadSpec.Probe.success_threshold:type_name -> google.protobuf.UInt32Value
	22, // 16: networking.gloo.solo.io.ExternalWorkloadSpec.Probe.failure_threshold:type_name -> google.protobuf.UInt32Value
	14, // 17: networking.gloo.solo.io.ExternalWorkloadSpec.Probe.http_get:type_name -> networking.gloo.solo.io.ExternalWorkloadSpec.Probe.HTTPGetConfig
	16, // 18: networking.gloo.solo.io.ExternalWorkloadSpec.Probe.tcp_socket:type_name -> networking.gloo.solo.io.ExternalWorkloadSpec.Probe.TCPSocketConfig
	17, // 19: networking.gloo.solo.io.ExternalWorkloadSpec.Probe.exec:type_name -> networking.gloo.solo.io.ExternalWorkloadSpec.Probe.ExecConfig
	12, // 20: networking.gloo.solo.io.ExternalWorkloadSpec.IdentitySelector.AWS.tag:type_name -> networking.gloo.solo.io.ExternalWorkloadSpec.IdentitySelector.AWS.Tag
	13, // 21: networking.gloo.solo.io.ExternalWorkloadSpec.IdentitySelector.GCP.label:type_name -> networking.gloo.solo.io.ExternalWorkloadSpec.IdentitySelector.GCP.Label
	0,  // 22: networking.gloo.solo.io.ExternalWorkloadSpec.Probe.HTTPGetConfig.scheme:type_name -> networking.gloo.solo.io.ExternalWorkloadSpec.Probe.HTTPGetConfig.Scheme
	15, // 23: networking.gloo.solo.io.ExternalWorkloadSpec.Probe.HTTPGetConfig.http_headers:type_name -> networking.gloo.solo.io.ExternalWorkloadSpec.Probe.HTTPHeader
	23, // 24: networking.gloo.solo.io.ExternalWorkloadReport.WorkspacesEntry.value:type_name -> common.gloo.solo.io.Report
	24, // 25: networking.gloo.solo.io.ExternalWorkloadReport.AppliedDestinationPoliciesEntry.value:type_name -> common.gloo.solo.io.AppliedDestinationPortPolicies
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_init()
}
func file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_init() {
	if File_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalWorkloadSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalWorkloadStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalWorkloadReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalWorkloadSpec_Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalWorkloadSpec_IdentitySelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalWorkloadSpec_Probe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalWorkloadSpec_IdentitySelector_AWS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalWorkloadSpec_IdentitySelector_GCP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalWorkloadSpec_IdentitySelector_Azure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalWorkloadSpec_IdentitySelector_JoinToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalWorkloadSpec_IdentitySelector_AWS_Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalWorkloadSpec_IdentitySelector_GCP_Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalWorkloadSpec_Probe_HTTPGetConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalWorkloadSpec_Probe_HTTPHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalWorkloadSpec_Probe_TCPSocketConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalWorkloadSpec_Probe_ExecConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ExternalWorkloadSpec_Probe_HttpGet)(nil),
		(*ExternalWorkloadSpec_Probe_TcpSocket)(nil),
		(*ExternalWorkloadSpec_Probe_Exec)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto = out.File
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_solo_apis_api_gloo_solo_io_networking_v2alpha1_external_workload_proto_depIdxs = nil
}
