syntax = "proto3";

package envoy.config.filter.http.proxylatency.v2;

option go_package = "github.com/solo-io/gloo-mesh-enterprise/pkg/api/envoy-gloo-ee/api/envoy/config/filter/http/proxylatency/v2";

import "google/protobuf/wrappers.proto";

option java_package = "io.envoyproxy.envoy.config.filter.http.proxylatency.v2";
option java_outer_classname = "ProxyLatencyProto";
option java_multiple_files = true;

// Configure the proxy latency fitler. This filter measures the latency
// incurred by the filter chain in a histogram.
message ProxyLatency {

  // How to perform the latency measurement. Given an incoming request from
  // downstream and outging request to upstream; or incoming response from
  // upstream and outgoing repsonse to downstream, This outlines how to measure
  // the latency used by the proxy.
  enum Measurement {
    // Count from the last byte of the incoming request\response to the first
    // byte of the outgoing request\response.
    LAST_INCOMING_FIRST_OUTGOING = 0;
    // Count from the first byte of the incoming request\response to the first
    // byte of the outgoing request\response.
    FIRST_INCOMING_FIRST_OUTGOING = 1;
    // Count from the last byte of the incoming request\response to the last
    // byte of the outgoing request\response.
    LAST_INCOMING_LAST_OUTGOING = 2;
    // Count from the first byte of the incoming request\response to the last
    // byte of the outgoing request\response.
    FIRST_INCOMING_LAST_OUTGOING = 3;
  }

  // How to measure the request.
  Measurement request = 1;
  // When FIRST_OUTGOING (i.e. LAST_INCOMING_FIRST_OUTGOING or
  // FIRST_INCOMING_FIRST_OUTGOING) is selected for request measurment, finish
  // measuring proxy latency when decodeHeader for this filter is hit instead of
  // when the first byte is sent upstream. This has the advantage of not
  // measuring the time it takes a connection to form, which may skew the P99.
  // For this to work this filter should be inserted last, just before the
  // router filter. This has no effect if other measurement type is selected,
  // and has no effect on how response is measured.
  bool measure_request_internally = 5;

  // How measure the response.
  Measurement response = 2;

  // Charge a stat per upstream cluster. If not specified, defaults to true.
  google.protobuf.BoolValue charge_cluster_stat = 3;
  // Charge a stat per listener. If not specified, defaults to true.
  google.protobuf.BoolValue charge_listener_stat = 4;

  // Should we emit request timing to dynamic metadata. defaults to true.
  google.protobuf.BoolValue emit_dynamic_metadata = 6;
}
