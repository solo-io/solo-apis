syntax = "proto3";

package envoy.config.filter.http.graphql.v2;

option go_package = "github.com/solo-io/solo-apis/pkg/api/envoy-gloo-ee/api/envoy/config/filter/http/graphql/v2";

option java_package = "io.envoyproxy.envoy.config.filter.http.graphql.v2";
option java_outer_classname = "GraphQLFilterProto";
option java_multiple_files = true;

import "github.com/solo-io/solo-apis/api/gloo-mesh/external/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "github.com/solo-io/solo-apis/api/gloo-mesh/external/envoyproxy/data-plane-api/envoy/config/core/v3/http_uri.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/external/envoyproxy/data-plane-api/envoy/config/core/v3/extension.proto";
import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";


import "github.com/solo-io/solo-apis/api/gloo-mesh/external/envoyproxy/data-plane-api/envoy/config/core/v3/base.proto";

// [Deprecated] - all usages of this are deprecated
// Defines a response transformation template.
// modify JSON response from upstream before it is processed by execution engine.
message ResponseTemplate {
    // [Deprecated] Use pre execution transformation instead
    // In cases where the data to populate the graphql type is not in the 
    // root object of the result, use result root to specify the path
    // of the response we should use as the root.
    // If {"a": {"b": [1,2,3]}} is the response from the api, setting resultroot as `a.b`
    // will pass on [1,2,3] to the execution engine rather than the whole api response
    repeated PathSegment result_root = 1 [deprecated=true];
    
    // [Deprecated] Use pre execution transformation instead
    // Set graphql field to a specific path in the JSON response from the upstream
    // If resultroot is set, uses resultroot as the base path for all setters.
    // use cases:
    // - extracting data from a field to a graphql field with a different name / type
    /*
    Example:
    ```
    type Query {
      getSimple: Simple
    }
    
    type Simple {
      name String
      address String
    }```
    
    if we do `getsimple` and the response we get back from the upstream is 
    ```
    {"data": {
      "people":
        {
          "name": "John Doe",
          "details": {
            "address": "123 Turnip Rd"
          }
        }
      }
    }
    ```
    the following response transform would let the graphql execution engine correctly 
    marshal the upstream resposne into the expected graphql response:
    `
    responseTransform:
      result_root:
        segments:
          - key: data
          - key: people
      setters:
        address:
          segments:
            - key: details
            - key: address
    `yaml
    */
    map<string, TemplatedPath> setters = 2 [deprecated=true];
    
}

// Variable transformations are used to take variables that were declared
// and transform them using a transformation. The simplest transformation is the `variable`
// transform, which passes through the value of a single variable. For more complex transforms,
// the `jq` transformation can be used to form more complicated JSON values.
message VariableTransformation {

  // Transformations on variable extractions.
  oneof transformation  {

    // The value of the variable referenced is the result of this transformation.
    // If the variable does not exist, an error will be thrown during configuration-time.
    string variable = 1;

    // The [jq](https://stedolan.github.io/jq/manual/) filter which is used to provide a value.
    // variables defined in `variables` can be used in the jq filter via regular jq variable syntax.
    // For example, a variable named "userIdHeader" can be used in a jq filter as `$userIdHeader`
    // Jq filters must only result in one value, or an error will be sent back to the client.
    // For example, for the input `[1,2,3]`, the jq filter `.[]` is not a valid jq filter as it results
    // in multiple jq results. However, the jq filter '. | join(",")' is valid as it results in one result: "1,2,3".
    string jq = 2;
    
    // static JSON value. 
    google.protobuf.Value value = 3;
  }
}

// Extractions are used to assign values to variables from various sources of data in the GraphQL
// request or response. This includes HTTP headers, Envoy Dynamic Metadata, or GraphQL query-specific args.
message Extraction {
  oneof extraction_type {
    // Extract the value from the GraphQL HTTP request header. The extracted value is a string.
    // If the header doesn't exist, an error will be returned during run-time.
    // If the header has multiple values, via a comma-separated list string, the value will be the same
    // comma separated list string with all the values included.
    // e.g. 
    // x-forwarded-for: 192.1.3.4,172.1.3.5, 192.163.2.5
    // will be extracted as "192.1.3.4,172.1.3.5, 192.163.2.5"
    string request_header = 1;
    // Extract the value from envoy dynamic metadata. The extracted value is an object.
    DynamicMetadataExtraction dynamic_metadata = 2;
    // Assigns the variable to the parent object
    google.protobuf.Empty graphql_parent = 3;
    // Assigns the variable to the GraphQL Argument with this name.
    // If this name doesn't exist, the variable is `null`
    string graphql_arg = 4;
    // Only available on response transformations
    // Assigns the variable to the GraphQL response body. 
    // This variable is only available during the pre_execution_transform and should not 
    // be used in the resolver-level variable transformations.
    google.protobuf.Empty resolver_result = 6;
    // Assigns the variable to a JSON value specified here
    google.protobuf.Value json_value = 7;
  }

  // In the future, we may want to also include a Transformation here so we can declare the value of the variables
  // to some transformed value. see https://github.com/solo-io/gloo-mesh-enterprise/pull/4354#discussion_r919055587 for discussion.
  // Transformation transformation = 9;

  message DynamicMetadataExtraction {
    // The envoy dynamic metadata namespace that the data lives in. If the namespace doesn't exist in the
    // metadata, the extraction yields null
    string metadata_namespace = 1;
    // The key under the envoy dynamic metadata namespace that the data lives under.
    // If the key doesn't exist in the namespace, the extraction yields null
    string key = 2;
  }
}

message RESTResolver {
  config.core.v3.HttpUri server_uri = 1;
  
  oneof request {
      // configuration used to compose the outgoing request to a REST API
    // [deprecated] use request_transformation instead;
    RequestTemplate request_transform = 2 [deprecated=true];
    
    // configuration used to compose the outgoing request to a REST backend
    OutgoingRequest request_transformation = 5;
  }
  
  // pre-execution engine transformations 
  // 
  // Request flow: GraphQL request -> request_transform (instantiate REST request) ->
  // REST API resp -> pre_execution_transform -> execution engine -> 
  // complete GraphQL field response
  //
  // [Deprecated]
  // deprecation notice: if pre_execution_transform is set at the resolution level (up a level), this is ignored
  ResponseTemplate pre_execution_transform = 3 [deprecated=true];
  string span_name = 4;
  
  // Variables that are declared given the REST upstream response.
  // These variables can only be used in the pre_execution_transform.
  // If a variable has the same name as a variable declared at the resolution-level,
  // this variable will take precedence.
  map<string, RestResponseVariableExtraction> variables = 6;
  
  message RestResponseVariableExtraction {
    oneof extraction {
      // Extract a header from the HTTP response. If the HTTP response is a non-200 response,
      // or the header doesn't exist, the variable value will be null.
      string response_header = 1;
    }
  }
  
  message OutgoingRequest {
    // Sets the headers on the request to the REST destination.
    // This includes setting HTTP :method and :path headers.
    // If the :method header is not set, the request will be sent by default as a GET.
    // This is a map of HTTP Header name to a transformation which determines the Header value.
    // The transformation must result in a JSON string value, or an error will be sent back to the client.
    map<string, VariableTransformation> headers = 1;
  
    // Sets the query parameters on the request to the REST destination.
    // The transformation that sets the value of a query param must output a JSON string, or an
    // error will be sent back to the client.
    map<string, VariableTransformation> query_params = 2;
  
    // Sets the outgoing body to the upstream REST destination.
    // By default, the body is empty.
    VariableTransformation body = 3;
  }
}

// Defines a configuration for generating outgoing requests for a resolver.
message GrpcRequestTemplate {
    // json representation of outgoing gRPC message to be sent to gRPC service
    JsonValue outgoing_message_json = 1;
    
    VariableTransformation outgoing_message_transform = 5;

    // request has shape matching service with name registered in registry
    // is the full_name(), e.g. main.Bookstore
    string service_name = 2;

    // make request to method with this name on the grpc service defined above
    // is just the name(), e.g. GetBook
    string method_name = 3;

    // in the future, we may want to make this a map<string, ValueProvider>
    // once we know better what the use cases are
    map<string, string> request_metadata = 4;

    // GraphQL Mesh fields not supported in our datplane API today and reasons:

    // think about graphql subscriptions we may need a new resolver for grpc streaming

    // we should explore doing this in the control plane instead of the data plane
    //useReflection (type: Boolean) - Use gRPC reflection to automatically gather the connection

    // rely on envoy cluster for rootca, certchain, privatekey
    //bool useHttps = 7;
}


// Defines a configuration for serializing and deserializing requests for a gRPC resolver.
// Is a Schema Extension
message GrpcDescriptorRegistry {
    envoy.config.core.v3.DataSource proto_descriptors = 1;
}


message GrpcResolver {
    config.core.v3.HttpUri server_uri = 1;
    // configuration used to compose the outgoing request to a gRPC endpoint
    GrpcRequestTemplate request_transform = 2;
    // pre-execution engine transformations
    // 
    // Request flow: GraphQL request -> request_transform (instantiate gRPC request) ->
    // gRPC API resp -> pre_execution_transform -> execution engine ->
    // complete GraphQL field response
    //
    // ResponseTemplate pre_execution_transform = 3;
    string span_name = 4;
}

// Only meant for integration testing
message StaticResolver {
  message AsyncResponse {
    oneof response_type {
      string response = 1;
      VariableTransformation templated_response = 3;
                  
    }
    uint32 delay_ms = 2;
  }
  
  message AsyncTemplatedResponse {
    uint32 delay_ms = 2;
  }
  
  oneof response {
    // Responds synchronously (on the same dispatch loop as the resolve call)
    // [Deprecated] - use sync_templated_response
    string sync_response = 1 [deprecated=true];
    
    // Responds asynchronously after delay_ms
    AsyncResponse async_response = 2 [deprecated=true];
    
    // Responds as an error with the given message
    string error_response = 3;
    
    // Responds synchronously (on the same dispatch loop as the resolve call)
    // with a variable transformation.
    // If this is set, sync_response is ignored.
    VariableTransformation sync_templated_response = 4;
    
  }
}

// NOT IMPLEMENTED
// Resolve an abstract type (union or interface) to a real type.
// When implemented, this message will be a field in the Resolution message.
message AbstractTypeResolver {
  // TODO: add me
}

// NOT IMPLEMENTED
// When we'll support prepared queries, this will be the type containing the
// query.
// message Query { envoy.config.core.v3.DataSource query = 1; }

message QueryMatcher {
  message FieldMatcher {
    // Object type. For example, Query.
    string type = 1;
    // Field within the object.
    string field = 2;
  }

  // NOT IMPLEMENTED
  // can be used to set default configuration.
  // any type configuration provided with a field as well takes precedence.
  // Note: we may want this to live higher up than on the Resolution message
  //
  // message TypeMatcher {
  //   // Object type. For example, Query.
  //   string type = 1;
  // }

  oneof match { FieldMatcher field_matcher = 1; }
}

// This is the resolver map for the schema.
// For each Type.Field, we can define a resolver.
// if a field does not have resolver, the default resolver will be used.
// the default resolver takes the field with the same name from the parent, and
// uses that value to resolve the field. if a field with the same name does not
// exist in the parent, null will be used.
message Resolution {
  // Match an object type and field
  QueryMatcher matcher = 1;
  
  // Variables that can be used as a part of transformations for this field's resolution.
  // The key is the name of the variable, which is directly used in the transformation.
  // The value defines where the variable value is extracted from on the GraphQL request.
  map<string, Extraction> variables = 5;
  // The resolver to use
  envoy.config.core.v3.TypedExtensionConfig resolver = 2;
  
  // Variable transformation that is run prior to the resolver result being passed to the
  // GraphQL execution engine. This is primarily used to transform the result 
  // from the resolver, but all variables declared in the `variables` field are available here.
  // In addition, variables that are returned from the resolver are also available here, 
  // with those variables taking naming precedence over variables declared at this level.
  VariableTransformation pre_execution_transform = 6;
  // The stats prefix which will be used for this resolver
  string stat_prefix = 3;
  // caching configuration, defaults to no caching
  CacheControl cache_control = 4;
}

// Resolvers for scalar, non-root fields rarely fetch data and instead usually populate data via the parent argument.
// Consequently, these fields inherit their default maxAge from their parent to reduce schema clutter.
//
// TODO: Talk with product -- apollo does not do this, but we could factor in upstream Cache-Control header
// response into our inheritance model.
message CacheControl {
  // number of seconds to cache result for. the max_age used for a single graphql request is the minimum
  // of all fields requested.
  //
  // default max_age rules work as follows:
  // - root fields (i.e. Query, Mutation, Subscription) default to 0s
  // - non-root, non-scalar fields (i.e. object, interface, or union; or a list of those types) default to 0s
  // - all other fields inherit the max_age from their parent.
  google.protobuf.UInt32Value max_age = 1;

  enum CacheControlScope {
    UNSET = 0;
    // Responses for requests with Authorization header fields must not be stored in a shared cache.
    // But the public directive will cause such responses to be stored in a shared cache.
    //
    // In general, when pages are under Basic Auth or Digest Auth, the browser sends requests with
    // the Authorization header. That means the response is access-controlled for restricted users
    // (who have accounts), and it's fundamentally not shared-cacheable, even if it has max-age.
    //
    // You can use the public directive to unlock that restriction.
    PUBLIC = 1;
    // You should add the private directive for user-personalized content — in particular, responses
    // received after login, and sessions managed via cookies.
    //
    // If you forget to add private to a response with personalized content, then that response can be
    // stored in a shared cache and end up being reused for multiple users, which can cause personal
    // information to leak.
    PRIVATE = 2;
  }

  // provide controls to which users can access cached content
  CacheControlScope scope = 2;

  // whether or not to inherit the caching configuration of any parent fields
  bool inherit_max_age = 3;
}

// Filter Listener config. Empty as the filter must be configured on the route
// level.
message GraphQLConfig {}

// Filter Route config. Routes that have this config will execute graphql
// queries, and will not make it to the router filter. i.e. this filter will
// terminate the request for these routes.
message GraphQLRouteConfig {

  ExecutableSchema executable_schema = 4;
  // In the future, we will support persistent queries, this will be a map of
  // query id to query.
  //    map<string, Query> presistent_queries = 3;
  // when we support persistent queries, we may want to use them exclusivly, for
  // predictable operations. (i.e. no surprise mega query from a client). bool
  // only_persistent_queries = 4;

  // key is either:
  // Type
  // or
  // Type.Field where the latter takes precedence.
  // ??consider  Type and Type.Field **MUST** be in the schema ??
  // missing resolvers will yield error in the response

  // The stats prefix which will be used for this route config.
  string stat_prefix = 5;

  // Configuration settings for persisted query cache
  PersistedQueryCacheConfig persisted_query_cache_config = 6;

  // Safelist: only allow queries to be executed that match these sha256 hashes.
  // The hash can be computed from the query string or provided (i.e. persisted queries).
  repeated string allowed_query_hashes = 7;
}

// This message specifies Persisted Query Cache configuration.
message PersistedQueryCacheConfig {
  // The unit is number of queries to store, default to 1000.
  uint32 cache_size = 1;
}

message ExecutableSchema {
  // Schema to use in string format.
  envoy.config.core.v3.DataSource schema_definition = 1;
  
  // how to execute the schema
  Executor executor = 2;

  // Schema extensions
  map<string, google.protobuf.Any> extensions = 3;
  
  // Logs request / response sensitive information
  // By default, this is false so no request or response sensitive information is logged.
  bool log_request_response_info = 4;
  
}

message Executor {
  // Execute schema using resolvers.
  message Local {
    // The resolver map to use to resolve the schema.
    repeated Resolution resolutions = 1;
    // Do we enable introspection for the schema? general recommendation is to
    // disable this for production and hence it defaults to false.
    bool enable_introspection = 2;
    
    // The max amount of nesting a query can be executed against this schema.
    // e.g. the following query has these depths:
    // query {         # Depth: 0
    // me {            # Depth: 1
    //     friends {   # Depth: 2
    //        friends  # Depth: 3
    //     }           
    //   }             
    // }
    // If the max_depth is set to 2, then the query at depth 3 will recieve an error as a response.
    // By default max_depth is 0, which is unbounded query depth.
    uint32 max_depth = 3;
  }

  // Execute schema by querying a graphql upstream.
  message Remote {
    message Extraction {
      message DynamicMetadataExtraction {
        // The namespace that the dynamic metadata is stored in.
        string metadata_namespace = 1;
        // The key in the namespace that the dynamic metadata is stored under.
        string key = 2;
      }
      oneof extraction_type {
        // Set the extraction type to use a static value.
        string value = 1;
        // Set the extraction type to use a header value.
        // Specify the name of the header to extract the value from on the original request.
        string header = 2;
        // Set the extraction type to use a dynamic metadata value.
        DynamicMetadataExtraction dynamic_metadata = 3;
      }
    }
    
    message RemoteSchemaRequest {
      // Map of headers to header value which will be included in the request to the remote graphql server.
      map<string, Extraction> headers = 2;
      
      // Query params to set on the request to the remote graphql server.
      map<string, Extraction> query_params = 3;
    }
    // Server URI of the remote graphql cluster.
    config.core.v3.HttpUri server_uri = 1;
    
    RemoteSchemaRequest request = 2;
    
    string span_name = 3 ;

  }
  
  oneof executor {
    Local local = 1;
    Remote remote = 2;
  }
}

// [Deprecated]  - all usages of this message are deprecated
// used to reference into json structures by key(s)
message PathSegment {
  oneof segment {
      option (validate.required) = true;
      // This will extract a key from a Map value.
      string key = 1 [(validate.rules).string = {min_len: 1}];
      // Extract element at list
      uint32 index = 2;
      // Extracts all elements from a map or a list
      bool all = 3;
  }
}
// [Deprecated]  - all usages of this message are deprecated
message Path {
  repeated PathSegment segments = 1;
}
// [Deprecated] - all usages of this message are deprecated
message TemplatedPath {
  /*
    If non-empty, Inserts named paths into a template string.
    For example, if the template is '/api/{apiVersionPath}/pet/{petIdPath}'
    and we have two named paths defined in `named_paths`, apiVersionPath and petIdPath, with extracted values 'v2' and '123' respectively,
    the final resulting value will be '/api/v2/pet/123'        
    Use {PATH_NAME} as the interpolation notation (even repeated) regardless of the type of the
    provided value.
    If an undefined PATH_NAME is used in the template, this will nack during configuration.
    If this is empty, only the value of the first provider will be used as the resulting value.
  */
  string path_template = 1;

  map<string, Path> named_paths = 2;
}

// In the future we may add support for regex and subgroups
// [Deprecated]  - all usages of this message are deprecated
message ValueProvider {

  message GraphQLArgExtraction {
      // The argument name to fetch. The argument value fetched
      // will have a type from the schema that we validate in envoy.
      // If the name is invalid, returns the zero-value primitive or null.
      string arg_name = 1;
      // Optional: fetches the value in the argument selected at this key.
      // If the key is invalid, returns the zero-value primitive or null.
      repeated PathSegment path = 2;
  }
  
  // Does not do type coercion, but instead if the type does not match the
  // expected primitive type we throw an error.
  // In the future we may add support for type coercion.
  message GraphQLParentExtraction {
      // Fetches the value in the graphql parent at this key. The value will
      // always be accepted since the parent object is not strongly-typed.
      // If the key is invalid, returns null.
      repeated PathSegment path = 1;
  }

  message TypedValueProvider {
     
      // if empty, defaults to string. similar to typeUrl in other envoy config
      enum Type {
        STRING = 0;
        INT = 1;
        FLOAT = 2;
        BOOLEAN = 3;
      }
      // Type that the value will be coerced into. 
      // For example if the extracted value is "9", and type is INT,
      // this value will be cast to an int type.
      Type type = 1;
      oneof val_provider {
        // Fetches the request/response header's value. If not found, uses empty string
        string header = 2;
        // inline value, use as provided rather than extracting from another source
        string value = 3;
      }
  }
  
  message Provider {
    oneof provider {
      // type inferred from schema, no need to provide it.
      GraphQLArgExtraction graphql_arg = 1;
      TypedValueProvider typed_provider = 2;        
      // Fetch value from the graphql_parent of the current field.
      GraphQLParentExtraction graphql_parent = 3; 
    }
  }
  
  // Map of provider name to provider definition.
  // The name will be used to insert the provider value in the provider_template.
  map<string, Provider> providers = 3;

  /*
  If non-empty, Inserts named providers into a template string.
  For example, if the provider_template is '/api/{apiVersionProvider}/pet/{petIdProvider}'
  and we have two named providers defined in `providers`, apiVersionProvider and petIdProvider, with extracted values 'v2' and '123' respectively,
  the final resulting value will be '/api/v2/pet/123'        
  Use {PROVIDER_NAME} as the interpolation notation (even repeated) regardless of the type of the
  provided value.
  If an undefined PROVIDER_NAME is used in the provider_template, this will nack during configuration.
  If this is empty, only the value of the first provider will be used as the resulting value.
  */
  string provider_template = 4;
}
// [Deprecated] -  all usages of this message are deprecated
message JsonValueList {
  repeated JsonValue values = 1;
}

// [Deprecated] - all usages of this message are deprecated
message JsonValue {
  oneof json_val {
    JsonNode node = 1;
    ValueProvider value_provider = 2;
    JsonValueList list = 3;
  }
}
// [Deprecated] - all usages of this message are deprecated
message JsonKeyValue {
  // PARTIALLY IMPLEMENTED
  // if empty, the value will be parsed as json and replace the entire
  // previously-parsed json value --> this part is only needed for gRPC
  // and thus not implemented yet
  string key = 1;
  JsonValue value = 2;
}

// [Deprecated] - all usages of this message are deprecated
// Represents a typed JSON structure
message JsonNode {
  // if keys repeat, the latest one replaces any earlier values associated 
  // with that key.
  //
  // repeated list, rather than a map, to have ordering to allow for merge
  // semantics within the data plane, for example:
  // - gRPC input uses special empty string for input key to set entire body
  // - gRPC wants to replace a certain field in parsed body from GraphQL arg
  repeated JsonKeyValue key_values = 1;
}

// [Deprecated] - use RequestTransform instead.
// Defines a configuration for generating outgoing requests for a resolver.
message RequestTemplate {
  // Use this attribute to set request headers to your REST service. It consists of a
  // map of strings to value providers. The string key determines the name of the
  // resulting header, the value provided will be the value.
  //
  // at least need ":method" and ":path"
  map<string, ValueProvider> headers = 1;

  // Use this attribute to set query parameters to your REST service. It consists of a
  // map of strings to value providers. The string key determines the name of the
  // query param, the provided value will be the value. This value is appended to any
  // value set to the :path header in `headers`.
  // 
  // Interpolation is done in envoy rather than the control plane to prevent escaped
  // character issues. Additionally, we may be providing values not known until
  // the request is being executed (e.g., graphql parent info).
  map<string, ValueProvider> query_params = 2;

  // implementation specific, gRPC will want gRPC message and struct to instantiate
  JsonValue outgoing_body = 3;
}