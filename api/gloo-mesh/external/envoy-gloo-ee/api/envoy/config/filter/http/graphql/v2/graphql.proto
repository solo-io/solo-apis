syntax = "proto3";

package envoy.config.filter.http.graphql.v2;

option go_package = "github.com/solo-io/solo-apis/pkg/api/envoy-gloo-ee/api/envoy/config/filter/http/graphql/v2";

option java_package = "io.envoyproxy.envoy.config.filter.http.graphql.v2";
option java_outer_classname = "GraphQLFilterProto";
option java_multiple_files = true;

import "google/protobuf/empty.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/external/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "github.com/solo-io/solo-apis/api/gloo-mesh/external/envoyproxy/data-plane-api/envoy/config/core/v3/grpc_service.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/external/envoyproxy/data-plane-api/envoy/config/core/v3/http_uri.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/external/envoyproxy/data-plane-api/envoy/config/core/v3/extension.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

import "github.com/solo-io/solo-apis/api/gloo-mesh/external/envoyproxy/data-plane-api/envoy/config/core/v3/base.proto";

// used to reference into json structures by key(s)
message PathSegment {
    oneof segment {
        option (validate.required) = true;
        string key = 1 [(validate.rules).string = {min_len: 1}];
        uint32 index = 2;
    }
}

// In the future we may add support for regex and subgroups
message ValueProvider {

    message GraphQLArgExtraction {
        // The argument name to fetch. The argument value fetched
        // will have a type from the schema that we validate in envoy.
        // If the name is invalid, returns the zero-value primitive or null.
        string arg_name = 1;
        // Optional: fetches the value in the argument selected at this key.
        // If the key is invalid, returns the zero-value primitive or null.
        repeated PathSegment path = 2;
    }
    
    // Does not do type coercion, but instead if the type does not match the
    // expected primitive type we throw an error.
    // In the future we may add support for type coercion.
    message GraphQLParentExtraction {
        // Fetches the value in the graphql parent at this key. The value will
        // always be accepted since the parent object is not strongly-typed.
        // If the key is invalid, returns null.
        repeated PathSegment path = 1;
    }

    message TypedValueProvider {
       
        // if empty, defaults to string. similar to typeUrl in other envoy config
        enum Type {
            STRING = 0;
            INT = 1;
            FLOAT = 2;
            BOOLEAN = 3;
        }
        // Type that the value will be coerced into. 
        // For example if the extracted value is "9", and type is INT,
        // this value will be cast to an int type.
        Type type = 1;
        oneof val_provider {
            // Fetches the request/response header's value. If not found, uses empty string
            string header = 2;
            // inline value, use as provided rather than extracting from another source
            string value = 3;
        }
    }
    
    oneof provider {
        // type inferred from schema, no need to provide it.
        GraphQLArgExtraction graphql_arg = 1;
        TypedValueProvider typed_provider = 2;        
        // Fetch value from the graphql_parent of the current field.
        GraphQLParentExtraction graphql_parent = 3;
    }

    // If non-empty, the template to interpolate the extracted value into.
    // For example, if the string is /api/pets/{}/name and the extracted value 123 is the pet
    // ID will then the extracted value is /api/pets/123/name
    // Use {} as the interpolation character (even repeated) regardless of the type of the
    // provided value.
    string provider_template = 4;
}

message JsonKeyValue {
    message JsonValueList {
        repeated JsonValue values = 1;
    }
    
    message JsonValue {
        oneof json_val {
            JsonNode node = 1;
            ValueProvider value_provider = 2;
            JsonValueList list = 3;
        }
    }
    
 
    // PARTIALLY IMPLEMENTED
    // if empty, the value will be parsed as json and replace the entire
    // previously-parsed json value --> this part is only needed for gRPC
    // and thus not implemented yet
    string key = 1;
    JsonValue value = 2;
}

// Represents a typed JSON structure
message JsonNode {
    // if keys repeat, the latest one replaces any earlier values associated 
    // with that key.
    //
    // repeated list, rather than a map, to have ordering to allow for merge
    // semantics within the data plane, for example:
    // - gRPC input uses special empty string for input key to set entire body
    // - gRPC wants to replace a certain field in parsed body from GraphQL arg
    repeated JsonKeyValue key_values = 1;
}

// Defines a configuration for generating outgoing requests for a resolver.
message RequestTemplate {
    // Use this attribute to set request headers to your REST service. It consists of a
    // map of strings to value providers. The string key determines the name of the
    // resulting header, the value provided will be the value.
    //
    // at least need ":method" and ":path"
    map<string, ValueProvider> headers = 1;

    // Use this attribute to set query parameters to your REST service. It consists of a
    // map of strings to value providers. The string key determines the name of the
    // query param, the provided value will be the value. This value is appended to any
    // value set to the :path header in `headers`.
    // 
    // Interpolation is done in envoy rather than the control plane to prevent escaped
    // character issues. Additionally, we may be providing values not known until
    // the request is being executed (e.g., graphql parent info).
    map<string, ValueProvider> query_params = 2;

    // implementation specific, gRPC will want gRPC message and struct to instantiate
    oneof outgoing_body {
      // json representation of outgoing body.
      // empty string key can be used to signal parsing the value as json and using it
      // as the whole json body.
      JsonNode json = 3;
      
      // Other idea for the future:
      // Apply a template to the body
      //InjaTemplate body = 4;
    }
}

// NOT IMPLEMENTED
// Defines a response transformation template.
message ResponseTemplate {
    // modify json as it came back before execution. we're not sure what the
    // use cases here might be, hence doing in a follow up.
    // 
    // Theoretical use cases:
    // - snake to camel case
    // - renaming fields (why?) aliasing is handled in graphql execution.cc

    // // Upserts the fields by key name.
    // map<string, JsonNode> fields = 1;
}

message RESTResolver {
    config.core.v3.HttpUri server_uri = 1;
    // configuration used to compose the outgoing request to a REST API
    RequestTemplate request_transform = 2;
    // pre-execution engine transformations 
    // 
    // Request flow: GraphQL request -> request_transform (instantiate REST request) ->
    // REST API resp -> pre_execution_transform -> execution engine -> 
    // complete GraphQL field response
    //
    //ResponseTemplate pre_execution_transform = 3;
    string span_name = 4;
}

// NOT IMPLEMENTED
// Resolve an abstract type (union or interface) to a real type.
// When implemented, this message will be a field in the Resolution message.
message AbstractTypeResolver {
  // TODO: add me
}

// NOT IMPLEMENTED
// When we'll support prepared queries, this will be the type containing the
// query.
message Query { envoy.config.core.v3.DataSource query = 1; }

message QueryMatcher {
  message FieldMatcher {
    // Object type. For example, Query.
    string type = 1;
    // Field with in the object.
    string field = 2;
  }

  oneof match { FieldMatcher field_matcher = 1; }
}

// This is the resolver map for the schema.
// For each Type.Field, we can define a resolver.
// if a field does not have resolver, the default resolver will be used.
// the default resolver takes the field with the same name from the parent, and
// uses that value to resolve the field. if a field with the same name does not
// exist in the parent, null will be used.
message Resolution {
  // Match an object type and field
  QueryMatcher matcher = 1;
  // The resolver to use.
  envoy.config.core.v3.TypedExtensionConfig resolver = 2;
}
// Filter Listener config. Empty as the filter must be configured on the route
// level.
message GraphQLConfig {}

// Filter Route config. Routes that have this config will execute graphql
// queries, and will not make it to the router filter. i.e. this filter will
// terminate the request for these routes.
message GraphQLRouteConfig {
  // Schema to use in string format.
  envoy.config.core.v3.DataSource schema = 1;
  // Do we enable introspection for the schema? general recommendation is to
  // disable this for production and hence it defaults to false.
  bool enable_introspection = 2;
  // The resolver map to use to resolve the schema.
  repeated Resolution resolutions = 3;
  // In the future, we will support persistent queries, this will be a map of
  // query id to query.
  //    map<string, Query> presistent_queries = 3;
  // when we support persistent queries, we may want to use them exclusivly, for
  // predictable operations. (i.e. no surprise mega query from a client). bool
  // only_persistent_queries = 4;

  // key is either:
  // Type
  // or
  // Type.Field where the latter takes precedence.
  // ??consider  Type and Type.Field **MUST** be in the schema ??
  // missing resolvers will yield error in the response
}
