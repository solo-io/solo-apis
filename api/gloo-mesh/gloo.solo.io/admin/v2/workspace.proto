syntax = "proto3";
package admin.gloo.solo.io;
option go_package = "github.com/solo-io/solo-apis/pkg/api/admin.gloo.solo.io/v2";

import "github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/common/v2/selectors.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/common/v2/status.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

// `Workspace` describes a logical grouping of Kubernetes namespaces within the clusters that are part of 
// a virtual mesh. Workspace can be treated as a boundary for configuration and service discovery. 
// The specification describes how to select namespaces or/and clusters for a given workspace.
// 
// The workspace-wide settings such as `importFrom`, `exportTo` are configured in the `WorkspaceSettings`
// object. Refer to the `WorkspaceSettings` documentation for details.
//
// The following example creates the `web` workspace that selects all workload clusters and all namespaces
// within those clusters to be part of the workspace.
// ```yaml
// apiVersion: admin.gloo.solo.io/v2
// kind: Workspace
// metadata:
//   name: web
//   namespace: gloo-mesh
// spec:
//   workloadClusters:
//     - name: "*"
//       namespaces:
//       - name: "*"
// ```
//
// The following configuration creates the `web` workspace that selects the `web` namespace from all workload
// clusters that have the label of `region: us-east` to be part of the workspace. Refer to the `KubernetesCluster`
// documentation for examples on how to label your KubernetesCluster resource.
// ```yaml
// apiVersion: admin.gloo.solo.io/v2
// kind: Workspace
// metadata:
//   name: web
//   namespace: gloo-mesh
// spec:
//   workloadClusters:
//     - selector:
//         region: us-east
//       namespaces:
//         - name: web
// ```
//
// The following example creates the `policy` namespace that does NOT have any workload clusters.
// This workspace also has the `gloo.solo.io/global` label which other workspaces
// can use to import this workspace by label in their `WorkspaceSettings` resource.
// ```yaml
// apiVersion: admin.gloo.solo.io/v2
// kind: Workspace
// metadata:
//   name: policy
//   namespace: gloo-mesh
//   labels:
//     gloo.solo.io/global: 'true'
// ```
//
// The example below creates the `backend` workspace that select any namespace that starts with `ns1` in `cluster1`
// and any namespace that starts with `ns2` in `cluster2`. It has the `gloo.solo.io/exportToGateway` label,
// which other workspaces can use to import this workspace by label in their `WorkspaceSettings` resource.
// Refer to the `KubernetesCluster` documentation for examples on how to name your KubernetesCluster resource.
// ```yaml
// apiVersion: admin.gloo.solo.io/v2
// kind: Workspace
// metadata:
//   name: backend
//   namespace: gloo-mesh
//   labels:
//     gloo.solo.io/exportToGateway: tier1
//     team: backend
// spec:
//   workloadClusters:
//     - name: cluster1
//       namespaces:
//         - name: ns1*
//     - name: cluster2
//       namespaces:
//         - name: ns2*
// ```
//
message WorkspaceSpec {

    // Optional: Select workload clusters and namespaces for the workload clusters that are part of the workspace.
    // When this is not specified, the workspace contains no workload clusters.
    repeated ClusterSelector workload_clusters = 2;
}

// Select clusters and namespaces for a workspace
message ClusterSelector {
    // Optional: Name of the cluster to select.
    // Use * to match name patterns in multiple clusters name.
    string name = 1;

    // Optional: Include workload clusters in the workspace by using a selector.
    // The selector matches the selector values in the KubernetesCluster resource on the management cluster.
    // Selector is a map of {key,value} pairs. A single {key,value} in the selector
    // map is equivalent to an element of labelRequirements, whose key field is "key", the
    // operator is "In", and the values array contains only "value". The requirements are ANDed.
    map<string, string> selector = 2;

    // Select the namespaces in the cluster(s) to include in the workspace. If you do not select any namespaces, the workspace is empty and results in an error.
    repeated NamespaceSelector namespaces = 4;

    
    // Optional: Enable configuration from this workload cluster. (default: true unless explicitly enabled for any selected clusters or namespaces)
    bool config_enabled = 5;

    // Select namespaces for the selected cluster(s)
    message NamespaceSelector {
        // Name of the namespace to select.
        // Can use * to match name patterns in multiple namespaces.
        // Note: When this field is used in conjunction with "labels", both conditions are ANDed together.
        string name = 1;

        // Optional: Enable configuration from this namespace. (default: true unless explicitly enabled for any selected clusters or namespaces)
        bool config_enabled = 2;

        // Optional: Select groups of namespaces via labels.
        // Leaving this field empty will NOT select all namespaces, but rather be ignored.
        // Note: When this field is used in conjunction with "name", both conditions are ANDed together.
        map<string, string> labels = 3;
    }
}

// reflects the status of the workspace
message WorkspaceStatus {

    .common.gloo.solo.io.GenericContextStatus generic = 1;

    // The workspacesettings object configuring this workspace.
    .common.gloo.solo.io.ObjectReference workspace_settings = 2;

    // Clusters that this workspace selects. These cluster objects contain the namespaces that the workspace owns within them.
    repeated SelectedCluster clusters = 3;

    // Represents a cluster that gloo mesh successfully associates to a workspace based on the WorkspaceSpec.
    message SelectedCluster {
        // Name of a cluster that this workspace selects
        string name = 1;

        // Namespaces inside the cluster that this workspace owns.
        repeated string namespaces = 2;
    }

    // gvk -> private/export/import reference
    map<string, SourceType> resources = 4;

    // policy resource counts in this workspace by type (security, trafficcontrol, resilience, observability)
    map<string, int32> policy_counts = 5;

    // destination resource counts in this workspace by type (k8s service, virtual destination, external service)
    map<string, int32> destination_counts = 6;

    // list of workspaces imported into this workspace
    repeated string imported_workspaces = 7;

    message SourceType {
        Imported imported = 1;
        Exported exported = 2;
        Private private = 3;
    }

    message Imported {
        repeated .common.gloo.solo.io.ObjectReference object_references = 1;
    }

    message Exported {
        repeated .common.gloo.solo.io.ObjectReference object_references = 1;
    }

    message Private {
        repeated .common.gloo.solo.io.ObjectReference object_references = 1;
    }
}
