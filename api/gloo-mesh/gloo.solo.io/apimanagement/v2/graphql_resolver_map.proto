syntax = "proto3";
package apimanagement.gloo.solo.io;
option go_package = "github.com/solo-io/solo-apis/pkg/api/apimanagement.gloo.solo.io/v2";

import "github.com/solo-io/skv2/api/core/v1/core.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/common/v2/http_matchers.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/common/v2/selectors.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/common/v2/status.proto";

import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";

import "github.com/solo-io/solo-apis/api/gloo-mesh/external/cue/encoding/protobuf/cue/cue.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all)  = true;
option (extproto.clone_all) = true;

// The GraphQLResolverMap Resource contains a mapping from types to fields to
// resolutions. For example, for a schema with type `Query` and field `GetName`
// ```graphql
//  type Query {
//    GetName: String
//  }
// ```
//  you can configure a resolver for the `GetName` field as follows:
//  ```yaml
//  types:
//    Query:
//      fields:
//        GetName:
//          <insert resolver config>
//  ```
message GraphQLResolverMapSpec {

  // Map of GraphQL types to field resolutions.
  // The key must match the GraphQL type name and is case-sensitive.
  // Every field under GraphQL root types (Query, Mutation) must have a resolver defined.
  map<string, Resolution> types = 1;

  message Resolution {
    // Map of GraphQL fields for the type to resolutions.
    // The key must match the GraphQL field name and is case-sensitive.
    // Fields that don't have resolvers will use the GraphQL default resolver,
    // which returns the field in the parent object with the same name as the GraphQL field.
    map<string, Resolvers> fields = 1;

    message Resolvers {
      // List of resolvers.
      // Currently, only one the first resolver configuration will be respected and a warning will be thrown
      // if more than one resolver is in the list.
      repeated Resolver resolvers = 1;

      /*
        (kdorosh) - In the future, the `variables` field could be part of a `oneof`, where we delegate to
        an external GraphQLVariables resource. This may be a rare use case, but one we can potentially
        implement given customer demand.
       */

      // Variables that can be used as a part of transformations for this field's resolution.
      // The key is the name of the variable, which is directly used in the transformation.
      // The value defines where the variable value is extracted from on the GraphQL request.
      map<string, Extraction> variables = 2;

      message Resolver {
        // Not yet supported by the data plane
        // This is included as a place holder
        // But should not be used as it serves no function yet.

        oneof optional_matcher {
          .common.gloo.solo.io.HTTPRequestMatcher http_matcher = 1;
        }


        // The resolver to use.
        oneof resolver {
          // Resolves values by making a HTTP/2 request to a HTTP/REST destination.
          RestResolver rest_resolver = 3;

          /* todo(graphql-team)

          // Resolves fields by making a gRPC call to a gRPC destination.
          GrpcResolver grpc_resolver = 2;

          // Resolves fields via a mocked response that is configured.
          MockResolver mock_resolver = 3;
          */
        }

        // Use a transformation on extracted variables to transform the upstream REST response.
        // By default, the transformation is empty and the destination response is left as is before
        // being passed into the GraphQL execution engine.
        VariableTransformation response_transform = 10;

        message RestResolver {
          // Required: list of destinations which point to destinations containing
          // a RESTful service. Must provide at least one destination.
          //
          // (Note: only the first destination will be used)
          repeated .common.gloo.solo.io.DestinationReference destinations = 1;

          // Configuration to template a HTTP request to fetch JSON from a destination REST service.
          // This includes configuration such as setting headers dynamically on the HTTP request, configuring query_params,
          // and setting the body for the request to the destination.
          RequestTemplate request = 2;

          // Variables that can be used in this field's response transform.
          // The key is the name of the variable, which is directly used in the transformation.
          // The value defines where the variable value is extracted from on the GraphQL REST response.
          map<string, RESTVariable> variables = 3;

          // The span name for the upstream REST request, used for tracing.
          // If left empty or not set, the request span name will be set to the upstream cluster name.
          google.protobuf.StringValue span_name = 4;

          message RequestTemplate {
            // Sets the headers on the request to the REST destination.
            // This includes setting HTTP :path header.
            // This is a map of HTTP Header name to a transformation which determines the Header value.
            // The transformation must result in a string value, or an error will be sent back to the client.
            // By default, the :method header is set to GET. If `body` is set, then the :method is POST. This can be overridden
            // by setting the :method header manually below.
            map<string, VariableTransformation> headers = 1;

            // Sets the query parameters on the request to the REST destination.
            // The transformation must result in a string value, or an error will be sent back to the client.
            map<string, VariableTransformation> query_params = 2;

            // Sets the outgoing body to the upstream REST destination.
            // By default, the body is empty.
            VariableTransformation body = 3;
          }

          message RESTVariable {
            // Only available on response transformations
            // Extract the value from the GraphQL HTTP response header. The extracted value is a string.
            // If this Extraction is used in a place where response headers are not available, an error
            // will be thrown during configuration time.
            string response_header = 5;
          }
        }
      }
    }
  }
}

// Note: This is not it's own separate Resource, but this message is used in Route Table and GraphQL Stitched Schema.
// The ExecutableSchema contains all the information needed to execute a schema by itself.
// The execution can be done locally via resolver maps, or on a remote GraphQL instance, via a graphql server.
message ExecutableSchema {
  // Required: Reference to the GraphQLSchema object which contains the [GraphQL SDL](https://graphql.org/learn/schema/)
  // defining this GraphQL schema.
  .core.skv2.solo.io.ClusterObjectRef schema_ref = 1;

  message ClusterObjectRefList {
    repeated .core.skv2.solo.io.ClusterObjectRef refs = 1;
  }

  oneof executable_schema {
    // Configuration to delegate resolving this GraphQL request to an external GraphQL server, which can be
    // another GlooGraphQL instance or another instance of a GraphQL server. The external GraphQL server must
    // be compliant with the [June 2018 GraphQL specification](https://spec.graphql.org/June2018/).
    GraphQLServer server = 3;

    // List of references to GraphQLResolverMap resources. GraphQLResolverMaps
    // contain a mapping from GraphQL fields to resolver configuration, so that those fields can be resolved
    // locally by this GraphQL-envoy instance.
    // Order of the references listed below does matter as resolver maps listed first
    // will be given priority over later ones when tie-breaking field resolver configurations.
    ClusterObjectRefList resolver_map_refs = 4;
  }

  message GraphQLServer {
    // List of destinations that can server GraphQL requests. The external GraphQL server must
    // be compliant with the [June 2018 GraphQL specification](https://spec.graphql.org/June2018).
    // Though this is a list, only the first referenced destination will be used until fail-over and load balancing
    // is supported between multiple GraphQL destinations.
    repeated .common.gloo.solo.io.DestinationReference graphql_servers = 1;

    // Declare variables that are used in variable transformations in the fields below for the GraphQL request to a remote server.
    // The keys to this map are the name of the variables. See the variable transformations specifically
    // for how to reference these variables.
    map<string, RequestExtraction> variables = 2;

    // map of header name to a transformation on extracted variables which are declared
    // in the `variables` field.
    // The transformation must result in a string value, or an error will be sent back to the client.
    map<string, VariableTransformation> headers = 3;

    // map of query parameter name to a transformation on extracted variables which are declared
    // in the `variables` field.
    // The transformation must result in a string value, or an error will be sent back to the client.
    map<string, VariableTransformation> query_params = 4;

    // The span name for the remote GraphQL request, used for tracing.
    // If left empty or not set, the request span name will be set to the upstream cluster name.
    string span_name = 5;

    message RequestExtraction {
      oneof extraction {
        // Extract the value from envoy dynamic metadata. The extracted value is an object.
        DynamicMetadataExtraction dynamic_metadata = 1;

        // Extract the value from the GraphQL HTTP request header. The extracted value is a string.
        // If the header doesn't exist, an empty string will be used.
        string request_header = 2;

        // Assigns the variable to a JSON value specified here.
        google.protobuf.Value json_value = 3 [(.solo.io.cue.opt).disable_openapi_validation = true];
      }
    }
  }
}

// Variable transformations are used to take variables that were declared
// and transform them using a transformation. The simplest transformation is the `variable`
// transform, which passes through the value of a single variable. For more complex transforms,
// the `jq` transformation can be used to form more complicated JSON values.
message VariableTransformation {

  // Transformations on variable extractions.
  oneof transformation  {

    // The name of a variable declared in the `variables` field. The value of the variable
    // is returned with no transformation.
    string variable = 1;

    // The [jq](https://stedolan.github.io/jq/manual/) filter which is used to provide a value.
    // variables defined in `variables` can be used in the jq filter via regular jq variable syntax.
    // For example, a variable named "userIdHeader" can be used in a jq filter as `$userIdHeader`
    // Jq filters must only result in one value, or an error will be sent back to the client.
    // For example, for the input `[1,2,3]`, the jq filter `.[]` is not a valid jq filter as it results
    // in multiple jq results. However, the jq filter '. | join(",")' is valid as it results in one result: "1,2,3".
    // Refer to the [jq manual](https://stedolan.github.io/jq/manual/) for jq syntax and tips.
    // --- Using variables ---
    // Variables that are declared in the `variables` field are available at the top level of the input JSON object to the
    // jq filter.
    // For example, if the following variables have been declared:
    // ```yaml
    // variables:
    //   userIdHeader:
    //     request_header: x-user-id
    //   resolverResultVar:
    //     resolver_result: {}
    // ```
    // then the input object to the `jq` filter would be
    // ```json
    // {
    //  "userIdHeader": <x-user-id header value from GraphQL request>,
    //  "resolverResultVar": { .. the resolver result .. }
    // }
    // ```
    // --- Using a jq filter ---
    // Given the following input object to the `jq` transformation, we can use a filter to transform the values.
    // ```json
    // {
    //  "userIdHeader": "john_doe123",
    //  "resolverResultVar": { "data": {"name": "John Doe"} }
    // }
    // ```
    // If the `jq` filter is defined as
    // ```
    // "User: " + .userIdHeader + ", Name: " + .resolverResultVar.data.name
    // ```
    // the result of the jq transformation would be
    // ```
    // "User john_doe123, Name: John Doe"
    // ```
    string jq = 2;
  }
}

// Extractions are used to assign values to variables from various sources of data in the GraphQL
// request or response. This includes HTTP headers, Envoy Dynamic Metadata, or GraphQL query-specific args.
message Extraction {
  oneof extraction_type {
    // Extract the value from the GraphQL HTTP request header. The extracted value is a string.
    // If the header doesn't exist, an empty string will be used.
    string request_header = 1;
    // Extract the value from envoy dynamic metadata. The extracted value is an object.
    DynamicMetadataExtraction dynamic_metadata = 2;
    // Assigns the variable to the parent object
    google.protobuf.Empty graphql_parent = 3;
    // Assigns the variable to the GraphQL Argument with this name.
    // If this name doesn't exist, the variable is `null`
    string graphql_arg = 4;
    // Assigns the variable to the GraphQL resolver result.
    // If this Extraction is used in a place where the resolver result is not available, an error
    // will be thrown during configuration time.
    google.protobuf.Empty resolver_result = 5;
    // Assigns the variable to a JSON value specified here
    google.protobuf.Value json_value = 6 [(.solo.io.cue.opt).disable_openapi_validation = true];

    // In the future, we may want to allow for nested extractions along with transformations.
    // See https://github.com/solo-io/gloo-mesh-enterprise/pull/4354#discussion_r919055587 for discussion
    //          Extraction variables = 8;

  }

  // In the future, we may want to also include a Transformation here so we can declare the value of the variables
  // to some transformed value. see https://github.com/solo-io/gloo-mesh-enterprise/pull/4354#discussion_r919055587 for discussion.
  // Transformation transformation = 9;

}

message DynamicMetadataExtraction {
  // The envoy dynamic metadata namespace that the data lives in. If the namespace doesn't exist in the
  // metadata, the extraction yields null
  string metadata_namespace = 1;
  // The key under the envoy dynamic metadata namespace that the data lives under.
  // If the key doesn't exist in the namespace, the extraction yields null
  string key = 2;
}

message GraphQLResolverMapStatus {
  .common.gloo.solo.io.GenericGlobalStatus global = 1;

  // The status of the resource in each workspace that it exists in.
  map<string, .common.gloo.solo.io.WorkspaceStatus> workspaces = 2;

  // Name of Workspace that owns the GraphQLResolverMap
  .common.gloo.solo.io.OwnerWorkspace owner_workspace = 3;
}
