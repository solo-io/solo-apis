syntax = "proto3";
package apimanagement.gloo.solo.io;
option go_package = "github.com/solo-io/solo-apis/pkg/api/apimanagement.gloo.solo.io/v2";

import "github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/common/v2/selectors.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/common/v2/status.proto";

import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

import "github.com/solo-io/solo-apis/api/gloo-mesh/external/cue/encoding/protobuf/cue/cue.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all)  = true;
option (extproto.clone_all) = true;

// The GraphQLSchema resource is responsible for providing the schema definition
// in GraphQL SDL format. It also has logging options for logging sensitive request-related information.
// And schema extension configuration such as custom type definitions.
message GraphQLSchemaSpec {
  // Required: GraphQL Schema Definition. Root-level Query and Mutation types are supported, while the Subscription type is not
  // yet supported.
  string schema_definition = 1;


  /* todo(graphql-team)
  // Extensions such as Custom Types, which are contained in their own CRD.
  repeated .common.gloo.solo.io.ObjectReference schema_extensions = 3;
  */


}

message GraphQLSchemaStatus {
  .common.gloo.solo.io.GenericGlobalStatus global = 1;

  // The status of the resource in each workspace that it exists in.
  map<string, .common.gloo.solo.io.WorkspaceStatus> workspaces = 2;

  // Name of Workspace that owns the route table
  .common.gloo.solo.io.OwnerWorkspace owner_workspace = 3;
}
