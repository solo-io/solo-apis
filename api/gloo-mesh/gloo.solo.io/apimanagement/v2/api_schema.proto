syntax = "proto3";
package apimanagement.gloo.solo.io;
option go_package = "github.com/solo-io/solo-apis/pkg/api/apimanagement.gloo.solo.io/v2";

import "github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/common/v2/selectors.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/common/v2/status.proto";

import "github.com/solo-io/solo-apis/api/gloo-mesh/external/cue/encoding/protobuf/cue/cue.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;


// The ApiSchema resource represents an the schema of an API
// served by a Destination (Service, ExternalService).
// ApiSchemas are typically created by Gloo Mesh Discovery running on the agent.
// They can also be created manually by users.
// The ApiSchema type is used to represent different types of API schema specification languages:
// - OpenAPI
// - gRPC
// - GraphQL
message ApiSchemaSpec {

  // the type of schema this resource contains
  oneof schema_type {
    // OpenAPI schema
    OpenAPISchema openapi = 1;
    // gRPC schema
    GrpcSchema grpc = 2;
    // GraphQL schema
    GraphQLSchema graphql = 3;
  }

  // the destination that serves this API
  .common.gloo.solo.io.DestinationReference service = 4;

  // a complete openapi schema describing the API
  message OpenAPISchema {
    // inline string containing the OpenAPI schema
    string inline_string = 1;

  }

  // a complete grpc schema describing the API
  message GrpcSchema {
    // Protobuf Descriptors that represent the gRPC services provided by the API.
    // this is a serialized base64-encoded google.protobuf.FileDescriptorSet
    bytes descriptors = 1;

  }

  // The GraphQLSchema resource is responsible for providing the schema definition
  // in GraphQL SDL format. It also has logging options for logging sensitive request-related information.
  // And schema extension configuration such as custom type definitions.
  message GraphQLSchema {
    // Required: GraphQL Schema Definition. Root-level Query and Mutation types are supported, while the Subscription type is not
    // yet supported.
    string schema_definition = 1;

  }

  /* todo(API-team)
  // Extensions such as Custom Types, which are contained in their own CRD.
  repeated .common.gloo.solo.io.ObjectReference schema_extensions = 5;
  */
}

message ApiSchemaStatus {
  .common.gloo.solo.io.GenericGlobalStatus global = 1;

  // The status of the resource in each workspace that it exists in.
  map<string, .common.gloo.solo.io.WorkspaceStatus> workspaces = 2;

  // Name of Workspace that owns the graqphql schema
  .common.gloo.solo.io.OwnerWorkspace owner_workspace = 3;
}
