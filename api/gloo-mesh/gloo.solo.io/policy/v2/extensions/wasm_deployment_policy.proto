syntax = "proto3";
package extensions.policy.gloo.solo.io;
option go_package = "github.com/solo-io/gloo-mesh-enterprise/pkg/api/extensions.policy.gloo.solo.io/v2";

import "github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/common/v2/references.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/common/v2/selectors.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/common/v2/status.proto";

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/external/istio.io/api/networking/v1alpha3/envoy_filter.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

// WasmDeploymentPolicy is used to deploy Wasm filters to workloads which have injected (sidecars) or are standalone proxies (gateways).
// WasmDeploymentPolicies are applied at the *Workload* level.
message WasmDeploymentPolicySpec {

    // select the workloads where access logs will be collected.
    // if left empty, will apply to all workloads in the workspace.
    repeated .common.gloo.solo.io.WorkloadSelector apply_to_workloads = 1;

    // The configuration of the specifying the WASM filters to apply to the selected workloads.
    Config config = 2;

    message Config {

        // Specify WASM filter parameters.
        repeated WasmFilter filters = 2;

        // Weight is used to determine the order of WASM Filters when applying
        // multiple WasmDeployments to a single workload.
        // Deployed WASM filters will be sorted in order of
        // highest to lowest weight. WasmDeployments with equal weights will be
        // sorted non-deterministically.
        // Note that all WASM Filters are currently inserted just before the Envoy router filter
        // in the HTTP Connection Manager's HTTP Filter Chain.
        uint32 weight = 3;


        // Specify the WASM Filter to deploy.
        message WasmFilter {

            // Several options are available for providing a source of the WASM filter file.
            // An option must be specified in order to execute the WasmDeployment.
            oneof filter_source {

                // Select `local_path_source` to deploy the filter from a file accessible
                // to the workload proxy. Note that Gloo Mesh cannot verify
                // whether the target workload proxy containers contain the given path.
                // If filters do not load, please inspect the sidecar proxy logs.
                // TODO(ilackarms): see if we can somehow verify the filter exists in the proxy container and surface that on the WasmDeployment status
                string local_path_source = 1;

                // Select `http_uri_source` to deploy the filter from an HTTP/S URI accessible
                // to the workload proxy. Note that Gloo Mesh cannot verify
                // whether the target workload proxy containers have HTTP access the given URI.
                // If filters do not load, please inspect the sidecar proxy logs.
                // TODO(ilackarms): see if we can somehow verify the filter exists in the proxy container and surface that on the WasmDeployment status
                // TODO(ilackarms): we may need to provide options for customizing the Cluster given to envoy along with the HTTP Fetch URI. currently Gloo Mesh will create a simple plaintext HTTP cluster from the Host/Port specified in the URI.
                UriSource http_uri_source = 2;

                // fetch the image from a [WASM OCI Registry](https://webassemblyhub.io/)
                // Images can be built and pushed to registries using `meshctl` and `wasme`.
                WasmImageSource wasm_image_source = 3;
            }

            // Filter/service configuration used to configure or reconfigure a filter
            // (proxy_on_configuration).
            // Several options are available for providing a source of filter config (dynamic and static).
            oneof filter_config_source {

                // Provide configuration as a static
                // `google.protobuf.Struct` is serialized as JSON before
                // passing it to the plugin. `google.protobuf.BytesValue` and
                // `google.protobuf.StringValue` are passed directly without the wrapper.
                .google.protobuf.Any static_filter_config = 4;

                // Provide configuration from a dynamic configuration source.
                // This is used to connect proxies to a user-provided configuration server
                // rather than using the WasmDeployment CR to update filter configuration.
                // NOTE: Not currently implemented. This field serves as a placeholder.
                // passing it to the plugin. `google.protobuf.BytesValue` and
                // `google.protobuf.StringValue` are passed directly without the wrapper.
                // TODO(ilackarms): implement with dynamic filter config source (FCDS) https://github.com/solo-io/solo-apis/api/gloo-mesh/external/envoyproxy/envoy/issues/7867
                string dynamic_filter_config = 8;
            }

            // The `root id` must match the `root id` defined inside the filter.
            // If the user does not provide this field, Gloo Mesh will attempt to pull the image
            // and set it from the `filter_conf` contained in the image config.
            // Note that if the `filter_source` is not set to `wasm_image_source`, this field is required.
            string root_id = 5;

            // An ID which will be used along with a hash of the wasm code
            // (or the name of the registered Null VM plugin) to determine which VM will be used to load the WASM filter.
            // All filters on the same proxy which use the same `vm_id` and code within will use the same VM.
            // May be left blank. Sharing a VM between plugins can reduce memory utilization and make sharing of data easier which may have security implications.
            string vm_id = 6;

            // The specific config generation context to which to attach the filter. Istio
            // generates envoy configuration in the context of a gateway,
            // inbound traffic to sidecar and outbound traffic from sidecar.
            // Uses the Istio default (`ANY`).
            .istio.networking.v1alpha3.EnvoyFilter.PatchContext filter_context = 7;

            // The filter in the Envoy HTTP Filter Chain immediately before which the WASM filter will be
            // inserted.
            // Defaults to `envoy.router`.
            string insert_before_filter = 9;


            // Specify options for fetching WASM Filters from an HTTP URI.
            message UriSource {

                // The HTTP URI from which to fetch the filter.
                string uri = 1;

                // Required. The Sha256 Checksum of the filter binary (will be verified by the proxy).
                string sha = 2;
            }

            // Specify options for fetching WASM Filters from a [WASM-compatible OCI Registry](https://webassemblyhub.io/).
            // Images can be built and pushed to registries using `meshctl` and `wasme`.
            message WasmImageSource {

                // The full tag of the wasm image. It must include the registry address at the beginning, e.g. "webassemblyhub.io/ilackarms/helloworld:v0.1".
                string wasm_image_tag = 1;
            }

        }

    }
}

// reflects the status of the WasmDeploymentPolicy
message WasmDeploymentPolicyStatus {

    .common.gloo.solo.io.GenericGlobalStatus global = 1;

    // The status of the resource in each workspace that it exists in.
    map<string, .common.gloo.solo.io.WorkspaceStatus> workspaces = 2;

    // Workloads selected by the policy
    // DEPRECATED: Use selected_workload_refs instead
    repeated .common.gloo.solo.io.ObjectReference selected_workloads = 3 [deprecated=true];

    repeated .common.gloo.solo.io.WorkloadReference selected_workload_refs = 4;
}
