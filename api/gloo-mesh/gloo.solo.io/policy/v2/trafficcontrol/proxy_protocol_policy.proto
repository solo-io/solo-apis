syntax = "proto3";
package trafficcontrol.policy.gloo.solo.io;
option go_package = "github.com/solo-io/solo-apis/pkg/api/trafficcontrol.policy.gloo.solo.io/v2";

import "github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/common/v2/selectors.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/common/v2/approval_state.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/common/v2/port.proto";

// ProxyProtocolPolicy is used to enable proxy protocol for gateway listener(s).
//
// For more details on ProxyProtocol, visit:
// https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt.
//
// ```
// apiVersion: trafficcontrol.policy.gloo.solo.io/v2
// kind: ProxyProtocolPolicy
// metadata:
//   name: my-policy
//   namespace: bookinfo
// spec:
//   config:
//     enabledProxyProtocol: true
//   applyToListeners:
//   - virtualGateway:
//       name: virtual-gateway
//       namespace: bookinfo
//       cluster: my-cluster
//     port:
//       number: 443
// ```
message ProxyProtocolPolicySpec {
  message ListenerSelector {
    .common.gloo.solo.io.ObjectSelector virtual_gateway = 1;

    .common.gloo.solo.io.PortSelector port = 2;
  }

  message Config { bool enable_proxy_protocol = 1; }

  // Required: The VirtualGateway(s) and Port(s) to which this policy applies.
  repeated ListenerSelector apply_to_listeners = 1;

  // Required: The configuration to apply to the listener.
  Config config = 2;
}

// reflects the status of the ProxyProtocolPolicy
message ProxyProtocolPolicyStatus {
  // The most recent generation observed in the the object's metadata.
  // If the `observedGeneration` does not match `metadata.generation`, Gloo Mesh
  // has not processed the most recent version of this object.
  int64 observed_generation = 1;

  // Whether the resource has been accepted as valid and processed in the Gloo
  // Mesh config translation.
  .common.gloo.solo.io.ApprovalState state = 2;
}
