syntax = "proto3";

package internal.gloo.solo.io;

import "extproto/ext.proto";
import "github.com/solo-io/skv2/api/core/v1/core.proto";

option go_package = "github.com/solo-io/solo-apis/pkg/api/internal.gloo.solo.io/v2";

option (extproto.equal_all) = true;
option (extproto.clone_all) = true;
option (extproto.hash_all) = true;

/*
    When certificates are issued, Istio-controlled pods need to be bounced (restarted) to ensure they pick up the
    new certificates due to [this issue](https://github.com/istio/istio/issues/22993).
    The certificate issuer will create a PodBounceDirective containing the namespaces and labels
    of the pods that need to be bounced in order to pick up the new certs.
*/
message PodBounceDirectiveSpec {

  // A list of Kubernetes pods to bounce (delete and cause a restart)
  // when the certificate is issued.
  // This will include the control plane pods as well as any Pods
  // which share a data plane with the target mesh.
  repeated PodSelector pods_to_bounce = 1;

  // pods that will be restarted.
  message PodSelector {
    // The namespace in which the pods live.
    string namespace = 1;

    // Any labels shared by the Pods.
    map<string, string> labels = 2;

    // Wait for this number of replacement pods to reach be fully ready before
    // deleting the next set of selected Pods.
    // This is used to ensure the control plane pods are allowed to restart
    // before sidecars and gateways are restarted.
    uint32 wait_for_replicas = 3;

    // Wait for the control plane to have synced all root cert configmaps in data plane namespaces before
    // bouncing these Pods.
    RootCertSync root_cert_sync = 4;

    // RootCertSync describes values in a secret and configmap which must be equal in order for a Pod to be bounced.
    message RootCertSync {
      .core.skv2.solo.io.ObjectRef secret_ref = 1;

      string secret_key = 2;

      .core.skv2.solo.io.ObjectRef config_map_ref = 3;

      string config_map_key = 4;
    }
  }

  // Reference to the mesh on which this cert is being issued for
  .core.skv2.solo.io.ObjectRef mesh_ref = 2;
}


/*
    PodBounceDirectiveStatus reports the status for stateful Pod bounces (when bouncing pods requires waiting for readiness).
*/
message PodBounceDirectiveStatus {

  // The most recent generation observed in the the PodBounceDirective metadata.
  // If the `observedGeneration` does not match `metadata.generation`, the Gloo Mesh agent has not processed the most
  // recent version of this IssuedCertificate.
  int64 observed_generation = 1;

  // The current state of the IssuedCertificate workflow, reported by the agent.
  State state = 2;

  // Possible states in which an PodBounceDirective can exist.
  enum State {
    // The PodBounceDirective has yet to be picked up by the agent.
    PENDING = 0;

    // The agent has decided on which pods to bounce, and it's working on it.
    BOUNCING_PODS = 1;

    // Processing the pod bounce directive workflow failed.
    FAILED = 3;

    // Successfully bounced all pods
    FINISHED = 4;
  }

  string error = 3;

  // A list of Kubernetes pods to bounce (delete and cause a restart)
  // when the certificate is issued.
  // This will include the control plane pods as well as any Pods
  // which share a data plane with the target mesh.
  repeated BouncedPodSet pods_bounced = 4;

  // A set of pods that were restarted.
  message BouncedPodSet {
    // The names of the pods that were bounced for the corresponding selector specified in `PodBounceDirectiveSpec.PodSelector.labels`.
    repeated string bounced_pods = 1;
  }

}
