syntax = "proto3";
package networking.enterprise.mesh.gloo.solo.io;

option go_package = "github.com/solo-io/gloo-mesh-enterprise/oss-imported/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1beta1";

import "github.com/solo-io/skv2/api/core/v1/core.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/common/v1/status.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/enterprise/networking/v1beta1/route.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/networking/v1/traffic_policy.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/networking/v1/applied_policies.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.clone_all) = true;

import "github.com/solo-io/solo-apis/api/gloo-mesh/external/cue/encoding/protobuf/cue/cue.proto";

/*
    A `VirtualHost` is used to configure routes. It is selected by a `VirtualGateway`, and may be attached
    to more than one gateway. The `VirtualHost` contains the top-level configuration and route options, such
    as domains to match against, and any options to be shared by its routes. Routes can send traffic directly
    to a service, or can delegate to a `RouteTable` to perform further routing decisions.
*/
message VirtualHostSpec {

    // The list of domains (i.e.: matching the `Host` header of a request) that belong to this virtual host.
    // Note that the wildcard will not match the empty string. e.g. “*-bar.foo.com” will match “baz-bar.foo.com”
    // but not “-bar.foo.com”. Additionally, a special entry “*” is allowed which will match any host/authority header.
    // Only a single virtual host on a gateway can match on “*”. A domain must be unique across all
    // virtual hosts on a gateway or the config will be invalidated by Gloo
    // Domains on virtual hosts obey the same rules as [Envoy Virtual Hosts](https://github.com/envoyproxy/envoy/blob/master/api/envoy/api/v2/route/route.proto)
    repeated string domains = 1;

    // The list of HTTP routes define routing actions to be taken for incoming HTTP requests whose host header matches
    // this virtual host. If the request matches more than one route in the list, the first route matched will be selected.
    // If the list of routes is empty, the virtual host will be ignored by Gloo.
    repeated .networking.enterprise.mesh.gloo.solo.io.Route routes = 2;

    // Route table options contain additional configuration to be applied to all traffic served by the route table.
    // Some configuration here can be overridden by Route Options.
    // OutlierDetection and TrafficShift isn't supported on the route level.
    VirtualHostOptions options = 3;
}

message VirtualHostOptions {
    .networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy traffic_policy = 1;

    //     TODO: Move into traffic policy anything that goes on the route level and would be conceivably used for East/West traffic
    //    .networking.enterprise.mesh.gloo.solo.io.filters.Waf waf = 2;
}

message VirtualHostStatus {
    // The most recent generation observed in the the VirtualHost metadata.
    // If the `observedGeneration` does not match `metadata.generation`,
    // Gloo Mesh has not processed the most recent version of this resource.
    int64 observed_generation = 1;

    // The state of the overall resource.
    .common.mesh.gloo.solo.io.ApprovalState state = 7;

    // Any errors found while processing this generation of the resource.
    repeated string errors = 2;

    // Any warnings found while processing this generation of the resource.
    repeated string warnings = 3;

    // List of each VirtualGateway which has selected this VirtualHost
    repeated .core.skv2.solo.io.ObjectRef attached_virtual_gateways = 4;

    // List of RouteTables that this Route table delegates to
    repeated .core.skv2.solo.io.ObjectRef selected_route_tables = 5;

    // The set of TrafficPolicies that have been applied to this Destination.
    // {{/* Note: validation of this field disabled because it slows down cue tremendously*/}}
    repeated .networking.mesh.gloo.solo.io.AppliedTrafficPolicy applied_traffic_policies = 6 [(.solo.io.cue.opt).disable_openapi_validation = true];

}
