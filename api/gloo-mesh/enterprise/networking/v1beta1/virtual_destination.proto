syntax = "proto3";
package networking.enterprise.mesh.gloo.solo.io;

option go_package = "github.com/solo-io/gloo-mesh-enterprise/oss-imported/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1beta1";

import "github.com/solo-io/skv2/api/core/v1/core.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/discovery/v1/destination.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/common/v1/selectors.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/common/v1/status.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/networking/v1/applied_policies.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/networking/v1/status.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/networking/v1/traffic_policy.proto";

import "github.com/solo-io/solo-apis/api/gloo-mesh/external/cue/encoding/protobuf/cue/cue.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.clone_all) = true;

/*
    A VirtualDestination creates a new hostname to which client workloads can send requests.
    The hostname abstracts over a set of underlying Destinations and provides failover functionality between them.
    Failover order is determined by either an explicitly defined priority (`static`), or a list of locality directives (`localized`).

    Each Destination backing the VirtualDestination must be configured with a
    [TrafficPolicy's outlier detection]({{< versioned_link_path fromRoot="/reference/api/github.com.solo-io.gloo-mesh-enterprise.oss-imported.api.networking.v1.traffic_policy/" >}}).
    Currently this feature only supports Destinations backed by Istio.
*/
message VirtualDestinationSpec {

    // The DNS name of the VirtualDestination. Must be unique within the service mesh instance.
    string hostname = 1;

    // The port on which the VirtualDestination listens.
    Port port = 2;

    // The VirtualDestination can be made visible to either a single Mesh, all Meshes grouped in a VirtualMesh or a subset of Meshes grouped in a VirtualMesh.
    // Caveat: this VirtualDestination will be exported to the meshes for all backing destinations, regardless of what's specified here.
    oneof export_to {

        // The VirtualMesh that this VirtualDestination will be visible to.
        .core.skv2.solo.io.ObjectRef virtual_mesh = 3;

        // The Meshes that this VirtualDestination will be visible to. If multiple meshes are specified, they must
        // all belong to the same VirtualMesh.
        // Caveat: this VirtualDestination will be exported to the meshes for all selected backing destinations regardless of what's specified here.
        MeshList mesh_list = 4;
    }

    // Configuration that determines failover ordering.
    oneof failover_config {

        // Failover priority is determined by an explicitly provided static ordering of Destinations.
        BackingDestinationList static = 5;

        // Failover priority is determined by the localities of the traffic source and Destination.
        LocalityConfig localized = 6;
    }

    // VirtualDestination port information.
    // Contains information about which port to listen on, as well as which backend port to target.
    message Port {

        // REQUIRED: Port number which the VirtualDestination will listen on.
        uint32 number = 1;

        // OPTIONAL: Protocol of the requests sent to the VirtualDestination. Must be one of `HTTP`, `HTTPS`, `GRPC`, `HTTP2`, `MONGO`, `TCP`, `TLS`.
        // Default: HTTP
        string protocol = 2;

        // REQUIRED: Name of the target_port which will be used
        // All backing services must have the name or number specified by this field.
        oneof target_port {
            // If the target_name is specified, the VirtualDestination will attempt to find a port by this name on all backing services
            string target_name = 3;

            // If the target_number is specified, the VirtualDestination will attempt to find a port by this number on all backing services
            uint32 target_number = 4;
        }
    }

    // A list of Mesh references.
    message MeshList {
        repeated .core.skv2.solo.io.ObjectRef meshes = 1;
    }

    // Failover priority is determined by an explicitly provided static ordering of Destinations.
    // When a Destination in the list is in an unhealthy state (as determined by its configured outlier detection),
    // requests sent to the VirtualDestination will be routed to the next healthy Destination in the list.
    message BackingDestinationList {

        // The list of Destinations backing the VirtualDestination, ordered by decreasing priority.
        // All Destinations must be either in the same Mesh or in Meshes that are grouped under a common VirtualMesh.
        // Required, cannot be omitted.
        repeated VirtualDestinationBackingDestination destinations = 1;
    }

    // Enables failover based on locality. When a client workload makes a request to the VirtualDestination, Gloo Mesh will
    // first try to direct traffic to the Destination instance geographically closest to the client workload. If outlier
    // detection detects that the closest Destination is in an unhealthy state, requests will instead be routed
    // to a Destination in one of the localities specified in the `to` field.
    message LocalityConfig {

        // Selectors for the Destinations backing the VirtualDestination.
        // All Destinations must be either in the same mesh or in meshes that are grouped under a common VirtualMesh.
        // Currently only one Destination per cluster can be selected, more than one per cluster will be considered invalid.
        // Required, cannot be omitted.
        repeated .common.mesh.gloo.solo.io.DestinationSelector destination_selectors = 1;

        // Directives describing the locality failover behavior.
        repeated LocalityFailoverDirective failover_directives = 2;

        message LocalityFailoverDirective {

            // The locality of the client workload.
            Locality from = 1;

            // The list of Destination localities that can be routed to if the instance local to the client workload is not available.
            repeated Locality to = 2;
        }

        // A geographic location defined by a region, zone, and sub-zone.
        message Locality {

            // The locality's region.
            string region = 1;

            // The locality's zone. Currently this value is not used.
            string zone = 2;

            // The locality's sub-zone. Currently this value is not used.
            string sub_zone = 3;
        }

        // Outlier detection to determine the health of the selected services.
        // If not set will default to the following:
        // consecutiveGatewayErrors: 10
        // consecutive5XXErrors: 10
        // interval: 5s
        // baseEjectionTime: 120s
        networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.OutlierDetection outlier_detection = 3;
    }
}

// A backing Destination.
// Has to be at the top level, as cue does not function well with referencing nested messages.
message VirtualDestinationBackingDestination {

    // Platform specific Destinations.
    oneof type {

        // Reference to a Kubernetes Service.
        .core.skv2.solo.io.ClusterObjectRef kube_service = 1;
    }
}

message VirtualDestinationStatus {

    // The most recent generation observed in the the VirtualDestination metadata.
    // If the observedGeneration does not match `metadata.generation`, Gloo Mesh has not processed the most
    // recent version of this resource.
    int64 observed_generation = 1;

    // The set of TrafficPolicies that have been applied to this Virtual Destination.
    // {{/* Note: validation of this field disabled because it slows down cue tremendously*/}}
    repeated .networking.mesh.gloo.solo.io.AppliedTrafficPolicy applied_traffic_policies = 7 [(.solo.io.cue.opt).disable_openapi_validation = true];

    // The set of AccessPolicies that have been applied to this Virtual Destination.
    repeated discovery.mesh.gloo.solo.io.DestinationStatus.AppliedAccessPolicy applied_access_policies = 8;

    // The state of the overall resource, will only show accepted if it has been successfully
    // applied to all exported to Meshes.
    .common.mesh.gloo.solo.io.ApprovalState state = 2;

    // The status of the VirtualDestination for each Mesh to which it has been exported to.
    map<string, .networking.mesh.gloo.solo.io.ApprovalStatus> meshes = 3;

    // The Destinations that comprise this VirtualDestination.
    repeated SelectedDestinations selected_destinations = 4;

    // Any errors found while processing this generation of the resource.
    repeated string errors = 5;

    // The set of TrafficPolicies that reference subsets on this VirtualDestination as a traffic shift.
    repeated discovery.mesh.gloo.solo.io.RequiredSubsets required_subsets = 6;

    message SelectedDestinations {

        // Reference to the Destination object.
        .core.skv2.solo.io.ClusterObjectRef ref = 1;

        // The platform-specific destination that the Destination object represents.
        VirtualDestinationBackingDestination destination = 2;
    }
}
