syntax = "proto3";
package networking.enterprise.mesh.gloo.solo.io;
option go_package = "github.com/solo-io/gloo-mesh-enterprise/oss-imported/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1beta1";

import "github.com/solo-io/solo-apis/api/gloo-mesh/external/cue/encoding/protobuf/cue/cue.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/networking/v1/ratelimit/rate_limit.proto";
import "github.com/solo-io/solo-apis/api/rate-limiter/v1alpha1/ratelimit.proto";
import "google/protobuf/wrappers.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.clone_all) = true;


// A `RateLimitConfig` describes the ratelimit server policy.
message RateLimitServerConfigSpec {

  // This object allows users to specify rate limit policies using the raw configuration formats
  // used by the server and the client (Envoy). When using this configuration type, it is up to
  // the user to ensure that server and client configurations match to implement the desired behavior.
  // The server (and the client libraries that are shipped with it) will ensure that there are no
  // collisions between raw configurations defined on separate `RateLimitConfig` resources.
  message Raw {

    // The descriptors that will be applied to the server.
    // {{/* Note: validation of this field disabled because it slows down cue tremendously*/}}
    repeated .ratelimit.api.solo.io.Descriptor descriptors = 1 [(.solo.io.cue.opt).disable_openapi_validation = true];

    // The set descriptors that will be applied to the server.
    // {{/* Note: validation of this field disabled because it slows down cue tremendously*/}}
    repeated .ratelimit.api.solo.io.SetDescriptor set_descriptors = 2 [(.solo.io.cue.opt).disable_openapi_validation = true];
  }

  // Each `RateLimitConfig` is an instance of one specific configuration type.
  // Currently, only raw configuration is supported, but going forward we are planning on adding
  // more high-level configuration formats to support specific use cases.
  oneof config_type {
    // Define a policy using the raw configuration format used by the server and the client (Envoy).
    Raw raw = 1;
  }

}

// The current status of the `RateLimitServerConfig`.
message RateLimitServerConfigStatus {

  // The most recent generation observed in the the RateLimitServerConfig metadata.
  // If the `observedGeneration` does not match `metadata.generation`,
  // Gloo Mesh has not processed the most recent version of this resource.
  int64 observed_generation = 1;

  // Any errors found while processing this generation of the resource.
  repeated string errors = 2;

  // Any warnings found while processing this generation of the resource.
  repeated string warnings = 3;

  // The current state of the RateLimitServerConfig.
  State state = 4;

  // Possible states of a RateLimitServerConfig resource reflected in the status by Gloo Mesh while processing a resource.
  enum State {
    // Resources are in a Pending state before they have been processed by Gloo Mesh.
    PENDING = 0;

    // Resources are in a Accepted state when they are valid and have been applied successfully to
    // the Gloo Mesh configuration.
    ACCEPTED = 1;

    // Resources are in an Invalid state when they contain incorrect configuration parameters,
    // such as missing required values or invalid resource references.
    // An invalid state can also result when a resource's configuration is valid
    // but conflicts with another resource which was accepted in an earlier point in time.
    REJECTED = 2;

    // Resources are in a Failed state when they contain correct configuration parameters,
    // but the server encountered an error trying to synchronize the system to
    // the desired state.
    FAILED = 3;
  }

}