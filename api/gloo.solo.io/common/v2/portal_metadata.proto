syntax = "proto3";

package common.gloo.solo.io;

import "extproto/ext.proto";

option go_package = "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2";

option (extproto.equal_all) = true;
option (extproto.clone_all) = true;
option (extproto.hash_all) = true;


// With [Portal](https://docs.solo.io/gloo-gateway/main/portal/) installed as part of Gloo Platform,
// you can use route tables to bundle together individual routes into an API product.
// When the Portal resource selects your route table, Gloo automatically generates an OpenAPI specification for the API product,
// which includes all of the routes. You can use this `PortalMetadata` setting to customize details about your API product,
// such as by providing a title, description, terms of service, licensing, and lifecycle management information.
// After you deploy a frontend application for your portal, your end users can review the metadata in the portal to help them use your API products.
message PortalMetadata {
  // This field is required to enable the Portal feature.
  // Group APIs from multiple route tables together as an API product in the portal.
  // For example, you might have separate route tables that route to different `v1` and `v2` versions of your `billing` services that have their own OpenAPI specs.
  // By setting the `apiProductId` metadata to the same `billing-api` value in each route table,
  // the [/apis](https://docs.solo.io/gloo-gateway/main/portal/openapi/redocly/#tag/APIs/operation/ListAPIs) endpoint in the portal server returns the same `apiProduct` in the response.
  // Then, these APIs are grouped together and shown as a single `billing` API product with multiple `v1` and `v2` versions in the frontend portal for your end users to discover and use.
  string api_product_id = 1;
  // Optional: Give a name for the API product to display in the frontend portal. If omitted, the `apiProductId` value is used as the display name.
  // If `api_product_display_name` is set to a different value in each route table that has the same `apiProductId` value,
  // then the `api_product_display_name` value from the route table with the oldest creation timestamp is used.
  string api_product_display_name = 2;
  // This field is required to enable the Portal feature.
  // The version of the API in context of the api product.
  // You cannot have multiple `apiVersion` values for the same `apiProductId` value, and you must set `apiProductId` to use `apiVersion`.
  // For example, if you have two route tables that both set `apiProductId` to `billing-api`, then one route table can also set `apiVersion` to `v1` and the other to `v2`.
  // But both route tables cannot set the `apiVersion` to `v1`.
  string api_version = 3;
  // The title of the openAPI specification for this API.
  string title = 4;
  // The description of the openAPI specification for this API.
  string description = 5;
  // The terms of service of the openAPI specification for this API.
  string terms_of_service = 6;
  // The contact information of the openAPI specification for this API.
  string contact = 7;
  // The license of the openAPI specification for this API.
  string license = 8;
  // Describes the current lifecycle stage of the API.
  string lifecycle = 9;
  // Provide key-value pairs of any custom metadata that you want to show end users in the frontend portal for this API product.
  // In particular, you might provide information about your API lifecycle management policies,
  // such as `phase=supported`, `phase=deprecated`, `compatibility=backwards`, or other product information.
  // Furthermore, the key-value pairs are added to the API Usage & Analytics data for incoming requests to this API product.
  map<string, string> custom_metadata = 10;
}
