syntax = "proto3";

package common.gloo.solo.io;

import "extproto/ext.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/approval_state.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/references.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/selectors.proto";

option go_package = "github.com/solo-io/solo-apis/client-go/common.gloo.solo.io/v2";

option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

message Status {
  State State = 1;

  // A map of ApprovalState to the number of workspaces in this condition, e.g.,
  // "Accepted" -> 2
  // "Pending" -> 1
  map<string, uint32> workspace_conditions = 2;
}

message State {
  // The most recent generation observed in the object's metadata.
  // If the `observedGeneration` does not match `metadata.generation`, Gloo Mesh
  // has not processed the most recent version of this object.
  int64 observed_generation = 1;

  // Whether the resource has been accepted as valid and processed in the Gloo
  // Mesh config translation.
  ApprovalState approval = 2;

  // Additional information about the current state of the resource.
  string message = 3;
}

// $hide_from_docs
message Report {
  // The state of the resource in each cluster that receives its configuration.
  map<string, State> clusters = 1;
}

// Indicates selected routes on status messages.
message RouteReference {
  // The name of the route
  string route_name = 1;

  // The index of the route on the route table
  int32 route_index = 2;

  // The route table containing the route
  ObjectReference route_table = 3;
}

message AppliedDestinationPortPolicies {
  // List of applied destination port policies
  repeated DestinationPolicyReference policies = 1;

  message DestinationPolicyReference {
    // the port on the destination object that the policy applies to
    int32 destination_port = 1;

    // the kind of destination object that the policy applies to
    DestinationKind destination_kind = 2;

    // The reference to the policy
    ObjectReference policy = 3;
  }
}

message AppliedRoutePolicies {
  // List of applied route policies
  repeated RoutePolicyReference policies = 1;

  message RoutePolicyReference {
    // The name of the route that the policy is applied to
    string route_name = 1;

    // The index of the route on the route table
    int32 route_index = 2;

    // The reference to the policy
    ObjectReference policy = 3;

    // The reference to the root route table.
    // Only relevant if this is a delegated route table.
    ObjectReference root_route_table = 4;
  }
}

message AppliedWorkloadPolicies {
  // Policies on the workload
  repeated ObjectReference policies = 1;
}
