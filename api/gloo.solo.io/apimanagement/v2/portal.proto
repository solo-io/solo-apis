syntax = "proto3";

package apimanagement.gloo.solo.io;

import "encoding/protobuf/cue/cue.proto";
import "extproto/ext.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/selectors.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/references.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/status.proto";
import "google/protobuf/struct.proto";

option go_package = "github.com/solo-io/solo-apis/client-go/apimanagement.gloo.solo.io/v2";

option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;


// The Portal resource configures a developer portal that you can use to securely expose your APIs to end users.
// Before you create the Portal, you bundle the APIs that you want to expose into a route table.
// Then, you prepare a usage plan to control access to your APIs
// by applying rate limiting and external auth policies to the routes in the route table.
// For more information, see the [Portal docs](https://docs.solo.io/gloo-mesh-gateway/latest/portal/).
//
// The following examples show a Portal resource that refers to usage plans
// that are named in the rate limit server config's descriptors, as well as a corresponding
// `RateLimitPolicy` and `ExternalAuthPolicy` that apply to a route in a route table.
//
// ```yaml
// apiVersion: apimanagement.gloo.solo.io/v2
// kind: Portal
//    metadata:
//      name: public-portal
//      namespace: gloo-mesh-addons
// spec:
//    portalBackendSelectors:
//      - selector:
//          labels:
//            app: gloo-mesh-portal-server
//    usagePlans:
//      - name: bronze
//        displayName: "Bronze Plan"
//        description: "A basic usage plan"
//      - name: silver
//        description: "A better usage plan"
//      - name: gold
//        description: "The best usage plan!"
//    apis:
//      - name: productpage
//          namespace: bookinfo
//          cluster: cluster-1
//      - labels:
//            app: reviews
// ```
//
// ```yaml
// apiVersion: admin.gloo.solo.io/v2
// kind: RateLimitServerConfig
//    metadata:
//      name: usage-plans
//      namespace: gloo-mesh-addons
// spec:
//    destinationServers: [] # omitted, server refs
//    raw:
//      descriptors:
//        - key: usagePlan
//          value: bronze
//          descriptors:
//            - key: userId
//              rateLimit:
//                requestsPerUnit: 50
//                unit: MINUTE
//        - key: usagePlan
//          value: silver
//          descriptors:
//            - key: userId
//              rateLimit:
//                requestsPerUnit: 200
//                unit: MINUTE
//         - key: usagePlan
//           value: gold
//           descriptors:
//             - key: userId
//               rateLimit:
//                 requestsPerUnit: 1000
//                 unit: MINUTE
// ```
//
// ```yaml
// apiVersion: security.policy.gloo.solo.io/v2
// kind: ExtAuthPolicy
// metadata:
//   name: petstore-apiauth
//   namespace: petstore
// spec:
//   applyToRoutes:
//     - route:
//         labels:
//            route: pets
//   config:
//     server:
//       name: ext-auth-server
//       namespace: gloo-mesh-addons
//       cluster: cluster-1
//     glooAuth:
//       configs:
//         - apiKeyAuth:
//             headersFromMetadata:
//               x-solo-plan:
//                 name: plan
//                 required: true
//             k8sSecretApikeyStorage:
//               labelSelector:
//                 auth: api-key
// ```
//
// ```yaml
// apiVersion: trafficcontrol.policy.gloo.solo.io/v2
// kind: RateLimitPolicy
// metadata:
//   name: pets-rate-limit
//   namespace: petstore
// spec:
//   applyToRoutes:
//     - route:
//         labels:
//            route: pets
//   config:
//     ratelimitServerConfig:
//       name: usage-plans
//       namespace: gloo-mesh-addons
//       cluster: cluster-1
//     raw:
//       rateLimits:
//         - actions:
//             - requestHeaders:
//                 descriptorKey: usagePlan
//                 headerName: x-solo-plan
//             - metadata:
//                 descriptorKey: userId
//                 metadataKey:
//                   key: envoy.filters.http.ext_authz
//                   path:
//                     - key: userId
// ```
message PortalSpec {

  // The workloads where an existing portal backend is running.
  repeated .common.gloo.solo.io.WorkloadSelector portal_backend_selectors = 1;

  // A list of route tables with routes to the APIs you want the developer portal to expose.
  // The route table might also have 'portalMetadata' key-value fields that you want to display in the developer portal for end users.
  repeated .common.gloo.solo.io.ObjectSelector apis = 2;

  // The usage plans to control access to the APIs that the developer portal exposes.
  repeated UsagePlan usage_plans = 3;

  // The domains on which this Portal will be served. The Host header received by the
  // Portal Web App will be matched to one of these domains in order to determine which Portal will be served.
  //
  // If you are using the Gateway through which you are exposing the Portal
  // is listening on a port other than 80/443, you should include the port as part of the
  // domain string, e.g. "portal.solo.io:8443".
  //
  // To prevent undefined behavior, creating a Portal whose domain conflicts with
  // an existing Portal will result in the Portal resource being placed into an 'Invalid' state.
  repeated string domains = 4;

  // Settings for controlling the visibility of the Portal's contents.
  // Default visibility for content in the Portal is private.
  // When a Portal is public, individual APIs can be made private, by specifying the labels for private APIs
  // and applying said labels to the route tables that need to be private.
  // When a Portal or its APIs are private, the Portal requires authentication. An external auth policy must be
  // applied to the Portal's route table in order to enable authentication. The external auth policy must use the
  // `idTokenHeader` field with the `id_token` to pass the user's ID token to the Portal.
  // For authentication to work, the `email` claim is required in the `id_token`.
  Visibility visibility = 5;

  // Settings that control the visibility of the Portal's contents.
  message Visibility {
    // If true, all the APIs published in this portal are going to be public (i.e. visible to unauthenticated users);
    // individual APIs can still be made private using the privateAPILabels field.
    // Defaults to false, in which case the privateAPILabels field will have not effect.
    bool public = 1;
    // Custom labels for private APIs. Apply these labels to route tables that need to be private.
    // Has no effect if the public field is set to false in which case all APIs are private.
    map<string, string> privateAPILabels = 2;
  }

  // A `UsagePlan` defined in the Portal resource is a reference to an existing `RateLimitPolicy` and `ExtAuthPolicy` that has been
  // applied to a route table.
  // The values of the descriptor key `usagePlan` in the `RateLimitServerConfig` used by an existing `RateLimitPolicy`
  // must match the `name` of the `UsagePlan` defined in the Portal resource, and will be used to determine which rate limiting
  // and ext auth options are available for this Portal.
  message UsagePlan {
    // Match the names of the usage plans with the descriptors that you defined in the rate limit server config.
    string name = 1;
    // Optional display name for the usage plan to show end users in the developer portal.
    string display_name = 2;
    // Optional description for the usage plan to show end users in the developer portal.
    // You might include information about how to get the plan or what the plan includes and excludes.
    string description = 3;
  }
}

message PortalStatus {
  // The state and workspace conditions of the applied resource.
  .common.gloo.solo.io.Status common = 1;

  string owner_workspace = 2;

  // The number of route tables that are selected by this portal.
  uint32 route_tables_count = 3;

  // The number of ext-auth policies that this portal selects with the usage plans that are defined in the portal resource.
  uint32 ext_auth_policy_count = 4;

  // The number of rate limit policies that this portal selects with the usage plans that are defined in the portal resource.
  uint32 rate_limit_policy_count = 5;

  // The number of portal backends that are selected by this portal.
  uint32 portal_backend_count = 6;
}

message PortalReport {
  map<string, .common.gloo.solo.io.Report> workspaces = 1;

  string owner_workspace = 2;

  // A list of route tables that are selected by this portal.
  repeated .common.gloo.solo.io.ObjectReference selected_route_tables = 3;

  // A list of ext-auth policies selected by this portal.
  repeated .common.gloo.solo.io.ObjectReference selected_ext_auth_policies = 4;

  // A list of rate limit policies selected by this portal.
  repeated .common.gloo.solo.io.ObjectReference selected_rate_limit_policies = 5;

  // A list of portal backends selected by this portal.
  repeated .common.gloo.solo.io.ObjectReference selected_portal_backend = 6;
}
