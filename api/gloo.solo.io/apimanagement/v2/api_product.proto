// $hide_from_docs
syntax = "proto3";

package apimanagement.gloo.solo.io;

option go_package = "github.com/solo-io/solo-apis/client-go/apimanagement.gloo.solo.io/v2";

option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

import "extproto/ext.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/selectors.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/status.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/portal_metadata.proto";
import "github.com/solo-io/skv2/api/core/v1/core.proto";


// ApiProducts attach Portal Metadata to routes exposed by Gloo in order to make them available for inclusion in GP Portals.
// Later, your developer portal displays this information in the end-user facing API documentation.
// PortalMetadata can be attached to Kubernetes Gateway API HTTPRoutes.
// $hide_from_docs
message ApiProductSpec {

  // select routes using the Kubernetes Gateway API standard targetRef https://gateway-api.sigs.k8s.io/geps/gep-713/?h=targetref#policy-targetref-api.
  // This can be used to apply policy to Kubernetes Gateway HTTPRoutes.
  // $hide_from_docs
  .core.skv2.solo.io.PolicyTargetReference target_ref = 1;

  // the metadata to expose in the developer portal
  .common.gloo.solo.io.PortalMetadata portal_metadata = 2;
}

// ApiProductStatus communicates the current state of the ApiProduct.
// $hide_from_docs
message ApiProductStatus {

  // State of the ApiProduct.
  .common.gloo.solo.io.Status state = 1;

  // the number of routes that have been selected by the selector
  uint32 selected_route_count = 2;
}

message ApiProductReport {
  map<string, .common.gloo.solo.io.Report> workspaces = 1;

  // The name of the workspace that owns the ApiProduct schema.
  string owned_by_workspace = 2;
}
