// {{% reuse "conrefs/snippets/policies/ov_outlier_detection.md" %}}
//
// Outlier detection is an important part of building resilient apps.
// An outlier detection policy sets up several conditions,
// such as retries and ejection percentages, that Gloo Mesh uses to determine
// if a service is unhealthy. In case an unhealthy service is detected,
// the outlier detection policy defines how Gloo Mesh removes (ejects) services
// from the pool of healthy destinations to send traffic to.
// For VirtualDestinations, traffic is not sent to deployments that are
// unavailable by default.
// Your apps then have time to recover before they are added back
// to the load-balancing pool and checked again for consecutive errors.
//
// Outlier detection policies are applied at the *Destination* level. For more information, see the
// [outlier detection policy guide]({{< link path="/resiliency/fault-injection/" >}}).
//
// ## Example
//
// ```yaml
// {{% readfile file="/static/content/examples/generated/int/virtual_dest_locality_based_failover/cluster-1/outlier-detection-policy_bookinfo_outlier-detection.yaml" %}}
// ```
syntax = "proto3";

package resilience.policy.gloo.solo.io;

import "extproto/ext.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/references.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/selectors.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/status.proto";
import "google/protobuf/duration.proto";

option go_package = "github.com/solo-io/solo-apis/client-go/resilience.policy.gloo.solo.io/v2";

option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

// OutlierDetectionPolicy is used to configure [outlier detection](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/outlier) on the selected destinations.
// Specifying this field requires an empty `source_selector` because it must apply to all traffic.
// OutlierDetectionPolicies are applied at the *Destination* level.
//
// For VirtualDestinations, traffic will not be sent to deployments that are unavailable by default.
// An OutlierDetectionPolicy will add configuration to also eject a deployment that is returning too many 5xx HTTP status codes.
message OutlierDetectionPolicySpec {

  // Destinations to apply the policy to.
  // If empty, the policy applies to all destinations in the workspace.
  repeated .common.gloo.solo.io.DestinationSelector apply_to_destinations = 1;

  // The details of the OutlierDetectionPolicy to apply to the selected destinations.
  Config config = 2;

  message Config {

    // The number of 5xx errors before a destination is removed from the healthy connection pool. The default is 5.
    uint32 consecutive_errors = 1;

    // The amount of time between analyzing destinations for ejection.
    // Set this value as an integer plus a unit of time, in the format `1h`, `1m`, `1s`, or `1ms`. The value must be at least `1ms`, and defaults to `10s`.
    // For information about the value format, see the [Google protocol buffer documentation](https://protobuf.dev/reference/protobuf/google.protobuf/#duration).
    google.protobuf.Duration interval = 2;

    // The minimum time duration for ejection, or the time when a destination is considered unhealthy and not used for load balancing.
    // Set this value as an integer plus a unit of time, in the format `1h`, `1m`, `1s`, or `1ms`. The value must be at least `1ms`, and defaults to `30s`.
    // For information about the value format, see the [Google protocol buffer documentation](https://protobuf.dev/reference/protobuf/google.protobuf/#duration).
    google.protobuf.Duration base_ejection_time = 3;

    // The maximum percentage of destinations that can be removed from the healthy connection pool at a time.
    // For example, if you have 10 total destinations that the policy selects, and set this value to 50 percent, 5 destinations can be removed at once.
    // At least 1 destination can always be removed, regardless of the value you set. You can set this value between `0` and `100`, with a default of `100`.
    uint32 max_ejection_percent = 4;

  }

}

// The status of the policy after it is applied to your Gloo environment.
message OutlierDetectionPolicyStatus {
  // The state and workspace conditions of the applied resource.
  .common.gloo.solo.io.Status common = 1;

  // The number of destination ports selected by the policy.
  uint32 num_selected_destination_ports = 2;
}

message OutlierDetectionPolicyReport {
  // A list of workspaces in which the policy can apply to workloads.
  map<string, .common.gloo.solo.io.Report> workspaces = 1;

  // A list of destination ports selected by the policy.
  repeated .common.gloo.solo.io.DestinationReference selected_destination_ports = 2;
}
