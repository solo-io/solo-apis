syntax = "proto3";

package resilience.policy.gloo.solo.io;

import "extproto/ext.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/keepalive.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/references.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/selectors.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/status.proto";
import "google/protobuf/duration.proto";

option go_package = "github.com/solo-io/solo-apis/client-go/resilience.policy.gloo.solo.io/v2";

option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

// ConnectionPolicy provides settings to apply low-level settings on selected TCP connections.
message ConnectionPolicySpec {

  // select the destinations where the policy will be applied. If left empty,
  // this will apply to all destinations in the workspace.
  repeated .common.gloo.solo.io.DestinationSelector apply_to_destinations = 1;

  // The details of the low-level network connection settings to apply to the destinations.
  Config config = 2;

  message Config {

    // The low-level TCP connection settings to apply to the destinations selected.
    TCPConfig tcp = 1;

    message TCPConfig {
      // Sets the TCP keep-alive settings to apply to selected destinations.
      .common.gloo.solo.io.TCPKeepalive tcp_keepalive = 1;

      // Sets the maximum allowed connections to the destination host.
      int32 max_connections = 2;

      // Sets the TCP connection timeout. It must be greater than or equal to 1ms.
      // For information about the value format, see the [Google protocol buffer documentation](https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/duration).
      google.protobuf.Duration connect_timeout = 3;
    }
  }
}

// Reflects the status of the ConnectionPolicy.
message ConnectionPolicyStatus {
  .common.gloo.solo.io.GenericGlobalStatus global = 1;

  // The status of the resource in each workspace that it exists in.
  map<string, .common.gloo.solo.io.WorkspaceStatus> workspaces = 2;

  // Destination ports selected by the policy
  repeated .common.gloo.solo.io.DestinationReference selected_destiantion_ports = 3;
}