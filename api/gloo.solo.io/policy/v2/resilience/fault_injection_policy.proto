// {{% reuse "conrefs/snippets/policies/ov_fault_injection.md" %}} Inject faults in a percentage of your requests to test how your app handles the errors.
// By using the policy, you can avoid deleting pods, delaying packets, or corrupting packets.
// Fault specification is part of a VirtualService rule.
//
// Faults include aborts and/or delays.
// * **Aborts** are crash failures, such as HTTP error codes or TCP connection failures.
// * **Delays** are timing failures, such as network latency or overloaded upstreams.
//
// Fault injection policies are applied at the *Route* level. For more information,
// see the [fault injection policy guide]({{< link path="/resiliency/fault-injection/" >}}).
//
// ## Examples 
//
// **Abort**: The following example is for a simple fault injection abort policy
// with a default value for the percentage. No delay is configured.
// ```yaml
// {{% readfile file="static/content/examples/generated/e2e/ingress_fault_injection/cluster-1/fault-injection-policy_bookinfo_faultinjection-basic.yaml" %}}
// ```
//
// **Delay**: The following example is for a simple fault injection delay policy
// with a default value for the percentage. No abort is configured.
// ```yaml
// apiVersion: resilience.policy.gloo.solo.io/v2
// kind: FaultInjectionPolicy
// metadata:
//   name: faultinjection-basic-delay
//   namespace: bookinfo
//   annotations:
//     cluster.solo.io/cluster: $REMOTE_CLUSTER1
// spec:
//   applyToRoutes:
//     - route:
//         labels:
//           route: ratings
//   config:
//     delay:
//       fixedDelay: 5s
// ```
// 
// **Abort and delay**: The following example is for a fault injection policy
// that both delays and aborts requests. Delays and aborts are independent of one another.
// When both are set, both happen, with the delay happening first.
// ```yaml
// apiVersion: resilience.policy.gloo.solo.io/v2
// kind: FaultInjectionPolicy
// metadata:
//   name: faultinjection-basic-abort-and-delay
//   namespace: bookinfo
//   annotations:
//     cluster.solo.io/cluster: $REMOTE_CLUSTER1
// spec:
//   applyToRoutes:
//     - route:
//         labels:
//           route: ratings
//   config:
//     abort:
//       httpStatus: 418
//       percentage: 10
//     delay:
//       percentage: 40
//       fixedDelay: 5s
// ```
syntax = "proto3";

package resilience.policy.gloo.solo.io;

import "extproto/ext.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/selectors.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/status.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/solo-io/solo-apis/client-go/resilience.policy.gloo.solo.io/v2";

option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

// Specifications for the policy.
message FaultInjectionPolicySpec {

  // Routes to apply the policy to.
  // If empty, the policy applies to all routes in the workspace.
  //
  // </br>**Configuration constraints**: Only one fault injection policy can apply to a route. Subsequent policies (sorted by creation time)
  // are ignored and put into a FAILED state.
  repeated .common.gloo.solo.io.RouteSelector apply_to_routes = 1;

  // The details of the fault injection policy to apply to the selected routes.
  //
  // </br>**Implementation notes**: Delays and aborts are independent of one another.
  // When both are set, both happen, with the delay happening first.
  //
  // </br>**Configuration constraints**: A fault injection rule must specify a delay, an abort, or both.
  // +kubebuilder:validation:XValidation:rule="has(self.delay) || has(self.abort)",message="Either config.delay, config.abort, or both must be set."
  Config config = 2;

  // The details of the fault injection policy to apply to the selected routes.
  //
  // </br>**Implementation notes**: Delays and aborts are independent of one another.
  // When both are set, both happen, with the delay happening first.
  //
  // </br>**Configuration constraints**: A fault injection rule must specify a delay, an abort, or both.
  message Config {

    // Delay requests before forwarding them to the upstream service, which emulates various failures such as
    // network issues or overloaded upstream services.
    Delay delay = 1;

    // Abort HTTP request attempts, and return an error code to the traffic source.
    Abort abort = 2;

    // Abort HTTP request attempts and return an error code to the traffic source,
    // giving the impression that the upstream service is faulty.
    message Abort {

      // Required: The HTTP status code to use to abort the request.
      //
      // </br>**Configuration constraints**: The status code must be in the range 200 - 599, inclusive.
      //
      // +kubebuilder:validation:Required
      // +kubebuilder:validation:Minimum=200
      // +kubebuilder:validation:Maximum=599
      int32 http_status = 1;

      // Percentage of requests to be aborted. If omitted, all requests are aborted.
      //
      // </br>**Configuration constraints**:<ul>
      // <li>The value must be 0.0 or in the range 0.0001 - 100.0, inclusive.</li>
      // <li>For information about the value format,
      // see the [Google protocol buffer documentation](https://protobuf.dev/reference/protobuf/google.protobuf/#double-value).</li></ul>
      //
      // +kubebuilder:validation:Maximum=100
      // +kubebuilder:validation:XValidation:rule="self == 0.0 || self >= 0.0001",message="The value must be 0.0 or in the range 0.0001 - 100.0, inclusive."
      google.protobuf.DoubleValue percentage = 2;
    }

    // Delay requests before forwarding them to the upstream service, which emulates various failures such as
    // network issues or overloaded upstream services.
    message Delay {
      // Required: Add a delay of a fixed duration before sending the request.
      // 
      // </br>**Configuration constraints**:<ul>
      // <li>The value must be an integer or decimal value and a preferred unit, or multiple of these concatenated.
      // Examples: `1m`, `1h`, `1.5h`, `1s500ms`</li>
      // <li>The value cannot have granularity smaller than one millisecond.</li>
      // <li>The value must be at least 1ms.</li>
      // <li>For information about the value format,
      // see the [ParseDuration documentation](https://pkg.go.dev/time#ParseDuration).</li></ul>
      // 
      // +kubebuilder:validation:Required
      // +kubebuilder:validation:XValidation:rule="duration(self) >= duration('1ms')",message="The value must be at least 1ms."
      // +kubebuilder:validation:XValidation:rule="!self.contains('ns') && !self.contains('us') && !self.contains('Î¼s')",message="The value cannot have granularity smaller than one millisecond."
      // +kubebuilder:validation:XValidation:rule="(duration(self)-duration('1ns')).getMilliseconds() == duration(self).getMilliseconds()-1",message="The value cannot have granularity smaller than one millisecond."
      google.protobuf.Duration fixed_delay = 1;

      // Delay only a certain percentage of requests. If omitted, all requests are delayed.
      //
      // </br>**Configuration constraints**:<ul>
      // <li>The value must be 0.0 or in the range 0.0001 - 100.0, inclusive.</li>
      // <li>For information about the value format,
      // see the [Google protocol buffer documentation](https://protobuf.dev/reference/protobuf/google.protobuf/#double-value).</li></ul>
      //
      // +kubebuilder:validation:Maximum=100
      // +kubebuilder:validation:XValidation:rule="self == 0.0 || self >= 0.0001",message="The value must be 0.0 or in the range 0.0001 - 100.0, inclusive."
      google.protobuf.DoubleValue percentage = 2;
    }

  }
}

// The status of the policy after it is applied to your Gloo environment.
message FaultInjectionPolicyStatus {
  // The common status of the object
  .common.gloo.solo.io.Status common = 1;

  // The number of routes selected by the policy.
  uint32 num_selected_routes = 2;
}

// The resources that the policy selects after it is successfully applied.
message FaultInjectionPolicyReport {
  // The state of the resource in each workspace that receives its configuration.
  map<string, .common.gloo.solo.io.Report> workspaces = 1;

  // A list of references to all routes selected by the policy.
  repeated .common.gloo.solo.io.RouteReference selected_routes = 2;
}
