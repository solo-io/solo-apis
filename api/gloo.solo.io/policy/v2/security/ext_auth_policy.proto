// Set up an external authentication and authorization to protect the workloads in your cluster.
// For example, you can set up basic, passthrough, API key, OAuth, OPA, or LDAP authentication.
//
// To enforce external auth, each workspace must have an external auth server.
// You can select which external auth service is used to enforce the policy by configuring an ExtAuthServer resource. 
// If you don't configure this resource, then the policy uses the default ext-auth-service that was created for you at installation.
// If you did not enable the external-auth-service during installation, the policy cannot be enforced.
// For more information, see the [ExtAuthServer API reference]({{% link path="/reference/api/ext_auth_server/" %}}).
// 
// The external auth policies tell the ext-auth-service how to enforce authentication and authorization of matching traffic.
// You can match traffic by selecting routes or destinations.
// If you don't select any routes or destinations, an external auth policy is applied to all destinations by default.
// You cannot apply more than one external auth policy to the same route or destination.
// Note that when you create the policy with a destination selector, only Kubernetes services can be specified in the
// `applyToDestination` section. Virtual destinations or external services are not supported.
// 
// For more information, see the [external auth guides]({{% link path="/security/external-auth/" %}}).
//
// </br>**Example**: The following basic example refers to the Kubernetes service of the default ext-auth-service that you got during installation,
// but you can also use a virtual destination that points to an external auth service instead.
// ```yaml
// {{% readfile file="/static/content/examples/generated/int/ext_auth_destinations/cluster-1/ext-auth-policy_bookinfo_basic-auth.yaml" %}}
// ---
// {{% readfile file="/static/content/examples/generated/int/ext_auth_external_service/cluster-1/ext-auth-server_bookinfo_default-server.yaml" %}}
// ```
//
// For more complex examples, see the [guide]({{% link path="/security/external-auth/" %}}) for the type of external auth policy that you want to apply.
syntax = "proto3";

package security.policy.gloo.solo.io;

import "extproto/ext.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/references.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/selectors.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/status.proto";
import "github.com/solo-io/solo-apis/api/gloo/enterprise.gloo/v1/auth_config.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/approval_state.proto";

option go_package = "github.com/solo-io/solo-apis/client-go/security.policy.gloo.solo.io/v2";

option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

// Specifications for the policy.
message ExtAuthPolicySpec {

  // Routes to apply the policy to.
  // If empty, the policy does not apply to any routes in the workspace.
  //
  // </br>**Configuration constraints**: Only one external auth policy can apply to a route.
  // Subsequent policies (sorted by creation time) are ignored and put into a FAILED state.
  repeated .common.gloo.solo.io.RouteSelector apply_to_routes = 1;

  // Destinations to apply the policy to.
  //
  // </br>**Implementation notes**:
  // <li>Only Kubernetes services can be specified. Virtual destinations or external services are not supported.</li>
  // <li>If empty and `applyToRoutes` is unset, the policy applies to all destinations in the workspace.</li>
  // <li>If empty and `applyToRoutes` is set, the policy does not apply to any destinations in the workspace.</li></ul>
  //
  // </br>**Configuration constraints**: Only one external auth policy can apply to a destination.
  // Subsequent policies (sorted by creation time) are ignored and put into a FAILED state.
  repeated .common.gloo.solo.io.DestinationSelector apply_to_destinations = 2;

  // The details of the external auth policy to apply to the selected routes and/or destinations.
  Config config = 3;

  // The details of the external auth policy to apply to the selected routes or destinations.
  //
  // +kubebuilder:validation:XValidation:rule="!has(self.disable)",message="The disable field is currently unsupported"
  message Config {

    oneof auth_type {
      // <!-- Set to true to disable auth on the route.-->
      // **DEPRECATED**: This field is currently unsupported and cannot be used.
      bool disable = 1 [deprecated = true];

      // Configure the selected route or destination with auth options provided by one or more Gloo `ext-auth-service` Kubernetes services.
      enterprise.gloo.solo.io.AuthConfigSpec gloo_auth = 2;

      // Configure the selected route or destination with auth options provided by your own custom external auth server.
      CustomAuth custom_auth = 3;
    }

    // Reference to the ExtAuthServer to use for this policy.
    // To create an ExtAuthServer resource, see [External auth server setup](../../../security/external-auth/server/#setup).
    //
    // </br>**Implementation notes**:<ul>
    // <li>The ExtAuthServer must be in the same workspace as this ExtAuthPolicy. Be sure to select the appropriate ExtAuthServer to use,
    // which might be in a different cluster and namespace than the policy.</li>
    // <li>If this field is omitted, Gloo generates a default ExtAuthServer configuration.
    // To review the default values for an ExtAuthServer, see the [API reference](../ext_auth_server/).</li></ul>
    //
    // </br>**Configuration constraints:**<ul>
    // <li>Routes on a single gateway must share a single ExtAuthServer.</li>
    // <li>If `glooAuth` is used, the `server` must reference an ExtAuthServer that is backed by one or more Gloo `ext-auth-service` Kubernetes services.</li>
    // <li>If `customAuth` is used, the `server` must reference an ExtAuthServer that is backed by your own custom external auth server.</li>
    // <li>For auth configurations that require a client secret from the identity provider issuer,
    // the secret must be in the same cluster as the ExtAuthServer resource.</li></ul>
    .common.gloo.solo.io.ObjectReference server = 4;

    // Configure the selected route or destination with auth options provided by your own external auth server.
    message CustomAuth {
      // Add context extensions to the request that matches on the route or destination and is sent to the external auth server.
      // This allows the server to base the auth decision on metadata that you define on the source of the request.
      //
      // This attribute is analogous to Envoy's config.filter.http.ext_authz.v2.CheckSettings. For more info, see the
      // [Envoy documentation](https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/network_filters/ext_authz_filter.html?highlight=extauthz#config-filter-http-ext-authz-v2-checksettings).
      map<string, string> context_extensions = 1;
    }
  }
}

// The status of the policy after it is applied to your Gloo environment.
message ExtAuthPolicyStatus {
  // The state and workspace conditions of the applied resource.
  .common.gloo.solo.io.Status common = 1;

  // The number of destination ports selected by the policy.
  uint32 num_selected_destination_ports = 2;

  // The number of routes selected by the policy.
  uint32 num_selected_routes = 3;
}

message ExtAuthPolicyReport {
  // The status of the resource in each workspace that it exists in.
  map<string, .common.gloo.solo.io.Report> workspaces = 1;

  // A list of destination ports selected by the policy.
  repeated .common.gloo.solo.io.DestinationReference selected_destination_ports = 2;

  // A list of references to all route selected by the policy.
  repeated .common.gloo.solo.io.RouteReference selected_routes = 3;
}
