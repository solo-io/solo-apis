syntax = "proto3";

package tls.security.policy.gloo.solo.io;

import "extproto/ext.proto";
import "github.com/solo-io/skv2/api/core/v1/core.proto";

option go_package = "github.com/solo-io/solo-apis/client-go/security.policy.gloo.solo.io/v2/tls";

option (extproto.equal_all) = true;
option (extproto.clone_all) = true;

message VaultCA {

  // `ca_path` is the mount path of the Vault PKI backend's `sign` endpoint, e.g:
  // "my_pki_mount/sign/my-role-name".
  string ca_path = 1;

  // `csr_path` is the mount path of the Vault PKI backend's `generate` endpoint, e.g:
  // "my_pki_mount/intermediate/generate/exported".
  // "exported" is necessary here as istio needs access to the private key
  // See vault docs here: https://www.vaultproject.io/api-docs/secret/pki#parameters-4
  string csr_path = 2;

  // Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
  string server = 3;

  // PEM encoded CA bundle used to validate Vault server certificate. Only used
  // if the Server URL is using HTTPS protocol. This parameter is ignored for
  // plain HTTP protocol connection. If not set the system root certificates
  // are used to validate the TLS connection.
  oneof ca_source {
    // Inline CA bytes
    bytes ca_bundle = 4;
    // Reference to a secret containing the CA bytes.
    // The CA should be stored by the key `root-cert.pem`
    .core.skv2.solo.io.ObjectRef ca_secret_ref = 5;
    // Path to a local file containing the CA bytes
    string ca_local_path = 6;
  }

  // Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1"
  // More about namespaces can be found [here](https://www.vaultproject.io/docs/enterprise/namespaces)
  string namespace = 7;

  oneof auth_type {

    // TokenSecretRef authenticates with Vault by presenting a token.
    .core.skv2.solo.io.ObjectRef token_secret_ref = 8;

    // Kubernetes authenticates with Vault by passing the ServiceAccount
    // token stored in the named Secret resource to the Vault server.
    VaultKubernetesAuth kubernetes_auth = 9;
  }

}

message VaultKubernetesAuth {

  // The Vault mountPath here is the mount path to use when authenticating with
  // Vault. For example, setting a value to `/v1/auth/foo`, will use the path
  // `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
  // default value "/v1/auth/kubernetes" will be used.
  string mount_path = 1;

  // A required field containing the Vault Role to assume. A Role binds a
  // Kubernetes ServiceAccount with a set of Vault policies.
  string role = 2;

  // Key to search for the sa_token
  // Default to "token"
  string secret_token_key = 3;

  // The method by which to get the service account token.
  // If unspecified will default to mounted_sa_path
  oneof service_account_location {

    // Reference to service account, other than the one mounted to the current pod.
    .core.skv2.solo.io.ObjectRef service_account_ref = 4;

    // File System path to grab the service account token from.
    // Defaults to /var/run/secrets/kubernetes.io/serviceaccount
    string mounted_sa_path = 5;
  }

}
