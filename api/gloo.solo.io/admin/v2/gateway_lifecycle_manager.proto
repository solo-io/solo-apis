syntax = "proto3";

package admin.gloo.solo.io;

import "encoding/protobuf/cue/cue.proto";
import "extproto/ext.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/istio_operator.proto";

option go_package = "github.com/solo-io/solo-apis/client-go/admin.gloo.solo.io/v2";

option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

message GatewayLifecycleManagerSpec {

  // List of Istio gateway installations.
  // Any components that are NOT related to the gateway are ignored.
  // Only one installation is allowed per revision per cluster.
  repeated GatewayInstallation installations = 1;
}

message GatewayClusterSelector {

  // Name of the cluster to install Istio into.
  // Must match the registered cluster name.
  string name = 1;

  // Optional: Defaults to false.
  // When set to true, the installation for this revision is applied as the active gateway through which primary service traffic is routed in the cluster.
  // If the `istioOperatorSpec` defines a service, this field switches the service selectors to the revision specified in the `gatewayRevsion`.
  // You might change this setting for gateway installations during a canary upgrade.
  // For more info, see the [upgrade docs](https://docs.solo.io/gloo-gateway/2.3.x/setup/legacy/managed_upgrade/).
  bool active_gateway = 2;

  // Optional: By default, the `trustDomain` value is automatically set in the meshConfig by the installer to the name of each workload cluster.
  // To override the `trustDomain` for each cluster, you can instead specify the override value in the `trustDomain` field,
  // and include the value in the list of cluster names. For example, if you specify `trustDomain: cluster1-trust-override` in the operator spec,
  // you then specify the cluster name (`cluster1`) and the trust domain (`cluster1-trust-override`) in the list of cluster names.
  // Additionally, because Gloo requires multiple trust domains for east-west routing, the `PILOT_SKIP_VALIDATE_TRUST_DOMAIN` field is set to `"true"` by default. 
  // For more info, see the [Istio documentation](https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1).
  string trust_domain = 5;
}

message GatewayInstallation {
  // Optional: The revision of an Istio control plane in the cluster that this gateway should also use.
  // If a control plane installation of this revision is not found, no gateway is created.
  string control_plane_revision = 1;

  // Istio revision for this installation, such as '1-17'.
  // When set to `auto`, the default supported version of Gloo Istio is installed.
  string gateway_revision = 2;

  // Clusters to install the Istio gateways in.
  repeated GatewayClusterSelector clusters = 3;

  // IstioOperator specification for the control plane.
  // For more info, see the [Istio documentation](https://istio.io/latest/docs/reference/config/istio.operator.v1alpha1/).
  .common.gloo.solo.io.IstioOperatorSpec istio_operator_spec = 4;

  // Skip in-place upgrade change validation. It is highly recommended to use revision based workflows in production environments.
  bool skip_upgrade_validation = 5;
}

message GatewayLifecycleManagerStatus {

  // The status of each Istio gateway installation that is being managed by Gloo Mesh, where
  // the key is the cluster name of the installation.
  map<string, ClusterStatuses> clusters = 1;

  message ClusterStatuses {
    // The Istio installations by revision.
    map<string, InstallationStatus> installations = 1;

    message InstallationStatus {
      // The state of the Istio installation.
      State state = 1;

      // A human readable message about the current state of the GatewayInstallationInstance.
      string message = 2;

      // The observed revision for the Istio installation. 
      string observed_revision = 5;

      // The Istio operator spec that is currently deployed for this revision. 
      .common.gloo.solo.io.IstioOperatorSpec observed_operator = 4;

      // The state of an Istio installation.
      enum State {
        // Waiting for resources to be installed or updated.
        PENDING = 0;

        // Gloo Mesh server encountered a problem while attempting
        // to install the Istio gateway.
        FAILED = 1;

        // Could not select a control plane.
        NO_CONTROL_PLANE_AVAILABLE = 2;

        // The Istio gateway is currently being installed. 
        INSTALLING_GATEWAY = 3;

        // All Istio components are successfully installed and healthy.
        HEALTHY = 4;

        // The Istio installation is no longer healthy.
        UNHEALTHY = 5;

        // The gateway IstioOperator resource is in an 'ACTION_REQUIRED' state. Check the logs of the IstioOperator deployment for more info.
        ACTION_REQUIRED = 6;

        // The gateway IstioOperator resource is in an 'UPDATING' state. 
        UPDATING_GATEWAY = 7;

        // The gateway IstioOperator resource is in a 'RECONCILING' state.
        RECONCILING_GATEWAY = 8;

        // The gateway installation state could not be determined. 
        UNKNOWN = 9;

      }
    }
  }
}

// $hide_from_docs
message GatewayLifecycleManagerNewStatus {

}

// $hide_from_docs
message GatewayLifecycleManagerReport {

}

