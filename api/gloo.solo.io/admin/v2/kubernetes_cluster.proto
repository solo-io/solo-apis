syntax = "proto3";

package admin.gloo.solo.io;

import "extproto/ext.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/status.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/approval_state.proto";

option go_package = "github.com/solo-io/solo-apis/client-go/admin.gloo.solo.io/v2";

option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

// `KubernetesCluster` defines a Kubernetes cluster that has been registered with Gloo Mesh for management.
// A KubernetesCluster must be created in order to connect the Gloo Mesh Agent
// with the Gloo Mesh Server.
// KubernetesCluster must be deployed to the management cluster in the `gloo-mesh` namespace.
// The name of the KubernetesCluster has to be unique among all managed workload clusters for a 
// given Gloo Mesh management plane.
// The name or/and labels of a KubernetesCluster resource can be used in a Workspace resource to determine
// the workload clusters for a given workspace.
//
// The following example show a simple KubernetesCluster resource named `cluster1` with `cluster.local`
// as its cluster domain:
// ```yaml
// apiVersion: admin.gloo.solo.io/v2
// kind: KubernetesCluster
// metadata:
//   name: cluster1
//   namespace: gloo-mesh
// spec:
//   clusterDomain: cluster.local
// ```
//
// The following example adds the region label to the KubernetesCluster resource:
// ```yaml
// apiVersion: admin.gloo.solo.io/v2
// kind: KubernetesCluster
// metadata:
//   name: cluster1
//   namespace: gloo-mesh
//   labels:
//     region: us-east
// spec:
//   clusterDomain: cluster.local
// ```
//
message KubernetesClusterSpec {
  // Optional: The cluster domain suffix this Cluster is configured with. Defaults to 'cluster.local'.
  string cluster_domain = 1;

  // Optional: Use this `skipWarming` option with the `glooMgmtServer.safeMode` or `glooMgmtServer.safeStartWindow` options. 
  // When `safeMode` is set to true and `skipWarming` is set to false: The Gloo management server halts translation. 
  // Translation does not resume until the agents in each workload cluster connect and send their input snapshot to the management
  // server to populate the Redis cache. This setting is helpful in multicluster setups. It makes sure that the input snapshots
  // of all clusters are present in Redis before starting translation. This way, the agents only apply and modify your resources
  // based on a complete translation context. When `skipWarming` is set to true: The Gloo management server does not wait for 
  // a cluster's input snapshot to be populated in Redis to start translation. This setting can lead to incomplete output snapshots.
  // However, you might find this setting useful when registering new clusters. Even if a cluster has an initial connectivity issue,
  // translation can continue for other registered clusters. The default value is false.
  bool skip_warming = 2;
}

// // The status of the KubernetesCluster after it is applied to your Gloo environment.
message KubernetesClusterStatus {
  // Indicates the state of the Gloo agent that is connected to the Gloo management server.
  .common.gloo.solo.io.Status common = 1;
}

// The resources that the applied resource selects.
message KubernetesClusterReport {
  .common.gloo.solo.io.State state = 1;
}
