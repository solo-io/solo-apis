// Use Gloo Platform to install Istio control planes in your workload clusters,
// as part of the Istio lifecycle management.
// In your `IstioLifecycleManager` resource, you provide `istiod` settings in an `IstioOperator` configuration.
// When you create the `IstioLifecycleManager` in your management cluster, Gloo translates the configuration
// into `istiod` control planes in your registered workload clusters for you.
//
// For more information, see the [Install Istio by using the Istio Lifecycle Manager]({{% versioned_link_path fromRoot="/setup/install/gloo_mesh_managed/" %}}) guide.
//
// **Example**: This example creates an `istiod` control plane in the `istio-system` namespace of two workload clusters
// (`$REMOTE_CLUSTER1` and `$REMOTE_CLUSTER2`). You supply the Solo Istio revision (`$REVISION`), image tag (`$ISTIO_IMAGE`),
// and repo key (`$REPO`).
// ```yaml
// apiVersion: admin.gloo.solo.io/v2
// kind: IstioLifecycleManager
// metadata:
//   name: istiod-control-plane
//   namespace: gloo-mesh
// spec:
//   installations:
//   # The revision for this installation, such as 1-18-3
//   - revision: $REVISION
//     # List all workload clusters to install Istio into
//     clusters:
//     - name: $REMOTE_CLUSTER1
//       # If set to true, the spec for this revision is applied in the cluster
//       defaultRevision: true
//     - name: $REMOTE_CLUSTER2
//       defaultRevision: true
//     istioOperatorSpec:
//       # Only the control plane components are installed
//       # (https://istio.io/latest/docs/setup/additional-setup/config-profiles/)
//       profile: minimal
//       # Solo.io Istio distribution repository; required for Solo Istio.
//       # You get the repo key from your Solo Account Representative.
//       hub: $REPO
//       # Any Solo Istio tag
//       tag: $ISTIO_IMAGE
//       namespace: istio-system
//       # Mesh configuration
//       meshConfig:
//         # Enable access logging only if using.
//         accessLogFile: /dev/stdout
//         # Encoding for the proxy access log (TEXT or JSON). Default value is TEXT.
//         accessLogEncoding: JSON
//         # Enable span tracing only if using.
//         enableTracing: true
//         defaultConfig:
//           # Wait for the istio-proxy to start before starting application pods
//           holdApplicationUntilProxyStarts: true
//           # Legacy metrics pipeline only, in Gloo Istio 1.17 and earlier:
//           # Enable the legacy Gloo metrics service. For more info, see https://docs.solo.io/gloo-mesh/latest/observability/pipeline/.
//           envoyMetricsService:
//             address: gloo-mesh-agent.gloo-mesh:9977
//           # Legacy metrics pipeline only, in Gloo Istio 1.17 and earlier: Enable Gloo access logging.
//           envoyAccessLogService:
//             address: gloo-mesh-agent.gloo-mesh:9977
//           proxyMetadata:
//             # For known hosts, enable the Istio agent to handle DNS requests for any custom ServiceEntry, such as non-Kubernetes services.
//             # Unknown hosts are automatically resolved using upstream DNS servers in resolv.conf (for proxy-dns)
//             ISTIO_META_DNS_CAPTURE: "true"
//         # Set the default behavior of the sidecar for handling outbound traffic
//         # from the application
//         outboundTrafficPolicy:
//           mode: ALLOW_ANY
//         # The administrative root namespace for Istio configuration
//         rootNamespace: istio-system
//         # Set to the cluster name by default.
//         trustDomain: ${CLUSTER_NAME}
//       # Traffic management
//       components:
//         pilot:
//           k8s:
//             env:
//             # Disable selecting workload entries for local service routing, so that Kubernetes 
//             # will not automatically match services to workload entries with matching selector labels.
//             # Required for Gloo Mesh VirtualDestination functionality.
//             # For more info, see https://istio.io/latest/docs/reference/commands/pilot-discovery/
//             - name: PILOT_ENABLE_K8S_SELECT_WORKLOAD_ENTRIES
//               value: "false"
//             # Skip the validation step for mTLS within the cluster.
//             # This approach is not recommended if you integrated Istio with your own CA,
//             # but is useful for PoCs or demos in which you use self-signed certificates.
//             - name: PILOT_SKIP_VALIDATE_TRUST_DOMAIN
//               value: "true"
//       # Helm values overrides
//       values:
//         global:
//           multiCluster:
//             # Set to the cluster name by default.
//             clusterName: $CLUSTER_NAME
// ```
syntax = "proto3";

package admin.gloo.solo.io;

import "encoding/protobuf/cue/cue.proto";
import "extproto/ext.proto";
import "k8s.io/api/core/v1/generated.proto";
import "github.com/solo-io/solo-apis/api/gloo.solo.io/common/v2/istio_operator.proto";

option go_package = "github.com/solo-io/solo-apis/client-go/admin.gloo.solo.io/v2";

option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

// Specifications for the `IstioLifecycleManager` resource.
message IstioLifecycleManagerSpec {
  // List of Istio control plane installations.
  repeated IstioInstallation installations = 1;
}

// Clusters to install the Istio control planes in.
message IstioClusterSelector {

  // Name of the cluster to install Istio into.
  // Must match the name of the cluster that you used when you registered the cluster with Gloo.
  string name = 1;

  // Optional: Defaults to false.
  // When set to true, the installation for this revision is applied as the active Istio installation in the cluster.
  // Resources with the `istio-injection=true` label entry use this revision. You might change this setting for Istio installations
  // during a canary upgrade. For more info, see the [upgrade docs](https://docs.solo.io/gloo-mesh-enterprise/main/setup/upgrade/gloo_mesh_managed_upgrade/).
  bool default_revision = 2;

  // Optional: By default, the `trustDomain` value in the `meshConfig` section of the operator spec is automatically set by the Gloo to the name of each workload cluster.
  // To override the `trustDomain` for each cluster, you can instead specify the override value by using this `trustDomain` field,
  // and include the value in the list of cluster names. For example, if you specify `meshConfig.trustDomain: cluster1-trust-override` in your operator spec,
  // you then specify both the cluster name (`name: cluster1`) and the trust domain (`trustDomain: cluster1-trust-override`) in this `installations.clusters` section.
  // Additionally, because Gloo requires multiple trust domains for east-west routing, the `PILOT_SKIP_VALIDATE_TRUST_DOMAIN` field is set to `"true"` by default. 
  // For more info, see the [Istio documentation](https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1).
  string trust_domain = 5;
}

message IstioController {
  // The amount of time to wait for resources in a component to become ready before giving up. Configured using a duration string.
  // A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, 
  // such as "300ms" or "2h45m". Valid time units are "ns", "us" (or "Âµs"), "ms", "s", "m", "h".
  string wait_for_resources_timeout = 1;

  // Names of image pull secrets to use to deploy the Istio controller.
  // For more info, see the [Kubernetes docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#create-a-pod-that-uses-your-secret).
  repeated .k8s.io.api.core.v1.LocalObjectReference image_pull_secrets = 2;

  // Override for resources allocated to the Istio controller deployment.
  // For more info, see the [Kubernetes docs](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#example-1).
  .common.gloo.solo.io.Resources resources = 3;

  // Override for the pod's security context. For more info, see the
  // [Kubernetes documentation](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#securitycontext-v1-core).
  .k8s.io.api.core.v1.SecurityContext security_context = 4;

  // Kubernetes pod/deployment/service labels.
  map<string, string> labels = 5;
  
  // Kubernetes pod/deployment/service annotations.
  map<string, string> annotations = 6;

  // Deployment environment variables. For more info, see the
  // [Kubernetes docs](https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/).
  repeated .k8s.io.api.core.v1.EnvVar env_vars = 7;
}

// List of Istio control plane installations.
// Any components that are NOT related to the control plane are ignored.
message IstioInstallation {
  // Istio revision for this installation, such as '1-18-2'. 
  // Label workload resources with 'istio.io/rev=$REVISION' to use this installation.
  // When set to `auto`, Gloo installs the control plane with the default supported version of Solo Istio.
  string revision = 1;

  // Clusters to install the Istio control planes in.
  repeated IstioClusterSelector clusters = 2;

  // IstioOperator specification for the control plane.
  // For more info, see the [Istio documentation](https://istio.io/latest/docs/reference/config/istio.operator.v1alpha1/).
  .common.gloo.solo.io.IstioOperatorSpec istio_operator_spec = 3;

  // Optional configuration to tune the deployment of the IstioOperator controller deployed to each workload cluster.
  IstioController istio_controller = 4;

  // Skip validation of in-place upgrade changes. Note that in-place upgrades are not recommended in production environments.
  // Instead, use canary upgrades.
  bool skip_upgrade_validation = 5;
}

// The status of the `IstioLifecycleManager` resource after you apply it to your Gloo environment.
message IstioLifecycleManagerStatus {

  // The list of clusters where Gloo manages Istio installations.
  map<string, ClusterStatuses> clusters = 1;

  // The list of clusters where Gloo manages Istio installations.
  message ClusterStatuses {
    // The Istio installations in the cluster, listed by revision.
    map<string, InstallationStatus> installations = 1;

    // The status of the installation.
    message InstallationStatus {
      // The current state of the Istio installation.
      State state = 1;

      // A human readable message about the current state of the installation.
      string message = 2;

      // The observed revision of the Istio installation. 
      string observed_revision = 5;

      // The IstioOperator spec that is currently deployed for this revision. 
      .common.gloo.solo.io.IstioOperatorSpec observed_operator = 4;

      // The current state of the Istio installation.
      enum State {
        // Waiting for resources to be installed or updated.
        PENDING = 0;

        // The Gloo management server encountered a problem while attempting
        // to install Istio.
        FAILED = 1;

        // The controller is currently being installed.
        INSTALLING_CONTROLLER = 2;

        // The controller failed to install.
        CONTROLLER_INSTALL_FAILED = 3;

        // The Istio control plane is currently being installed.
        INSTALLING_CONTROL_PLANE = 4;

        // The Istio control plane failed to install.
        CONTROL_PLANE_INSTALL_FAILED = 5;

        // All Istio components are successfully installed and healthy.
        HEALTHY = 6;

        // The Istio installation is no longer healthy.
        UNHEALTHY = 7;

        // The control plane IstioOperator resource is in an 'ACTION_REQUIRED' state. Check the logs of the IstioOperator deployment for more info.
        ACTION_REQUIRED = 8;

        // The control plane IstioOperator resource is in an 'UPDATING' state.
        UPDATING_CONTROL_PLANE = 9;

        // The control plane IstioOperator resource is in a 'RECONCILING' state.
        RECONCILING_CONTROL_PLANE = 10;

        // The control plane installation state could not be determined.
        UNKNOWN = 11;
      }
    }
  }
}

// $hide_from_docs
message IstioLifecycleManagerNewStatus {

}

// $hide_from_docs
message IstioLifecycleManagerReport {

}
