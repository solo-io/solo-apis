syntax = "proto3";
package gloo.solo.io;
option go_package = "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1";

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
import "extproto/ext.proto";
option (extproto.hash_all) = true;

option (gogoproto.equal_all) = true;


// Fine tune the settings for connections to an upstream
message ConnectionConfig {
    // Maximum requests for a single upstream connection (unspecified or zero = no limit)
    uint32 max_requests_per_connection = 1;
    // The timeout for new network connections to hosts in the cluster
    google.protobuf.Duration connect_timeout = 2 [ (gogoproto.stdduration) = true ];

    // If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
    // see more info here: https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/core/address.proto#envoy-api-msg-core-tcpkeepalive
    message TcpKeepAlive{
        // Maximum number of keepalive probes to send without response before deciding the connection is dead.
        uint32 keepalive_probes = 1;
        // The number of seconds a connection needs to be idle before keep-alive probes start being sent. This is rounded up to the second.
        google.protobuf.Duration keepalive_time = 2 [ (gogoproto.stdduration) = true ];
        // The number of seconds between keep-alive probes. This is rounded up to the second.
        google.protobuf.Duration keepalive_interval = 3 [ (gogoproto.stdduration) = true ];
    }
    // Configure OS-level tcp keepalive checks
    TcpKeepAlive tcp_keepalive = 3;

    // Soft limit on size of the clusterâ€™s connections read and write buffers. If unspecified, an implementation defined default is applied (1MiB).
    // For more info, see the [envoy docs](https://www.envoyproxy.io/docs/envoy/v1.14.1/api-v2/api/v2/cluster.proto#cluster)
    google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 4;
}
