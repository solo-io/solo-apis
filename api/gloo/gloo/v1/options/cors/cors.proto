syntax = "proto3";
package cors.options.gloo.solo.io;

option go_package = "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1/options/cors";

import "extproto/ext.proto";
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;
option (extproto.equal_all) = true;

// CorsPolicy defines Cross-Origin Resource Sharing for a virtual service.
message CorsPolicy {
    // Specifies the origins that will be allowed to make CORS requests.
    //
    // An origin is allowed if either allow_origin or allow_origin_regex match.
    repeated string allow_origin = 1;

    // Specifies regex patterns that match origins that will be allowed to make
    // CORS requests.
    //
    // An origin is allowed if either allow_origin or allow_origin_regex match.
    repeated string allow_origin_regex = 2;

    // Specifies the content for the *access-control-allow-methods* header.
    repeated string allow_methods = 3;

    // Specifies the content for the *access-control-allow-headers* header.
    repeated string allow_headers = 4;

    // Specifies the content for the *access-control-expose-headers* header.
    repeated string expose_headers = 5;

    // Specifies the content for the *access-control-max-age* header.
    string max_age = 6;

    // Specifies whether the resource allows credentials.
    bool allow_credentials = 7;

    // Optional, only applies to route-specific CORS Policies, defaults to false.
    // If set, the CORS Policy (specified on the virtual host) will be disabled for this route.
    bool disable_for_route = 8;
}

// Settings for determining how CORS settings are merged when present on both VirtualHost and Route
// This may be useful if different teams/personas are responsible for managing VirtualService and Route resources and policies
// on VirtualServices set by one team or persona should be enforced or inherited on Routes
message CorsPolicyMergeSettings {
    enum MergeStrategy{
        // Follow the default Envoy behavior, which is for Route settings to override VH settings if non-nil
        DEFAULT = 0;
        // When a setting is present on both VH and Route CORS policy, merge by concatenating for list fields and by
        // ORing for boolean fields
        UNION = 1;

        // Eventually we may want to add additional mergeStrategies

        // When a setting is present on both VH and Route CORS policy, merge by taking only values present in both for
        // list fields and by ANDing for boolean fields
        // INTERSECTION = 2;

        // When a setting is present on both VH and Route CORS policy, use the Route-level field
        // This is Envoy's underlying behavior, so effectively the same as default
        // ROUTE = 3;

        // When a setting is present on both VH and Route CORS policy, use the VH-level field
        // VH = 4;
    }

    // Eventually we may want to allow each CORS setting to be configured, so we reserve fields for them

    // mimicking the CorsPolicy message
    // mergeStrategy allow_origin = 1;
    // mergeStrategy allow_origin_regex = 2;
    // mergeStrategy allow_methods = 3;
    // mergeStrategy allow_headers = 4;

    MergeStrategy expose_headers = 5;

    // mergeStrategy max_age = 6;
    // mergeStrategy allow_credentials = 7;
}