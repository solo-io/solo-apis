syntax = "proto3";
package consul.options.gloo.solo.io;

option go_package = "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1/options/consul";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

import "github.com/solo-io/solo-apis/api/gloo/gloo/v1/options/service_spec.proto";

// Upstream Spec for Consul Upstreams
// consul Upstreams represent a set of one or more addressable pods for a consul Service
// the Gloo consul Upstream maps to a single service port. Because consul Services support multiple ports,
// Gloo requires that a different upstream be created for each port
// consul Upstreams are typically generated automatically by Gloo from the consul API
message UpstreamSpec {
    // The name of the Consul Service
    string service_name = 1;

    // Deprecated: This field was renamed to subset_tags. If subset_tags is used, this field is 
    // ignored. Otherwise, the behavior is the same as subset_tags field below.
    repeated string service_tags = 2;
    
    // Gloo will segment instances based off of these tags. This allows you to set routes that route
    // to a subset of the instances of the service
    repeated string subset_tags = 6;

    // The list of service tags Gloo should search for on a service instance
    // before deciding whether or not to include the instance as part of this
    // upstream. Empty list means that all service instances with the same service name will be
    // included. When not empty, only service instances that match all of the tags (subset match) will be selected
    // for this upstream.
    repeated string instance_tags = 7;

    // The opposite of instanceTags, this is a list of service tags that gloo should ensure are not
    // in a service instance before including it in an upstream.
    repeated string instance_blacklist_tags = 8;

    // An optional Service Spec describing the service listening at this address
    .options.gloo.solo.io.ServiceSpec service_spec = 3;

    // These are the same consistency modes offered by Consul. For more information please review https://www.consul.io/api-docs/features/consistency.
    // For more information please review https://pkg.go.dev/github.com/hashicorp/consul/api#QueryOptions.
    enum ConsulConsistencyModes{
        // This is strongly consistent. Sets the RequireConsistent in the consul api to true.
        ConsistentMode = 0;
        // This will set (clears) both the AllowStale and the RequireConsistent in the consul api to false.
        DefaultMode = 2;
        // Allows stale reads when set. This will set the AllowStale in the consul api.
        StaleMode = 1;
    }
    // Sets the consistency mode. The default is the ConsistentMode.
    ConsulConsistencyModes consistencyMode = 9;

    // Is this consul service connect enabled.
    bool connect_enabled = 4;
    // The data centers in which the service instance represented by this upstream is registered.
    repeated string data_centers = 5;
}
