syntax = "proto3";
package gloo.solo.io;
option go_package = "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1/ssl";

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

import "github.com/solo-io/solo-kit/api/v1/ref.proto";

// SslConfig contains the options necessary to configure a virtual host or listener to use TLS termination
message SslConfig {
    oneof ssl_secrets {
        // SecretRef contains the secret ref to a gloo tls secret or a kubernetes tls secret.
        // gloo tls secret can contain a root ca as well if verification is needed.
        core.solo.io.ResourceRef secret_ref = 1;
        // SSLFiles reference paths to certificates which are local to the proxy
        SSLFiles ssl_files = 2;
        // Use secret discovery service.
        SDSConfig sds = 4;
    }
    // optional. the SNI domains that should be considered for TLS connections
    repeated string sni_domains = 3;
    
    // Verify that the Subject Alternative Name in the peer certificate is one of the specified values.
    // note that a root_ca must be provided if this option is used.
    repeated string verify_subject_alt_name = 5;

    SslParameters parameters = 6;

    // Set Application Level Protocol Negotiation
    // If empty, defaults to ["h2", "http/1.1"].
    // As an advanced option you may use ["allow_empty"] to avoid defaults and set alpn to have no alpn set (ie pass empty slice).
    repeated string alpn_protocols = 7;

    // If the SSL config has the ca.crt (root CA) provided, Gloo uses it to perform mTLS by default.
    // Set oneWayTls to true to disable mTLS in favor of server-only TLS (one-way TLS), even if Gloo has the root CA.
    // If unset, defaults to false.
    google.protobuf.BoolValue one_way_tls = 8;

    // If set to true, the TLS session resumption will be deactivated, note that it deactivates only the tickets based tls session resumption (not the cache).
    google.protobuf.BoolValue disable_tls_session_resumption = 9;

    // If present and nonzero, the amount of time to allow incoming connections to complete any
    // transport socket negotiations. If this expires before the transport reports connection
    // establishment, the connection is summarily closed.
    google.protobuf.Duration transport_socket_connect_timeout = 10;

    enum OcspStaplePolicy {
        // OCSP responses are optional. If none is provided, or the provided response is expired, the associated certificate will be used without the OCSP response.
        LENIENT_STAPLING = 0;
        // OCSP responses are optional. If none is provided, the associated certificate will be used without the OCSP response.
        // If a response is present, but expired, the certificate will not be used for connections.
        // If no suitable certificate is found, the connection is rejected.
        STRICT_STAPLING = 1;
        // OCSP responses are required. If no `ocsp_staple` is set on a certificate, configuration will fail.
        // If a response is expired, the associated certificate will not be used.
        // If no suitable certificate is found, the connection is rejected.
        MUST_STAPLE = 2;
    }

    // The OCSP staple policy to use for this listener.
    // Defaults to `LENIENT_STAPLING`.
    // https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/transport_sockets/tls/v3/tls.proto#enum-extensions-transport-sockets-tls-v3-downstreamtlscontext-ocspstaplepolicy
    OcspStaplePolicy ocsp_staple_policy = 11;
}

// SSLFiles reference paths to certificates which can be read by the proxy off of its local filesystem
message SSLFiles {
    string tls_cert = 1;
    string tls_key = 2;
    // for client cert validation. optional
    string root_ca = 3;
    // stapled ocsp response. optional
    // should be der-encoded
    string ocsp_staple = 4;
}

// SslConfig contains the options necessary to configure an upstream to use TLS origination
message UpstreamSslConfig {
    oneof ssl_secrets {

        // SecretRef contains the secret ref to a gloo tls secret or a kubernetes tls secret.
        // gloo tls secret can contain a root ca as well if verification is needed.
        core.solo.io.ResourceRef secret_ref = 1;
        //  SSLFiles reference paths to certificates which are local to the proxy
        SSLFiles ssl_files = 2;
        // Use secret discovery service.
        SDSConfig sds = 4;
    }
    // optional. the SNI domains that should be considered for TLS connections
    string sni = 3;

    // Verify that the Subject Alternative Name in the peer certificate is one of the specified values.
    // note that a root_ca must be provided if this option is used.
    repeated string verify_subject_alt_name = 5;

    SslParameters parameters = 7;

    // Set Application Level Protocol Negotiation.
    // If empty, it is not set.
    repeated string alpn_protocols = 8;

    // Allow Tls renegotiation, the default value is false.
    // TLS renegotiation is considered insecure and shouldnâ€™t be used unless absolutely necessary.
    google.protobuf.BoolValue allow_renegotiation = 10;

    // If the SSL config has the ca.crt (root CA) provided, Gloo uses it to perform mTLS by default.
    // Set oneWayTls to true to disable mTLS in favor of server-only TLS (one-way TLS), even if Gloo has the root CA.
    // This flag does nothing if SDS is configured.
    // If unset, defaults to false.
    google.protobuf.BoolValue one_way_tls = 11;
}

message SDSConfig {
    // Target uri for the sds channel. currently only a unix domain socket is supported.
    string target_uri = 1;
    oneof sds_builder {
        // Call credentials.
        CallCredentials call_credentials = 2;
        // The name of the sds cluster in envoy
        string cluster_name = 5;
    }
    // The name of the secret containing the certificate
    string certificates_secret_name = 3;
    // The name of secret containing the validation context (i.e. root ca)
    string validation_context_name = 4;
}

message CallCredentials {
    message FileCredentialSource {
        // File containing auth token.
        string token_file_name = 1;
        // Header to carry the token.
        string header = 2;
    }
    // Call credentials are coming from a file,
    FileCredentialSource file_credential_source = 1;
}

// General TLS parameters. See the [envoy docs](https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/transport_sockets/tls/v3/common.proto#extensions-transport-sockets-tls-v3-tlsparameters)
// for more information on the meaning of these values.
message SslParameters {
    enum ProtocolVersion {
        // Envoy will choose the optimal TLS version.
        TLS_AUTO = 0;
    
        // TLS 1.0
        TLSv1_0 = 1;
    
        // TLS 1.1
        TLSv1_1 = 2;
    
        // TLS 1.2
        TLSv1_2 = 3;
    
        // TLS 1.3
        TLSv1_3 = 4;
      }

      
    ProtocolVersion minimum_protocol_version = 1;
    ProtocolVersion maximum_protocol_version = 2;
    repeated string cipher_suites = 3;
    repeated string ecdh_curves = 4;
}
