syntax = "proto3";
package waf.options.gloo.solo.io;

import "github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/extensions/waf/waf.proto";
import "github.com/solo-io/solo-kit/api/v1/ref.proto";

option go_package = "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1/enterprise/options/waf";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

message Settings {
    // Disable waf on this resource (if omitted defaults to false).
    // If a route/virtual host is configured with WAF, you must explicitly disable its WAF,
    // i.e., it will not inherit the disabled status of its parent
    bool disabled = 1;
    // Custom massage to display if an intervention occurs.
    string custom_intervention_message = 2;
    // Add OWASP core rule set
    // if nil will not be added
    CoreRuleSet core_rule_set = 3;
    // Custom rule sets to add. Any subsequent changes to the rules in these files are not automatically updated. To update rules from files, version and update the file name.
    // If you want dynamically updated rules, use the `configMapRuleSets` option instead.
    repeated envoy.config.filter.http.modsecurity.v2.RuleSet rule_sets = 4;
    // Kubernetes configmaps with the rule sets that you want to use.
    // The rules must be in the value of the key-value mappings in the `data` field of the configmap.
    // Subsequent updates to the configmap values are dynamically updated in the configuration.
    repeated RuleSetFromConfigMap config_map_rule_sets = 8;
    // Audit Log settings
    envoy.config.filter.http.modsecurity.v2.AuditLogging audit_logging = 5;
    // Only process request headers, not buffering the request body
    bool request_headers_only = 6;
    // Only process response headers, not buffering the response body
    bool response_headers_only = 7;
}

message RuleSetFromConfigMap {
    // The Kubernetes configmap that has the rule sets as values in the `data` section.
    core.solo.io.ResourceRef config_map_ref = 1;
    // The ConfigMap might have multiple key-value pairs in the `data` section, such as when you create the ConfigMap from multiple files. Each value in a key-value pair may contain 0 or more rules.
    // You can use the `dataMapKey` field to select which keys to use, and the order you want them applied.
    // If this field is included, only the rules from the specified keys are applied, in the specified order. Any rules contained in the value of keys not included are ignored.
    // If this field is not included, all of the keys in the `data` section of the ConfigMap are sorted alphabetically, and all of the rules are included in the resulting order. The order of key-value pairs might differ from the order in which they appear in the ConfigMap (note, the rules within each mapping stay in the same order as they appear in the ConfigMap).
    repeated string data_map_keys = 2;
}

message CoreRuleSet {
    // Optional custom settings for the OWASP core rule set.
    // For an example on the configuration options see: https://github.com/SpiderLabs/owasp-modsecurity-crs/blob/v3.2/dev/crs-setup.conf.example
    // The same rules apply to these options as do to the `RuleSet`s. The file option is better if possible.
    oneof CustomSettingsType {
        // String representing the core rule set custom config options
        string custom_settings_string = 2;
        // String representing a file location with core rule set custom config options
        string custom_settings_file = 3;
    }
}