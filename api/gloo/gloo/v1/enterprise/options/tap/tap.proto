syntax = "proto3";

package tap.options.gloo.solo.io;

option go_package = "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1/options/tap";

import "github.com/solo-io/solo-kit/api/v1/ref.proto";
import "validate/validate.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/duration.proto";

// Tap filter: a filter that copies the contents of HTTP requests and responses
// to an external tap server. The full HTTP headers and bodies are reported in
// full to the configured address, and data can be reported using either over
// HTTP or GRPC.
message Tap {
  // Sinks to which tap data should be output. Currently, only a single sink
  // is supported.
  repeated Sink sinks = 1 [(validate.rules).repeated = {max_items: 1, min_items: 1}];

  // For buffered tapping, the maximum amount of received body that will be buffered
  // prior to truncation. If truncation occurs, the truncated field will be set.
  // If not specified, the default is 1KiB.
  google.protobuf.UInt32Value max_buffered_rx_bytes = 2;

  // For buffered tapping, the maximum amount of transmitted body that will be buffered
  // prior to truncation. If truncation occurs, the truncated field will be set.
  // If not specified, the default is 1KiB.
  google.protobuf.UInt32Value max_buffered_tx_bytes = 3;

  // Indicates whether tap filter records the time stamp for request/response headers.
  // Request headers time stamp is stored after receiving request headers.
  // Response headers time stamp is stored after receiving response headers.
  google.protobuf.BoolValue record_headers_received_time = 4;

  // Indicates whether report downstream connection info
  google.protobuf.BoolValue record_downstream_connection = 5;
}

message Sink {
  // The type of the output sink to which tap data should be written
  oneof SinkType {
    option (validate.required) = true;
    // Write tap data out to a GRPC service
    GrpcService grpc_service = 1;

    // Write tap data out to a HTTP service
    HttpService http_service = 2;
  }
}

// A tap sink over a GRPC service
message GrpcService {
  // Upstream reference to the tap server
  core.solo.io.ResourceRef tap_server = 1 [(validate.rules).message = {required: true}];
}

// A tap sink over a HTTP service
message HttpService {
  // Upstream reference to the tap server
  core.solo.io.ResourceRef tap_server = 1 [(validate.rules).message = {required: true}];

  // Connection timeout
  google.protobuf.Duration timeout = 2 [(validate.rules).message = {required: true}];
}
