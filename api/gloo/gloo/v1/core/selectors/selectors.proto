syntax = "proto3";
package selectors.core.gloo.solo.io;
option go_package = "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1/core/selectors";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;


message Selector {

  repeated string namespaces = 1;

  map<string, string> labels = 2;

  message Expression {
    // Kubernetes label key, must conform to Kubernetes syntax requirements
    // https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set
    string key = 1;

    // Selector expression operator, while the set-based syntax differs from Kubernetes (kubernetes: `key: !mylabel`, gloo: `key: mylabel, operator: "!"` | kubernetes: `key: mylabel`, gloo: `key: mylabel, operator: exists`), the functionality remains the same.
    enum Operator {
      // =
      Equals = 0;
      // ==
      DoubleEquals = 1;
      // !=
      NotEquals = 2;
      // in
      In = 3;
      // notin
      NotIn = 4;
      // exists
      Exists = 5;
      // !
      DoesNotExist = 6;
      // gt
      GreaterThan = 7;
      // lt
      LessThan = 8;
    }
    // The operator can only be in, notin, =, ==, !=, exists, ! (DoesNotExist), gt (GreaterThan), lt (LessThan).
    Operator operator = 2;
    repeated string values = 3;
  }

  // Expressions allow for more flexible Route Tables label matching, such as equality-based requirements, set-based requirements, or a combination of both.
  // https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#equality-based-requirement
  repeated Expression expressions = 3;
}