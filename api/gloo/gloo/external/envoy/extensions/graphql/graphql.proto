syntax = "proto3";

package envoy.config.filter.http.graphql.v2;

option go_package = "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/external/envoy/extensions/filters/http/graphql/v2";

option java_package = "io.envoyproxy.envoy.config.filter.http.graphql.v2";
option java_outer_classname = "GraphQLFilterProto";
option java_multiple_files = true;

import "google/protobuf/any.proto";
import "validate/validate.proto";

import "github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/config/core/v3/http_uri.proto";
import "github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/config/core/v3/extension.proto";
import "github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/config/core/v3/base.proto";


// used to reference into json structures by key(s)
message PathSegment {
  oneof segment {
    option (validate.required) = true;
    // This will extract a key from a Map value.
    string key = 1 [(validate.rules).string = {min_len: 1}];
    // Extract element at list
    uint32 index = 2;
    // Extracts all elements from a list
    bool all = 3;
  }
}

message Path {
  repeated PathSegment segments = 1;
}

// In the future we may add support for regex and subgroups
message ValueProvider {

  message GraphQLArgExtraction {
    // The argument name to fetch. The argument value fetched
    // will have a type from the schema that we validate in envoy.
    // If the name is invalid, returns the zero-value primitive or null.
    string arg_name = 1;
    // Optional: fetches the value in the argument selected at this key.
    // If the key is invalid, returns the zero-value primitive or null.
    repeated PathSegment path = 2;
    // If this is set to true, then a schema error will be returned to user when the graphql arg is not found.
    // Defaults to false, so schema error will not be returned to user when the graphql arg is not found.
    bool required = 3;
  }

  // Does not do type coercion, but instead if the type does not match the
  // expected primitive type we throw an error.
  // In the future we may add support for type coercion.
  message GraphQLParentExtraction {
    // Fetches the value in the graphql parent at this key. The value will
    // always be accepted since the parent object is not strongly-typed.
    // If the key is invalid, returns null.
    repeated PathSegment path = 1;
  }

  message TypedValueProvider {

    // if empty, defaults to string. similar to typeUrl in other envoy config
    enum Type {
      STRING = 0;
      INT = 1;
      FLOAT = 2;
      BOOLEAN = 3;
    }
    // Type that the value will be coerced into.
    // For example if the extracted value is "9", and type is INT,
    // this value will be cast to an int type.
    Type type = 1;
    oneof val_provider {
      // Fetches the request/response header's value. If not found, uses empty string
      string header = 2;
      // inline value, use as provided rather than extracting from another source
      string value = 3;
    }
  }

  message Provider {
    oneof provider {
      // type inferred from schema, no need to provide it.
      GraphQLArgExtraction graphql_arg = 1;
      TypedValueProvider typed_provider = 2;
      // Fetch value from the graphql_parent of the current field.
      GraphQLParentExtraction graphql_parent = 3;
    }
  }

  // Map of provider name to provider definition.
  // The name will be used to insert the provider value in the provider_template.
  map<string, Provider> providers = 3;

  /*
  If non-empty, Inserts named providers into a template string.
  For example, if the provider_template is '/api/{apiVersionProvider}/pet/{petIdProvider}'
  and we have to named providers defined in `providers`, apiVersionProvider and petIdProvider, with extracted values 'v2' and '123' respectively,
  the final resulting value will be '/api/v2/pet/123'
  Use {PROVIDER_NAME} as the interpolation notation (even repeated) regardless of the type of the
  provided value.
  If an undefined PROVIDER_NAME is used in the provider_template, this will nack during configuration.
  If this is empty, only the value of the first provider will be used as the resulting value.
  */
  string provider_template = 4;
}

message JsonValueList {
  repeated JsonValue values = 1;
}

message JsonValue {
  oneof json_val {
    JsonNode node = 1;
    ValueProvider value_provider = 2;
    JsonValueList list = 3;
  }
}

message JsonKeyValue {


  // PARTIALLY IMPLEMENTED
  // if empty, the value will be parsed as json and replace the entire
  // previously-parsed json value --> this part is only needed for gRPC
  // and thus not implemented yet
  string key = 1;
  JsonValue value = 2;
}

// Represents a typed JSON structure
message JsonNode {
  // if keys repeat, the latest one replaces any earlier values associated
  // with that key.
  //
  // repeated list, rather than a map, to have ordering to allow for merge
  // semantics within the data plane, for example:
  // - gRPC input uses special empty string for input key to set entire body
  // - gRPC wants to replace a certain field in parsed body from GraphQL arg
  repeated JsonKeyValue key_values = 1;
}

// Defines a configuration for generating outgoing requests for a resolver.
message RequestTemplate {
  // Use this attribute to set request headers to your REST service. It consists of a
  // map of strings to value providers. The string key determines the name of the
  // resulting header, the value provided will be the value.
  //
  // at least need ":method" and ":path"
  map<string, ValueProvider> headers = 1;

  // Use this attribute to set query parameters to your REST service. It consists of a
  // map of strings to value providers. The string key determines the name of the
  // query param, the provided value will be the value. This value is appended to any
  // value set to the :path header in `headers`.
  //
  // Interpolation is done in envoy rather than the control plane to prevent escaped
  // character issues. Additionally, we may be providing values not known until
  // the request is being executed (e.g., graphql parent info).
  map<string, ValueProvider> query_params = 2;

  // implementation specific, gRPC will want gRPC message and struct to instantiate
  JsonValue outgoing_body = 3;
}

// Defines a response transformation template.
// modify JSON response from upstream before it is processed by execution engine.
message ResponseTemplate {
  // In cases where the data to populate the graphql type is not in the
  // root object of the result, use result root to specify the path
  // of the response we should use as the root.
  // If {"a": {"b": [1,2,3]}} is the response from the api, setting resultroot as `a.b`
  // will pass on [1,2,3] to the execution engine rather than the whole api response
  repeated PathSegment result_root = 1;

  // Set graphql field to a specific path in the JSON response from the upstream
  // If resultroot is set, uses resultroot as the base path for all setters.
  // use cases:
  // - extracting data from a field to a graphql field with a different name / type
  /*
  Example:
  ```
  type Query {
    getSimple: Simple
  }

  type Simple {
    name String
    address String
  }```

  if we do `getsimple` and the response we get back from the upstream is
  ```
  {"data": {
    "people":
      {
        "name": "John Doe",
        "details": {
          "address": "123 Turnip Rd"
        }
      }
    }
  }
  ```
  the following response transform would let the graphql execution engine correctly
  marshal the upstream resposne into the expected graphql response:
  `
  responseTransform:
    result_root:
      segments:
        - key: data
        - key: people
    setters:
      address:
        segments:
          - key: details
          - key: address
  `yaml
  */
  map<string, Path> setters = 2;
}

message RESTResolver {
  .solo.io.envoy.config.core.v3.HttpUri server_uri = 1;
  // configuration used to compose the outgoing request to a REST API
  RequestTemplate request_transform = 2;
  // pre-execution engine transformations
  //
  // Request flow: GraphQL request -> request_transform (instantiate REST request) ->
  // REST API resp -> pre_execution_transform -> execution engine ->
  // complete GraphQL field response
  //
  ResponseTemplate pre_execution_transform = 3;
  string span_name = 4;
}

// Defines a configuration for generating outgoing requests for a resolver.
message GrpcRequestTemplate {
  // json representation of outgoing gRPC message to be sent to gRPC service
  JsonValue outgoing_message_json = 1;

  // request has shape matching service with name registered in registry
  // is the full_name(), e.g. main.Bookstore
  string service_name = 2;

  // make request to method with this name on the grpc service defined above
  // is just the name(), e.g. GetBook
  string method_name = 3;

  // in the future, we may want to make this a map<string, ValueProvider>
  // once we know better what the use cases are
  map<string, string> request_metadata = 4;

  // GraphQL Mesh fields not supported in our datplane API today and reasons:

  // think about graphql subscriptions we may need a new resolver for grpc streaming

  // we should explore doing this in the control plane instead of the data plane
  //useReflection (type: Boolean) - Use gRPC reflection to automatically gather the connection

  // rely on envoy cluster for rootca, certchain, privatekey
  //bool useHttps = 7;
}


// Defines a configuration for serializing and deserializing requests for a gRPC resolver.
// Is a Schema Extension
message GrpcDescriptorRegistry {
  .solo.io.envoy.config.core.v3.DataSource proto_descriptors = 1;
}


message GrpcResolver {
  .solo.io.envoy.config.core.v3.HttpUri server_uri = 1;
  // configuration used to compose the outgoing request to a gRPC endpoint
  GrpcRequestTemplate request_transform = 2;
  // pre-execution engine transformations
  //
  // Request flow: GraphQL request -> request_transform (instantiate gRPC request) ->
  // gRPC API resp -> pre_execution_transform -> execution engine ->
  // complete GraphQL field response
  //
  //ResponseTemplate pre_execution_transform = 3;
  string span_name = 4;
}

// NOT IMPLEMENTED
// Resolve an abstract type (union or interface) to a real type.
// When implemented, this message will be a field in the Resolution message.
message AbstractTypeResolver {
  // TODO: add me
}

// NOT IMPLEMENTED
// When we'll support prepared queries, this will be the type containing the
// query.
message Query { .solo.io.envoy.config.core.v3.DataSource query = 1; }

message QueryMatcher {
  message FieldMatcher {
    // Object type. For example, Query.
    string type = 1;
    // Field with in the object.
    string field = 2;
  }

  oneof match { FieldMatcher field_matcher = 1; }
}

// This is the resolver map for the schema.
// For each Type.Field, we can define a resolver.
// if a field does not have resolver, the default resolver will be used.
// the default resolver takes the field with the same name from the parent, and
// uses that value to resolve the field. if a field with the same name does not
// exist in the parent, null will be used.
message Resolution {
  // Match an object type and field
  QueryMatcher matcher = 1;
  // The resolver to use.
  .solo.io.envoy.config.core.v3.TypedExtensionConfig resolver = 2;
}
// Filter Listener config. Empty as the filter must be configured on the route
// level.
message GraphQLConfig {}

// Filter Route config. Routes that have this config will execute graphql
// queries, and will not make it to the router filter. i.e. this filter will
// terminate the request for these routes.
message GraphQLRouteConfig {
  // Deprecated. will be removed when gloo 1.10 is released
  .solo.io.envoy.config.core.v3.DataSource schema = 1;
  // Deprecated. will be removed when gloo 1.10 is released
  bool enable_introspection = 2;
  // Deprecated. will be removed when gloo 1.10 is released
  repeated Resolution resolutions = 3;

  ExecutableSchema executable_schema = 4;
  // In the future, we will support persistent queries, this will be a map of
  // query id to query.
  //    map<string, Query> presistent_queries = 3;
  // when we support persistent queries, we may want to use them exclusivly, for
  // predictable operations. (i.e. no surprise mega query from a client). bool
  // only_persistent_queries = 4;

  // key is either:
  // Type
  // or
  // Type.Field where the latter takes precedence.
  // ??consider  Type and Type.Field **MUST** be in the schema ??
  // missing resolvers will yield error in the response
}


message ExecutableSchema {
  // Schema to use in string format.
  .solo.io.envoy.config.core.v3.DataSource schema_definition = 1;

  // how to execute the schema
  Executor executor = 2;

  // Schema extensions
  map<string, google.protobuf.Any> extensions = 3;
}

message Executor {
  // Execute schema using resolvers.
  message Local {
    // The resolver map to use to resolve the schema.
    repeated Resolution resolutions = 1;
    // Do we enable introspection for the schema? general recommendation is to
    // disable this for production and hence it defaults to false.
    bool enable_introspection = 2;
  }

  // NOT IMPLEMENTED YET!
  // Execute schema by querying a graphql upstream.
  message Remote {
    // Executes a query remotly, as a graphql client.
    string cluster = 1;
  }
  oneof executor {
    Local local = 1;
    Remote remote = 2;
  }
}