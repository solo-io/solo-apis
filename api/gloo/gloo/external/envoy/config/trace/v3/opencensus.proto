syntax = "proto3";

package solo.io.envoy.config.trace.v3;

import "udpa/annotations/migrate.proto";
import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.solo.io.envoy.config.trace.v3";
option java_outer_classname = "OpenCensusProto";
option java_multiple_files = true;
option (solo.io.udpa.annotations.file_migrate).move_to_package = "envoy.extensions.tracers.opencensus.v4alpha";
option (solo.io.udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: OpenCensus tracer]

// Configuration for the OpenCensus tracer.
//
// The OpenCensus tracer is capable of reporting metadata to a collector using W3C-standard Trace Context: https://www.w3.org/TR/trace-context/
// WARNING: users should take care to note that this plugin has a serious limitation that can cause a configuration freeze of Envoy's dynamic listeners. This plugin can be initialised once after Envoy has started. In order to change this plugin's configuration, users must first apply the new configuration, and then restart Envoy. Users should also be aware that once the new configuration is applied, Envoy will reject any changes to its dynamic listeners configuration until after it has been restarted.
// [#extension: envoy.tracers.opencensus]
message OpenCensusConfig {
  option (solo.io.udpa.annotations.versioning).previous_message_type =
      "envoy.config.trace.v2.OpenCensusConfig";

  // Configuration of when to submit traces to the collector.
  // See https://github.com/census-instrumentation/opencensus-proto/blob/3619b5dda8bff26ff1974714c24de8f6d4953811/src/opencensus/proto/trace/v1/trace_config.proto#L29 for full documentation
  TraceConfig trace_config = 1;

  // Enables the OpenCensus agent if set to true.
  bool ocagent_exporter_enabled = 2;

  message OcagentGrpcAddress {
    // URI of the target address
    string target_uri = 1;
    // Prefix for statistical measurements
    string stat_prefix = 2;
  }

  // Upstream to which trace data should be sent
  oneof ocagent_address {
    // Send to upstream over http
    string http_address = 3;
    // Send to upstream over GRPC
    OcagentGrpcAddress grpc_address = 4;
  }

  enum TraceContext {
    // No-op default, no trace context is utilized.
    NONE = 0;

    // W3C Trace-Context format "traceparent:" header.
    TRACE_CONTEXT = 1;

    // Binary "grpc-trace-bin:" header.
    GRPC_TRACE_BIN = 2;

    // "X-Cloud-Trace-Context:" header.
    CLOUD_TRACE_CONTEXT = 3;

    // X-B3-* headers.
    B3 = 4;
  }

  // List of incoming trace context headers to accept. First one found wins
  repeated TraceContext incoming_trace_context = 5;

  // List of outgoing trace context headers we will produce
  repeated TraceContext outgoing_trace_context = 6;
}

message TraceConfig {

  oneof sampler {
    ProbabilitySampler probability_sampler = 1;
    ConstantSampler constant_sampler = 2;
    RateLimitingSampler rate_limiting_sampler = 3;
  }

  // The global default max number of attributes per span.
  int64 max_number_of_attributes = 4;

  // The global default max number of annotation events per span.
  int64 max_number_of_annotations = 5;

  // The global default max number of message events per span.
  int64 max_number_of_message_events = 6;

  // The global default max number of link entries per span.
  int64 max_number_of_links = 7;
}

// Sampler that tries to uniformly sample traces with a given probability.
// The probability of sampling a trace is equal to that of the specified probability.
message ProbabilitySampler {

  // The desired probability of sampling. Must be within [0.0, 1.0].
  double samplingProbability = 1;
}

// Sampler that always makes a constant decision on span sampling.
message ConstantSampler {

  // How spans should be sampled:
  // - Always off
  // - Always on
  // - Always follow the parent Span's decision (off if no parent).
  enum ConstantDecision {
    ALWAYS_OFF = 0;
    ALWAYS_ON = 1;
    ALWAYS_PARENT = 2;
  }
  ConstantDecision decision = 1;
}

// Sampler that tries to sample with a rate per time window.
message RateLimitingSampler {

  // Rate per second.
  int64 qps = 1;
}

option go_package = "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/external/envoy/config/trace/v3";
import "extproto/ext.proto";
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;
option (extproto.equal_all) = true;


