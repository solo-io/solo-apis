syntax = "proto3";
package gateway.solo.io;
option go_package = "github.com/solo-io/solo-apis/pkg/api/gateway.solo.io/v1";

import "google/protobuf/struct.proto";
import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;


import "google/protobuf/wrappers.proto";
import "github.com/solo-io/solo-kit/api/v1/ref.proto";
import "github.com/solo-io/solo-kit/api/v1/solo-kit.proto";

import "github.com/solo-io/solo-apis/api/gloo/gateway/v1/http_gateway.proto";

import "github.com/solo-io/solo-apis/api/gloo/gloo/v1/proxy.proto";
import "github.com/solo-io/solo-apis/api/gloo/gloo/v1/options.proto";
import "github.com/solo-io/solo-apis/api/gloo/gloo/v1/options/hcm/hcm.proto";
import "github.com/solo-io/solo-apis/api/gloo/gloo/v1/ssl/ssl.proto";
import "github.com/solo-io/solo-apis/api/gloo/gloo/v1/core/selectors/selectors.proto";

import "github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/config/core/v3/address.proto";

/*
A Gateway describes a single Listener (bind address:port)
and the routing configuration to upstreams that are reachable via a specific port on the Gateway Proxy itself.
*/
message GatewaySpec {


    // if set to false, only use virtual services without ssl configured.
    // if set to true, only use virtual services with ssl configured.
    // this field is ignored if GatewayType is HybridGateway.
    bool ssl = 1;

    // the bind address the gateway should serve traffic on
    string bind_address = 3;

    // bind ports must not conflict across gateways for a single proxy
    uint32 bind_port = 4;

    // top level optional configuration for all routes on the gateway
    gloo.solo.io.ListenerOptions options = 5;

    reserved 6;


    // Enable ProxyProtocol support for this listener.
    // Deprecated: prefer setting the listener option.
    // If configured, the listener option (filter config) overrides any setting here.
    google.protobuf.BoolValue use_proxy_proto = 8 [deprecated=true];

    // The type of gateway being created
    // HttpGateway creates a listener with an http_connection_manager
    // TcpGateway creates a listener with a tcp proxy filter
    // HybridGateway creates a listener with any number of filter chains that each may have either an http_connection_manager or a tcp proxy filter
    oneof GatewayType {
        HttpGateway http_gateway = 9;
        TcpGateway tcp_gateway = 10;
        HybridGateway hybrid_gateway = 11;
    }

    /*
    * Names of the [`Proxy`](https://docs.solo.io/gloo-edge/latest/reference/api/github.com/solo-io/solo-apis/api/gloo/gloo/v1/proxy.proto.sk/)
    * resources to generate from this gateway. If other gateways exist which point to the same proxy,
    * Gloo will join them together.
    *
    * Proxies have a one-to-many relationship with Envoy bootstrap configuration.
    * In order to connect to Gloo, the Envoy bootstrap configuration sets a `role` in
    * the [node metadata](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/base.proto#envoy-api-msg-core-node)
    * Envoy instances announce their `role` to Gloo, which maps to the  `{{ .Namespace }}~{{ .Name }}`
    * of the Proxy resource.
    *
    * The template for this value can be seen in the [Gloo Helm chart](https://github.com/solo-io/gloo/blob/master/install/helm/gloo/templates/9-gateway-proxy-configmap.yaml#L22)
    *
    * Note: this field also accepts fields written in camel-case. They will be converted
    * to kebab-case in the Proxy name. This allows use of the [Gateway Name Helm value](https://github.com/solo-io/gloo/blob/master/install/helm/gloo/values-gateway-template.yaml#L47)
    * for this field
    *
    * Defaults to `["gateway-proxy"]`
    */
    repeated string proxy_names = 12;

    /*
    * Route configuration options that live under Envoy's [RouteConfigurationOptions](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route.proto#config-route-v3-routeconfiguration)
    */
    gloo.solo.io.RouteConfigurationOptions route_options = 13;
}

message TcpGateway {
    // TCP hosts that the gateway can route to
    repeated gloo.solo.io.TcpHost tcp_hosts = 1;
    // TCP Gateway configuration
    gloo.solo.io.TcpListenerOptions options = 8;
}

message HybridGateway {
    // MatchedGateways can be used to define both HttpGateways and TcpGateways directly on the Gateway resource.
    // If `MatchedGateways` is provided, then `DelegatedHttpGateways` and `DelegatedTcpGateways` are ignored.
    repeated MatchedGateway matched_gateways = 1;

    // DelegatedHttpGateways can be used to configure multiple HttpGateways
    // using the MatchableHttpGateway CR and select them on this Gateway
    // using a resourceRef or label selection.
    // If `MatchedGateways` is provided, then `DelegatedHttpGateways` is ignored.
    DelegatedHttpGateway delegated_http_gateways = 2;

    // DelegatedTcpGateways can be used to configure multiple TcpGateways
    // using the MatchableTcpGateway CR and select them on this Gateway
    // using a resourceRef or label selection.
    // If `MatchedGateways` is provided, then `DelegatedTcpGateways` is ignored.
    DelegatedTcpGateway delegated_tcp_gateways = 3;
}

message DelegatedHttpGateway {

    // How to select MatchableHttpGateways
    oneof selection_type {
        // Delegate to the resource with the given `name` and `namespace.
        core.solo.io.ResourceRef ref = 3;

        // Delegate to the MatchableHttpGateways that match the given selector.
        selectors.core.gloo.solo.io.Selector selector = 4;
    }

    // Used as a meta modifier to the `http_connection_manager_settings` and `ssl_config` fields in a DelegatedHttpGateway.  When set, provided ancestor config cannot be overriden by matched HttpGateways.
    // Useful in a multi-team context, where a controlling team managing a primary Gateway file may want to lock down specific functionality
    // from other teams.
    //
    // For example: (DelegatedHttpGateway, MatchableHttpGateway) = {"a": "a1", "b": "b1"}, {"b": "b2", "c": "c2"}
    // When true:    get_config(MatchableHttpGateway) --> {"a": "a1", "b": "b1", "c": "c2"}
    // When false:   get_config(MatchableHttpGateway) --> {"a": "a1", "b": "b2", "c": "c2"}
    bool prevent_child_overrides = 5;

    // Anscestry-level HTTP Gateway configuration.  Options specified here will be passed down to each `MatchableHttpGateway` that is matched via `selector` or `ref`.  Ultimately, said options will be consumed by instances of `MatchableHttpGateway.http_gateway`
    hcm.options.gloo.solo.io.HttpConnectionManagerSettings http_connection_manager_settings = 6;

    // Anscestry-level TLS/SSL traffic configuration.  Options specified here will be passed down to each `MatchableHttpGateway` that is matched via `selector` or `ref`.  From there, they are passed to all VirtualServices associated with said `MatchableHttpGateway`s.
    gloo.solo.io.SslConfig ssl_config = 2;
}

message DelegatedTcpGateway {

    // How to select MatchableTcpGateways
    oneof selection_type {
        // Delegate to the resource with the given `name` and `namespace.
        core.solo.io.ResourceRef ref = 1;

        // Delegate to the MatchableTcpGateways that match the given selector.
        selectors.core.gloo.solo.io.Selector selector = 2;
    }
}

message MatchedGateway {
    // Matchers are used to define unique matching criteria for each MatchedGateway
    // Each MatchedGateway within a HybridGateway must have a unique Matcher
    // If multiple matchers in a HybridGateway are identical, the HybridGateway will not be accepted
    // Empty Matchers are effectively catch-alls, and there can be no more than one empty Matcher per HybridGateway
    Matcher matcher = 1;

    oneof GatewayType {
        HttpGateway http_gateway = 2;
        TcpGateway tcp_gateway = 3;
    }
}

message Matcher {
    // Gloo use SNI domains as matching criteria for Gateway selection
    // The other ssl_config properties will be applied to the outputFilterChain's transport socket
    // SslConfig from VirtualServices will be ignored in a MatchedGateway
    gloo.solo.io.SslConfig ssl_config = 1;

    // CidrRange specifies an IP Address and a prefix length to construct the subnet mask for a CIDR range.
    // See https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/address.proto#envoy-v3-api-msg-config-core-v3-cidrrange
    repeated .solo.io.envoy.config.core.v3.CidrRange source_prefix_ranges = 2;

    repeated string passthrough_cipher_suites = 3;
}


message GatewayStatus {
	enum State {
			// Pending status indicates the resource has not yet been validated
			Pending = 0;
			// Accepted indicates the resource has been validated
			Accepted = 1;
			// Rejected indicates an invalid configuration by the user
			// Rejected resources may be propagated to the xDS server depending on their severity
			Rejected = 2;
			// Warning indicates a partially invalid configuration by the user
			// Resources with Warnings may be partially accepted by a controller, depending on the implementation
			Warning = 3;
	}
	// State is the enum indicating the state of the resource
	State state = 1;
	// Reason is a description of the error for Rejected resources. If the resource is pending or accepted, this field will be empty
	string reason = 2;
	// Reference to the reporter who wrote this status
	string reported_by = 3;
	// Reference to statuses (by resource-ref string: "Kind.Namespace.Name") of subresources of the parent resource
	map<string, GatewayStatus> subresource_statuses = 4;

	// Opaque details about status results
	google.protobuf.Struct details = 5;
}



message GatewayNamespacedStatuses {
	map<string, GatewayStatus> statuses = 1;
}
