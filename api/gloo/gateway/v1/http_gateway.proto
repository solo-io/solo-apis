syntax = "proto3";
package gateway.solo.io;
option go_package = "github.com/solo-io/solo-apis/pkg/api/gateway.solo.io/v1";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

import "github.com/solo-io/solo-kit/api/v1/ref.proto";

import "github.com/solo-io/solo-apis/api/gloo/gloo/v1/proxy.proto";
import "github.com/solo-io/solo-apis/api/gloo/gloo/v1/options.proto";

message HttpGateway {
  // Names & namespace refs of the virtual services which contain the actual routes for the gateway.
  // If the list is empty, all virtual services in all namespaces that Gloo watches will apply,
  // with accordance to `ssl` flag on `Gateway` above.
  // The default namespace matching behavior can be overridden via `virtual_service_namespaces` flag below.
  // Only one of `virtualServices`, `virtualServiceExpressions` or `virtualServiceSelector` should be provided.
  // If more than one is provided only one will be checked with priority virtualServiceExpressions, virtualServiceSelector, virtualServices
  repeated core.solo.io.ResourceRef virtual_services = 1;

  // Select virtual services by their label. If `virtual_service_namespaces` is provided below, this will apply only
  // to virtual services in the namespaces specified.
  // Only one of `virtualServices`, `virtualServiceExpressions` or `virtualServiceSelector` should be provided.
  // If more than one is provided only one will be checked with priority virtualServiceExpressions, virtualServiceSelector, virtualServices
  map<string, string> virtual_service_selector = 2;

  // Select virtual services using expressions. If `virtual_service_namespaces` is provided below, this will apply only
  // to virtual services in the namespaces specified.
  // Only one of `virtualServices`, `virtualServiceExpressions` or `virtualServiceSelector` should be provided.
  // If more than one is provided only one will be checked with priority virtualServiceExpressions, virtualServiceSelector, virtualServices
  VirtualServiceSelectorExpressions virtual_service_expressions = 9;

  // The virtual services that compose a gateway are referenced by name via `virtual_services` or by label selector
  // via `virtual_service_selector` on the `HttpGateway` object.
  // By default, virtual services match if they are in any namespace watched by Gloo.

  // Restrict the search by providing a list of valid search namespaces here.
  // Setting '*' will search all namespaces, equivalent to omitting this value.
  repeated string virtual_service_namespaces = 3;

  // HTTP Gateway configuration
  gloo.solo.io.HttpListenerOptions options = 8;
}

// Expressions to define which virtual services to select
// Example:
// expressions:
//    - key: domain
//      operator: in
//      values: example.com
message VirtualServiceSelectorExpressions {

  message Expression {
    // Kubernetes label key, must conform to Kubernetes syntax requirements
    // https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set
    string key = 1;

    // Virtual Service Selector expression operator, while the set-based syntax differs from Kubernetes (kubernetes: `key: !mylabel`, gloo: `key: mylabel, operator: "!"` | kubernetes: `key: mylabel`, gloo: `key: mylabel, operator: exists`), the functionality remains the same.
    enum Operator {
      // =
      Equals = 0;
      // ==
      DoubleEquals = 1;
      // !=
      NotEquals = 2;
      // in
      In = 3;
      // notin
      NotIn = 4;
      // exists
      Exists = 5;
      // !
      DoesNotExist = 6;
      // gt
      GreaterThan = 7;
      // lt
      LessThan = 8;
    }
    // The operator can only be in, notin, =, ==, !=, exists, ! (DoesNotExist), gt (GreaterThan), lt (LessThan).
    Operator operator = 2;
    repeated string values = 3;
  }

  // Expressions allow for more flexible virtual service label matching, such as equality-based requirements, set-based requirements, or a combination of both.
  // https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#equality-based-requirement
  repeated Expression expressions = 3;
}