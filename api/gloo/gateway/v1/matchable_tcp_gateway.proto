syntax = "proto3";
package gateway.solo.io;
option go_package = "github.com/solo-io/solo-apis/pkg/api/gateway.solo.io/v1";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/solo-kit/api/v1/status.proto";
import "github.com/solo-io/solo-kit/api/v1/ref.proto";
import "github.com/solo-io/solo-kit/api/v1/solo-kit.proto";

import "github.com/solo-io/solo-apis/api/gloo/gateway/v1/gateway.proto";

import "github.com/solo-io/solo-apis/api/gloo/gloo/v1/ssl/ssl.proto";

import "github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/config/core/v3/address.proto";


/*
A MatchableTcpGateway describes a single FilterChain configured with the TcpProxy network filter and a matcher.

A Gateway CR may select one or more MatchableTcpGateways on a single listener.
This enables separate teams to own Listener configuration (Gateway CR)
and FilterChain configuration (MatchableTcpGateway CR).
*/
message MatchableTcpGateway {

  option (core.solo.io.resource).short_name = "tgw";
  option (core.solo.io.resource).plural_name = "tcp_gateways";

  // NamespacedStatuses indicates the validation status of this resource.
  // NamespacedStatuses is read-only by clients, and set by gateway during validation
  core.solo.io.NamespacedStatuses namespaced_statuses = 1 [(extproto.skip_hashing) = true];

  // Metadata contains the object metadata for this resource
  core.solo.io.Metadata metadata = 2;

  message Matcher {
    // CidrRange specifies an IP Address and a prefix length to construct the subnet mask for a CIDR range.
    // See https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/address.proto#envoy-v3-api-msg-config-core-v3-cidrrange
    repeated .solo.io.envoy.config.core.v3.CidrRange source_prefix_ranges = 1;

    // Ssl configuration applied to the FilterChain, if using passthrough should not include secrets :
    //  - FilterChainMatch: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/listener/v3/listener_components.proto#config-listener-v3-filterchainmatch)
    //  - TransportSocket: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/base.proto#envoy-v3-api-msg-config-core-v3-transportsocket
    gloo.solo.io.SslConfig ssl_config = 2;

    // Enterprise-only: Passthrough cipher suites is an allow-list of OpenSSL cipher suite names for which TLS passthrough will be enabled.
    // If a client does not support any ciphers that are natively supported by Envoy, but does support one of the ciphers in the passthrough list,
    // then traffic will be routed via TCP Proxy to a destination specified by the TcpGateway, where TLS can then be terminated.
    repeated string passthrough_cipher_suites = 3;
  }

  // Matcher creates a FilterChainMatch and TransportSocket for a FilterChain
  // For each MatchableTcpGateway on a Gateway CR, the matcher must be unique.
  // If there are any identical matchers, the Gateway will be rejected.
  // An empty matcher will produce an empty FilterChainMatch (https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/listener/v3/listener_components.proto#envoy-v3-api-msg-config-listener-v3-filterchainmatch)
  // effectively matching all incoming connections
  Matcher matcher = 3;

  // TcpGateway creates a FilterChain with a TcpProxy.
  TcpGateway tcp_gateway = 4;
}