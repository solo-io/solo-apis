syntax = "proto3";

package graphql.gloo.solo.io;

option go_package = "github.com/solo-io/solo-apis/pkg/api/enterprise.gloo.solo.io/v1alpha1";

option java_package = "io.envoyproxy.envoy.config.filter.http.graphql.v2";
option java_outer_classname = "GraphQLFilterProto";
option java_multiple_files = true;

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/solo-kit/api/v1/status.proto";
import "github.com/solo-io/solo-kit/api/v1/solo-kit.proto";
import "github.com/solo-io/solo-kit/api/v1/ref.proto";

import "validate/validate.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

/**
  Using `string` value templates

  When defining resolutions, many instances allow you to use "templated strings", which are strings
  with extra templating capabilities. The following rules must be followed when using a templated strings:
  - templated values will be interpolated into the strings they are in
    * e.g. if `$parent.token` is `ABDEFG`, "Bearer_{$parent.token}" may become "Bearer_ABCDEFG"
  - templated values must start with `{$`, immediately preceded by
    - `parent` for extracting a value from the parent object
    - `args` for extracting a value from the graphql field arguments
    - `headers` for extracting a value from the request headers.
  - `headers` extractions can only have one value in the path to represent the header being extracted
  - for other extractions, e.g. `parent` and `args`, a more complicated path can be used for extracting nested values
    using the following rules:
      - use `a.b` to extract key "b" from object "a"
      - use `a[0]` to extract the 1st element in array "a"
      - use `a[*].b` to extract key "b" from all objects in array "a"
      - use `a[*]` to create a list of key-value pairs from object "a"
      - use `a[*][0]` to create a list of all keys from object "a"
      - use `a[*][1]` to create a list of all values from object "a"

 */

// Defines a configuration for generating outgoing requests for a resolver.
message RequestTemplate {
  // Use this attribute to set request headers to your REST service. It consists of a
  // map of strings to templated value strings. The string key determines the name of the
  // resulting header, the value provided will be the value.
  //
  // The least needed here is the ":method" and ":path" headers.
  // for example, if a header is an authorization token, taken from the graphql args,
  // we can use the following configuration:
  // headers:
  //   Authorization: "Bearer {$args.token}"
  map<string, string> headers = 1;

  // Use this attribute to set query parameters to your REST service. It consists of a
  // map of strings to templated value strings. The string key determines the name of the
  // query param, the provided value will be the value. This value is appended to any
  // value set to the :path header in `headers`.
  //
  // for example, if a query parameter is an id, taken from the graphql parent object,
  // we can use the following configuration:
  // queryParams:
  //   id: "{$parent.id}"
  map<string, string> query_params = 2;

  // Used to construct the outgoing body to the upstream from the
  // graphql value providers.
  // All string values can be templated strings.
  google.protobuf.Value body = 3;
}

message ResponseTemplate {
  /*
    Sets the "root" of the upstream response to be turned into a graphql type by the graphql server.
    For example, if the graphql type is:

    type Simple {
      name String
    }

    and the upstream response is `{"data": {"simple": {"name": "simple name"}}}`,
    the graphql server will not be able to marshal the upstream response into the Simple graphql type
    because it doesn't know where the relevant data is. If we set result_root to "data.simple", we can give the
    graphql server a hint of where to look in the upstream response for the relevant data that graphql type wants.
  */
  string result_root = 1;

  /*
    Field-specific mapping for a graphql field to a JSON path in the upstream response.
    For example, if the graphql type is

    type Simple {
      name String
      number String
    }

    and the upstream response is `{"name": "simple name", "details": {"num": "1234567890"}}`,
    the graphql server will not be able to marshal the upstream response into the Simple graphql type because of the
    nested `number` field. We can use a simple setter here:

    setters:
      number: "details.num"

    and the graphql server will be able to extract data for a field given the path to the relevant data
    in the upstream JSON response. We don't need to have a setter for the `name` field because the JSON
    response has that field in a position the graphql server can understand automatically.
  */
  map<string, string> setters = 2;
}

// Defines a configuration for generating outgoing requests for a resolver.
message GrpcRequestTemplate {
  // json representation of outgoing gRPC message to be sent to gRPC service
  google.protobuf.Value outgoing_message_json = 1;

  // request has shape matching service with name registered in registry
  // is the full_name(), e.g. main.Bookstore
  string service_name = 2;

  // make request to method with this name on the grpc service defined above
  // is just the name(), e.g. GetBook
  string method_name = 3;

  // in the future, we may want to make this a map<string, ValueProvider>
  // once we know better what the use cases are
  map<string, string> request_metadata = 4;
}

// control-plane API
message RESTResolver {
  core.solo.io.ResourceRef upstream_ref = 1;
  // configuration used to compose the outgoing request to a REST API
  RequestTemplate request = 2;
  // configuration used to modify the response from the REST API
  // before being handled by the graphql server.
  ResponseTemplate response = 3;
  string span_name = 4;
}

// Defines a configuration for serializing and deserializing requests for a gRPC resolver.
// Is a Schema Extension
message GrpcDescriptorRegistry {
  oneof descriptor_set {
    option (validate.required) = true;

    // Supplies the filename of
    // :ref:`the proto descriptor set <config_grpc_json_generate_proto_descriptor_set>` for the gRPC
    // services.
    string proto_descriptor = 1;

    // Supplies the binary content of
    // :ref:`the proto descriptor set <config_grpc_json_generate_proto_descriptor_set>` for the gRPC
    // services.
    // Note: in yaml, this must be provided as a base64 standard encoded string; yaml can't handle binary bytes
    bytes proto_descriptor_bin = 2;
  }
}

// control-plane API
message GrpcResolver {
  core.solo.io.ResourceRef upstream_ref = 1;
  // configuration used to compose the outgoing request to a REST API
  GrpcRequestTemplate request_transform = 2;
  string span_name = 4;
}

// Define a named resolver which can be then matched to a field using the `resolve` directive.
// if a field does not have resolver, the default resolver will be used.
// the default resolver takes the field with the same name from the parent, and uses that value
// to resolve the field.
// If a field with the same name does not exist in the parent, null will be used.
message Resolution {
  // The resolver to use.
  oneof resolver {
    RESTResolver rest_resolver = 1;
    GrpcResolver grpc_resolver = 2;
  }
}

// Enterprise-Only: THIS FEATURE IS IN TECH PREVIEW. APIs are versioned as alpha and subject to change.
// User-facing CR config for resolving client requests to graphql schemas.
// Routes that have this config will execute graphql queries, and will not make it to the router filter. i.e. this
// filter will terminate the request for these routes.
// Note: while users can provide this configuration manually, the eventual UX will
// be to generate the Executable Schema CRs from other sources and just have users
// configure the routes to point to these schema CRs.
message GraphQLSchema {

  option (core.solo.io.resource).short_name = "gqls";
  option (core.solo.io.resource).plural_name = "graphql_schemas";

  // NamespacedStatuses indicates the validation status of this resource.
  // NamespacedStatuses is read-only by clients, and set by gloo during validation
  core.solo.io.NamespacedStatuses namespaced_statuses = 1 [(extproto.skip_hashing) = true];

  // Metadata contains the object metadata for this resource
  core.solo.io.Metadata metadata = 2;

  ExecutableSchema executable_schema = 6;
}

message ExecutableSchema {
  // Schema to use in string format.
  string schema_definition = 1;

  // how to execute the schema
  Executor executor = 2;

  // Schema extensions
  GrpcDescriptorRegistry grpc_descriptor_registry = 3;
}

message Executor {
  // Execute schema using resolvers.
  message Local {
    /* Mapping of resolver name to resolver definition.
     The names are used to reference the resolver in the graphql schema.
     For example, a resolver with name "authorResolver" can be defined as
     ```yaml
     authorResolver:
       restResolver:
         upstreamRef: ...
         request:
           ...
         response:
           ...
      ```
      and referenced in the graphql schema as
      ```gql
      type Query {
        author: String @resolve(name: "authorResolver")
      }
      ```
    */
    map<string, Resolution> resolutions = 1;
    // Do we enable introspection for the schema? general recommendation is to
    // disable this for production and hence it defaults to false.
    bool enable_introspection = 2;
  }

  oneof executor {
    Local local = 1;
    // coming soon, schema stitching:
    //Remote remote = 2;
  }
}