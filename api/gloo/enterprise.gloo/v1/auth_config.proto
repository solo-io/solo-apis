syntax = "proto3";
package enterprise.gloo.solo.io;

option go_package = "github.com/solo-io/solo-apis/pkg/api/enterprise.gloo.solo.io/v1";

import "solo-kit/api/v1/ref.proto";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;
import "extproto/ext.proto";
option (extproto.hash_all) = true;

import "solo-kit/api/v1/solo-kit.proto";
import "envoy/api/v2/discovery.proto";
import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";


// This is the user-facing auth configuration. When processed by Gloo, certain configuration types (i.a. oauth, opa)
// will be translated, e.g. to resolve resource references. See the `ExtAuthConfig.AuthConfig` for the final config
// format that will be included in the extauth snapshot.
message AuthConfigSpec {




  message Config {
    oneof auth_config {
      BasicAuth basic_auth = 1;
      OAuth oauth = 2 [deprecated=true];
      OAuth2 oauth2 = 8;
      ApiKeyAuth api_key_auth = 4;
      AuthPlugin plugin_auth = 5;
      OpaAuth opa_auth = 6;
      Ldap ldap = 7;
    }
  }

  repeated Config configs = 3;
}

// Auth configurations defined on virtual hosts, routes, and weighted destinations will be unmarshalled to this message.
message ExtAuthExtension {
  oneof spec {
    //  Set to true to disable auth on the virtual host/route.
    bool disable = 1;
    // A reference to an AuthConfig. This is used to configure the GlooE extauth server.
    core.solo.io.ResourceRef config_ref = 2;
    // Use this field if you are running your own custom extauth server.
    CustomAuth custom_auth = 3;
  }
}

// Global external auth settings
message Settings {
  // The upstream to ask about auth decisions
  core.solo.io.ResourceRef extauthz_server_ref = 1;

  // If this is set, communication to the upstream will be via HTTP and not GRPC.
  HttpService http_service = 2;

  // If the auth server trusted id of the user, it will be set in this header.
  // Specifically this means that this header will be sanitized form the incoming request.
  string user_id_header = 3;

  // Timeout for the ext auth service to respond. Defaults to 200ms
  google.protobuf.Duration request_timeout = 4 [(gogoproto.stdduration) = true];

  // In case of a failure or timeout querying the auth server, normally a request is denied.
  // if this is set to true, the request will be allowed.
  bool failure_mode_allow = 5;

  // Set this if you also want to send the body of the request, and not just the headers.
  BufferSettings request_body = 6;

  // Clears route cache in order to allow the external authorization service to correctly affect
  // routing decisions. Filter clears all cached routes when:
  //
  // 1. The field is set to *true*.
  //
  // 2. The status returned from the authorization service is a HTTP 200 or gRPC 0.
  //
  // 3. At least one *authorization response header* is added to the client request, or is used for
  // altering another client request header.
  //
  bool clear_route_cache = 7;

  // Sets the HTTP status that is returned to the client when there is a network error between the
  // filter and the authorization server. The default status is HTTP 403 Forbidden.
  // If set, this must be one of the following:
  // - 100
  // - 200 201 202 203 204 205 206 207 208 226
  // - 300 301 302 303 304 305 307 308
  // - 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 421 422 423 424 426 428 429 431
  // - 500 501 502 503 504 505 506 507 508 510 511
  uint32 status_on_error = 8;
}

message HttpService {
  // Sets a prefix to the value of authorization request header *Path*.
  string path_prefix = 1;

  message Request {
    // These headers will be copied from the incoming request to the request going
    // to the auth server. Note that in addition to the user's supplied matchers:
    //
    // 1. *Host*, *Method*, *Path* and *Content-Length* are automatically included to the list.
    //
    // 2. *Content-Length* will be set to 0 and the request to the authorization service will not have
    // a message body.
    repeated string allowed_headers = 1;

    // These headers that will be included to the request to authorization service. Note that
    // client request of the same key will be overridden.
    map<string, string> headers_to_add = 2;
  }
  Request request = 2;

  message Response {
    // When this is set, authorization response headers that have a will be added to the original client request and sent to the upstream.
    // Note that coexistent headers will be overridden.
    repeated string allowed_upstream_headers = 1;

    // When this. is set, authorization response headers that will be added to the client's response when auth request is denied.
    // Note that when this list is *not* set, all the authorization response headers, except *Authority
    // (Host)* will be in the response to the client. When a header is included in this list, *Path*,
    // *Status*, *Content-Length*, *WWW-Authenticate* and *Location* are automatically added.
    repeated string allowed_client_headers = 2;
  }
  Response response = 3;
}

// Configuration for buffering the request data.
message BufferSettings {
  // Sets the maximum size of a message body that the filter will hold in memory. Envoy will return
  // *HTTP 413* and will *not* initiate the authorization process when buffer reaches the number
  // set in this field. Note that this setting will have precedence over failure_mode_allow.
  // Defaults to 4KB.
  uint32 max_request_bytes = 1;

  // When this field is true, Envoy will buffer the message until *max_request_bytes* is reached.
  // The authorization request will be dispatched and no 413 HTTP error will be returned by the
  // filter.
  bool allow_partial_message = 2;
}


// Gloo is not expected to configure the ext auth server in this case.
// This is used with custom auth servers.
message CustomAuth {
  // When a request matches the virtual host, route, or weighted destination on which this configuration is defined,
  // Gloo will add the given context_extensions to the request that is sent to the external authorization server.
  // This allows the server to base the auth decision on metadata that you define on the source of the request.
  //
  // This attribute is analogous to Envoy's config.filter.http.ext_authz.v2.CheckSettings. See the official
  // [Envoy documentation](https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/filter/http/ext_authz/v2/ext_authz.proto.html?highlight=ext_authz#config-filter-http-ext-authz-v2-checksettings)
  // for more details.
  map<string,string> context_extensions = 1;
}

message AuthPlugin {
  // Name of the plugin
  string name = 1;
  // Name of the compiled plugin file. If not specified, GlooE will look for an ".so" file with same name as the plugin.
  string plugin_file_name = 2;
  // Name of the exported symbol that implements the plugin interface in the plugin.
  // If not specified, defaults to the name of the plugin
  string exported_symbol_name = 3;

  google.protobuf.Struct config = 4;
}

message BasicAuth {
  string realm = 1;

  message Apr {
    message SaltedHashedPassword {
      string salt = 1;
      string hashed_password = 2;
    }
    map<string, SaltedHashedPassword> users = 2;
  }
  Apr apr = 2;
}

// Deprecated: Prefer OAuth2
message OAuth {
  // your client id as registered with the issuer
  string client_id = 1 [deprecated=true];

  // your client secret as registered with the issuer
  core.solo.io.ResourceRef client_secret_ref = 2 [deprecated=true];

  // The url of the issuer. We will look for OIDC information in issuerUrl+
  // ".well-known/openid-configuration"
  string issuer_url = 3 [deprecated=true];

  // extra query parameters to apply to the Ext-Auth service's authorization request to the identity provider.
  map<string, string> auth_endpoint_query_params = 7 [deprecated=true];

  // we to redirect after successful auth, if we can't determine the original
  // url this should be your publicly available app url.
  string app_url = 4 [deprecated=true];

  // a callback path relative to app url that will be used for OIDC callbacks.
  // needs to not be used by the application
  string callback_path = 5 [deprecated=true];

  // Scopes to request in addition to openid scope.
  repeated string scopes = 6 [deprecated=true];
}

message OAuth2 {
  oneof oauth_type {
    // provide issuer location and let gloo handle OIDC flow for you.
    // requests authorized by validating the contents of ID token.
    // can also authorize the access token if configured.
    OidcAuthorizationCode oidc_authorization_code = 1;

    // provide the access token on the request and let gloo handle authorization.
    //
    // according to https://tools.ietf.org/html/rfc6750 you can pass tokens through:
    // - form-encoded body parameter. recommended, more likely to appear. e.g.: Authorization: Bearer mytoken123
    // - URI query parameter e.g. access_token=mytoken123
    // - and (preferably) secure cookies
    AccessTokenValidation access_token_validation = 2;
  }
}

message OidcAuthorizationCode {
  // your client id as registered with the issuer
  string client_id = 1;

  // your client secret as registered with the issuer
  core.solo.io.ResourceRef client_secret_ref = 2;

  // The url of the issuer. We will look for OIDC information in issuerUrl+
  // ".well-known/openid-configuration"
  string issuer_url = 3;

  // extra query parameters to apply to the Ext-Auth service's authorization request to the identity provider.
  map<string, string> auth_endpoint_query_params = 4;

  // we to redirect after successful auth, if we can't determine the original
  // url this should be your publicly available app url.
  string app_url = 5;

  // a callback path relative to app url that will be used for OIDC callbacks.
  // needs to not be used by the application
  string callback_path = 6;

  // Scopes to request in addition to openid scope.
  repeated string scopes = 7;

  // in the future we may implement this:
  // add optional configuration for validation of the access token received during the OIDC flow
  // AccessTokenValidation access_token_validation = 8;
}

message AccessTokenValidation {

  oneof validation_type {
    // the url for the OAuth2.0 access token introspection endpoint.
    // if provided, the (opaque) access token provided or received from the oauth authorization endpoint
    // will be validated against this endpoint, or locally cached responses for this access token.
    string introspection_url = 1;

    // in the future we may implement jwt and hmac validation
  }

  // the url for the OIDC userinfo endpoint.
  // if provided, the (opaque) access token provided or received from the oauth endpoint
  // will be queried and the userinfo response (or cached response) will be put in the `AuthorizationRequest` state.
  // this can be useful to leverage the userinfo response in, for example, an extauth server plugin.
  string userinfo_url = 4;

  // how long the token introspection and userinfo endpoint response for a specific access token should be kept
  // in the in-memory cache. the result will be invalidated at this timeout, or at "exp" time from the introspection
  // result, whichever comes sooner. if omitted, defaults to 10 minutes. if zero, then no caching will be done.
  google.protobuf.Duration cache_timeout = 5 [(gogoproto.stdduration) = true];
}

message OauthSecret {
  string client_secret = 1;
}

message ApiKeyAuth {
  // identify all valid apikey secrets using the provided label selector.<br/>
  // apikey secrets must be in gloo's watch namespaces for gloo to locate them.<br/>
  // **These are labels on the apikey secret's metadata, not the 'labels' field of the `ApiKeySecret`**
  map<string, string> label_selector = 1;
  // a way to reference apikey secrets individually (good for testing); prefer apikey groups via label selector
  repeated core.solo.io.ResourceRef api_key_secret_refs = 2;
}

message ApiKeySecret {
  // if true, generate an apikey
  bool generate_api_key = 1;
  // if present, use the provided apikey
  string api_key = 2;
  // a list of labels (key=value) for the apikey secret.<br/>
  // These labels are used when creating an ApiKeySecret via `glooctl` and then are copied to the metadata
  // of the created secret.
  repeated string labels = 3;
}

message OpaAuth {
  // An optional resource reference to config maps containing modules to assist in the resolution of `query`.
  repeated core.solo.io.ResourceRef modules = 1;

  // The query that determines the auth decision. The result of this query must be either a boolean
  // or an array with boolean as the first element. A boolean `true` value means that the request
  // will be authorized. Any other value, or error, means that the request will be denied.
  string query = 2;
}

// Authenticates and authorizes requests by querying an LDAP server. Gloo makes the following assumptions:
//  * Requests provide credentials via the basic HTTP authentication header. Gloo will BIND to the LDAP server using the
//    credentials extracted from the header.
//  * Your LDAP server is configured so that each entry you want to authorize has an attribute that indicates its group
//    memberships. A common way of achieving this is by using the [*memberof* overlay](http://www.openldap.org/software/man.cgi?query=slapo-memberof).
message Ldap {

  // Configuration properties for pooling connections to the LDAP server. If the pool is exhausted when a connection
  // is requested (meaning that all the polled connections are in use), the connection will be created on the fly.
  message ConnectionPool {
    // Maximum number connections that are pooled at any give time. The default value is 5.
    google.protobuf.UInt32Value maxSize = 1;
    // Number of connections that the pool will be pre-populated with upon initialization. The default value is 2.
    google.protobuf.UInt32Value initialSize = 2;
  }

  // Address of the LDAP server to query. Should be in the form ADDRESS:PORT, e.g. `ldap.default.svc.cluster.local:389`.
  string address = 1;

  // Template to build user entry distinguished names (DN). This must contains a single occurrence of the "%s" placeholder.
  // When processing a request, Gloo will substitute the name of the user (extracted from the auth header) for the
  // placeholder and issue a search request with the resulting DN as baseDN (and 'base' search scope).
  // E.g. "uid=%s,ou=people,dc=solo,dc=io"
  string userDnTemplate = 2;

  // Case-insensitive name of the attribute that contains the names of the groups an entry is member of. Gloo will look
  // for attributes with the given name to determine which groups the user entry belongs to. Defaults to 'memberOf' if not provided.
  string membershipAttributeName = 3;

  // In order for the request to be authenticated, the membership attribute (e.g. *memberOf*) on the user entry must
  // contain at least of one of the group DNs specified via this option.
  // E.g. []string{ "cn=managers,ou=groups,dc=solo,dc=io", "cn=developers,ou=groups,dc=solo,dc=io" }
  repeated string allowedGroups = 4;

  // Use this property to tune the pool of connections to the LDAP server that Gloo maintains.
  ConnectionPool pool = 5;
}

/*
@solo-kit:xds-service=ExtAuthDiscoveryService
@solo-kit:resource.no_references
 */
message ExtAuthConfig {

  // @solo-kit:resource.name
  // This is the identifier of the AuthConfig resource that this configuration is associated with.
  // Any request to the external auth server includes an identifier that is matched against this field to determine
  // which AuthConfig should be applied to it.
  string auth_config_ref_name = 1;

  // Deprecated, prefer OAuth2Config
  message OAuthConfig {
    // your client id as registered with the issuer
    string client_id = 1 [deprecated=true];

    // your client secret as registered with the issuer
    string client_secret = 2 [(gogoproto.moretags) = "logging:\"redact\"", deprecated=true];

    // The url of the issuer. We will look for OIDC information in issuerUrl+
    // ".well-known/openid-configuration"
    string issuer_url = 3 [deprecated=true];

    // extra query parameters to apply to the Ext-Auth service's authorization request to the identity provider.
    map<string, string> auth_endpoint_query_params = 7 [deprecated=true];

    // we to redirect after successful auth, if we can't determine the original
    // url this should be your publicly available app url.
    string app_url = 4 [deprecated=true];

    // a callback path relative to app url that will be used for OIDC callbacks.
    // needs to not be used by the application
    string callback_path = 5 [deprecated=true];

    // scopes to request in addition to the openid scope.
    repeated string scopes = 6 [deprecated=true];

  }

  message OidcAuthorizationCodeConfig {
    // your client id as registered with the issuer
    string client_id = 1;

    // your client secret as registered with the issuer
    string client_secret = 2 [(gogoproto.moretags) = "logging:\"redact\""];

    // The url of the issuer. We will look for OIDC information in issuerUrl+
    // ".well-known/openid-configuration"
    string issuer_url = 3;

    // extra query parameters to apply to the Ext-Auth service's authorization request to the identity provider.
    map<string, string> auth_endpoint_query_params = 4;

    // we to redirect after successful auth, if we can't determine the original
    // url this should be your publicly available app url.
    string app_url = 5;

    // a callback path relative to app url that will be used for OIDC callbacks.
    // needs to not be used by the application
    string callback_path = 6;

    // scopes to request in addition to the openid scope.
    repeated string scopes = 7;

    // in the future we may implement this:
    // add optional configuration for validation of the access token received during the OIDC flow
    // AccessTokenValidation access_token_validation = 8;
  }

  message OAuth2Config {
    oneof oauth_type {
      // provide issuer location and let gloo handle OIDC flow for you.
      // requests authorized by validating the contents of ID token.
      // can also authorize the access token if configured.
      OidcAuthorizationCodeConfig oidc_authorization_code = 1;

      // provide the access token on the request and let gloo handle authorization.
      //
      // according to https://tools.ietf.org/html/rfc6750 you can pass tokens through:
      // - form-encoded body parameter. recommended, more likely to appear. e.g.: Authorization: Bearer mytoken123
      // - URI query parameter e.g. access_token=mytoken123
      // - and (preferably) secure cookies
      AccessTokenValidation access_token_validation = 2;
    }
  }

  // **NOTE: This configuration is not user-facing and will be auto generated**
  message ApiKeyAuthConfig {
    // A mapping of valid apikeys to their associated plaintext users.
    // This map is automatically populated with the relevant `ApiKeySecret`s.
    // The user is mapped as the name of `Secret` which contains the `ApiKeySecret`
    map<string, string> valid_api_key_and_user = 1 [(gogoproto.moretags) = "logging:\"redact\""];
  }

  message OpaAuthConfig {
    // An optional modules (filename, module content) maps containing modules assist in the resolution of `query`.
    map<string, string> modules = 1;

    // The query that determines the auth decision. The result of this query must be either a boolean
    // or an array with boolean as the first element. A boolean `true` value means that the request
    // will be authorized. Any other value, or error, means that the request will be denied.
    string query = 2;
  }

  message Config {

    reserved 1, 2;

    oneof auth_config {
      OAuthConfig oauth = 3 [deprecated=true];
      OAuth2Config oauth2 = 9;
      BasicAuth basic_auth = 4;
      ApiKeyAuthConfig api_key_auth = 5;
      AuthPlugin plugin_auth = 6;
      OpaAuthConfig opa_auth = 7;
      Ldap ldap = 8;
    }
  }

  repeated Config configs = 8;
}

/*
@solo-kit:resource.xds-enabled
*/
service ExtAuthDiscoveryService {
  rpc StreamExtAuthConfig (stream envoy.api.v2.DiscoveryRequest) returns (stream envoy.api.v2.DiscoveryResponse) {
  }

  rpc DeltaExtAuthConfig (stream envoy.api.v2.DeltaDiscoveryRequest) returns (stream envoy.api.v2.DeltaDiscoveryResponse) {
  }

  rpc FetchExtAuthConfig (envoy.api.v2.DiscoveryRequest) returns (envoy.api.v2.DiscoveryResponse) {
    option (google.api.http) = {
      post : "/v2/discovery:extauthconfig"
      body : "*"
    };
  }
}


message AuthConfigStatus {
	enum State {
			// Pending status indicates the resource has not yet been validated
			Pending = 0;
			// Accepted indicates the resource has been validated
			Accepted = 1;
			// Rejected indicates an invalid configuration by the user
			// Rejected resources may be propagated to the xDS server depending on their severity
			Rejected = 2;
			// Warning indicates a partially invalid configuration by the user
			// Resources with Warnings may be partially accepted by a controller, depending on the implementation
			Warning = 3;
	}
	// State is the enum indicating the state of the resource
	State state = 1;
	// Reason is a description of the error for Rejected resources. If the resource is pending or accepted, this field will be empty
	string reason = 2;
	// Reference to the reporter who wrote this status
	string reported_by = 3;
	// Reference to statuses (by resource-ref string: "Kind.Namespace.Name") of subresources of the parent resource
	map<string, AuthConfigStatus> subresource_statuses = 4;

	// Opaque details about status results
	google.protobuf.Struct details = 5;
}
