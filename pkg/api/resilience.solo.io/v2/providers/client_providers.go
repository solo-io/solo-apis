// Code generated by skv2. DO NOT EDIT.

package v2

import (
	resilience_solo_io_v2 "github.com/solo-io/solo-apis/pkg/api/resilience.solo.io/v2"

	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

/*
  The intention of these providers are to be used for Mocking.
  They expose the Clients as interfaces, as well as factories to provide mocked versions
  of the clients when they require building within a component.

  See package `github.com/solo-io/skv2/pkg/multicluster/register` for example
*/

// Provider for FailoverPolicyClient from Clientset
func FailoverPolicyClientFromClientsetProvider(clients resilience_solo_io_v2.Clientset) resilience_solo_io_v2.FailoverPolicyClient {
	return clients.FailoverPolicies()
}

// Provider for FailoverPolicy Client from Client
func FailoverPolicyClientProvider(client client.Client) resilience_solo_io_v2.FailoverPolicyClient {
	return resilience_solo_io_v2.NewFailoverPolicyClient(client)
}

type FailoverPolicyClientFactory func(client client.Client) resilience_solo_io_v2.FailoverPolicyClient

func FailoverPolicyClientFactoryProvider() FailoverPolicyClientFactory {
	return FailoverPolicyClientProvider
}

type FailoverPolicyClientFromConfigFactory func(cfg *rest.Config) (resilience_solo_io_v2.FailoverPolicyClient, error)

func FailoverPolicyClientFromConfigFactoryProvider() FailoverPolicyClientFromConfigFactory {
	return func(cfg *rest.Config) (resilience_solo_io_v2.FailoverPolicyClient, error) {
		clients, err := resilience_solo_io_v2.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.FailoverPolicies(), nil
	}
}

// Provider for OutlierDetectionPolicyClient from Clientset
func OutlierDetectionPolicyClientFromClientsetProvider(clients resilience_solo_io_v2.Clientset) resilience_solo_io_v2.OutlierDetectionPolicyClient {
	return clients.OutlierDetectionPolicies()
}

// Provider for OutlierDetectionPolicy Client from Client
func OutlierDetectionPolicyClientProvider(client client.Client) resilience_solo_io_v2.OutlierDetectionPolicyClient {
	return resilience_solo_io_v2.NewOutlierDetectionPolicyClient(client)
}

type OutlierDetectionPolicyClientFactory func(client client.Client) resilience_solo_io_v2.OutlierDetectionPolicyClient

func OutlierDetectionPolicyClientFactoryProvider() OutlierDetectionPolicyClientFactory {
	return OutlierDetectionPolicyClientProvider
}

type OutlierDetectionPolicyClientFromConfigFactory func(cfg *rest.Config) (resilience_solo_io_v2.OutlierDetectionPolicyClient, error)

func OutlierDetectionPolicyClientFromConfigFactoryProvider() OutlierDetectionPolicyClientFromConfigFactory {
	return func(cfg *rest.Config) (resilience_solo_io_v2.OutlierDetectionPolicyClient, error) {
		clients, err := resilience_solo_io_v2.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.OutlierDetectionPolicies(), nil
	}
}

// Provider for FaultInjectionPolicyClient from Clientset
func FaultInjectionPolicyClientFromClientsetProvider(clients resilience_solo_io_v2.Clientset) resilience_solo_io_v2.FaultInjectionPolicyClient {
	return clients.FaultInjectionPolicies()
}

// Provider for FaultInjectionPolicy Client from Client
func FaultInjectionPolicyClientProvider(client client.Client) resilience_solo_io_v2.FaultInjectionPolicyClient {
	return resilience_solo_io_v2.NewFaultInjectionPolicyClient(client)
}

type FaultInjectionPolicyClientFactory func(client client.Client) resilience_solo_io_v2.FaultInjectionPolicyClient

func FaultInjectionPolicyClientFactoryProvider() FaultInjectionPolicyClientFactory {
	return FaultInjectionPolicyClientProvider
}

type FaultInjectionPolicyClientFromConfigFactory func(cfg *rest.Config) (resilience_solo_io_v2.FaultInjectionPolicyClient, error)

func FaultInjectionPolicyClientFromConfigFactoryProvider() FaultInjectionPolicyClientFromConfigFactory {
	return func(cfg *rest.Config) (resilience_solo_io_v2.FaultInjectionPolicyClient, error) {
		clients, err := resilience_solo_io_v2.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.FaultInjectionPolicies(), nil
	}
}

// Provider for RetryTimeoutPolicyClient from Clientset
func RetryTimeoutPolicyClientFromClientsetProvider(clients resilience_solo_io_v2.Clientset) resilience_solo_io_v2.RetryTimeoutPolicyClient {
	return clients.RetryTimeoutPolicies()
}

// Provider for RetryTimeoutPolicy Client from Client
func RetryTimeoutPolicyClientProvider(client client.Client) resilience_solo_io_v2.RetryTimeoutPolicyClient {
	return resilience_solo_io_v2.NewRetryTimeoutPolicyClient(client)
}

type RetryTimeoutPolicyClientFactory func(client client.Client) resilience_solo_io_v2.RetryTimeoutPolicyClient

func RetryTimeoutPolicyClientFactoryProvider() RetryTimeoutPolicyClientFactory {
	return RetryTimeoutPolicyClientProvider
}

type RetryTimeoutPolicyClientFromConfigFactory func(cfg *rest.Config) (resilience_solo_io_v2.RetryTimeoutPolicyClient, error)

func RetryTimeoutPolicyClientFromConfigFactoryProvider() RetryTimeoutPolicyClientFromConfigFactory {
	return func(cfg *rest.Config) (resilience_solo_io_v2.RetryTimeoutPolicyClient, error) {
		clients, err := resilience_solo_io_v2.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.RetryTimeoutPolicies(), nil
	}
}
