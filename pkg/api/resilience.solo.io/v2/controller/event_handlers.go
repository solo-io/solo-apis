// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	resilience_solo_io_v2 "github.com/solo-io/solo-apis/pkg/api/resilience.solo.io/v2"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the FailoverPolicy Resource
// DEPRECATED: Prefer reconciler pattern.
type FailoverPolicyEventHandler interface {
	CreateFailoverPolicy(obj *resilience_solo_io_v2.FailoverPolicy) error
	UpdateFailoverPolicy(old, new *resilience_solo_io_v2.FailoverPolicy) error
	DeleteFailoverPolicy(obj *resilience_solo_io_v2.FailoverPolicy) error
	GenericFailoverPolicy(obj *resilience_solo_io_v2.FailoverPolicy) error
}

type FailoverPolicyEventHandlerFuncs struct {
	OnCreate  func(obj *resilience_solo_io_v2.FailoverPolicy) error
	OnUpdate  func(old, new *resilience_solo_io_v2.FailoverPolicy) error
	OnDelete  func(obj *resilience_solo_io_v2.FailoverPolicy) error
	OnGeneric func(obj *resilience_solo_io_v2.FailoverPolicy) error
}

func (f *FailoverPolicyEventHandlerFuncs) CreateFailoverPolicy(obj *resilience_solo_io_v2.FailoverPolicy) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *FailoverPolicyEventHandlerFuncs) DeleteFailoverPolicy(obj *resilience_solo_io_v2.FailoverPolicy) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *FailoverPolicyEventHandlerFuncs) UpdateFailoverPolicy(objOld, objNew *resilience_solo_io_v2.FailoverPolicy) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *FailoverPolicyEventHandlerFuncs) GenericFailoverPolicy(obj *resilience_solo_io_v2.FailoverPolicy) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type FailoverPolicyEventWatcher interface {
	AddEventHandler(ctx context.Context, h FailoverPolicyEventHandler, predicates ...predicate.Predicate) error
}

type failoverPolicyEventWatcher struct {
	watcher events.EventWatcher
}

func NewFailoverPolicyEventWatcher(name string, mgr manager.Manager) FailoverPolicyEventWatcher {
	return &failoverPolicyEventWatcher{
		watcher: events.NewWatcher(name, mgr, &resilience_solo_io_v2.FailoverPolicy{}),
	}
}

func (c *failoverPolicyEventWatcher) AddEventHandler(ctx context.Context, h FailoverPolicyEventHandler, predicates ...predicate.Predicate) error {
	handler := genericFailoverPolicyHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericFailoverPolicyHandler implements a generic events.EventHandler
type genericFailoverPolicyHandler struct {
	handler FailoverPolicyEventHandler
}

func (h genericFailoverPolicyHandler) Create(object client.Object) error {
	obj, ok := object.(*resilience_solo_io_v2.FailoverPolicy)
	if !ok {
		return errors.Errorf("internal error: FailoverPolicy handler received event for %T", object)
	}
	return h.handler.CreateFailoverPolicy(obj)
}

func (h genericFailoverPolicyHandler) Delete(object client.Object) error {
	obj, ok := object.(*resilience_solo_io_v2.FailoverPolicy)
	if !ok {
		return errors.Errorf("internal error: FailoverPolicy handler received event for %T", object)
	}
	return h.handler.DeleteFailoverPolicy(obj)
}

func (h genericFailoverPolicyHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*resilience_solo_io_v2.FailoverPolicy)
	if !ok {
		return errors.Errorf("internal error: FailoverPolicy handler received event for %T", old)
	}
	objNew, ok := new.(*resilience_solo_io_v2.FailoverPolicy)
	if !ok {
		return errors.Errorf("internal error: FailoverPolicy handler received event for %T", new)
	}
	return h.handler.UpdateFailoverPolicy(objOld, objNew)
}

func (h genericFailoverPolicyHandler) Generic(object client.Object) error {
	obj, ok := object.(*resilience_solo_io_v2.FailoverPolicy)
	if !ok {
		return errors.Errorf("internal error: FailoverPolicy handler received event for %T", object)
	}
	return h.handler.GenericFailoverPolicy(obj)
}

// Handle events for the OutlierDetectionPolicy Resource
// DEPRECATED: Prefer reconciler pattern.
type OutlierDetectionPolicyEventHandler interface {
	CreateOutlierDetectionPolicy(obj *resilience_solo_io_v2.OutlierDetectionPolicy) error
	UpdateOutlierDetectionPolicy(old, new *resilience_solo_io_v2.OutlierDetectionPolicy) error
	DeleteOutlierDetectionPolicy(obj *resilience_solo_io_v2.OutlierDetectionPolicy) error
	GenericOutlierDetectionPolicy(obj *resilience_solo_io_v2.OutlierDetectionPolicy) error
}

type OutlierDetectionPolicyEventHandlerFuncs struct {
	OnCreate  func(obj *resilience_solo_io_v2.OutlierDetectionPolicy) error
	OnUpdate  func(old, new *resilience_solo_io_v2.OutlierDetectionPolicy) error
	OnDelete  func(obj *resilience_solo_io_v2.OutlierDetectionPolicy) error
	OnGeneric func(obj *resilience_solo_io_v2.OutlierDetectionPolicy) error
}

func (f *OutlierDetectionPolicyEventHandlerFuncs) CreateOutlierDetectionPolicy(obj *resilience_solo_io_v2.OutlierDetectionPolicy) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *OutlierDetectionPolicyEventHandlerFuncs) DeleteOutlierDetectionPolicy(obj *resilience_solo_io_v2.OutlierDetectionPolicy) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *OutlierDetectionPolicyEventHandlerFuncs) UpdateOutlierDetectionPolicy(objOld, objNew *resilience_solo_io_v2.OutlierDetectionPolicy) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *OutlierDetectionPolicyEventHandlerFuncs) GenericOutlierDetectionPolicy(obj *resilience_solo_io_v2.OutlierDetectionPolicy) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type OutlierDetectionPolicyEventWatcher interface {
	AddEventHandler(ctx context.Context, h OutlierDetectionPolicyEventHandler, predicates ...predicate.Predicate) error
}

type outlierDetectionPolicyEventWatcher struct {
	watcher events.EventWatcher
}

func NewOutlierDetectionPolicyEventWatcher(name string, mgr manager.Manager) OutlierDetectionPolicyEventWatcher {
	return &outlierDetectionPolicyEventWatcher{
		watcher: events.NewWatcher(name, mgr, &resilience_solo_io_v2.OutlierDetectionPolicy{}),
	}
}

func (c *outlierDetectionPolicyEventWatcher) AddEventHandler(ctx context.Context, h OutlierDetectionPolicyEventHandler, predicates ...predicate.Predicate) error {
	handler := genericOutlierDetectionPolicyHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericOutlierDetectionPolicyHandler implements a generic events.EventHandler
type genericOutlierDetectionPolicyHandler struct {
	handler OutlierDetectionPolicyEventHandler
}

func (h genericOutlierDetectionPolicyHandler) Create(object client.Object) error {
	obj, ok := object.(*resilience_solo_io_v2.OutlierDetectionPolicy)
	if !ok {
		return errors.Errorf("internal error: OutlierDetectionPolicy handler received event for %T", object)
	}
	return h.handler.CreateOutlierDetectionPolicy(obj)
}

func (h genericOutlierDetectionPolicyHandler) Delete(object client.Object) error {
	obj, ok := object.(*resilience_solo_io_v2.OutlierDetectionPolicy)
	if !ok {
		return errors.Errorf("internal error: OutlierDetectionPolicy handler received event for %T", object)
	}
	return h.handler.DeleteOutlierDetectionPolicy(obj)
}

func (h genericOutlierDetectionPolicyHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*resilience_solo_io_v2.OutlierDetectionPolicy)
	if !ok {
		return errors.Errorf("internal error: OutlierDetectionPolicy handler received event for %T", old)
	}
	objNew, ok := new.(*resilience_solo_io_v2.OutlierDetectionPolicy)
	if !ok {
		return errors.Errorf("internal error: OutlierDetectionPolicy handler received event for %T", new)
	}
	return h.handler.UpdateOutlierDetectionPolicy(objOld, objNew)
}

func (h genericOutlierDetectionPolicyHandler) Generic(object client.Object) error {
	obj, ok := object.(*resilience_solo_io_v2.OutlierDetectionPolicy)
	if !ok {
		return errors.Errorf("internal error: OutlierDetectionPolicy handler received event for %T", object)
	}
	return h.handler.GenericOutlierDetectionPolicy(obj)
}

// Handle events for the FaultInjectionPolicy Resource
// DEPRECATED: Prefer reconciler pattern.
type FaultInjectionPolicyEventHandler interface {
	CreateFaultInjectionPolicy(obj *resilience_solo_io_v2.FaultInjectionPolicy) error
	UpdateFaultInjectionPolicy(old, new *resilience_solo_io_v2.FaultInjectionPolicy) error
	DeleteFaultInjectionPolicy(obj *resilience_solo_io_v2.FaultInjectionPolicy) error
	GenericFaultInjectionPolicy(obj *resilience_solo_io_v2.FaultInjectionPolicy) error
}

type FaultInjectionPolicyEventHandlerFuncs struct {
	OnCreate  func(obj *resilience_solo_io_v2.FaultInjectionPolicy) error
	OnUpdate  func(old, new *resilience_solo_io_v2.FaultInjectionPolicy) error
	OnDelete  func(obj *resilience_solo_io_v2.FaultInjectionPolicy) error
	OnGeneric func(obj *resilience_solo_io_v2.FaultInjectionPolicy) error
}

func (f *FaultInjectionPolicyEventHandlerFuncs) CreateFaultInjectionPolicy(obj *resilience_solo_io_v2.FaultInjectionPolicy) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *FaultInjectionPolicyEventHandlerFuncs) DeleteFaultInjectionPolicy(obj *resilience_solo_io_v2.FaultInjectionPolicy) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *FaultInjectionPolicyEventHandlerFuncs) UpdateFaultInjectionPolicy(objOld, objNew *resilience_solo_io_v2.FaultInjectionPolicy) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *FaultInjectionPolicyEventHandlerFuncs) GenericFaultInjectionPolicy(obj *resilience_solo_io_v2.FaultInjectionPolicy) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type FaultInjectionPolicyEventWatcher interface {
	AddEventHandler(ctx context.Context, h FaultInjectionPolicyEventHandler, predicates ...predicate.Predicate) error
}

type faultInjectionPolicyEventWatcher struct {
	watcher events.EventWatcher
}

func NewFaultInjectionPolicyEventWatcher(name string, mgr manager.Manager) FaultInjectionPolicyEventWatcher {
	return &faultInjectionPolicyEventWatcher{
		watcher: events.NewWatcher(name, mgr, &resilience_solo_io_v2.FaultInjectionPolicy{}),
	}
}

func (c *faultInjectionPolicyEventWatcher) AddEventHandler(ctx context.Context, h FaultInjectionPolicyEventHandler, predicates ...predicate.Predicate) error {
	handler := genericFaultInjectionPolicyHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericFaultInjectionPolicyHandler implements a generic events.EventHandler
type genericFaultInjectionPolicyHandler struct {
	handler FaultInjectionPolicyEventHandler
}

func (h genericFaultInjectionPolicyHandler) Create(object client.Object) error {
	obj, ok := object.(*resilience_solo_io_v2.FaultInjectionPolicy)
	if !ok {
		return errors.Errorf("internal error: FaultInjectionPolicy handler received event for %T", object)
	}
	return h.handler.CreateFaultInjectionPolicy(obj)
}

func (h genericFaultInjectionPolicyHandler) Delete(object client.Object) error {
	obj, ok := object.(*resilience_solo_io_v2.FaultInjectionPolicy)
	if !ok {
		return errors.Errorf("internal error: FaultInjectionPolicy handler received event for %T", object)
	}
	return h.handler.DeleteFaultInjectionPolicy(obj)
}

func (h genericFaultInjectionPolicyHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*resilience_solo_io_v2.FaultInjectionPolicy)
	if !ok {
		return errors.Errorf("internal error: FaultInjectionPolicy handler received event for %T", old)
	}
	objNew, ok := new.(*resilience_solo_io_v2.FaultInjectionPolicy)
	if !ok {
		return errors.Errorf("internal error: FaultInjectionPolicy handler received event for %T", new)
	}
	return h.handler.UpdateFaultInjectionPolicy(objOld, objNew)
}

func (h genericFaultInjectionPolicyHandler) Generic(object client.Object) error {
	obj, ok := object.(*resilience_solo_io_v2.FaultInjectionPolicy)
	if !ok {
		return errors.Errorf("internal error: FaultInjectionPolicy handler received event for %T", object)
	}
	return h.handler.GenericFaultInjectionPolicy(obj)
}

// Handle events for the RetryTimeoutPolicy Resource
// DEPRECATED: Prefer reconciler pattern.
type RetryTimeoutPolicyEventHandler interface {
	CreateRetryTimeoutPolicy(obj *resilience_solo_io_v2.RetryTimeoutPolicy) error
	UpdateRetryTimeoutPolicy(old, new *resilience_solo_io_v2.RetryTimeoutPolicy) error
	DeleteRetryTimeoutPolicy(obj *resilience_solo_io_v2.RetryTimeoutPolicy) error
	GenericRetryTimeoutPolicy(obj *resilience_solo_io_v2.RetryTimeoutPolicy) error
}

type RetryTimeoutPolicyEventHandlerFuncs struct {
	OnCreate  func(obj *resilience_solo_io_v2.RetryTimeoutPolicy) error
	OnUpdate  func(old, new *resilience_solo_io_v2.RetryTimeoutPolicy) error
	OnDelete  func(obj *resilience_solo_io_v2.RetryTimeoutPolicy) error
	OnGeneric func(obj *resilience_solo_io_v2.RetryTimeoutPolicy) error
}

func (f *RetryTimeoutPolicyEventHandlerFuncs) CreateRetryTimeoutPolicy(obj *resilience_solo_io_v2.RetryTimeoutPolicy) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *RetryTimeoutPolicyEventHandlerFuncs) DeleteRetryTimeoutPolicy(obj *resilience_solo_io_v2.RetryTimeoutPolicy) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *RetryTimeoutPolicyEventHandlerFuncs) UpdateRetryTimeoutPolicy(objOld, objNew *resilience_solo_io_v2.RetryTimeoutPolicy) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *RetryTimeoutPolicyEventHandlerFuncs) GenericRetryTimeoutPolicy(obj *resilience_solo_io_v2.RetryTimeoutPolicy) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type RetryTimeoutPolicyEventWatcher interface {
	AddEventHandler(ctx context.Context, h RetryTimeoutPolicyEventHandler, predicates ...predicate.Predicate) error
}

type retryTimeoutPolicyEventWatcher struct {
	watcher events.EventWatcher
}

func NewRetryTimeoutPolicyEventWatcher(name string, mgr manager.Manager) RetryTimeoutPolicyEventWatcher {
	return &retryTimeoutPolicyEventWatcher{
		watcher: events.NewWatcher(name, mgr, &resilience_solo_io_v2.RetryTimeoutPolicy{}),
	}
}

func (c *retryTimeoutPolicyEventWatcher) AddEventHandler(ctx context.Context, h RetryTimeoutPolicyEventHandler, predicates ...predicate.Predicate) error {
	handler := genericRetryTimeoutPolicyHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericRetryTimeoutPolicyHandler implements a generic events.EventHandler
type genericRetryTimeoutPolicyHandler struct {
	handler RetryTimeoutPolicyEventHandler
}

func (h genericRetryTimeoutPolicyHandler) Create(object client.Object) error {
	obj, ok := object.(*resilience_solo_io_v2.RetryTimeoutPolicy)
	if !ok {
		return errors.Errorf("internal error: RetryTimeoutPolicy handler received event for %T", object)
	}
	return h.handler.CreateRetryTimeoutPolicy(obj)
}

func (h genericRetryTimeoutPolicyHandler) Delete(object client.Object) error {
	obj, ok := object.(*resilience_solo_io_v2.RetryTimeoutPolicy)
	if !ok {
		return errors.Errorf("internal error: RetryTimeoutPolicy handler received event for %T", object)
	}
	return h.handler.DeleteRetryTimeoutPolicy(obj)
}

func (h genericRetryTimeoutPolicyHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*resilience_solo_io_v2.RetryTimeoutPolicy)
	if !ok {
		return errors.Errorf("internal error: RetryTimeoutPolicy handler received event for %T", old)
	}
	objNew, ok := new.(*resilience_solo_io_v2.RetryTimeoutPolicy)
	if !ok {
		return errors.Errorf("internal error: RetryTimeoutPolicy handler received event for %T", new)
	}
	return h.handler.UpdateRetryTimeoutPolicy(objOld, objNew)
}

func (h genericRetryTimeoutPolicyHandler) Generic(object client.Object) error {
	obj, ok := object.(*resilience_solo_io_v2.RetryTimeoutPolicy)
	if !ok {
		return errors.Errorf("internal error: RetryTimeoutPolicy handler received event for %T", object)
	}
	return h.handler.GenericRetryTimeoutPolicy(obj)
}
