// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/internal/v2/portal_config.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_golang_protobuf_ptypes_struct "github.com/golang/protobuf/ptypes/struct"

	github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/pkg/api/common.gloo.solo.io/v2"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *PortalConfigSpec) Clone() proto.Message {
	var target *PortalConfigSpec
	if m == nil {
		return target
	}
	target = &PortalConfigSpec{}

	if h, ok := interface{}(m.GetPortalCustomMetadata()).(clone.Cloner); ok {
		target.PortalCustomMetadata = h.Clone().(*github_com_golang_protobuf_ptypes_struct.Value)
	} else {
		target.PortalCustomMetadata = proto.Clone(m.GetPortalCustomMetadata()).(*github_com_golang_protobuf_ptypes_struct.Value)
	}

	if m.GetApis() != nil {
		target.Apis = make([]*PortalConfigSpec_API, len(m.GetApis()))
		for idx, v := range m.GetApis() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Apis[idx] = h.Clone().(*PortalConfigSpec_API)
			} else {
				target.Apis[idx] = proto.Clone(v).(*PortalConfigSpec_API)
			}

		}
	}

	if m.GetUsagePlans() != nil {
		target.UsagePlans = make([]*PortalConfigSpec_UsagePlan, len(m.GetUsagePlans()))
		for idx, v := range m.GetUsagePlans() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.UsagePlans[idx] = h.Clone().(*PortalConfigSpec_UsagePlan)
			} else {
				target.UsagePlans[idx] = proto.Clone(v).(*PortalConfigSpec_UsagePlan)
			}

		}
	}

	if h, ok := interface{}(m.GetPortalRef()).(clone.Cloner); ok {
		target.PortalRef = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.ObjectReference)
	} else {
		target.PortalRef = proto.Clone(m.GetPortalRef()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.ObjectReference)
	}

	if m.GetDomains() != nil {
		target.Domains = make([]string, len(m.GetDomains()))
		for idx, v := range m.GetDomains() {

			target.Domains[idx] = v

		}
	}

	return target
}

// Clone function
func (m *PortalConfigStatus) Clone() proto.Message {
	var target *PortalConfigStatus
	if m == nil {
		return target
	}
	target = &PortalConfigStatus{}

	target.ObservedGeneration = m.GetObservedGeneration()

	target.Error = m.GetError()

	return target
}

// Clone function
func (m *PortalConfigNewStatus) Clone() proto.Message {
	var target *PortalConfigNewStatus
	if m == nil {
		return target
	}
	target = &PortalConfigNewStatus{}

	if h, ok := interface{}(m.GetCommon()).(clone.Cloner); ok {
		target.Common = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.Status)
	} else {
		target.Common = proto.Clone(m.GetCommon()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.Status)
	}

	return target
}

// Clone function
func (m *PortalConfigReport) Clone() proto.Message {
	var target *PortalConfigReport
	if m == nil {
		return target
	}
	target = &PortalConfigReport{}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.Report, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.Report)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.Report)
			}

		}
	}

	return target
}

// Clone function
func (m *PortalConfigSpec_API) Clone() proto.Message {
	var target *PortalConfigSpec_API
	if m == nil {
		return target
	}
	target = &PortalConfigSpec_API{}

	target.Title = m.GetTitle()

	target.Description = m.GetDescription()

	target.TermsOfService = m.GetTermsOfService()

	target.Contact = m.GetContact()

	target.License = m.GetLicense()

	if h, ok := interface{}(m.GetApiSchema()).(clone.Cloner); ok {
		target.ApiSchema = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.ObjectReference)
	} else {
		target.ApiSchema = proto.Clone(m.GetApiSchema()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.ObjectReference)
	}

	if h, ok := interface{}(m.GetRouteTable()).(clone.Cloner); ok {
		target.RouteTable = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.ObjectReference)
	} else {
		target.RouteTable = proto.Clone(m.GetRouteTable()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.ObjectReference)
	}

	if m.GetUsagePlans() != nil {
		target.UsagePlans = make([]*PortalConfigSpec_UsagePlanRef, len(m.GetUsagePlans()))
		for idx, v := range m.GetUsagePlans() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.UsagePlans[idx] = h.Clone().(*PortalConfigSpec_UsagePlanRef)
			} else {
				target.UsagePlans[idx] = proto.Clone(v).(*PortalConfigSpec_UsagePlanRef)
			}

		}
	}

	return target
}

// Clone function
func (m *PortalConfigSpec_UsagePlan) Clone() proto.Message {
	var target *PortalConfigSpec_UsagePlan
	if m == nil {
		return target
	}
	target = &PortalConfigSpec_UsagePlan{}

	target.Name = m.GetName()

	target.DisplayName = m.GetDisplayName()

	target.Description = m.GetDescription()

	if m.GetAuthPolicies() != nil {
		target.AuthPolicies = make([]*PortalConfigSpec_AuthPolicy, len(m.GetAuthPolicies()))
		for idx, v := range m.GetAuthPolicies() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.AuthPolicies[idx] = h.Clone().(*PortalConfigSpec_AuthPolicy)
			} else {
				target.AuthPolicies[idx] = proto.Clone(v).(*PortalConfigSpec_AuthPolicy)
			}

		}
	}

	if h, ok := interface{}(m.GetRateLimitPolicy()).(clone.Cloner); ok {
		target.RateLimitPolicy = h.Clone().(*PortalConfigSpec_RateLimitPolicy)
	} else {
		target.RateLimitPolicy = proto.Clone(m.GetRateLimitPolicy()).(*PortalConfigSpec_RateLimitPolicy)
	}

	return target
}

// Clone function
func (m *PortalConfigSpec_UsagePlanRef) Clone() proto.Message {
	var target *PortalConfigSpec_UsagePlanRef
	if m == nil {
		return target
	}
	target = &PortalConfigSpec_UsagePlanRef{}

	target.Name = m.GetName()

	return target
}

// Clone function
func (m *PortalConfigSpec_AuthPolicy) Clone() proto.Message {
	var target *PortalConfigSpec_AuthPolicy
	if m == nil {
		return target
	}
	target = &PortalConfigSpec_AuthPolicy{}

	target.AuthType = m.GetAuthType()

	if m.GetAuthLabelSelector() != nil {
		target.AuthLabelSelector = make([]*PortalConfigSpec_AuthLabelSelector, len(m.GetAuthLabelSelector()))
		for idx, v := range m.GetAuthLabelSelector() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.AuthLabelSelector[idx] = h.Clone().(*PortalConfigSpec_AuthLabelSelector)
			} else {
				target.AuthLabelSelector[idx] = proto.Clone(v).(*PortalConfigSpec_AuthLabelSelector)
			}

		}
	}

	return target
}

// Clone function
func (m *PortalConfigSpec_AuthLabelSelector) Clone() proto.Message {
	var target *PortalConfigSpec_AuthLabelSelector
	if m == nil {
		return target
	}
	target = &PortalConfigSpec_AuthLabelSelector{}

	target.Key = m.GetKey()

	target.Value = m.GetValue()

	return target
}

// Clone function
func (m *PortalConfigSpec_RateLimitPolicy) Clone() proto.Message {
	var target *PortalConfigSpec_RateLimitPolicy
	if m == nil {
		return target
	}
	target = &PortalConfigSpec_RateLimitPolicy{}

	target.Unit = m.GetUnit()

	target.RequestsPerUnit = m.GetRequestsPerUnit()

	return target
}
