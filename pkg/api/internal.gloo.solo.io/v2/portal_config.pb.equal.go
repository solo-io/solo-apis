// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/internal/v2/portal_config.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *PortalConfigSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalConfigSpec)
	if !ok {
		that2, ok := that.(PortalConfigSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetPortalCustomMetadata()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPortalCustomMetadata()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPortalCustomMetadata(), target.GetPortalCustomMetadata()) {
			return false
		}
	}

	if len(m.GetApis()) != len(target.GetApis()) {
		return false
	}
	for idx, v := range m.GetApis() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetApis()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetApis()[idx]) {
				return false
			}
		}

	}

	if len(m.GetUsagePlans()) != len(target.GetUsagePlans()) {
		return false
	}
	for idx, v := range m.GetUsagePlans() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetUsagePlans()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetUsagePlans()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetPortalRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPortalRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPortalRef(), target.GetPortalRef()) {
			return false
		}
	}

	if len(m.GetDomains()) != len(target.GetDomains()) {
		return false
	}
	for idx, v := range m.GetDomains() {

		if strings.Compare(v, target.GetDomains()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetGroups()) != len(target.GetGroups()) {
		return false
	}
	for idx, v := range m.GetGroups() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetGroups()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetGroups()[idx]) {
				return false
			}
		}

	}

	if m.GetPublic() != target.GetPublic() {
		return false
	}

	return true
}

// Equal function
func (m *PortalConfigStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalConfigStatus)
	if !ok {
		that2, ok := that.(PortalConfigStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetObservedGeneration() != target.GetObservedGeneration() {
		return false
	}

	if strings.Compare(m.GetError(), target.GetError()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *PortalConfigNewStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalConfigNewStatus)
	if !ok {
		that2, ok := that.(PortalConfigNewStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetCommon()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCommon()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCommon(), target.GetCommon()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *PortalConfigReport) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalConfigReport)
	if !ok {
		that2, ok := that.(PortalConfigReport)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetWorkspaces()) != len(target.GetWorkspaces()) {
		return false
	}
	for k, v := range m.GetWorkspaces() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetWorkspaces()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetWorkspaces()[k]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *PortalConfigSpec_Group) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalConfigSpec_Group)
	if !ok {
		that2, ok := that.(PortalConfigSpec_Group)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if len(m.GetApis()) != len(target.GetApis()) {
		return false
	}
	for idx, v := range m.GetApis() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetApis()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetApis()[idx]) {
				return false
			}
		}

	}

	if len(m.GetUsagePlans()) != len(target.GetUsagePlans()) {
		return false
	}
	for idx, v := range m.GetUsagePlans() {

		if strings.Compare(v, target.GetUsagePlans()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetMembershipClaims()) != len(target.GetMembershipClaims()) {
		return false
	}
	for idx, v := range m.GetMembershipClaims() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetMembershipClaims()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetMembershipClaims()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *PortalConfigSpec_API) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalConfigSpec_API)
	if !ok {
		that2, ok := that.(PortalConfigSpec_API)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetTitle(), target.GetTitle()) != 0 {
		return false
	}

	if strings.Compare(m.GetDescription(), target.GetDescription()) != 0 {
		return false
	}

	if strings.Compare(m.GetTermsOfService(), target.GetTermsOfService()) != 0 {
		return false
	}

	if strings.Compare(m.GetContact(), target.GetContact()) != 0 {
		return false
	}

	if strings.Compare(m.GetLicense(), target.GetLicense()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetApiSchema()).(equality.Equalizer); ok {
		if !h.Equal(target.GetApiSchema()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetApiSchema(), target.GetApiSchema()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRouteTable()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRouteTable()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRouteTable(), target.GetRouteTable()) {
			return false
		}
	}

	if len(m.GetUsagePlans()) != len(target.GetUsagePlans()) {
		return false
	}
	for idx, v := range m.GetUsagePlans() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetUsagePlans()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetUsagePlans()[idx]) {
				return false
			}
		}

	}

	if m.GetIsPrivate() != target.GetIsPrivate() {
		return false
	}

	return true
}

// Equal function
func (m *PortalConfigSpec_UsagePlan) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalConfigSpec_UsagePlan)
	if !ok {
		that2, ok := that.(PortalConfigSpec_UsagePlan)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetDisplayName(), target.GetDisplayName()) != 0 {
		return false
	}

	if strings.Compare(m.GetDescription(), target.GetDescription()) != 0 {
		return false
	}

	if len(m.GetExtAuthPolicies()) != len(target.GetExtAuthPolicies()) {
		return false
	}
	for idx, v := range m.GetExtAuthPolicies() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetExtAuthPolicies()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetExtAuthPolicies()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetRateLimitPolicy()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRateLimitPolicy()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRateLimitPolicy(), target.GetRateLimitPolicy()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *PortalConfigSpec_UsagePlanRef) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalConfigSpec_UsagePlanRef)
	if !ok {
		that2, ok := that.(PortalConfigSpec_UsagePlanRef)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *PortalConfigSpec_ExtAuthPolicy) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalConfigSpec_ExtAuthPolicy)
	if !ok {
		that2, ok := that.(PortalConfigSpec_ExtAuthPolicy)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetExtAuthType() != target.GetExtAuthType() {
		return false
	}

	if len(m.GetExtAuthLabelSelector()) != len(target.GetExtAuthLabelSelector()) {
		return false
	}
	for idx, v := range m.GetExtAuthLabelSelector() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetExtAuthLabelSelector()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetExtAuthLabelSelector()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetExtAuthPolicyRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetExtAuthPolicyRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetExtAuthPolicyRef(), target.GetExtAuthPolicyRef()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *PortalConfigSpec_ExtAuthLabelSelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalConfigSpec_ExtAuthLabelSelector)
	if !ok {
		that2, ok := that.(PortalConfigSpec_ExtAuthLabelSelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetKey(), target.GetKey()) != 0 {
		return false
	}

	if strings.Compare(m.GetValue(), target.GetValue()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *PortalConfigSpec_RateLimitPolicy) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalConfigSpec_RateLimitPolicy)
	if !ok {
		that2, ok := that.(PortalConfigSpec_RateLimitPolicy)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetUnit() != target.GetUnit() {
		return false
	}

	if m.GetRequestsPerUnit() != target.GetRequestsPerUnit() {
		return false
	}

	if h, ok := interface{}(m.GetRateLimitPolicyRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRateLimitPolicyRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRateLimitPolicyRef(), target.GetRateLimitPolicyRef()) {
			return false
		}
	}

	return true
}
