// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	observability_gloo_solo_io_v2 "github.com/solo-io/solo-apis/pkg/api/observability.gloo.solo.io/v2"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the AccessLogPolicy Resource across clusters.
// implemented by the user
type MulticlusterAccessLogPolicyReconciler interface {
	ReconcileAccessLogPolicy(clusterName string, obj *observability_gloo_solo_io_v2.AccessLogPolicy) (reconcile.Result, error)
}

// Reconcile deletion events for the AccessLogPolicy Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterAccessLogPolicyDeletionReconciler interface {
	ReconcileAccessLogPolicyDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterAccessLogPolicyReconcilerFuncs struct {
	OnReconcileAccessLogPolicy         func(clusterName string, obj *observability_gloo_solo_io_v2.AccessLogPolicy) (reconcile.Result, error)
	OnReconcileAccessLogPolicyDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterAccessLogPolicyReconcilerFuncs) ReconcileAccessLogPolicy(clusterName string, obj *observability_gloo_solo_io_v2.AccessLogPolicy) (reconcile.Result, error) {
	if f.OnReconcileAccessLogPolicy == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileAccessLogPolicy(clusterName, obj)
}

func (f *MulticlusterAccessLogPolicyReconcilerFuncs) ReconcileAccessLogPolicyDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileAccessLogPolicyDeletion == nil {
		return nil
	}
	return f.OnReconcileAccessLogPolicyDeletion(clusterName, req)
}

type MulticlusterAccessLogPolicyReconcileLoop interface {
	// AddMulticlusterAccessLogPolicyReconciler adds a MulticlusterAccessLogPolicyReconciler to the MulticlusterAccessLogPolicyReconcileLoop.
	AddMulticlusterAccessLogPolicyReconciler(ctx context.Context, rec MulticlusterAccessLogPolicyReconciler, predicates ...predicate.Predicate)
}

type multiclusterAccessLogPolicyReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterAccessLogPolicyReconcileLoop) AddMulticlusterAccessLogPolicyReconciler(ctx context.Context, rec MulticlusterAccessLogPolicyReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericAccessLogPolicyMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterAccessLogPolicyReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterAccessLogPolicyReconcileLoop {
	return &multiclusterAccessLogPolicyReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &observability_gloo_solo_io_v2.AccessLogPolicy{}, options)}
}

type genericAccessLogPolicyMulticlusterReconciler struct {
	reconciler MulticlusterAccessLogPolicyReconciler
}

func (g genericAccessLogPolicyMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterAccessLogPolicyDeletionReconciler); ok {
		return deletionReconciler.ReconcileAccessLogPolicyDeletion(cluster, req)
	}
	return nil
}

func (g genericAccessLogPolicyMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*observability_gloo_solo_io_v2.AccessLogPolicy)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: AccessLogPolicy handler received event for %T", object)
	}
	return g.reconciler.ReconcileAccessLogPolicy(cluster, obj)
}
