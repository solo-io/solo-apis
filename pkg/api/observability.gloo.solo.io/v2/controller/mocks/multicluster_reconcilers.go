// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	v2 "github.com/solo-io/solo-apis/pkg/api/observability.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/pkg/api/observability.gloo.solo.io/v2/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMulticlusterAccessLogPolicyReconciler is a mock of MulticlusterAccessLogPolicyReconciler interface
type MockMulticlusterAccessLogPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterAccessLogPolicyReconcilerMockRecorder
}

// MockMulticlusterAccessLogPolicyReconcilerMockRecorder is the mock recorder for MockMulticlusterAccessLogPolicyReconciler
type MockMulticlusterAccessLogPolicyReconcilerMockRecorder struct {
	mock *MockMulticlusterAccessLogPolicyReconciler
}

// NewMockMulticlusterAccessLogPolicyReconciler creates a new mock instance
func NewMockMulticlusterAccessLogPolicyReconciler(ctrl *gomock.Controller) *MockMulticlusterAccessLogPolicyReconciler {
	mock := &MockMulticlusterAccessLogPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterAccessLogPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterAccessLogPolicyReconciler) EXPECT() *MockMulticlusterAccessLogPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileAccessLogPolicy mocks base method
func (m *MockMulticlusterAccessLogPolicyReconciler) ReconcileAccessLogPolicy(clusterName string, obj *v2.AccessLogPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileAccessLogPolicy", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileAccessLogPolicy indicates an expected call of ReconcileAccessLogPolicy
func (mr *MockMulticlusterAccessLogPolicyReconcilerMockRecorder) ReconcileAccessLogPolicy(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileAccessLogPolicy", reflect.TypeOf((*MockMulticlusterAccessLogPolicyReconciler)(nil).ReconcileAccessLogPolicy), clusterName, obj)
}

// MockMulticlusterAccessLogPolicyDeletionReconciler is a mock of MulticlusterAccessLogPolicyDeletionReconciler interface
type MockMulticlusterAccessLogPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterAccessLogPolicyDeletionReconcilerMockRecorder
}

// MockMulticlusterAccessLogPolicyDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterAccessLogPolicyDeletionReconciler
type MockMulticlusterAccessLogPolicyDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterAccessLogPolicyDeletionReconciler
}

// NewMockMulticlusterAccessLogPolicyDeletionReconciler creates a new mock instance
func NewMockMulticlusterAccessLogPolicyDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterAccessLogPolicyDeletionReconciler {
	mock := &MockMulticlusterAccessLogPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterAccessLogPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterAccessLogPolicyDeletionReconciler) EXPECT() *MockMulticlusterAccessLogPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileAccessLogPolicyDeletion mocks base method
func (m *MockMulticlusterAccessLogPolicyDeletionReconciler) ReconcileAccessLogPolicyDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileAccessLogPolicyDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileAccessLogPolicyDeletion indicates an expected call of ReconcileAccessLogPolicyDeletion
func (mr *MockMulticlusterAccessLogPolicyDeletionReconcilerMockRecorder) ReconcileAccessLogPolicyDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileAccessLogPolicyDeletion", reflect.TypeOf((*MockMulticlusterAccessLogPolicyDeletionReconciler)(nil).ReconcileAccessLogPolicyDeletion), clusterName, req)
}

// MockMulticlusterAccessLogPolicyReconcileLoop is a mock of MulticlusterAccessLogPolicyReconcileLoop interface
type MockMulticlusterAccessLogPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterAccessLogPolicyReconcileLoopMockRecorder
}

// MockMulticlusterAccessLogPolicyReconcileLoopMockRecorder is the mock recorder for MockMulticlusterAccessLogPolicyReconcileLoop
type MockMulticlusterAccessLogPolicyReconcileLoopMockRecorder struct {
	mock *MockMulticlusterAccessLogPolicyReconcileLoop
}

// NewMockMulticlusterAccessLogPolicyReconcileLoop creates a new mock instance
func NewMockMulticlusterAccessLogPolicyReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterAccessLogPolicyReconcileLoop {
	mock := &MockMulticlusterAccessLogPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterAccessLogPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterAccessLogPolicyReconcileLoop) EXPECT() *MockMulticlusterAccessLogPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterAccessLogPolicyReconciler mocks base method
func (m *MockMulticlusterAccessLogPolicyReconcileLoop) AddMulticlusterAccessLogPolicyReconciler(ctx context.Context, rec controller.MulticlusterAccessLogPolicyReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterAccessLogPolicyReconciler", varargs...)
}

// AddMulticlusterAccessLogPolicyReconciler indicates an expected call of AddMulticlusterAccessLogPolicyReconciler
func (mr *MockMulticlusterAccessLogPolicyReconcileLoopMockRecorder) AddMulticlusterAccessLogPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterAccessLogPolicyReconciler", reflect.TypeOf((*MockMulticlusterAccessLogPolicyReconcileLoop)(nil).AddMulticlusterAccessLogPolicyReconciler), varargs...)
}
