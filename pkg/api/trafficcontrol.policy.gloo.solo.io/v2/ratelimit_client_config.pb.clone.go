// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/policy/v2/trafficcontrol/ratelimit_client_config.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/pkg/api/common.gloo.solo.io/v2"

	github_com_solo_io_solo_apis_pkg_api_ratelimit_solo_io_v1alpha1 "github.com/solo-io/solo-apis/pkg/api/ratelimit.solo.io/v1alpha1"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *RateLimitClientConfigSpec) Clone() proto.Message {
	var target *RateLimitClientConfigSpec
	if m == nil {
		return target
	}
	target = &RateLimitClientConfigSpec{}

	switch m.ConfigType.(type) {

	case *RateLimitClientConfigSpec_Raw:

		if h, ok := interface{}(m.GetRaw()).(clone.Cloner); ok {
			target.ConfigType = &RateLimitClientConfigSpec_Raw{
				Raw: h.Clone().(*Raw),
			}
		} else {
			target.ConfigType = &RateLimitClientConfigSpec_Raw{
				Raw: proto.Clone(m.GetRaw()).(*Raw),
			}
		}

	}

	return target
}

// Clone function
func (m *Raw) Clone() proto.Message {
	var target *Raw
	if m == nil {
		return target
	}
	target = &Raw{}

	if m.GetRateLimits() != nil {
		target.RateLimits = make([]*github_com_solo_io_solo_apis_pkg_api_ratelimit_solo_io_v1alpha1.RateLimitActions, len(m.GetRateLimits()))
		for idx, v := range m.GetRateLimits() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.RateLimits[idx] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_ratelimit_solo_io_v1alpha1.RateLimitActions)
			} else {
				target.RateLimits[idx] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_ratelimit_solo_io_v1alpha1.RateLimitActions)
			}

		}
	}

	return target
}

// Clone function
func (m *RateLimitClientConfigStatus) Clone() proto.Message {
	var target *RateLimitClientConfigStatus
	if m == nil {
		return target
	}
	target = &RateLimitClientConfigStatus{}

	if h, ok := interface{}(m.GetGlobal()).(clone.Cloner); ok {
		target.Global = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.GenericGlobalStatus)
	} else {
		target.Global = proto.Clone(m.GetGlobal()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.GenericGlobalStatus)
	}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus)
			}

		}
	}

	return target
}

// Clone function
func (m *RateLimitClientConfigNewStatus) Clone() proto.Message {
	var target *RateLimitClientConfigNewStatus
	if m == nil {
		return target
	}
	target = &RateLimitClientConfigNewStatus{}

	if h, ok := interface{}(m.GetCommon()).(clone.Cloner); ok {
		target.Common = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.Status)
	} else {
		target.Common = proto.Clone(m.GetCommon()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.Status)
	}

	return target
}

// Clone function
func (m *RateLimitClientConfigReport) Clone() proto.Message {
	var target *RateLimitClientConfigReport
	if m == nil {
		return target
	}
	target = &RateLimitClientConfigReport{}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.Report, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.Report)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.Report)
			}

		}
	}

	return target
}
