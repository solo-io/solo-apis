// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v2sets

import (
	trafficcontrol_policy_gloo_solo_io_v2 "github.com/solo-io/solo-apis/pkg/api/trafficcontrol.policy.gloo.solo.io/v2"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type MirrorPolicySet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy) bool) []*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy) bool) []*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy
	// Return the Set as a map of key to resource.
	Map() map[string]*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy
	// Insert a resource into the set.
	Insert(mirrorPolicy ...*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(mirrorPolicySet MirrorPolicySet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(mirrorPolicy ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(mirrorPolicy ezkube.ResourceId)
	// Return the union with the provided set
	Union(set MirrorPolicySet) MirrorPolicySet
	// Return the difference with the provided set
	Difference(set MirrorPolicySet) MirrorPolicySet
	// Return the intersection with the provided set
	Intersection(set MirrorPolicySet) MirrorPolicySet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another MirrorPolicySet
	Delta(newSet MirrorPolicySet) sksets.ResourceDelta
	// Create a deep copy of the current MirrorPolicySet
	Clone() MirrorPolicySet
}

func makeGenericMirrorPolicySet(mirrorPolicyList []*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range mirrorPolicyList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type mirrorPolicySet struct {
	set sksets.ResourceSet
}

func NewMirrorPolicySet(mirrorPolicyList ...*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy) MirrorPolicySet {
	return &mirrorPolicySet{set: makeGenericMirrorPolicySet(mirrorPolicyList)}
}

func NewMirrorPolicySetFromList(mirrorPolicyList *trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicyList) MirrorPolicySet {
	list := make([]*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy, 0, len(mirrorPolicyList.Items))
	for idx := range mirrorPolicyList.Items {
		list = append(list, &mirrorPolicyList.Items[idx])
	}
	return &mirrorPolicySet{set: makeGenericMirrorPolicySet(list)}
}

func (s *mirrorPolicySet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *mirrorPolicySet) List(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy) bool) []*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy))
		})
	}

	objs := s.Generic().List(genericFilters...)
	mirrorPolicyList := make([]*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy, 0, len(objs))
	for _, obj := range objs {
		mirrorPolicyList = append(mirrorPolicyList, obj.(*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy))
	}
	return mirrorPolicyList
}

func (s *mirrorPolicySet) UnsortedList(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy) bool) []*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy))
		})
	}

	var mirrorPolicyList []*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		mirrorPolicyList = append(mirrorPolicyList, obj.(*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy))
	}
	return mirrorPolicyList
}

func (s *mirrorPolicySet) Map() map[string]*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy {
	if s == nil {
		return nil
	}

	newMap := map[string]*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy)
	}
	return newMap
}

func (s *mirrorPolicySet) Insert(
	mirrorPolicyList ...*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range mirrorPolicyList {
		s.Generic().Insert(obj)
	}
}

func (s *mirrorPolicySet) Has(mirrorPolicy ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(mirrorPolicy)
}

func (s *mirrorPolicySet) Equal(
	mirrorPolicySet MirrorPolicySet,
) bool {
	if s == nil {
		return mirrorPolicySet == nil
	}
	return s.Generic().Equal(mirrorPolicySet.Generic())
}

func (s *mirrorPolicySet) Delete(MirrorPolicy ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(MirrorPolicy)
}

func (s *mirrorPolicySet) Union(set MirrorPolicySet) MirrorPolicySet {
	if s == nil {
		return set
	}
	return NewMirrorPolicySet(append(s.List(), set.List()...)...)
}

func (s *mirrorPolicySet) Difference(set MirrorPolicySet) MirrorPolicySet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &mirrorPolicySet{set: newSet}
}

func (s *mirrorPolicySet) Intersection(set MirrorPolicySet) MirrorPolicySet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var mirrorPolicyList []*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy
	for _, obj := range newSet.List() {
		mirrorPolicyList = append(mirrorPolicyList, obj.(*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy))
	}
	return NewMirrorPolicySet(mirrorPolicyList...)
}

func (s *mirrorPolicySet) Find(id ezkube.ResourceId) (*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find MirrorPolicy %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*trafficcontrol_policy_gloo_solo_io_v2.MirrorPolicy), nil
}

func (s *mirrorPolicySet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *mirrorPolicySet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *mirrorPolicySet) Delta(newSet MirrorPolicySet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *mirrorPolicySet) Clone() MirrorPolicySet {
	if s == nil {
		return nil
	}
	return &mirrorPolicySet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type RateLimitPolicySet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy) bool) []*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy) bool) []*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy
	// Return the Set as a map of key to resource.
	Map() map[string]*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy
	// Insert a resource into the set.
	Insert(rateLimitPolicy ...*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(rateLimitPolicySet RateLimitPolicySet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(rateLimitPolicy ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(rateLimitPolicy ezkube.ResourceId)
	// Return the union with the provided set
	Union(set RateLimitPolicySet) RateLimitPolicySet
	// Return the difference with the provided set
	Difference(set RateLimitPolicySet) RateLimitPolicySet
	// Return the intersection with the provided set
	Intersection(set RateLimitPolicySet) RateLimitPolicySet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another RateLimitPolicySet
	Delta(newSet RateLimitPolicySet) sksets.ResourceDelta
	// Create a deep copy of the current RateLimitPolicySet
	Clone() RateLimitPolicySet
}

func makeGenericRateLimitPolicySet(rateLimitPolicyList []*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range rateLimitPolicyList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type rateLimitPolicySet struct {
	set sksets.ResourceSet
}

func NewRateLimitPolicySet(rateLimitPolicyList ...*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy) RateLimitPolicySet {
	return &rateLimitPolicySet{set: makeGenericRateLimitPolicySet(rateLimitPolicyList)}
}

func NewRateLimitPolicySetFromList(rateLimitPolicyList *trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicyList) RateLimitPolicySet {
	list := make([]*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy, 0, len(rateLimitPolicyList.Items))
	for idx := range rateLimitPolicyList.Items {
		list = append(list, &rateLimitPolicyList.Items[idx])
	}
	return &rateLimitPolicySet{set: makeGenericRateLimitPolicySet(list)}
}

func (s *rateLimitPolicySet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *rateLimitPolicySet) List(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy) bool) []*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy))
		})
	}

	objs := s.Generic().List(genericFilters...)
	rateLimitPolicyList := make([]*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy, 0, len(objs))
	for _, obj := range objs {
		rateLimitPolicyList = append(rateLimitPolicyList, obj.(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy))
	}
	return rateLimitPolicyList
}

func (s *rateLimitPolicySet) UnsortedList(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy) bool) []*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy))
		})
	}

	var rateLimitPolicyList []*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		rateLimitPolicyList = append(rateLimitPolicyList, obj.(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy))
	}
	return rateLimitPolicyList
}

func (s *rateLimitPolicySet) Map() map[string]*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy {
	if s == nil {
		return nil
	}

	newMap := map[string]*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy)
	}
	return newMap
}

func (s *rateLimitPolicySet) Insert(
	rateLimitPolicyList ...*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range rateLimitPolicyList {
		s.Generic().Insert(obj)
	}
}

func (s *rateLimitPolicySet) Has(rateLimitPolicy ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(rateLimitPolicy)
}

func (s *rateLimitPolicySet) Equal(
	rateLimitPolicySet RateLimitPolicySet,
) bool {
	if s == nil {
		return rateLimitPolicySet == nil
	}
	return s.Generic().Equal(rateLimitPolicySet.Generic())
}

func (s *rateLimitPolicySet) Delete(RateLimitPolicy ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(RateLimitPolicy)
}

func (s *rateLimitPolicySet) Union(set RateLimitPolicySet) RateLimitPolicySet {
	if s == nil {
		return set
	}
	return NewRateLimitPolicySet(append(s.List(), set.List()...)...)
}

func (s *rateLimitPolicySet) Difference(set RateLimitPolicySet) RateLimitPolicySet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &rateLimitPolicySet{set: newSet}
}

func (s *rateLimitPolicySet) Intersection(set RateLimitPolicySet) RateLimitPolicySet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var rateLimitPolicyList []*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy
	for _, obj := range newSet.List() {
		rateLimitPolicyList = append(rateLimitPolicyList, obj.(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy))
	}
	return NewRateLimitPolicySet(rateLimitPolicyList...)
}

func (s *rateLimitPolicySet) Find(id ezkube.ResourceId) (*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find RateLimitPolicy %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitPolicy), nil
}

func (s *rateLimitPolicySet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *rateLimitPolicySet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *rateLimitPolicySet) Delta(newSet RateLimitPolicySet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *rateLimitPolicySet) Clone() RateLimitPolicySet {
	if s == nil {
		return nil
	}
	return &rateLimitPolicySet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type RateLimitClientConfigSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig) bool) []*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig) bool) []*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig
	// Return the Set as a map of key to resource.
	Map() map[string]*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig
	// Insert a resource into the set.
	Insert(rateLimitClientConfig ...*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(rateLimitClientConfigSet RateLimitClientConfigSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(rateLimitClientConfig ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(rateLimitClientConfig ezkube.ResourceId)
	// Return the union with the provided set
	Union(set RateLimitClientConfigSet) RateLimitClientConfigSet
	// Return the difference with the provided set
	Difference(set RateLimitClientConfigSet) RateLimitClientConfigSet
	// Return the intersection with the provided set
	Intersection(set RateLimitClientConfigSet) RateLimitClientConfigSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another RateLimitClientConfigSet
	Delta(newSet RateLimitClientConfigSet) sksets.ResourceDelta
	// Create a deep copy of the current RateLimitClientConfigSet
	Clone() RateLimitClientConfigSet
}

func makeGenericRateLimitClientConfigSet(rateLimitClientConfigList []*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range rateLimitClientConfigList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type rateLimitClientConfigSet struct {
	set sksets.ResourceSet
}

func NewRateLimitClientConfigSet(rateLimitClientConfigList ...*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig) RateLimitClientConfigSet {
	return &rateLimitClientConfigSet{set: makeGenericRateLimitClientConfigSet(rateLimitClientConfigList)}
}

func NewRateLimitClientConfigSetFromList(rateLimitClientConfigList *trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfigList) RateLimitClientConfigSet {
	list := make([]*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig, 0, len(rateLimitClientConfigList.Items))
	for idx := range rateLimitClientConfigList.Items {
		list = append(list, &rateLimitClientConfigList.Items[idx])
	}
	return &rateLimitClientConfigSet{set: makeGenericRateLimitClientConfigSet(list)}
}

func (s *rateLimitClientConfigSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *rateLimitClientConfigSet) List(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig) bool) []*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig))
		})
	}

	objs := s.Generic().List(genericFilters...)
	rateLimitClientConfigList := make([]*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig, 0, len(objs))
	for _, obj := range objs {
		rateLimitClientConfigList = append(rateLimitClientConfigList, obj.(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig))
	}
	return rateLimitClientConfigList
}

func (s *rateLimitClientConfigSet) UnsortedList(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig) bool) []*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig))
		})
	}

	var rateLimitClientConfigList []*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		rateLimitClientConfigList = append(rateLimitClientConfigList, obj.(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig))
	}
	return rateLimitClientConfigList
}

func (s *rateLimitClientConfigSet) Map() map[string]*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig {
	if s == nil {
		return nil
	}

	newMap := map[string]*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig)
	}
	return newMap
}

func (s *rateLimitClientConfigSet) Insert(
	rateLimitClientConfigList ...*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range rateLimitClientConfigList {
		s.Generic().Insert(obj)
	}
}

func (s *rateLimitClientConfigSet) Has(rateLimitClientConfig ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(rateLimitClientConfig)
}

func (s *rateLimitClientConfigSet) Equal(
	rateLimitClientConfigSet RateLimitClientConfigSet,
) bool {
	if s == nil {
		return rateLimitClientConfigSet == nil
	}
	return s.Generic().Equal(rateLimitClientConfigSet.Generic())
}

func (s *rateLimitClientConfigSet) Delete(RateLimitClientConfig ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(RateLimitClientConfig)
}

func (s *rateLimitClientConfigSet) Union(set RateLimitClientConfigSet) RateLimitClientConfigSet {
	if s == nil {
		return set
	}
	return NewRateLimitClientConfigSet(append(s.List(), set.List()...)...)
}

func (s *rateLimitClientConfigSet) Difference(set RateLimitClientConfigSet) RateLimitClientConfigSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &rateLimitClientConfigSet{set: newSet}
}

func (s *rateLimitClientConfigSet) Intersection(set RateLimitClientConfigSet) RateLimitClientConfigSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var rateLimitClientConfigList []*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig
	for _, obj := range newSet.List() {
		rateLimitClientConfigList = append(rateLimitClientConfigList, obj.(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig))
	}
	return NewRateLimitClientConfigSet(rateLimitClientConfigList...)
}

func (s *rateLimitClientConfigSet) Find(id ezkube.ResourceId) (*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find RateLimitClientConfig %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*trafficcontrol_policy_gloo_solo_io_v2.RateLimitClientConfig), nil
}

func (s *rateLimitClientConfigSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *rateLimitClientConfigSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *rateLimitClientConfigSet) Delta(newSet RateLimitClientConfigSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *rateLimitClientConfigSet) Clone() RateLimitClientConfigSet {
	if s == nil {
		return nil
	}
	return &rateLimitClientConfigSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type HeaderManipulationPolicySet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy) bool) []*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy) bool) []*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy
	// Return the Set as a map of key to resource.
	Map() map[string]*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy
	// Insert a resource into the set.
	Insert(headerManipulationPolicy ...*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(headerManipulationPolicySet HeaderManipulationPolicySet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(headerManipulationPolicy ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(headerManipulationPolicy ezkube.ResourceId)
	// Return the union with the provided set
	Union(set HeaderManipulationPolicySet) HeaderManipulationPolicySet
	// Return the difference with the provided set
	Difference(set HeaderManipulationPolicySet) HeaderManipulationPolicySet
	// Return the intersection with the provided set
	Intersection(set HeaderManipulationPolicySet) HeaderManipulationPolicySet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another HeaderManipulationPolicySet
	Delta(newSet HeaderManipulationPolicySet) sksets.ResourceDelta
	// Create a deep copy of the current HeaderManipulationPolicySet
	Clone() HeaderManipulationPolicySet
}

func makeGenericHeaderManipulationPolicySet(headerManipulationPolicyList []*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range headerManipulationPolicyList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type headerManipulationPolicySet struct {
	set sksets.ResourceSet
}

func NewHeaderManipulationPolicySet(headerManipulationPolicyList ...*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy) HeaderManipulationPolicySet {
	return &headerManipulationPolicySet{set: makeGenericHeaderManipulationPolicySet(headerManipulationPolicyList)}
}

func NewHeaderManipulationPolicySetFromList(headerManipulationPolicyList *trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicyList) HeaderManipulationPolicySet {
	list := make([]*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy, 0, len(headerManipulationPolicyList.Items))
	for idx := range headerManipulationPolicyList.Items {
		list = append(list, &headerManipulationPolicyList.Items[idx])
	}
	return &headerManipulationPolicySet{set: makeGenericHeaderManipulationPolicySet(list)}
}

func (s *headerManipulationPolicySet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *headerManipulationPolicySet) List(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy) bool) []*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy))
		})
	}

	objs := s.Generic().List(genericFilters...)
	headerManipulationPolicyList := make([]*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy, 0, len(objs))
	for _, obj := range objs {
		headerManipulationPolicyList = append(headerManipulationPolicyList, obj.(*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy))
	}
	return headerManipulationPolicyList
}

func (s *headerManipulationPolicySet) UnsortedList(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy) bool) []*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy))
		})
	}

	var headerManipulationPolicyList []*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		headerManipulationPolicyList = append(headerManipulationPolicyList, obj.(*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy))
	}
	return headerManipulationPolicyList
}

func (s *headerManipulationPolicySet) Map() map[string]*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy {
	if s == nil {
		return nil
	}

	newMap := map[string]*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy)
	}
	return newMap
}

func (s *headerManipulationPolicySet) Insert(
	headerManipulationPolicyList ...*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range headerManipulationPolicyList {
		s.Generic().Insert(obj)
	}
}

func (s *headerManipulationPolicySet) Has(headerManipulationPolicy ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(headerManipulationPolicy)
}

func (s *headerManipulationPolicySet) Equal(
	headerManipulationPolicySet HeaderManipulationPolicySet,
) bool {
	if s == nil {
		return headerManipulationPolicySet == nil
	}
	return s.Generic().Equal(headerManipulationPolicySet.Generic())
}

func (s *headerManipulationPolicySet) Delete(HeaderManipulationPolicy ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(HeaderManipulationPolicy)
}

func (s *headerManipulationPolicySet) Union(set HeaderManipulationPolicySet) HeaderManipulationPolicySet {
	if s == nil {
		return set
	}
	return NewHeaderManipulationPolicySet(append(s.List(), set.List()...)...)
}

func (s *headerManipulationPolicySet) Difference(set HeaderManipulationPolicySet) HeaderManipulationPolicySet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &headerManipulationPolicySet{set: newSet}
}

func (s *headerManipulationPolicySet) Intersection(set HeaderManipulationPolicySet) HeaderManipulationPolicySet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var headerManipulationPolicyList []*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy
	for _, obj := range newSet.List() {
		headerManipulationPolicyList = append(headerManipulationPolicyList, obj.(*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy))
	}
	return NewHeaderManipulationPolicySet(headerManipulationPolicyList...)
}

func (s *headerManipulationPolicySet) Find(id ezkube.ResourceId) (*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find HeaderManipulationPolicy %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*trafficcontrol_policy_gloo_solo_io_v2.HeaderManipulationPolicy), nil
}

func (s *headerManipulationPolicySet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *headerManipulationPolicySet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *headerManipulationPolicySet) Delta(newSet HeaderManipulationPolicySet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *headerManipulationPolicySet) Clone() HeaderManipulationPolicySet {
	if s == nil {
		return nil
	}
	return &headerManipulationPolicySet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type TransformationPolicySet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy) bool) []*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy) bool) []*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy
	// Return the Set as a map of key to resource.
	Map() map[string]*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy
	// Insert a resource into the set.
	Insert(transformationPolicy ...*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(transformationPolicySet TransformationPolicySet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(transformationPolicy ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(transformationPolicy ezkube.ResourceId)
	// Return the union with the provided set
	Union(set TransformationPolicySet) TransformationPolicySet
	// Return the difference with the provided set
	Difference(set TransformationPolicySet) TransformationPolicySet
	// Return the intersection with the provided set
	Intersection(set TransformationPolicySet) TransformationPolicySet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another TransformationPolicySet
	Delta(newSet TransformationPolicySet) sksets.ResourceDelta
	// Create a deep copy of the current TransformationPolicySet
	Clone() TransformationPolicySet
}

func makeGenericTransformationPolicySet(transformationPolicyList []*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range transformationPolicyList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type transformationPolicySet struct {
	set sksets.ResourceSet
}

func NewTransformationPolicySet(transformationPolicyList ...*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy) TransformationPolicySet {
	return &transformationPolicySet{set: makeGenericTransformationPolicySet(transformationPolicyList)}
}

func NewTransformationPolicySetFromList(transformationPolicyList *trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicyList) TransformationPolicySet {
	list := make([]*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy, 0, len(transformationPolicyList.Items))
	for idx := range transformationPolicyList.Items {
		list = append(list, &transformationPolicyList.Items[idx])
	}
	return &transformationPolicySet{set: makeGenericTransformationPolicySet(list)}
}

func (s *transformationPolicySet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *transformationPolicySet) List(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy) bool) []*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy))
		})
	}

	objs := s.Generic().List(genericFilters...)
	transformationPolicyList := make([]*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy, 0, len(objs))
	for _, obj := range objs {
		transformationPolicyList = append(transformationPolicyList, obj.(*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy))
	}
	return transformationPolicyList
}

func (s *transformationPolicySet) UnsortedList(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy) bool) []*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy))
		})
	}

	var transformationPolicyList []*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		transformationPolicyList = append(transformationPolicyList, obj.(*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy))
	}
	return transformationPolicyList
}

func (s *transformationPolicySet) Map() map[string]*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy {
	if s == nil {
		return nil
	}

	newMap := map[string]*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy)
	}
	return newMap
}

func (s *transformationPolicySet) Insert(
	transformationPolicyList ...*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range transformationPolicyList {
		s.Generic().Insert(obj)
	}
}

func (s *transformationPolicySet) Has(transformationPolicy ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(transformationPolicy)
}

func (s *transformationPolicySet) Equal(
	transformationPolicySet TransformationPolicySet,
) bool {
	if s == nil {
		return transformationPolicySet == nil
	}
	return s.Generic().Equal(transformationPolicySet.Generic())
}

func (s *transformationPolicySet) Delete(TransformationPolicy ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(TransformationPolicy)
}

func (s *transformationPolicySet) Union(set TransformationPolicySet) TransformationPolicySet {
	if s == nil {
		return set
	}
	return NewTransformationPolicySet(append(s.List(), set.List()...)...)
}

func (s *transformationPolicySet) Difference(set TransformationPolicySet) TransformationPolicySet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &transformationPolicySet{set: newSet}
}

func (s *transformationPolicySet) Intersection(set TransformationPolicySet) TransformationPolicySet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var transformationPolicyList []*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy
	for _, obj := range newSet.List() {
		transformationPolicyList = append(transformationPolicyList, obj.(*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy))
	}
	return NewTransformationPolicySet(transformationPolicyList...)
}

func (s *transformationPolicySet) Find(id ezkube.ResourceId) (*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find TransformationPolicy %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*trafficcontrol_policy_gloo_solo_io_v2.TransformationPolicy), nil
}

func (s *transformationPolicySet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *transformationPolicySet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *transformationPolicySet) Delta(newSet TransformationPolicySet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *transformationPolicySet) Clone() TransformationPolicySet {
	if s == nil {
		return nil
	}
	return &transformationPolicySet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type ProxyProtocolPolicySet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy) bool) []*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy) bool) []*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy
	// Return the Set as a map of key to resource.
	Map() map[string]*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy
	// Insert a resource into the set.
	Insert(proxyProtocolPolicy ...*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(proxyProtocolPolicySet ProxyProtocolPolicySet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(proxyProtocolPolicy ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(proxyProtocolPolicy ezkube.ResourceId)
	// Return the union with the provided set
	Union(set ProxyProtocolPolicySet) ProxyProtocolPolicySet
	// Return the difference with the provided set
	Difference(set ProxyProtocolPolicySet) ProxyProtocolPolicySet
	// Return the intersection with the provided set
	Intersection(set ProxyProtocolPolicySet) ProxyProtocolPolicySet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another ProxyProtocolPolicySet
	Delta(newSet ProxyProtocolPolicySet) sksets.ResourceDelta
	// Create a deep copy of the current ProxyProtocolPolicySet
	Clone() ProxyProtocolPolicySet
}

func makeGenericProxyProtocolPolicySet(proxyProtocolPolicyList []*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range proxyProtocolPolicyList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type proxyProtocolPolicySet struct {
	set sksets.ResourceSet
}

func NewProxyProtocolPolicySet(proxyProtocolPolicyList ...*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy) ProxyProtocolPolicySet {
	return &proxyProtocolPolicySet{set: makeGenericProxyProtocolPolicySet(proxyProtocolPolicyList)}
}

func NewProxyProtocolPolicySetFromList(proxyProtocolPolicyList *trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicyList) ProxyProtocolPolicySet {
	list := make([]*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy, 0, len(proxyProtocolPolicyList.Items))
	for idx := range proxyProtocolPolicyList.Items {
		list = append(list, &proxyProtocolPolicyList.Items[idx])
	}
	return &proxyProtocolPolicySet{set: makeGenericProxyProtocolPolicySet(list)}
}

func (s *proxyProtocolPolicySet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *proxyProtocolPolicySet) List(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy) bool) []*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy))
		})
	}

	objs := s.Generic().List(genericFilters...)
	proxyProtocolPolicyList := make([]*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy, 0, len(objs))
	for _, obj := range objs {
		proxyProtocolPolicyList = append(proxyProtocolPolicyList, obj.(*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy))
	}
	return proxyProtocolPolicyList
}

func (s *proxyProtocolPolicySet) UnsortedList(filterResource ...func(*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy) bool) []*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy))
		})
	}

	var proxyProtocolPolicyList []*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		proxyProtocolPolicyList = append(proxyProtocolPolicyList, obj.(*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy))
	}
	return proxyProtocolPolicyList
}

func (s *proxyProtocolPolicySet) Map() map[string]*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy {
	if s == nil {
		return nil
	}

	newMap := map[string]*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy)
	}
	return newMap
}

func (s *proxyProtocolPolicySet) Insert(
	proxyProtocolPolicyList ...*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range proxyProtocolPolicyList {
		s.Generic().Insert(obj)
	}
}

func (s *proxyProtocolPolicySet) Has(proxyProtocolPolicy ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(proxyProtocolPolicy)
}

func (s *proxyProtocolPolicySet) Equal(
	proxyProtocolPolicySet ProxyProtocolPolicySet,
) bool {
	if s == nil {
		return proxyProtocolPolicySet == nil
	}
	return s.Generic().Equal(proxyProtocolPolicySet.Generic())
}

func (s *proxyProtocolPolicySet) Delete(ProxyProtocolPolicy ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(ProxyProtocolPolicy)
}

func (s *proxyProtocolPolicySet) Union(set ProxyProtocolPolicySet) ProxyProtocolPolicySet {
	if s == nil {
		return set
	}
	return NewProxyProtocolPolicySet(append(s.List(), set.List()...)...)
}

func (s *proxyProtocolPolicySet) Difference(set ProxyProtocolPolicySet) ProxyProtocolPolicySet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &proxyProtocolPolicySet{set: newSet}
}

func (s *proxyProtocolPolicySet) Intersection(set ProxyProtocolPolicySet) ProxyProtocolPolicySet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var proxyProtocolPolicyList []*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy
	for _, obj := range newSet.List() {
		proxyProtocolPolicyList = append(proxyProtocolPolicyList, obj.(*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy))
	}
	return NewProxyProtocolPolicySet(proxyProtocolPolicyList...)
}

func (s *proxyProtocolPolicySet) Find(id ezkube.ResourceId) (*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find ProxyProtocolPolicy %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*trafficcontrol_policy_gloo_solo_io_v2.ProxyProtocolPolicy), nil
}

func (s *proxyProtocolPolicySet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *proxyProtocolPolicySet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *proxyProtocolPolicySet) Delta(newSet ProxyProtocolPolicySet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *proxyProtocolPolicySet) Clone() ProxyProtocolPolicySet {
	if s == nil {
		return nil
	}
	return &proxyProtocolPolicySet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}
