// Code generated by skv2. DO NOT EDIT.

package v1alpha1

import (
	"context"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the gateway.gloo.solo.io/v1alpha1 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the gateway.gloo.solo.io/v1alpha1 APIs
type Clientset interface {
	// clienset for the gateway.gloo.solo.io/v1alpha1/v1alpha1 APIs
	GatewayParameters() GatewayParametersClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := SchemeBuilder.AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the gateway.gloo.solo.io/v1alpha1/v1alpha1 APIs
func (c *clientSet) GatewayParameters() GatewayParametersClient {
	return NewGatewayParametersClient(c.client)
}

// Reader knows how to read and list GatewayParameterss.
type GatewayParametersReader interface {
	// Get retrieves a GatewayParameters for the given object key
	GetGatewayParameters(ctx context.Context, key client.ObjectKey) (*GatewayParameters, error)

	// List retrieves list of GatewayParameterss for a given namespace and list options.
	ListGatewayParameters(ctx context.Context, opts ...client.ListOption) (*GatewayParametersList, error)
}

// GatewayParametersTransitionFunction instructs the GatewayParametersWriter how to transition between an existing
// GatewayParameters object and a desired on an Upsert
type GatewayParametersTransitionFunction func(existing, desired *GatewayParameters) error

// Writer knows how to create, delete, and update GatewayParameterss.
type GatewayParametersWriter interface {
	// Create saves the GatewayParameters object.
	CreateGatewayParameters(ctx context.Context, obj *GatewayParameters, opts ...client.CreateOption) error

	// Delete deletes the GatewayParameters object.
	DeleteGatewayParameters(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given GatewayParameters object.
	UpdateGatewayParameters(ctx context.Context, obj *GatewayParameters, opts ...client.UpdateOption) error

	// Patch patches the given GatewayParameters object.
	PatchGatewayParameters(ctx context.Context, obj *GatewayParameters, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all GatewayParameters objects matching the given options.
	DeleteAllOfGatewayParameters(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the GatewayParameters object.
	UpsertGatewayParameters(ctx context.Context, obj *GatewayParameters, transitionFuncs ...GatewayParametersTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a GatewayParameters object.
type GatewayParametersStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given GatewayParameters object.
	UpdateGatewayParametersStatus(ctx context.Context, obj *GatewayParameters, opts ...client.SubResourceUpdateOption) error

	// Patch patches the given GatewayParameters object's subresource.
	PatchGatewayParametersStatus(ctx context.Context, obj *GatewayParameters, patch client.Patch, opts ...client.SubResourcePatchOption) error
}

// Client knows how to perform CRUD operations on GatewayParameterss.
type GatewayParametersClient interface {
	GatewayParametersReader
	GatewayParametersWriter
	GatewayParametersStatusWriter
}

type gatewayParametersClient struct {
	client client.Client
}

func NewGatewayParametersClient(client client.Client) *gatewayParametersClient {
	return &gatewayParametersClient{client: client}
}

func (c *gatewayParametersClient) GetGatewayParameters(ctx context.Context, key client.ObjectKey) (*GatewayParameters, error) {
	obj := &GatewayParameters{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *gatewayParametersClient) ListGatewayParameters(ctx context.Context, opts ...client.ListOption) (*GatewayParametersList, error) {
	list := &GatewayParametersList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *gatewayParametersClient) CreateGatewayParameters(ctx context.Context, obj *GatewayParameters, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *gatewayParametersClient) DeleteGatewayParameters(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &GatewayParameters{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *gatewayParametersClient) UpdateGatewayParameters(ctx context.Context, obj *GatewayParameters, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *gatewayParametersClient) PatchGatewayParameters(ctx context.Context, obj *GatewayParameters, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *gatewayParametersClient) DeleteAllOfGatewayParameters(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &GatewayParameters{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *gatewayParametersClient) UpsertGatewayParameters(ctx context.Context, obj *GatewayParameters, transitionFuncs ...GatewayParametersTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*GatewayParameters), desired.(*GatewayParameters)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *gatewayParametersClient) UpdateGatewayParametersStatus(ctx context.Context, obj *GatewayParameters, opts ...client.SubResourceUpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *gatewayParametersClient) PatchGatewayParametersStatus(ctx context.Context, obj *GatewayParameters, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides GatewayParametersClients for multiple clusters.
type MulticlusterGatewayParametersClient interface {
	// Cluster returns a GatewayParametersClient for the given cluster
	Cluster(cluster string) (GatewayParametersClient, error)
}

type multiclusterGatewayParametersClient struct {
	client multicluster.Client
}

func NewMulticlusterGatewayParametersClient(client multicluster.Client) MulticlusterGatewayParametersClient {
	return &multiclusterGatewayParametersClient{client: client}
}

func (m *multiclusterGatewayParametersClient) Cluster(cluster string) (GatewayParametersClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewGatewayParametersClient(client), nil
}
