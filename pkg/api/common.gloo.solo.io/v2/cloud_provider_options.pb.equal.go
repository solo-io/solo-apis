// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/common/v2/cloud_provider_options.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *FunctionDestinationSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*FunctionDestinationSpec)
	if !ok {
		that2, ok := that.(FunctionDestinationSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetLogicalName(), target.GetLogicalName()) != 0 {
		return false
	}

	switch m.ProviderOptions.(type) {

	case *FunctionDestinationSpec_AwsLambda:
		if _, ok := target.ProviderOptions.(*FunctionDestinationSpec_AwsLambda); !ok {
			return false
		}

		if h, ok := interface{}(m.GetAwsLambda()).(equality.Equalizer); ok {
			if !h.Equal(target.GetAwsLambda()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetAwsLambda(), target.GetAwsLambda()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.ProviderOptions != target.ProviderOptions {
			return false
		}
	}

	return true
}

// Equal function
func (m *LambdaOptions) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*LambdaOptions)
	if !ok {
		that2, ok := that.(LambdaOptions)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetUnwrapAsAlb() != target.GetUnwrapAsAlb() {
		return false
	}

	if m.GetUnwrapAsApiGateway() != target.GetUnwrapAsApiGateway() {
		return false
	}

	if m.GetInvocationStyle() != target.GetInvocationStyle() {
		return false
	}

	return true
}

// Equal function
func (m *CloudProviderFilterOptions) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CloudProviderFilterOptions)
	if !ok {
		that2, ok := that.(CloudProviderFilterOptions)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.ProviderOptions.(type) {

	case *CloudProviderFilterOptions_Aws:
		if _, ok := target.ProviderOptions.(*CloudProviderFilterOptions_Aws); !ok {
			return false
		}

		if h, ok := interface{}(m.GetAws()).(equality.Equalizer); ok {
			if !h.Equal(target.GetAws()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetAws(), target.GetAws()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.ProviderOptions != target.ProviderOptions {
			return false
		}
	}

	return true
}

// Equal function
func (m *AWSFilterOptions) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*AWSFilterOptions)
	if !ok {
		that2, ok := that.(AWSFilterOptions)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetAccountIds()) != len(target.GetAccountIds()) {
		return false
	}
	for idx, v := range m.GetAccountIds() {

		if strings.Compare(v, target.GetAccountIds()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetIamRoles()) != len(target.GetIamRoles()) {
		return false
	}
	for idx, v := range m.GetIamRoles() {

		if strings.Compare(v, target.GetIamRoles()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetRegions()) != len(target.GetRegions()) {
		return false
	}
	for idx, v := range m.GetRegions() {

		if strings.Compare(v, target.GetRegions()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetLambdaFunctions()) != len(target.GetLambdaFunctions()) {
		return false
	}
	for idx, v := range m.GetLambdaFunctions() {

		if strings.Compare(v, target.GetLambdaFunctions()[idx]) != 0 {
			return false
		}

	}

	return true
}
