// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/common/v2/http_matchers.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *HTTPRequestMatcher) Clone() proto.Message {
	var target *HTTPRequestMatcher
	if m == nil {
		return target
	}
	target = &HTTPRequestMatcher{}

	target.Name = m.GetName()

	if h, ok := interface{}(m.GetUri()).(clone.Cloner); ok {
		target.Uri = h.Clone().(*StringMatch)
	} else {
		target.Uri = proto.Clone(m.GetUri()).(*StringMatch)
	}

	if m.GetHeaders() != nil {
		target.Headers = make([]*HeaderMatcher, len(m.GetHeaders()))
		for idx, v := range m.GetHeaders() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Headers[idx] = h.Clone().(*HeaderMatcher)
			} else {
				target.Headers[idx] = proto.Clone(v).(*HeaderMatcher)
			}

		}
	}

	if m.GetQueryParameters() != nil {
		target.QueryParameters = make([]*HTTPRequestMatcher_QueryParameterMatcher, len(m.GetQueryParameters()))
		for idx, v := range m.GetQueryParameters() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.QueryParameters[idx] = h.Clone().(*HTTPRequestMatcher_QueryParameterMatcher)
			} else {
				target.QueryParameters[idx] = proto.Clone(v).(*HTTPRequestMatcher_QueryParameterMatcher)
			}

		}
	}

	target.Method = m.GetMethod()

	target.Port = m.GetPort()

	return target
}

// Clone function
func (m *HeaderMatcher) Clone() proto.Message {
	var target *HeaderMatcher
	if m == nil {
		return target
	}
	target = &HeaderMatcher{}

	target.Name = m.GetName()

	target.Value = m.GetValue()

	target.Regex = m.GetRegex()

	target.InvertMatch = m.GetInvertMatch()

	return target
}

// Clone function
func (m *StatusCodeMatcher) Clone() proto.Message {
	var target *StatusCodeMatcher
	if m == nil {
		return target
	}
	target = &StatusCodeMatcher{}

	target.Value = m.GetValue()

	target.Comparator = m.GetComparator()

	return target
}

// Clone function
func (m *HTTPRequestMatcher_QueryParameterMatcher) Clone() proto.Message {
	var target *HTTPRequestMatcher_QueryParameterMatcher
	if m == nil {
		return target
	}
	target = &HTTPRequestMatcher_QueryParameterMatcher{}

	target.Name = m.GetName()

	target.Value = m.GetValue()

	target.Regex = m.GetRegex()

	return target
}
