// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1sets

import (
	fed_solo_io_v1 "github.com/solo-io/solo-apis/pkg/api/fed.solo.io/v1"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

type GlooInstanceSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*fed_solo_io_v1.GlooInstance) bool) []*fed_solo_io_v1.GlooInstance
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*fed_solo_io_v1.GlooInstance) bool) []*fed_solo_io_v1.GlooInstance
	// Return the Set as a map of key to resource.
	Map() map[string]*fed_solo_io_v1.GlooInstance
	// Insert a resource into the set.
	Insert(glooInstance ...*fed_solo_io_v1.GlooInstance)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(glooInstanceSet GlooInstanceSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(glooInstance ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(glooInstance ezkube.ResourceId)
	// Return the union with the provided set
	Union(set GlooInstanceSet) GlooInstanceSet
	// Return the difference with the provided set
	Difference(set GlooInstanceSet) GlooInstanceSet
	// Return the intersection with the provided set
	Intersection(set GlooInstanceSet) GlooInstanceSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*fed_solo_io_v1.GlooInstance, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another GlooInstanceSet
	Delta(newSet GlooInstanceSet) sksets.ResourceDelta
	// Create a deep copy of the current GlooInstanceSet
	Clone() GlooInstanceSet
	// Get the sort function used by the set
	GetSortFunc() func(toInsert, existing client.Object) bool
	// Get the equality function used by the set
	GetEqualityFunc() func(a, b client.Object) bool
}

func makeGenericGlooInstanceSet(
	sortFunc func(toInsert, existing client.Object) bool,
	equalityFunc func(a, b client.Object) bool,
	glooInstanceList []*fed_solo_io_v1.GlooInstance,
) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range glooInstanceList {
		genericResources = append(genericResources, obj)
	}
	genericSortFunc := func(toInsert, existing ezkube.ResourceId) bool {
		return sortFunc(toInsert.(client.Object), existing.(client.Object))
	}
	genericEqualityFunc := func(a, b ezkube.ResourceId) bool {
		return equalityFunc(a.(client.Object), b.(client.Object))
	}
	return sksets.NewResourceSet(genericSortFunc, genericEqualityFunc, genericResources...)
}

type glooInstanceSet struct {
	set          sksets.ResourceSet
	sortFunc     func(toInsert, existing client.Object) bool
	equalityFunc func(a, b client.Object) bool
}

func NewGlooInstanceSet(
	sortFunc func(toInsert, existing client.Object) bool,
	equalityFunc func(a, b client.Object) bool,
	glooInstanceList ...*fed_solo_io_v1.GlooInstance,
) GlooInstanceSet {
	return &glooInstanceSet{
		set:          makeGenericGlooInstanceSet(sortFunc, equalityFunc, glooInstanceList),
		sortFunc:     sortFunc,
		equalityFunc: equalityFunc,
	}
}

func NewGlooInstanceSetFromList(
	sortFunc func(toInsert, existing client.Object) bool,
	equalityFunc func(a, b client.Object) bool,
	glooInstanceList *fed_solo_io_v1.GlooInstanceList,
) GlooInstanceSet {
	list := make([]*fed_solo_io_v1.GlooInstance, 0, len(glooInstanceList.Items))
	for idx := range glooInstanceList.Items {
		list = append(list, &glooInstanceList.Items[idx])
	}
	return &glooInstanceSet{
		set:          makeGenericGlooInstanceSet(sortFunc, equalityFunc, list),
		sortFunc:     sortFunc,
		equalityFunc: equalityFunc,
	}
}

func (s *glooInstanceSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *glooInstanceSet) List(filterResource ...func(*fed_solo_io_v1.GlooInstance) bool) []*fed_solo_io_v1.GlooInstance {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*fed_solo_io_v1.GlooInstance))
		})
	}

	objs := s.Generic().List(genericFilters...)
	glooInstanceList := make([]*fed_solo_io_v1.GlooInstance, 0, len(objs))
	for _, obj := range objs {
		glooInstanceList = append(glooInstanceList, obj.(*fed_solo_io_v1.GlooInstance))
	}
	return glooInstanceList
}

func (s *glooInstanceSet) UnsortedList(filterResource ...func(*fed_solo_io_v1.GlooInstance) bool) []*fed_solo_io_v1.GlooInstance {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*fed_solo_io_v1.GlooInstance))
		})
	}

	var glooInstanceList []*fed_solo_io_v1.GlooInstance
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		glooInstanceList = append(glooInstanceList, obj.(*fed_solo_io_v1.GlooInstance))
	}
	return glooInstanceList
}

func (s *glooInstanceSet) Map() map[string]*fed_solo_io_v1.GlooInstance {
	if s == nil {
		return nil
	}

	newMap := map[string]*fed_solo_io_v1.GlooInstance{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*fed_solo_io_v1.GlooInstance)
	}
	return newMap
}

func (s *glooInstanceSet) Insert(
	glooInstanceList ...*fed_solo_io_v1.GlooInstance,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range glooInstanceList {
		s.Generic().Insert(obj)
	}
}

func (s *glooInstanceSet) Has(glooInstance ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(glooInstance)
}

func (s *glooInstanceSet) Equal(
	glooInstanceSet GlooInstanceSet,
) bool {
	if s == nil {
		return glooInstanceSet == nil
	}
	return s.Generic().Equal(glooInstanceSet.Generic())
}

func (s *glooInstanceSet) Delete(GlooInstance ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(GlooInstance)
}

func (s *glooInstanceSet) Union(set GlooInstanceSet) GlooInstanceSet {
	if s == nil {
		return set
	}
	return NewGlooInstanceSet(s.sortFunc, s.equalityFunc, append(s.List(), set.List()...)...)
}

func (s *glooInstanceSet) Difference(set GlooInstanceSet) GlooInstanceSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &glooInstanceSet{
		set:          newSet,
		sortFunc:     s.sortFunc,
		equalityFunc: s.equalityFunc,
	}
}

func (s *glooInstanceSet) Intersection(set GlooInstanceSet) GlooInstanceSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var glooInstanceList []*fed_solo_io_v1.GlooInstance
	for _, obj := range newSet.List() {
		glooInstanceList = append(glooInstanceList, obj.(*fed_solo_io_v1.GlooInstance))
	}
	return NewGlooInstanceSet(s.sortFunc, s.equalityFunc, glooInstanceList...)
}

func (s *glooInstanceSet) Find(id ezkube.ResourceId) (*fed_solo_io_v1.GlooInstance, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find GlooInstance %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&fed_solo_io_v1.GlooInstance{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*fed_solo_io_v1.GlooInstance), nil
}

func (s *glooInstanceSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *glooInstanceSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *glooInstanceSet) Delta(newSet GlooInstanceSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *glooInstanceSet) Clone() GlooInstanceSet {
	if s == nil {
		return nil
	}
	genericSortFunc := func(toInsert, existing ezkube.ResourceId) bool {
		return s.sortFunc(toInsert.(client.Object), existing.(client.Object))
	}
	genericEqualityFunc := func(a, b ezkube.ResourceId) bool {
		return s.equalityFunc(a.(client.Object), b.(client.Object))
	}
	return &glooInstanceSet{
		set: sksets.NewResourceSet(
			genericSortFunc,
			genericEqualityFunc,
			s.Generic().Clone().List()...,
		),
	}
}

func (s *glooInstanceSet) GetSortFunc() func(toInsert, existing client.Object) bool {
	return s.sortFunc
}

func (s *glooInstanceSet) GetEqualityFunc() func(a, b client.Object) bool {
	return s.equalityFunc
}

type FailoverSchemeSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*fed_solo_io_v1.FailoverScheme) bool) []*fed_solo_io_v1.FailoverScheme
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*fed_solo_io_v1.FailoverScheme) bool) []*fed_solo_io_v1.FailoverScheme
	// Return the Set as a map of key to resource.
	Map() map[string]*fed_solo_io_v1.FailoverScheme
	// Insert a resource into the set.
	Insert(failoverScheme ...*fed_solo_io_v1.FailoverScheme)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(failoverSchemeSet FailoverSchemeSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(failoverScheme ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(failoverScheme ezkube.ResourceId)
	// Return the union with the provided set
	Union(set FailoverSchemeSet) FailoverSchemeSet
	// Return the difference with the provided set
	Difference(set FailoverSchemeSet) FailoverSchemeSet
	// Return the intersection with the provided set
	Intersection(set FailoverSchemeSet) FailoverSchemeSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*fed_solo_io_v1.FailoverScheme, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another FailoverSchemeSet
	Delta(newSet FailoverSchemeSet) sksets.ResourceDelta
	// Create a deep copy of the current FailoverSchemeSet
	Clone() FailoverSchemeSet
	// Get the sort function used by the set
	GetSortFunc() func(toInsert, existing client.Object) bool
	// Get the equality function used by the set
	GetEqualityFunc() func(a, b client.Object) bool
}

func makeGenericFailoverSchemeSet(
	sortFunc func(toInsert, existing client.Object) bool,
	equalityFunc func(a, b client.Object) bool,
	failoverSchemeList []*fed_solo_io_v1.FailoverScheme,
) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range failoverSchemeList {
		genericResources = append(genericResources, obj)
	}
	genericSortFunc := func(toInsert, existing ezkube.ResourceId) bool {
		return sortFunc(toInsert.(client.Object), existing.(client.Object))
	}
	genericEqualityFunc := func(a, b ezkube.ResourceId) bool {
		return equalityFunc(a.(client.Object), b.(client.Object))
	}
	return sksets.NewResourceSet(genericSortFunc, genericEqualityFunc, genericResources...)
}

type failoverSchemeSet struct {
	set          sksets.ResourceSet
	sortFunc     func(toInsert, existing client.Object) bool
	equalityFunc func(a, b client.Object) bool
}

func NewFailoverSchemeSet(
	sortFunc func(toInsert, existing client.Object) bool,
	equalityFunc func(a, b client.Object) bool,
	failoverSchemeList ...*fed_solo_io_v1.FailoverScheme,
) FailoverSchemeSet {
	return &failoverSchemeSet{
		set:          makeGenericFailoverSchemeSet(sortFunc, equalityFunc, failoverSchemeList),
		sortFunc:     sortFunc,
		equalityFunc: equalityFunc,
	}
}

func NewFailoverSchemeSetFromList(
	sortFunc func(toInsert, existing client.Object) bool,
	equalityFunc func(a, b client.Object) bool,
	failoverSchemeList *fed_solo_io_v1.FailoverSchemeList,
) FailoverSchemeSet {
	list := make([]*fed_solo_io_v1.FailoverScheme, 0, len(failoverSchemeList.Items))
	for idx := range failoverSchemeList.Items {
		list = append(list, &failoverSchemeList.Items[idx])
	}
	return &failoverSchemeSet{
		set:          makeGenericFailoverSchemeSet(sortFunc, equalityFunc, list),
		sortFunc:     sortFunc,
		equalityFunc: equalityFunc,
	}
}

func (s *failoverSchemeSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *failoverSchemeSet) List(filterResource ...func(*fed_solo_io_v1.FailoverScheme) bool) []*fed_solo_io_v1.FailoverScheme {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*fed_solo_io_v1.FailoverScheme))
		})
	}

	objs := s.Generic().List(genericFilters...)
	failoverSchemeList := make([]*fed_solo_io_v1.FailoverScheme, 0, len(objs))
	for _, obj := range objs {
		failoverSchemeList = append(failoverSchemeList, obj.(*fed_solo_io_v1.FailoverScheme))
	}
	return failoverSchemeList
}

func (s *failoverSchemeSet) UnsortedList(filterResource ...func(*fed_solo_io_v1.FailoverScheme) bool) []*fed_solo_io_v1.FailoverScheme {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*fed_solo_io_v1.FailoverScheme))
		})
	}

	var failoverSchemeList []*fed_solo_io_v1.FailoverScheme
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		failoverSchemeList = append(failoverSchemeList, obj.(*fed_solo_io_v1.FailoverScheme))
	}
	return failoverSchemeList
}

func (s *failoverSchemeSet) Map() map[string]*fed_solo_io_v1.FailoverScheme {
	if s == nil {
		return nil
	}

	newMap := map[string]*fed_solo_io_v1.FailoverScheme{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*fed_solo_io_v1.FailoverScheme)
	}
	return newMap
}

func (s *failoverSchemeSet) Insert(
	failoverSchemeList ...*fed_solo_io_v1.FailoverScheme,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range failoverSchemeList {
		s.Generic().Insert(obj)
	}
}

func (s *failoverSchemeSet) Has(failoverScheme ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(failoverScheme)
}

func (s *failoverSchemeSet) Equal(
	failoverSchemeSet FailoverSchemeSet,
) bool {
	if s == nil {
		return failoverSchemeSet == nil
	}
	return s.Generic().Equal(failoverSchemeSet.Generic())
}

func (s *failoverSchemeSet) Delete(FailoverScheme ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(FailoverScheme)
}

func (s *failoverSchemeSet) Union(set FailoverSchemeSet) FailoverSchemeSet {
	if s == nil {
		return set
	}
	return NewFailoverSchemeSet(s.sortFunc, s.equalityFunc, append(s.List(), set.List()...)...)
}

func (s *failoverSchemeSet) Difference(set FailoverSchemeSet) FailoverSchemeSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &failoverSchemeSet{
		set:          newSet,
		sortFunc:     s.sortFunc,
		equalityFunc: s.equalityFunc,
	}
}

func (s *failoverSchemeSet) Intersection(set FailoverSchemeSet) FailoverSchemeSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var failoverSchemeList []*fed_solo_io_v1.FailoverScheme
	for _, obj := range newSet.List() {
		failoverSchemeList = append(failoverSchemeList, obj.(*fed_solo_io_v1.FailoverScheme))
	}
	return NewFailoverSchemeSet(s.sortFunc, s.equalityFunc, failoverSchemeList...)
}

func (s *failoverSchemeSet) Find(id ezkube.ResourceId) (*fed_solo_io_v1.FailoverScheme, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find FailoverScheme %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&fed_solo_io_v1.FailoverScheme{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*fed_solo_io_v1.FailoverScheme), nil
}

func (s *failoverSchemeSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *failoverSchemeSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *failoverSchemeSet) Delta(newSet FailoverSchemeSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *failoverSchemeSet) Clone() FailoverSchemeSet {
	if s == nil {
		return nil
	}
	genericSortFunc := func(toInsert, existing ezkube.ResourceId) bool {
		return s.sortFunc(toInsert.(client.Object), existing.(client.Object))
	}
	genericEqualityFunc := func(a, b ezkube.ResourceId) bool {
		return s.equalityFunc(a.(client.Object), b.(client.Object))
	}
	return &failoverSchemeSet{
		set: sksets.NewResourceSet(
			genericSortFunc,
			genericEqualityFunc,
			s.Generic().Clone().List()...,
		),
	}
}

func (s *failoverSchemeSet) GetSortFunc() func(toInsert, existing client.Object) bool {
	return s.sortFunc
}

func (s *failoverSchemeSet) GetEqualityFunc() func(a, b client.Object) bool {
	return s.equalityFunc
}
