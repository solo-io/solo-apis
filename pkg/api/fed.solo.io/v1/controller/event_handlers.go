// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

    fed_solo_io_v1 "github.com/solo-io/solo-apis/pkg/api/fed.solo.io/v1"

    "github.com/pkg/errors"
    "github.com/solo-io/skv2/pkg/events"
    "sigs.k8s.io/controller-runtime/pkg/manager"
    "sigs.k8s.io/controller-runtime/pkg/predicate"
    "sigs.k8s.io/controller-runtime/pkg/client"
)

// Handle events for the GlooInstance Resource
// DEPRECATED: Prefer reconciler pattern.
type GlooInstanceEventHandler interface {
    CreateGlooInstance(obj *fed_solo_io_v1.GlooInstance) error
    UpdateGlooInstance(old, new *fed_solo_io_v1.GlooInstance) error
    DeleteGlooInstance(obj *fed_solo_io_v1.GlooInstance) error
    GenericGlooInstance(obj *fed_solo_io_v1.GlooInstance) error
}

type GlooInstanceEventHandlerFuncs struct {
    OnCreate  func(obj *fed_solo_io_v1.GlooInstance) error
    OnUpdate  func(old, new *fed_solo_io_v1.GlooInstance) error
    OnDelete  func(obj *fed_solo_io_v1.GlooInstance) error
    OnGeneric func(obj *fed_solo_io_v1.GlooInstance) error
}

func (f *GlooInstanceEventHandlerFuncs) CreateGlooInstance(obj *fed_solo_io_v1.GlooInstance) error {
    if f.OnCreate == nil {
        return nil
    }
    return f.OnCreate(obj)
}

func (f *GlooInstanceEventHandlerFuncs) DeleteGlooInstance(obj *fed_solo_io_v1.GlooInstance) error {
    if f.OnDelete == nil {
        return nil
    }
    return f.OnDelete(obj)
}

func (f *GlooInstanceEventHandlerFuncs) UpdateGlooInstance(objOld, objNew *fed_solo_io_v1.GlooInstance) error {
    if f.OnUpdate == nil {
        return nil
    }
    return f.OnUpdate(objOld, objNew)
}

func (f *GlooInstanceEventHandlerFuncs) GenericGlooInstance(obj *fed_solo_io_v1.GlooInstance) error {
    if f.OnGeneric == nil {
        return nil
    }
    return f.OnGeneric(obj)
}

type GlooInstanceEventWatcher interface {
    AddEventHandler(ctx context.Context, h GlooInstanceEventHandler, predicates ...predicate.Predicate) error
}

type glooInstanceEventWatcher struct {
    watcher events.EventWatcher
}

func NewGlooInstanceEventWatcher(name string, mgr manager.Manager) GlooInstanceEventWatcher {
    return &glooInstanceEventWatcher{
        watcher: events.NewWatcher(name, mgr, &fed_solo_io_v1.GlooInstance{}),
    }
}

func (c *glooInstanceEventWatcher) AddEventHandler(ctx context.Context, h GlooInstanceEventHandler, predicates ...predicate.Predicate) error {
	handler := genericGlooInstanceHandler{handler: h}
    if err := c.watcher.Watch(ctx, handler, predicates...); err != nil{
        return err
    }
    return nil
}

// genericGlooInstanceHandler implements a generic events.EventHandler
type genericGlooInstanceHandler struct {
    handler GlooInstanceEventHandler
}

func (h genericGlooInstanceHandler) Create(object client.Object) error {
    obj, ok := object.(*fed_solo_io_v1.GlooInstance)
    if !ok {
        return errors.Errorf("internal error: GlooInstance handler received event for %T", object)
    }
    return h.handler.CreateGlooInstance(obj)
}

func (h genericGlooInstanceHandler) Delete(object client.Object) error {
    obj, ok := object.(*fed_solo_io_v1.GlooInstance)
    if !ok {
        return errors.Errorf("internal error: GlooInstance handler received event for %T", object)
    }
    return h.handler.DeleteGlooInstance(obj)
}

func (h genericGlooInstanceHandler) Update(old, new client.Object) error {
    objOld, ok := old.(*fed_solo_io_v1.GlooInstance)
    if !ok {
        return errors.Errorf("internal error: GlooInstance handler received event for %T", old)
    }
    objNew, ok := new.(*fed_solo_io_v1.GlooInstance)
    if !ok {
        return errors.Errorf("internal error: GlooInstance handler received event for %T", new)
    }
    return h.handler.UpdateGlooInstance(objOld, objNew)
}

func (h genericGlooInstanceHandler) Generic(object client.Object) error {
    obj, ok := object.(*fed_solo_io_v1.GlooInstance)
    if !ok {
        return errors.Errorf("internal error: GlooInstance handler received event for %T", object)
    }
    return h.handler.GenericGlooInstance(obj)
}

// Handle events for the FailoverScheme Resource
// DEPRECATED: Prefer reconciler pattern.
type FailoverSchemeEventHandler interface {
    CreateFailoverScheme(obj *fed_solo_io_v1.FailoverScheme) error
    UpdateFailoverScheme(old, new *fed_solo_io_v1.FailoverScheme) error
    DeleteFailoverScheme(obj *fed_solo_io_v1.FailoverScheme) error
    GenericFailoverScheme(obj *fed_solo_io_v1.FailoverScheme) error
}

type FailoverSchemeEventHandlerFuncs struct {
    OnCreate  func(obj *fed_solo_io_v1.FailoverScheme) error
    OnUpdate  func(old, new *fed_solo_io_v1.FailoverScheme) error
    OnDelete  func(obj *fed_solo_io_v1.FailoverScheme) error
    OnGeneric func(obj *fed_solo_io_v1.FailoverScheme) error
}

func (f *FailoverSchemeEventHandlerFuncs) CreateFailoverScheme(obj *fed_solo_io_v1.FailoverScheme) error {
    if f.OnCreate == nil {
        return nil
    }
    return f.OnCreate(obj)
}

func (f *FailoverSchemeEventHandlerFuncs) DeleteFailoverScheme(obj *fed_solo_io_v1.FailoverScheme) error {
    if f.OnDelete == nil {
        return nil
    }
    return f.OnDelete(obj)
}

func (f *FailoverSchemeEventHandlerFuncs) UpdateFailoverScheme(objOld, objNew *fed_solo_io_v1.FailoverScheme) error {
    if f.OnUpdate == nil {
        return nil
    }
    return f.OnUpdate(objOld, objNew)
}

func (f *FailoverSchemeEventHandlerFuncs) GenericFailoverScheme(obj *fed_solo_io_v1.FailoverScheme) error {
    if f.OnGeneric == nil {
        return nil
    }
    return f.OnGeneric(obj)
}

type FailoverSchemeEventWatcher interface {
    AddEventHandler(ctx context.Context, h FailoverSchemeEventHandler, predicates ...predicate.Predicate) error
}

type failoverSchemeEventWatcher struct {
    watcher events.EventWatcher
}

func NewFailoverSchemeEventWatcher(name string, mgr manager.Manager) FailoverSchemeEventWatcher {
    return &failoverSchemeEventWatcher{
        watcher: events.NewWatcher(name, mgr, &fed_solo_io_v1.FailoverScheme{}),
    }
}

func (c *failoverSchemeEventWatcher) AddEventHandler(ctx context.Context, h FailoverSchemeEventHandler, predicates ...predicate.Predicate) error {
	handler := genericFailoverSchemeHandler{handler: h}
    if err := c.watcher.Watch(ctx, handler, predicates...); err != nil{
        return err
    }
    return nil
}

// genericFailoverSchemeHandler implements a generic events.EventHandler
type genericFailoverSchemeHandler struct {
    handler FailoverSchemeEventHandler
}

func (h genericFailoverSchemeHandler) Create(object client.Object) error {
    obj, ok := object.(*fed_solo_io_v1.FailoverScheme)
    if !ok {
        return errors.Errorf("internal error: FailoverScheme handler received event for %T", object)
    }
    return h.handler.CreateFailoverScheme(obj)
}

func (h genericFailoverSchemeHandler) Delete(object client.Object) error {
    obj, ok := object.(*fed_solo_io_v1.FailoverScheme)
    if !ok {
        return errors.Errorf("internal error: FailoverScheme handler received event for %T", object)
    }
    return h.handler.DeleteFailoverScheme(obj)
}

func (h genericFailoverSchemeHandler) Update(old, new client.Object) error {
    objOld, ok := old.(*fed_solo_io_v1.FailoverScheme)
    if !ok {
        return errors.Errorf("internal error: FailoverScheme handler received event for %T", old)
    }
    objNew, ok := new.(*fed_solo_io_v1.FailoverScheme)
    if !ok {
        return errors.Errorf("internal error: FailoverScheme handler received event for %T", new)
    }
    return h.handler.UpdateFailoverScheme(objOld, objNew)
}

func (h genericFailoverSchemeHandler) Generic(object client.Object) error {
    obj, ok := object.(*fed_solo_io_v1.FailoverScheme)
    if !ok {
        return errors.Errorf("internal error: FailoverScheme handler received event for %T", object)
    }
    return h.handler.GenericFailoverScheme(obj)
}
