// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	fed_solo_io_v1 "github.com/solo-io/solo-apis/pkg/api/fed.solo.io/v1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the GlooInstance Resource across clusters.
// implemented by the user
type MulticlusterGlooInstanceReconciler interface {
	ReconcileGlooInstance(clusterName string, obj *fed_solo_io_v1.GlooInstance) (reconcile.Result, error)
}

// Reconcile deletion events for the GlooInstance Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterGlooInstanceDeletionReconciler interface {
	ReconcileGlooInstanceDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterGlooInstanceReconcilerFuncs struct {
	OnReconcileGlooInstance         func(clusterName string, obj *fed_solo_io_v1.GlooInstance) (reconcile.Result, error)
	OnReconcileGlooInstanceDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterGlooInstanceReconcilerFuncs) ReconcileGlooInstance(clusterName string, obj *fed_solo_io_v1.GlooInstance) (reconcile.Result, error) {
	if f.OnReconcileGlooInstance == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileGlooInstance(clusterName, obj)
}

func (f *MulticlusterGlooInstanceReconcilerFuncs) ReconcileGlooInstanceDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileGlooInstanceDeletion == nil {
		return nil
	}
	return f.OnReconcileGlooInstanceDeletion(clusterName, req)
}

type MulticlusterGlooInstanceReconcileLoop interface {
	// AddMulticlusterGlooInstanceReconciler adds a MulticlusterGlooInstanceReconciler to the MulticlusterGlooInstanceReconcileLoop.
	AddMulticlusterGlooInstanceReconciler(ctx context.Context, rec MulticlusterGlooInstanceReconciler, predicates ...predicate.Predicate)
}

type multiclusterGlooInstanceReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterGlooInstanceReconcileLoop) AddMulticlusterGlooInstanceReconciler(ctx context.Context, rec MulticlusterGlooInstanceReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericGlooInstanceMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterGlooInstanceReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterGlooInstanceReconcileLoop {
	return &multiclusterGlooInstanceReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &fed_solo_io_v1.GlooInstance{}, options)}
}

type genericGlooInstanceMulticlusterReconciler struct {
	reconciler MulticlusterGlooInstanceReconciler
}

func (g genericGlooInstanceMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterGlooInstanceDeletionReconciler); ok {
		return deletionReconciler.ReconcileGlooInstanceDeletion(cluster, req)
	}
	return nil
}

func (g genericGlooInstanceMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*fed_solo_io_v1.GlooInstance)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: GlooInstance handler received event for %T", object)
	}
	return g.reconciler.ReconcileGlooInstance(cluster, obj)
}

// Reconcile Upsert events for the FailoverScheme Resource across clusters.
// implemented by the user
type MulticlusterFailoverSchemeReconciler interface {
	ReconcileFailoverScheme(clusterName string, obj *fed_solo_io_v1.FailoverScheme) (reconcile.Result, error)
}

// Reconcile deletion events for the FailoverScheme Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterFailoverSchemeDeletionReconciler interface {
	ReconcileFailoverSchemeDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterFailoverSchemeReconcilerFuncs struct {
	OnReconcileFailoverScheme         func(clusterName string, obj *fed_solo_io_v1.FailoverScheme) (reconcile.Result, error)
	OnReconcileFailoverSchemeDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterFailoverSchemeReconcilerFuncs) ReconcileFailoverScheme(clusterName string, obj *fed_solo_io_v1.FailoverScheme) (reconcile.Result, error) {
	if f.OnReconcileFailoverScheme == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileFailoverScheme(clusterName, obj)
}

func (f *MulticlusterFailoverSchemeReconcilerFuncs) ReconcileFailoverSchemeDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileFailoverSchemeDeletion == nil {
		return nil
	}
	return f.OnReconcileFailoverSchemeDeletion(clusterName, req)
}

type MulticlusterFailoverSchemeReconcileLoop interface {
	// AddMulticlusterFailoverSchemeReconciler adds a MulticlusterFailoverSchemeReconciler to the MulticlusterFailoverSchemeReconcileLoop.
	AddMulticlusterFailoverSchemeReconciler(ctx context.Context, rec MulticlusterFailoverSchemeReconciler, predicates ...predicate.Predicate)
}

type multiclusterFailoverSchemeReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterFailoverSchemeReconcileLoop) AddMulticlusterFailoverSchemeReconciler(ctx context.Context, rec MulticlusterFailoverSchemeReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericFailoverSchemeMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterFailoverSchemeReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterFailoverSchemeReconcileLoop {
	return &multiclusterFailoverSchemeReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &fed_solo_io_v1.FailoverScheme{}, options)}
}

type genericFailoverSchemeMulticlusterReconciler struct {
	reconciler MulticlusterFailoverSchemeReconciler
}

func (g genericFailoverSchemeMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterFailoverSchemeDeletionReconciler); ok {
		return deletionReconciler.ReconcileFailoverSchemeDeletion(cluster, req)
	}
	return nil
}

func (g genericFailoverSchemeMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*fed_solo_io_v1.FailoverScheme)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: FailoverScheme handler received event for %T", object)
	}
	return g.reconciler.ReconcileFailoverScheme(cluster, obj)
}
