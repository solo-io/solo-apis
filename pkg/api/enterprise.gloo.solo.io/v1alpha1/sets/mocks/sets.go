// Code generated by MockGen. DO NOT EDIT.
// Source: ./sets.go

// Package mock_v1alpha1sets is a generated GoMock package.
package mock_v1alpha1sets

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sets "github.com/solo-io/skv2/contrib/pkg/sets"
	ezkube "github.com/solo-io/skv2/pkg/ezkube"
	v1alpha1 "github.com/solo-io/solo-apis/pkg/api/enterprise.gloo.solo.io/v1alpha1"
	v1alpha1sets "github.com/solo-io/solo-apis/pkg/api/enterprise.gloo.solo.io/v1alpha1/sets"
	sets0 "k8s.io/apimachinery/pkg/util/sets"
)

// MockGraphQLSchemaSet is a mock of GraphQLSchemaSet interface.
type MockGraphQLSchemaSet struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaSetMockRecorder
}

// MockGraphQLSchemaSetMockRecorder is the mock recorder for MockGraphQLSchemaSet.
type MockGraphQLSchemaSetMockRecorder struct {
	mock *MockGraphQLSchemaSet
}

// NewMockGraphQLSchemaSet creates a new mock instance.
func NewMockGraphQLSchemaSet(ctrl *gomock.Controller) *MockGraphQLSchemaSet {
	mock := &MockGraphQLSchemaSet{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaSet) EXPECT() *MockGraphQLSchemaSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockGraphQLSchemaSet) Clone() v1alpha1sets.GraphQLSchemaSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v1alpha1sets.GraphQLSchemaSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockGraphQLSchemaSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockGraphQLSchemaSet) Delete(graphQLSchema ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", graphQLSchema)
}

// Delete indicates an expected call of Delete.
func (mr *MockGraphQLSchemaSetMockRecorder) Delete(graphQLSchema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Delete), graphQLSchema)
}

// Delta mocks base method.
func (m *MockGraphQLSchemaSet) Delta(newSet v1alpha1sets.GraphQLSchemaSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockGraphQLSchemaSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockGraphQLSchemaSet) Difference(set v1alpha1sets.GraphQLSchemaSet) v1alpha1sets.GraphQLSchemaSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1alpha1sets.GraphQLSchemaSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockGraphQLSchemaSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockGraphQLSchemaSet) Equal(graphQLSchemaSet v1alpha1sets.GraphQLSchemaSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", graphQLSchemaSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockGraphQLSchemaSetMockRecorder) Equal(graphQLSchemaSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Equal), graphQLSchemaSet)
}

// Find mocks base method.
func (m *MockGraphQLSchemaSet) Find(id ezkube.ResourceId) (*v1alpha1.GraphQLSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1alpha1.GraphQLSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockGraphQLSchemaSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockGraphQLSchemaSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockGraphQLSchemaSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockGraphQLSchemaSet) Has(graphQLSchema ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", graphQLSchema)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockGraphQLSchemaSetMockRecorder) Has(graphQLSchema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Has), graphQLSchema)
}

// Insert mocks base method.
func (m *MockGraphQLSchemaSet) Insert(graphQLSchema ...*v1alpha1.GraphQLSchema) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range graphQLSchema {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockGraphQLSchemaSetMockRecorder) Insert(graphQLSchema ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Insert), graphQLSchema...)
}

// Intersection mocks base method.
func (m *MockGraphQLSchemaSet) Intersection(set v1alpha1sets.GraphQLSchemaSet) v1alpha1sets.GraphQLSchemaSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1alpha1sets.GraphQLSchemaSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockGraphQLSchemaSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockGraphQLSchemaSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockGraphQLSchemaSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockGraphQLSchemaSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockGraphQLSchemaSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Length))
}

// List mocks base method.
func (m *MockGraphQLSchemaSet) List(filterResource ...func(*v1alpha1.GraphQLSchema) bool) []*v1alpha1.GraphQLSchema {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v1alpha1.GraphQLSchema)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockGraphQLSchemaSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockGraphQLSchemaSet) Map() map[string]*v1alpha1.GraphQLSchema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1alpha1.GraphQLSchema)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockGraphQLSchemaSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Map))
}

// Union mocks base method.
func (m *MockGraphQLSchemaSet) Union(set v1alpha1sets.GraphQLSchemaSet) v1alpha1sets.GraphQLSchemaSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1alpha1sets.GraphQLSchemaSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockGraphQLSchemaSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockGraphQLSchemaSet) UnsortedList(filterResource ...func(*v1alpha1.GraphQLSchema) bool) []*v1alpha1.GraphQLSchema {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v1alpha1.GraphQLSchema)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockGraphQLSchemaSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockGraphQLSchemaSet)(nil).UnsortedList), filterResource...)
}
