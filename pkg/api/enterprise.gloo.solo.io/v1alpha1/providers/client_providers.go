// Code generated by skv2. DO NOT EDIT.

package v1alpha1

import (
	enterprise_gloo_solo_io_v1alpha1 "github.com/solo-io/solo-apis/pkg/api/enterprise.gloo.solo.io/v1alpha1"

	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

/*
  The intention of these providers are to be used for Mocking.
  They expose the Clients as interfaces, as well as factories to provide mocked versions
  of the clients when they require building within a component.

  See package `github.com/solo-io/skv2/pkg/multicluster/register` for example
*/

// Provider for GraphQLSchemaClient from Clientset
func GraphQLSchemaClientFromClientsetProvider(clients enterprise_gloo_solo_io_v1alpha1.Clientset) enterprise_gloo_solo_io_v1alpha1.GraphQLSchemaClient {
	return clients.GraphQLSchemas()
}

// Provider for GraphQLSchema Client from Client
func GraphQLSchemaClientProvider(client client.Client) enterprise_gloo_solo_io_v1alpha1.GraphQLSchemaClient {
	return enterprise_gloo_solo_io_v1alpha1.NewGraphQLSchemaClient(client)
}

type GraphQLSchemaClientFactory func(client client.Client) enterprise_gloo_solo_io_v1alpha1.GraphQLSchemaClient

func GraphQLSchemaClientFactoryProvider() GraphQLSchemaClientFactory {
	return GraphQLSchemaClientProvider
}

type GraphQLSchemaClientFromConfigFactory func(cfg *rest.Config) (enterprise_gloo_solo_io_v1alpha1.GraphQLSchemaClient, error)

func GraphQLSchemaClientFromConfigFactoryProvider() GraphQLSchemaClientFromConfigFactory {
	return func(cfg *rest.Config) (enterprise_gloo_solo_io_v1alpha1.GraphQLSchemaClient, error) {
		clients, err := enterprise_gloo_solo_io_v1alpha1.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.GraphQLSchemas(), nil
	}
}
