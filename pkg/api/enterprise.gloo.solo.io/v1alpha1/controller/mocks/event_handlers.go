// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/solo-apis/pkg/api/enterprise.gloo.solo.io/v1alpha1"
	controller "github.com/solo-io/solo-apis/pkg/api/enterprise.gloo.solo.io/v1alpha1/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockGraphQLSchemaEventHandler is a mock of GraphQLSchemaEventHandler interface.
type MockGraphQLSchemaEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaEventHandlerMockRecorder
}

// MockGraphQLSchemaEventHandlerMockRecorder is the mock recorder for MockGraphQLSchemaEventHandler.
type MockGraphQLSchemaEventHandlerMockRecorder struct {
	mock *MockGraphQLSchemaEventHandler
}

// NewMockGraphQLSchemaEventHandler creates a new mock instance.
func NewMockGraphQLSchemaEventHandler(ctrl *gomock.Controller) *MockGraphQLSchemaEventHandler {
	mock := &MockGraphQLSchemaEventHandler{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaEventHandler) EXPECT() *MockGraphQLSchemaEventHandlerMockRecorder {
	return m.recorder
}

// CreateGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaEventHandler) CreateGraphQLSchema(obj *v1alpha1.GraphQLSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGraphQLSchema", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGraphQLSchema indicates an expected call of CreateGraphQLSchema.
func (mr *MockGraphQLSchemaEventHandlerMockRecorder) CreateGraphQLSchema(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaEventHandler)(nil).CreateGraphQLSchema), obj)
}

// DeleteGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaEventHandler) DeleteGraphQLSchema(obj *v1alpha1.GraphQLSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGraphQLSchema", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGraphQLSchema indicates an expected call of DeleteGraphQLSchema.
func (mr *MockGraphQLSchemaEventHandlerMockRecorder) DeleteGraphQLSchema(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaEventHandler)(nil).DeleteGraphQLSchema), obj)
}

// GenericGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaEventHandler) GenericGraphQLSchema(obj *v1alpha1.GraphQLSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericGraphQLSchema", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericGraphQLSchema indicates an expected call of GenericGraphQLSchema.
func (mr *MockGraphQLSchemaEventHandlerMockRecorder) GenericGraphQLSchema(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaEventHandler)(nil).GenericGraphQLSchema), obj)
}

// UpdateGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaEventHandler) UpdateGraphQLSchema(old, new *v1alpha1.GraphQLSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGraphQLSchema", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLSchema indicates an expected call of UpdateGraphQLSchema.
func (mr *MockGraphQLSchemaEventHandlerMockRecorder) UpdateGraphQLSchema(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaEventHandler)(nil).UpdateGraphQLSchema), old, new)
}

// MockGraphQLSchemaEventWatcher is a mock of GraphQLSchemaEventWatcher interface.
type MockGraphQLSchemaEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaEventWatcherMockRecorder
}

// MockGraphQLSchemaEventWatcherMockRecorder is the mock recorder for MockGraphQLSchemaEventWatcher.
type MockGraphQLSchemaEventWatcherMockRecorder struct {
	mock *MockGraphQLSchemaEventWatcher
}

// NewMockGraphQLSchemaEventWatcher creates a new mock instance.
func NewMockGraphQLSchemaEventWatcher(ctrl *gomock.Controller) *MockGraphQLSchemaEventWatcher {
	mock := &MockGraphQLSchemaEventWatcher{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaEventWatcher) EXPECT() *MockGraphQLSchemaEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockGraphQLSchemaEventWatcher) AddEventHandler(ctx context.Context, h controller.GraphQLSchemaEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockGraphQLSchemaEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockGraphQLSchemaEventWatcher)(nil).AddEventHandler), varargs...)
}
