// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/enterprise.gloo/v1/auth_config.proto

package v1

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	math "math"
	time "time"

	v2 "github.com/envoyproxy/go-control-plane/envoy/api/v2"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AuthConfigStatus_State int32

const (
	// Pending status indicates the resource has not yet been validated
	AuthConfigStatus_Pending AuthConfigStatus_State = 0
	// Accepted indicates the resource has been validated
	AuthConfigStatus_Accepted AuthConfigStatus_State = 1
	// Rejected indicates an invalid configuration by the user
	// Rejected resources may be propagated to the xDS server depending on their severity
	AuthConfigStatus_Rejected AuthConfigStatus_State = 2
	// Warning indicates a partially invalid configuration by the user
	// Resources with Warnings may be partially accepted by a controller, depending on the implementation
	AuthConfigStatus_Warning AuthConfigStatus_State = 3
)

var AuthConfigStatus_State_name = map[int32]string{
	0: "Pending",
	1: "Accepted",
	2: "Rejected",
	3: "Warning",
}

var AuthConfigStatus_State_value = map[string]int32{
	"Pending":  0,
	"Accepted": 1,
	"Rejected": 2,
	"Warning":  3,
}

func (x AuthConfigStatus_State) String() string {
	return proto.EnumName(AuthConfigStatus_State_name, int32(x))
}

func (AuthConfigStatus_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{18, 0}
}

// This is the user-facing auth configuration. When processed by Gloo, certain configuration types (i.a. oauth, opa)
// will be translated, e.g. to resolve resource references. See the `ExtAuthConfig.AuthConfig` for the final config
// format that will be included in the extauth snapshot.
type AuthConfigSpec struct {
	Configs              []*AuthConfigSpec_Config `protobuf:"bytes,3,rep,name=configs,proto3" json:"configs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *AuthConfigSpec) Reset()         { *m = AuthConfigSpec{} }
func (m *AuthConfigSpec) String() string { return proto.CompactTextString(m) }
func (*AuthConfigSpec) ProtoMessage()    {}
func (*AuthConfigSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{0}
}
func (m *AuthConfigSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthConfigSpec.Unmarshal(m, b)
}
func (m *AuthConfigSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthConfigSpec.Marshal(b, m, deterministic)
}
func (m *AuthConfigSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthConfigSpec.Merge(m, src)
}
func (m *AuthConfigSpec) XXX_Size() int {
	return xxx_messageInfo_AuthConfigSpec.Size(m)
}
func (m *AuthConfigSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthConfigSpec.DiscardUnknown(m)
}

var xxx_messageInfo_AuthConfigSpec proto.InternalMessageInfo

func (m *AuthConfigSpec) GetConfigs() []*AuthConfigSpec_Config {
	if m != nil {
		return m.Configs
	}
	return nil
}

type AuthConfigSpec_Config struct {
	// Types that are valid to be assigned to AuthConfig:
	//	*AuthConfigSpec_Config_BasicAuth
	//	*AuthConfigSpec_Config_Oauth
	//	*AuthConfigSpec_Config_Oauth2
	//	*AuthConfigSpec_Config_ApiKeyAuth
	//	*AuthConfigSpec_Config_PluginAuth
	//	*AuthConfigSpec_Config_OpaAuth
	//	*AuthConfigSpec_Config_Ldap
	AuthConfig           isAuthConfigSpec_Config_AuthConfig `protobuf_oneof:"auth_config"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *AuthConfigSpec_Config) Reset()         { *m = AuthConfigSpec_Config{} }
func (m *AuthConfigSpec_Config) String() string { return proto.CompactTextString(m) }
func (*AuthConfigSpec_Config) ProtoMessage()    {}
func (*AuthConfigSpec_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{0, 0}
}
func (m *AuthConfigSpec_Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthConfigSpec_Config.Unmarshal(m, b)
}
func (m *AuthConfigSpec_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthConfigSpec_Config.Marshal(b, m, deterministic)
}
func (m *AuthConfigSpec_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthConfigSpec_Config.Merge(m, src)
}
func (m *AuthConfigSpec_Config) XXX_Size() int {
	return xxx_messageInfo_AuthConfigSpec_Config.Size(m)
}
func (m *AuthConfigSpec_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthConfigSpec_Config.DiscardUnknown(m)
}

var xxx_messageInfo_AuthConfigSpec_Config proto.InternalMessageInfo

type isAuthConfigSpec_Config_AuthConfig interface {
	isAuthConfigSpec_Config_AuthConfig()
	Equal(interface{}) bool
}

type AuthConfigSpec_Config_BasicAuth struct {
	BasicAuth *BasicAuth `protobuf:"bytes,1,opt,name=basic_auth,json=basicAuth,proto3,oneof" json:"basic_auth,omitempty"`
}
type AuthConfigSpec_Config_Oauth struct {
	Oauth *OAuth `protobuf:"bytes,2,opt,name=oauth,proto3,oneof" json:"oauth,omitempty"`
}
type AuthConfigSpec_Config_Oauth2 struct {
	Oauth2 *OAuth2 `protobuf:"bytes,8,opt,name=oauth2,proto3,oneof" json:"oauth2,omitempty"`
}
type AuthConfigSpec_Config_ApiKeyAuth struct {
	ApiKeyAuth *ApiKeyAuth `protobuf:"bytes,4,opt,name=api_key_auth,json=apiKeyAuth,proto3,oneof" json:"api_key_auth,omitempty"`
}
type AuthConfigSpec_Config_PluginAuth struct {
	PluginAuth *AuthPlugin `protobuf:"bytes,5,opt,name=plugin_auth,json=pluginAuth,proto3,oneof" json:"plugin_auth,omitempty"`
}
type AuthConfigSpec_Config_OpaAuth struct {
	OpaAuth *OpaAuth `protobuf:"bytes,6,opt,name=opa_auth,json=opaAuth,proto3,oneof" json:"opa_auth,omitempty"`
}
type AuthConfigSpec_Config_Ldap struct {
	Ldap *Ldap `protobuf:"bytes,7,opt,name=ldap,proto3,oneof" json:"ldap,omitempty"`
}

func (*AuthConfigSpec_Config_BasicAuth) isAuthConfigSpec_Config_AuthConfig()  {}
func (*AuthConfigSpec_Config_Oauth) isAuthConfigSpec_Config_AuthConfig()      {}
func (*AuthConfigSpec_Config_Oauth2) isAuthConfigSpec_Config_AuthConfig()     {}
func (*AuthConfigSpec_Config_ApiKeyAuth) isAuthConfigSpec_Config_AuthConfig() {}
func (*AuthConfigSpec_Config_PluginAuth) isAuthConfigSpec_Config_AuthConfig() {}
func (*AuthConfigSpec_Config_OpaAuth) isAuthConfigSpec_Config_AuthConfig()    {}
func (*AuthConfigSpec_Config_Ldap) isAuthConfigSpec_Config_AuthConfig()       {}

func (m *AuthConfigSpec_Config) GetAuthConfig() isAuthConfigSpec_Config_AuthConfig {
	if m != nil {
		return m.AuthConfig
	}
	return nil
}

func (m *AuthConfigSpec_Config) GetBasicAuth() *BasicAuth {
	if x, ok := m.GetAuthConfig().(*AuthConfigSpec_Config_BasicAuth); ok {
		return x.BasicAuth
	}
	return nil
}

// Deprecated: Do not use.
func (m *AuthConfigSpec_Config) GetOauth() *OAuth {
	if x, ok := m.GetAuthConfig().(*AuthConfigSpec_Config_Oauth); ok {
		return x.Oauth
	}
	return nil
}

func (m *AuthConfigSpec_Config) GetOauth2() *OAuth2 {
	if x, ok := m.GetAuthConfig().(*AuthConfigSpec_Config_Oauth2); ok {
		return x.Oauth2
	}
	return nil
}

func (m *AuthConfigSpec_Config) GetApiKeyAuth() *ApiKeyAuth {
	if x, ok := m.GetAuthConfig().(*AuthConfigSpec_Config_ApiKeyAuth); ok {
		return x.ApiKeyAuth
	}
	return nil
}

func (m *AuthConfigSpec_Config) GetPluginAuth() *AuthPlugin {
	if x, ok := m.GetAuthConfig().(*AuthConfigSpec_Config_PluginAuth); ok {
		return x.PluginAuth
	}
	return nil
}

func (m *AuthConfigSpec_Config) GetOpaAuth() *OpaAuth {
	if x, ok := m.GetAuthConfig().(*AuthConfigSpec_Config_OpaAuth); ok {
		return x.OpaAuth
	}
	return nil
}

func (m *AuthConfigSpec_Config) GetLdap() *Ldap {
	if x, ok := m.GetAuthConfig().(*AuthConfigSpec_Config_Ldap); ok {
		return x.Ldap
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AuthConfigSpec_Config) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AuthConfigSpec_Config_BasicAuth)(nil),
		(*AuthConfigSpec_Config_Oauth)(nil),
		(*AuthConfigSpec_Config_Oauth2)(nil),
		(*AuthConfigSpec_Config_ApiKeyAuth)(nil),
		(*AuthConfigSpec_Config_PluginAuth)(nil),
		(*AuthConfigSpec_Config_OpaAuth)(nil),
		(*AuthConfigSpec_Config_Ldap)(nil),
	}
}

// Auth configurations defined on virtual hosts, routes, and weighted destinations will be unmarshalled to this message.
type ExtAuthExtension struct {
	// Types that are valid to be assigned to Spec:
	//	*ExtAuthExtension_Disable
	//	*ExtAuthExtension_ConfigRef
	//	*ExtAuthExtension_CustomAuth
	Spec                 isExtAuthExtension_Spec `protobuf_oneof:"spec"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ExtAuthExtension) Reset()         { *m = ExtAuthExtension{} }
func (m *ExtAuthExtension) String() string { return proto.CompactTextString(m) }
func (*ExtAuthExtension) ProtoMessage()    {}
func (*ExtAuthExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{1}
}
func (m *ExtAuthExtension) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtAuthExtension.Unmarshal(m, b)
}
func (m *ExtAuthExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtAuthExtension.Marshal(b, m, deterministic)
}
func (m *ExtAuthExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtAuthExtension.Merge(m, src)
}
func (m *ExtAuthExtension) XXX_Size() int {
	return xxx_messageInfo_ExtAuthExtension.Size(m)
}
func (m *ExtAuthExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtAuthExtension.DiscardUnknown(m)
}

var xxx_messageInfo_ExtAuthExtension proto.InternalMessageInfo

type isExtAuthExtension_Spec interface {
	isExtAuthExtension_Spec()
	Equal(interface{}) bool
}

type ExtAuthExtension_Disable struct {
	Disable bool `protobuf:"varint,1,opt,name=disable,proto3,oneof" json:"disable,omitempty"`
}
type ExtAuthExtension_ConfigRef struct {
	ConfigRef *core.ResourceRef `protobuf:"bytes,2,opt,name=config_ref,json=configRef,proto3,oneof" json:"config_ref,omitempty"`
}
type ExtAuthExtension_CustomAuth struct {
	CustomAuth *CustomAuth `protobuf:"bytes,3,opt,name=custom_auth,json=customAuth,proto3,oneof" json:"custom_auth,omitempty"`
}

func (*ExtAuthExtension_Disable) isExtAuthExtension_Spec()    {}
func (*ExtAuthExtension_ConfigRef) isExtAuthExtension_Spec()  {}
func (*ExtAuthExtension_CustomAuth) isExtAuthExtension_Spec() {}

func (m *ExtAuthExtension) GetSpec() isExtAuthExtension_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ExtAuthExtension) GetDisable() bool {
	if x, ok := m.GetSpec().(*ExtAuthExtension_Disable); ok {
		return x.Disable
	}
	return false
}

func (m *ExtAuthExtension) GetConfigRef() *core.ResourceRef {
	if x, ok := m.GetSpec().(*ExtAuthExtension_ConfigRef); ok {
		return x.ConfigRef
	}
	return nil
}

func (m *ExtAuthExtension) GetCustomAuth() *CustomAuth {
	if x, ok := m.GetSpec().(*ExtAuthExtension_CustomAuth); ok {
		return x.CustomAuth
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ExtAuthExtension) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ExtAuthExtension_Disable)(nil),
		(*ExtAuthExtension_ConfigRef)(nil),
		(*ExtAuthExtension_CustomAuth)(nil),
	}
}

// Global external auth settings
type Settings struct {
	// The upstream to ask about auth decisions
	ExtauthzServerRef *core.ResourceRef `protobuf:"bytes,1,opt,name=extauthz_server_ref,json=extauthzServerRef,proto3" json:"extauthz_server_ref,omitempty"`
	// If this is set, communication to the upstream will be via HTTP and not GRPC.
	HttpService *HttpService `protobuf:"bytes,2,opt,name=http_service,json=httpService,proto3" json:"http_service,omitempty"`
	// If the auth server trusted id of the user, it will be set in this header.
	// Specifically this means that this header will be sanitized form the incoming request.
	UserIdHeader string `protobuf:"bytes,3,opt,name=user_id_header,json=userIdHeader,proto3" json:"user_id_header,omitempty"`
	// Timeout for the ext auth service to respond. Defaults to 200ms
	RequestTimeout *time.Duration `protobuf:"bytes,4,opt,name=request_timeout,json=requestTimeout,proto3,stdduration" json:"request_timeout,omitempty"`
	// In case of a failure or timeout querying the auth server, normally a request is denied.
	// if this is set to true, the request will be allowed.
	FailureModeAllow bool `protobuf:"varint,5,opt,name=failure_mode_allow,json=failureModeAllow,proto3" json:"failure_mode_allow,omitempty"`
	// Set this if you also want to send the body of the request, and not just the headers.
	RequestBody *BufferSettings `protobuf:"bytes,6,opt,name=request_body,json=requestBody,proto3" json:"request_body,omitempty"`
	// Clears route cache in order to allow the external authorization service to correctly affect
	// routing decisions. Filter clears all cached routes when:
	//
	// 1. The field is set to *true*.
	//
	// 2. The status returned from the authorization service is a HTTP 200 or gRPC 0.
	//
	// 3. At least one *authorization response header* is added to the client request, or is used for
	// altering another client request header.
	//
	ClearRouteCache bool `protobuf:"varint,7,opt,name=clear_route_cache,json=clearRouteCache,proto3" json:"clear_route_cache,omitempty"`
	// Sets the HTTP status that is returned to the client when there is a network error between the
	// filter and the authorization server. The default status is HTTP 403 Forbidden.
	// If set, this must be one of the following:
	// - 100
	// - 200 201 202 203 204 205 206 207 208 226
	// - 300 301 302 303 304 305 307 308
	// - 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 421 422 423 424 426 428 429 431
	// - 500 501 502 503 504 505 506 507 508 510 511
	StatusOnError        uint32   `protobuf:"varint,8,opt,name=status_on_error,json=statusOnError,proto3" json:"status_on_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Settings) Reset()         { *m = Settings{} }
func (m *Settings) String() string { return proto.CompactTextString(m) }
func (*Settings) ProtoMessage()    {}
func (*Settings) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{2}
}
func (m *Settings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Settings.Unmarshal(m, b)
}
func (m *Settings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Settings.Marshal(b, m, deterministic)
}
func (m *Settings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings.Merge(m, src)
}
func (m *Settings) XXX_Size() int {
	return xxx_messageInfo_Settings.Size(m)
}
func (m *Settings) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings.DiscardUnknown(m)
}

var xxx_messageInfo_Settings proto.InternalMessageInfo

func (m *Settings) GetExtauthzServerRef() *core.ResourceRef {
	if m != nil {
		return m.ExtauthzServerRef
	}
	return nil
}

func (m *Settings) GetHttpService() *HttpService {
	if m != nil {
		return m.HttpService
	}
	return nil
}

func (m *Settings) GetUserIdHeader() string {
	if m != nil {
		return m.UserIdHeader
	}
	return ""
}

func (m *Settings) GetRequestTimeout() *time.Duration {
	if m != nil {
		return m.RequestTimeout
	}
	return nil
}

func (m *Settings) GetFailureModeAllow() bool {
	if m != nil {
		return m.FailureModeAllow
	}
	return false
}

func (m *Settings) GetRequestBody() *BufferSettings {
	if m != nil {
		return m.RequestBody
	}
	return nil
}

func (m *Settings) GetClearRouteCache() bool {
	if m != nil {
		return m.ClearRouteCache
	}
	return false
}

func (m *Settings) GetStatusOnError() uint32 {
	if m != nil {
		return m.StatusOnError
	}
	return 0
}

type HttpService struct {
	// Sets a prefix to the value of authorization request header *Path*.
	PathPrefix           string                `protobuf:"bytes,1,opt,name=path_prefix,json=pathPrefix,proto3" json:"path_prefix,omitempty"`
	Request              *HttpService_Request  `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	Response             *HttpService_Response `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *HttpService) Reset()         { *m = HttpService{} }
func (m *HttpService) String() string { return proto.CompactTextString(m) }
func (*HttpService) ProtoMessage()    {}
func (*HttpService) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{3}
}
func (m *HttpService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpService.Unmarshal(m, b)
}
func (m *HttpService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpService.Marshal(b, m, deterministic)
}
func (m *HttpService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpService.Merge(m, src)
}
func (m *HttpService) XXX_Size() int {
	return xxx_messageInfo_HttpService.Size(m)
}
func (m *HttpService) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpService.DiscardUnknown(m)
}

var xxx_messageInfo_HttpService proto.InternalMessageInfo

func (m *HttpService) GetPathPrefix() string {
	if m != nil {
		return m.PathPrefix
	}
	return ""
}

func (m *HttpService) GetRequest() *HttpService_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *HttpService) GetResponse() *HttpService_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

type HttpService_Request struct {
	// These headers will be copied from the incoming request to the request going
	// to the auth server. Note that in addition to the user's supplied matchers:
	//
	// 1. *Host*, *Method*, *Path* and *Content-Length* are automatically included to the list.
	//
	// 2. *Content-Length* will be set to 0 and the request to the authorization service will not have
	// a message body.
	AllowedHeaders []string `protobuf:"bytes,1,rep,name=allowed_headers,json=allowedHeaders,proto3" json:"allowed_headers,omitempty"`
	// These headers that will be included to the request to authorization service. Note that
	// client request of the same key will be overridden.
	HeadersToAdd         map[string]string `protobuf:"bytes,2,rep,name=headers_to_add,json=headersToAdd,proto3" json:"headers_to_add,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HttpService_Request) Reset()         { *m = HttpService_Request{} }
func (m *HttpService_Request) String() string { return proto.CompactTextString(m) }
func (*HttpService_Request) ProtoMessage()    {}
func (*HttpService_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{3, 0}
}
func (m *HttpService_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpService_Request.Unmarshal(m, b)
}
func (m *HttpService_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpService_Request.Marshal(b, m, deterministic)
}
func (m *HttpService_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpService_Request.Merge(m, src)
}
func (m *HttpService_Request) XXX_Size() int {
	return xxx_messageInfo_HttpService_Request.Size(m)
}
func (m *HttpService_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpService_Request.DiscardUnknown(m)
}

var xxx_messageInfo_HttpService_Request proto.InternalMessageInfo

func (m *HttpService_Request) GetAllowedHeaders() []string {
	if m != nil {
		return m.AllowedHeaders
	}
	return nil
}

func (m *HttpService_Request) GetHeadersToAdd() map[string]string {
	if m != nil {
		return m.HeadersToAdd
	}
	return nil
}

type HttpService_Response struct {
	// When this is set, authorization response headers that have a will be added to the original client request and sent to the upstream.
	// Note that coexistent headers will be overridden.
	AllowedUpstreamHeaders []string `protobuf:"bytes,1,rep,name=allowed_upstream_headers,json=allowedUpstreamHeaders,proto3" json:"allowed_upstream_headers,omitempty"`
	// When this. is set, authorization response headers that will be added to the client's response when auth request is denied.
	// Note that when this list is *not* set, all the authorization response headers, except *Authority
	// (Host)* will be in the response to the client. When a header is included in this list, *Path*,
	// *Status*, *Content-Length*, *WWW-Authenticate* and *Location* are automatically added.
	AllowedClientHeaders []string `protobuf:"bytes,2,rep,name=allowed_client_headers,json=allowedClientHeaders,proto3" json:"allowed_client_headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HttpService_Response) Reset()         { *m = HttpService_Response{} }
func (m *HttpService_Response) String() string { return proto.CompactTextString(m) }
func (*HttpService_Response) ProtoMessage()    {}
func (*HttpService_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{3, 1}
}
func (m *HttpService_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpService_Response.Unmarshal(m, b)
}
func (m *HttpService_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpService_Response.Marshal(b, m, deterministic)
}
func (m *HttpService_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpService_Response.Merge(m, src)
}
func (m *HttpService_Response) XXX_Size() int {
	return xxx_messageInfo_HttpService_Response.Size(m)
}
func (m *HttpService_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpService_Response.DiscardUnknown(m)
}

var xxx_messageInfo_HttpService_Response proto.InternalMessageInfo

func (m *HttpService_Response) GetAllowedUpstreamHeaders() []string {
	if m != nil {
		return m.AllowedUpstreamHeaders
	}
	return nil
}

func (m *HttpService_Response) GetAllowedClientHeaders() []string {
	if m != nil {
		return m.AllowedClientHeaders
	}
	return nil
}

// Configuration for buffering the request data.
type BufferSettings struct {
	// Sets the maximum size of a message body that the filter will hold in memory. Envoy will return
	// *HTTP 413* and will *not* initiate the authorization process when buffer reaches the number
	// set in this field. Note that this setting will have precedence over failure_mode_allow.
	// Defaults to 4KB.
	MaxRequestBytes uint32 `protobuf:"varint,1,opt,name=max_request_bytes,json=maxRequestBytes,proto3" json:"max_request_bytes,omitempty"`
	// When this field is true, Envoy will buffer the message until *max_request_bytes* is reached.
	// The authorization request will be dispatched and no 413 HTTP error will be returned by the
	// filter.
	AllowPartialMessage  bool     `protobuf:"varint,2,opt,name=allow_partial_message,json=allowPartialMessage,proto3" json:"allow_partial_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BufferSettings) Reset()         { *m = BufferSettings{} }
func (m *BufferSettings) String() string { return proto.CompactTextString(m) }
func (*BufferSettings) ProtoMessage()    {}
func (*BufferSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{4}
}
func (m *BufferSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BufferSettings.Unmarshal(m, b)
}
func (m *BufferSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BufferSettings.Marshal(b, m, deterministic)
}
func (m *BufferSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BufferSettings.Merge(m, src)
}
func (m *BufferSettings) XXX_Size() int {
	return xxx_messageInfo_BufferSettings.Size(m)
}
func (m *BufferSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_BufferSettings.DiscardUnknown(m)
}

var xxx_messageInfo_BufferSettings proto.InternalMessageInfo

func (m *BufferSettings) GetMaxRequestBytes() uint32 {
	if m != nil {
		return m.MaxRequestBytes
	}
	return 0
}

func (m *BufferSettings) GetAllowPartialMessage() bool {
	if m != nil {
		return m.AllowPartialMessage
	}
	return false
}

// Gloo is not expected to configure the ext auth server in this case.
// This is used with custom auth servers.
type CustomAuth struct {
	// When a request matches the virtual host, route, or weighted destination on which this configuration is defined,
	// Gloo will add the given context_extensions to the request that is sent to the external authorization server.
	// This allows the server to base the auth decision on metadata that you define on the source of the request.
	//
	// This attribute is analogous to Envoy's config.filter.http.ext_authz.v2.CheckSettings. See the official
	// [Envoy documentation](https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/filter/http/ext_authz/v2/ext_authz.proto.html?highlight=ext_authz#config-filter-http-ext-authz-v2-checksettings)
	// for more details.
	ContextExtensions    map[string]string `protobuf:"bytes,1,rep,name=context_extensions,json=contextExtensions,proto3" json:"context_extensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CustomAuth) Reset()         { *m = CustomAuth{} }
func (m *CustomAuth) String() string { return proto.CompactTextString(m) }
func (*CustomAuth) ProtoMessage()    {}
func (*CustomAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{5}
}
func (m *CustomAuth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomAuth.Unmarshal(m, b)
}
func (m *CustomAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomAuth.Marshal(b, m, deterministic)
}
func (m *CustomAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomAuth.Merge(m, src)
}
func (m *CustomAuth) XXX_Size() int {
	return xxx_messageInfo_CustomAuth.Size(m)
}
func (m *CustomAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomAuth.DiscardUnknown(m)
}

var xxx_messageInfo_CustomAuth proto.InternalMessageInfo

func (m *CustomAuth) GetContextExtensions() map[string]string {
	if m != nil {
		return m.ContextExtensions
	}
	return nil
}

type AuthPlugin struct {
	// Name of the plugin
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Name of the compiled plugin file. If not specified, GlooE will look for an ".so" file with same name as the plugin.
	PluginFileName string `protobuf:"bytes,2,opt,name=plugin_file_name,json=pluginFileName,proto3" json:"plugin_file_name,omitempty"`
	// Name of the exported symbol that implements the plugin interface in the plugin.
	// If not specified, defaults to the name of the plugin
	ExportedSymbolName   string        `protobuf:"bytes,3,opt,name=exported_symbol_name,json=exportedSymbolName,proto3" json:"exported_symbol_name,omitempty"`
	Config               *types.Struct `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AuthPlugin) Reset()         { *m = AuthPlugin{} }
func (m *AuthPlugin) String() string { return proto.CompactTextString(m) }
func (*AuthPlugin) ProtoMessage()    {}
func (*AuthPlugin) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{6}
}
func (m *AuthPlugin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthPlugin.Unmarshal(m, b)
}
func (m *AuthPlugin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthPlugin.Marshal(b, m, deterministic)
}
func (m *AuthPlugin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthPlugin.Merge(m, src)
}
func (m *AuthPlugin) XXX_Size() int {
	return xxx_messageInfo_AuthPlugin.Size(m)
}
func (m *AuthPlugin) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthPlugin.DiscardUnknown(m)
}

var xxx_messageInfo_AuthPlugin proto.InternalMessageInfo

func (m *AuthPlugin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AuthPlugin) GetPluginFileName() string {
	if m != nil {
		return m.PluginFileName
	}
	return ""
}

func (m *AuthPlugin) GetExportedSymbolName() string {
	if m != nil {
		return m.ExportedSymbolName
	}
	return ""
}

func (m *AuthPlugin) GetConfig() *types.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

type BasicAuth struct {
	Realm                string         `protobuf:"bytes,1,opt,name=realm,proto3" json:"realm,omitempty"`
	Apr                  *BasicAuth_Apr `protobuf:"bytes,2,opt,name=apr,proto3" json:"apr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BasicAuth) Reset()         { *m = BasicAuth{} }
func (m *BasicAuth) String() string { return proto.CompactTextString(m) }
func (*BasicAuth) ProtoMessage()    {}
func (*BasicAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{7}
}
func (m *BasicAuth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BasicAuth.Unmarshal(m, b)
}
func (m *BasicAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BasicAuth.Marshal(b, m, deterministic)
}
func (m *BasicAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicAuth.Merge(m, src)
}
func (m *BasicAuth) XXX_Size() int {
	return xxx_messageInfo_BasicAuth.Size(m)
}
func (m *BasicAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicAuth.DiscardUnknown(m)
}

var xxx_messageInfo_BasicAuth proto.InternalMessageInfo

func (m *BasicAuth) GetRealm() string {
	if m != nil {
		return m.Realm
	}
	return ""
}

func (m *BasicAuth) GetApr() *BasicAuth_Apr {
	if m != nil {
		return m.Apr
	}
	return nil
}

type BasicAuth_Apr struct {
	Users                map[string]*BasicAuth_Apr_SaltedHashedPassword `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                                       `json:"-"`
	XXX_unrecognized     []byte                                         `json:"-"`
	XXX_sizecache        int32                                          `json:"-"`
}

func (m *BasicAuth_Apr) Reset()         { *m = BasicAuth_Apr{} }
func (m *BasicAuth_Apr) String() string { return proto.CompactTextString(m) }
func (*BasicAuth_Apr) ProtoMessage()    {}
func (*BasicAuth_Apr) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{7, 0}
}
func (m *BasicAuth_Apr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BasicAuth_Apr.Unmarshal(m, b)
}
func (m *BasicAuth_Apr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BasicAuth_Apr.Marshal(b, m, deterministic)
}
func (m *BasicAuth_Apr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicAuth_Apr.Merge(m, src)
}
func (m *BasicAuth_Apr) XXX_Size() int {
	return xxx_messageInfo_BasicAuth_Apr.Size(m)
}
func (m *BasicAuth_Apr) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicAuth_Apr.DiscardUnknown(m)
}

var xxx_messageInfo_BasicAuth_Apr proto.InternalMessageInfo

func (m *BasicAuth_Apr) GetUsers() map[string]*BasicAuth_Apr_SaltedHashedPassword {
	if m != nil {
		return m.Users
	}
	return nil
}

type BasicAuth_Apr_SaltedHashedPassword struct {
	Salt                 string   `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	HashedPassword       string   `protobuf:"bytes,2,opt,name=hashed_password,json=hashedPassword,proto3" json:"hashed_password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BasicAuth_Apr_SaltedHashedPassword) Reset()         { *m = BasicAuth_Apr_SaltedHashedPassword{} }
func (m *BasicAuth_Apr_SaltedHashedPassword) String() string { return proto.CompactTextString(m) }
func (*BasicAuth_Apr_SaltedHashedPassword) ProtoMessage()    {}
func (*BasicAuth_Apr_SaltedHashedPassword) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{7, 0, 0}
}
func (m *BasicAuth_Apr_SaltedHashedPassword) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BasicAuth_Apr_SaltedHashedPassword.Unmarshal(m, b)
}
func (m *BasicAuth_Apr_SaltedHashedPassword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BasicAuth_Apr_SaltedHashedPassword.Marshal(b, m, deterministic)
}
func (m *BasicAuth_Apr_SaltedHashedPassword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicAuth_Apr_SaltedHashedPassword.Merge(m, src)
}
func (m *BasicAuth_Apr_SaltedHashedPassword) XXX_Size() int {
	return xxx_messageInfo_BasicAuth_Apr_SaltedHashedPassword.Size(m)
}
func (m *BasicAuth_Apr_SaltedHashedPassword) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicAuth_Apr_SaltedHashedPassword.DiscardUnknown(m)
}

var xxx_messageInfo_BasicAuth_Apr_SaltedHashedPassword proto.InternalMessageInfo

func (m *BasicAuth_Apr_SaltedHashedPassword) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

func (m *BasicAuth_Apr_SaltedHashedPassword) GetHashedPassword() string {
	if m != nil {
		return m.HashedPassword
	}
	return ""
}

// Deprecated: Prefer OAuth2
type OAuth struct {
	// your client id as registered with the issuer
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"` // Deprecated: Do not use.
	// your client secret as registered with the issuer
	ClientSecretRef *core.ResourceRef `protobuf:"bytes,2,opt,name=client_secret_ref,json=clientSecretRef,proto3" json:"client_secret_ref,omitempty"` // Deprecated: Do not use.
	// The url of the issuer. We will look for OIDC information in issuerUrl+
	// ".well-known/openid-configuration"
	IssuerUrl string `protobuf:"bytes,3,opt,name=issuer_url,json=issuerUrl,proto3" json:"issuer_url,omitempty"` // Deprecated: Do not use.
	// extra query parameters to apply to the Ext-Auth service's authorization request to the identity provider.
	AuthEndpointQueryParams map[string]string `protobuf:"bytes,7,rep,name=auth_endpoint_query_params,json=authEndpointQueryParams,proto3" json:"auth_endpoint_query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Deprecated: Do not use.
	// we to redirect after successful auth, if we can't determine the original
	// url this should be your publicly available app url.
	AppUrl string `protobuf:"bytes,4,opt,name=app_url,json=appUrl,proto3" json:"app_url,omitempty"` // Deprecated: Do not use.
	// a callback path relative to app url that will be used for OIDC callbacks.
	// needs to not be used by the application
	CallbackPath string `protobuf:"bytes,5,opt,name=callback_path,json=callbackPath,proto3" json:"callback_path,omitempty"` // Deprecated: Do not use.
	// Scopes to request in addition to openid scope.
	Scopes               []string `protobuf:"bytes,6,rep,name=scopes,proto3" json:"scopes,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OAuth) Reset()         { *m = OAuth{} }
func (m *OAuth) String() string { return proto.CompactTextString(m) }
func (*OAuth) ProtoMessage()    {}
func (*OAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{8}
}
func (m *OAuth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OAuth.Unmarshal(m, b)
}
func (m *OAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OAuth.Marshal(b, m, deterministic)
}
func (m *OAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAuth.Merge(m, src)
}
func (m *OAuth) XXX_Size() int {
	return xxx_messageInfo_OAuth.Size(m)
}
func (m *OAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_OAuth.DiscardUnknown(m)
}

var xxx_messageInfo_OAuth proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *OAuth) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

// Deprecated: Do not use.
func (m *OAuth) GetClientSecretRef() *core.ResourceRef {
	if m != nil {
		return m.ClientSecretRef
	}
	return nil
}

// Deprecated: Do not use.
func (m *OAuth) GetIssuerUrl() string {
	if m != nil {
		return m.IssuerUrl
	}
	return ""
}

// Deprecated: Do not use.
func (m *OAuth) GetAuthEndpointQueryParams() map[string]string {
	if m != nil {
		return m.AuthEndpointQueryParams
	}
	return nil
}

// Deprecated: Do not use.
func (m *OAuth) GetAppUrl() string {
	if m != nil {
		return m.AppUrl
	}
	return ""
}

// Deprecated: Do not use.
func (m *OAuth) GetCallbackPath() string {
	if m != nil {
		return m.CallbackPath
	}
	return ""
}

// Deprecated: Do not use.
func (m *OAuth) GetScopes() []string {
	if m != nil {
		return m.Scopes
	}
	return nil
}

type OAuth2 struct {
	// Types that are valid to be assigned to OauthType:
	//	*OAuth2_OidcAuthorizationCode
	//	*OAuth2_AccessTokenValidation
	OauthType            isOAuth2_OauthType `protobuf_oneof:"oauth_type"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *OAuth2) Reset()         { *m = OAuth2{} }
func (m *OAuth2) String() string { return proto.CompactTextString(m) }
func (*OAuth2) ProtoMessage()    {}
func (*OAuth2) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{9}
}
func (m *OAuth2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OAuth2.Unmarshal(m, b)
}
func (m *OAuth2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OAuth2.Marshal(b, m, deterministic)
}
func (m *OAuth2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAuth2.Merge(m, src)
}
func (m *OAuth2) XXX_Size() int {
	return xxx_messageInfo_OAuth2.Size(m)
}
func (m *OAuth2) XXX_DiscardUnknown() {
	xxx_messageInfo_OAuth2.DiscardUnknown(m)
}

var xxx_messageInfo_OAuth2 proto.InternalMessageInfo

type isOAuth2_OauthType interface {
	isOAuth2_OauthType()
	Equal(interface{}) bool
}

type OAuth2_OidcAuthorizationCode struct {
	OidcAuthorizationCode *OidcAuthorizationCode `protobuf:"bytes,1,opt,name=oidc_authorization_code,json=oidcAuthorizationCode,proto3,oneof" json:"oidc_authorization_code,omitempty"`
}
type OAuth2_AccessTokenValidation struct {
	AccessTokenValidation *AccessTokenValidation `protobuf:"bytes,2,opt,name=access_token_validation,json=accessTokenValidation,proto3,oneof" json:"access_token_validation,omitempty"`
}

func (*OAuth2_OidcAuthorizationCode) isOAuth2_OauthType() {}
func (*OAuth2_AccessTokenValidation) isOAuth2_OauthType() {}

func (m *OAuth2) GetOauthType() isOAuth2_OauthType {
	if m != nil {
		return m.OauthType
	}
	return nil
}

func (m *OAuth2) GetOidcAuthorizationCode() *OidcAuthorizationCode {
	if x, ok := m.GetOauthType().(*OAuth2_OidcAuthorizationCode); ok {
		return x.OidcAuthorizationCode
	}
	return nil
}

func (m *OAuth2) GetAccessTokenValidation() *AccessTokenValidation {
	if x, ok := m.GetOauthType().(*OAuth2_AccessTokenValidation); ok {
		return x.AccessTokenValidation
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OAuth2) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OAuth2_OidcAuthorizationCode)(nil),
		(*OAuth2_AccessTokenValidation)(nil),
	}
}

type OidcAuthorizationCode struct {
	// your client id as registered with the issuer
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// your client secret as registered with the issuer
	ClientSecretRef *core.ResourceRef `protobuf:"bytes,2,opt,name=client_secret_ref,json=clientSecretRef,proto3" json:"client_secret_ref,omitempty"`
	// The url of the issuer. We will look for OIDC information in issuerUrl+
	// ".well-known/openid-configuration"
	IssuerUrl string `protobuf:"bytes,3,opt,name=issuer_url,json=issuerUrl,proto3" json:"issuer_url,omitempty"`
	// extra query parameters to apply to the Ext-Auth service's authorization request to the identity provider.
	AuthEndpointQueryParams map[string]string `protobuf:"bytes,4,rep,name=auth_endpoint_query_params,json=authEndpointQueryParams,proto3" json:"auth_endpoint_query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// we to redirect after successful auth, if we can't determine the original
	// url this should be your publicly available app url.
	AppUrl string `protobuf:"bytes,5,opt,name=app_url,json=appUrl,proto3" json:"app_url,omitempty"`
	// a callback path relative to app url that will be used for OIDC callbacks.
	// needs to not be used by the application
	CallbackPath string `protobuf:"bytes,6,opt,name=callback_path,json=callbackPath,proto3" json:"callback_path,omitempty"`
	// Scopes to request in addition to openid scope.
	Scopes               []string `protobuf:"bytes,7,rep,name=scopes,proto3" json:"scopes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OidcAuthorizationCode) Reset()         { *m = OidcAuthorizationCode{} }
func (m *OidcAuthorizationCode) String() string { return proto.CompactTextString(m) }
func (*OidcAuthorizationCode) ProtoMessage()    {}
func (*OidcAuthorizationCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{10}
}
func (m *OidcAuthorizationCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OidcAuthorizationCode.Unmarshal(m, b)
}
func (m *OidcAuthorizationCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OidcAuthorizationCode.Marshal(b, m, deterministic)
}
func (m *OidcAuthorizationCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OidcAuthorizationCode.Merge(m, src)
}
func (m *OidcAuthorizationCode) XXX_Size() int {
	return xxx_messageInfo_OidcAuthorizationCode.Size(m)
}
func (m *OidcAuthorizationCode) XXX_DiscardUnknown() {
	xxx_messageInfo_OidcAuthorizationCode.DiscardUnknown(m)
}

var xxx_messageInfo_OidcAuthorizationCode proto.InternalMessageInfo

func (m *OidcAuthorizationCode) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *OidcAuthorizationCode) GetClientSecretRef() *core.ResourceRef {
	if m != nil {
		return m.ClientSecretRef
	}
	return nil
}

func (m *OidcAuthorizationCode) GetIssuerUrl() string {
	if m != nil {
		return m.IssuerUrl
	}
	return ""
}

func (m *OidcAuthorizationCode) GetAuthEndpointQueryParams() map[string]string {
	if m != nil {
		return m.AuthEndpointQueryParams
	}
	return nil
}

func (m *OidcAuthorizationCode) GetAppUrl() string {
	if m != nil {
		return m.AppUrl
	}
	return ""
}

func (m *OidcAuthorizationCode) GetCallbackPath() string {
	if m != nil {
		return m.CallbackPath
	}
	return ""
}

func (m *OidcAuthorizationCode) GetScopes() []string {
	if m != nil {
		return m.Scopes
	}
	return nil
}

type AccessTokenValidation struct {
	// Types that are valid to be assigned to ValidationType:
	//	*AccessTokenValidation_IntrospectionUrl
	ValidationType isAccessTokenValidation_ValidationType `protobuf_oneof:"validation_type"`
	// the url for the OIDC userinfo endpoint.
	// if provided, the (opaque) access token provided or received from the oauth endpoint
	// will be queried and the userinfo response (or cached response) will be put in the `AuthorizationRequest` state.
	// this can be useful to leverage the userinfo response in, for example, an extauth server plugin.
	UserinfoUrl string `protobuf:"bytes,4,opt,name=userinfo_url,json=userinfoUrl,proto3" json:"userinfo_url,omitempty"`
	// how long the token introspection and userinfo endpoint response for a specific access token should be kept
	// in the in-memory cache. the result will be invalidated at this timeout, or at "exp" time from the introspection
	// result, whichever comes sooner. if omitted, defaults to 10 minutes. if zero, then no caching will be done.
	CacheTimeout         *time.Duration `protobuf:"bytes,5,opt,name=cache_timeout,json=cacheTimeout,proto3,stdduration" json:"cache_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AccessTokenValidation) Reset()         { *m = AccessTokenValidation{} }
func (m *AccessTokenValidation) String() string { return proto.CompactTextString(m) }
func (*AccessTokenValidation) ProtoMessage()    {}
func (*AccessTokenValidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{11}
}
func (m *AccessTokenValidation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccessTokenValidation.Unmarshal(m, b)
}
func (m *AccessTokenValidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccessTokenValidation.Marshal(b, m, deterministic)
}
func (m *AccessTokenValidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessTokenValidation.Merge(m, src)
}
func (m *AccessTokenValidation) XXX_Size() int {
	return xxx_messageInfo_AccessTokenValidation.Size(m)
}
func (m *AccessTokenValidation) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessTokenValidation.DiscardUnknown(m)
}

var xxx_messageInfo_AccessTokenValidation proto.InternalMessageInfo

type isAccessTokenValidation_ValidationType interface {
	isAccessTokenValidation_ValidationType()
	Equal(interface{}) bool
}

type AccessTokenValidation_IntrospectionUrl struct {
	IntrospectionUrl string `protobuf:"bytes,1,opt,name=introspection_url,json=introspectionUrl,proto3,oneof" json:"introspection_url,omitempty"`
}

func (*AccessTokenValidation_IntrospectionUrl) isAccessTokenValidation_ValidationType() {}

func (m *AccessTokenValidation) GetValidationType() isAccessTokenValidation_ValidationType {
	if m != nil {
		return m.ValidationType
	}
	return nil
}

func (m *AccessTokenValidation) GetIntrospectionUrl() string {
	if x, ok := m.GetValidationType().(*AccessTokenValidation_IntrospectionUrl); ok {
		return x.IntrospectionUrl
	}
	return ""
}

func (m *AccessTokenValidation) GetUserinfoUrl() string {
	if m != nil {
		return m.UserinfoUrl
	}
	return ""
}

func (m *AccessTokenValidation) GetCacheTimeout() *time.Duration {
	if m != nil {
		return m.CacheTimeout
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AccessTokenValidation) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AccessTokenValidation_IntrospectionUrl)(nil),
	}
}

type OauthSecret struct {
	ClientSecret         string   `protobuf:"bytes,1,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OauthSecret) Reset()         { *m = OauthSecret{} }
func (m *OauthSecret) String() string { return proto.CompactTextString(m) }
func (*OauthSecret) ProtoMessage()    {}
func (*OauthSecret) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{12}
}
func (m *OauthSecret) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OauthSecret.Unmarshal(m, b)
}
func (m *OauthSecret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OauthSecret.Marshal(b, m, deterministic)
}
func (m *OauthSecret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OauthSecret.Merge(m, src)
}
func (m *OauthSecret) XXX_Size() int {
	return xxx_messageInfo_OauthSecret.Size(m)
}
func (m *OauthSecret) XXX_DiscardUnknown() {
	xxx_messageInfo_OauthSecret.DiscardUnknown(m)
}

var xxx_messageInfo_OauthSecret proto.InternalMessageInfo

func (m *OauthSecret) GetClientSecret() string {
	if m != nil {
		return m.ClientSecret
	}
	return ""
}

type ApiKeyAuth struct {
	// identify all valid apikey secrets using the provided label selector.<br/>
	// apikey secrets must be in gloo's watch namespaces for gloo to locate them.<br/>
	// **These are labels on the apikey secret's metadata, not the 'labels' field of the `ApiKeySecret`**
	LabelSelector map[string]string `protobuf:"bytes,1,rep,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// a way to reference apikey secrets individually (good for testing); prefer apikey groups via label selector
	ApiKeySecretRefs     []*core.ResourceRef `protobuf:"bytes,2,rep,name=api_key_secret_refs,json=apiKeySecretRefs,proto3" json:"api_key_secret_refs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ApiKeyAuth) Reset()         { *m = ApiKeyAuth{} }
func (m *ApiKeyAuth) String() string { return proto.CompactTextString(m) }
func (*ApiKeyAuth) ProtoMessage()    {}
func (*ApiKeyAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{13}
}
func (m *ApiKeyAuth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApiKeyAuth.Unmarshal(m, b)
}
func (m *ApiKeyAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApiKeyAuth.Marshal(b, m, deterministic)
}
func (m *ApiKeyAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiKeyAuth.Merge(m, src)
}
func (m *ApiKeyAuth) XXX_Size() int {
	return xxx_messageInfo_ApiKeyAuth.Size(m)
}
func (m *ApiKeyAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiKeyAuth.DiscardUnknown(m)
}

var xxx_messageInfo_ApiKeyAuth proto.InternalMessageInfo

func (m *ApiKeyAuth) GetLabelSelector() map[string]string {
	if m != nil {
		return m.LabelSelector
	}
	return nil
}

func (m *ApiKeyAuth) GetApiKeySecretRefs() []*core.ResourceRef {
	if m != nil {
		return m.ApiKeySecretRefs
	}
	return nil
}

type ApiKeySecret struct {
	// if true, generate an apikey
	GenerateApiKey bool `protobuf:"varint,1,opt,name=generate_api_key,json=generateApiKey,proto3" json:"generate_api_key,omitempty"`
	// if present, use the provided apikey
	ApiKey string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// a list of labels (key=value) for the apikey secret.<br/>
	// These labels are used when creating an ApiKeySecret via `glooctl` and then are copied to the metadata
	// of the created secret.
	Labels               []string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApiKeySecret) Reset()         { *m = ApiKeySecret{} }
func (m *ApiKeySecret) String() string { return proto.CompactTextString(m) }
func (*ApiKeySecret) ProtoMessage()    {}
func (*ApiKeySecret) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{14}
}
func (m *ApiKeySecret) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApiKeySecret.Unmarshal(m, b)
}
func (m *ApiKeySecret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApiKeySecret.Marshal(b, m, deterministic)
}
func (m *ApiKeySecret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiKeySecret.Merge(m, src)
}
func (m *ApiKeySecret) XXX_Size() int {
	return xxx_messageInfo_ApiKeySecret.Size(m)
}
func (m *ApiKeySecret) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiKeySecret.DiscardUnknown(m)
}

var xxx_messageInfo_ApiKeySecret proto.InternalMessageInfo

func (m *ApiKeySecret) GetGenerateApiKey() bool {
	if m != nil {
		return m.GenerateApiKey
	}
	return false
}

func (m *ApiKeySecret) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *ApiKeySecret) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type OpaAuth struct {
	// An optional resource reference to config maps containing modules to assist in the resolution of `query`.
	Modules []*core.ResourceRef `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
	// The query that determines the auth decision. The result of this query must be either a boolean
	// or an array with boolean as the first element. A boolean `true` value means that the request
	// will be authorized. Any other value, or error, means that the request will be denied.
	Query                string   `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpaAuth) Reset()         { *m = OpaAuth{} }
func (m *OpaAuth) String() string { return proto.CompactTextString(m) }
func (*OpaAuth) ProtoMessage()    {}
func (*OpaAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{15}
}
func (m *OpaAuth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpaAuth.Unmarshal(m, b)
}
func (m *OpaAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpaAuth.Marshal(b, m, deterministic)
}
func (m *OpaAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpaAuth.Merge(m, src)
}
func (m *OpaAuth) XXX_Size() int {
	return xxx_messageInfo_OpaAuth.Size(m)
}
func (m *OpaAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_OpaAuth.DiscardUnknown(m)
}

var xxx_messageInfo_OpaAuth proto.InternalMessageInfo

func (m *OpaAuth) GetModules() []*core.ResourceRef {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *OpaAuth) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

// Authenticates and authorizes requests by querying an LDAP server. Gloo makes the following assumptions:
//  * Requests provide credentials via the basic HTTP authentication header. Gloo will BIND to the LDAP server using the
//    credentials extracted from the header.
//  * Your LDAP server is configured so that each entry you want to authorize has an attribute that indicates its group
//    memberships. A common way of achieving this is by using the [*memberof* overlay](http://www.openldap.org/software/man.cgi?query=slapo-memberof).
type Ldap struct {
	// Address of the LDAP server to query. Should be in the form ADDRESS:PORT, e.g. `ldap.default.svc.cluster.local:389`.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Template to build user entry distinguished names (DN). This must contains a single occurrence of the "%s" placeholder.
	// When processing a request, Gloo will substitute the name of the user (extracted from the auth header) for the
	// placeholder and issue a search request with the resulting DN as baseDN (and 'base' search scope).
	// E.g. "uid=%s,ou=people,dc=solo,dc=io"
	UserDnTemplate string `protobuf:"bytes,2,opt,name=userDnTemplate,proto3" json:"userDnTemplate,omitempty"`
	// Case-insensitive name of the attribute that contains the names of the groups an entry is member of. Gloo will look
	// for attributes with the given name to determine which groups the user entry belongs to. Defaults to 'memberOf' if not provided.
	MembershipAttributeName string `protobuf:"bytes,3,opt,name=membershipAttributeName,proto3" json:"membershipAttributeName,omitempty"`
	// In order for the request to be authenticated, the membership attribute (e.g. *memberOf*) on the user entry must
	// contain at least of one of the group DNs specified via this option.
	// E.g. []string{ "cn=managers,ou=groups,dc=solo,dc=io", "cn=developers,ou=groups,dc=solo,dc=io" }
	AllowedGroups []string `protobuf:"bytes,4,rep,name=allowedGroups,proto3" json:"allowedGroups,omitempty"`
	// Use this property to tune the pool of connections to the LDAP server that Gloo maintains.
	Pool                 *Ldap_ConnectionPool `protobuf:"bytes,5,opt,name=pool,proto3" json:"pool,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Ldap) Reset()         { *m = Ldap{} }
func (m *Ldap) String() string { return proto.CompactTextString(m) }
func (*Ldap) ProtoMessage()    {}
func (*Ldap) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{16}
}
func (m *Ldap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ldap.Unmarshal(m, b)
}
func (m *Ldap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ldap.Marshal(b, m, deterministic)
}
func (m *Ldap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ldap.Merge(m, src)
}
func (m *Ldap) XXX_Size() int {
	return xxx_messageInfo_Ldap.Size(m)
}
func (m *Ldap) XXX_DiscardUnknown() {
	xxx_messageInfo_Ldap.DiscardUnknown(m)
}

var xxx_messageInfo_Ldap proto.InternalMessageInfo

func (m *Ldap) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Ldap) GetUserDnTemplate() string {
	if m != nil {
		return m.UserDnTemplate
	}
	return ""
}

func (m *Ldap) GetMembershipAttributeName() string {
	if m != nil {
		return m.MembershipAttributeName
	}
	return ""
}

func (m *Ldap) GetAllowedGroups() []string {
	if m != nil {
		return m.AllowedGroups
	}
	return nil
}

func (m *Ldap) GetPool() *Ldap_ConnectionPool {
	if m != nil {
		return m.Pool
	}
	return nil
}

// Configuration properties for pooling connections to the LDAP server. If the pool is exhausted when a connection
// is requested (meaning that all the polled connections are in use), the connection will be created on the fly.
type Ldap_ConnectionPool struct {
	// Maximum number connections that are pooled at any give time. The default value is 5.
	MaxSize *types.UInt32Value `protobuf:"bytes,1,opt,name=maxSize,proto3" json:"maxSize,omitempty"`
	// Number of connections that the pool will be pre-populated with upon initialization. The default value is 2.
	InitialSize          *types.UInt32Value `protobuf:"bytes,2,opt,name=initialSize,proto3" json:"initialSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Ldap_ConnectionPool) Reset()         { *m = Ldap_ConnectionPool{} }
func (m *Ldap_ConnectionPool) String() string { return proto.CompactTextString(m) }
func (*Ldap_ConnectionPool) ProtoMessage()    {}
func (*Ldap_ConnectionPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{16, 0}
}
func (m *Ldap_ConnectionPool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ldap_ConnectionPool.Unmarshal(m, b)
}
func (m *Ldap_ConnectionPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ldap_ConnectionPool.Marshal(b, m, deterministic)
}
func (m *Ldap_ConnectionPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ldap_ConnectionPool.Merge(m, src)
}
func (m *Ldap_ConnectionPool) XXX_Size() int {
	return xxx_messageInfo_Ldap_ConnectionPool.Size(m)
}
func (m *Ldap_ConnectionPool) XXX_DiscardUnknown() {
	xxx_messageInfo_Ldap_ConnectionPool.DiscardUnknown(m)
}

var xxx_messageInfo_Ldap_ConnectionPool proto.InternalMessageInfo

func (m *Ldap_ConnectionPool) GetMaxSize() *types.UInt32Value {
	if m != nil {
		return m.MaxSize
	}
	return nil
}

func (m *Ldap_ConnectionPool) GetInitialSize() *types.UInt32Value {
	if m != nil {
		return m.InitialSize
	}
	return nil
}

//
//@solo-kit:xds-service=ExtAuthDiscoveryService
//@solo-kit:resource.no_references
type ExtAuthConfig struct {
	// @solo-kit:resource.name
	// This is the identifier of the AuthConfig resource that this configuration is associated with.
	// Any request to the external auth server includes an identifier that is matched against this field to determine
	// which AuthConfig should be applied to it.
	AuthConfigRefName    string                  `protobuf:"bytes,1,opt,name=auth_config_ref_name,json=authConfigRefName,proto3" json:"auth_config_ref_name,omitempty"`
	Configs              []*ExtAuthConfig_Config `protobuf:"bytes,8,rep,name=configs,proto3" json:"configs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ExtAuthConfig) Reset()         { *m = ExtAuthConfig{} }
func (m *ExtAuthConfig) String() string { return proto.CompactTextString(m) }
func (*ExtAuthConfig) ProtoMessage()    {}
func (*ExtAuthConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{17}
}
func (m *ExtAuthConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtAuthConfig.Unmarshal(m, b)
}
func (m *ExtAuthConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtAuthConfig.Marshal(b, m, deterministic)
}
func (m *ExtAuthConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtAuthConfig.Merge(m, src)
}
func (m *ExtAuthConfig) XXX_Size() int {
	return xxx_messageInfo_ExtAuthConfig.Size(m)
}
func (m *ExtAuthConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtAuthConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ExtAuthConfig proto.InternalMessageInfo

func (m *ExtAuthConfig) GetAuthConfigRefName() string {
	if m != nil {
		return m.AuthConfigRefName
	}
	return ""
}

func (m *ExtAuthConfig) GetConfigs() []*ExtAuthConfig_Config {
	if m != nil {
		return m.Configs
	}
	return nil
}

// Deprecated, prefer OAuth2Config
type ExtAuthConfig_OAuthConfig struct {
	// your client id as registered with the issuer
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"` // Deprecated: Do not use.
	// your client secret as registered with the issuer
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty" logging:"redact"` // Deprecated: Do not use.
	// The url of the issuer. We will look for OIDC information in issuerUrl+
	// ".well-known/openid-configuration"
	IssuerUrl string `protobuf:"bytes,3,opt,name=issuer_url,json=issuerUrl,proto3" json:"issuer_url,omitempty"` // Deprecated: Do not use.
	// extra query parameters to apply to the Ext-Auth service's authorization request to the identity provider.
	AuthEndpointQueryParams map[string]string `protobuf:"bytes,7,rep,name=auth_endpoint_query_params,json=authEndpointQueryParams,proto3" json:"auth_endpoint_query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Deprecated: Do not use.
	// we to redirect after successful auth, if we can't determine the original
	// url this should be your publicly available app url.
	AppUrl string `protobuf:"bytes,4,opt,name=app_url,json=appUrl,proto3" json:"app_url,omitempty"` // Deprecated: Do not use.
	// a callback path relative to app url that will be used for OIDC callbacks.
	// needs to not be used by the application
	CallbackPath string `protobuf:"bytes,5,opt,name=callback_path,json=callbackPath,proto3" json:"callback_path,omitempty"` // Deprecated: Do not use.
	// scopes to request in addition to the openid scope.
	Scopes               []string `protobuf:"bytes,6,rep,name=scopes,proto3" json:"scopes,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtAuthConfig_OAuthConfig) Reset()         { *m = ExtAuthConfig_OAuthConfig{} }
func (m *ExtAuthConfig_OAuthConfig) String() string { return proto.CompactTextString(m) }
func (*ExtAuthConfig_OAuthConfig) ProtoMessage()    {}
func (*ExtAuthConfig_OAuthConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{17, 0}
}
func (m *ExtAuthConfig_OAuthConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtAuthConfig_OAuthConfig.Unmarshal(m, b)
}
func (m *ExtAuthConfig_OAuthConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtAuthConfig_OAuthConfig.Marshal(b, m, deterministic)
}
func (m *ExtAuthConfig_OAuthConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtAuthConfig_OAuthConfig.Merge(m, src)
}
func (m *ExtAuthConfig_OAuthConfig) XXX_Size() int {
	return xxx_messageInfo_ExtAuthConfig_OAuthConfig.Size(m)
}
func (m *ExtAuthConfig_OAuthConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtAuthConfig_OAuthConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ExtAuthConfig_OAuthConfig proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *ExtAuthConfig_OAuthConfig) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

// Deprecated: Do not use.
func (m *ExtAuthConfig_OAuthConfig) GetClientSecret() string {
	if m != nil {
		return m.ClientSecret
	}
	return ""
}

// Deprecated: Do not use.
func (m *ExtAuthConfig_OAuthConfig) GetIssuerUrl() string {
	if m != nil {
		return m.IssuerUrl
	}
	return ""
}

// Deprecated: Do not use.
func (m *ExtAuthConfig_OAuthConfig) GetAuthEndpointQueryParams() map[string]string {
	if m != nil {
		return m.AuthEndpointQueryParams
	}
	return nil
}

// Deprecated: Do not use.
func (m *ExtAuthConfig_OAuthConfig) GetAppUrl() string {
	if m != nil {
		return m.AppUrl
	}
	return ""
}

// Deprecated: Do not use.
func (m *ExtAuthConfig_OAuthConfig) GetCallbackPath() string {
	if m != nil {
		return m.CallbackPath
	}
	return ""
}

// Deprecated: Do not use.
func (m *ExtAuthConfig_OAuthConfig) GetScopes() []string {
	if m != nil {
		return m.Scopes
	}
	return nil
}

type ExtAuthConfig_OidcAuthorizationCodeConfig struct {
	// your client id as registered with the issuer
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// your client secret as registered with the issuer
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty" logging:"redact"`
	// The url of the issuer. We will look for OIDC information in issuerUrl+
	// ".well-known/openid-configuration"
	IssuerUrl string `protobuf:"bytes,3,opt,name=issuer_url,json=issuerUrl,proto3" json:"issuer_url,omitempty"`
	// extra query parameters to apply to the Ext-Auth service's authorization request to the identity provider.
	AuthEndpointQueryParams map[string]string `protobuf:"bytes,4,rep,name=auth_endpoint_query_params,json=authEndpointQueryParams,proto3" json:"auth_endpoint_query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// we to redirect after successful auth, if we can't determine the original
	// url this should be your publicly available app url.
	AppUrl string `protobuf:"bytes,5,opt,name=app_url,json=appUrl,proto3" json:"app_url,omitempty"`
	// a callback path relative to app url that will be used for OIDC callbacks.
	// needs to not be used by the application
	CallbackPath string `protobuf:"bytes,6,opt,name=callback_path,json=callbackPath,proto3" json:"callback_path,omitempty"`
	// scopes to request in addition to the openid scope.
	Scopes               []string `protobuf:"bytes,7,rep,name=scopes,proto3" json:"scopes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtAuthConfig_OidcAuthorizationCodeConfig) Reset() {
	*m = ExtAuthConfig_OidcAuthorizationCodeConfig{}
}
func (m *ExtAuthConfig_OidcAuthorizationCodeConfig) String() string {
	return proto.CompactTextString(m)
}
func (*ExtAuthConfig_OidcAuthorizationCodeConfig) ProtoMessage() {}
func (*ExtAuthConfig_OidcAuthorizationCodeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{17, 1}
}
func (m *ExtAuthConfig_OidcAuthorizationCodeConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtAuthConfig_OidcAuthorizationCodeConfig.Unmarshal(m, b)
}
func (m *ExtAuthConfig_OidcAuthorizationCodeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtAuthConfig_OidcAuthorizationCodeConfig.Marshal(b, m, deterministic)
}
func (m *ExtAuthConfig_OidcAuthorizationCodeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtAuthConfig_OidcAuthorizationCodeConfig.Merge(m, src)
}
func (m *ExtAuthConfig_OidcAuthorizationCodeConfig) XXX_Size() int {
	return xxx_messageInfo_ExtAuthConfig_OidcAuthorizationCodeConfig.Size(m)
}
func (m *ExtAuthConfig_OidcAuthorizationCodeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtAuthConfig_OidcAuthorizationCodeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ExtAuthConfig_OidcAuthorizationCodeConfig proto.InternalMessageInfo

func (m *ExtAuthConfig_OidcAuthorizationCodeConfig) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *ExtAuthConfig_OidcAuthorizationCodeConfig) GetClientSecret() string {
	if m != nil {
		return m.ClientSecret
	}
	return ""
}

func (m *ExtAuthConfig_OidcAuthorizationCodeConfig) GetIssuerUrl() string {
	if m != nil {
		return m.IssuerUrl
	}
	return ""
}

func (m *ExtAuthConfig_OidcAuthorizationCodeConfig) GetAuthEndpointQueryParams() map[string]string {
	if m != nil {
		return m.AuthEndpointQueryParams
	}
	return nil
}

func (m *ExtAuthConfig_OidcAuthorizationCodeConfig) GetAppUrl() string {
	if m != nil {
		return m.AppUrl
	}
	return ""
}

func (m *ExtAuthConfig_OidcAuthorizationCodeConfig) GetCallbackPath() string {
	if m != nil {
		return m.CallbackPath
	}
	return ""
}

func (m *ExtAuthConfig_OidcAuthorizationCodeConfig) GetScopes() []string {
	if m != nil {
		return m.Scopes
	}
	return nil
}

type ExtAuthConfig_OAuth2Config struct {
	// Types that are valid to be assigned to OauthType:
	//	*ExtAuthConfig_OAuth2Config_OidcAuthorizationCode
	//	*ExtAuthConfig_OAuth2Config_AccessTokenValidation
	OauthType            isExtAuthConfig_OAuth2Config_OauthType `protobuf_oneof:"oauth_type"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *ExtAuthConfig_OAuth2Config) Reset()         { *m = ExtAuthConfig_OAuth2Config{} }
func (m *ExtAuthConfig_OAuth2Config) String() string { return proto.CompactTextString(m) }
func (*ExtAuthConfig_OAuth2Config) ProtoMessage()    {}
func (*ExtAuthConfig_OAuth2Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{17, 2}
}
func (m *ExtAuthConfig_OAuth2Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtAuthConfig_OAuth2Config.Unmarshal(m, b)
}
func (m *ExtAuthConfig_OAuth2Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtAuthConfig_OAuth2Config.Marshal(b, m, deterministic)
}
func (m *ExtAuthConfig_OAuth2Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtAuthConfig_OAuth2Config.Merge(m, src)
}
func (m *ExtAuthConfig_OAuth2Config) XXX_Size() int {
	return xxx_messageInfo_ExtAuthConfig_OAuth2Config.Size(m)
}
func (m *ExtAuthConfig_OAuth2Config) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtAuthConfig_OAuth2Config.DiscardUnknown(m)
}

var xxx_messageInfo_ExtAuthConfig_OAuth2Config proto.InternalMessageInfo

type isExtAuthConfig_OAuth2Config_OauthType interface {
	isExtAuthConfig_OAuth2Config_OauthType()
	Equal(interface{}) bool
}

type ExtAuthConfig_OAuth2Config_OidcAuthorizationCode struct {
	OidcAuthorizationCode *ExtAuthConfig_OidcAuthorizationCodeConfig `protobuf:"bytes,1,opt,name=oidc_authorization_code,json=oidcAuthorizationCode,proto3,oneof" json:"oidc_authorization_code,omitempty"`
}
type ExtAuthConfig_OAuth2Config_AccessTokenValidation struct {
	AccessTokenValidation *AccessTokenValidation `protobuf:"bytes,2,opt,name=access_token_validation,json=accessTokenValidation,proto3,oneof" json:"access_token_validation,omitempty"`
}

func (*ExtAuthConfig_OAuth2Config_OidcAuthorizationCode) isExtAuthConfig_OAuth2Config_OauthType() {}
func (*ExtAuthConfig_OAuth2Config_AccessTokenValidation) isExtAuthConfig_OAuth2Config_OauthType() {}

func (m *ExtAuthConfig_OAuth2Config) GetOauthType() isExtAuthConfig_OAuth2Config_OauthType {
	if m != nil {
		return m.OauthType
	}
	return nil
}

func (m *ExtAuthConfig_OAuth2Config) GetOidcAuthorizationCode() *ExtAuthConfig_OidcAuthorizationCodeConfig {
	if x, ok := m.GetOauthType().(*ExtAuthConfig_OAuth2Config_OidcAuthorizationCode); ok {
		return x.OidcAuthorizationCode
	}
	return nil
}

func (m *ExtAuthConfig_OAuth2Config) GetAccessTokenValidation() *AccessTokenValidation {
	if x, ok := m.GetOauthType().(*ExtAuthConfig_OAuth2Config_AccessTokenValidation); ok {
		return x.AccessTokenValidation
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ExtAuthConfig_OAuth2Config) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ExtAuthConfig_OAuth2Config_OidcAuthorizationCode)(nil),
		(*ExtAuthConfig_OAuth2Config_AccessTokenValidation)(nil),
	}
}

// **NOTE: This configuration is not user-facing and will be auto generated**
type ExtAuthConfig_ApiKeyAuthConfig struct {
	// A mapping of valid apikeys to their associated plaintext users.
	// This map is automatically populated with the relevant `ApiKeySecret`s.
	// The user is mapped as the name of `Secret` which contains the `ApiKeySecret`
	ValidApiKeyAndUser   map[string]string `protobuf:"bytes,1,rep,name=valid_api_key_and_user,json=validApiKeyAndUser,proto3" json:"valid_api_key_and_user,omitempty" logging:"redact" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ExtAuthConfig_ApiKeyAuthConfig) Reset()         { *m = ExtAuthConfig_ApiKeyAuthConfig{} }
func (m *ExtAuthConfig_ApiKeyAuthConfig) String() string { return proto.CompactTextString(m) }
func (*ExtAuthConfig_ApiKeyAuthConfig) ProtoMessage()    {}
func (*ExtAuthConfig_ApiKeyAuthConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{17, 3}
}
func (m *ExtAuthConfig_ApiKeyAuthConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtAuthConfig_ApiKeyAuthConfig.Unmarshal(m, b)
}
func (m *ExtAuthConfig_ApiKeyAuthConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtAuthConfig_ApiKeyAuthConfig.Marshal(b, m, deterministic)
}
func (m *ExtAuthConfig_ApiKeyAuthConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtAuthConfig_ApiKeyAuthConfig.Merge(m, src)
}
func (m *ExtAuthConfig_ApiKeyAuthConfig) XXX_Size() int {
	return xxx_messageInfo_ExtAuthConfig_ApiKeyAuthConfig.Size(m)
}
func (m *ExtAuthConfig_ApiKeyAuthConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtAuthConfig_ApiKeyAuthConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ExtAuthConfig_ApiKeyAuthConfig proto.InternalMessageInfo

func (m *ExtAuthConfig_ApiKeyAuthConfig) GetValidApiKeyAndUser() map[string]string {
	if m != nil {
		return m.ValidApiKeyAndUser
	}
	return nil
}

type ExtAuthConfig_OpaAuthConfig struct {
	// An optional modules (filename, module content) maps containing modules assist in the resolution of `query`.
	Modules map[string]string `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The query that determines the auth decision. The result of this query must be either a boolean
	// or an array with boolean as the first element. A boolean `true` value means that the request
	// will be authorized. Any other value, or error, means that the request will be denied.
	Query                string   `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtAuthConfig_OpaAuthConfig) Reset()         { *m = ExtAuthConfig_OpaAuthConfig{} }
func (m *ExtAuthConfig_OpaAuthConfig) String() string { return proto.CompactTextString(m) }
func (*ExtAuthConfig_OpaAuthConfig) ProtoMessage()    {}
func (*ExtAuthConfig_OpaAuthConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{17, 4}
}
func (m *ExtAuthConfig_OpaAuthConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtAuthConfig_OpaAuthConfig.Unmarshal(m, b)
}
func (m *ExtAuthConfig_OpaAuthConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtAuthConfig_OpaAuthConfig.Marshal(b, m, deterministic)
}
func (m *ExtAuthConfig_OpaAuthConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtAuthConfig_OpaAuthConfig.Merge(m, src)
}
func (m *ExtAuthConfig_OpaAuthConfig) XXX_Size() int {
	return xxx_messageInfo_ExtAuthConfig_OpaAuthConfig.Size(m)
}
func (m *ExtAuthConfig_OpaAuthConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtAuthConfig_OpaAuthConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ExtAuthConfig_OpaAuthConfig proto.InternalMessageInfo

func (m *ExtAuthConfig_OpaAuthConfig) GetModules() map[string]string {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *ExtAuthConfig_OpaAuthConfig) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type ExtAuthConfig_Config struct {
	// Types that are valid to be assigned to AuthConfig:
	//	*ExtAuthConfig_Config_Oauth
	//	*ExtAuthConfig_Config_Oauth2
	//	*ExtAuthConfig_Config_BasicAuth
	//	*ExtAuthConfig_Config_ApiKeyAuth
	//	*ExtAuthConfig_Config_PluginAuth
	//	*ExtAuthConfig_Config_OpaAuth
	//	*ExtAuthConfig_Config_Ldap
	AuthConfig           isExtAuthConfig_Config_AuthConfig `protobuf_oneof:"auth_config"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ExtAuthConfig_Config) Reset()         { *m = ExtAuthConfig_Config{} }
func (m *ExtAuthConfig_Config) String() string { return proto.CompactTextString(m) }
func (*ExtAuthConfig_Config) ProtoMessage()    {}
func (*ExtAuthConfig_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{17, 5}
}
func (m *ExtAuthConfig_Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtAuthConfig_Config.Unmarshal(m, b)
}
func (m *ExtAuthConfig_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtAuthConfig_Config.Marshal(b, m, deterministic)
}
func (m *ExtAuthConfig_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtAuthConfig_Config.Merge(m, src)
}
func (m *ExtAuthConfig_Config) XXX_Size() int {
	return xxx_messageInfo_ExtAuthConfig_Config.Size(m)
}
func (m *ExtAuthConfig_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtAuthConfig_Config.DiscardUnknown(m)
}

var xxx_messageInfo_ExtAuthConfig_Config proto.InternalMessageInfo

type isExtAuthConfig_Config_AuthConfig interface {
	isExtAuthConfig_Config_AuthConfig()
	Equal(interface{}) bool
}

type ExtAuthConfig_Config_Oauth struct {
	Oauth *ExtAuthConfig_OAuthConfig `protobuf:"bytes,3,opt,name=oauth,proto3,oneof" json:"oauth,omitempty"`
}
type ExtAuthConfig_Config_Oauth2 struct {
	Oauth2 *ExtAuthConfig_OAuth2Config `protobuf:"bytes,9,opt,name=oauth2,proto3,oneof" json:"oauth2,omitempty"`
}
type ExtAuthConfig_Config_BasicAuth struct {
	BasicAuth *BasicAuth `protobuf:"bytes,4,opt,name=basic_auth,json=basicAuth,proto3,oneof" json:"basic_auth,omitempty"`
}
type ExtAuthConfig_Config_ApiKeyAuth struct {
	ApiKeyAuth *ExtAuthConfig_ApiKeyAuthConfig `protobuf:"bytes,5,opt,name=api_key_auth,json=apiKeyAuth,proto3,oneof" json:"api_key_auth,omitempty"`
}
type ExtAuthConfig_Config_PluginAuth struct {
	PluginAuth *AuthPlugin `protobuf:"bytes,6,opt,name=plugin_auth,json=pluginAuth,proto3,oneof" json:"plugin_auth,omitempty"`
}
type ExtAuthConfig_Config_OpaAuth struct {
	OpaAuth *ExtAuthConfig_OpaAuthConfig `protobuf:"bytes,7,opt,name=opa_auth,json=opaAuth,proto3,oneof" json:"opa_auth,omitempty"`
}
type ExtAuthConfig_Config_Ldap struct {
	Ldap *Ldap `protobuf:"bytes,8,opt,name=ldap,proto3,oneof" json:"ldap,omitempty"`
}

func (*ExtAuthConfig_Config_Oauth) isExtAuthConfig_Config_AuthConfig()      {}
func (*ExtAuthConfig_Config_Oauth2) isExtAuthConfig_Config_AuthConfig()     {}
func (*ExtAuthConfig_Config_BasicAuth) isExtAuthConfig_Config_AuthConfig()  {}
func (*ExtAuthConfig_Config_ApiKeyAuth) isExtAuthConfig_Config_AuthConfig() {}
func (*ExtAuthConfig_Config_PluginAuth) isExtAuthConfig_Config_AuthConfig() {}
func (*ExtAuthConfig_Config_OpaAuth) isExtAuthConfig_Config_AuthConfig()    {}
func (*ExtAuthConfig_Config_Ldap) isExtAuthConfig_Config_AuthConfig()       {}

func (m *ExtAuthConfig_Config) GetAuthConfig() isExtAuthConfig_Config_AuthConfig {
	if m != nil {
		return m.AuthConfig
	}
	return nil
}

// Deprecated: Do not use.
func (m *ExtAuthConfig_Config) GetOauth() *ExtAuthConfig_OAuthConfig {
	if x, ok := m.GetAuthConfig().(*ExtAuthConfig_Config_Oauth); ok {
		return x.Oauth
	}
	return nil
}

func (m *ExtAuthConfig_Config) GetOauth2() *ExtAuthConfig_OAuth2Config {
	if x, ok := m.GetAuthConfig().(*ExtAuthConfig_Config_Oauth2); ok {
		return x.Oauth2
	}
	return nil
}

func (m *ExtAuthConfig_Config) GetBasicAuth() *BasicAuth {
	if x, ok := m.GetAuthConfig().(*ExtAuthConfig_Config_BasicAuth); ok {
		return x.BasicAuth
	}
	return nil
}

func (m *ExtAuthConfig_Config) GetApiKeyAuth() *ExtAuthConfig_ApiKeyAuthConfig {
	if x, ok := m.GetAuthConfig().(*ExtAuthConfig_Config_ApiKeyAuth); ok {
		return x.ApiKeyAuth
	}
	return nil
}

func (m *ExtAuthConfig_Config) GetPluginAuth() *AuthPlugin {
	if x, ok := m.GetAuthConfig().(*ExtAuthConfig_Config_PluginAuth); ok {
		return x.PluginAuth
	}
	return nil
}

func (m *ExtAuthConfig_Config) GetOpaAuth() *ExtAuthConfig_OpaAuthConfig {
	if x, ok := m.GetAuthConfig().(*ExtAuthConfig_Config_OpaAuth); ok {
		return x.OpaAuth
	}
	return nil
}

func (m *ExtAuthConfig_Config) GetLdap() *Ldap {
	if x, ok := m.GetAuthConfig().(*ExtAuthConfig_Config_Ldap); ok {
		return x.Ldap
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ExtAuthConfig_Config) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ExtAuthConfig_Config_Oauth)(nil),
		(*ExtAuthConfig_Config_Oauth2)(nil),
		(*ExtAuthConfig_Config_BasicAuth)(nil),
		(*ExtAuthConfig_Config_ApiKeyAuth)(nil),
		(*ExtAuthConfig_Config_PluginAuth)(nil),
		(*ExtAuthConfig_Config_OpaAuth)(nil),
		(*ExtAuthConfig_Config_Ldap)(nil),
	}
}

type AuthConfigStatus struct {
	// State is the enum indicating the state of the resource
	State AuthConfigStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=enterprise.gloo.solo.io.AuthConfigStatus_State" json:"state,omitempty"`
	// Reason is a description of the error for Rejected resources. If the resource is pending or accepted, this field will be empty
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// Reference to the reporter who wrote this status
	ReportedBy string `protobuf:"bytes,3,opt,name=reported_by,json=reportedBy,proto3" json:"reported_by,omitempty"`
	// Reference to statuses (by resource-ref string: "Kind.Namespace.Name") of subresources of the parent resource
	SubresourceStatuses map[string]*AuthConfigStatus `protobuf:"bytes,4,rep,name=subresource_statuses,json=subresourceStatuses,proto3" json:"subresource_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Opaque details about status results
	Details              *types.Struct `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AuthConfigStatus) Reset()         { *m = AuthConfigStatus{} }
func (m *AuthConfigStatus) String() string { return proto.CompactTextString(m) }
func (*AuthConfigStatus) ProtoMessage()    {}
func (*AuthConfigStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d274aa66d3244c2, []int{18}
}
func (m *AuthConfigStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthConfigStatus.Unmarshal(m, b)
}
func (m *AuthConfigStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthConfigStatus.Marshal(b, m, deterministic)
}
func (m *AuthConfigStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthConfigStatus.Merge(m, src)
}
func (m *AuthConfigStatus) XXX_Size() int {
	return xxx_messageInfo_AuthConfigStatus.Size(m)
}
func (m *AuthConfigStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthConfigStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AuthConfigStatus proto.InternalMessageInfo

func (m *AuthConfigStatus) GetState() AuthConfigStatus_State {
	if m != nil {
		return m.State
	}
	return AuthConfigStatus_Pending
}

func (m *AuthConfigStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *AuthConfigStatus) GetReportedBy() string {
	if m != nil {
		return m.ReportedBy
	}
	return ""
}

func (m *AuthConfigStatus) GetSubresourceStatuses() map[string]*AuthConfigStatus {
	if m != nil {
		return m.SubresourceStatuses
	}
	return nil
}

func (m *AuthConfigStatus) GetDetails() *types.Struct {
	if m != nil {
		return m.Details
	}
	return nil
}

func init() {
	proto.RegisterEnum("enterprise.gloo.solo.io.AuthConfigStatus_State", AuthConfigStatus_State_name, AuthConfigStatus_State_value)
	proto.RegisterType((*AuthConfigSpec)(nil), "enterprise.gloo.solo.io.AuthConfigSpec")
	proto.RegisterType((*AuthConfigSpec_Config)(nil), "enterprise.gloo.solo.io.AuthConfigSpec.Config")
	proto.RegisterType((*ExtAuthExtension)(nil), "enterprise.gloo.solo.io.ExtAuthExtension")
	proto.RegisterType((*Settings)(nil), "enterprise.gloo.solo.io.Settings")
	proto.RegisterType((*HttpService)(nil), "enterprise.gloo.solo.io.HttpService")
	proto.RegisterType((*HttpService_Request)(nil), "enterprise.gloo.solo.io.HttpService.Request")
	proto.RegisterMapType((map[string]string)(nil), "enterprise.gloo.solo.io.HttpService.Request.HeadersToAddEntry")
	proto.RegisterType((*HttpService_Response)(nil), "enterprise.gloo.solo.io.HttpService.Response")
	proto.RegisterType((*BufferSettings)(nil), "enterprise.gloo.solo.io.BufferSettings")
	proto.RegisterType((*CustomAuth)(nil), "enterprise.gloo.solo.io.CustomAuth")
	proto.RegisterMapType((map[string]string)(nil), "enterprise.gloo.solo.io.CustomAuth.ContextExtensionsEntry")
	proto.RegisterType((*AuthPlugin)(nil), "enterprise.gloo.solo.io.AuthPlugin")
	proto.RegisterType((*BasicAuth)(nil), "enterprise.gloo.solo.io.BasicAuth")
	proto.RegisterType((*BasicAuth_Apr)(nil), "enterprise.gloo.solo.io.BasicAuth.Apr")
	proto.RegisterMapType((map[string]*BasicAuth_Apr_SaltedHashedPassword)(nil), "enterprise.gloo.solo.io.BasicAuth.Apr.UsersEntry")
	proto.RegisterType((*BasicAuth_Apr_SaltedHashedPassword)(nil), "enterprise.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword")
	proto.RegisterType((*OAuth)(nil), "enterprise.gloo.solo.io.OAuth")
	proto.RegisterMapType((map[string]string)(nil), "enterprise.gloo.solo.io.OAuth.AuthEndpointQueryParamsEntry")
	proto.RegisterType((*OAuth2)(nil), "enterprise.gloo.solo.io.OAuth2")
	proto.RegisterType((*OidcAuthorizationCode)(nil), "enterprise.gloo.solo.io.OidcAuthorizationCode")
	proto.RegisterMapType((map[string]string)(nil), "enterprise.gloo.solo.io.OidcAuthorizationCode.AuthEndpointQueryParamsEntry")
	proto.RegisterType((*AccessTokenValidation)(nil), "enterprise.gloo.solo.io.AccessTokenValidation")
	proto.RegisterType((*OauthSecret)(nil), "enterprise.gloo.solo.io.OauthSecret")
	proto.RegisterType((*ApiKeyAuth)(nil), "enterprise.gloo.solo.io.ApiKeyAuth")
	proto.RegisterMapType((map[string]string)(nil), "enterprise.gloo.solo.io.ApiKeyAuth.LabelSelectorEntry")
	proto.RegisterType((*ApiKeySecret)(nil), "enterprise.gloo.solo.io.ApiKeySecret")
	proto.RegisterType((*OpaAuth)(nil), "enterprise.gloo.solo.io.OpaAuth")
	proto.RegisterType((*Ldap)(nil), "enterprise.gloo.solo.io.Ldap")
	proto.RegisterType((*Ldap_ConnectionPool)(nil), "enterprise.gloo.solo.io.Ldap.ConnectionPool")
	proto.RegisterType((*ExtAuthConfig)(nil), "enterprise.gloo.solo.io.ExtAuthConfig")
	proto.RegisterType((*ExtAuthConfig_OAuthConfig)(nil), "enterprise.gloo.solo.io.ExtAuthConfig.OAuthConfig")
	proto.RegisterMapType((map[string]string)(nil), "enterprise.gloo.solo.io.ExtAuthConfig.OAuthConfig.AuthEndpointQueryParamsEntry")
	proto.RegisterType((*ExtAuthConfig_OidcAuthorizationCodeConfig)(nil), "enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig")
	proto.RegisterMapType((map[string]string)(nil), "enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.AuthEndpointQueryParamsEntry")
	proto.RegisterType((*ExtAuthConfig_OAuth2Config)(nil), "enterprise.gloo.solo.io.ExtAuthConfig.OAuth2Config")
	proto.RegisterType((*ExtAuthConfig_ApiKeyAuthConfig)(nil), "enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig")
	proto.RegisterMapType((map[string]string)(nil), "enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.ValidApiKeyAndUserEntry")
	proto.RegisterType((*ExtAuthConfig_OpaAuthConfig)(nil), "enterprise.gloo.solo.io.ExtAuthConfig.OpaAuthConfig")
	proto.RegisterMapType((map[string]string)(nil), "enterprise.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.ModulesEntry")
	proto.RegisterType((*ExtAuthConfig_Config)(nil), "enterprise.gloo.solo.io.ExtAuthConfig.Config")
	proto.RegisterType((*AuthConfigStatus)(nil), "enterprise.gloo.solo.io.AuthConfigStatus")
	proto.RegisterMapType((map[string]*AuthConfigStatus)(nil), "enterprise.gloo.solo.io.AuthConfigStatus.SubresourceStatusesEntry")
}

func init() {
	proto.RegisterFile("github.com/solo-io/solo-apis/api/gloo/enterprise.gloo/v1/auth_config.proto", fileDescriptor_4d274aa66d3244c2)
}

var fileDescriptor_4d274aa66d3244c2 = []byte{
	// 2644 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x5a, 0xcf, 0x6f, 0x1b, 0xc7,
	0xf5, 0xd7, 0x92, 0x14, 0x49, 0x3d, 0x52, 0x12, 0x35, 0x96, 0x2d, 0x85, 0x4e, 0x2c, 0x87, 0x31,
	0x1c, 0x7f, 0x83, 0x84, 0x8c, 0xe9, 0x20, 0x5f, 0x47, 0x41, 0x7e, 0x88, 0xb6, 0x6c, 0xc9, 0x89,
	0x23, 0x65, 0x69, 0xe7, 0x0b, 0x7c, 0xd3, 0x62, 0x31, 0xdc, 0x1d, 0x92, 0x5b, 0x2f, 0x77, 0x36,
	0x33, 0xb3, 0x8a, 0x68, 0xa4, 0x97, 0xa2, 0x87, 0x1c, 0x0b, 0xf4, 0xd2, 0x14, 0xfd, 0x03, 0x8a,
	0x02, 0xbd, 0xb5, 0x40, 0x51, 0xa0, 0x3d, 0xe4, 0xd2, 0x63, 0x0f, 0x45, 0x81, 0x16, 0xe8, 0x0f,
	0xa0, 0xe8, 0xa9, 0x87, 0x1e, 0x0a, 0x04, 0xed, 0xb1, 0x98, 0x1f, 0x4b, 0x91, 0x12, 0x49, 0x51,
	0x6e, 0x0b, 0x14, 0xed, 0x49, 0x9c, 0xf7, 0xde, 0xe7, 0xed, 0xbc, 0x79, 0x9f, 0x99, 0x79, 0x33,
	0x23, 0xb8, 0xd7, 0xf1, 0x45, 0x37, 0x6e, 0x55, 0x5d, 0xda, 0xab, 0x71, 0x1a, 0xd0, 0x97, 0x7c,
	0xaa, 0xff, 0xe2, 0xc8, 0xe7, 0x35, 0x1c, 0xf9, 0xb5, 0x4e, 0x40, 0x69, 0x8d, 0x84, 0x82, 0xb0,
	0x88, 0xf9, 0x9c, 0x54, 0x55, 0xfb, 0xe0, 0x7a, 0x0d, 0xc7, 0xa2, 0xeb, 0xb8, 0x34, 0x6c, 0xfb,
	0x9d, 0x6a, 0xc4, 0xa8, 0xa0, 0x68, 0xed, 0x98, 0x55, 0x55, 0x3a, 0xaa, 0xfa, 0xb4, 0xfc, 0x94,
	0xf2, 0xf8, 0xc8, 0x17, 0xca, 0xe1, 0xc1, 0xf5, 0x1a, 0x23, 0x6d, 0x8d, 0x29, 0xaf, 0x76, 0x68,
	0x87, 0xaa, 0x9f, 0x35, 0xf9, 0xcb, 0x48, 0x11, 0x39, 0x14, 0x5a, 0x48, 0x0e, 0x85, 0x91, 0x5d,
	0x3a, 0xee, 0x24, 0x69, 0x1b, 0xfd, 0xd3, 0x24, 0x3c, 0xa0, 0x7d, 0xad, 0xac, 0xd7, 0x3c, 0x9f,
	0xbb, 0xf4, 0x80, 0xb0, 0x7e, 0xa2, 0xed, 0x50, 0xda, 0x09, 0x88, 0x52, 0xe3, 0x30, 0xa4, 0x02,
	0x0b, 0x9f, 0x86, 0x3c, 0xf1, 0x6d, 0xb4, 0xaa, 0xd5, 0x8a, 0xdb, 0x35, 0x2f, 0x66, 0xca, 0xe0,
	0x18, 0x7a, 0xa0, 0xe7, 0x82, 0xc5, 0xae, 0x98, 0x84, 0xfe, 0x98, 0xe1, 0x28, 0x22, 0xcc, 0x78,
	0xaf, 0xfc, 0x30, 0x03, 0x4b, 0x5b, 0xb1, 0xe8, 0xde, 0x52, 0x83, 0xd5, 0x8c, 0x88, 0x8b, 0x76,
	0x20, 0xa7, 0x87, 0x8e, 0xaf, 0xa7, 0x2f, 0xa7, 0xaf, 0x15, 0xea, 0xd5, 0xea, 0x84, 0xc1, 0xab,
	0x8e, 0x22, 0xab, 0xfa, 0xa7, 0x9d, 0xc0, 0xcb, 0xbf, 0x4a, 0x43, 0x56, 0xcb, 0xd0, 0x2d, 0x80,
	0x16, 0xe6, 0xbe, 0xeb, 0xc8, 0xd4, 0xac, 0x5b, 0x97, 0xad, 0x6b, 0x85, 0x7a, 0x65, 0xa2, 0xdf,
	0x86, 0x34, 0x95, 0xce, 0x77, 0xe6, 0xec, 0x85, 0x56, 0xd2, 0x40, 0x9b, 0x30, 0x4f, 0x15, 0x3e,
	0xa5, 0xf0, 0x97, 0x26, 0xe2, 0xf7, 0xa4, 0x79, 0x23, 0xb5, 0x6e, 0xed, 0xcc, 0xd9, 0x1a, 0x82,
	0x5e, 0x83, 0xac, 0xfa, 0x51, 0x5f, 0xcf, 0x2b, 0xf0, 0xc6, 0x74, 0x70, 0x7d, 0x67, 0xce, 0x36,
	0x00, 0x74, 0x17, 0x8a, 0x38, 0xf2, 0x9d, 0x47, 0xa4, 0xaf, 0x7b, 0x9f, 0x51, 0x0e, 0x9e, 0x9b,
	0x3c, 0x2a, 0x91, 0xff, 0x0e, 0xe9, 0x9b, 0xee, 0x03, 0x1e, 0xb4, 0xd0, 0x1d, 0x28, 0x44, 0x41,
	0xdc, 0xf1, 0x43, 0xed, 0x67, 0xfe, 0x34, 0x3f, 0xb1, 0xe8, 0xee, 0x2b, 0x7b, 0xe9, 0x47, 0x23,
	0x95, 0x9f, 0x37, 0x20, 0x4f, 0x23, 0xac, 0x9d, 0x64, 0x95, 0x93, 0xcb, 0x93, 0xa3, 0x89, 0xb0,
	0xe9, 0x49, 0x8e, 0xea, 0x9f, 0xe8, 0x06, 0x64, 0x02, 0x0f, 0x47, 0xeb, 0x39, 0x05, 0x7d, 0x66,
	0x22, 0xf4, 0x5d, 0x0f, 0x47, 0x3b, 0x73, 0xb6, 0x32, 0x6e, 0x2c, 0x42, 0x61, 0x68, 0x56, 0x55,
	0x7e, 0x6c, 0x41, 0x69, 0xfb, 0x50, 0x48, 0x7f, 0xdb, 0x87, 0x82, 0x84, 0xdc, 0xa7, 0x21, 0x2a,
	0x43, 0xce, 0xf3, 0x39, 0x6e, 0x05, 0x44, 0x65, 0x38, 0x2f, 0x3f, 0x6a, 0x04, 0x68, 0x13, 0x40,
	0x43, 0x1d, 0x46, 0xda, 0x26, 0x81, 0x4f, 0x55, 0x5d, 0xca, 0xc8, 0xe0, 0x7b, 0x36, 0xe1, 0x34,
	0x66, 0x2e, 0xb1, 0x49, 0x5b, 0xe6, 0x5d, 0x9b, 0xdb, 0xa4, 0x2d, 0xc7, 0xcd, 0x8d, 0xb9, 0xa0,
	0x3d, 0x1d, 0x72, 0xfa, 0x94, 0x71, 0xbb, 0xa5, 0x6c, 0x93, 0xf1, 0x77, 0x07, 0xad, 0x46, 0x16,
	0x32, 0x3c, 0x22, 0x6e, 0xe5, 0x37, 0x69, 0xc8, 0x37, 0x89, 0x10, 0x7e, 0xd8, 0xe1, 0x68, 0x17,
	0xce, 0x91, 0x43, 0x21, 0x1d, 0x3f, 0x76, 0x38, 0x61, 0x07, 0x84, 0xa9, 0x1e, 0x5a, 0xa7, 0xf4,
	0xd0, 0x5e, 0x49, 0x50, 0x4d, 0x05, 0x92, 0xfd, 0xbc, 0x0b, 0xc5, 0xae, 0x10, 0x91, 0x72, 0xe3,
	0xbb, 0xc4, 0x44, 0x79, 0x65, 0x62, 0x47, 0x77, 0x84, 0x88, 0x9a, 0xda, 0xd6, 0x2e, 0x74, 0x8f,
	0x1a, 0xe8, 0x0a, 0x2c, 0xc5, 0x9c, 0x30, 0xc7, 0xf7, 0x9c, 0x2e, 0xc1, 0x1e, 0x61, 0x2a, 0xe6,
	0x05, 0xbb, 0x28, 0xa5, 0xbb, 0xde, 0x8e, 0x92, 0xa1, 0x1d, 0x58, 0x66, 0xe4, 0xa3, 0x98, 0x70,
	0xe1, 0x08, 0xbf, 0x47, 0x68, 0x2c, 0x0c, 0x35, 0x9f, 0xaa, 0xea, 0x59, 0x5f, 0x4d, 0x66, 0x7d,
	0xf5, 0xb6, 0x59, 0x33, 0x1a, 0x99, 0x6f, 0xfd, 0x7e, 0xc3, 0xb2, 0x97, 0x0c, 0xee, 0x81, 0x86,
	0xa1, 0x17, 0x01, 0xb5, 0xb1, 0x1f, 0xc4, 0x8c, 0x38, 0x3d, 0xea, 0x11, 0x07, 0x07, 0x01, 0xfd,
	0x58, 0xf1, 0x33, 0x6f, 0x97, 0x8c, 0xe6, 0x3e, 0xf5, 0xc8, 0x96, 0x94, 0xa3, 0x7b, 0x50, 0x4c,
	0xbe, 0xdb, 0xa2, 0x5e, 0xdf, 0x50, 0xf0, 0xf9, 0xc9, 0xb3, 0x39, 0x6e, 0xb7, 0x09, 0x4b, 0x06,
	0xdc, 0x2e, 0x18, 0x70, 0x83, 0x7a, 0x7d, 0xf4, 0x02, 0xac, 0xb8, 0x01, 0xc1, 0xcc, 0x61, 0x34,
	0x16, 0xc4, 0x71, 0xb1, 0xdb, 0x25, 0x8a, 0x98, 0x79, 0x7b, 0x59, 0x29, 0x6c, 0x29, 0xbf, 0x25,
	0xc5, 0xe8, 0x2a, 0x2c, 0x73, 0x81, 0x45, 0xcc, 0x1d, 0x1a, 0x3a, 0x84, 0x31, 0xca, 0xd4, 0x5c,
	0x5e, 0xb4, 0x17, 0xb5, 0x78, 0x2f, 0xdc, 0x96, 0xc2, 0xca, 0x67, 0x19, 0x28, 0x0c, 0x0d, 0x2d,
	0xda, 0x80, 0x42, 0x84, 0x45, 0xd7, 0x89, 0x18, 0x69, 0xfb, 0x87, 0x2a, 0xb3, 0x0b, 0x36, 0x48,
	0xd1, 0xbe, 0x92, 0xa0, 0x3b, 0x90, 0x33, 0x7d, 0x32, 0x29, 0x7b, 0x71, 0x96, 0x94, 0x55, 0x6d,
	0x8d, 0xb1, 0x13, 0x30, 0xda, 0x85, 0x3c, 0x23, 0x3c, 0xa2, 0x21, 0x27, 0x86, 0xa4, 0x2f, 0xcd,
	0xe8, 0x48, 0x83, 0xec, 0x01, 0xbc, 0xfc, 0x6b, 0x0b, 0x72, 0xc6, 0x3f, 0x7a, 0x1e, 0x96, 0x55,
	0x42, 0x48, 0xc2, 0x06, 0xbe, 0x6e, 0x5d, 0x4e, 0x5f, 0x5b, 0xb0, 0x97, 0x8c, 0x58, 0xf3, 0x81,
	0x23, 0x0f, 0x96, 0x8c, 0x81, 0x23, 0xa8, 0x83, 0x3d, 0x6f, 0x3d, 0xa5, 0x16, 0xf0, 0x37, 0xcf,
	0x12, 0x4e, 0xd5, 0x78, 0x7b, 0x40, 0xb7, 0x3c, 0x6f, 0x3b, 0x14, 0xac, 0x6f, 0x17, 0xbb, 0x43,
	0xa2, 0xf2, 0x5b, 0xb0, 0x72, 0xc2, 0x04, 0x95, 0x20, 0xfd, 0x88, 0xf4, 0xcd, 0xd8, 0xca, 0x9f,
	0x68, 0x15, 0xe6, 0x0f, 0x70, 0x10, 0xeb, 0x59, 0xb0, 0x60, 0xeb, 0xc6, 0x66, 0xea, 0xa6, 0x55,
	0x7e, 0x0c, 0xf9, 0x24, 0x62, 0x74, 0x13, 0xd6, 0x93, 0xd8, 0xe2, 0x88, 0x0b, 0x46, 0x70, 0xef,
	0x58, 0x90, 0x17, 0x8c, 0xfe, 0xa1, 0x51, 0x27, 0xc1, 0xbe, 0x02, 0x89, 0xc6, 0x71, 0x03, 0x9f,
	0x84, 0x62, 0x80, 0x4b, 0x29, 0xdc, 0xaa, 0xd1, 0xde, 0x52, 0x4a, 0x83, 0xaa, 0x44, 0xb0, 0x34,
	0x4a, 0x47, 0xc9, 0xc0, 0x1e, 0x3e, 0x74, 0x06, 0x8c, 0xee, 0x0b, 0xc2, 0x55, 0x1c, 0x8b, 0xf6,
	0x72, 0x0f, 0x1f, 0x9a, 0x51, 0x69, 0x48, 0x31, 0xaa, 0xc3, 0x79, 0xe5, 0xd5, 0x89, 0x30, 0x13,
	0x3e, 0x0e, 0x9c, 0x1e, 0xe1, 0x1c, 0x77, 0x74, 0x8c, 0x79, 0xfb, 0x9c, 0x52, 0xee, 0x6b, 0xdd,
	0x7d, 0xad, 0xaa, 0xfc, 0xc4, 0x02, 0x38, 0x5a, 0x91, 0x90, 0x0f, 0xc8, 0xa5, 0xa1, 0x20, 0x87,
	0xc2, 0x21, 0xc9, 0xc2, 0xa9, 0x43, 0x2d, 0xd4, 0x37, 0x67, 0x58, 0xd2, 0xe4, 0x26, 0x2b, 0xd1,
	0x83, 0x55, 0x97, 0xeb, 0x1c, 0xad, 0xb8, 0xc7, 0xe5, 0xe5, 0xdb, 0x70, 0x61, 0xbc, 0xf1, 0x59,
	0xb2, 0x55, 0xf9, 0xbe, 0x05, 0x70, 0xb4, 0x13, 0x21, 0x04, 0x99, 0x10, 0xf7, 0x88, 0xc1, 0xaa,
	0xdf, 0xe8, 0x1a, 0x94, 0xcc, 0xbe, 0xd6, 0xf6, 0x03, 0xe2, 0x28, 0xbd, 0xf6, 0xb3, 0xa4, 0xe5,
	0x77, 0xfc, 0x80, 0xbc, 0x27, 0x2d, 0x5f, 0x86, 0x55, 0x72, 0x18, 0x51, 0x26, 0x88, 0xe7, 0xf0,
	0x7e, 0xaf, 0x45, 0x03, 0x6d, 0xad, 0x97, 0x37, 0x94, 0xe8, 0x9a, 0x4a, 0xa5, 0x10, 0x35, 0xc8,
	0xea, 0x8d, 0xc0, 0xac, 0x6d, 0x6b, 0x27, 0xd6, 0xb6, 0xa6, 0xaa, 0x77, 0x6c, 0x63, 0x56, 0xf9,
	0x5b, 0x0a, 0x16, 0x06, 0xf5, 0x83, 0x8c, 0x8b, 0x11, 0x1c, 0xf4, 0x4c, 0x7f, 0x75, 0x03, 0xdd,
	0x84, 0x34, 0x8e, 0x98, 0x99, 0xec, 0x57, 0x4f, 0x2f, 0x43, 0xaa, 0x5b, 0x11, 0xb3, 0x25, 0xa4,
	0xfc, 0xed, 0x14, 0xa4, 0xb7, 0x22, 0x86, 0xee, 0xc2, 0xbc, 0x5c, 0x8b, 0xb9, 0x99, 0x61, 0xd7,
	0x67, 0xf3, 0x51, 0x7d, 0x28, 0x31, 0x3a, 0x61, 0x1a, 0x5f, 0x6e, 0xc2, 0x6a, 0x13, 0x07, 0x82,
	0x78, 0x3b, 0x98, 0x77, 0x89, 0xb7, 0x8f, 0x39, 0xff, 0x98, 0x32, 0x4f, 0x8e, 0x33, 0xc7, 0x81,
	0x48, 0xc6, 0x59, 0xfe, 0x96, 0x0b, 0x41, 0x57, 0x59, 0x39, 0x91, 0x31, 0x4b, 0x86, 0xb9, 0x3b,
	0x02, 0x2e, 0xc7, 0x00, 0x47, 0x5f, 0x1a, 0x93, 0xed, 0xf7, 0x87, 0xb3, 0x5d, 0xa8, 0xbf, 0x3e,
	0x63, 0xef, 0xc7, 0x75, 0x74, 0x98, 0x2a, 0x9f, 0xa7, 0x61, 0x5e, 0x55, 0x4f, 0x68, 0x03, 0x16,
	0xcc, 0xa4, 0xf4, 0x3d, 0xfd, 0x61, 0x59, 0x8d, 0xd9, 0x79, 0x2d, 0xdc, 0xf5, 0xd0, 0xae, 0x5c,
	0xf7, 0x95, 0x01, 0x27, 0x2e, 0x23, 0x62, 0xa6, 0xaa, 0x40, 0xf9, 0x58, 0xd6, 0xb8, 0xa6, 0x82,
	0xc9, 0x5d, 0xf7, 0x59, 0x00, 0x9f, 0xf3, 0x98, 0x30, 0x27, 0x66, 0x81, 0x66, 0x92, 0x32, 0x5c,
	0xd0, 0xd2, 0x87, 0x2c, 0x40, 0x9f, 0x40, 0x59, 0x15, 0x2f, 0x24, 0xf4, 0x22, 0xea, 0x87, 0xc2,
	0xf9, 0x28, 0x26, 0xac, 0x2f, 0x67, 0x31, 0xee, 0xf1, 0xf5, 0x9c, 0x4a, 0xe1, 0xeb, 0xd3, 0x0b,
	0x42, 0x55, 0x8d, 0x6d, 0x1b, 0xfc, 0xfb, 0x12, 0xbe, 0xaf, 0xd0, 0x6a, 0x88, 0xd5, 0xf7, 0xd6,
	0xf0, 0x78, 0x0b, 0x74, 0x11, 0x72, 0x38, 0x8a, 0x54, 0xef, 0x32, 0x83, 0xde, 0x65, 0x71, 0x14,
	0xc9, 0xae, 0x3d, 0x0f, 0x8b, 0x2e, 0x0e, 0x82, 0x16, 0x76, 0x1f, 0x39, 0x72, 0x4b, 0x52, 0xbb,
	0xae, 0x36, 0x29, 0x26, 0x8a, 0x7d, 0x2c, 0xba, 0xa8, 0x0c, 0x59, 0xee, 0xd2, 0x88, 0xf0, 0xf5,
	0xac, 0x5c, 0xdf, 0xb4, 0x13, 0x2d, 0x29, 0xdf, 0x83, 0xa7, 0xa7, 0x75, 0xef, 0x4c, 0xf3, 0xfd,
	0x4f, 0x16, 0x64, 0x75, 0x09, 0x8c, 0xba, 0xb0, 0x46, 0x7d, 0x4f, 0xd7, 0xec, 0x94, 0xf9, 0x8f,
	0x55, 0x09, 0xe1, 0xb8, 0xd4, 0x23, 0xa6, 0x3c, 0x9a, 0x7c, 0x32, 0xd8, 0xf3, 0x3d, 0xc5, 0x9b,
	0x01, 0xec, 0x16, 0xf5, 0xc8, 0xce, 0x9c, 0x7d, 0x9e, 0x8e, 0x53, 0xc8, 0x2f, 0x61, 0xd7, 0x25,
	0x5c, 0x6e, 0x5c, 0x8f, 0x48, 0xe8, 0x1c, 0xe0, 0xc0, 0xf7, 0x94, 0xda, 0x90, 0x62, 0xca, 0x19,
	0x44, 0xe1, 0x1e, 0x48, 0xd8, 0x07, 0x03, 0x94, 0xfc, 0x12, 0x1e, 0xa7, 0x68, 0x14, 0x01, 0x54,
	0x59, 0xef, 0x88, 0x7e, 0x44, 0x2a, 0x3f, 0x4b, 0xc3, 0xf9, 0xb1, 0x5d, 0x45, 0x17, 0x4f, 0x30,
	0x78, 0x88, 0xbd, 0xdb, 0x4f, 0xc2, 0xde, 0x93, 0xcc, 0x7d, 0xe6, 0x24, 0x73, 0x87, 0x59, 0xfb,
	0xa9, 0x35, 0x95, 0xb6, 0x19, 0x45, 0xdb, 0x77, 0xce, 0x96, 0x82, 0xa9, 0x34, 0x9e, 0x4c, 0xe1,
	0xb5, 0x23, 0x0a, 0x2b, 0x7e, 0x0e, 0xe8, 0xfb, 0xdc, 0x71, 0xfa, 0x66, 0x75, 0xa1, 0x3a, 0x42,
	0xdd, 0x0b, 0x03, 0xea, 0xe6, 0xd4, 0xd6, 0xfc, 0xaf, 0xa0, 0xed, 0xe7, 0x16, 0x9c, 0x1f, 0x4b,
	0x05, 0xf4, 0x12, 0xac, 0xf8, 0xa1, 0x60, 0x54, 0x96, 0xfe, 0x8a, 0xc0, 0x32, 0x0a, 0xe5, 0x73,
	0x67, 0xce, 0x2e, 0x8d, 0xa8, 0x64, 0x44, 0xcf, 0x82, 0xaa, 0xb2, 0xfd, 0xb0, 0x4d, 0x8f, 0xa6,
	0xac, 0x5d, 0x48, 0x64, 0xd2, 0xe4, 0xb6, 0x0c, 0xda, 0xed, 0x92, 0x41, 0xd9, 0x3d, 0x3f, 0x5b,
	0xd9, 0x5d, 0x54, 0x28, 0x53, 0x74, 0x37, 0x56, 0x60, 0xf9, 0x88, 0xe6, 0x9a, 0x8e, 0x75, 0x28,
	0xec, 0xc9, 0x14, 0x68, 0x8a, 0xa8, 0xc1, 0x1d, 0xa6, 0x99, 0x19, 0x89, 0xe2, 0x30, 0x8f, 0x2a,
	0x7f, 0x95, 0xfb, 0xf3, 0xd1, 0x19, 0xf3, 0xcb, 0xb0, 0x14, 0xe0, 0x16, 0x09, 0x1c, 0x4e, 0x02,
	0xe2, 0x0a, 0xca, 0x4c, 0x6d, 0xf1, 0xea, 0x0c, 0xc7, 0xd5, 0xea, 0xbb, 0x12, 0xd9, 0x34, 0x40,
	0x4d, 0x89, 0xc5, 0x60, 0x58, 0x86, 0x76, 0xe0, 0x5c, 0x72, 0x16, 0x3e, 0xa2, 0x7e, 0xb2, 0x0b,
	0x4e, 0xe1, 0x7e, 0x49, 0x1f, 0x83, 0x07, 0xdc, 0xe7, 0xe5, 0xb7, 0x01, 0x9d, 0xfc, 0xdc, 0x99,
	0x52, 0xee, 0x43, 0x71, 0x6b, 0xc8, 0xab, 0x2c, 0x43, 0x3a, 0x24, 0x24, 0x0c, 0x0b, 0xe2, 0x98,
	0x4e, 0xea, 0x73, 0xa8, 0xbd, 0x94, 0xc8, 0xb5, 0xbd, 0xa6, 0xb3, 0x36, 0x48, 0x25, 0x74, 0x56,
	0x8a, 0x0b, 0x90, 0x55, 0xf1, 0xea, 0xab, 0x8f, 0x05, 0xdb, 0xb4, 0x2a, 0x0f, 0x20, 0xb7, 0x37,
	0x38, 0x3d, 0xe7, 0x7a, 0xd4, 0x8b, 0x03, 0x92, 0x54, 0x6d, 0x53, 0xa2, 0x4e, 0x2c, 0x65, 0x10,
	0x6a, 0xee, 0x26, 0x41, 0xa8, 0x46, 0xe5, 0x8b, 0x14, 0x64, 0xe4, 0x21, 0x1b, 0xad, 0x43, 0x0e,
	0x7b, 0x1e, 0x23, 0x9c, 0x9b, 0xc8, 0x93, 0x26, 0xba, 0xaa, 0x4f, 0x82, 0xb7, 0xc3, 0x07, 0xa4,
	0x17, 0x05, 0x58, 0x0c, 0x0a, 0xab, 0x51, 0x29, 0xba, 0x09, 0x6b, 0x3d, 0xd2, 0x6b, 0x11, 0xc6,
	0xbb, 0x7e, 0xb4, 0x25, 0x04, 0xf3, 0x5b, 0xb1, 0x50, 0x35, 0x97, 0x59, 0x57, 0x26, 0xa9, 0xd1,
	0x15, 0x58, 0x34, 0x95, 0xf2, 0x5d, 0x46, 0xe3, 0x48, 0xaf, 0x2b, 0x0b, 0xf6, 0xa8, 0x10, 0xbd,
	0x0d, 0x99, 0x88, 0xd2, 0xc0, 0x30, 0xfd, 0xc5, 0xa9, 0x77, 0x06, 0xb2, 0x44, 0x0d, 0xf5, 0x84,
	0xda, 0xa7, 0x34, 0xb0, 0x15, 0xb2, 0xfc, 0xa9, 0x05, 0x4b, 0xa3, 0x0a, 0xf4, 0x2a, 0xe4, 0x7a,
	0xf8, 0xb0, 0xe9, 0x3f, 0x4e, 0xf6, 0x93, 0xa7, 0x4f, 0xcc, 0xa0, 0x87, 0xbb, 0xa1, 0xb8, 0x51,
	0xff, 0x40, 0xe6, 0xdc, 0x4e, 0x8c, 0xd1, 0x9b, 0x50, 0xf0, 0x43, 0x5f, 0x16, 0xd9, 0x0a, 0x9b,
	0x9a, 0x01, 0x3b, 0x0c, 0xa8, 0x7c, 0x0f, 0xc1, 0xa2, 0xb9, 0xbc, 0x30, 0xd7, 0x53, 0x35, 0x58,
	0x1d, 0xba, 0xdd, 0x90, 0x9c, 0x76, 0x86, 0xaa, 0xdc, 0x15, 0x3c, 0xb0, 0xb4, 0x49, 0x5b, 0x8d,
	0xda, 0xdd, 0xa3, 0x4b, 0xb2, 0xbc, 0x62, 0xc1, 0xe4, 0x93, 0xde, 0xc8, 0x97, 0x4e, 0xdc, 0x91,
	0xfd, 0x3c, 0x0d, 0x85, 0xbd, 0xa1, 0x9e, 0x9c, 0x5a, 0x39, 0xbd, 0x7e, 0x7c, 0x51, 0x50, 0x84,
	0x68, 0x5c, 0xf8, 0xcb, 0xef, 0x36, 0x4a, 0x01, 0xed, 0x74, 0xfc, 0xb0, 0xb3, 0x59, 0x61, 0xc4,
	0xc3, 0xae, 0xa8, 0xa8, 0x22, 0x62, 0x68, 0xb1, 0x98, 0xa5, 0x56, 0xfa, 0x86, 0x35, 0x43, 0xb1,
	0xb4, 0x37, 0x63, 0xb4, 0x43, 0x91, 0xfd, 0xb7, 0x14, 0x50, 0xe5, 0x5f, 0xa6, 0xe1, 0xe2, 0xd8,
	0xbd, 0xd7, 0x64, 0x78, 0x6a, 0x65, 0xf1, 0xda, 0xf8, 0xec, 0xae, 0x8e, 0xcb, 0xee, 0xb1, 0xdc,
	0x9e, 0x52, 0x4d, 0x7c, 0x67, 0x96, 0x6a, 0xc2, 0x99, 0x35, 0xaf, 0x93, 0xe3, 0xfb, 0x4f, 0xad,
	0x30, 0xca, 0x5f, 0x4f, 0x41, 0x51, 0x17, 0xc6, 0x26, 0x91, 0x9f, 0x9c, 0x56, 0x1e, 0x37, 0xfe,
	0xf1, 0xd1, 0xfc, 0xb7, 0x2b, 0x99, 0xcb, 0x5f, 0x58, 0x50, 0x3a, 0x2a, 0x19, 0xcc, 0x50, 0x7c,
	0x66, 0xc1, 0x05, 0xd5, 0x01, 0x67, 0x70, 0x53, 0x1e, 0x7a, 0x8e, 0xdc, 0xa3, 0xcc, 0x26, 0x39,
	0xeb, 0x82, 0x71, 0xdc, 0x73, 0x55, 0xf5, 0xc3, 0x48, 0x43, 0x4f, 0x9e, 0x6a, 0xf5, 0x82, 0x31,
	0x7e, 0x46, 0xa0, 0x83, 0x13, 0xe6, 0xe5, 0x6d, 0x58, 0x9b, 0xe0, 0xe4, 0x4c, 0xe9, 0xff, 0xa9,
	0x05, 0x8b, 0xa6, 0x06, 0x30, 0x41, 0x7f, 0x78, 0xbc, 0x12, 0xd8, 0x9a, 0x35, 0xdf, 0xc3, 0x6e,
	0xaa, 0xf7, 0xb5, 0x0f, 0x3d, 0x3f, 0xa6, 0x57, 0x0c, 0xe5, 0x4d, 0x28, 0x0e, 0x9b, 0x9f, 0x29,
	0x80, 0x1f, 0x64, 0x06, 0xaf, 0x31, 0xef, 0x25, 0x0f, 0x29, 0xfa, 0x96, 0xb2, 0x7e, 0xf6, 0xd5,
	0x7c, 0xf4, 0x71, 0xe5, 0xfe, 0xe0, 0x71, 0x65, 0x41, 0x39, 0xbc, 0x71, 0x16, 0x87, 0xf5, 0x01,
	0xd3, 0x93, 0x07, 0x97, 0xd1, 0xc7, 0xa2, 0xcc, 0x93, 0x3d, 0x16, 0x7d, 0x78, 0xec, 0xd5, 0x46,
	0x57, 0x2e, 0xff, 0xfb, 0x84, 0x3c, 0x9c, 0xfe, 0x92, 0x93, 0x7d, 0xd2, 0x97, 0x9c, 0xf7, 0x87,
	0x5e, 0x72, 0xf4, 0x73, 0xcc, 0x2b, 0x4f, 0xc2, 0xa1, 0x71, 0xaf, 0x3b, 0xf9, 0x27, 0x7f, 0xdd,
	0xb9, 0x97, 0xc9, 0x5b, 0xa5, 0xd4, 0xbd, 0x4c, 0x3e, 0x55, 0x4a, 0x57, 0xfe, 0x9c, 0x86, 0xd2,
	0xd0, 0x3b, 0x9f, 0xba, 0x69, 0x47, 0xdb, 0x30, 0xcf, 0x85, 0xac, 0x46, 0x25, 0xf3, 0x96, 0xea,
	0xb5, 0x59, 0x5e, 0x08, 0x15, 0xb2, 0x2a, 0xff, 0x10, 0x5b, 0xa3, 0xe5, 0xb2, 0xcd, 0x08, 0xe6,
	0x66, 0xc9, 0x5a, 0xb0, 0x4d, 0x0b, 0x6d, 0x40, 0x81, 0x11, 0x73, 0x4d, 0xd8, 0xea, 0x9b, 0xbd,
	0x0c, 0x12, 0x51, 0xa3, 0x8f, 0x62, 0x58, 0xe5, 0x71, 0x8b, 0x99, 0x52, 0xdb, 0xd1, 0xf7, 0xff,
	0x24, 0xd9, 0xc5, 0x1a, 0x67, 0xe8, 0xce, 0x91, 0x97, 0xa6, 0x71, 0xa2, 0x27, 0xe2, 0x39, 0x7e,
	0x52, 0x83, 0xae, 0x43, 0xce, 0x23, 0x02, 0xfb, 0x01, 0x37, 0x74, 0x9a, 0x78, 0x1b, 0x99, 0xd8,
	0x95, 0x3f, 0x82, 0xf5, 0x49, 0xdf, 0x18, 0x33, 0x7b, 0xdf, 0x1a, 0xbd, 0x98, 0xfb, 0x9f, 0x99,
	0x03, 0x19, 0x3e, 0x17, 0xbd, 0x01, 0xf3, 0x6a, 0x94, 0x51, 0x01, 0x72, 0xfb, 0x24, 0xf4, 0xfc,
	0xb0, 0x53, 0x9a, 0x43, 0x45, 0xc8, 0xcb, 0x75, 0x3f, 0x12, 0xc4, 0x2b, 0x59, 0xb2, 0x65, 0x93,
	0xaf, 0x10, 0x57, 0xb6, 0x52, 0xd2, 0xf0, 0xff, 0x30, 0x0b, 0xa5, 0x61, 0xba, 0xfe, 0xdb, 0x14,
	0xac, 0x19, 0xae, 0xdd, 0x4e, 0x5e, 0xaa, 0x93, 0xa7, 0x94, 0x2f, 0xc1, 0xb9, 0xa6, 0xba, 0x85,
	0x1f, 0x2d, 0x9f, 0x2f, 0x55, 0xd5, 0x03, 0x77, 0x15, 0x47, 0x7e, 0xf5, 0xa0, 0x5e, 0x1d, 0xc0,
	0xcc, 0xe5, 0x79, 0x79, 0x63, 0xa2, 0x5e, 0x3f, 0x03, 0x54, 0xe6, 0xae, 0x59, 0x2f, 0x5b, 0x88,
	0x00, 0xba, 0x4d, 0x02, 0x81, 0x47, 0x9d, 0x3f, 0x77, 0x0c, 0x2c, 0x2d, 0x4e, 0x7c, 0xe1, 0xca,
	0x74, 0xa3, 0x91, 0xcf, 0x7c, 0x15, 0xd0, 0x1d, 0x22, 0xdc, 0xee, 0x3f, 0x39, 0x86, 0xab, 0x5f,
	0xfb, 0xc5, 0x1f, 0xbf, 0x99, 0xba, 0x5c, 0xb9, 0x38, 0xf2, 0xc6, 0xbf, 0x69, 0x9e, 0x09, 0xf5,
	0xcc, 0xda, 0xb4, 0x5e, 0x68, 0xec, 0xfe, 0xe8, 0x8b, 0x8c, 0xf5, 0xdd, 0x3f, 0x5c, 0xb2, 0xfe,
	0xff, 0xad, 0xa9, 0xff, 0xe0, 0x10, 0x3d, 0xea, 0xa8, 0x7f, 0x09, 0x98, 0x40, 0x81, 0xda, 0xc1,
	0xf5, 0x56, 0x56, 0xd1, 0xee, 0xc6, 0xdf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa3, 0xbe, 0x99, 0xc9,
	0x2a, 0x21, 0x00, 0x00,
}

func (this *AuthConfigSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthConfigSpec)
	if !ok {
		that2, ok := that.(AuthConfigSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Configs) != len(that1.Configs) {
		return false
	}
	for i := range this.Configs {
		if !this.Configs[i].Equal(that1.Configs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AuthConfigSpec_Config) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthConfigSpec_Config)
	if !ok {
		that2, ok := that.(AuthConfigSpec_Config)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AuthConfig == nil {
		if this.AuthConfig != nil {
			return false
		}
	} else if this.AuthConfig == nil {
		return false
	} else if !this.AuthConfig.Equal(that1.AuthConfig) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AuthConfigSpec_Config_BasicAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthConfigSpec_Config_BasicAuth)
	if !ok {
		that2, ok := that.(AuthConfigSpec_Config_BasicAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BasicAuth.Equal(that1.BasicAuth) {
		return false
	}
	return true
}
func (this *AuthConfigSpec_Config_Oauth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthConfigSpec_Config_Oauth)
	if !ok {
		that2, ok := that.(AuthConfigSpec_Config_Oauth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Oauth.Equal(that1.Oauth) {
		return false
	}
	return true
}
func (this *AuthConfigSpec_Config_Oauth2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthConfigSpec_Config_Oauth2)
	if !ok {
		that2, ok := that.(AuthConfigSpec_Config_Oauth2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Oauth2.Equal(that1.Oauth2) {
		return false
	}
	return true
}
func (this *AuthConfigSpec_Config_ApiKeyAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthConfigSpec_Config_ApiKeyAuth)
	if !ok {
		that2, ok := that.(AuthConfigSpec_Config_ApiKeyAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiKeyAuth.Equal(that1.ApiKeyAuth) {
		return false
	}
	return true
}
func (this *AuthConfigSpec_Config_PluginAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthConfigSpec_Config_PluginAuth)
	if !ok {
		that2, ok := that.(AuthConfigSpec_Config_PluginAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PluginAuth.Equal(that1.PluginAuth) {
		return false
	}
	return true
}
func (this *AuthConfigSpec_Config_OpaAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthConfigSpec_Config_OpaAuth)
	if !ok {
		that2, ok := that.(AuthConfigSpec_Config_OpaAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OpaAuth.Equal(that1.OpaAuth) {
		return false
	}
	return true
}
func (this *AuthConfigSpec_Config_Ldap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthConfigSpec_Config_Ldap)
	if !ok {
		that2, ok := that.(AuthConfigSpec_Config_Ldap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ldap.Equal(that1.Ldap) {
		return false
	}
	return true
}
func (this *ExtAuthExtension) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthExtension)
	if !ok {
		that2, ok := that.(ExtAuthExtension)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Spec == nil {
		if this.Spec != nil {
			return false
		}
	} else if this.Spec == nil {
		return false
	} else if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExtAuthExtension_Disable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthExtension_Disable)
	if !ok {
		that2, ok := that.(ExtAuthExtension_Disable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Disable != that1.Disable {
		return false
	}
	return true
}
func (this *ExtAuthExtension_ConfigRef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthExtension_ConfigRef)
	if !ok {
		that2, ok := that.(ExtAuthExtension_ConfigRef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ConfigRef.Equal(that1.ConfigRef) {
		return false
	}
	return true
}
func (this *ExtAuthExtension_CustomAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthExtension_CustomAuth)
	if !ok {
		that2, ok := that.(ExtAuthExtension_CustomAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomAuth.Equal(that1.CustomAuth) {
		return false
	}
	return true
}
func (this *Settings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings)
	if !ok {
		that2, ok := that.(Settings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExtauthzServerRef.Equal(that1.ExtauthzServerRef) {
		return false
	}
	if !this.HttpService.Equal(that1.HttpService) {
		return false
	}
	if this.UserIdHeader != that1.UserIdHeader {
		return false
	}
	if this.RequestTimeout != nil && that1.RequestTimeout != nil {
		if *this.RequestTimeout != *that1.RequestTimeout {
			return false
		}
	} else if this.RequestTimeout != nil {
		return false
	} else if that1.RequestTimeout != nil {
		return false
	}
	if this.FailureModeAllow != that1.FailureModeAllow {
		return false
	}
	if !this.RequestBody.Equal(that1.RequestBody) {
		return false
	}
	if this.ClearRouteCache != that1.ClearRouteCache {
		return false
	}
	if this.StatusOnError != that1.StatusOnError {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HttpService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpService)
	if !ok {
		that2, ok := that.(HttpService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PathPrefix != that1.PathPrefix {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if !this.Response.Equal(that1.Response) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HttpService_Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpService_Request)
	if !ok {
		that2, ok := that.(HttpService_Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AllowedHeaders) != len(that1.AllowedHeaders) {
		return false
	}
	for i := range this.AllowedHeaders {
		if this.AllowedHeaders[i] != that1.AllowedHeaders[i] {
			return false
		}
	}
	if len(this.HeadersToAdd) != len(that1.HeadersToAdd) {
		return false
	}
	for i := range this.HeadersToAdd {
		if this.HeadersToAdd[i] != that1.HeadersToAdd[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HttpService_Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpService_Response)
	if !ok {
		that2, ok := that.(HttpService_Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AllowedUpstreamHeaders) != len(that1.AllowedUpstreamHeaders) {
		return false
	}
	for i := range this.AllowedUpstreamHeaders {
		if this.AllowedUpstreamHeaders[i] != that1.AllowedUpstreamHeaders[i] {
			return false
		}
	}
	if len(this.AllowedClientHeaders) != len(that1.AllowedClientHeaders) {
		return false
	}
	for i := range this.AllowedClientHeaders {
		if this.AllowedClientHeaders[i] != that1.AllowedClientHeaders[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BufferSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BufferSettings)
	if !ok {
		that2, ok := that.(BufferSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxRequestBytes != that1.MaxRequestBytes {
		return false
	}
	if this.AllowPartialMessage != that1.AllowPartialMessage {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CustomAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomAuth)
	if !ok {
		that2, ok := that.(CustomAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ContextExtensions) != len(that1.ContextExtensions) {
		return false
	}
	for i := range this.ContextExtensions {
		if this.ContextExtensions[i] != that1.ContextExtensions[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AuthPlugin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthPlugin)
	if !ok {
		that2, ok := that.(AuthPlugin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.PluginFileName != that1.PluginFileName {
		return false
	}
	if this.ExportedSymbolName != that1.ExportedSymbolName {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BasicAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BasicAuth)
	if !ok {
		that2, ok := that.(BasicAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Realm != that1.Realm {
		return false
	}
	if !this.Apr.Equal(that1.Apr) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BasicAuth_Apr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BasicAuth_Apr)
	if !ok {
		that2, ok := that.(BasicAuth_Apr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BasicAuth_Apr_SaltedHashedPassword) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BasicAuth_Apr_SaltedHashedPassword)
	if !ok {
		that2, ok := that.(BasicAuth_Apr_SaltedHashedPassword)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Salt != that1.Salt {
		return false
	}
	if this.HashedPassword != that1.HashedPassword {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OAuth)
	if !ok {
		that2, ok := that.(OAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientId != that1.ClientId {
		return false
	}
	if !this.ClientSecretRef.Equal(that1.ClientSecretRef) {
		return false
	}
	if this.IssuerUrl != that1.IssuerUrl {
		return false
	}
	if len(this.AuthEndpointQueryParams) != len(that1.AuthEndpointQueryParams) {
		return false
	}
	for i := range this.AuthEndpointQueryParams {
		if this.AuthEndpointQueryParams[i] != that1.AuthEndpointQueryParams[i] {
			return false
		}
	}
	if this.AppUrl != that1.AppUrl {
		return false
	}
	if this.CallbackPath != that1.CallbackPath {
		return false
	}
	if len(this.Scopes) != len(that1.Scopes) {
		return false
	}
	for i := range this.Scopes {
		if this.Scopes[i] != that1.Scopes[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OAuth2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OAuth2)
	if !ok {
		that2, ok := that.(OAuth2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.OauthType == nil {
		if this.OauthType != nil {
			return false
		}
	} else if this.OauthType == nil {
		return false
	} else if !this.OauthType.Equal(that1.OauthType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OAuth2_OidcAuthorizationCode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OAuth2_OidcAuthorizationCode)
	if !ok {
		that2, ok := that.(OAuth2_OidcAuthorizationCode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OidcAuthorizationCode.Equal(that1.OidcAuthorizationCode) {
		return false
	}
	return true
}
func (this *OAuth2_AccessTokenValidation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OAuth2_AccessTokenValidation)
	if !ok {
		that2, ok := that.(OAuth2_AccessTokenValidation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AccessTokenValidation.Equal(that1.AccessTokenValidation) {
		return false
	}
	return true
}
func (this *OidcAuthorizationCode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OidcAuthorizationCode)
	if !ok {
		that2, ok := that.(OidcAuthorizationCode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientId != that1.ClientId {
		return false
	}
	if !this.ClientSecretRef.Equal(that1.ClientSecretRef) {
		return false
	}
	if this.IssuerUrl != that1.IssuerUrl {
		return false
	}
	if len(this.AuthEndpointQueryParams) != len(that1.AuthEndpointQueryParams) {
		return false
	}
	for i := range this.AuthEndpointQueryParams {
		if this.AuthEndpointQueryParams[i] != that1.AuthEndpointQueryParams[i] {
			return false
		}
	}
	if this.AppUrl != that1.AppUrl {
		return false
	}
	if this.CallbackPath != that1.CallbackPath {
		return false
	}
	if len(this.Scopes) != len(that1.Scopes) {
		return false
	}
	for i := range this.Scopes {
		if this.Scopes[i] != that1.Scopes[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AccessTokenValidation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccessTokenValidation)
	if !ok {
		that2, ok := that.(AccessTokenValidation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ValidationType == nil {
		if this.ValidationType != nil {
			return false
		}
	} else if this.ValidationType == nil {
		return false
	} else if !this.ValidationType.Equal(that1.ValidationType) {
		return false
	}
	if this.UserinfoUrl != that1.UserinfoUrl {
		return false
	}
	if this.CacheTimeout != nil && that1.CacheTimeout != nil {
		if *this.CacheTimeout != *that1.CacheTimeout {
			return false
		}
	} else if this.CacheTimeout != nil {
		return false
	} else if that1.CacheTimeout != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AccessTokenValidation_IntrospectionUrl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccessTokenValidation_IntrospectionUrl)
	if !ok {
		that2, ok := that.(AccessTokenValidation_IntrospectionUrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IntrospectionUrl != that1.IntrospectionUrl {
		return false
	}
	return true
}
func (this *OauthSecret) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OauthSecret)
	if !ok {
		that2, ok := that.(OauthSecret)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientSecret != that1.ClientSecret {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ApiKeyAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiKeyAuth)
	if !ok {
		that2, ok := that.(ApiKeyAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LabelSelector) != len(that1.LabelSelector) {
		return false
	}
	for i := range this.LabelSelector {
		if this.LabelSelector[i] != that1.LabelSelector[i] {
			return false
		}
	}
	if len(this.ApiKeySecretRefs) != len(that1.ApiKeySecretRefs) {
		return false
	}
	for i := range this.ApiKeySecretRefs {
		if !this.ApiKeySecretRefs[i].Equal(that1.ApiKeySecretRefs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ApiKeySecret) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiKeySecret)
	if !ok {
		that2, ok := that.(ApiKeySecret)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GenerateApiKey != that1.GenerateApiKey {
		return false
	}
	if this.ApiKey != that1.ApiKey {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OpaAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpaAuth)
	if !ok {
		that2, ok := that.(OpaAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Modules) != len(that1.Modules) {
		return false
	}
	for i := range this.Modules {
		if !this.Modules[i].Equal(that1.Modules[i]) {
			return false
		}
	}
	if this.Query != that1.Query {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Ldap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ldap)
	if !ok {
		that2, ok := that.(Ldap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.UserDnTemplate != that1.UserDnTemplate {
		return false
	}
	if this.MembershipAttributeName != that1.MembershipAttributeName {
		return false
	}
	if len(this.AllowedGroups) != len(that1.AllowedGroups) {
		return false
	}
	for i := range this.AllowedGroups {
		if this.AllowedGroups[i] != that1.AllowedGroups[i] {
			return false
		}
	}
	if !this.Pool.Equal(that1.Pool) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Ldap_ConnectionPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ldap_ConnectionPool)
	if !ok {
		that2, ok := that.(Ldap_ConnectionPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxSize.Equal(that1.MaxSize) {
		return false
	}
	if !this.InitialSize.Equal(that1.InitialSize) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExtAuthConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AuthConfigRefName != that1.AuthConfigRefName {
		return false
	}
	if len(this.Configs) != len(that1.Configs) {
		return false
	}
	for i := range this.Configs {
		if !this.Configs[i].Equal(that1.Configs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_OAuthConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_OAuthConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig_OAuthConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientId != that1.ClientId {
		return false
	}
	if this.ClientSecret != that1.ClientSecret {
		return false
	}
	if this.IssuerUrl != that1.IssuerUrl {
		return false
	}
	if len(this.AuthEndpointQueryParams) != len(that1.AuthEndpointQueryParams) {
		return false
	}
	for i := range this.AuthEndpointQueryParams {
		if this.AuthEndpointQueryParams[i] != that1.AuthEndpointQueryParams[i] {
			return false
		}
	}
	if this.AppUrl != that1.AppUrl {
		return false
	}
	if this.CallbackPath != that1.CallbackPath {
		return false
	}
	if len(this.Scopes) != len(that1.Scopes) {
		return false
	}
	for i := range this.Scopes {
		if this.Scopes[i] != that1.Scopes[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_OidcAuthorizationCodeConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_OidcAuthorizationCodeConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig_OidcAuthorizationCodeConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientId != that1.ClientId {
		return false
	}
	if this.ClientSecret != that1.ClientSecret {
		return false
	}
	if this.IssuerUrl != that1.IssuerUrl {
		return false
	}
	if len(this.AuthEndpointQueryParams) != len(that1.AuthEndpointQueryParams) {
		return false
	}
	for i := range this.AuthEndpointQueryParams {
		if this.AuthEndpointQueryParams[i] != that1.AuthEndpointQueryParams[i] {
			return false
		}
	}
	if this.AppUrl != that1.AppUrl {
		return false
	}
	if this.CallbackPath != that1.CallbackPath {
		return false
	}
	if len(this.Scopes) != len(that1.Scopes) {
		return false
	}
	for i := range this.Scopes {
		if this.Scopes[i] != that1.Scopes[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_OAuth2Config) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_OAuth2Config)
	if !ok {
		that2, ok := that.(ExtAuthConfig_OAuth2Config)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.OauthType == nil {
		if this.OauthType != nil {
			return false
		}
	} else if this.OauthType == nil {
		return false
	} else if !this.OauthType.Equal(that1.OauthType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_OAuth2Config_OidcAuthorizationCode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_OAuth2Config_OidcAuthorizationCode)
	if !ok {
		that2, ok := that.(ExtAuthConfig_OAuth2Config_OidcAuthorizationCode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OidcAuthorizationCode.Equal(that1.OidcAuthorizationCode) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_OAuth2Config_AccessTokenValidation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_OAuth2Config_AccessTokenValidation)
	if !ok {
		that2, ok := that.(ExtAuthConfig_OAuth2Config_AccessTokenValidation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AccessTokenValidation.Equal(that1.AccessTokenValidation) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_ApiKeyAuthConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_ApiKeyAuthConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig_ApiKeyAuthConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ValidApiKeyAndUser) != len(that1.ValidApiKeyAndUser) {
		return false
	}
	for i := range this.ValidApiKeyAndUser {
		if this.ValidApiKeyAndUser[i] != that1.ValidApiKeyAndUser[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_OpaAuthConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_OpaAuthConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig_OpaAuthConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Modules) != len(that1.Modules) {
		return false
	}
	for i := range this.Modules {
		if this.Modules[i] != that1.Modules[i] {
			return false
		}
	}
	if this.Query != that1.Query {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_Config) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_Config)
	if !ok {
		that2, ok := that.(ExtAuthConfig_Config)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AuthConfig == nil {
		if this.AuthConfig != nil {
			return false
		}
	} else if this.AuthConfig == nil {
		return false
	} else if !this.AuthConfig.Equal(that1.AuthConfig) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_Config_Oauth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_Config_Oauth)
	if !ok {
		that2, ok := that.(ExtAuthConfig_Config_Oauth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Oauth.Equal(that1.Oauth) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_Config_Oauth2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_Config_Oauth2)
	if !ok {
		that2, ok := that.(ExtAuthConfig_Config_Oauth2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Oauth2.Equal(that1.Oauth2) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_Config_BasicAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_Config_BasicAuth)
	if !ok {
		that2, ok := that.(ExtAuthConfig_Config_BasicAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BasicAuth.Equal(that1.BasicAuth) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_Config_ApiKeyAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_Config_ApiKeyAuth)
	if !ok {
		that2, ok := that.(ExtAuthConfig_Config_ApiKeyAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiKeyAuth.Equal(that1.ApiKeyAuth) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_Config_PluginAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_Config_PluginAuth)
	if !ok {
		that2, ok := that.(ExtAuthConfig_Config_PluginAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PluginAuth.Equal(that1.PluginAuth) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_Config_OpaAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_Config_OpaAuth)
	if !ok {
		that2, ok := that.(ExtAuthConfig_Config_OpaAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OpaAuth.Equal(that1.OpaAuth) {
		return false
	}
	return true
}
func (this *ExtAuthConfig_Config_Ldap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtAuthConfig_Config_Ldap)
	if !ok {
		that2, ok := that.(ExtAuthConfig_Config_Ldap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ldap.Equal(that1.Ldap) {
		return false
	}
	return true
}
func (this *AuthConfigStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthConfigStatus)
	if !ok {
		that2, ok := that.(AuthConfigStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.ReportedBy != that1.ReportedBy {
		return false
	}
	if len(this.SubresourceStatuses) != len(that1.SubresourceStatuses) {
		return false
	}
	for i := range this.SubresourceStatuses {
		if !this.SubresourceStatuses[i].Equal(that1.SubresourceStatuses[i]) {
			return false
		}
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExtAuthDiscoveryServiceClient is the client API for ExtAuthDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExtAuthDiscoveryServiceClient interface {
	StreamExtAuthConfig(ctx context.Context, opts ...grpc.CallOption) (ExtAuthDiscoveryService_StreamExtAuthConfigClient, error)
	DeltaExtAuthConfig(ctx context.Context, opts ...grpc.CallOption) (ExtAuthDiscoveryService_DeltaExtAuthConfigClient, error)
	FetchExtAuthConfig(ctx context.Context, in *v2.DiscoveryRequest, opts ...grpc.CallOption) (*v2.DiscoveryResponse, error)
}

type extAuthDiscoveryServiceClient struct {
	cc *grpc.ClientConn
}

func NewExtAuthDiscoveryServiceClient(cc *grpc.ClientConn) ExtAuthDiscoveryServiceClient {
	return &extAuthDiscoveryServiceClient{cc}
}

func (c *extAuthDiscoveryServiceClient) StreamExtAuthConfig(ctx context.Context, opts ...grpc.CallOption) (ExtAuthDiscoveryService_StreamExtAuthConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExtAuthDiscoveryService_serviceDesc.Streams[0], "/enterprise.gloo.solo.io.ExtAuthDiscoveryService/StreamExtAuthConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &extAuthDiscoveryServiceStreamExtAuthConfigClient{stream}
	return x, nil
}

type ExtAuthDiscoveryService_StreamExtAuthConfigClient interface {
	Send(*v2.DiscoveryRequest) error
	Recv() (*v2.DiscoveryResponse, error)
	grpc.ClientStream
}

type extAuthDiscoveryServiceStreamExtAuthConfigClient struct {
	grpc.ClientStream
}

func (x *extAuthDiscoveryServiceStreamExtAuthConfigClient) Send(m *v2.DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *extAuthDiscoveryServiceStreamExtAuthConfigClient) Recv() (*v2.DiscoveryResponse, error) {
	m := new(v2.DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *extAuthDiscoveryServiceClient) DeltaExtAuthConfig(ctx context.Context, opts ...grpc.CallOption) (ExtAuthDiscoveryService_DeltaExtAuthConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExtAuthDiscoveryService_serviceDesc.Streams[1], "/enterprise.gloo.solo.io.ExtAuthDiscoveryService/DeltaExtAuthConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &extAuthDiscoveryServiceDeltaExtAuthConfigClient{stream}
	return x, nil
}

type ExtAuthDiscoveryService_DeltaExtAuthConfigClient interface {
	Send(*v2.DeltaDiscoveryRequest) error
	Recv() (*v2.DeltaDiscoveryResponse, error)
	grpc.ClientStream
}

type extAuthDiscoveryServiceDeltaExtAuthConfigClient struct {
	grpc.ClientStream
}

func (x *extAuthDiscoveryServiceDeltaExtAuthConfigClient) Send(m *v2.DeltaDiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *extAuthDiscoveryServiceDeltaExtAuthConfigClient) Recv() (*v2.DeltaDiscoveryResponse, error) {
	m := new(v2.DeltaDiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *extAuthDiscoveryServiceClient) FetchExtAuthConfig(ctx context.Context, in *v2.DiscoveryRequest, opts ...grpc.CallOption) (*v2.DiscoveryResponse, error) {
	out := new(v2.DiscoveryResponse)
	err := c.cc.Invoke(ctx, "/enterprise.gloo.solo.io.ExtAuthDiscoveryService/FetchExtAuthConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtAuthDiscoveryServiceServer is the server API for ExtAuthDiscoveryService service.
type ExtAuthDiscoveryServiceServer interface {
	StreamExtAuthConfig(ExtAuthDiscoveryService_StreamExtAuthConfigServer) error
	DeltaExtAuthConfig(ExtAuthDiscoveryService_DeltaExtAuthConfigServer) error
	FetchExtAuthConfig(context.Context, *v2.DiscoveryRequest) (*v2.DiscoveryResponse, error)
}

// UnimplementedExtAuthDiscoveryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedExtAuthDiscoveryServiceServer struct {
}

func (*UnimplementedExtAuthDiscoveryServiceServer) StreamExtAuthConfig(srv ExtAuthDiscoveryService_StreamExtAuthConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamExtAuthConfig not implemented")
}
func (*UnimplementedExtAuthDiscoveryServiceServer) DeltaExtAuthConfig(srv ExtAuthDiscoveryService_DeltaExtAuthConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method DeltaExtAuthConfig not implemented")
}
func (*UnimplementedExtAuthDiscoveryServiceServer) FetchExtAuthConfig(ctx context.Context, req *v2.DiscoveryRequest) (*v2.DiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchExtAuthConfig not implemented")
}

func RegisterExtAuthDiscoveryServiceServer(s *grpc.Server, srv ExtAuthDiscoveryServiceServer) {
	s.RegisterService(&_ExtAuthDiscoveryService_serviceDesc, srv)
}

func _ExtAuthDiscoveryService_StreamExtAuthConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExtAuthDiscoveryServiceServer).StreamExtAuthConfig(&extAuthDiscoveryServiceStreamExtAuthConfigServer{stream})
}

type ExtAuthDiscoveryService_StreamExtAuthConfigServer interface {
	Send(*v2.DiscoveryResponse) error
	Recv() (*v2.DiscoveryRequest, error)
	grpc.ServerStream
}

type extAuthDiscoveryServiceStreamExtAuthConfigServer struct {
	grpc.ServerStream
}

func (x *extAuthDiscoveryServiceStreamExtAuthConfigServer) Send(m *v2.DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *extAuthDiscoveryServiceStreamExtAuthConfigServer) Recv() (*v2.DiscoveryRequest, error) {
	m := new(v2.DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExtAuthDiscoveryService_DeltaExtAuthConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExtAuthDiscoveryServiceServer).DeltaExtAuthConfig(&extAuthDiscoveryServiceDeltaExtAuthConfigServer{stream})
}

type ExtAuthDiscoveryService_DeltaExtAuthConfigServer interface {
	Send(*v2.DeltaDiscoveryResponse) error
	Recv() (*v2.DeltaDiscoveryRequest, error)
	grpc.ServerStream
}

type extAuthDiscoveryServiceDeltaExtAuthConfigServer struct {
	grpc.ServerStream
}

func (x *extAuthDiscoveryServiceDeltaExtAuthConfigServer) Send(m *v2.DeltaDiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *extAuthDiscoveryServiceDeltaExtAuthConfigServer) Recv() (*v2.DeltaDiscoveryRequest, error) {
	m := new(v2.DeltaDiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExtAuthDiscoveryService_FetchExtAuthConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v2.DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtAuthDiscoveryServiceServer).FetchExtAuthConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.gloo.solo.io.ExtAuthDiscoveryService/FetchExtAuthConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtAuthDiscoveryServiceServer).FetchExtAuthConfig(ctx, req.(*v2.DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExtAuthDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "enterprise.gloo.solo.io.ExtAuthDiscoveryService",
	HandlerType: (*ExtAuthDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchExtAuthConfig",
			Handler:    _ExtAuthDiscoveryService_FetchExtAuthConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamExtAuthConfig",
			Handler:       _ExtAuthDiscoveryService_StreamExtAuthConfig_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeltaExtAuthConfig",
			Handler:       _ExtAuthDiscoveryService_DeltaExtAuthConfig_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/solo-io/solo-apis/api/gloo/enterprise.gloo/v1/auth_config.proto",
}
