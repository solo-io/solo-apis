// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1sets

import (
	enterprise_gloo_solo_io_v1 "github.com/solo-io/solo-apis/pkg/api/enterprise.gloo.solo.io/v1"

	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type AuthConfigSet interface {
	Keys() sets.String
	List() []*enterprise_gloo_solo_io_v1.AuthConfig
	Map() map[string]*enterprise_gloo_solo_io_v1.AuthConfig
	Insert(authConfig ...*enterprise_gloo_solo_io_v1.AuthConfig)
	Equal(authConfigSet AuthConfigSet) bool
	Has(authConfig *enterprise_gloo_solo_io_v1.AuthConfig) bool
	Delete(authConfig *enterprise_gloo_solo_io_v1.AuthConfig)
	Union(set AuthConfigSet) AuthConfigSet
	Difference(set AuthConfigSet) AuthConfigSet
	Intersection(set AuthConfigSet) AuthConfigSet
	Find(id ezkube.ResourceId) (*enterprise_gloo_solo_io_v1.AuthConfig, error)
	Length() int
}

func makeGenericAuthConfigSet(authConfigList []*enterprise_gloo_solo_io_v1.AuthConfig) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range authConfigList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type authConfigSet struct {
	set sksets.ResourceSet
}

func NewAuthConfigSet(authConfigList ...*enterprise_gloo_solo_io_v1.AuthConfig) AuthConfigSet {
	return &authConfigSet{set: makeGenericAuthConfigSet(authConfigList)}
}

func NewAuthConfigSetFromList(authConfigList *enterprise_gloo_solo_io_v1.AuthConfigList) AuthConfigSet {
	list := make([]*enterprise_gloo_solo_io_v1.AuthConfig, 0, len(authConfigList.Items))
	for idx := range authConfigList.Items {
		list = append(list, &authConfigList.Items[idx])
	}
	return &authConfigSet{set: makeGenericAuthConfigSet(list)}
}

func (s *authConfigSet) Keys() sets.String {
	return s.set.Keys()
}

func (s *authConfigSet) List() []*enterprise_gloo_solo_io_v1.AuthConfig {
	var authConfigList []*enterprise_gloo_solo_io_v1.AuthConfig
	for _, obj := range s.set.List() {
		authConfigList = append(authConfigList, obj.(*enterprise_gloo_solo_io_v1.AuthConfig))
	}
	return authConfigList
}

func (s *authConfigSet) Map() map[string]*enterprise_gloo_solo_io_v1.AuthConfig {
	newMap := map[string]*enterprise_gloo_solo_io_v1.AuthConfig{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*enterprise_gloo_solo_io_v1.AuthConfig)
	}
	return newMap
}

func (s *authConfigSet) Insert(
	authConfigList ...*enterprise_gloo_solo_io_v1.AuthConfig,
) {
	for _, obj := range authConfigList {
		s.set.Insert(obj)
	}
}

func (s *authConfigSet) Has(authConfig *enterprise_gloo_solo_io_v1.AuthConfig) bool {
	return s.set.Has(authConfig)
}

func (s *authConfigSet) Equal(
	authConfigSet AuthConfigSet,
) bool {
	return s.set.Equal(makeGenericAuthConfigSet(authConfigSet.List()))
}

func (s *authConfigSet) Delete(AuthConfig *enterprise_gloo_solo_io_v1.AuthConfig) {
	s.set.Delete(AuthConfig)
}

func (s *authConfigSet) Union(set AuthConfigSet) AuthConfigSet {
	return NewAuthConfigSet(append(s.List(), set.List()...)...)
}

func (s *authConfigSet) Difference(set AuthConfigSet) AuthConfigSet {
	newSet := s.set.Difference(makeGenericAuthConfigSet(set.List()))
	return &authConfigSet{set: newSet}
}

func (s *authConfigSet) Intersection(set AuthConfigSet) AuthConfigSet {
	newSet := s.set.Intersection(makeGenericAuthConfigSet(set.List()))
	var authConfigList []*enterprise_gloo_solo_io_v1.AuthConfig
	for _, obj := range newSet.List() {
		authConfigList = append(authConfigList, obj.(*enterprise_gloo_solo_io_v1.AuthConfig))
	}
	return NewAuthConfigSet(authConfigList...)
}

func (s *authConfigSet) Find(id ezkube.ResourceId) (*enterprise_gloo_solo_io_v1.AuthConfig, error) {
	obj, err := s.set.Find(&enterprise_gloo_solo_io_v1.AuthConfig{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*enterprise_gloo_solo_io_v1.AuthConfig), nil
}

func (s *authConfigSet) Length() int {
	return s.set.Length()
}
