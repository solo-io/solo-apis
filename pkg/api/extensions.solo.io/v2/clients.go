// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v2

import (
	"context"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the extensions.solo.io/v2 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the extensions.solo.io/v2 APIs
type Clientset interface {
	// clienset for the extensions.solo.io/v2/v2 APIs
	WasmDeploymentPolicies() WasmDeploymentPolicyClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the extensions.solo.io/v2/v2 APIs
func (c *clientSet) WasmDeploymentPolicies() WasmDeploymentPolicyClient {
	return NewWasmDeploymentPolicyClient(c.client)
}

// Reader knows how to read and list WasmDeploymentPolicys.
type WasmDeploymentPolicyReader interface {
	// Get retrieves a WasmDeploymentPolicy for the given object key
	GetWasmDeploymentPolicy(ctx context.Context, key client.ObjectKey) (*WasmDeploymentPolicy, error)

	// List retrieves list of WasmDeploymentPolicys for a given namespace and list options.
	ListWasmDeploymentPolicy(ctx context.Context, opts ...client.ListOption) (*WasmDeploymentPolicyList, error)
}

// WasmDeploymentPolicyTransitionFunction instructs the WasmDeploymentPolicyWriter how to transition between an existing
// WasmDeploymentPolicy object and a desired on an Upsert
type WasmDeploymentPolicyTransitionFunction func(existing, desired *WasmDeploymentPolicy) error

// Writer knows how to create, delete, and update WasmDeploymentPolicys.
type WasmDeploymentPolicyWriter interface {
	// Create saves the WasmDeploymentPolicy object.
	CreateWasmDeploymentPolicy(ctx context.Context, obj *WasmDeploymentPolicy, opts ...client.CreateOption) error

	// Delete deletes the WasmDeploymentPolicy object.
	DeleteWasmDeploymentPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given WasmDeploymentPolicy object.
	UpdateWasmDeploymentPolicy(ctx context.Context, obj *WasmDeploymentPolicy, opts ...client.UpdateOption) error

	// Patch patches the given WasmDeploymentPolicy object.
	PatchWasmDeploymentPolicy(ctx context.Context, obj *WasmDeploymentPolicy, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all WasmDeploymentPolicy objects matching the given options.
	DeleteAllOfWasmDeploymentPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the WasmDeploymentPolicy object.
	UpsertWasmDeploymentPolicy(ctx context.Context, obj *WasmDeploymentPolicy, transitionFuncs ...WasmDeploymentPolicyTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a WasmDeploymentPolicy object.
type WasmDeploymentPolicyStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given WasmDeploymentPolicy object.
	UpdateWasmDeploymentPolicyStatus(ctx context.Context, obj *WasmDeploymentPolicy, opts ...client.UpdateOption) error

	// Patch patches the given WasmDeploymentPolicy object's subresource.
	PatchWasmDeploymentPolicyStatus(ctx context.Context, obj *WasmDeploymentPolicy, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on WasmDeploymentPolicys.
type WasmDeploymentPolicyClient interface {
	WasmDeploymentPolicyReader
	WasmDeploymentPolicyWriter
	WasmDeploymentPolicyStatusWriter
}

type wasmDeploymentPolicyClient struct {
	client client.Client
}

func NewWasmDeploymentPolicyClient(client client.Client) *wasmDeploymentPolicyClient {
	return &wasmDeploymentPolicyClient{client: client}
}

func (c *wasmDeploymentPolicyClient) GetWasmDeploymentPolicy(ctx context.Context, key client.ObjectKey) (*WasmDeploymentPolicy, error) {
	obj := &WasmDeploymentPolicy{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *wasmDeploymentPolicyClient) ListWasmDeploymentPolicy(ctx context.Context, opts ...client.ListOption) (*WasmDeploymentPolicyList, error) {
	list := &WasmDeploymentPolicyList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *wasmDeploymentPolicyClient) CreateWasmDeploymentPolicy(ctx context.Context, obj *WasmDeploymentPolicy, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *wasmDeploymentPolicyClient) DeleteWasmDeploymentPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &WasmDeploymentPolicy{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *wasmDeploymentPolicyClient) UpdateWasmDeploymentPolicy(ctx context.Context, obj *WasmDeploymentPolicy, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *wasmDeploymentPolicyClient) PatchWasmDeploymentPolicy(ctx context.Context, obj *WasmDeploymentPolicy, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *wasmDeploymentPolicyClient) DeleteAllOfWasmDeploymentPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &WasmDeploymentPolicy{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *wasmDeploymentPolicyClient) UpsertWasmDeploymentPolicy(ctx context.Context, obj *WasmDeploymentPolicy, transitionFuncs ...WasmDeploymentPolicyTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*WasmDeploymentPolicy), desired.(*WasmDeploymentPolicy)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *wasmDeploymentPolicyClient) UpdateWasmDeploymentPolicyStatus(ctx context.Context, obj *WasmDeploymentPolicy, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *wasmDeploymentPolicyClient) PatchWasmDeploymentPolicyStatus(ctx context.Context, obj *WasmDeploymentPolicy, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides WasmDeploymentPolicyClients for multiple clusters.
type MulticlusterWasmDeploymentPolicyClient interface {
	// Cluster returns a WasmDeploymentPolicyClient for the given cluster
	Cluster(cluster string) (WasmDeploymentPolicyClient, error)
}

type multiclusterWasmDeploymentPolicyClient struct {
	client multicluster.Client
}

func NewMulticlusterWasmDeploymentPolicyClient(client multicluster.Client) MulticlusterWasmDeploymentPolicyClient {
	return &multiclusterWasmDeploymentPolicyClient{client: client}
}

func (m *multiclusterWasmDeploymentPolicyClient) Cluster(cluster string) (WasmDeploymentPolicyClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewWasmDeploymentPolicyClient(client), nil
}
