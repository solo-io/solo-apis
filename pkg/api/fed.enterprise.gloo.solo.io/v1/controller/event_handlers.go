// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

    fed_enterprise_gloo_solo_io_v1 "github.com/solo-io/solo-apis/pkg/api/fed.enterprise.gloo.solo.io/v1"

    "github.com/pkg/errors"
    "github.com/solo-io/skv2/pkg/events"
    "sigs.k8s.io/controller-runtime/pkg/manager"
    "sigs.k8s.io/controller-runtime/pkg/predicate"
    "sigs.k8s.io/controller-runtime/pkg/client"
)

// Handle events for the FederatedAuthConfig Resource
// DEPRECATED: Prefer reconciler pattern.
type FederatedAuthConfigEventHandler interface {
    CreateFederatedAuthConfig(obj *fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig) error
    UpdateFederatedAuthConfig(old, new *fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig) error
    DeleteFederatedAuthConfig(obj *fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig) error
    GenericFederatedAuthConfig(obj *fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig) error
}

type FederatedAuthConfigEventHandlerFuncs struct {
    OnCreate  func(obj *fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig) error
    OnUpdate  func(old, new *fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig) error
    OnDelete  func(obj *fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig) error
    OnGeneric func(obj *fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig) error
}

func (f *FederatedAuthConfigEventHandlerFuncs) CreateFederatedAuthConfig(obj *fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig) error {
    if f.OnCreate == nil {
        return nil
    }
    return f.OnCreate(obj)
}

func (f *FederatedAuthConfigEventHandlerFuncs) DeleteFederatedAuthConfig(obj *fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig) error {
    if f.OnDelete == nil {
        return nil
    }
    return f.OnDelete(obj)
}

func (f *FederatedAuthConfigEventHandlerFuncs) UpdateFederatedAuthConfig(objOld, objNew *fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig) error {
    if f.OnUpdate == nil {
        return nil
    }
    return f.OnUpdate(objOld, objNew)
}

func (f *FederatedAuthConfigEventHandlerFuncs) GenericFederatedAuthConfig(obj *fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig) error {
    if f.OnGeneric == nil {
        return nil
    }
    return f.OnGeneric(obj)
}

type FederatedAuthConfigEventWatcher interface {
    AddEventHandler(ctx context.Context, h FederatedAuthConfigEventHandler, predicates ...predicate.Predicate) error
}

type federatedAuthConfigEventWatcher struct {
    watcher events.EventWatcher
}

func NewFederatedAuthConfigEventWatcher(name string, mgr manager.Manager) FederatedAuthConfigEventWatcher {
    return &federatedAuthConfigEventWatcher{
        watcher: events.NewWatcher(name, mgr, &fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig{}),
    }
}

func (c *federatedAuthConfigEventWatcher) AddEventHandler(ctx context.Context, h FederatedAuthConfigEventHandler, predicates ...predicate.Predicate) error {
	handler := genericFederatedAuthConfigHandler{handler: h}
    if err := c.watcher.Watch(ctx, handler, predicates...); err != nil{
        return err
    }
    return nil
}

// genericFederatedAuthConfigHandler implements a generic events.EventHandler
type genericFederatedAuthConfigHandler struct {
    handler FederatedAuthConfigEventHandler
}

func (h genericFederatedAuthConfigHandler) Create(object client.Object) error {
    obj, ok := object.(*fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig)
    if !ok {
        return errors.Errorf("internal error: FederatedAuthConfig handler received event for %T", object)
    }
    return h.handler.CreateFederatedAuthConfig(obj)
}

func (h genericFederatedAuthConfigHandler) Delete(object client.Object) error {
    obj, ok := object.(*fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig)
    if !ok {
        return errors.Errorf("internal error: FederatedAuthConfig handler received event for %T", object)
    }
    return h.handler.DeleteFederatedAuthConfig(obj)
}

func (h genericFederatedAuthConfigHandler) Update(old, new client.Object) error {
    objOld, ok := old.(*fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig)
    if !ok {
        return errors.Errorf("internal error: FederatedAuthConfig handler received event for %T", old)
    }
    objNew, ok := new.(*fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig)
    if !ok {
        return errors.Errorf("internal error: FederatedAuthConfig handler received event for %T", new)
    }
    return h.handler.UpdateFederatedAuthConfig(objOld, objNew)
}

func (h genericFederatedAuthConfigHandler) Generic(object client.Object) error {
    obj, ok := object.(*fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig)
    if !ok {
        return errors.Errorf("internal error: FederatedAuthConfig handler received event for %T", object)
    }
    return h.handler.GenericFederatedAuthConfig(obj)
}
