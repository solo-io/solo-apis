// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller



import (
	"context"

	fed_enterprise_gloo_solo_io_v1 "github.com/solo-io/solo-apis/pkg/api/fed.enterprise.gloo.solo.io/v1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the FederatedAuthConfig Resource across clusters.
// implemented by the user
type MulticlusterFederatedAuthConfigReconciler interface {
	ReconcileFederatedAuthConfig(clusterName string, obj *fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig) (reconcile.Result, error)
}

// Reconcile deletion events for the FederatedAuthConfig Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterFederatedAuthConfigDeletionReconciler interface {
	ReconcileFederatedAuthConfigDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterFederatedAuthConfigReconcilerFuncs struct {
	OnReconcileFederatedAuthConfig         func(clusterName string, obj *fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig) (reconcile.Result, error)
	OnReconcileFederatedAuthConfigDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterFederatedAuthConfigReconcilerFuncs) ReconcileFederatedAuthConfig(clusterName string, obj *fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig) (reconcile.Result, error) {
	if f.OnReconcileFederatedAuthConfig == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileFederatedAuthConfig(clusterName, obj)
}

func (f *MulticlusterFederatedAuthConfigReconcilerFuncs) ReconcileFederatedAuthConfigDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileFederatedAuthConfigDeletion == nil {
		return nil
	}
	return f.OnReconcileFederatedAuthConfigDeletion(clusterName, req)
}

type MulticlusterFederatedAuthConfigReconcileLoop interface {
	// AddMulticlusterFederatedAuthConfigReconciler adds a MulticlusterFederatedAuthConfigReconciler to the MulticlusterFederatedAuthConfigReconcileLoop.
	AddMulticlusterFederatedAuthConfigReconciler(ctx context.Context, rec MulticlusterFederatedAuthConfigReconciler, predicates ...predicate.Predicate)
}

type multiclusterFederatedAuthConfigReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterFederatedAuthConfigReconcileLoop) AddMulticlusterFederatedAuthConfigReconciler(ctx context.Context, rec MulticlusterFederatedAuthConfigReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericFederatedAuthConfigMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterFederatedAuthConfigReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterFederatedAuthConfigReconcileLoop {
	return &multiclusterFederatedAuthConfigReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig{}, options)}
}

type genericFederatedAuthConfigMulticlusterReconciler struct {
	reconciler MulticlusterFederatedAuthConfigReconciler
}

func (g genericFederatedAuthConfigMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterFederatedAuthConfigDeletionReconciler); ok {
		return deletionReconciler.ReconcileFederatedAuthConfigDeletion(cluster, req)
	}
	return nil
}

func (g genericFederatedAuthConfigMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*fed_enterprise_gloo_solo_io_v1.FederatedAuthConfig)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: FederatedAuthConfig handler received event for %T", object)
	}
	return g.reconciler.ReconcileFederatedAuthConfig(cluster, obj)
}
