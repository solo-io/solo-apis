// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v1

import (
	"context"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the fed.enterprise.gloo.solo.io/v1 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the fed.enterprise.gloo.solo.io/v1 APIs
type Clientset interface {
	// clienset for the fed.enterprise.gloo.solo.io/v1/v1 APIs
	FederatedAuthConfigs() FederatedAuthConfigClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the fed.enterprise.gloo.solo.io/v1/v1 APIs
func (c *clientSet) FederatedAuthConfigs() FederatedAuthConfigClient {
	return NewFederatedAuthConfigClient(c.client)
}

// Reader knows how to read and list FederatedAuthConfigs.
type FederatedAuthConfigReader interface {
	// Get retrieves a FederatedAuthConfig for the given object key
	GetFederatedAuthConfig(ctx context.Context, key client.ObjectKey) (*FederatedAuthConfig, error)

	// List retrieves list of FederatedAuthConfigs for a given namespace and list options.
	ListFederatedAuthConfig(ctx context.Context, opts ...client.ListOption) (*FederatedAuthConfigList, error)
}

// FederatedAuthConfigTransitionFunction instructs the FederatedAuthConfigWriter how to transition between an existing
// FederatedAuthConfig object and a desired on an Upsert
type FederatedAuthConfigTransitionFunction func(existing, desired *FederatedAuthConfig) error

// Writer knows how to create, delete, and update FederatedAuthConfigs.
type FederatedAuthConfigWriter interface {
	// Create saves the FederatedAuthConfig object.
	CreateFederatedAuthConfig(ctx context.Context, obj *FederatedAuthConfig, opts ...client.CreateOption) error

	// Delete deletes the FederatedAuthConfig object.
	DeleteFederatedAuthConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given FederatedAuthConfig object.
	UpdateFederatedAuthConfig(ctx context.Context, obj *FederatedAuthConfig, opts ...client.UpdateOption) error

	// Patch patches the given FederatedAuthConfig object.
	PatchFederatedAuthConfig(ctx context.Context, obj *FederatedAuthConfig, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all FederatedAuthConfig objects matching the given options.
	DeleteAllOfFederatedAuthConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the FederatedAuthConfig object.
	UpsertFederatedAuthConfig(ctx context.Context, obj *FederatedAuthConfig, transitionFuncs ...FederatedAuthConfigTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a FederatedAuthConfig object.
type FederatedAuthConfigStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given FederatedAuthConfig object.
	UpdateFederatedAuthConfigStatus(ctx context.Context, obj *FederatedAuthConfig, opts ...client.UpdateOption) error

	// Patch patches the given FederatedAuthConfig object's subresource.
	PatchFederatedAuthConfigStatus(ctx context.Context, obj *FederatedAuthConfig, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on FederatedAuthConfigs.
type FederatedAuthConfigClient interface {
	FederatedAuthConfigReader
	FederatedAuthConfigWriter
	FederatedAuthConfigStatusWriter
}

type federatedAuthConfigClient struct {
	client client.Client
}

func NewFederatedAuthConfigClient(client client.Client) *federatedAuthConfigClient {
	return &federatedAuthConfigClient{client: client}
}

func (c *federatedAuthConfigClient) GetFederatedAuthConfig(ctx context.Context, key client.ObjectKey) (*FederatedAuthConfig, error) {
	obj := &FederatedAuthConfig{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *federatedAuthConfigClient) ListFederatedAuthConfig(ctx context.Context, opts ...client.ListOption) (*FederatedAuthConfigList, error) {
	list := &FederatedAuthConfigList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *federatedAuthConfigClient) CreateFederatedAuthConfig(ctx context.Context, obj *FederatedAuthConfig, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *federatedAuthConfigClient) DeleteFederatedAuthConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &FederatedAuthConfig{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *federatedAuthConfigClient) UpdateFederatedAuthConfig(ctx context.Context, obj *FederatedAuthConfig, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *federatedAuthConfigClient) PatchFederatedAuthConfig(ctx context.Context, obj *FederatedAuthConfig, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *federatedAuthConfigClient) DeleteAllOfFederatedAuthConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &FederatedAuthConfig{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *federatedAuthConfigClient) UpsertFederatedAuthConfig(ctx context.Context, obj *FederatedAuthConfig, transitionFuncs ...FederatedAuthConfigTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*FederatedAuthConfig), desired.(*FederatedAuthConfig)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *federatedAuthConfigClient) UpdateFederatedAuthConfigStatus(ctx context.Context, obj *FederatedAuthConfig, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *federatedAuthConfigClient) PatchFederatedAuthConfigStatus(ctx context.Context, obj *FederatedAuthConfig, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides FederatedAuthConfigClients for multiple clusters.
type MulticlusterFederatedAuthConfigClient interface {
	// Cluster returns a FederatedAuthConfigClient for the given cluster
	Cluster(cluster string) (FederatedAuthConfigClient, error)
}

type multiclusterFederatedAuthConfigClient struct {
	client multicluster.Client
}

func NewMulticlusterFederatedAuthConfigClient(client multicluster.Client) MulticlusterFederatedAuthConfigClient {
	return &multiclusterFederatedAuthConfigClient{client: client}
}

func (m *multiclusterFederatedAuthConfigClient) Cluster(cluster string) (FederatedAuthConfigClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewFederatedAuthConfigClient(client), nil
}
