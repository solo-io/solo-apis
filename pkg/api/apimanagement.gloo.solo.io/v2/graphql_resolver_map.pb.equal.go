// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/apimanagement/v2/graphql_resolver_map.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *GraphQLResolverMapSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GraphQLResolverMapSpec)
	if !ok {
		that2, ok := that.(GraphQLResolverMapSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetTypes()) != len(target.GetTypes()) {
		return false
	}
	for k, v := range m.GetTypes() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetTypes()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetTypes()[k]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ExecutableSchema) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExecutableSchema)
	if !ok {
		that2, ok := that.(ExecutableSchema)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetSchemaRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSchemaRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSchemaRef(), target.GetSchemaRef()) {
			return false
		}
	}

	switch m.ExecutableSchema.(type) {

	case *ExecutableSchema_Server:
		if _, ok := target.ExecutableSchema.(*ExecutableSchema_Server); !ok {
			return false
		}

		if h, ok := interface{}(m.GetServer()).(equality.Equalizer); ok {
			if !h.Equal(target.GetServer()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetServer(), target.GetServer()) {
				return false
			}
		}

	case *ExecutableSchema_Local_:
		if _, ok := target.ExecutableSchema.(*ExecutableSchema_Local_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetLocal()).(equality.Equalizer); ok {
			if !h.Equal(target.GetLocal()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetLocal(), target.GetLocal()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.ExecutableSchema != target.ExecutableSchema {
			return false
		}
	}

	return true
}

// Equal function
func (m *VariableTransformation) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*VariableTransformation)
	if !ok {
		that2, ok := that.(VariableTransformation)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.Transformation.(type) {

	case *VariableTransformation_Variable:
		if _, ok := target.Transformation.(*VariableTransformation_Variable); !ok {
			return false
		}

		if strings.Compare(m.GetVariable(), target.GetVariable()) != 0 {
			return false
		}

	case *VariableTransformation_Jq:
		if _, ok := target.Transformation.(*VariableTransformation_Jq); !ok {
			return false
		}

		if strings.Compare(m.GetJq(), target.GetJq()) != 0 {
			return false
		}

	case *VariableTransformation_Value:
		if _, ok := target.Transformation.(*VariableTransformation_Value); !ok {
			return false
		}

		if h, ok := interface{}(m.GetValue()).(equality.Equalizer); ok {
			if !h.Equal(target.GetValue()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetValue(), target.GetValue()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.Transformation != target.Transformation {
			return false
		}
	}

	return true
}

// Equal function
func (m *Extraction) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Extraction)
	if !ok {
		that2, ok := that.(Extraction)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.ExtractionType.(type) {

	case *Extraction_RequestHeader:
		if _, ok := target.ExtractionType.(*Extraction_RequestHeader); !ok {
			return false
		}

		if strings.Compare(m.GetRequestHeader(), target.GetRequestHeader()) != 0 {
			return false
		}

	case *Extraction_DynamicMetadata:
		if _, ok := target.ExtractionType.(*Extraction_DynamicMetadata); !ok {
			return false
		}

		if h, ok := interface{}(m.GetDynamicMetadata()).(equality.Equalizer); ok {
			if !h.Equal(target.GetDynamicMetadata()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetDynamicMetadata(), target.GetDynamicMetadata()) {
				return false
			}
		}

	case *Extraction_GraphqlParent:
		if _, ok := target.ExtractionType.(*Extraction_GraphqlParent); !ok {
			return false
		}

		if h, ok := interface{}(m.GetGraphqlParent()).(equality.Equalizer); ok {
			if !h.Equal(target.GetGraphqlParent()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetGraphqlParent(), target.GetGraphqlParent()) {
				return false
			}
		}

	case *Extraction_GraphqlArg:
		if _, ok := target.ExtractionType.(*Extraction_GraphqlArg); !ok {
			return false
		}

		if strings.Compare(m.GetGraphqlArg(), target.GetGraphqlArg()) != 0 {
			return false
		}

	case *Extraction_ResolverResult:
		if _, ok := target.ExtractionType.(*Extraction_ResolverResult); !ok {
			return false
		}

		if h, ok := interface{}(m.GetResolverResult()).(equality.Equalizer); ok {
			if !h.Equal(target.GetResolverResult()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetResolverResult(), target.GetResolverResult()) {
				return false
			}
		}

	case *Extraction_JsonValue:
		if _, ok := target.ExtractionType.(*Extraction_JsonValue); !ok {
			return false
		}

		if h, ok := interface{}(m.GetJsonValue()).(equality.Equalizer); ok {
			if !h.Equal(target.GetJsonValue()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetJsonValue(), target.GetJsonValue()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.ExtractionType != target.ExtractionType {
			return false
		}
	}

	return true
}

// Equal function
func (m *DynamicMetadataExtraction) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DynamicMetadataExtraction)
	if !ok {
		that2, ok := that.(DynamicMetadataExtraction)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetMetadataNamespace(), target.GetMetadataNamespace()) != 0 {
		return false
	}

	if strings.Compare(m.GetKey(), target.GetKey()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *GraphQLResolverMapStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GraphQLResolverMapStatus)
	if !ok {
		that2, ok := that.(GraphQLResolverMapStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetGlobal()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGlobal()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGlobal(), target.GetGlobal()) {
			return false
		}
	}

	if len(m.GetWorkspaces()) != len(target.GetWorkspaces()) {
		return false
	}
	for k, v := range m.GetWorkspaces() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetWorkspaces()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetWorkspaces()[k]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetOwnerWorkspace()).(equality.Equalizer); ok {
		if !h.Equal(target.GetOwnerWorkspace()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetOwnerWorkspace(), target.GetOwnerWorkspace()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *GraphQLResolverMapSpec_Resolution) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GraphQLResolverMapSpec_Resolution)
	if !ok {
		that2, ok := that.(GraphQLResolverMapSpec_Resolution)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetFields()) != len(target.GetFields()) {
		return false
	}
	for k, v := range m.GetFields() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetFields()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetFields()[k]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *GraphQLResolverMapSpec_Resolution_Resolvers) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GraphQLResolverMapSpec_Resolution_Resolvers)
	if !ok {
		that2, ok := that.(GraphQLResolverMapSpec_Resolution_Resolvers)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetResolvers()) != len(target.GetResolvers()) {
		return false
	}
	for idx, v := range m.GetResolvers() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetResolvers()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetResolvers()[idx]) {
				return false
			}
		}

	}

	if len(m.GetVariables()) != len(target.GetVariables()) {
		return false
	}
	for k, v := range m.GetVariables() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetVariables()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetVariables()[k]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetStatPrefix()).(equality.Equalizer); ok {
		if !h.Equal(target.GetStatPrefix()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetStatPrefix(), target.GetStatPrefix()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver)
	if !ok {
		that2, ok := that.(GraphQLResolverMapSpec_Resolution_Resolvers_Resolver)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetResolverResultTransform()).(equality.Equalizer); ok {
		if !h.Equal(target.GetResolverResultTransform()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetResolverResultTransform(), target.GetResolverResultTransform()) {
			return false
		}
	}

	switch m.Resolver.(type) {

	case *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_:
		if _, ok := target.Resolver.(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetRestResolver()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRestResolver()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRestResolver(), target.GetRestResolver()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.Resolver != target.Resolver {
			return false
		}
	}

	return true
}

// Equal function
func (m *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver)
	if !ok {
		that2, ok := that.(GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetDestinations()) != len(target.GetDestinations()) {
		return false
	}
	for idx, v := range m.GetDestinations() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetDestinations()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetDestinations()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetRequest()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRequest()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRequest(), target.GetRequest()) {
			return false
		}
	}

	if len(m.GetVariables()) != len(target.GetVariables()) {
		return false
	}
	for k, v := range m.GetVariables() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetVariables()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetVariables()[k]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetSpanName()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSpanName()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSpanName(), target.GetSpanName()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetTimeout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTimeout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTimeout(), target.GetTimeout()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate)
	if !ok {
		that2, ok := that.(GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetHeaders()) != len(target.GetHeaders()) {
		return false
	}
	for k, v := range m.GetHeaders() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetHeaders()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetHeaders()[k]) {
				return false
			}
		}

	}

	if len(m.GetQueryParams()) != len(target.GetQueryParams()) {
		return false
	}
	for k, v := range m.GetQueryParams() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetQueryParams()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetQueryParams()[k]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetBody()).(equality.Equalizer); ok {
		if !h.Equal(target.GetBody()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetBody(), target.GetBody()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable)
	if !ok {
		that2, ok := that.(GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.Extraction.(type) {

	case *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable_ResponseHeader:
		if _, ok := target.Extraction.(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable_ResponseHeader); !ok {
			return false
		}

		if strings.Compare(m.GetResponseHeader(), target.GetResponseHeader()) != 0 {
			return false
		}

	default:
		// m is nil but target is not nil
		if m.Extraction != target.Extraction {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExecutableSchema_Local) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExecutableSchema_Local)
	if !ok {
		that2, ok := that.(ExecutableSchema_Local)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetResolverMapRefs()) != len(target.GetResolverMapRefs()) {
		return false
	}
	for idx, v := range m.GetResolverMapRefs() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetResolverMapRefs()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetResolverMapRefs()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetOptions(), target.GetOptions()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExecutableSchema_GraphQLServer) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExecutableSchema_GraphQLServer)
	if !ok {
		that2, ok := that.(ExecutableSchema_GraphQLServer)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetGraphqlServers()) != len(target.GetGraphqlServers()) {
		return false
	}
	for idx, v := range m.GetGraphqlServers() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetGraphqlServers()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetGraphqlServers()[idx]) {
				return false
			}
		}

	}

	if len(m.GetVariables()) != len(target.GetVariables()) {
		return false
	}
	for k, v := range m.GetVariables() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetVariables()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetVariables()[k]) {
				return false
			}
		}

	}

	if len(m.GetHeaders()) != len(target.GetHeaders()) {
		return false
	}
	for k, v := range m.GetHeaders() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetHeaders()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetHeaders()[k]) {
				return false
			}
		}

	}

	if len(m.GetQueryParams()) != len(target.GetQueryParams()) {
		return false
	}
	for k, v := range m.GetQueryParams() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetQueryParams()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetQueryParams()[k]) {
				return false
			}
		}

	}

	if strings.Compare(m.GetSpanName(), target.GetSpanName()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *ExecutableSchema_Local_Options) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExecutableSchema_Local_Options)
	if !ok {
		that2, ok := that.(ExecutableSchema_Local_Options)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetMaxDepth()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxDepth()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxDepth(), target.GetMaxDepth()) {
			return false
		}
	}

	if m.GetEnableIntrospection() != target.GetEnableIntrospection() {
		return false
	}

	return true
}

// Equal function
func (m *ExecutableSchema_GraphQLServer_RequestExtraction) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExecutableSchema_GraphQLServer_RequestExtraction)
	if !ok {
		that2, ok := that.(ExecutableSchema_GraphQLServer_RequestExtraction)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.Extraction.(type) {

	case *ExecutableSchema_GraphQLServer_RequestExtraction_DynamicMetadata:
		if _, ok := target.Extraction.(*ExecutableSchema_GraphQLServer_RequestExtraction_DynamicMetadata); !ok {
			return false
		}

		if h, ok := interface{}(m.GetDynamicMetadata()).(equality.Equalizer); ok {
			if !h.Equal(target.GetDynamicMetadata()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetDynamicMetadata(), target.GetDynamicMetadata()) {
				return false
			}
		}

	case *ExecutableSchema_GraphQLServer_RequestExtraction_RequestHeader:
		if _, ok := target.Extraction.(*ExecutableSchema_GraphQLServer_RequestExtraction_RequestHeader); !ok {
			return false
		}

		if strings.Compare(m.GetRequestHeader(), target.GetRequestHeader()) != 0 {
			return false
		}

	case *ExecutableSchema_GraphQLServer_RequestExtraction_JsonValue:
		if _, ok := target.Extraction.(*ExecutableSchema_GraphQLServer_RequestExtraction_JsonValue); !ok {
			return false
		}

		if h, ok := interface{}(m.GetJsonValue()).(equality.Equalizer); ok {
			if !h.Equal(target.GetJsonValue()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetJsonValue(), target.GetJsonValue()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.Extraction != target.Extraction {
			return false
		}
	}

	return true
}
