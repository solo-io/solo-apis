// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/apimanagement/v2/portal.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/pkg/api/common.gloo.solo.io/v2"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *PortalSpec) Clone() proto.Message {
	var target *PortalSpec
	if m == nil {
		return target
	}
	target = &PortalSpec{}

	if m.GetPortalBackendSelector() != nil {
		target.PortalBackendSelector = make([]*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkloadSelector, len(m.GetPortalBackendSelector()))
		for idx, v := range m.GetPortalBackendSelector() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.PortalBackendSelector[idx] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkloadSelector)
			} else {
				target.PortalBackendSelector[idx] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkloadSelector)
			}

		}
	}

	if m.GetApis() != nil {
		target.Apis = make([]*API, len(m.GetApis()))
		for idx, v := range m.GetApis() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Apis[idx] = h.Clone().(*API)
			} else {
				target.Apis[idx] = proto.Clone(v).(*API)
			}

		}
	}

	if m.GetUsagePlans() != nil {
		target.UsagePlans = make([]*PortalSpec_UsagePlan, len(m.GetUsagePlans()))
		for idx, v := range m.GetUsagePlans() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.UsagePlans[idx] = h.Clone().(*PortalSpec_UsagePlan)
			} else {
				target.UsagePlans[idx] = proto.Clone(v).(*PortalSpec_UsagePlan)
			}

		}
	}

	if m.GetDomains() != nil {
		target.Domains = make([]string, len(m.GetDomains()))
		for idx, v := range m.GetDomains() {

			target.Domains[idx] = v

		}
	}

	return target
}

// Clone function
func (m *API) Clone() proto.Message {
	var target *API
	if m == nil {
		return target
	}
	target = &API{}

	if h, ok := interface{}(m.GetRouteTable()).(clone.Cloner); ok {
		target.RouteTable = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.ObjectSelector)
	} else {
		target.RouteTable = proto.Clone(m.GetRouteTable()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.ObjectSelector)
	}

	return target
}

// Clone function
func (m *PortalStatus) Clone() proto.Message {
	var target *PortalStatus
	if m == nil {
		return target
	}
	target = &PortalStatus{}

	if h, ok := interface{}(m.GetGlobal()).(clone.Cloner); ok {
		target.Global = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.GenericGlobalStatus)
	} else {
		target.Global = proto.Clone(m.GetGlobal()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.GenericGlobalStatus)
	}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus)
			}

		}
	}

	if h, ok := interface{}(m.GetOwnerWorkspace()).(clone.Cloner); ok {
		target.OwnerWorkspace = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.OwnerWorkspace)
	} else {
		target.OwnerWorkspace = proto.Clone(m.GetOwnerWorkspace()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.OwnerWorkspace)
	}

	return target
}

// Clone function
func (m *PortalNewStatus) Clone() proto.Message {
	var target *PortalNewStatus
	if m == nil {
		return target
	}
	target = &PortalNewStatus{}

	if h, ok := interface{}(m.GetCommon()).(clone.Cloner); ok {
		target.Common = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.Status)
	} else {
		target.Common = proto.Clone(m.GetCommon()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.Status)
	}

	target.OwnerWorkspace = m.GetOwnerWorkspace()

	return target
}

// Clone function
func (m *PortalReport) Clone() proto.Message {
	var target *PortalReport
	if m == nil {
		return target
	}
	target = &PortalReport{}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.Report, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.Report)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.Report)
			}

		}
	}

	target.OwnerWorkspace = m.GetOwnerWorkspace()

	return target
}

// Clone function
func (m *PortalSpec_UsagePlan) Clone() proto.Message {
	var target *PortalSpec_UsagePlan
	if m == nil {
		return target
	}
	target = &PortalSpec_UsagePlan{}

	target.Name = m.GetName()

	target.DisplayName = m.GetDisplayName()

	target.Description = m.GetDescription()

	return target
}
