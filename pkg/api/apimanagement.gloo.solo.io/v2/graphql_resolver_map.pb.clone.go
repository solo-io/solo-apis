// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/apimanagement/v2/graphql_resolver_map.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_golang_protobuf_ptypes_duration "github.com/golang/protobuf/ptypes/duration"

	github_com_golang_protobuf_ptypes_empty "github.com/golang/protobuf/ptypes/empty"

	github_com_golang_protobuf_ptypes_struct "github.com/golang/protobuf/ptypes/struct"

	github_com_golang_protobuf_ptypes_wrappers "github.com/golang/protobuf/ptypes/wrappers"

	github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/pkg/api/common.gloo.solo.io/v2"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *GraphQLResolverMapSpec) Clone() proto.Message {
	var target *GraphQLResolverMapSpec
	if m == nil {
		return target
	}
	target = &GraphQLResolverMapSpec{}

	if m.GetTypes() != nil {
		target.Types = make(map[string]*GraphQLResolverMapSpec_Resolution, len(m.GetTypes()))
		for k, v := range m.GetTypes() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Types[k] = h.Clone().(*GraphQLResolverMapSpec_Resolution)
			} else {
				target.Types[k] = proto.Clone(v).(*GraphQLResolverMapSpec_Resolution)
			}

		}
	}

	if h, ok := interface{}(m.GetExtensions()).(clone.Cloner); ok {
		target.Extensions = h.Clone().(*GraphQLResolverMapSpec_ResolverMapExtensions)
	} else {
		target.Extensions = proto.Clone(m.GetExtensions()).(*GraphQLResolverMapSpec_ResolverMapExtensions)
	}

	return target
}

// Clone function
func (m *VariableTransformation) Clone() proto.Message {
	var target *VariableTransformation
	if m == nil {
		return target
	}
	target = &VariableTransformation{}

	switch m.Transformation.(type) {

	case *VariableTransformation_Variable:

		target.Transformation = &VariableTransformation_Variable{
			Variable: m.GetVariable(),
		}

	case *VariableTransformation_Jq:

		target.Transformation = &VariableTransformation_Jq{
			Jq: m.GetJq(),
		}

	case *VariableTransformation_Json:

		if h, ok := interface{}(m.GetJson()).(clone.Cloner); ok {
			target.Transformation = &VariableTransformation_Json{
				Json: h.Clone().(*github_com_golang_protobuf_ptypes_struct.Value),
			}
		} else {
			target.Transformation = &VariableTransformation_Json{
				Json: proto.Clone(m.GetJson()).(*github_com_golang_protobuf_ptypes_struct.Value),
			}
		}

	}

	return target
}

// Clone function
func (m *Extraction) Clone() proto.Message {
	var target *Extraction
	if m == nil {
		return target
	}
	target = &Extraction{}

	switch m.ExtractionType.(type) {

	case *Extraction_RequestHeader:

		target.ExtractionType = &Extraction_RequestHeader{
			RequestHeader: m.GetRequestHeader(),
		}

	case *Extraction_DynamicMetadata:

		if h, ok := interface{}(m.GetDynamicMetadata()).(clone.Cloner); ok {
			target.ExtractionType = &Extraction_DynamicMetadata{
				DynamicMetadata: h.Clone().(*DynamicMetadataExtraction),
			}
		} else {
			target.ExtractionType = &Extraction_DynamicMetadata{
				DynamicMetadata: proto.Clone(m.GetDynamicMetadata()).(*DynamicMetadataExtraction),
			}
		}

	case *Extraction_GraphqlParent:

		if h, ok := interface{}(m.GetGraphqlParent()).(clone.Cloner); ok {
			target.ExtractionType = &Extraction_GraphqlParent{
				GraphqlParent: h.Clone().(*github_com_golang_protobuf_ptypes_empty.Empty),
			}
		} else {
			target.ExtractionType = &Extraction_GraphqlParent{
				GraphqlParent: proto.Clone(m.GetGraphqlParent()).(*github_com_golang_protobuf_ptypes_empty.Empty),
			}
		}

	case *Extraction_GraphqlArg:

		target.ExtractionType = &Extraction_GraphqlArg{
			GraphqlArg: m.GetGraphqlArg(),
		}

	case *Extraction_ResolverResult:

		if h, ok := interface{}(m.GetResolverResult()).(clone.Cloner); ok {
			target.ExtractionType = &Extraction_ResolverResult{
				ResolverResult: h.Clone().(*github_com_golang_protobuf_ptypes_empty.Empty),
			}
		} else {
			target.ExtractionType = &Extraction_ResolverResult{
				ResolverResult: proto.Clone(m.GetResolverResult()).(*github_com_golang_protobuf_ptypes_empty.Empty),
			}
		}

	case *Extraction_Json:

		if h, ok := interface{}(m.GetJson()).(clone.Cloner); ok {
			target.ExtractionType = &Extraction_Json{
				Json: h.Clone().(*github_com_golang_protobuf_ptypes_struct.Value),
			}
		} else {
			target.ExtractionType = &Extraction_Json{
				Json: proto.Clone(m.GetJson()).(*github_com_golang_protobuf_ptypes_struct.Value),
			}
		}

	}

	return target
}

// Clone function
func (m *DynamicMetadataExtraction) Clone() proto.Message {
	var target *DynamicMetadataExtraction
	if m == nil {
		return target
	}
	target = &DynamicMetadataExtraction{}

	target.MetadataNamespace = m.GetMetadataNamespace()

	target.Key = m.GetKey()

	return target
}

// Clone function
func (m *GraphQLResolverMapStatus) Clone() proto.Message {
	var target *GraphQLResolverMapStatus
	if m == nil {
		return target
	}
	target = &GraphQLResolverMapStatus{}

	if h, ok := interface{}(m.GetGlobal()).(clone.Cloner); ok {
		target.Global = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.GenericGlobalStatus)
	} else {
		target.Global = proto.Clone(m.GetGlobal()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.GenericGlobalStatus)
	}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus)
			}

		}
	}

	if h, ok := interface{}(m.GetOwnerWorkspace()).(clone.Cloner); ok {
		target.OwnerWorkspace = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.OwnerWorkspace)
	} else {
		target.OwnerWorkspace = proto.Clone(m.GetOwnerWorkspace()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.OwnerWorkspace)
	}

	return target
}

// Clone function
func (m *GraphQLResolverMapSpec_Resolution) Clone() proto.Message {
	var target *GraphQLResolverMapSpec_Resolution
	if m == nil {
		return target
	}
	target = &GraphQLResolverMapSpec_Resolution{}

	if m.GetFields() != nil {
		target.Fields = make(map[string]*GraphQLResolverMapSpec_Resolution_Resolvers, len(m.GetFields()))
		for k, v := range m.GetFields() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Fields[k] = h.Clone().(*GraphQLResolverMapSpec_Resolution_Resolvers)
			} else {
				target.Fields[k] = proto.Clone(v).(*GraphQLResolverMapSpec_Resolution_Resolvers)
			}

		}
	}

	return target
}

// Clone function
func (m *GraphQLResolverMapSpec_ResolverMapExtensions) Clone() proto.Message {
	var target *GraphQLResolverMapSpec_ResolverMapExtensions
	if m == nil {
		return target
	}
	target = &GraphQLResolverMapSpec_ResolverMapExtensions{}

	if h, ok := interface{}(m.GetGrpcSchemaSelector()).(clone.Cloner); ok {
		target.GrpcSchemaSelector = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.ObjectSelector)
	} else {
		target.GrpcSchemaSelector = proto.Clone(m.GetGrpcSchemaSelector()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.ObjectSelector)
	}

	return target
}

// Clone function
func (m *GraphQLResolverMapSpec_Resolution_Resolvers) Clone() proto.Message {
	var target *GraphQLResolverMapSpec_Resolution_Resolvers
	if m == nil {
		return target
	}
	target = &GraphQLResolverMapSpec_Resolution_Resolvers{}

	if m.GetResolvers() != nil {
		target.Resolvers = make([]*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver, len(m.GetResolvers()))
		for idx, v := range m.GetResolvers() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Resolvers[idx] = h.Clone().(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver)
			} else {
				target.Resolvers[idx] = proto.Clone(v).(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver)
			}

		}
	}

	if m.GetVariables() != nil {
		target.Variables = make(map[string]*Extraction, len(m.GetVariables()))
		for k, v := range m.GetVariables() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Variables[k] = h.Clone().(*Extraction)
			} else {
				target.Variables[k] = proto.Clone(v).(*Extraction)
			}

		}
	}

	if h, ok := interface{}(m.GetStatPrefix()).(clone.Cloner); ok {
		target.StatPrefix = h.Clone().(*github_com_golang_protobuf_ptypes_wrappers.StringValue)
	} else {
		target.StatPrefix = proto.Clone(m.GetStatPrefix()).(*github_com_golang_protobuf_ptypes_wrappers.StringValue)
	}

	return target
}

// Clone function
func (m *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver) Clone() proto.Message {
	var target *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver
	if m == nil {
		return target
	}
	target = &GraphQLResolverMapSpec_Resolution_Resolvers_Resolver{}

	if h, ok := interface{}(m.GetResolverResultTransform()).(clone.Cloner); ok {
		target.ResolverResultTransform = h.Clone().(*VariableTransformation)
	} else {
		target.ResolverResultTransform = proto.Clone(m.GetResolverResultTransform()).(*VariableTransformation)
	}

	switch m.Resolver.(type) {

	case *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_:

		if h, ok := interface{}(m.GetRestResolver()).(clone.Cloner); ok {
			target.Resolver = &GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_{
				RestResolver: h.Clone().(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver),
			}
		} else {
			target.Resolver = &GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_{
				RestResolver: proto.Clone(m.GetRestResolver()).(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver),
			}
		}

	case *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_:

		if h, ok := interface{}(m.GetGrpcResolver()).(clone.Cloner); ok {
			target.Resolver = &GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_{
				GrpcResolver: h.Clone().(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver),
			}
		} else {
			target.Resolver = &GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_{
				GrpcResolver: proto.Clone(m.GetGrpcResolver()).(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver),
			}
		}

	case *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_:

		if h, ok := interface{}(m.GetMockResolver()).(clone.Cloner); ok {
			target.Resolver = &GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_{
				MockResolver: h.Clone().(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver),
			}
		} else {
			target.Resolver = &GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_{
				MockResolver: proto.Clone(m.GetMockResolver()).(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver),
			}
		}

	}

	return target
}

// Clone function
func (m *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver) Clone() proto.Message {
	var target *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver
	if m == nil {
		return target
	}
	target = &GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver{}

	if m.GetDestinations() != nil {
		target.Destinations = make([]*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.DestinationReference, len(m.GetDestinations()))
		for idx, v := range m.GetDestinations() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Destinations[idx] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.DestinationReference)
			} else {
				target.Destinations[idx] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.DestinationReference)
			}

		}
	}

	if h, ok := interface{}(m.GetRequest()).(clone.Cloner); ok {
		target.Request = h.Clone().(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate)
	} else {
		target.Request = proto.Clone(m.GetRequest()).(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate)
	}

	if m.GetVariables() != nil {
		target.Variables = make(map[string]*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable, len(m.GetVariables()))
		for k, v := range m.GetVariables() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Variables[k] = h.Clone().(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable)
			} else {
				target.Variables[k] = proto.Clone(v).(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable)
			}

		}
	}

	if h, ok := interface{}(m.GetSpanName()).(clone.Cloner); ok {
		target.SpanName = h.Clone().(*github_com_golang_protobuf_ptypes_wrappers.StringValue)
	} else {
		target.SpanName = proto.Clone(m.GetSpanName()).(*github_com_golang_protobuf_ptypes_wrappers.StringValue)
	}

	if h, ok := interface{}(m.GetTimeout()).(clone.Cloner); ok {
		target.Timeout = h.Clone().(*github_com_golang_protobuf_ptypes_duration.Duration)
	} else {
		target.Timeout = proto.Clone(m.GetTimeout()).(*github_com_golang_protobuf_ptypes_duration.Duration)
	}

	return target
}

// Clone function
func (m *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver) Clone() proto.Message {
	var target *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver
	if m == nil {
		return target
	}
	target = &GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver{}

	if m.GetDestinations() != nil {
		target.Destinations = make([]*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.DestinationReference, len(m.GetDestinations()))
		for idx, v := range m.GetDestinations() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Destinations[idx] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.DestinationReference)
			} else {
				target.Destinations[idx] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.DestinationReference)
			}

		}
	}

	if h, ok := interface{}(m.GetRequest()).(clone.Cloner); ok {
		target.Request = h.Clone().(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate)
	} else {
		target.Request = proto.Clone(m.GetRequest()).(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate)
	}

	if h, ok := interface{}(m.GetSpanName()).(clone.Cloner); ok {
		target.SpanName = h.Clone().(*github_com_golang_protobuf_ptypes_wrappers.StringValue)
	} else {
		target.SpanName = proto.Clone(m.GetSpanName()).(*github_com_golang_protobuf_ptypes_wrappers.StringValue)
	}

	if h, ok := interface{}(m.GetTimeout()).(clone.Cloner); ok {
		target.Timeout = h.Clone().(*github_com_golang_protobuf_ptypes_duration.Duration)
	} else {
		target.Timeout = proto.Clone(m.GetTimeout()).(*github_com_golang_protobuf_ptypes_duration.Duration)
	}

	return target
}

// Clone function
func (m *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver) Clone() proto.Message {
	var target *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver
	if m == nil {
		return target
	}
	target = &GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver{}

	switch m.Response.(type) {

	case *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_SyncResponse:

		if h, ok := interface{}(m.GetSyncResponse()).(clone.Cloner); ok {
			target.Response = &GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_SyncResponse{
				SyncResponse: h.Clone().(*VariableTransformation),
			}
		} else {
			target.Response = &GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_SyncResponse{
				SyncResponse: proto.Clone(m.GetSyncResponse()).(*VariableTransformation),
			}
		}

	case *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse_:

		if h, ok := interface{}(m.GetAsyncResponse()).(clone.Cloner); ok {
			target.Response = &GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse_{
				AsyncResponse: h.Clone().(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse),
			}
		} else {
			target.Response = &GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse_{
				AsyncResponse: proto.Clone(m.GetAsyncResponse()).(*GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse),
			}
		}

	case *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_ErrorResponse:

		target.Response = &GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_ErrorResponse{
			ErrorResponse: m.GetErrorResponse(),
		}

	}

	return target
}

// Clone function
func (m *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate) Clone() proto.Message {
	var target *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate
	if m == nil {
		return target
	}
	target = &GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RequestTemplate{}

	if m.GetHeaders() != nil {
		target.Headers = make(map[string]*VariableTransformation, len(m.GetHeaders()))
		for k, v := range m.GetHeaders() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Headers[k] = h.Clone().(*VariableTransformation)
			} else {
				target.Headers[k] = proto.Clone(v).(*VariableTransformation)
			}

		}
	}

	if m.GetQueryParams() != nil {
		target.QueryParams = make(map[string]*VariableTransformation, len(m.GetQueryParams()))
		for k, v := range m.GetQueryParams() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.QueryParams[k] = h.Clone().(*VariableTransformation)
			} else {
				target.QueryParams[k] = proto.Clone(v).(*VariableTransformation)
			}

		}
	}

	if h, ok := interface{}(m.GetBody()).(clone.Cloner); ok {
		target.Body = h.Clone().(*VariableTransformation)
	} else {
		target.Body = proto.Clone(m.GetBody()).(*VariableTransformation)
	}

	return target
}

// Clone function
func (m *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable) Clone() proto.Message {
	var target *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable
	if m == nil {
		return target
	}
	target = &GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable{}

	switch m.Extraction.(type) {

	case *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable_ResponseHeader:

		target.Extraction = &GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_RestResolver_RESTVariable_ResponseHeader{
			ResponseHeader: m.GetResponseHeader(),
		}

	}

	return target
}

// Clone function
func (m *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate) Clone() proto.Message {
	var target *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate
	if m == nil {
		return target
	}
	target = &GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_GrpcResolver_RequestTemplate{}

	target.Service = m.GetService()

	target.Method = m.GetMethod()

	if h, ok := interface{}(m.GetOutgoingMessage()).(clone.Cloner); ok {
		target.OutgoingMessage = h.Clone().(*VariableTransformation)
	} else {
		target.OutgoingMessage = proto.Clone(m.GetOutgoingMessage()).(*VariableTransformation)
	}

	if m.GetRequestMetadata() != nil {
		target.RequestMetadata = make(map[string]string, len(m.GetRequestMetadata()))
		for k, v := range m.GetRequestMetadata() {

			target.RequestMetadata[k] = v

		}
	}

	if h, ok := interface{}(m.GetAuthority()).(clone.Cloner); ok {
		target.Authority = h.Clone().(*github_com_golang_protobuf_ptypes_wrappers.StringValue)
	} else {
		target.Authority = proto.Clone(m.GetAuthority()).(*github_com_golang_protobuf_ptypes_wrappers.StringValue)
	}

	return target
}

// Clone function
func (m *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse) Clone() proto.Message {
	var target *GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse
	if m == nil {
		return target
	}
	target = &GraphQLResolverMapSpec_Resolution_Resolvers_Resolver_MockResolver_AsyncResponse{}

	if h, ok := interface{}(m.GetDelay()).(clone.Cloner); ok {
		target.Delay = h.Clone().(*github_com_golang_protobuf_ptypes_duration.Duration)
	} else {
		target.Delay = proto.Clone(m.GetDelay()).(*github_com_golang_protobuf_ptypes_duration.Duration)
	}

	if h, ok := interface{}(m.GetResponse()).(clone.Cloner); ok {
		target.Response = h.Clone().(*VariableTransformation)
	} else {
		target.Response = proto.Clone(m.GetResponse()).(*VariableTransformation)
	}

	return target
}
