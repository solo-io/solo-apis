// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/apimanagement/v2/portal.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *PortalSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalSpec)
	if !ok {
		that2, ok := that.(PortalSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetPortalBackendSelector()) != len(target.GetPortalBackendSelector()) {
		return false
	}
	for idx, v := range m.GetPortalBackendSelector() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetPortalBackendSelector()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetPortalBackendSelector()[idx]) {
				return false
			}
		}

	}

	if len(m.GetApis()) != len(target.GetApis()) {
		return false
	}
	for idx, v := range m.GetApis() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetApis()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetApis()[idx]) {
				return false
			}
		}

	}

	if len(m.GetUsagePlans()) != len(target.GetUsagePlans()) {
		return false
	}
	for idx, v := range m.GetUsagePlans() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetUsagePlans()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetUsagePlans()[idx]) {
				return false
			}
		}

	}

	if len(m.GetDomains()) != len(target.GetDomains()) {
		return false
	}
	for idx, v := range m.GetDomains() {

		if strings.Compare(v, target.GetDomains()[idx]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *API) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*API)
	if !ok {
		that2, ok := that.(API)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetRouteTable()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRouteTable()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRouteTable(), target.GetRouteTable()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *PortalStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalStatus)
	if !ok {
		that2, ok := that.(PortalStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetGlobal()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGlobal()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGlobal(), target.GetGlobal()) {
			return false
		}
	}

	if len(m.GetWorkspaces()) != len(target.GetWorkspaces()) {
		return false
	}
	for k, v := range m.GetWorkspaces() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetWorkspaces()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetWorkspaces()[k]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetOwnerWorkspace()).(equality.Equalizer); ok {
		if !h.Equal(target.GetOwnerWorkspace()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetOwnerWorkspace(), target.GetOwnerWorkspace()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *PortalNewStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalNewStatus)
	if !ok {
		that2, ok := that.(PortalNewStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetCommon()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCommon()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCommon(), target.GetCommon()) {
			return false
		}
	}

	if strings.Compare(m.GetOwnerWorkspace(), target.GetOwnerWorkspace()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *PortalReport) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalReport)
	if !ok {
		that2, ok := that.(PortalReport)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetWorkspaces()) != len(target.GetWorkspaces()) {
		return false
	}
	for k, v := range m.GetWorkspaces() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetWorkspaces()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetWorkspaces()[k]) {
				return false
			}
		}

	}

	if strings.Compare(m.GetOwnerWorkspace(), target.GetOwnerWorkspace()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *PortalSpec_UsagePlan) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalSpec_UsagePlan)
	if !ok {
		that2, ok := that.(PortalSpec_UsagePlan)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetDisplayName(), target.GetDisplayName()) != 0 {
		return false
	}

	if strings.Compare(m.GetDescription(), target.GetDescription()) != 0 {
		return false
	}

	return true
}
