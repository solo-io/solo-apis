// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/apimanagement/v2/graphql_stitched_schema.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/pkg/api/common.gloo.solo.io/v2"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *GraphQLStitchedSchemaSpec) Clone() proto.Message {
	var target *GraphQLStitchedSchemaSpec
	if m == nil {
		return target
	}
	target = &GraphQLStitchedSchemaSpec{}

	if m.GetSubschemas() != nil {
		target.Subschemas = make([]*GraphQLStitchedSchemaSpec_Subschema, len(m.GetSubschemas()))
		for idx, v := range m.GetSubschemas() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Subschemas[idx] = h.Clone().(*GraphQLStitchedSchemaSpec_Subschema)
			} else {
				target.Subschemas[idx] = proto.Clone(v).(*GraphQLStitchedSchemaSpec_Subschema)
			}

		}
	}

	return target
}

// Clone function
func (m *GraphQLStitchedSchemaStatus) Clone() proto.Message {
	var target *GraphQLStitchedSchemaStatus
	if m == nil {
		return target
	}
	target = &GraphQLStitchedSchemaStatus{}

	if h, ok := interface{}(m.GetGlobal()).(clone.Cloner); ok {
		target.Global = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.GenericGlobalStatus)
	} else {
		target.Global = proto.Clone(m.GetGlobal()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.GenericGlobalStatus)
	}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus)
			}

		}
	}

	if h, ok := interface{}(m.GetOwnerWorkspace()).(clone.Cloner); ok {
		target.OwnerWorkspace = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.OwnerWorkspace)
	} else {
		target.OwnerWorkspace = proto.Clone(m.GetOwnerWorkspace()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.OwnerWorkspace)
	}

	return target
}

// Clone function
func (m *GraphQLStitchedSchemaSpec_Subschema) Clone() proto.Message {
	var target *GraphQLStitchedSchemaSpec_Subschema
	if m == nil {
		return target
	}
	target = &GraphQLStitchedSchemaSpec_Subschema{}

	if h, ok := interface{}(m.GetExecutableSubschema()).(clone.Cloner); ok {
		target.ExecutableSubschema = h.Clone().(*ExecutableSchema)
	} else {
		target.ExecutableSubschema = proto.Clone(m.GetExecutableSubschema()).(*ExecutableSchema)
	}

	if m.GetTypeMerge() != nil {
		target.TypeMerge = make(map[string]*GraphQLStitchedSchemaSpec_Subschema_TypeMergeConfig, len(m.GetTypeMerge()))
		for k, v := range m.GetTypeMerge() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.TypeMerge[k] = h.Clone().(*GraphQLStitchedSchemaSpec_Subschema_TypeMergeConfig)
			} else {
				target.TypeMerge[k] = proto.Clone(v).(*GraphQLStitchedSchemaSpec_Subschema_TypeMergeConfig)
			}

		}
	}

	return target
}

// Clone function
func (m *GraphQLStitchedSchemaSpec_Subschema_TypeMergeConfig) Clone() proto.Message {
	var target *GraphQLStitchedSchemaSpec_Subschema_TypeMergeConfig
	if m == nil {
		return target
	}
	target = &GraphQLStitchedSchemaSpec_Subschema_TypeMergeConfig{}

	target.SelectionSet = m.GetSelectionSet()

	target.QueryName = m.GetQueryName()

	if m.GetArgs() != nil {
		target.Args = make(map[string]string, len(m.GetArgs()))
		for k, v := range m.GetArgs() {

			target.Args[k] = v

		}
	}

	return target
}
