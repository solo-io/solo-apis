// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/apimanagement/v2/api_schema.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/pkg/api/common.gloo.solo.io/v2"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *ApiSchemaSpec) Clone() proto.Message {
	var target *ApiSchemaSpec
	if m == nil {
		return target
	}
	target = &ApiSchemaSpec{}

	if h, ok := interface{}(m.GetService()).(clone.Cloner); ok {
		target.Service = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.DestinationReference)
	} else {
		target.Service = proto.Clone(m.GetService()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.DestinationReference)
	}

	switch m.SchemaType.(type) {

	case *ApiSchemaSpec_Openapi:

		if h, ok := interface{}(m.GetOpenapi()).(clone.Cloner); ok {
			target.SchemaType = &ApiSchemaSpec_Openapi{
				Openapi: h.Clone().(*ApiSchemaSpec_OpenAPISchema),
			}
		} else {
			target.SchemaType = &ApiSchemaSpec_Openapi{
				Openapi: proto.Clone(m.GetOpenapi()).(*ApiSchemaSpec_OpenAPISchema),
			}
		}

	case *ApiSchemaSpec_Grpc:

		if h, ok := interface{}(m.GetGrpc()).(clone.Cloner); ok {
			target.SchemaType = &ApiSchemaSpec_Grpc{
				Grpc: h.Clone().(*ApiSchemaSpec_GrpcSchema),
			}
		} else {
			target.SchemaType = &ApiSchemaSpec_Grpc{
				Grpc: proto.Clone(m.GetGrpc()).(*ApiSchemaSpec_GrpcSchema),
			}
		}

	case *ApiSchemaSpec_Graphql:

		if h, ok := interface{}(m.GetGraphql()).(clone.Cloner); ok {
			target.SchemaType = &ApiSchemaSpec_Graphql{
				Graphql: h.Clone().(*ApiSchemaSpec_GraphQLSchema),
			}
		} else {
			target.SchemaType = &ApiSchemaSpec_Graphql{
				Graphql: proto.Clone(m.GetGraphql()).(*ApiSchemaSpec_GraphQLSchema),
			}
		}

	}

	return target
}

// Clone function
func (m *ApiSchemaStatus) Clone() proto.Message {
	var target *ApiSchemaStatus
	if m == nil {
		return target
	}
	target = &ApiSchemaStatus{}

	if h, ok := interface{}(m.GetGlobal()).(clone.Cloner); ok {
		target.Global = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.GenericGlobalStatus)
	} else {
		target.Global = proto.Clone(m.GetGlobal()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.GenericGlobalStatus)
	}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus)
			}

		}
	}

	if h, ok := interface{}(m.GetOwnerWorkspace()).(clone.Cloner); ok {
		target.OwnerWorkspace = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.OwnerWorkspace)
	} else {
		target.OwnerWorkspace = proto.Clone(m.GetOwnerWorkspace()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.OwnerWorkspace)
	}

	return target
}

// Clone function
func (m *ApiSchemaSpec_OpenAPISchema) Clone() proto.Message {
	var target *ApiSchemaSpec_OpenAPISchema
	if m == nil {
		return target
	}
	target = &ApiSchemaSpec_OpenAPISchema{}

	target.InlineString = m.GetInlineString()

	return target
}

// Clone function
func (m *ApiSchemaSpec_GrpcSchema) Clone() proto.Message {
	var target *ApiSchemaSpec_GrpcSchema
	if m == nil {
		return target
	}
	target = &ApiSchemaSpec_GrpcSchema{}

	if m.GetDescriptors() != nil {
		target.Descriptors = make([]byte, len(m.GetDescriptors()))
		copy(target.Descriptors, m.GetDescriptors())
	}

	return target
}

// Clone function
func (m *ApiSchemaSpec_GraphQLSchema) Clone() proto.Message {
	var target *ApiSchemaSpec_GraphQLSchema
	if m == nil {
		return target
	}
	target = &ApiSchemaSpec_GraphQLSchema{}

	target.SchemaDefinition = m.GetSchemaDefinition()

	return target
}
