// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/apimanagement/v2/portal_group.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *PortalGroupSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalGroupSpec)
	if !ok {
		that2, ok := that.(PortalGroupSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetDescription(), target.GetDescription()) != 0 {
		return false
	}

	if len(m.GetMembership()) != len(target.GetMembership()) {
		return false
	}
	for idx, v := range m.GetMembership() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetMembership()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetMembership()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetAccessLevel()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAccessLevel()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAccessLevel(), target.GetAccessLevel()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *Membership) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Membership)
	if !ok {
		that2, ok := that.(Membership)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetClaims()) != len(target.GetClaims()) {
		return false
	}
	for idx, v := range m.GetClaims() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetClaims()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetClaims()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *Claim) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Claim)
	if !ok {
		that2, ok := that.(Claim)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetKey(), target.GetKey()) != 0 {
		return false
	}

	if strings.Compare(m.GetValue(), target.GetValue()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *PortalGroupStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalGroupStatus)
	if !ok {
		that2, ok := that.(PortalGroupStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *PortalGroupReport) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalGroupReport)
	if !ok {
		that2, ok := that.(PortalGroupReport)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *PortalGroupSpec_AccessLevel) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PortalGroupSpec_AccessLevel)
	if !ok {
		that2, ok := that.(PortalGroupSpec_AccessLevel)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetApis()) != len(target.GetApis()) {
		return false
	}
	for idx, v := range m.GetApis() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetApis()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetApis()[idx]) {
				return false
			}
		}

	}

	if len(m.GetUsagePlans()) != len(target.GetUsagePlans()) {
		return false
	}
	for idx, v := range m.GetUsagePlans() {

		if strings.Compare(v, target.GetUsagePlans()[idx]) != 0 {
			return false
		}

	}

	return true
}
