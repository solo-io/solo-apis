// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/policy/v2/security/client_tls_policy.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *ClientTLSPolicySpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ClientTLSPolicySpec)
	if !ok {
		that2, ok := that.(ClientTLSPolicySpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetApplyToDestinations()) != len(target.GetApplyToDestinations()) {
		return false
	}
	for idx, v := range m.GetApplyToDestinations() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetApplyToDestinations()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetApplyToDestinations()[idx]) {
				return false
			}
		}

	}

	switch m.Mode.(type) {

	case *ClientTLSPolicySpec_Disable_:
		if _, ok := target.Mode.(*ClientTLSPolicySpec_Disable_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetDisable()).(equality.Equalizer); ok {
			if !h.Equal(target.GetDisable()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetDisable(), target.GetDisable()) {
				return false
			}
		}

	case *ClientTLSPolicySpec_Simple_:
		if _, ok := target.Mode.(*ClientTLSPolicySpec_Simple_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetSimple()).(equality.Equalizer); ok {
			if !h.Equal(target.GetSimple()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetSimple(), target.GetSimple()) {
				return false
			}
		}

	case *ClientTLSPolicySpec_Mutual_:
		if _, ok := target.Mode.(*ClientTLSPolicySpec_Mutual_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetMutual()).(equality.Equalizer); ok {
			if !h.Equal(target.GetMutual()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetMutual(), target.GetMutual()) {
				return false
			}
		}

	case *ClientTLSPolicySpec_IstioMutual_:
		if _, ok := target.Mode.(*ClientTLSPolicySpec_IstioMutual_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetIstioMutual()).(equality.Equalizer); ok {
			if !h.Equal(target.GetIstioMutual()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetIstioMutual(), target.GetIstioMutual()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.Mode != target.Mode {
			return false
		}
	}

	return true
}

// Equal function
func (m *TLSConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*TLSConfig)
	if !ok {
		that2, ok := that.(TLSConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetSni()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSni()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSni(), target.GetSni()) {
			return false
		}
	}

	if strings.Compare(m.GetCredentialName(), target.GetCredentialName()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *ClientTLSPolicyStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ClientTLSPolicyStatus)
	if !ok {
		that2, ok := that.(ClientTLSPolicyStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetGlobal()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGlobal()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGlobal(), target.GetGlobal()) {
			return false
		}
	}

	if len(m.GetWorkspaces()) != len(target.GetWorkspaces()) {
		return false
	}
	for k, v := range m.GetWorkspaces() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetWorkspaces()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetWorkspaces()[k]) {
				return false
			}
		}

	}

	if len(m.GetSelectedDestinationPorts()) != len(target.GetSelectedDestinationPorts()) {
		return false
	}
	for idx, v := range m.GetSelectedDestinationPorts() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetSelectedDestinationPorts()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetSelectedDestinationPorts()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ClientTLSPolicySpec_Disable) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ClientTLSPolicySpec_Disable)
	if !ok {
		that2, ok := that.(ClientTLSPolicySpec_Disable)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *ClientTLSPolicySpec_IstioMutual) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ClientTLSPolicySpec_IstioMutual)
	if !ok {
		that2, ok := that.(ClientTLSPolicySpec_IstioMutual)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *ClientTLSPolicySpec_Mutual) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ClientTLSPolicySpec_Mutual)
	if !ok {
		that2, ok := that.(ClientTLSPolicySpec_Mutual)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetConfig(), target.GetConfig()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ClientTLSPolicySpec_Simple) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ClientTLSPolicySpec_Simple)
	if !ok {
		that2, ok := that.(ClientTLSPolicySpec_Simple)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetConfig(), target.GetConfig()) {
			return false
		}
	}

	return true
}
