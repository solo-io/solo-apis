// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/policy/v2/security/waf_policy.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_golang_protobuf_ptypes_wrappers "github.com/golang/protobuf/ptypes/wrappers"

	github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/pkg/api/common.gloo.solo.io/v2"

	github_com_solo_io_solo_apis_pkg_api_envoy_gloo_ee_api_envoy_config_filter_http_modsecurity_v2 "github.com/solo-io/solo-apis/pkg/api/envoy-gloo-ee/api/envoy/config/filter/http/modsecurity/v2"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *WAFPolicySpec) Clone() proto.Message {
	var target *WAFPolicySpec
	if m == nil {
		return target
	}
	target = &WAFPolicySpec{}

	if m.GetApplyToRoutes() != nil {
		target.ApplyToRoutes = make([]*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.RouteSelector, len(m.GetApplyToRoutes()))
		for idx, v := range m.GetApplyToRoutes() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ApplyToRoutes[idx] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.RouteSelector)
			} else {
				target.ApplyToRoutes[idx] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.RouteSelector)
			}

		}
	}

	if h, ok := interface{}(m.GetConfig()).(clone.Cloner); ok {
		target.Config = h.Clone().(*WAFPolicySpec_Config)
	} else {
		target.Config = proto.Clone(m.GetConfig()).(*WAFPolicySpec_Config)
	}

	return target
}

// Clone function
func (m *WAFPolicyStatus) Clone() proto.Message {
	var target *WAFPolicyStatus
	if m == nil {
		return target
	}
	target = &WAFPolicyStatus{}

	if h, ok := interface{}(m.GetGlobal()).(clone.Cloner); ok {
		target.Global = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.GenericGlobalStatus)
	} else {
		target.Global = proto.Clone(m.GetGlobal()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.GenericGlobalStatus)
	}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus)
			}

		}
	}

	if m.GetSelectedRoutes() != nil {
		target.SelectedRoutes = make([]*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.RouteReference, len(m.GetSelectedRoutes()))
		for idx, v := range m.GetSelectedRoutes() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SelectedRoutes[idx] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.RouteReference)
			} else {
				target.SelectedRoutes[idx] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.RouteReference)
			}

		}
	}

	return target
}

// Clone function
func (m *WAFPolicySpec_Config) Clone() proto.Message {
	var target *WAFPolicySpec_Config
	if m == nil {
		return target
	}
	target = &WAFPolicySpec_Config{}

	target.DisableCoreRuleSet = m.GetDisableCoreRuleSet()

	if m.GetCustomRuleSets() != nil {
		target.CustomRuleSets = make([]*github_com_solo_io_solo_apis_pkg_api_envoy_gloo_ee_api_envoy_config_filter_http_modsecurity_v2.RuleSet, len(m.GetCustomRuleSets()))
		for idx, v := range m.GetCustomRuleSets() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.CustomRuleSets[idx] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_envoy_gloo_ee_api_envoy_config_filter_http_modsecurity_v2.RuleSet)
			} else {
				target.CustomRuleSets[idx] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_envoy_gloo_ee_api_envoy_config_filter_http_modsecurity_v2.RuleSet)
			}

		}
	}

	target.CustomInterventionMessage = m.GetCustomInterventionMessage()

	if h, ok := interface{}(m.GetAuditLogging()).(clone.Cloner); ok {
		target.AuditLogging = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_envoy_gloo_ee_api_envoy_config_filter_http_modsecurity_v2.AuditLogging)
	} else {
		target.AuditLogging = proto.Clone(m.GetAuditLogging()).(*github_com_solo_io_solo_apis_pkg_api_envoy_gloo_ee_api_envoy_config_filter_http_modsecurity_v2.AuditLogging)
	}

	target.RequestHeadersOnly = m.GetRequestHeadersOnly()

	target.ResponseHeadersOnly = m.GetResponseHeadersOnly()

	if h, ok := interface{}(m.GetPriority()).(clone.Cloner); ok {
		target.Priority = h.Clone().(*github_com_golang_protobuf_ptypes_wrappers.UInt32Value)
	} else {
		target.Priority = proto.Clone(m.GetPriority()).(*github_com_golang_protobuf_ptypes_wrappers.UInt32Value)
	}

	switch m.CoreRuleSetSettings.(type) {

	case *WAFPolicySpec_Config_CoreRuleSetSettingsString:

		target.CoreRuleSetSettings = &WAFPolicySpec_Config_CoreRuleSetSettingsString{
			CoreRuleSetSettingsString: m.GetCoreRuleSetSettingsString(),
		}

	case *WAFPolicySpec_Config_CoreRuleSetSettingsPath:

		target.CoreRuleSetSettings = &WAFPolicySpec_Config_CoreRuleSetSettingsPath{
			CoreRuleSetSettingsPath: m.GetCoreRuleSetSettingsPath(),
		}

	}

	return target
}
