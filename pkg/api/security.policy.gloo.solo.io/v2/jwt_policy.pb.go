// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.15.8
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/policy/v2/security/jwt_policy.proto

package v2

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/solo-io/cue/encoding/protobuf/cue"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v2 "github.com/solo-io/solo-apis/pkg/api/common.gloo.solo.io/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// JWTPolicy used to enable JWT Authentication for routes.
//
// Example:
// Sample JWT Payload:
// ```json
//
//	{
//	  "org": "solo-io",
//	  "iss": "https://localhost",
//	  "exp": 4804324736,
//	  "iat": 1648651136
//	}
//
// ```
//
// Configuration below will enable JWT Authentication for selected routes
// as well as inject a header into the request containing the value found
// within the parsed claim if it exists. Empty sources default to extracting
// JWTs from Authorization Header with prefix "Bearer <Token>"" or Query Param
// "access_token=<Token>"
//
// ```yaml
// apiVersion: security.policy.gloo.solo.io/v2
// kind: JWTPolicy
// metadata:
//
//	name: <name>
//	namespace: <namespace>
//
// spec:
//
//	config:
//	  providers:
//	    <provider_name>:
//	      issuer: "https://localhost"
//	      local:
//	        inline: |
//	          <pem formatted public key>
//	      claimsToHeaders:
//	      - claim: org
//	        header: x-org
//	    stage: PRE_AUTHZ
//
// ```
//
// This example enables JWT Authentication for selected routes and
// request will be checked using token found at either X-Auth header with prefix
// "Bearer <token>" or query param "auth_token=<Token>". Note if a request has both
// sources available all tokens will need to be valid for the request to be accepted.
//
// ```yaml
// apiVersion: security.policy.gloo.solo.io/v2
// kind: JWTPolicy
// metadata:
//
//	name: <name>
//	namespace: <namespace>
//
// spec:
//
//	config:
//	  providers:
//	    <provider_name>:
//	      issuer: "https://localhost"
//	      local:
//	        inline: |
//	          <pem formatted public key>
//	      tokenSource:
//	        header:
//	        - name: "X-Auth"
//	          prefix: "Bearer"
//	        queryParams:
//	        - "auth_token"
//	    stage: PRE_AUTHZ
//
// ```
type JWTPolicySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Select the routes where the policy will be applied.
	// If left empty, no policy will be applied to any routes in the workspace.
	ApplyToRoutes []*v2.RouteSelector `protobuf:"bytes,1,rep,name=apply_to_routes,json=applyToRoutes,proto3" json:"apply_to_routes,omitempty"`
	// The details of the JWT policy to apply to the selected routes.
	Config *JWTPolicySpec_Config `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *JWTPolicySpec) Reset() {
	*x = JWTPolicySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicySpec) ProtoMessage() {}

func (x *JWTPolicySpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicySpec.ProtoReflect.Descriptor instead.
func (*JWTPolicySpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{0}
}

func (x *JWTPolicySpec) GetApplyToRoutes() []*v2.RouteSelector {
	if x != nil {
		return x.ApplyToRoutes
	}
	return nil
}

func (x *JWTPolicySpec) GetConfig() *JWTPolicySpec_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

// reflects the status of the JWTPolicyStatus
type JWTPolicyStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Global *v2.GenericGlobalStatus `protobuf:"bytes,1,opt,name=global,proto3" json:"global,omitempty"`
	// The status of the resource in each workspace that it exists in.
	Workspaces map[string]*v2.WorkspaceStatus `protobuf:"bytes,2,rep,name=workspaces,proto3" json:"workspaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Routes selected by the policy
	SelectedRoutes []*v2.RouteReference `protobuf:"bytes,3,rep,name=selected_routes,json=selectedRoutes,proto3" json:"selected_routes,omitempty"`
}

func (x *JWTPolicyStatus) Reset() {
	*x = JWTPolicyStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicyStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicyStatus) ProtoMessage() {}

func (x *JWTPolicyStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicyStatus.ProtoReflect.Descriptor instead.
func (*JWTPolicyStatus) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{1}
}

func (x *JWTPolicyStatus) GetGlobal() *v2.GenericGlobalStatus {
	if x != nil {
		return x.Global
	}
	return nil
}

func (x *JWTPolicyStatus) GetWorkspaces() map[string]*v2.WorkspaceStatus {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

func (x *JWTPolicyStatus) GetSelectedRoutes() []*v2.RouteReference {
	if x != nil {
		return x.SelectedRoutes
	}
	return nil
}

type JWTPolicySpec_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map provider name to jwt provider configuration.
	//
	// Note: The JWT provider name can help you map the JWT policy to the
	// provider, such as when debugging and viewing logs. However, the JWT
	// provider name does not change your policy's behavior, and cannot be
	// used by other resources to select the policy.
	Providers map[string]*JWTPolicySpec_Config_Provider `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Use phase to indicate where in the request chain this JWT Filter should be applied.
	// If no phase is specified, the default will be post AuthZ.
	Phase *v2.PrioritizedPhase `protobuf:"bytes,2,opt,name=phase,proto3" json:"phase,omitempty"`
	// Allow requests to succeed even if JWT authentication is missing or fails.
	// For example, you might apply multiple policies to your routes to require
	// JWT auth OR another method such as external auth. Set this value to "true"
	// to allow a failed JWT auth request to pass through to the other authentication
	// method. By default, this value is "false" so that requests that fail JWT
	// authentication then fail authorization immediately.
	AllowMissingOrFailed bool `protobuf:"varint,3,opt,name=allow_missing_or_failed,json=allowMissingOrFailed,proto3" json:"allow_missing_or_failed,omitempty"`
}

func (x *JWTPolicySpec_Config) Reset() {
	*x = JWTPolicySpec_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicySpec_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicySpec_Config) ProtoMessage() {}

func (x *JWTPolicySpec_Config) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicySpec_Config.ProtoReflect.Descriptor instead.
func (*JWTPolicySpec_Config) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{0, 0}
}

func (x *JWTPolicySpec_Config) GetProviders() map[string]*JWTPolicySpec_Config_Provider {
	if x != nil {
		return x.Providers
	}
	return nil
}

func (x *JWTPolicySpec_Config) GetPhase() *v2.PrioritizedPhase {
	if x != nil {
		return x.Phase
	}
	return nil
}

func (x *JWTPolicySpec_Config) GetAllowMissingOrFailed() bool {
	if x != nil {
		return x.AllowMissingOrFailed
	}
	return false
}

// Specifies how a JWT should be verified.
type JWTPolicySpec_Config_Provider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional: The principal that issued the JWT, usually a URL or an email address.
	// If specified, the iss field in JWT token in the incoming request has to match this field else the request is denied.
	//
	//	If left empty the iss field in the JWT token is not checked.
	Issuer string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// Optional: A list of intended audiences for this JWT token. A JWT containing any of these
	// audiences will be accepted. If not specified, the audiences in JWT will not be checked.
	Audiences []string `protobuf:"bytes,2,rep,name=audiences,proto3" json:"audiences,omitempty"`
	// Optional: If no explicit location is specified, the following default locations are tried in order:
	//
	// 1. The Authorization header using the `Bearer `
	//
	//	Authorization: Bearer <token>.
	//
	// 2. `access_token` query parameter
	//
	//	https://<url>/path?access_token=<token>
	//
	// Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
	// its provider specified or from the default locations. Note if a single request contains multiple
	// sources e.g header and query param set, then all tokens found in the request will need to be valid
	// for the request to be accepted. Configured fields are case sensitive will be matched verbatim
	TokenSource *JWTPolicySpec_Config_Provider_TokenSource `protobuf:"bytes,3,opt,name=token_source,json=tokenSource,proto3" json:"token_source,omitempty"`
	// Required: Where to find the JWT of the current provider.
	//
	// Types that are assignable to JwksSource:
	//
	//	*JWTPolicySpec_Config_Provider_Local
	//	*JWTPolicySpec_Config_Provider_Remote
	JwksSource isJWTPolicySpec_Config_Provider_JwksSource `protobuf_oneof:"jwks_source"`
	// Optional: What claims should be copied to upstream headers.
	ClaimsToHeaders []*JWTPolicySpec_Config_Provider_ClaimsToHeader `protobuf:"bytes,6,rep,name=claims_to_headers,json=claimsToHeaders,proto3" json:"claims_to_headers,omitempty"`
	// Optional: KeepToken is used to keep the JWT in the request post verification.
	KeepToken bool `protobuf:"varint,7,opt,name=keep_token,json=keepToken,proto3" json:"keep_token,omitempty"`
	// Optional: ClockSkewSeconds is used to verify time constraints, such as `exp` and `npf`. Default is 60s
	// For information about the value format, see the [Google protocol buffer documentation](https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/u-int32-value).
	ClockSkewSeconds *wrappers.UInt32Value `protobuf:"bytes,8,opt,name=clock_skew_seconds,json=clockSkewSeconds,proto3" json:"clock_skew_seconds,omitempty"`
}

func (x *JWTPolicySpec_Config_Provider) Reset() {
	*x = JWTPolicySpec_Config_Provider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicySpec_Config_Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicySpec_Config_Provider) ProtoMessage() {}

func (x *JWTPolicySpec_Config_Provider) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicySpec_Config_Provider.ProtoReflect.Descriptor instead.
func (*JWTPolicySpec_Config_Provider) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *JWTPolicySpec_Config_Provider) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *JWTPolicySpec_Config_Provider) GetAudiences() []string {
	if x != nil {
		return x.Audiences
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider) GetTokenSource() *JWTPolicySpec_Config_Provider_TokenSource {
	if x != nil {
		return x.TokenSource
	}
	return nil
}

func (m *JWTPolicySpec_Config_Provider) GetJwksSource() isJWTPolicySpec_Config_Provider_JwksSource {
	if m != nil {
		return m.JwksSource
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider) GetLocal() *JWTPolicySpec_Config_Provider_LocalJWKS {
	if x, ok := x.GetJwksSource().(*JWTPolicySpec_Config_Provider_Local); ok {
		return x.Local
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider) GetRemote() *JWTPolicySpec_Config_Provider_RemoteJWKS {
	if x, ok := x.GetJwksSource().(*JWTPolicySpec_Config_Provider_Remote); ok {
		return x.Remote
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider) GetClaimsToHeaders() []*JWTPolicySpec_Config_Provider_ClaimsToHeader {
	if x != nil {
		return x.ClaimsToHeaders
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider) GetKeepToken() bool {
	if x != nil {
		return x.KeepToken
	}
	return false
}

func (x *JWTPolicySpec_Config_Provider) GetClockSkewSeconds() *wrappers.UInt32Value {
	if x != nil {
		return x.ClockSkewSeconds
	}
	return nil
}

type isJWTPolicySpec_Config_Provider_JwksSource interface {
	isJWTPolicySpec_Config_Provider_JwksSource()
}

type JWTPolicySpec_Config_Provider_Local struct {
	// Local can be either inline raw string of public jwks or kubernetes secret reference.
	Local *JWTPolicySpec_Config_Provider_LocalJWKS `protobuf:"bytes,4,opt,name=local,proto3,oneof"`
}

type JWTPolicySpec_Config_Provider_Remote struct {
	// JWKS from remote url source.
	Remote *JWTPolicySpec_Config_Provider_RemoteJWKS `protobuf:"bytes,5,opt,name=remote,proto3,oneof"`
}

func (*JWTPolicySpec_Config_Provider_Local) isJWTPolicySpec_Config_Provider_JwksSource() {}

func (*JWTPolicySpec_Config_Provider_Remote) isJWTPolicySpec_Config_Provider_JwksSource() {}

// Optional: Where to extract JWT Token in HTTP Request
//
// If left empty, defaults to Header "Authorization: Bearer <Token>" or Query Param "access_token=<Token>"
type JWTPolicySpec_Config_Provider_TokenSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Try to retrieve token from these headers
	Headers []*JWTPolicySpec_Config_Provider_TokenSourceFromHeader `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
	// Try to retrieve token from these query params
	QueryParams []string `protobuf:"bytes,2,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty"`
}

func (x *JWTPolicySpec_Config_Provider_TokenSource) Reset() {
	*x = JWTPolicySpec_Config_Provider_TokenSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicySpec_Config_Provider_TokenSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicySpec_Config_Provider_TokenSource) ProtoMessage() {}

func (x *JWTPolicySpec_Config_Provider_TokenSource) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicySpec_Config_Provider_TokenSource.ProtoReflect.Descriptor instead.
func (*JWTPolicySpec_Config_Provider_TokenSource) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *JWTPolicySpec_Config_Provider_TokenSource) GetHeaders() []*JWTPolicySpec_Config_Provider_TokenSourceFromHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider_TokenSource) GetQueryParams() []string {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

type JWTPolicySpec_Config_Provider_LocalJWKS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Specifier:
	//
	//	*JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef_
	//	*JWTPolicySpec_Config_Provider_LocalJWKS_Inline
	Specifier isJWTPolicySpec_Config_Provider_LocalJWKS_Specifier `protobuf_oneof:"specifier"`
}

func (x *JWTPolicySpec_Config_Provider_LocalJWKS) Reset() {
	*x = JWTPolicySpec_Config_Provider_LocalJWKS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicySpec_Config_Provider_LocalJWKS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicySpec_Config_Provider_LocalJWKS) ProtoMessage() {}

func (x *JWTPolicySpec_Config_Provider_LocalJWKS) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicySpec_Config_Provider_LocalJWKS.ProtoReflect.Descriptor instead.
func (*JWTPolicySpec_Config_Provider_LocalJWKS) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (m *JWTPolicySpec_Config_Provider_LocalJWKS) GetSpecifier() isJWTPolicySpec_Config_Provider_LocalJWKS_Specifier {
	if m != nil {
		return m.Specifier
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider_LocalJWKS) GetSecretRef() *JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef {
	if x, ok := x.GetSpecifier().(*JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef_); ok {
		return x.SecretRef
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider_LocalJWKS) GetInline() string {
	if x, ok := x.GetSpecifier().(*JWTPolicySpec_Config_Provider_LocalJWKS_Inline); ok {
		return x.Inline
	}
	return ""
}

type isJWTPolicySpec_Config_Provider_LocalJWKS_Specifier interface {
	isJWTPolicySpec_Config_Provider_LocalJWKS_Specifier()
}

type JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef_ struct {
	// Reference to a secret containing the PEM formatted public key.
	SecretRef *JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef `protobuf:"bytes,1,opt,name=secret_ref,json=secretRef,proto3,oneof"`
}

type JWTPolicySpec_Config_Provider_LocalJWKS_Inline struct {
	// Inline PEM formatted public key.
	Inline string `protobuf:"bytes,2,opt,name=inline,proto3,oneof"`
}

func (*JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef_) isJWTPolicySpec_Config_Provider_LocalJWKS_Specifier() {
}

func (*JWTPolicySpec_Config_Provider_LocalJWKS_Inline) isJWTPolicySpec_Config_Provider_LocalJWKS_Specifier() {
}

type JWTPolicySpec_Config_Provider_RemoteJWKS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The url used when accessing the remote destination for Json Web Key Set.
	// This is used to set the host and path in the request
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The remote destination representing the Json Web Key Set server
	DestinationRef *v2.DestinationReference `protobuf:"bytes,2,opt,name=destination_ref,json=destinationRef,proto3" json:"destination_ref,omitempty"`
	// Duration after which the cached JWKS should be expired.
	//
	// If not specified, default cache duration is 5 minutes.
	// For information about the value format, see the [Google protocol buffer documentation](https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/duration).
	CacheDuration *duration.Duration `protobuf:"bytes,3,opt,name=cache_duration,json=cacheDuration,proto3" json:"cache_duration,omitempty"`
	// Sets the maximum duration in seconds that a response can take to arrive upon request.
	//
	// If left empty, defaults to 5s
	// For information about the value format, see the [Google protocol buffer documentation](https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/duration).
	Timeout *duration.Duration `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Fetch Jwks asynchronously in the main thread before the listener is activated. Fetched Jwks can be used by all worker threads.
	//
	// If this feature is not enabled:
	//
	//   - The Jwks is fetched on-demand when the requests come. During the fetching, first
	//     few requests are paused until the Jwks is fetched.
	//   - Each worker thread fetches its own Jwks since Jwks cache is per worker thread.
	//
	// If this feature is enabled:
	//
	//   - Fetched Jwks is done in the main thread before the listener is activated. Its fetched
	//     Jwks can be used by all worker threads. Each worker thread doesn't need to fetch its own.
	//   - Jwks is ready when the requests come, not need to wait for the Jwks fetching.
	EnableAsyncFetch bool `protobuf:"varint,5,opt,name=enable_async_fetch,json=enableAsyncFetch,proto3" json:"enable_async_fetch,omitempty"`
}

func (x *JWTPolicySpec_Config_Provider_RemoteJWKS) Reset() {
	*x = JWTPolicySpec_Config_Provider_RemoteJWKS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicySpec_Config_Provider_RemoteJWKS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicySpec_Config_Provider_RemoteJWKS) ProtoMessage() {}

func (x *JWTPolicySpec_Config_Provider_RemoteJWKS) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicySpec_Config_Provider_RemoteJWKS.ProtoReflect.Descriptor instead.
func (*JWTPolicySpec_Config_Provider_RemoteJWKS) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *JWTPolicySpec_Config_Provider_RemoteJWKS) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *JWTPolicySpec_Config_Provider_RemoteJWKS) GetDestinationRef() *v2.DestinationReference {
	if x != nil {
		return x.DestinationRef
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider_RemoteJWKS) GetCacheDuration() *duration.Duration {
	if x != nil {
		return x.CacheDuration
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider_RemoteJWKS) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider_RemoteJWKS) GetEnableAsyncFetch() bool {
	if x != nil {
		return x.EnableAsyncFetch
	}
	return false
}

// Allows copying verified claims to headers sent upstream
type JWTPolicySpec_Config_Provider_ClaimsToHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Claim name. for example, "sub"
	Claim string `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim,omitempty"`
	// The header the claim will be copied to. for example, "x-sub".
	Header string `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// If the header exists, append to it (true), or overwrite it (false).
	Append bool `protobuf:"varint,3,opt,name=append,proto3" json:"append,omitempty"`
}

func (x *JWTPolicySpec_Config_Provider_ClaimsToHeader) Reset() {
	*x = JWTPolicySpec_Config_Provider_ClaimsToHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicySpec_Config_Provider_ClaimsToHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicySpec_Config_Provider_ClaimsToHeader) ProtoMessage() {}

func (x *JWTPolicySpec_Config_Provider_ClaimsToHeader) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicySpec_Config_Provider_ClaimsToHeader.ProtoReflect.Descriptor instead.
func (*JWTPolicySpec_Config_Provider_ClaimsToHeader) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{0, 0, 0, 3}
}

func (x *JWTPolicySpec_Config_Provider_ClaimsToHeader) GetClaim() string {
	if x != nil {
		return x.Claim
	}
	return ""
}

func (x *JWTPolicySpec_Config_Provider_ClaimsToHeader) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *JWTPolicySpec_Config_Provider_ClaimsToHeader) GetAppend() bool {
	if x != nil {
		return x.Append
	}
	return false
}

// Describes how to retrieve a JWT from a header
type JWTPolicySpec_Config_Provider_TokenSourceFromHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of header. E.g: "Authorization"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Prefix before the token. for example, "Bearer " with space
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *JWTPolicySpec_Config_Provider_TokenSourceFromHeader) Reset() {
	*x = JWTPolicySpec_Config_Provider_TokenSourceFromHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicySpec_Config_Provider_TokenSourceFromHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicySpec_Config_Provider_TokenSourceFromHeader) ProtoMessage() {}

func (x *JWTPolicySpec_Config_Provider_TokenSourceFromHeader) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicySpec_Config_Provider_TokenSourceFromHeader.ProtoReflect.Descriptor instead.
func (*JWTPolicySpec_Config_Provider_TokenSourceFromHeader) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *JWTPolicySpec_Config_Provider_TokenSourceFromHeader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JWTPolicySpec_Config_Provider_TokenSourceFromHeader) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Secret can be referenced explicitly by the namespace and cluster containing them.
	ObjectRef *v2.ObjectReference `protobuf:"bytes,1,opt,name=objectRef,proto3" json:"objectRef,omitempty"`
	// Key of data within specified secret.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef) Reset() {
	*x = JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef) ProtoMessage() {}

func (x *JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef.ProtoReflect.Descriptor instead.
func (*JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

func (x *JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef) GetObjectRef() *v2.ObjectReference {
	if x != nil {
		return x.ObjectRef
	}
	return nil
}

func (x *JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

var File_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto protoreflect.FileDescriptor

var file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDesc = []byte{
	0x0a, 0x5b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x6a, 0x77, 0x74,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x1a, 0x57, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f,
	0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c,
	0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x63, 0x75, 0x65, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x75, 0x65, 0x2f, 0x63, 0x75, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x65, 0x78, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65,
	0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x6f,
	0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d,
	0x65, 0x73, 0x68, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x51, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f,
	0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c,
	0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d,
	0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x32, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb,
	0x0f, 0x0a, 0x0d, 0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x4a, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4a, 0x57, 0x54, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x91, 0x0e, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x5f, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x4f, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x1a, 0xb6, 0x0b, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x0c, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4a, 0x57, 0x4b, 0x53, 0x48, 0x00, 0x52,
	0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x60, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4a, 0x57, 0x4b, 0x53, 0x48, 0x00,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x76, 0x0a, 0x11, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x4a, 0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6b, 0x65, 0x77, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x6b, 0x65, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x1a, 0xd8, 0x01, 0x0a, 0x0b,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x6c, 0x0a, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4a, 0x57, 0x54, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x66, 0x72, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x38, 0x0a, 0x0a,
	0x66, 0x72, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0x87, 0x02, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x4a, 0x57, 0x4b, 0x53, 0x12, 0x70, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4a, 0x57, 0x4b, 0x53, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x1a, 0x61, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x66, 0x12, 0x42, 0x0a,
	0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x1a, 0x97, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4a, 0x57, 0x4b, 0x53, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x52, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x40, 0x0a, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x65, 0x74, 0x63, 0x68, 0x1a, 0x56, 0x0a, 0x0e, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x73, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x6a, 0x77, 0x6b, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x1a, 0x79, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe5, 0x02, 0x0a,
	0x0f, 0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x40, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x12, 0x5d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4a, 0x57, 0x54, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a,
	0x63, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x52, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x32, 0xc0, 0xf5, 0x04, 0x01,
	0xb8, 0xf5, 0x04, 0x01, 0xd0, 0xf5, 0x04, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescOnce sync.Once
	file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescData = file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDesc
)

func file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescData)
	})
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDescData
}

var file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_goTypes = []interface{}{
	(*JWTPolicySpec)(nil),                 // 0: security.policy.gloo.solo.io.JWTPolicySpec
	(*JWTPolicyStatus)(nil),               // 1: security.policy.gloo.solo.io.JWTPolicyStatus
	(*JWTPolicySpec_Config)(nil),          // 2: security.policy.gloo.solo.io.JWTPolicySpec.Config
	(*JWTPolicySpec_Config_Provider)(nil), // 3: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider
	nil,                                   // 4: security.policy.gloo.solo.io.JWTPolicySpec.Config.ProvidersEntry
	(*JWTPolicySpec_Config_Provider_TokenSource)(nil),           // 5: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.TokenSource
	(*JWTPolicySpec_Config_Provider_LocalJWKS)(nil),             // 6: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.LocalJWKS
	(*JWTPolicySpec_Config_Provider_RemoteJWKS)(nil),            // 7: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.RemoteJWKS
	(*JWTPolicySpec_Config_Provider_ClaimsToHeader)(nil),        // 8: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.ClaimsToHeader
	(*JWTPolicySpec_Config_Provider_TokenSourceFromHeader)(nil), // 9: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.TokenSource.fromHeader
	(*JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef)(nil),   // 10: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.LocalJWKS.SecretRef
	nil,                             // 11: security.policy.gloo.solo.io.JWTPolicyStatus.WorkspacesEntry
	(*v2.RouteSelector)(nil),        // 12: common.gloo.solo.io.RouteSelector
	(*v2.GenericGlobalStatus)(nil),  // 13: common.gloo.solo.io.GenericGlobalStatus
	(*v2.RouteReference)(nil),       // 14: common.gloo.solo.io.RouteReference
	(*v2.PrioritizedPhase)(nil),     // 15: common.gloo.solo.io.PrioritizedPhase
	(*wrappers.UInt32Value)(nil),    // 16: google.protobuf.UInt32Value
	(*v2.DestinationReference)(nil), // 17: common.gloo.solo.io.DestinationReference
	(*duration.Duration)(nil),       // 18: google.protobuf.Duration
	(*v2.ObjectReference)(nil),      // 19: common.gloo.solo.io.ObjectReference
	(*v2.WorkspaceStatus)(nil),      // 20: common.gloo.solo.io.WorkspaceStatus
}
var file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_depIdxs = []int32{
	12, // 0: security.policy.gloo.solo.io.JWTPolicySpec.apply_to_routes:type_name -> common.gloo.solo.io.RouteSelector
	2,  // 1: security.policy.gloo.solo.io.JWTPolicySpec.config:type_name -> security.policy.gloo.solo.io.JWTPolicySpec.Config
	13, // 2: security.policy.gloo.solo.io.JWTPolicyStatus.global:type_name -> common.gloo.solo.io.GenericGlobalStatus
	11, // 3: security.policy.gloo.solo.io.JWTPolicyStatus.workspaces:type_name -> security.policy.gloo.solo.io.JWTPolicyStatus.WorkspacesEntry
	14, // 4: security.policy.gloo.solo.io.JWTPolicyStatus.selected_routes:type_name -> common.gloo.solo.io.RouteReference
	4,  // 5: security.policy.gloo.solo.io.JWTPolicySpec.Config.providers:type_name -> security.policy.gloo.solo.io.JWTPolicySpec.Config.ProvidersEntry
	15, // 6: security.policy.gloo.solo.io.JWTPolicySpec.Config.phase:type_name -> common.gloo.solo.io.PrioritizedPhase
	5,  // 7: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.token_source:type_name -> security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.TokenSource
	6,  // 8: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.local:type_name -> security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.LocalJWKS
	7,  // 9: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.remote:type_name -> security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.RemoteJWKS
	8,  // 10: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.claims_to_headers:type_name -> security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.ClaimsToHeader
	16, // 11: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.clock_skew_seconds:type_name -> google.protobuf.UInt32Value
	3,  // 12: security.policy.gloo.solo.io.JWTPolicySpec.Config.ProvidersEntry.value:type_name -> security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider
	9,  // 13: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.TokenSource.headers:type_name -> security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.TokenSource.fromHeader
	10, // 14: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.LocalJWKS.secret_ref:type_name -> security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.LocalJWKS.SecretRef
	17, // 15: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.RemoteJWKS.destination_ref:type_name -> common.gloo.solo.io.DestinationReference
	18, // 16: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.RemoteJWKS.cache_duration:type_name -> google.protobuf.Duration
	18, // 17: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.RemoteJWKS.timeout:type_name -> google.protobuf.Duration
	19, // 18: security.policy.gloo.solo.io.JWTPolicySpec.Config.Provider.LocalJWKS.SecretRef.objectRef:type_name -> common.gloo.solo.io.ObjectReference
	20, // 19: security.policy.gloo.solo.io.JWTPolicyStatus.WorkspacesEntry.value:type_name -> common.gloo.solo.io.WorkspaceStatus
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_init()
}
func file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_init() {
	if File_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicyStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicySpec_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicySpec_Config_Provider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicySpec_Config_Provider_TokenSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicySpec_Config_Provider_LocalJWKS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicySpec_Config_Provider_RemoteJWKS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicySpec_Config_Provider_ClaimsToHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicySpec_Config_Provider_TokenSourceFromHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*JWTPolicySpec_Config_Provider_Local)(nil),
		(*JWTPolicySpec_Config_Provider_Remote)(nil),
	}
	file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*JWTPolicySpec_Config_Provider_LocalJWKS_SecretRef_)(nil),
		(*JWTPolicySpec_Config_Provider_LocalJWKS_Inline)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto = out.File
	file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_rawDesc = nil
	file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_goTypes = nil
	file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_policy_v2_security_jwt_policy_proto_depIdxs = nil
}
