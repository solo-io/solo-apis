// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/policy/v2/security/tls/ca_options.proto

package tls

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_golang_protobuf_ptypes_empty "github.com/golang/protobuf/ptypes/empty"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *CommonCertOptions) Clone() proto.Message {
	var target *CommonCertOptions
	if m == nil {
		return target
	}
	target = &CommonCertOptions{}

	target.TtlDays = m.GetTtlDays()

	target.RsaKeySizeBytes = m.GetRsaKeySizeBytes()

	target.OrgName = m.GetOrgName()

	target.SecretRotationGracePeriodRatio = m.GetSecretRotationGracePeriodRatio()

	return target
}

// Clone function
func (m *AgentCertificateAuthority) Clone() proto.Message {
	var target *AgentCertificateAuthority
	if m == nil {
		return target
	}
	target = &AgentCertificateAuthority{}

	switch m.CaSource.(type) {

	case *AgentCertificateAuthority_Vault:

		if h, ok := interface{}(m.GetVault()).(clone.Cloner); ok {
			target.CaSource = &AgentCertificateAuthority_Vault{
				Vault: h.Clone().(*VaultCA),
			}
		} else {
			target.CaSource = &AgentCertificateAuthority_Vault{
				Vault: proto.Clone(m.GetVault()).(*VaultCA),
			}
		}

	}

	return target
}

// Clone function
func (m *CertificateRotationVerificationMethod) Clone() proto.Message {
	var target *CertificateRotationVerificationMethod
	if m == nil {
		return target
	}
	target = &CertificateRotationVerificationMethod{}

	switch m.Method.(type) {

	case *CertificateRotationVerificationMethod_None:

		if h, ok := interface{}(m.GetNone()).(clone.Cloner); ok {
			target.Method = &CertificateRotationVerificationMethod_None{
				None: h.Clone().(*github_com_golang_protobuf_ptypes_empty.Empty),
			}
		} else {
			target.Method = &CertificateRotationVerificationMethod_None{
				None: proto.Clone(m.GetNone()).(*github_com_golang_protobuf_ptypes_empty.Empty),
			}
		}

	case *CertificateRotationVerificationMethod_Manual:

		if h, ok := interface{}(m.GetManual()).(clone.Cloner); ok {
			target.Method = &CertificateRotationVerificationMethod_Manual{
				Manual: h.Clone().(*github_com_golang_protobuf_ptypes_empty.Empty),
			}
		} else {
			target.Method = &CertificateRotationVerificationMethod_Manual{
				Manual: proto.Clone(m.GetManual()).(*github_com_golang_protobuf_ptypes_empty.Empty),
			}
		}

	}

	return target
}

// Clone function
func (m *CertificateRotationCondition) Clone() proto.Message {
	var target *CertificateRotationCondition
	if m == nil {
		return target
	}
	target = &CertificateRotationCondition{}

	target.Timestamp = m.GetTimestamp()

	target.State = m.GetState()

	target.Message = m.GetMessage()

	if m.GetErrors() != nil {
		target.Errors = make([]string, len(m.GetErrors()))
		for idx, v := range m.GetErrors() {

			target.Errors[idx] = v

		}
	}

	return target
}
