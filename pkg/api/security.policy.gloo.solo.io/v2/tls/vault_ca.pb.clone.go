// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/policy/v2/security/tls/vault_ca.proto

package tls

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *VaultCA) Clone() proto.Message {
	var target *VaultCA
	if m == nil {
		return target
	}
	target = &VaultCA{}

	target.CaPath = m.GetCaPath()

	target.CsrPath = m.GetCsrPath()

	target.Server = m.GetServer()

	target.Namespace = m.GetNamespace()

	switch m.CaSource.(type) {

	case *VaultCA_CaBundle:

		if m.GetCaBundle() != nil {
			newArr := make([]byte, len(m.GetCaBundle()))
			copy(newArr, m.GetCaBundle())
			target.CaSource = &VaultCA_CaBundle{
				CaBundle: newArr,
			}
		} else {
			target.CaSource = &VaultCA_CaBundle{
				CaBundle: nil,
			}
		}

	case *VaultCA_CaSecretRef:

		if h, ok := interface{}(m.GetCaSecretRef()).(clone.Cloner); ok {
			target.CaSource = &VaultCA_CaSecretRef{
				CaSecretRef: h.Clone().(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ObjectRef),
			}
		} else {
			target.CaSource = &VaultCA_CaSecretRef{
				CaSecretRef: proto.Clone(m.GetCaSecretRef()).(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ObjectRef),
			}
		}

	case *VaultCA_CaLocalPath:

		target.CaSource = &VaultCA_CaLocalPath{
			CaLocalPath: m.GetCaLocalPath(),
		}

	}

	switch m.AuthType.(type) {

	case *VaultCA_TokenSecretRef:

		if h, ok := interface{}(m.GetTokenSecretRef()).(clone.Cloner); ok {
			target.AuthType = &VaultCA_TokenSecretRef{
				TokenSecretRef: h.Clone().(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ObjectRef),
			}
		} else {
			target.AuthType = &VaultCA_TokenSecretRef{
				TokenSecretRef: proto.Clone(m.GetTokenSecretRef()).(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ObjectRef),
			}
		}

	case *VaultCA_KubernetesAuth:

		if h, ok := interface{}(m.GetKubernetesAuth()).(clone.Cloner); ok {
			target.AuthType = &VaultCA_KubernetesAuth{
				KubernetesAuth: h.Clone().(*VaultKubernetesAuth),
			}
		} else {
			target.AuthType = &VaultCA_KubernetesAuth{
				KubernetesAuth: proto.Clone(m.GetKubernetesAuth()).(*VaultKubernetesAuth),
			}
		}

	}

	return target
}

// Clone function
func (m *VaultKubernetesAuth) Clone() proto.Message {
	var target *VaultKubernetesAuth
	if m == nil {
		return target
	}
	target = &VaultKubernetesAuth{}

	target.MountPath = m.GetMountPath()

	target.Role = m.GetRole()

	target.SecretTokenKey = m.GetSecretTokenKey()

	switch m.ServiceAccountLocation.(type) {

	case *VaultKubernetesAuth_ServiceAccountRef:

		if h, ok := interface{}(m.GetServiceAccountRef()).(clone.Cloner); ok {
			target.ServiceAccountLocation = &VaultKubernetesAuth_ServiceAccountRef{
				ServiceAccountRef: h.Clone().(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ObjectRef),
			}
		} else {
			target.ServiceAccountLocation = &VaultKubernetesAuth_ServiceAccountRef{
				ServiceAccountRef: proto.Clone(m.GetServiceAccountRef()).(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.ObjectRef),
			}
		}

	case *VaultKubernetesAuth_MountedSaPath:

		target.ServiceAccountLocation = &VaultKubernetesAuth_MountedSaPath{
			MountedSaPath: m.GetMountedSaPath(),
		}

	}

	return target
}
