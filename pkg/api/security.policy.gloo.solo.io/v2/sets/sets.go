// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v2sets

import (
	security_policy_gloo_solo_io_v2 "github.com/solo-io/solo-apis/pkg/api/security.policy.gloo.solo.io/v2"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type AccessPolicySet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*security_policy_gloo_solo_io_v2.AccessPolicy) bool) []*security_policy_gloo_solo_io_v2.AccessPolicy
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*security_policy_gloo_solo_io_v2.AccessPolicy) bool) []*security_policy_gloo_solo_io_v2.AccessPolicy
	// Return the Set as a map of key to resource.
	Map() map[string]*security_policy_gloo_solo_io_v2.AccessPolicy
	// Insert a resource into the set.
	Insert(accessPolicy ...*security_policy_gloo_solo_io_v2.AccessPolicy)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(accessPolicySet AccessPolicySet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(accessPolicy ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(accessPolicy ezkube.ResourceId)
	// Return the union with the provided set
	Union(set AccessPolicySet) AccessPolicySet
	// Return the difference with the provided set
	Difference(set AccessPolicySet) AccessPolicySet
	// Return the intersection with the provided set
	Intersection(set AccessPolicySet) AccessPolicySet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*security_policy_gloo_solo_io_v2.AccessPolicy, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another AccessPolicySet
	Delta(newSet AccessPolicySet) sksets.ResourceDelta
	// Create a deep copy of the current AccessPolicySet
	Clone() AccessPolicySet
}

func makeGenericAccessPolicySet(accessPolicyList []*security_policy_gloo_solo_io_v2.AccessPolicy) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range accessPolicyList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type accessPolicySet struct {
	set sksets.ResourceSet
}

func NewAccessPolicySet(accessPolicyList ...*security_policy_gloo_solo_io_v2.AccessPolicy) AccessPolicySet {
	return &accessPolicySet{set: makeGenericAccessPolicySet(accessPolicyList)}
}

func NewAccessPolicySetFromList(accessPolicyList *security_policy_gloo_solo_io_v2.AccessPolicyList) AccessPolicySet {
	list := make([]*security_policy_gloo_solo_io_v2.AccessPolicy, 0, len(accessPolicyList.Items))
	for idx := range accessPolicyList.Items {
		list = append(list, &accessPolicyList.Items[idx])
	}
	return &accessPolicySet{set: makeGenericAccessPolicySet(list)}
}

func (s *accessPolicySet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *accessPolicySet) List(filterResource ...func(*security_policy_gloo_solo_io_v2.AccessPolicy) bool) []*security_policy_gloo_solo_io_v2.AccessPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*security_policy_gloo_solo_io_v2.AccessPolicy))
		})
	}

	objs := s.Generic().List(genericFilters...)
	accessPolicyList := make([]*security_policy_gloo_solo_io_v2.AccessPolicy, 0, len(objs))
	for _, obj := range objs {
		accessPolicyList = append(accessPolicyList, obj.(*security_policy_gloo_solo_io_v2.AccessPolicy))
	}
	return accessPolicyList
}

func (s *accessPolicySet) UnsortedList(filterResource ...func(*security_policy_gloo_solo_io_v2.AccessPolicy) bool) []*security_policy_gloo_solo_io_v2.AccessPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*security_policy_gloo_solo_io_v2.AccessPolicy))
		})
	}

	var accessPolicyList []*security_policy_gloo_solo_io_v2.AccessPolicy
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		accessPolicyList = append(accessPolicyList, obj.(*security_policy_gloo_solo_io_v2.AccessPolicy))
	}
	return accessPolicyList
}

func (s *accessPolicySet) Map() map[string]*security_policy_gloo_solo_io_v2.AccessPolicy {
	if s == nil {
		return nil
	}

	newMap := map[string]*security_policy_gloo_solo_io_v2.AccessPolicy{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*security_policy_gloo_solo_io_v2.AccessPolicy)
	}
	return newMap
}

func (s *accessPolicySet) Insert(
	accessPolicyList ...*security_policy_gloo_solo_io_v2.AccessPolicy,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range accessPolicyList {
		s.Generic().Insert(obj)
	}
}

func (s *accessPolicySet) Has(accessPolicy ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(accessPolicy)
}

func (s *accessPolicySet) Equal(
	accessPolicySet AccessPolicySet,
) bool {
	if s == nil {
		return accessPolicySet == nil
	}
	return s.Generic().Equal(accessPolicySet.Generic())
}

func (s *accessPolicySet) Delete(AccessPolicy ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(AccessPolicy)
}

func (s *accessPolicySet) Union(set AccessPolicySet) AccessPolicySet {
	if s == nil {
		return set
	}
	return NewAccessPolicySet(append(s.List(), set.List()...)...)
}

func (s *accessPolicySet) Difference(set AccessPolicySet) AccessPolicySet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &accessPolicySet{set: newSet}
}

func (s *accessPolicySet) Intersection(set AccessPolicySet) AccessPolicySet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var accessPolicyList []*security_policy_gloo_solo_io_v2.AccessPolicy
	for _, obj := range newSet.List() {
		accessPolicyList = append(accessPolicyList, obj.(*security_policy_gloo_solo_io_v2.AccessPolicy))
	}
	return NewAccessPolicySet(accessPolicyList...)
}

func (s *accessPolicySet) Find(id ezkube.ResourceId) (*security_policy_gloo_solo_io_v2.AccessPolicy, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find AccessPolicy %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&security_policy_gloo_solo_io_v2.AccessPolicy{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*security_policy_gloo_solo_io_v2.AccessPolicy), nil
}

func (s *accessPolicySet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *accessPolicySet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *accessPolicySet) Delta(newSet AccessPolicySet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *accessPolicySet) Clone() AccessPolicySet {
	if s == nil {
		return nil
	}
	return &accessPolicySet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type CORSPolicySet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*security_policy_gloo_solo_io_v2.CORSPolicy) bool) []*security_policy_gloo_solo_io_v2.CORSPolicy
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*security_policy_gloo_solo_io_v2.CORSPolicy) bool) []*security_policy_gloo_solo_io_v2.CORSPolicy
	// Return the Set as a map of key to resource.
	Map() map[string]*security_policy_gloo_solo_io_v2.CORSPolicy
	// Insert a resource into the set.
	Insert(cORSPolicy ...*security_policy_gloo_solo_io_v2.CORSPolicy)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(cORSPolicySet CORSPolicySet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(cORSPolicy ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(cORSPolicy ezkube.ResourceId)
	// Return the union with the provided set
	Union(set CORSPolicySet) CORSPolicySet
	// Return the difference with the provided set
	Difference(set CORSPolicySet) CORSPolicySet
	// Return the intersection with the provided set
	Intersection(set CORSPolicySet) CORSPolicySet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*security_policy_gloo_solo_io_v2.CORSPolicy, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another CORSPolicySet
	Delta(newSet CORSPolicySet) sksets.ResourceDelta
	// Create a deep copy of the current CORSPolicySet
	Clone() CORSPolicySet
}

func makeGenericCORSPolicySet(cORSPolicyList []*security_policy_gloo_solo_io_v2.CORSPolicy) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range cORSPolicyList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type cORSPolicySet struct {
	set sksets.ResourceSet
}

func NewCORSPolicySet(cORSPolicyList ...*security_policy_gloo_solo_io_v2.CORSPolicy) CORSPolicySet {
	return &cORSPolicySet{set: makeGenericCORSPolicySet(cORSPolicyList)}
}

func NewCORSPolicySetFromList(cORSPolicyList *security_policy_gloo_solo_io_v2.CORSPolicyList) CORSPolicySet {
	list := make([]*security_policy_gloo_solo_io_v2.CORSPolicy, 0, len(cORSPolicyList.Items))
	for idx := range cORSPolicyList.Items {
		list = append(list, &cORSPolicyList.Items[idx])
	}
	return &cORSPolicySet{set: makeGenericCORSPolicySet(list)}
}

func (s *cORSPolicySet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *cORSPolicySet) List(filterResource ...func(*security_policy_gloo_solo_io_v2.CORSPolicy) bool) []*security_policy_gloo_solo_io_v2.CORSPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*security_policy_gloo_solo_io_v2.CORSPolicy))
		})
	}

	objs := s.Generic().List(genericFilters...)
	cORSPolicyList := make([]*security_policy_gloo_solo_io_v2.CORSPolicy, 0, len(objs))
	for _, obj := range objs {
		cORSPolicyList = append(cORSPolicyList, obj.(*security_policy_gloo_solo_io_v2.CORSPolicy))
	}
	return cORSPolicyList
}

func (s *cORSPolicySet) UnsortedList(filterResource ...func(*security_policy_gloo_solo_io_v2.CORSPolicy) bool) []*security_policy_gloo_solo_io_v2.CORSPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*security_policy_gloo_solo_io_v2.CORSPolicy))
		})
	}

	var cORSPolicyList []*security_policy_gloo_solo_io_v2.CORSPolicy
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		cORSPolicyList = append(cORSPolicyList, obj.(*security_policy_gloo_solo_io_v2.CORSPolicy))
	}
	return cORSPolicyList
}

func (s *cORSPolicySet) Map() map[string]*security_policy_gloo_solo_io_v2.CORSPolicy {
	if s == nil {
		return nil
	}

	newMap := map[string]*security_policy_gloo_solo_io_v2.CORSPolicy{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*security_policy_gloo_solo_io_v2.CORSPolicy)
	}
	return newMap
}

func (s *cORSPolicySet) Insert(
	cORSPolicyList ...*security_policy_gloo_solo_io_v2.CORSPolicy,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range cORSPolicyList {
		s.Generic().Insert(obj)
	}
}

func (s *cORSPolicySet) Has(cORSPolicy ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(cORSPolicy)
}

func (s *cORSPolicySet) Equal(
	cORSPolicySet CORSPolicySet,
) bool {
	if s == nil {
		return cORSPolicySet == nil
	}
	return s.Generic().Equal(cORSPolicySet.Generic())
}

func (s *cORSPolicySet) Delete(CORSPolicy ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(CORSPolicy)
}

func (s *cORSPolicySet) Union(set CORSPolicySet) CORSPolicySet {
	if s == nil {
		return set
	}
	return NewCORSPolicySet(append(s.List(), set.List()...)...)
}

func (s *cORSPolicySet) Difference(set CORSPolicySet) CORSPolicySet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &cORSPolicySet{set: newSet}
}

func (s *cORSPolicySet) Intersection(set CORSPolicySet) CORSPolicySet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var cORSPolicyList []*security_policy_gloo_solo_io_v2.CORSPolicy
	for _, obj := range newSet.List() {
		cORSPolicyList = append(cORSPolicyList, obj.(*security_policy_gloo_solo_io_v2.CORSPolicy))
	}
	return NewCORSPolicySet(cORSPolicyList...)
}

func (s *cORSPolicySet) Find(id ezkube.ResourceId) (*security_policy_gloo_solo_io_v2.CORSPolicy, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find CORSPolicy %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&security_policy_gloo_solo_io_v2.CORSPolicy{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*security_policy_gloo_solo_io_v2.CORSPolicy), nil
}

func (s *cORSPolicySet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *cORSPolicySet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *cORSPolicySet) Delta(newSet CORSPolicySet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *cORSPolicySet) Clone() CORSPolicySet {
	if s == nil {
		return nil
	}
	return &cORSPolicySet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type CSRFPolicySet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*security_policy_gloo_solo_io_v2.CSRFPolicy) bool) []*security_policy_gloo_solo_io_v2.CSRFPolicy
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*security_policy_gloo_solo_io_v2.CSRFPolicy) bool) []*security_policy_gloo_solo_io_v2.CSRFPolicy
	// Return the Set as a map of key to resource.
	Map() map[string]*security_policy_gloo_solo_io_v2.CSRFPolicy
	// Insert a resource into the set.
	Insert(cSRFPolicy ...*security_policy_gloo_solo_io_v2.CSRFPolicy)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(cSRFPolicySet CSRFPolicySet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(cSRFPolicy ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(cSRFPolicy ezkube.ResourceId)
	// Return the union with the provided set
	Union(set CSRFPolicySet) CSRFPolicySet
	// Return the difference with the provided set
	Difference(set CSRFPolicySet) CSRFPolicySet
	// Return the intersection with the provided set
	Intersection(set CSRFPolicySet) CSRFPolicySet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*security_policy_gloo_solo_io_v2.CSRFPolicy, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another CSRFPolicySet
	Delta(newSet CSRFPolicySet) sksets.ResourceDelta
	// Create a deep copy of the current CSRFPolicySet
	Clone() CSRFPolicySet
}

func makeGenericCSRFPolicySet(cSRFPolicyList []*security_policy_gloo_solo_io_v2.CSRFPolicy) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range cSRFPolicyList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type cSRFPolicySet struct {
	set sksets.ResourceSet
}

func NewCSRFPolicySet(cSRFPolicyList ...*security_policy_gloo_solo_io_v2.CSRFPolicy) CSRFPolicySet {
	return &cSRFPolicySet{set: makeGenericCSRFPolicySet(cSRFPolicyList)}
}

func NewCSRFPolicySetFromList(cSRFPolicyList *security_policy_gloo_solo_io_v2.CSRFPolicyList) CSRFPolicySet {
	list := make([]*security_policy_gloo_solo_io_v2.CSRFPolicy, 0, len(cSRFPolicyList.Items))
	for idx := range cSRFPolicyList.Items {
		list = append(list, &cSRFPolicyList.Items[idx])
	}
	return &cSRFPolicySet{set: makeGenericCSRFPolicySet(list)}
}

func (s *cSRFPolicySet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *cSRFPolicySet) List(filterResource ...func(*security_policy_gloo_solo_io_v2.CSRFPolicy) bool) []*security_policy_gloo_solo_io_v2.CSRFPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*security_policy_gloo_solo_io_v2.CSRFPolicy))
		})
	}

	objs := s.Generic().List(genericFilters...)
	cSRFPolicyList := make([]*security_policy_gloo_solo_io_v2.CSRFPolicy, 0, len(objs))
	for _, obj := range objs {
		cSRFPolicyList = append(cSRFPolicyList, obj.(*security_policy_gloo_solo_io_v2.CSRFPolicy))
	}
	return cSRFPolicyList
}

func (s *cSRFPolicySet) UnsortedList(filterResource ...func(*security_policy_gloo_solo_io_v2.CSRFPolicy) bool) []*security_policy_gloo_solo_io_v2.CSRFPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*security_policy_gloo_solo_io_v2.CSRFPolicy))
		})
	}

	var cSRFPolicyList []*security_policy_gloo_solo_io_v2.CSRFPolicy
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		cSRFPolicyList = append(cSRFPolicyList, obj.(*security_policy_gloo_solo_io_v2.CSRFPolicy))
	}
	return cSRFPolicyList
}

func (s *cSRFPolicySet) Map() map[string]*security_policy_gloo_solo_io_v2.CSRFPolicy {
	if s == nil {
		return nil
	}

	newMap := map[string]*security_policy_gloo_solo_io_v2.CSRFPolicy{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*security_policy_gloo_solo_io_v2.CSRFPolicy)
	}
	return newMap
}

func (s *cSRFPolicySet) Insert(
	cSRFPolicyList ...*security_policy_gloo_solo_io_v2.CSRFPolicy,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range cSRFPolicyList {
		s.Generic().Insert(obj)
	}
}

func (s *cSRFPolicySet) Has(cSRFPolicy ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(cSRFPolicy)
}

func (s *cSRFPolicySet) Equal(
	cSRFPolicySet CSRFPolicySet,
) bool {
	if s == nil {
		return cSRFPolicySet == nil
	}
	return s.Generic().Equal(cSRFPolicySet.Generic())
}

func (s *cSRFPolicySet) Delete(CSRFPolicy ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(CSRFPolicy)
}

func (s *cSRFPolicySet) Union(set CSRFPolicySet) CSRFPolicySet {
	if s == nil {
		return set
	}
	return NewCSRFPolicySet(append(s.List(), set.List()...)...)
}

func (s *cSRFPolicySet) Difference(set CSRFPolicySet) CSRFPolicySet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &cSRFPolicySet{set: newSet}
}

func (s *cSRFPolicySet) Intersection(set CSRFPolicySet) CSRFPolicySet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var cSRFPolicyList []*security_policy_gloo_solo_io_v2.CSRFPolicy
	for _, obj := range newSet.List() {
		cSRFPolicyList = append(cSRFPolicyList, obj.(*security_policy_gloo_solo_io_v2.CSRFPolicy))
	}
	return NewCSRFPolicySet(cSRFPolicyList...)
}

func (s *cSRFPolicySet) Find(id ezkube.ResourceId) (*security_policy_gloo_solo_io_v2.CSRFPolicy, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find CSRFPolicy %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&security_policy_gloo_solo_io_v2.CSRFPolicy{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*security_policy_gloo_solo_io_v2.CSRFPolicy), nil
}

func (s *cSRFPolicySet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *cSRFPolicySet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *cSRFPolicySet) Delta(newSet CSRFPolicySet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *cSRFPolicySet) Clone() CSRFPolicySet {
	if s == nil {
		return nil
	}
	return &cSRFPolicySet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type ExtAuthPolicySet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*security_policy_gloo_solo_io_v2.ExtAuthPolicy) bool) []*security_policy_gloo_solo_io_v2.ExtAuthPolicy
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*security_policy_gloo_solo_io_v2.ExtAuthPolicy) bool) []*security_policy_gloo_solo_io_v2.ExtAuthPolicy
	// Return the Set as a map of key to resource.
	Map() map[string]*security_policy_gloo_solo_io_v2.ExtAuthPolicy
	// Insert a resource into the set.
	Insert(extAuthPolicy ...*security_policy_gloo_solo_io_v2.ExtAuthPolicy)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(extAuthPolicySet ExtAuthPolicySet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(extAuthPolicy ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(extAuthPolicy ezkube.ResourceId)
	// Return the union with the provided set
	Union(set ExtAuthPolicySet) ExtAuthPolicySet
	// Return the difference with the provided set
	Difference(set ExtAuthPolicySet) ExtAuthPolicySet
	// Return the intersection with the provided set
	Intersection(set ExtAuthPolicySet) ExtAuthPolicySet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*security_policy_gloo_solo_io_v2.ExtAuthPolicy, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another ExtAuthPolicySet
	Delta(newSet ExtAuthPolicySet) sksets.ResourceDelta
	// Create a deep copy of the current ExtAuthPolicySet
	Clone() ExtAuthPolicySet
}

func makeGenericExtAuthPolicySet(extAuthPolicyList []*security_policy_gloo_solo_io_v2.ExtAuthPolicy) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range extAuthPolicyList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type extAuthPolicySet struct {
	set sksets.ResourceSet
}

func NewExtAuthPolicySet(extAuthPolicyList ...*security_policy_gloo_solo_io_v2.ExtAuthPolicy) ExtAuthPolicySet {
	return &extAuthPolicySet{set: makeGenericExtAuthPolicySet(extAuthPolicyList)}
}

func NewExtAuthPolicySetFromList(extAuthPolicyList *security_policy_gloo_solo_io_v2.ExtAuthPolicyList) ExtAuthPolicySet {
	list := make([]*security_policy_gloo_solo_io_v2.ExtAuthPolicy, 0, len(extAuthPolicyList.Items))
	for idx := range extAuthPolicyList.Items {
		list = append(list, &extAuthPolicyList.Items[idx])
	}
	return &extAuthPolicySet{set: makeGenericExtAuthPolicySet(list)}
}

func (s *extAuthPolicySet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *extAuthPolicySet) List(filterResource ...func(*security_policy_gloo_solo_io_v2.ExtAuthPolicy) bool) []*security_policy_gloo_solo_io_v2.ExtAuthPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*security_policy_gloo_solo_io_v2.ExtAuthPolicy))
		})
	}

	objs := s.Generic().List(genericFilters...)
	extAuthPolicyList := make([]*security_policy_gloo_solo_io_v2.ExtAuthPolicy, 0, len(objs))
	for _, obj := range objs {
		extAuthPolicyList = append(extAuthPolicyList, obj.(*security_policy_gloo_solo_io_v2.ExtAuthPolicy))
	}
	return extAuthPolicyList
}

func (s *extAuthPolicySet) UnsortedList(filterResource ...func(*security_policy_gloo_solo_io_v2.ExtAuthPolicy) bool) []*security_policy_gloo_solo_io_v2.ExtAuthPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*security_policy_gloo_solo_io_v2.ExtAuthPolicy))
		})
	}

	var extAuthPolicyList []*security_policy_gloo_solo_io_v2.ExtAuthPolicy
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		extAuthPolicyList = append(extAuthPolicyList, obj.(*security_policy_gloo_solo_io_v2.ExtAuthPolicy))
	}
	return extAuthPolicyList
}

func (s *extAuthPolicySet) Map() map[string]*security_policy_gloo_solo_io_v2.ExtAuthPolicy {
	if s == nil {
		return nil
	}

	newMap := map[string]*security_policy_gloo_solo_io_v2.ExtAuthPolicy{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*security_policy_gloo_solo_io_v2.ExtAuthPolicy)
	}
	return newMap
}

func (s *extAuthPolicySet) Insert(
	extAuthPolicyList ...*security_policy_gloo_solo_io_v2.ExtAuthPolicy,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range extAuthPolicyList {
		s.Generic().Insert(obj)
	}
}

func (s *extAuthPolicySet) Has(extAuthPolicy ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(extAuthPolicy)
}

func (s *extAuthPolicySet) Equal(
	extAuthPolicySet ExtAuthPolicySet,
) bool {
	if s == nil {
		return extAuthPolicySet == nil
	}
	return s.Generic().Equal(extAuthPolicySet.Generic())
}

func (s *extAuthPolicySet) Delete(ExtAuthPolicy ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(ExtAuthPolicy)
}

func (s *extAuthPolicySet) Union(set ExtAuthPolicySet) ExtAuthPolicySet {
	if s == nil {
		return set
	}
	return NewExtAuthPolicySet(append(s.List(), set.List()...)...)
}

func (s *extAuthPolicySet) Difference(set ExtAuthPolicySet) ExtAuthPolicySet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &extAuthPolicySet{set: newSet}
}

func (s *extAuthPolicySet) Intersection(set ExtAuthPolicySet) ExtAuthPolicySet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var extAuthPolicyList []*security_policy_gloo_solo_io_v2.ExtAuthPolicy
	for _, obj := range newSet.List() {
		extAuthPolicyList = append(extAuthPolicyList, obj.(*security_policy_gloo_solo_io_v2.ExtAuthPolicy))
	}
	return NewExtAuthPolicySet(extAuthPolicyList...)
}

func (s *extAuthPolicySet) Find(id ezkube.ResourceId) (*security_policy_gloo_solo_io_v2.ExtAuthPolicy, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find ExtAuthPolicy %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&security_policy_gloo_solo_io_v2.ExtAuthPolicy{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*security_policy_gloo_solo_io_v2.ExtAuthPolicy), nil
}

func (s *extAuthPolicySet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *extAuthPolicySet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *extAuthPolicySet) Delta(newSet ExtAuthPolicySet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *extAuthPolicySet) Clone() ExtAuthPolicySet {
	if s == nil {
		return nil
	}
	return &extAuthPolicySet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type WAFPolicySet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*security_policy_gloo_solo_io_v2.WAFPolicy) bool) []*security_policy_gloo_solo_io_v2.WAFPolicy
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*security_policy_gloo_solo_io_v2.WAFPolicy) bool) []*security_policy_gloo_solo_io_v2.WAFPolicy
	// Return the Set as a map of key to resource.
	Map() map[string]*security_policy_gloo_solo_io_v2.WAFPolicy
	// Insert a resource into the set.
	Insert(wAFPolicy ...*security_policy_gloo_solo_io_v2.WAFPolicy)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(wAFPolicySet WAFPolicySet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(wAFPolicy ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(wAFPolicy ezkube.ResourceId)
	// Return the union with the provided set
	Union(set WAFPolicySet) WAFPolicySet
	// Return the difference with the provided set
	Difference(set WAFPolicySet) WAFPolicySet
	// Return the intersection with the provided set
	Intersection(set WAFPolicySet) WAFPolicySet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*security_policy_gloo_solo_io_v2.WAFPolicy, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another WAFPolicySet
	Delta(newSet WAFPolicySet) sksets.ResourceDelta
	// Create a deep copy of the current WAFPolicySet
	Clone() WAFPolicySet
}

func makeGenericWAFPolicySet(wAFPolicyList []*security_policy_gloo_solo_io_v2.WAFPolicy) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range wAFPolicyList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type wAFPolicySet struct {
	set sksets.ResourceSet
}

func NewWAFPolicySet(wAFPolicyList ...*security_policy_gloo_solo_io_v2.WAFPolicy) WAFPolicySet {
	return &wAFPolicySet{set: makeGenericWAFPolicySet(wAFPolicyList)}
}

func NewWAFPolicySetFromList(wAFPolicyList *security_policy_gloo_solo_io_v2.WAFPolicyList) WAFPolicySet {
	list := make([]*security_policy_gloo_solo_io_v2.WAFPolicy, 0, len(wAFPolicyList.Items))
	for idx := range wAFPolicyList.Items {
		list = append(list, &wAFPolicyList.Items[idx])
	}
	return &wAFPolicySet{set: makeGenericWAFPolicySet(list)}
}

func (s *wAFPolicySet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *wAFPolicySet) List(filterResource ...func(*security_policy_gloo_solo_io_v2.WAFPolicy) bool) []*security_policy_gloo_solo_io_v2.WAFPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*security_policy_gloo_solo_io_v2.WAFPolicy))
		})
	}

	objs := s.Generic().List(genericFilters...)
	wAFPolicyList := make([]*security_policy_gloo_solo_io_v2.WAFPolicy, 0, len(objs))
	for _, obj := range objs {
		wAFPolicyList = append(wAFPolicyList, obj.(*security_policy_gloo_solo_io_v2.WAFPolicy))
	}
	return wAFPolicyList
}

func (s *wAFPolicySet) UnsortedList(filterResource ...func(*security_policy_gloo_solo_io_v2.WAFPolicy) bool) []*security_policy_gloo_solo_io_v2.WAFPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*security_policy_gloo_solo_io_v2.WAFPolicy))
		})
	}

	var wAFPolicyList []*security_policy_gloo_solo_io_v2.WAFPolicy
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		wAFPolicyList = append(wAFPolicyList, obj.(*security_policy_gloo_solo_io_v2.WAFPolicy))
	}
	return wAFPolicyList
}

func (s *wAFPolicySet) Map() map[string]*security_policy_gloo_solo_io_v2.WAFPolicy {
	if s == nil {
		return nil
	}

	newMap := map[string]*security_policy_gloo_solo_io_v2.WAFPolicy{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*security_policy_gloo_solo_io_v2.WAFPolicy)
	}
	return newMap
}

func (s *wAFPolicySet) Insert(
	wAFPolicyList ...*security_policy_gloo_solo_io_v2.WAFPolicy,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range wAFPolicyList {
		s.Generic().Insert(obj)
	}
}

func (s *wAFPolicySet) Has(wAFPolicy ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(wAFPolicy)
}

func (s *wAFPolicySet) Equal(
	wAFPolicySet WAFPolicySet,
) bool {
	if s == nil {
		return wAFPolicySet == nil
	}
	return s.Generic().Equal(wAFPolicySet.Generic())
}

func (s *wAFPolicySet) Delete(WAFPolicy ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(WAFPolicy)
}

func (s *wAFPolicySet) Union(set WAFPolicySet) WAFPolicySet {
	if s == nil {
		return set
	}
	return NewWAFPolicySet(append(s.List(), set.List()...)...)
}

func (s *wAFPolicySet) Difference(set WAFPolicySet) WAFPolicySet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &wAFPolicySet{set: newSet}
}

func (s *wAFPolicySet) Intersection(set WAFPolicySet) WAFPolicySet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var wAFPolicyList []*security_policy_gloo_solo_io_v2.WAFPolicy
	for _, obj := range newSet.List() {
		wAFPolicyList = append(wAFPolicyList, obj.(*security_policy_gloo_solo_io_v2.WAFPolicy))
	}
	return NewWAFPolicySet(wAFPolicyList...)
}

func (s *wAFPolicySet) Find(id ezkube.ResourceId) (*security_policy_gloo_solo_io_v2.WAFPolicy, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find WAFPolicy %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&security_policy_gloo_solo_io_v2.WAFPolicy{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*security_policy_gloo_solo_io_v2.WAFPolicy), nil
}

func (s *wAFPolicySet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *wAFPolicySet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *wAFPolicySet) Delta(newSet WAFPolicySet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *wAFPolicySet) Clone() WAFPolicySet {
	if s == nil {
		return nil
	}
	return &wAFPolicySet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type JWTPolicySet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*security_policy_gloo_solo_io_v2.JWTPolicy) bool) []*security_policy_gloo_solo_io_v2.JWTPolicy
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*security_policy_gloo_solo_io_v2.JWTPolicy) bool) []*security_policy_gloo_solo_io_v2.JWTPolicy
	// Return the Set as a map of key to resource.
	Map() map[string]*security_policy_gloo_solo_io_v2.JWTPolicy
	// Insert a resource into the set.
	Insert(jWTPolicy ...*security_policy_gloo_solo_io_v2.JWTPolicy)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(jWTPolicySet JWTPolicySet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(jWTPolicy ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(jWTPolicy ezkube.ResourceId)
	// Return the union with the provided set
	Union(set JWTPolicySet) JWTPolicySet
	// Return the difference with the provided set
	Difference(set JWTPolicySet) JWTPolicySet
	// Return the intersection with the provided set
	Intersection(set JWTPolicySet) JWTPolicySet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*security_policy_gloo_solo_io_v2.JWTPolicy, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another JWTPolicySet
	Delta(newSet JWTPolicySet) sksets.ResourceDelta
	// Create a deep copy of the current JWTPolicySet
	Clone() JWTPolicySet
}

func makeGenericJWTPolicySet(jWTPolicyList []*security_policy_gloo_solo_io_v2.JWTPolicy) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range jWTPolicyList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type jWTPolicySet struct {
	set sksets.ResourceSet
}

func NewJWTPolicySet(jWTPolicyList ...*security_policy_gloo_solo_io_v2.JWTPolicy) JWTPolicySet {
	return &jWTPolicySet{set: makeGenericJWTPolicySet(jWTPolicyList)}
}

func NewJWTPolicySetFromList(jWTPolicyList *security_policy_gloo_solo_io_v2.JWTPolicyList) JWTPolicySet {
	list := make([]*security_policy_gloo_solo_io_v2.JWTPolicy, 0, len(jWTPolicyList.Items))
	for idx := range jWTPolicyList.Items {
		list = append(list, &jWTPolicyList.Items[idx])
	}
	return &jWTPolicySet{set: makeGenericJWTPolicySet(list)}
}

func (s *jWTPolicySet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *jWTPolicySet) List(filterResource ...func(*security_policy_gloo_solo_io_v2.JWTPolicy) bool) []*security_policy_gloo_solo_io_v2.JWTPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*security_policy_gloo_solo_io_v2.JWTPolicy))
		})
	}

	objs := s.Generic().List(genericFilters...)
	jWTPolicyList := make([]*security_policy_gloo_solo_io_v2.JWTPolicy, 0, len(objs))
	for _, obj := range objs {
		jWTPolicyList = append(jWTPolicyList, obj.(*security_policy_gloo_solo_io_v2.JWTPolicy))
	}
	return jWTPolicyList
}

func (s *jWTPolicySet) UnsortedList(filterResource ...func(*security_policy_gloo_solo_io_v2.JWTPolicy) bool) []*security_policy_gloo_solo_io_v2.JWTPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*security_policy_gloo_solo_io_v2.JWTPolicy))
		})
	}

	var jWTPolicyList []*security_policy_gloo_solo_io_v2.JWTPolicy
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		jWTPolicyList = append(jWTPolicyList, obj.(*security_policy_gloo_solo_io_v2.JWTPolicy))
	}
	return jWTPolicyList
}

func (s *jWTPolicySet) Map() map[string]*security_policy_gloo_solo_io_v2.JWTPolicy {
	if s == nil {
		return nil
	}

	newMap := map[string]*security_policy_gloo_solo_io_v2.JWTPolicy{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*security_policy_gloo_solo_io_v2.JWTPolicy)
	}
	return newMap
}

func (s *jWTPolicySet) Insert(
	jWTPolicyList ...*security_policy_gloo_solo_io_v2.JWTPolicy,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range jWTPolicyList {
		s.Generic().Insert(obj)
	}
}

func (s *jWTPolicySet) Has(jWTPolicy ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(jWTPolicy)
}

func (s *jWTPolicySet) Equal(
	jWTPolicySet JWTPolicySet,
) bool {
	if s == nil {
		return jWTPolicySet == nil
	}
	return s.Generic().Equal(jWTPolicySet.Generic())
}

func (s *jWTPolicySet) Delete(JWTPolicy ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(JWTPolicy)
}

func (s *jWTPolicySet) Union(set JWTPolicySet) JWTPolicySet {
	if s == nil {
		return set
	}
	return NewJWTPolicySet(append(s.List(), set.List()...)...)
}

func (s *jWTPolicySet) Difference(set JWTPolicySet) JWTPolicySet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &jWTPolicySet{set: newSet}
}

func (s *jWTPolicySet) Intersection(set JWTPolicySet) JWTPolicySet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var jWTPolicyList []*security_policy_gloo_solo_io_v2.JWTPolicy
	for _, obj := range newSet.List() {
		jWTPolicyList = append(jWTPolicyList, obj.(*security_policy_gloo_solo_io_v2.JWTPolicy))
	}
	return NewJWTPolicySet(jWTPolicyList...)
}

func (s *jWTPolicySet) Find(id ezkube.ResourceId) (*security_policy_gloo_solo_io_v2.JWTPolicy, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find JWTPolicy %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&security_policy_gloo_solo_io_v2.JWTPolicy{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*security_policy_gloo_solo_io_v2.JWTPolicy), nil
}

func (s *jWTPolicySet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *jWTPolicySet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *jWTPolicySet) Delta(newSet JWTPolicySet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *jWTPolicySet) Clone() JWTPolicySet {
	if s == nil {
		return nil
	}
	return &jWTPolicySet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}
