// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	v2 "github.com/solo-io/solo-apis/pkg/api/security.policy.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/pkg/api/security.policy.gloo.solo.io/v2/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockAccessPolicyReconciler is a mock of AccessPolicyReconciler interface.
type MockAccessPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockAccessPolicyReconcilerMockRecorder
}

// MockAccessPolicyReconcilerMockRecorder is the mock recorder for MockAccessPolicyReconciler.
type MockAccessPolicyReconcilerMockRecorder struct {
	mock *MockAccessPolicyReconciler
}

// NewMockAccessPolicyReconciler creates a new mock instance.
func NewMockAccessPolicyReconciler(ctrl *gomock.Controller) *MockAccessPolicyReconciler {
	mock := &MockAccessPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockAccessPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessPolicyReconciler) EXPECT() *MockAccessPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileAccessPolicy mocks base method.
func (m *MockAccessPolicyReconciler) ReconcileAccessPolicy(obj *v2.AccessPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileAccessPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileAccessPolicy indicates an expected call of ReconcileAccessPolicy.
func (mr *MockAccessPolicyReconcilerMockRecorder) ReconcileAccessPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileAccessPolicy", reflect.TypeOf((*MockAccessPolicyReconciler)(nil).ReconcileAccessPolicy), obj)
}

// MockAccessPolicyDeletionReconciler is a mock of AccessPolicyDeletionReconciler interface.
type MockAccessPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockAccessPolicyDeletionReconcilerMockRecorder
}

// MockAccessPolicyDeletionReconcilerMockRecorder is the mock recorder for MockAccessPolicyDeletionReconciler.
type MockAccessPolicyDeletionReconcilerMockRecorder struct {
	mock *MockAccessPolicyDeletionReconciler
}

// NewMockAccessPolicyDeletionReconciler creates a new mock instance.
func NewMockAccessPolicyDeletionReconciler(ctrl *gomock.Controller) *MockAccessPolicyDeletionReconciler {
	mock := &MockAccessPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockAccessPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessPolicyDeletionReconciler) EXPECT() *MockAccessPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileAccessPolicyDeletion mocks base method.
func (m *MockAccessPolicyDeletionReconciler) ReconcileAccessPolicyDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileAccessPolicyDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileAccessPolicyDeletion indicates an expected call of ReconcileAccessPolicyDeletion.
func (mr *MockAccessPolicyDeletionReconcilerMockRecorder) ReconcileAccessPolicyDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileAccessPolicyDeletion", reflect.TypeOf((*MockAccessPolicyDeletionReconciler)(nil).ReconcileAccessPolicyDeletion), req)
}

// MockAccessPolicyFinalizer is a mock of AccessPolicyFinalizer interface.
type MockAccessPolicyFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockAccessPolicyFinalizerMockRecorder
}

// MockAccessPolicyFinalizerMockRecorder is the mock recorder for MockAccessPolicyFinalizer.
type MockAccessPolicyFinalizerMockRecorder struct {
	mock *MockAccessPolicyFinalizer
}

// NewMockAccessPolicyFinalizer creates a new mock instance.
func NewMockAccessPolicyFinalizer(ctrl *gomock.Controller) *MockAccessPolicyFinalizer {
	mock := &MockAccessPolicyFinalizer{ctrl: ctrl}
	mock.recorder = &MockAccessPolicyFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessPolicyFinalizer) EXPECT() *MockAccessPolicyFinalizerMockRecorder {
	return m.recorder
}

// AccessPolicyFinalizerName mocks base method.
func (m *MockAccessPolicyFinalizer) AccessPolicyFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessPolicyFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// AccessPolicyFinalizerName indicates an expected call of AccessPolicyFinalizerName.
func (mr *MockAccessPolicyFinalizerMockRecorder) AccessPolicyFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessPolicyFinalizerName", reflect.TypeOf((*MockAccessPolicyFinalizer)(nil).AccessPolicyFinalizerName))
}

// FinalizeAccessPolicy mocks base method.
func (m *MockAccessPolicyFinalizer) FinalizeAccessPolicy(obj *v2.AccessPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeAccessPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeAccessPolicy indicates an expected call of FinalizeAccessPolicy.
func (mr *MockAccessPolicyFinalizerMockRecorder) FinalizeAccessPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeAccessPolicy", reflect.TypeOf((*MockAccessPolicyFinalizer)(nil).FinalizeAccessPolicy), obj)
}

// ReconcileAccessPolicy mocks base method.
func (m *MockAccessPolicyFinalizer) ReconcileAccessPolicy(obj *v2.AccessPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileAccessPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileAccessPolicy indicates an expected call of ReconcileAccessPolicy.
func (mr *MockAccessPolicyFinalizerMockRecorder) ReconcileAccessPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileAccessPolicy", reflect.TypeOf((*MockAccessPolicyFinalizer)(nil).ReconcileAccessPolicy), obj)
}

// MockAccessPolicyReconcileLoop is a mock of AccessPolicyReconcileLoop interface.
type MockAccessPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockAccessPolicyReconcileLoopMockRecorder
}

// MockAccessPolicyReconcileLoopMockRecorder is the mock recorder for MockAccessPolicyReconcileLoop.
type MockAccessPolicyReconcileLoopMockRecorder struct {
	mock *MockAccessPolicyReconcileLoop
}

// NewMockAccessPolicyReconcileLoop creates a new mock instance.
func NewMockAccessPolicyReconcileLoop(ctrl *gomock.Controller) *MockAccessPolicyReconcileLoop {
	mock := &MockAccessPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockAccessPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessPolicyReconcileLoop) EXPECT() *MockAccessPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// RunAccessPolicyReconciler mocks base method.
func (m *MockAccessPolicyReconcileLoop) RunAccessPolicyReconciler(ctx context.Context, rec controller.AccessPolicyReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunAccessPolicyReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunAccessPolicyReconciler indicates an expected call of RunAccessPolicyReconciler.
func (mr *MockAccessPolicyReconcileLoopMockRecorder) RunAccessPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAccessPolicyReconciler", reflect.TypeOf((*MockAccessPolicyReconcileLoop)(nil).RunAccessPolicyReconciler), varargs...)
}

// MockCORSPolicyReconciler is a mock of CORSPolicyReconciler interface.
type MockCORSPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockCORSPolicyReconcilerMockRecorder
}

// MockCORSPolicyReconcilerMockRecorder is the mock recorder for MockCORSPolicyReconciler.
type MockCORSPolicyReconcilerMockRecorder struct {
	mock *MockCORSPolicyReconciler
}

// NewMockCORSPolicyReconciler creates a new mock instance.
func NewMockCORSPolicyReconciler(ctrl *gomock.Controller) *MockCORSPolicyReconciler {
	mock := &MockCORSPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockCORSPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCORSPolicyReconciler) EXPECT() *MockCORSPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileCORSPolicy mocks base method.
func (m *MockCORSPolicyReconciler) ReconcileCORSPolicy(obj *v2.CORSPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCORSPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileCORSPolicy indicates an expected call of ReconcileCORSPolicy.
func (mr *MockCORSPolicyReconcilerMockRecorder) ReconcileCORSPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCORSPolicy", reflect.TypeOf((*MockCORSPolicyReconciler)(nil).ReconcileCORSPolicy), obj)
}

// MockCORSPolicyDeletionReconciler is a mock of CORSPolicyDeletionReconciler interface.
type MockCORSPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockCORSPolicyDeletionReconcilerMockRecorder
}

// MockCORSPolicyDeletionReconcilerMockRecorder is the mock recorder for MockCORSPolicyDeletionReconciler.
type MockCORSPolicyDeletionReconcilerMockRecorder struct {
	mock *MockCORSPolicyDeletionReconciler
}

// NewMockCORSPolicyDeletionReconciler creates a new mock instance.
func NewMockCORSPolicyDeletionReconciler(ctrl *gomock.Controller) *MockCORSPolicyDeletionReconciler {
	mock := &MockCORSPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockCORSPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCORSPolicyDeletionReconciler) EXPECT() *MockCORSPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileCORSPolicyDeletion mocks base method.
func (m *MockCORSPolicyDeletionReconciler) ReconcileCORSPolicyDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCORSPolicyDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileCORSPolicyDeletion indicates an expected call of ReconcileCORSPolicyDeletion.
func (mr *MockCORSPolicyDeletionReconcilerMockRecorder) ReconcileCORSPolicyDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCORSPolicyDeletion", reflect.TypeOf((*MockCORSPolicyDeletionReconciler)(nil).ReconcileCORSPolicyDeletion), req)
}

// MockCORSPolicyFinalizer is a mock of CORSPolicyFinalizer interface.
type MockCORSPolicyFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockCORSPolicyFinalizerMockRecorder
}

// MockCORSPolicyFinalizerMockRecorder is the mock recorder for MockCORSPolicyFinalizer.
type MockCORSPolicyFinalizerMockRecorder struct {
	mock *MockCORSPolicyFinalizer
}

// NewMockCORSPolicyFinalizer creates a new mock instance.
func NewMockCORSPolicyFinalizer(ctrl *gomock.Controller) *MockCORSPolicyFinalizer {
	mock := &MockCORSPolicyFinalizer{ctrl: ctrl}
	mock.recorder = &MockCORSPolicyFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCORSPolicyFinalizer) EXPECT() *MockCORSPolicyFinalizerMockRecorder {
	return m.recorder
}

// CORSPolicyFinalizerName mocks base method.
func (m *MockCORSPolicyFinalizer) CORSPolicyFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CORSPolicyFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// CORSPolicyFinalizerName indicates an expected call of CORSPolicyFinalizerName.
func (mr *MockCORSPolicyFinalizerMockRecorder) CORSPolicyFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CORSPolicyFinalizerName", reflect.TypeOf((*MockCORSPolicyFinalizer)(nil).CORSPolicyFinalizerName))
}

// FinalizeCORSPolicy mocks base method.
func (m *MockCORSPolicyFinalizer) FinalizeCORSPolicy(obj *v2.CORSPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeCORSPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeCORSPolicy indicates an expected call of FinalizeCORSPolicy.
func (mr *MockCORSPolicyFinalizerMockRecorder) FinalizeCORSPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeCORSPolicy", reflect.TypeOf((*MockCORSPolicyFinalizer)(nil).FinalizeCORSPolicy), obj)
}

// ReconcileCORSPolicy mocks base method.
func (m *MockCORSPolicyFinalizer) ReconcileCORSPolicy(obj *v2.CORSPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCORSPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileCORSPolicy indicates an expected call of ReconcileCORSPolicy.
func (mr *MockCORSPolicyFinalizerMockRecorder) ReconcileCORSPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCORSPolicy", reflect.TypeOf((*MockCORSPolicyFinalizer)(nil).ReconcileCORSPolicy), obj)
}

// MockCORSPolicyReconcileLoop is a mock of CORSPolicyReconcileLoop interface.
type MockCORSPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockCORSPolicyReconcileLoopMockRecorder
}

// MockCORSPolicyReconcileLoopMockRecorder is the mock recorder for MockCORSPolicyReconcileLoop.
type MockCORSPolicyReconcileLoopMockRecorder struct {
	mock *MockCORSPolicyReconcileLoop
}

// NewMockCORSPolicyReconcileLoop creates a new mock instance.
func NewMockCORSPolicyReconcileLoop(ctrl *gomock.Controller) *MockCORSPolicyReconcileLoop {
	mock := &MockCORSPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockCORSPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCORSPolicyReconcileLoop) EXPECT() *MockCORSPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// RunCORSPolicyReconciler mocks base method.
func (m *MockCORSPolicyReconcileLoop) RunCORSPolicyReconciler(ctx context.Context, rec controller.CORSPolicyReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunCORSPolicyReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCORSPolicyReconciler indicates an expected call of RunCORSPolicyReconciler.
func (mr *MockCORSPolicyReconcileLoopMockRecorder) RunCORSPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCORSPolicyReconciler", reflect.TypeOf((*MockCORSPolicyReconcileLoop)(nil).RunCORSPolicyReconciler), varargs...)
}

// MockCSRFPolicyReconciler is a mock of CSRFPolicyReconciler interface.
type MockCSRFPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockCSRFPolicyReconcilerMockRecorder
}

// MockCSRFPolicyReconcilerMockRecorder is the mock recorder for MockCSRFPolicyReconciler.
type MockCSRFPolicyReconcilerMockRecorder struct {
	mock *MockCSRFPolicyReconciler
}

// NewMockCSRFPolicyReconciler creates a new mock instance.
func NewMockCSRFPolicyReconciler(ctrl *gomock.Controller) *MockCSRFPolicyReconciler {
	mock := &MockCSRFPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockCSRFPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSRFPolicyReconciler) EXPECT() *MockCSRFPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileCSRFPolicy mocks base method.
func (m *MockCSRFPolicyReconciler) ReconcileCSRFPolicy(obj *v2.CSRFPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCSRFPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileCSRFPolicy indicates an expected call of ReconcileCSRFPolicy.
func (mr *MockCSRFPolicyReconcilerMockRecorder) ReconcileCSRFPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCSRFPolicy", reflect.TypeOf((*MockCSRFPolicyReconciler)(nil).ReconcileCSRFPolicy), obj)
}

// MockCSRFPolicyDeletionReconciler is a mock of CSRFPolicyDeletionReconciler interface.
type MockCSRFPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockCSRFPolicyDeletionReconcilerMockRecorder
}

// MockCSRFPolicyDeletionReconcilerMockRecorder is the mock recorder for MockCSRFPolicyDeletionReconciler.
type MockCSRFPolicyDeletionReconcilerMockRecorder struct {
	mock *MockCSRFPolicyDeletionReconciler
}

// NewMockCSRFPolicyDeletionReconciler creates a new mock instance.
func NewMockCSRFPolicyDeletionReconciler(ctrl *gomock.Controller) *MockCSRFPolicyDeletionReconciler {
	mock := &MockCSRFPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockCSRFPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSRFPolicyDeletionReconciler) EXPECT() *MockCSRFPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileCSRFPolicyDeletion mocks base method.
func (m *MockCSRFPolicyDeletionReconciler) ReconcileCSRFPolicyDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCSRFPolicyDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileCSRFPolicyDeletion indicates an expected call of ReconcileCSRFPolicyDeletion.
func (mr *MockCSRFPolicyDeletionReconcilerMockRecorder) ReconcileCSRFPolicyDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCSRFPolicyDeletion", reflect.TypeOf((*MockCSRFPolicyDeletionReconciler)(nil).ReconcileCSRFPolicyDeletion), req)
}

// MockCSRFPolicyFinalizer is a mock of CSRFPolicyFinalizer interface.
type MockCSRFPolicyFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockCSRFPolicyFinalizerMockRecorder
}

// MockCSRFPolicyFinalizerMockRecorder is the mock recorder for MockCSRFPolicyFinalizer.
type MockCSRFPolicyFinalizerMockRecorder struct {
	mock *MockCSRFPolicyFinalizer
}

// NewMockCSRFPolicyFinalizer creates a new mock instance.
func NewMockCSRFPolicyFinalizer(ctrl *gomock.Controller) *MockCSRFPolicyFinalizer {
	mock := &MockCSRFPolicyFinalizer{ctrl: ctrl}
	mock.recorder = &MockCSRFPolicyFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSRFPolicyFinalizer) EXPECT() *MockCSRFPolicyFinalizerMockRecorder {
	return m.recorder
}

// CSRFPolicyFinalizerName mocks base method.
func (m *MockCSRFPolicyFinalizer) CSRFPolicyFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CSRFPolicyFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// CSRFPolicyFinalizerName indicates an expected call of CSRFPolicyFinalizerName.
func (mr *MockCSRFPolicyFinalizerMockRecorder) CSRFPolicyFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CSRFPolicyFinalizerName", reflect.TypeOf((*MockCSRFPolicyFinalizer)(nil).CSRFPolicyFinalizerName))
}

// FinalizeCSRFPolicy mocks base method.
func (m *MockCSRFPolicyFinalizer) FinalizeCSRFPolicy(obj *v2.CSRFPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeCSRFPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeCSRFPolicy indicates an expected call of FinalizeCSRFPolicy.
func (mr *MockCSRFPolicyFinalizerMockRecorder) FinalizeCSRFPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeCSRFPolicy", reflect.TypeOf((*MockCSRFPolicyFinalizer)(nil).FinalizeCSRFPolicy), obj)
}

// ReconcileCSRFPolicy mocks base method.
func (m *MockCSRFPolicyFinalizer) ReconcileCSRFPolicy(obj *v2.CSRFPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCSRFPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileCSRFPolicy indicates an expected call of ReconcileCSRFPolicy.
func (mr *MockCSRFPolicyFinalizerMockRecorder) ReconcileCSRFPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCSRFPolicy", reflect.TypeOf((*MockCSRFPolicyFinalizer)(nil).ReconcileCSRFPolicy), obj)
}

// MockCSRFPolicyReconcileLoop is a mock of CSRFPolicyReconcileLoop interface.
type MockCSRFPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockCSRFPolicyReconcileLoopMockRecorder
}

// MockCSRFPolicyReconcileLoopMockRecorder is the mock recorder for MockCSRFPolicyReconcileLoop.
type MockCSRFPolicyReconcileLoopMockRecorder struct {
	mock *MockCSRFPolicyReconcileLoop
}

// NewMockCSRFPolicyReconcileLoop creates a new mock instance.
func NewMockCSRFPolicyReconcileLoop(ctrl *gomock.Controller) *MockCSRFPolicyReconcileLoop {
	mock := &MockCSRFPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockCSRFPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSRFPolicyReconcileLoop) EXPECT() *MockCSRFPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// RunCSRFPolicyReconciler mocks base method.
func (m *MockCSRFPolicyReconcileLoop) RunCSRFPolicyReconciler(ctx context.Context, rec controller.CSRFPolicyReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunCSRFPolicyReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCSRFPolicyReconciler indicates an expected call of RunCSRFPolicyReconciler.
func (mr *MockCSRFPolicyReconcileLoopMockRecorder) RunCSRFPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCSRFPolicyReconciler", reflect.TypeOf((*MockCSRFPolicyReconcileLoop)(nil).RunCSRFPolicyReconciler), varargs...)
}

// MockExtAuthPolicyReconciler is a mock of ExtAuthPolicyReconciler interface.
type MockExtAuthPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthPolicyReconcilerMockRecorder
}

// MockExtAuthPolicyReconcilerMockRecorder is the mock recorder for MockExtAuthPolicyReconciler.
type MockExtAuthPolicyReconcilerMockRecorder struct {
	mock *MockExtAuthPolicyReconciler
}

// NewMockExtAuthPolicyReconciler creates a new mock instance.
func NewMockExtAuthPolicyReconciler(ctrl *gomock.Controller) *MockExtAuthPolicyReconciler {
	mock := &MockExtAuthPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockExtAuthPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtAuthPolicyReconciler) EXPECT() *MockExtAuthPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileExtAuthPolicy mocks base method.
func (m *MockExtAuthPolicyReconciler) ReconcileExtAuthPolicy(obj *v2.ExtAuthPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileExtAuthPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileExtAuthPolicy indicates an expected call of ReconcileExtAuthPolicy.
func (mr *MockExtAuthPolicyReconcilerMockRecorder) ReconcileExtAuthPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileExtAuthPolicy", reflect.TypeOf((*MockExtAuthPolicyReconciler)(nil).ReconcileExtAuthPolicy), obj)
}

// MockExtAuthPolicyDeletionReconciler is a mock of ExtAuthPolicyDeletionReconciler interface.
type MockExtAuthPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthPolicyDeletionReconcilerMockRecorder
}

// MockExtAuthPolicyDeletionReconcilerMockRecorder is the mock recorder for MockExtAuthPolicyDeletionReconciler.
type MockExtAuthPolicyDeletionReconcilerMockRecorder struct {
	mock *MockExtAuthPolicyDeletionReconciler
}

// NewMockExtAuthPolicyDeletionReconciler creates a new mock instance.
func NewMockExtAuthPolicyDeletionReconciler(ctrl *gomock.Controller) *MockExtAuthPolicyDeletionReconciler {
	mock := &MockExtAuthPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockExtAuthPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtAuthPolicyDeletionReconciler) EXPECT() *MockExtAuthPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileExtAuthPolicyDeletion mocks base method.
func (m *MockExtAuthPolicyDeletionReconciler) ReconcileExtAuthPolicyDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileExtAuthPolicyDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileExtAuthPolicyDeletion indicates an expected call of ReconcileExtAuthPolicyDeletion.
func (mr *MockExtAuthPolicyDeletionReconcilerMockRecorder) ReconcileExtAuthPolicyDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileExtAuthPolicyDeletion", reflect.TypeOf((*MockExtAuthPolicyDeletionReconciler)(nil).ReconcileExtAuthPolicyDeletion), req)
}

// MockExtAuthPolicyFinalizer is a mock of ExtAuthPolicyFinalizer interface.
type MockExtAuthPolicyFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthPolicyFinalizerMockRecorder
}

// MockExtAuthPolicyFinalizerMockRecorder is the mock recorder for MockExtAuthPolicyFinalizer.
type MockExtAuthPolicyFinalizerMockRecorder struct {
	mock *MockExtAuthPolicyFinalizer
}

// NewMockExtAuthPolicyFinalizer creates a new mock instance.
func NewMockExtAuthPolicyFinalizer(ctrl *gomock.Controller) *MockExtAuthPolicyFinalizer {
	mock := &MockExtAuthPolicyFinalizer{ctrl: ctrl}
	mock.recorder = &MockExtAuthPolicyFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtAuthPolicyFinalizer) EXPECT() *MockExtAuthPolicyFinalizerMockRecorder {
	return m.recorder
}

// ExtAuthPolicyFinalizerName mocks base method.
func (m *MockExtAuthPolicyFinalizer) ExtAuthPolicyFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtAuthPolicyFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ExtAuthPolicyFinalizerName indicates an expected call of ExtAuthPolicyFinalizerName.
func (mr *MockExtAuthPolicyFinalizerMockRecorder) ExtAuthPolicyFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtAuthPolicyFinalizerName", reflect.TypeOf((*MockExtAuthPolicyFinalizer)(nil).ExtAuthPolicyFinalizerName))
}

// FinalizeExtAuthPolicy mocks base method.
func (m *MockExtAuthPolicyFinalizer) FinalizeExtAuthPolicy(obj *v2.ExtAuthPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeExtAuthPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeExtAuthPolicy indicates an expected call of FinalizeExtAuthPolicy.
func (mr *MockExtAuthPolicyFinalizerMockRecorder) FinalizeExtAuthPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeExtAuthPolicy", reflect.TypeOf((*MockExtAuthPolicyFinalizer)(nil).FinalizeExtAuthPolicy), obj)
}

// ReconcileExtAuthPolicy mocks base method.
func (m *MockExtAuthPolicyFinalizer) ReconcileExtAuthPolicy(obj *v2.ExtAuthPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileExtAuthPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileExtAuthPolicy indicates an expected call of ReconcileExtAuthPolicy.
func (mr *MockExtAuthPolicyFinalizerMockRecorder) ReconcileExtAuthPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileExtAuthPolicy", reflect.TypeOf((*MockExtAuthPolicyFinalizer)(nil).ReconcileExtAuthPolicy), obj)
}

// MockExtAuthPolicyReconcileLoop is a mock of ExtAuthPolicyReconcileLoop interface.
type MockExtAuthPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthPolicyReconcileLoopMockRecorder
}

// MockExtAuthPolicyReconcileLoopMockRecorder is the mock recorder for MockExtAuthPolicyReconcileLoop.
type MockExtAuthPolicyReconcileLoopMockRecorder struct {
	mock *MockExtAuthPolicyReconcileLoop
}

// NewMockExtAuthPolicyReconcileLoop creates a new mock instance.
func NewMockExtAuthPolicyReconcileLoop(ctrl *gomock.Controller) *MockExtAuthPolicyReconcileLoop {
	mock := &MockExtAuthPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockExtAuthPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtAuthPolicyReconcileLoop) EXPECT() *MockExtAuthPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// RunExtAuthPolicyReconciler mocks base method.
func (m *MockExtAuthPolicyReconcileLoop) RunExtAuthPolicyReconciler(ctx context.Context, rec controller.ExtAuthPolicyReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunExtAuthPolicyReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunExtAuthPolicyReconciler indicates an expected call of RunExtAuthPolicyReconciler.
func (mr *MockExtAuthPolicyReconcileLoopMockRecorder) RunExtAuthPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunExtAuthPolicyReconciler", reflect.TypeOf((*MockExtAuthPolicyReconcileLoop)(nil).RunExtAuthPolicyReconciler), varargs...)
}

// MockWAFPolicyReconciler is a mock of WAFPolicyReconciler interface.
type MockWAFPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockWAFPolicyReconcilerMockRecorder
}

// MockWAFPolicyReconcilerMockRecorder is the mock recorder for MockWAFPolicyReconciler.
type MockWAFPolicyReconcilerMockRecorder struct {
	mock *MockWAFPolicyReconciler
}

// NewMockWAFPolicyReconciler creates a new mock instance.
func NewMockWAFPolicyReconciler(ctrl *gomock.Controller) *MockWAFPolicyReconciler {
	mock := &MockWAFPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockWAFPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWAFPolicyReconciler) EXPECT() *MockWAFPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWAFPolicy mocks base method.
func (m *MockWAFPolicyReconciler) ReconcileWAFPolicy(obj *v2.WAFPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWAFPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileWAFPolicy indicates an expected call of ReconcileWAFPolicy.
func (mr *MockWAFPolicyReconcilerMockRecorder) ReconcileWAFPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWAFPolicy", reflect.TypeOf((*MockWAFPolicyReconciler)(nil).ReconcileWAFPolicy), obj)
}

// MockWAFPolicyDeletionReconciler is a mock of WAFPolicyDeletionReconciler interface.
type MockWAFPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockWAFPolicyDeletionReconcilerMockRecorder
}

// MockWAFPolicyDeletionReconcilerMockRecorder is the mock recorder for MockWAFPolicyDeletionReconciler.
type MockWAFPolicyDeletionReconcilerMockRecorder struct {
	mock *MockWAFPolicyDeletionReconciler
}

// NewMockWAFPolicyDeletionReconciler creates a new mock instance.
func NewMockWAFPolicyDeletionReconciler(ctrl *gomock.Controller) *MockWAFPolicyDeletionReconciler {
	mock := &MockWAFPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockWAFPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWAFPolicyDeletionReconciler) EXPECT() *MockWAFPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWAFPolicyDeletion mocks base method.
func (m *MockWAFPolicyDeletionReconciler) ReconcileWAFPolicyDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWAFPolicyDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileWAFPolicyDeletion indicates an expected call of ReconcileWAFPolicyDeletion.
func (mr *MockWAFPolicyDeletionReconcilerMockRecorder) ReconcileWAFPolicyDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWAFPolicyDeletion", reflect.TypeOf((*MockWAFPolicyDeletionReconciler)(nil).ReconcileWAFPolicyDeletion), req)
}

// MockWAFPolicyFinalizer is a mock of WAFPolicyFinalizer interface.
type MockWAFPolicyFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockWAFPolicyFinalizerMockRecorder
}

// MockWAFPolicyFinalizerMockRecorder is the mock recorder for MockWAFPolicyFinalizer.
type MockWAFPolicyFinalizerMockRecorder struct {
	mock *MockWAFPolicyFinalizer
}

// NewMockWAFPolicyFinalizer creates a new mock instance.
func NewMockWAFPolicyFinalizer(ctrl *gomock.Controller) *MockWAFPolicyFinalizer {
	mock := &MockWAFPolicyFinalizer{ctrl: ctrl}
	mock.recorder = &MockWAFPolicyFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWAFPolicyFinalizer) EXPECT() *MockWAFPolicyFinalizerMockRecorder {
	return m.recorder
}

// FinalizeWAFPolicy mocks base method.
func (m *MockWAFPolicyFinalizer) FinalizeWAFPolicy(obj *v2.WAFPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeWAFPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeWAFPolicy indicates an expected call of FinalizeWAFPolicy.
func (mr *MockWAFPolicyFinalizerMockRecorder) FinalizeWAFPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeWAFPolicy", reflect.TypeOf((*MockWAFPolicyFinalizer)(nil).FinalizeWAFPolicy), obj)
}

// ReconcileWAFPolicy mocks base method.
func (m *MockWAFPolicyFinalizer) ReconcileWAFPolicy(obj *v2.WAFPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWAFPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileWAFPolicy indicates an expected call of ReconcileWAFPolicy.
func (mr *MockWAFPolicyFinalizerMockRecorder) ReconcileWAFPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWAFPolicy", reflect.TypeOf((*MockWAFPolicyFinalizer)(nil).ReconcileWAFPolicy), obj)
}

// WAFPolicyFinalizerName mocks base method.
func (m *MockWAFPolicyFinalizer) WAFPolicyFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WAFPolicyFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// WAFPolicyFinalizerName indicates an expected call of WAFPolicyFinalizerName.
func (mr *MockWAFPolicyFinalizerMockRecorder) WAFPolicyFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WAFPolicyFinalizerName", reflect.TypeOf((*MockWAFPolicyFinalizer)(nil).WAFPolicyFinalizerName))
}

// MockWAFPolicyReconcileLoop is a mock of WAFPolicyReconcileLoop interface.
type MockWAFPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockWAFPolicyReconcileLoopMockRecorder
}

// MockWAFPolicyReconcileLoopMockRecorder is the mock recorder for MockWAFPolicyReconcileLoop.
type MockWAFPolicyReconcileLoopMockRecorder struct {
	mock *MockWAFPolicyReconcileLoop
}

// NewMockWAFPolicyReconcileLoop creates a new mock instance.
func NewMockWAFPolicyReconcileLoop(ctrl *gomock.Controller) *MockWAFPolicyReconcileLoop {
	mock := &MockWAFPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockWAFPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWAFPolicyReconcileLoop) EXPECT() *MockWAFPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// RunWAFPolicyReconciler mocks base method.
func (m *MockWAFPolicyReconcileLoop) RunWAFPolicyReconciler(ctx context.Context, rec controller.WAFPolicyReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunWAFPolicyReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWAFPolicyReconciler indicates an expected call of RunWAFPolicyReconciler.
func (mr *MockWAFPolicyReconcileLoopMockRecorder) RunWAFPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWAFPolicyReconciler", reflect.TypeOf((*MockWAFPolicyReconcileLoop)(nil).RunWAFPolicyReconciler), varargs...)
}

// MockJWTPolicyReconciler is a mock of JWTPolicyReconciler interface.
type MockJWTPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockJWTPolicyReconcilerMockRecorder
}

// MockJWTPolicyReconcilerMockRecorder is the mock recorder for MockJWTPolicyReconciler.
type MockJWTPolicyReconcilerMockRecorder struct {
	mock *MockJWTPolicyReconciler
}

// NewMockJWTPolicyReconciler creates a new mock instance.
func NewMockJWTPolicyReconciler(ctrl *gomock.Controller) *MockJWTPolicyReconciler {
	mock := &MockJWTPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockJWTPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTPolicyReconciler) EXPECT() *MockJWTPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileJWTPolicy mocks base method.
func (m *MockJWTPolicyReconciler) ReconcileJWTPolicy(obj *v2.JWTPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileJWTPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileJWTPolicy indicates an expected call of ReconcileJWTPolicy.
func (mr *MockJWTPolicyReconcilerMockRecorder) ReconcileJWTPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileJWTPolicy", reflect.TypeOf((*MockJWTPolicyReconciler)(nil).ReconcileJWTPolicy), obj)
}

// MockJWTPolicyDeletionReconciler is a mock of JWTPolicyDeletionReconciler interface.
type MockJWTPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockJWTPolicyDeletionReconcilerMockRecorder
}

// MockJWTPolicyDeletionReconcilerMockRecorder is the mock recorder for MockJWTPolicyDeletionReconciler.
type MockJWTPolicyDeletionReconcilerMockRecorder struct {
	mock *MockJWTPolicyDeletionReconciler
}

// NewMockJWTPolicyDeletionReconciler creates a new mock instance.
func NewMockJWTPolicyDeletionReconciler(ctrl *gomock.Controller) *MockJWTPolicyDeletionReconciler {
	mock := &MockJWTPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockJWTPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTPolicyDeletionReconciler) EXPECT() *MockJWTPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileJWTPolicyDeletion mocks base method.
func (m *MockJWTPolicyDeletionReconciler) ReconcileJWTPolicyDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileJWTPolicyDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileJWTPolicyDeletion indicates an expected call of ReconcileJWTPolicyDeletion.
func (mr *MockJWTPolicyDeletionReconcilerMockRecorder) ReconcileJWTPolicyDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileJWTPolicyDeletion", reflect.TypeOf((*MockJWTPolicyDeletionReconciler)(nil).ReconcileJWTPolicyDeletion), req)
}

// MockJWTPolicyFinalizer is a mock of JWTPolicyFinalizer interface.
type MockJWTPolicyFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockJWTPolicyFinalizerMockRecorder
}

// MockJWTPolicyFinalizerMockRecorder is the mock recorder for MockJWTPolicyFinalizer.
type MockJWTPolicyFinalizerMockRecorder struct {
	mock *MockJWTPolicyFinalizer
}

// NewMockJWTPolicyFinalizer creates a new mock instance.
func NewMockJWTPolicyFinalizer(ctrl *gomock.Controller) *MockJWTPolicyFinalizer {
	mock := &MockJWTPolicyFinalizer{ctrl: ctrl}
	mock.recorder = &MockJWTPolicyFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTPolicyFinalizer) EXPECT() *MockJWTPolicyFinalizerMockRecorder {
	return m.recorder
}

// FinalizeJWTPolicy mocks base method.
func (m *MockJWTPolicyFinalizer) FinalizeJWTPolicy(obj *v2.JWTPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeJWTPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeJWTPolicy indicates an expected call of FinalizeJWTPolicy.
func (mr *MockJWTPolicyFinalizerMockRecorder) FinalizeJWTPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeJWTPolicy", reflect.TypeOf((*MockJWTPolicyFinalizer)(nil).FinalizeJWTPolicy), obj)
}

// JWTPolicyFinalizerName mocks base method.
func (m *MockJWTPolicyFinalizer) JWTPolicyFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JWTPolicyFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// JWTPolicyFinalizerName indicates an expected call of JWTPolicyFinalizerName.
func (mr *MockJWTPolicyFinalizerMockRecorder) JWTPolicyFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JWTPolicyFinalizerName", reflect.TypeOf((*MockJWTPolicyFinalizer)(nil).JWTPolicyFinalizerName))
}

// ReconcileJWTPolicy mocks base method.
func (m *MockJWTPolicyFinalizer) ReconcileJWTPolicy(obj *v2.JWTPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileJWTPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileJWTPolicy indicates an expected call of ReconcileJWTPolicy.
func (mr *MockJWTPolicyFinalizerMockRecorder) ReconcileJWTPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileJWTPolicy", reflect.TypeOf((*MockJWTPolicyFinalizer)(nil).ReconcileJWTPolicy), obj)
}

// MockJWTPolicyReconcileLoop is a mock of JWTPolicyReconcileLoop interface.
type MockJWTPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockJWTPolicyReconcileLoopMockRecorder
}

// MockJWTPolicyReconcileLoopMockRecorder is the mock recorder for MockJWTPolicyReconcileLoop.
type MockJWTPolicyReconcileLoopMockRecorder struct {
	mock *MockJWTPolicyReconcileLoop
}

// NewMockJWTPolicyReconcileLoop creates a new mock instance.
func NewMockJWTPolicyReconcileLoop(ctrl *gomock.Controller) *MockJWTPolicyReconcileLoop {
	mock := &MockJWTPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockJWTPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTPolicyReconcileLoop) EXPECT() *MockJWTPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// RunJWTPolicyReconciler mocks base method.
func (m *MockJWTPolicyReconcileLoop) RunJWTPolicyReconciler(ctx context.Context, rec controller.JWTPolicyReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunJWTPolicyReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunJWTPolicyReconciler indicates an expected call of RunJWTPolicyReconciler.
func (mr *MockJWTPolicyReconcileLoopMockRecorder) RunJWTPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunJWTPolicyReconciler", reflect.TypeOf((*MockJWTPolicyReconcileLoop)(nil).RunJWTPolicyReconciler), varargs...)
}
