// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/service/ext_proc/v3/external_processor.proto

package v3

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_config_core_v3 "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/external/envoy/config/core/v3"

	github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_extensions_filters_http_ext_proc_v3 "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/external/envoy/extensions/filters/http/ext_proc/v3"

	github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_type_v3 "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/external/envoy/type/v3"

	google_golang_org_protobuf_types_known_durationpb "google.golang.org/protobuf/types/known/durationpb"

	google_golang_org_protobuf_types_known_structpb "google.golang.org/protobuf/types/known/structpb"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *ProcessingRequest) Clone() proto.Message {
	var target *ProcessingRequest
	if m == nil {
		return target
	}
	target = &ProcessingRequest{}

	if h, ok := interface{}(m.GetMetadataContext()).(clone.Cloner); ok {
		target.MetadataContext = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_config_core_v3.Metadata)
	} else {
		target.MetadataContext = proto.Clone(m.GetMetadataContext()).(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_config_core_v3.Metadata)
	}

	if m.GetAttributes() != nil {
		target.Attributes = make(map[string]*google_golang_org_protobuf_types_known_structpb.Struct, len(m.GetAttributes()))
		for k, v := range m.GetAttributes() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Attributes[k] = h.Clone().(*google_golang_org_protobuf_types_known_structpb.Struct)
			} else {
				target.Attributes[k] = proto.Clone(v).(*google_golang_org_protobuf_types_known_structpb.Struct)
			}

		}
	}

	target.ObservabilityMode = m.GetObservabilityMode()

	switch m.Request.(type) {

	case *ProcessingRequest_RequestHeaders:

		if h, ok := interface{}(m.GetRequestHeaders()).(clone.Cloner); ok {
			target.Request = &ProcessingRequest_RequestHeaders{
				RequestHeaders: h.Clone().(*HttpHeaders),
			}
		} else {
			target.Request = &ProcessingRequest_RequestHeaders{
				RequestHeaders: proto.Clone(m.GetRequestHeaders()).(*HttpHeaders),
			}
		}

	case *ProcessingRequest_ResponseHeaders:

		if h, ok := interface{}(m.GetResponseHeaders()).(clone.Cloner); ok {
			target.Request = &ProcessingRequest_ResponseHeaders{
				ResponseHeaders: h.Clone().(*HttpHeaders),
			}
		} else {
			target.Request = &ProcessingRequest_ResponseHeaders{
				ResponseHeaders: proto.Clone(m.GetResponseHeaders()).(*HttpHeaders),
			}
		}

	case *ProcessingRequest_RequestBody:

		if h, ok := interface{}(m.GetRequestBody()).(clone.Cloner); ok {
			target.Request = &ProcessingRequest_RequestBody{
				RequestBody: h.Clone().(*HttpBody),
			}
		} else {
			target.Request = &ProcessingRequest_RequestBody{
				RequestBody: proto.Clone(m.GetRequestBody()).(*HttpBody),
			}
		}

	case *ProcessingRequest_ResponseBody:

		if h, ok := interface{}(m.GetResponseBody()).(clone.Cloner); ok {
			target.Request = &ProcessingRequest_ResponseBody{
				ResponseBody: h.Clone().(*HttpBody),
			}
		} else {
			target.Request = &ProcessingRequest_ResponseBody{
				ResponseBody: proto.Clone(m.GetResponseBody()).(*HttpBody),
			}
		}

	case *ProcessingRequest_RequestTrailers:

		if h, ok := interface{}(m.GetRequestTrailers()).(clone.Cloner); ok {
			target.Request = &ProcessingRequest_RequestTrailers{
				RequestTrailers: h.Clone().(*HttpTrailers),
			}
		} else {
			target.Request = &ProcessingRequest_RequestTrailers{
				RequestTrailers: proto.Clone(m.GetRequestTrailers()).(*HttpTrailers),
			}
		}

	case *ProcessingRequest_ResponseTrailers:

		if h, ok := interface{}(m.GetResponseTrailers()).(clone.Cloner); ok {
			target.Request = &ProcessingRequest_ResponseTrailers{
				ResponseTrailers: h.Clone().(*HttpTrailers),
			}
		} else {
			target.Request = &ProcessingRequest_ResponseTrailers{
				ResponseTrailers: proto.Clone(m.GetResponseTrailers()).(*HttpTrailers),
			}
		}

	}

	return target
}

// Clone function
func (m *ProcessingResponse) Clone() proto.Message {
	var target *ProcessingResponse
	if m == nil {
		return target
	}
	target = &ProcessingResponse{}

	if h, ok := interface{}(m.GetDynamicMetadata()).(clone.Cloner); ok {
		target.DynamicMetadata = h.Clone().(*google_golang_org_protobuf_types_known_structpb.Struct)
	} else {
		target.DynamicMetadata = proto.Clone(m.GetDynamicMetadata()).(*google_golang_org_protobuf_types_known_structpb.Struct)
	}

	if h, ok := interface{}(m.GetModeOverride()).(clone.Cloner); ok {
		target.ModeOverride = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_extensions_filters_http_ext_proc_v3.ProcessingMode)
	} else {
		target.ModeOverride = proto.Clone(m.GetModeOverride()).(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_extensions_filters_http_ext_proc_v3.ProcessingMode)
	}

	if h, ok := interface{}(m.GetOverrideMessageTimeout()).(clone.Cloner); ok {
		target.OverrideMessageTimeout = h.Clone().(*google_golang_org_protobuf_types_known_durationpb.Duration)
	} else {
		target.OverrideMessageTimeout = proto.Clone(m.GetOverrideMessageTimeout()).(*google_golang_org_protobuf_types_known_durationpb.Duration)
	}

	switch m.Response.(type) {

	case *ProcessingResponse_RequestHeaders:

		if h, ok := interface{}(m.GetRequestHeaders()).(clone.Cloner); ok {
			target.Response = &ProcessingResponse_RequestHeaders{
				RequestHeaders: h.Clone().(*HeadersResponse),
			}
		} else {
			target.Response = &ProcessingResponse_RequestHeaders{
				RequestHeaders: proto.Clone(m.GetRequestHeaders()).(*HeadersResponse),
			}
		}

	case *ProcessingResponse_ResponseHeaders:

		if h, ok := interface{}(m.GetResponseHeaders()).(clone.Cloner); ok {
			target.Response = &ProcessingResponse_ResponseHeaders{
				ResponseHeaders: h.Clone().(*HeadersResponse),
			}
		} else {
			target.Response = &ProcessingResponse_ResponseHeaders{
				ResponseHeaders: proto.Clone(m.GetResponseHeaders()).(*HeadersResponse),
			}
		}

	case *ProcessingResponse_RequestBody:

		if h, ok := interface{}(m.GetRequestBody()).(clone.Cloner); ok {
			target.Response = &ProcessingResponse_RequestBody{
				RequestBody: h.Clone().(*BodyResponse),
			}
		} else {
			target.Response = &ProcessingResponse_RequestBody{
				RequestBody: proto.Clone(m.GetRequestBody()).(*BodyResponse),
			}
		}

	case *ProcessingResponse_ResponseBody:

		if h, ok := interface{}(m.GetResponseBody()).(clone.Cloner); ok {
			target.Response = &ProcessingResponse_ResponseBody{
				ResponseBody: h.Clone().(*BodyResponse),
			}
		} else {
			target.Response = &ProcessingResponse_ResponseBody{
				ResponseBody: proto.Clone(m.GetResponseBody()).(*BodyResponse),
			}
		}

	case *ProcessingResponse_RequestTrailers:

		if h, ok := interface{}(m.GetRequestTrailers()).(clone.Cloner); ok {
			target.Response = &ProcessingResponse_RequestTrailers{
				RequestTrailers: h.Clone().(*TrailersResponse),
			}
		} else {
			target.Response = &ProcessingResponse_RequestTrailers{
				RequestTrailers: proto.Clone(m.GetRequestTrailers()).(*TrailersResponse),
			}
		}

	case *ProcessingResponse_ResponseTrailers:

		if h, ok := interface{}(m.GetResponseTrailers()).(clone.Cloner); ok {
			target.Response = &ProcessingResponse_ResponseTrailers{
				ResponseTrailers: h.Clone().(*TrailersResponse),
			}
		} else {
			target.Response = &ProcessingResponse_ResponseTrailers{
				ResponseTrailers: proto.Clone(m.GetResponseTrailers()).(*TrailersResponse),
			}
		}

	case *ProcessingResponse_ImmediateResponse:

		if h, ok := interface{}(m.GetImmediateResponse()).(clone.Cloner); ok {
			target.Response = &ProcessingResponse_ImmediateResponse{
				ImmediateResponse: h.Clone().(*ImmediateResponse),
			}
		} else {
			target.Response = &ProcessingResponse_ImmediateResponse{
				ImmediateResponse: proto.Clone(m.GetImmediateResponse()).(*ImmediateResponse),
			}
		}

	}

	return target
}

// Clone function
func (m *HttpHeaders) Clone() proto.Message {
	var target *HttpHeaders
	if m == nil {
		return target
	}
	target = &HttpHeaders{}

	if h, ok := interface{}(m.GetHeaders()).(clone.Cloner); ok {
		target.Headers = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_config_core_v3.HeaderMap)
	} else {
		target.Headers = proto.Clone(m.GetHeaders()).(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_config_core_v3.HeaderMap)
	}

	if m.GetAttributes() != nil {
		target.Attributes = make(map[string]*google_golang_org_protobuf_types_known_structpb.Struct, len(m.GetAttributes()))
		for k, v := range m.GetAttributes() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Attributes[k] = h.Clone().(*google_golang_org_protobuf_types_known_structpb.Struct)
			} else {
				target.Attributes[k] = proto.Clone(v).(*google_golang_org_protobuf_types_known_structpb.Struct)
			}

		}
	}

	target.EndOfStream = m.GetEndOfStream()

	return target
}

// Clone function
func (m *HttpBody) Clone() proto.Message {
	var target *HttpBody
	if m == nil {
		return target
	}
	target = &HttpBody{}

	if m.GetBody() != nil {
		target.Body = make([]byte, len(m.GetBody()))
		copy(target.Body, m.GetBody())
	}

	target.EndOfStream = m.GetEndOfStream()

	return target
}

// Clone function
func (m *HttpTrailers) Clone() proto.Message {
	var target *HttpTrailers
	if m == nil {
		return target
	}
	target = &HttpTrailers{}

	if h, ok := interface{}(m.GetTrailers()).(clone.Cloner); ok {
		target.Trailers = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_config_core_v3.HeaderMap)
	} else {
		target.Trailers = proto.Clone(m.GetTrailers()).(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_config_core_v3.HeaderMap)
	}

	return target
}

// Clone function
func (m *HeadersResponse) Clone() proto.Message {
	var target *HeadersResponse
	if m == nil {
		return target
	}
	target = &HeadersResponse{}

	if h, ok := interface{}(m.GetResponse()).(clone.Cloner); ok {
		target.Response = h.Clone().(*CommonResponse)
	} else {
		target.Response = proto.Clone(m.GetResponse()).(*CommonResponse)
	}

	return target
}

// Clone function
func (m *TrailersResponse) Clone() proto.Message {
	var target *TrailersResponse
	if m == nil {
		return target
	}
	target = &TrailersResponse{}

	if h, ok := interface{}(m.GetHeaderMutation()).(clone.Cloner); ok {
		target.HeaderMutation = h.Clone().(*HeaderMutation)
	} else {
		target.HeaderMutation = proto.Clone(m.GetHeaderMutation()).(*HeaderMutation)
	}

	return target
}

// Clone function
func (m *BodyResponse) Clone() proto.Message {
	var target *BodyResponse
	if m == nil {
		return target
	}
	target = &BodyResponse{}

	if h, ok := interface{}(m.GetResponse()).(clone.Cloner); ok {
		target.Response = h.Clone().(*CommonResponse)
	} else {
		target.Response = proto.Clone(m.GetResponse()).(*CommonResponse)
	}

	return target
}

// Clone function
func (m *CommonResponse) Clone() proto.Message {
	var target *CommonResponse
	if m == nil {
		return target
	}
	target = &CommonResponse{}

	target.Status = m.GetStatus()

	if h, ok := interface{}(m.GetHeaderMutation()).(clone.Cloner); ok {
		target.HeaderMutation = h.Clone().(*HeaderMutation)
	} else {
		target.HeaderMutation = proto.Clone(m.GetHeaderMutation()).(*HeaderMutation)
	}

	if h, ok := interface{}(m.GetBodyMutation()).(clone.Cloner); ok {
		target.BodyMutation = h.Clone().(*BodyMutation)
	} else {
		target.BodyMutation = proto.Clone(m.GetBodyMutation()).(*BodyMutation)
	}

	if h, ok := interface{}(m.GetTrailers()).(clone.Cloner); ok {
		target.Trailers = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_config_core_v3.HeaderMap)
	} else {
		target.Trailers = proto.Clone(m.GetTrailers()).(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_config_core_v3.HeaderMap)
	}

	target.ClearRouteCache = m.GetClearRouteCache()

	return target
}

// Clone function
func (m *ImmediateResponse) Clone() proto.Message {
	var target *ImmediateResponse
	if m == nil {
		return target
	}
	target = &ImmediateResponse{}

	if h, ok := interface{}(m.GetStatus()).(clone.Cloner); ok {
		target.Status = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_type_v3.HttpStatus)
	} else {
		target.Status = proto.Clone(m.GetStatus()).(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_type_v3.HttpStatus)
	}

	if h, ok := interface{}(m.GetHeaders()).(clone.Cloner); ok {
		target.Headers = h.Clone().(*HeaderMutation)
	} else {
		target.Headers = proto.Clone(m.GetHeaders()).(*HeaderMutation)
	}

	if m.GetBody() != nil {
		target.Body = make([]byte, len(m.GetBody()))
		copy(target.Body, m.GetBody())
	}

	if h, ok := interface{}(m.GetGrpcStatus()).(clone.Cloner); ok {
		target.GrpcStatus = h.Clone().(*GrpcStatus)
	} else {
		target.GrpcStatus = proto.Clone(m.GetGrpcStatus()).(*GrpcStatus)
	}

	target.Details = m.GetDetails()

	return target
}

// Clone function
func (m *GrpcStatus) Clone() proto.Message {
	var target *GrpcStatus
	if m == nil {
		return target
	}
	target = &GrpcStatus{}

	target.Status = m.GetStatus()

	return target
}

// Clone function
func (m *HeaderMutation) Clone() proto.Message {
	var target *HeaderMutation
	if m == nil {
		return target
	}
	target = &HeaderMutation{}

	if m.GetSetHeaders() != nil {
		target.SetHeaders = make([]*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_config_core_v3.HeaderValueOption, len(m.GetSetHeaders()))
		for idx, v := range m.GetSetHeaders() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SetHeaders[idx] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_config_core_v3.HeaderValueOption)
			} else {
				target.SetHeaders[idx] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_config_core_v3.HeaderValueOption)
			}

		}
	}

	if m.GetRemoveHeaders() != nil {
		target.RemoveHeaders = make([]string, len(m.GetRemoveHeaders()))
		for idx, v := range m.GetRemoveHeaders() {

			target.RemoveHeaders[idx] = v

		}
	}

	return target
}

// Clone function
func (m *BodyMutation) Clone() proto.Message {
	var target *BodyMutation
	if m == nil {
		return target
	}
	target = &BodyMutation{}

	switch m.Mutation.(type) {

	case *BodyMutation_Body:

		if m.GetBody() != nil {
			newArr := make([]byte, len(m.GetBody()))
			copy(newArr, m.GetBody())
			target.Mutation = &BodyMutation_Body{
				Body: newArr,
			}
		} else {
			target.Mutation = &BodyMutation_Body{
				Body: nil,
			}
		}

	case *BodyMutation_ClearBody:

		target.Mutation = &BodyMutation_ClearBody{
			ClearBody: m.GetClearBody(),
		}

	}

	return target
}
