// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/config/filter/http/gzip/v2/gzip.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	google_golang_org_protobuf_types_known_wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *Gzip) Clone() proto.Message {
	var target *Gzip
	if m == nil {
		return target
	}
	target = &Gzip{}

	if h, ok := interface{}(m.GetMemoryLevel()).(clone.Cloner); ok {
		target.MemoryLevel = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	} else {
		target.MemoryLevel = proto.Clone(m.GetMemoryLevel()).(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	}

	if h, ok := interface{}(m.GetContentLength()).(clone.Cloner); ok {
		target.ContentLength = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	} else {
		target.ContentLength = proto.Clone(m.GetContentLength()).(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	}

	target.CompressionLevel = m.GetCompressionLevel()

	target.CompressionStrategy = m.GetCompressionStrategy()

	if m.GetContentType() != nil {
		target.ContentType = make([]string, len(m.GetContentType()))
		for idx, v := range m.GetContentType() {

			target.ContentType[idx] = v

		}
	}

	target.DisableOnEtagHeader = m.GetDisableOnEtagHeader()

	target.RemoveAcceptEncodingHeader = m.GetRemoveAcceptEncodingHeader()

	if h, ok := interface{}(m.GetWindowBits()).(clone.Cloner); ok {
		target.WindowBits = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	} else {
		target.WindowBits = proto.Clone(m.GetWindowBits()).(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	}

	return target
}

// Clone function
func (m *Gzip_CompressionLevel) Clone() proto.Message {
	var target *Gzip_CompressionLevel
	if m == nil {
		return target
	}
	target = &Gzip_CompressionLevel{}

	return target
}
