// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/config/common/mutation_rules/v3/mutation_rules.proto

package v3

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *HeaderMutationRules) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HeaderMutationRules)
	if !ok {
		that2, ok := that.(HeaderMutationRules)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetAllowAllRouting()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAllowAllRouting()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAllowAllRouting(), target.GetAllowAllRouting()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetAllowEnvoy()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAllowEnvoy()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAllowEnvoy(), target.GetAllowEnvoy()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetDisallowSystem()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDisallowSystem()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDisallowSystem(), target.GetDisallowSystem()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetDisallowAll()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDisallowAll()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDisallowAll(), target.GetDisallowAll()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetAllowExpression()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAllowExpression()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAllowExpression(), target.GetAllowExpression()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetDisallowExpression()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDisallowExpression()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDisallowExpression(), target.GetDisallowExpression()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetDisallowIsError()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDisallowIsError()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDisallowIsError(), target.GetDisallowIsError()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *HeaderMutation) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HeaderMutation)
	if !ok {
		that2, ok := that.(HeaderMutation)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.Action.(type) {

	case *HeaderMutation_Remove:
		if _, ok := target.Action.(*HeaderMutation_Remove); !ok {
			return false
		}

		if strings.Compare(m.GetRemove(), target.GetRemove()) != 0 {
			return false
		}

	case *HeaderMutation_Append:
		if _, ok := target.Action.(*HeaderMutation_Append); !ok {
			return false
		}

		if h, ok := interface{}(m.GetAppend()).(equality.Equalizer); ok {
			if !h.Equal(target.GetAppend()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetAppend(), target.GetAppend()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.Action != target.Action {
			return false
		}
	}

	return true
}
