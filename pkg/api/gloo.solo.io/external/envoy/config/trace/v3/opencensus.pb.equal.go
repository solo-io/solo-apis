// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/config/trace/v3/opencensus.proto

package v3

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *OpenCensusConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*OpenCensusConfig)
	if !ok {
		that2, ok := that.(OpenCensusConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetTraceConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTraceConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTraceConfig(), target.GetTraceConfig()) {
			return false
		}
	}

	if m.GetOcagentExporterEnabled() != target.GetOcagentExporterEnabled() {
		return false
	}

	if len(m.GetIncomingTraceContext()) != len(target.GetIncomingTraceContext()) {
		return false
	}
	for idx, v := range m.GetIncomingTraceContext() {

		if v != target.GetIncomingTraceContext()[idx] {
			return false
		}

	}

	if len(m.GetOutgoingTraceContext()) != len(target.GetOutgoingTraceContext()) {
		return false
	}
	for idx, v := range m.GetOutgoingTraceContext() {

		if v != target.GetOutgoingTraceContext()[idx] {
			return false
		}

	}

	switch m.OcagentAddress.(type) {

	case *OpenCensusConfig_HttpAddress:

		if strings.Compare(m.GetHttpAddress(), target.GetHttpAddress()) != 0 {
			return false
		}

	case *OpenCensusConfig_GrpcAddress:

		if h, ok := interface{}(m.GetGrpcAddress()).(equality.Equalizer); ok {
			if !h.Equal(target.GetGrpcAddress()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetGrpcAddress(), target.GetGrpcAddress()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *TraceConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*TraceConfig)
	if !ok {
		that2, ok := that.(TraceConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetMaxNumberOfAttributes() != target.GetMaxNumberOfAttributes() {
		return false
	}

	if m.GetMaxNumberOfAnnotations() != target.GetMaxNumberOfAnnotations() {
		return false
	}

	if m.GetMaxNumberOfMessageEvents() != target.GetMaxNumberOfMessageEvents() {
		return false
	}

	if m.GetMaxNumberOfLinks() != target.GetMaxNumberOfLinks() {
		return false
	}

	switch m.Sampler.(type) {

	case *TraceConfig_ProbabilitySampler:

		if h, ok := interface{}(m.GetProbabilitySampler()).(equality.Equalizer); ok {
			if !h.Equal(target.GetProbabilitySampler()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetProbabilitySampler(), target.GetProbabilitySampler()) {
				return false
			}
		}

	case *TraceConfig_ConstantSampler:

		if h, ok := interface{}(m.GetConstantSampler()).(equality.Equalizer); ok {
			if !h.Equal(target.GetConstantSampler()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetConstantSampler(), target.GetConstantSampler()) {
				return false
			}
		}

	case *TraceConfig_RateLimitingSampler:

		if h, ok := interface{}(m.GetRateLimitingSampler()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRateLimitingSampler()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRateLimitingSampler(), target.GetRateLimitingSampler()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ProbabilitySampler) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ProbabilitySampler)
	if !ok {
		that2, ok := that.(ProbabilitySampler)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetSamplingProbability() != target.GetSamplingProbability() {
		return false
	}

	return true
}

// Equal function
func (m *ConstantSampler) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ConstantSampler)
	if !ok {
		that2, ok := that.(ConstantSampler)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetDecision() != target.GetDecision() {
		return false
	}

	return true
}

// Equal function
func (m *RateLimitingSampler) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RateLimitingSampler)
	if !ok {
		that2, ok := that.(RateLimitingSampler)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetQps() != target.GetQps() {
		return false
	}

	return true
}

// Equal function
func (m *OpenCensusConfig_OcagentGrpcAddress) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*OpenCensusConfig_OcagentGrpcAddress)
	if !ok {
		that2, ok := that.(OpenCensusConfig_OcagentGrpcAddress)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetTargetUri(), target.GetTargetUri()) != 0 {
		return false
	}

	if strings.Compare(m.GetStatPrefix(), target.GetStatPrefix()) != 0 {
		return false
	}

	return true
}
