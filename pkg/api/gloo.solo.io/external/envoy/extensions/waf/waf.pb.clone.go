// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/extensions/waf/waf.proto

package waf

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *AuditLogging) Clone() proto.Message {
	var target *AuditLogging
	if m == nil {
		return target
	}
	target = &AuditLogging{}

	target.Action = m.GetAction()

	target.Location = m.GetLocation()

	return target
}

// Clone function
func (m *ModSecurity) Clone() proto.Message {
	var target *ModSecurity
	if m == nil {
		return target
	}
	target = &ModSecurity{}

	target.Disabled = m.GetDisabled()

	if m.GetRuleSets() != nil {
		target.RuleSets = make([]*RuleSet, len(m.GetRuleSets()))
		for idx, v := range m.GetRuleSets() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.RuleSets[idx] = h.Clone().(*RuleSet)
			} else {
				target.RuleSets[idx] = proto.Clone(v).(*RuleSet)
			}

		}
	}

	target.CustomInterventionMessage = m.GetCustomInterventionMessage()

	if h, ok := interface{}(m.GetAuditLogging()).(clone.Cloner); ok {
		target.AuditLogging = h.Clone().(*AuditLogging)
	} else {
		target.AuditLogging = proto.Clone(m.GetAuditLogging()).(*AuditLogging)
	}

	target.RequestHeadersOnly = m.GetRequestHeadersOnly()

	target.ResponseHeadersOnly = m.GetResponseHeadersOnly()

	target.RegressionLogs = m.GetRegressionLogs()

	return target
}

// Clone function
func (m *RuleSet) Clone() proto.Message {
	var target *RuleSet
	if m == nil {
		return target
	}
	target = &RuleSet{}

	target.RuleStr = m.GetRuleStr()

	if m.GetFiles() != nil {
		target.Files = make([]string, len(m.GetFiles()))
		for idx, v := range m.GetFiles() {

			target.Files[idx] = v

		}
	}

	target.Directory = m.GetDirectory()

	return target
}

// Clone function
func (m *ModSecurityPerRoute) Clone() proto.Message {
	var target *ModSecurityPerRoute
	if m == nil {
		return target
	}
	target = &ModSecurityPerRoute{}

	target.Disabled = m.GetDisabled()

	if m.GetRuleSets() != nil {
		target.RuleSets = make([]*RuleSet, len(m.GetRuleSets()))
		for idx, v := range m.GetRuleSets() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.RuleSets[idx] = h.Clone().(*RuleSet)
			} else {
				target.RuleSets[idx] = proto.Clone(v).(*RuleSet)
			}

		}
	}

	target.CustomInterventionMessage = m.GetCustomInterventionMessage()

	if h, ok := interface{}(m.GetAuditLogging()).(clone.Cloner); ok {
		target.AuditLogging = h.Clone().(*AuditLogging)
	} else {
		target.AuditLogging = proto.Clone(m.GetAuditLogging()).(*AuditLogging)
	}

	target.RequestHeadersOnly = m.GetRequestHeadersOnly()

	target.ResponseHeadersOnly = m.GetResponseHeadersOnly()

	return target
}
