// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/type/matcher/v3/string.proto

package v3

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/external/envoy/annotations"
	_ "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/external/udpa/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Specifies the way to match a string.
// [#next-free-field: 7]
type StringMatcher struct {
	// Types that are valid to be assigned to MatchPattern:
	//	*StringMatcher_Exact
	//	*StringMatcher_Prefix
	//	*StringMatcher_Suffix
	//	*StringMatcher_SafeRegex
	MatchPattern isStringMatcher_MatchPattern `protobuf_oneof:"match_pattern"`
	// If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no
	// effect for the safe_regex match.
	// For example, the matcher *data* will match both input string *Data* and *data* if set to true.
	IgnoreCase           bool     `protobuf:"varint,6,opt,name=ignore_case,json=ignoreCase,proto3" json:"ignore_case,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringMatcher) Reset()         { *m = StringMatcher{} }
func (m *StringMatcher) String() string { return proto.CompactTextString(m) }
func (*StringMatcher) ProtoMessage()    {}
func (*StringMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_950d81d21904dfa6, []int{0}
}
func (m *StringMatcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringMatcher.Unmarshal(m, b)
}
func (m *StringMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringMatcher.Marshal(b, m, deterministic)
}
func (m *StringMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringMatcher.Merge(m, src)
}
func (m *StringMatcher) XXX_Size() int {
	return xxx_messageInfo_StringMatcher.Size(m)
}
func (m *StringMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_StringMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_StringMatcher proto.InternalMessageInfo

type isStringMatcher_MatchPattern interface {
	isStringMatcher_MatchPattern()
	Equal(interface{}) bool
}

type StringMatcher_Exact struct {
	Exact string `protobuf:"bytes,1,opt,name=exact,proto3,oneof" json:"exact,omitempty"`
}
type StringMatcher_Prefix struct {
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}
type StringMatcher_Suffix struct {
	Suffix string `protobuf:"bytes,3,opt,name=suffix,proto3,oneof" json:"suffix,omitempty"`
}
type StringMatcher_SafeRegex struct {
	SafeRegex *RegexMatcher `protobuf:"bytes,5,opt,name=safe_regex,json=safeRegex,proto3,oneof" json:"safe_regex,omitempty"`
}

func (*StringMatcher_Exact) isStringMatcher_MatchPattern()     {}
func (*StringMatcher_Prefix) isStringMatcher_MatchPattern()    {}
func (*StringMatcher_Suffix) isStringMatcher_MatchPattern()    {}
func (*StringMatcher_SafeRegex) isStringMatcher_MatchPattern() {}

func (m *StringMatcher) GetMatchPattern() isStringMatcher_MatchPattern {
	if m != nil {
		return m.MatchPattern
	}
	return nil
}

func (m *StringMatcher) GetExact() string {
	if x, ok := m.GetMatchPattern().(*StringMatcher_Exact); ok {
		return x.Exact
	}
	return ""
}

func (m *StringMatcher) GetPrefix() string {
	if x, ok := m.GetMatchPattern().(*StringMatcher_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (m *StringMatcher) GetSuffix() string {
	if x, ok := m.GetMatchPattern().(*StringMatcher_Suffix); ok {
		return x.Suffix
	}
	return ""
}

func (m *StringMatcher) GetSafeRegex() *RegexMatcher {
	if x, ok := m.GetMatchPattern().(*StringMatcher_SafeRegex); ok {
		return x.SafeRegex
	}
	return nil
}

func (m *StringMatcher) GetIgnoreCase() bool {
	if m != nil {
		return m.IgnoreCase
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StringMatcher) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StringMatcher_Exact)(nil),
		(*StringMatcher_Prefix)(nil),
		(*StringMatcher_Suffix)(nil),
		(*StringMatcher_SafeRegex)(nil),
	}
}

// Specifies a list of ways to match a string.
type ListStringMatcher struct {
	Patterns             []*StringMatcher `protobuf:"bytes,1,rep,name=patterns,proto3" json:"patterns,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListStringMatcher) Reset()         { *m = ListStringMatcher{} }
func (m *ListStringMatcher) String() string { return proto.CompactTextString(m) }
func (*ListStringMatcher) ProtoMessage()    {}
func (*ListStringMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_950d81d21904dfa6, []int{1}
}
func (m *ListStringMatcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListStringMatcher.Unmarshal(m, b)
}
func (m *ListStringMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListStringMatcher.Marshal(b, m, deterministic)
}
func (m *ListStringMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStringMatcher.Merge(m, src)
}
func (m *ListStringMatcher) XXX_Size() int {
	return xxx_messageInfo_ListStringMatcher.Size(m)
}
func (m *ListStringMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStringMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_ListStringMatcher proto.InternalMessageInfo

func (m *ListStringMatcher) GetPatterns() []*StringMatcher {
	if m != nil {
		return m.Patterns
	}
	return nil
}

func init() {
	proto.RegisterType((*StringMatcher)(nil), "envoy.type.matcher.v3.StringMatcher")
	proto.RegisterType((*ListStringMatcher)(nil), "envoy.type.matcher.v3.ListStringMatcher")
}

func init() {
	proto.RegisterFile("github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/type/matcher/v3/string.proto", fileDescriptor_950d81d21904dfa6)
}

var fileDescriptor_950d81d21904dfa6 = []byte{
	// 487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x41, 0x8b, 0x13, 0x31,
	0x14, 0xde, 0x4c, 0x3b, 0x75, 0x36, 0x65, 0xa1, 0x0e, 0xab, 0x0e, 0x05, 0xd7, 0x69, 0xbb, 0x68,
	0x41, 0x4c, 0x60, 0x7b, 0xdb, 0xe3, 0x78, 0x59, 0x16, 0x95, 0x32, 0x82, 0x07, 0x2f, 0x25, 0x3b,
	0x4d, 0x67, 0x83, 0xdd, 0x49, 0x48, 0xd2, 0x61, 0x7a, 0xf3, 0x28, 0xe2, 0x69, 0x8f, 0xfe, 0x02,
	0xf1, 0x27, 0x78, 0x17, 0xbc, 0xfa, 0x17, 0xfc, 0x15, 0xb2, 0x27, 0x49, 0x32, 0x16, 0x4a, 0x47,
	0xf7, 0x32, 0xf3, 0xf2, 0xbe, 0xef, 0xbd, 0xf7, 0xbd, 0x97, 0x3c, 0xf8, 0x26, 0x67, 0xfa, 0x72,
	0x75, 0x81, 0x32, 0x7e, 0x85, 0x15, 0x5f, 0xf2, 0x67, 0x8c, 0xbb, 0x3f, 0x11, 0x4c, 0x61, 0x22,
	0x18, 0xce, 0x97, 0x9c, 0xbb, 0x0f, 0xad, 0x34, 0x95, 0x05, 0x59, 0x62, 0x5a, 0x94, 0x7c, 0x8d,
	0xf5, 0x5a, 0x50, 0x7c, 0x45, 0x74, 0x76, 0x49, 0x25, 0x2e, 0x27, 0x58, 0x69, 0xc9, 0x8a, 0x1c,
	0x09, 0xc9, 0x35, 0x0f, 0xef, 0x59, 0x0e, 0x32, 0x1c, 0x54, 0x73, 0x50, 0x39, 0xe9, 0x0f, 0x9a,
	0x43, 0x25, 0xcd, 0x69, 0xe5, 0x22, 0xfb, 0x23, 0x47, 0x21, 0x45, 0xc1, 0x35, 0xd1, 0x8c, 0x17,
	0x0a, 0xcf, 0xa9, 0x90, 0x34, 0xb3, 0x87, 0x9a, 0xf4, 0x70, 0x35, 0x17, 0x64, 0x8b, 0xa3, 0x34,
	0xd1, 0x2b, 0x55, 0xc3, 0x83, 0x1d, 0xb8, 0xa4, 0x52, 0x31, 0x5e, 0x6c, 0x04, 0xf6, 0x1f, 0x94,
	0x64, 0xc9, 0xe6, 0x44, 0x53, 0xfc, 0xd7, 0xa8, 0x81, 0xc3, 0x9c, 0xe7, 0xdc, 0x9a, 0xd8, 0x58,
	0xce, 0x3b, 0xfc, 0xea, 0xc1, 0x83, 0xd7, 0xb6, 0xc1, 0x97, 0x4e, 0x76, 0x78, 0x1f, 0xfa, 0xb4,
	0x22, 0x99, 0x8e, 0x40, 0x0c, 0xc6, 0xfb, 0x67, 0x7b, 0xa9, 0x3b, 0x86, 0x03, 0xd8, 0x11, 0x92,
	0x2e, 0x58, 0x15, 0x79, 0x06, 0x48, 0xee, 0xdc, 0x24, 0x6d, 0xe9, 0xc5, 0xe0, 0x6c, 0x2f, 0xad,
	0x01, 0x43, 0x51, 0xab, 0x85, 0xa1, 0xb4, 0x76, 0x28, 0x0e, 0x08, 0x5f, 0x41, 0xa8, 0xc8, 0x82,
	0xce, 0xec, 0x64, 0x22, 0x3f, 0x06, 0xe3, 0xee, 0xc9, 0x08, 0x35, 0x0e, 0x15, 0xa5, 0x86, 0x53,
	0xcb, 0x4a, 0x82, 0x9b, 0xc4, 0xff, 0x08, 0xbc, 0x9e, 0x49, 0xb6, 0x6f, 0x52, 0x58, 0x34, 0x7c,
	0x04, 0xbb, 0x2c, 0x2f, 0xb8, 0xa4, 0xb3, 0x8c, 0x28, 0x1a, 0x75, 0x62, 0x30, 0x0e, 0x52, 0xe8,
	0x5c, 0xcf, 0x89, 0xa2, 0xa7, 0x4f, 0x3e, 0x7f, 0xff, 0x70, 0x34, 0x84, 0x71, 0x43, 0x89, 0xad,
	0xbe, 0x93, 0x43, 0x78, 0x60, 0x81, 0x99, 0x20, 0xda, 0xbc, 0x87, 0xb0, 0xf5, 0x3b, 0x01, 0xe7,
	0xed, 0xa0, 0xdd, 0xf3, 0x53, 0xdf, 0xca, 0x1d, 0x7e, 0x02, 0xf0, 0xee, 0x0b, 0xa6, 0xf4, 0xf6,
	0xc0, 0xce, 0x61, 0x50, 0x87, 0xa8, 0x08, 0xc4, 0xad, 0x71, 0xf7, 0xe4, 0xf8, 0x1f, 0x0d, 0x6d,
	0x17, 0x34, 0x1d, 0x5d, 0x03, 0x2f, 0x00, 0xe9, 0x26, 0xfe, 0xf4, 0xa9, 0x51, 0xfb, 0x18, 0x1e,
	0x37, 0xc4, 0xef, 0x14, 0x4e, 0xae, 0xc1, 0x97, 0x5f, 0x47, 0xe0, 0xdb, 0xfb, 0x1f, 0x3f, 0x3b,
	0x5e, 0xcf, 0x83, 0x23, 0xc6, 0x5d, 0x5d, 0x21, 0x79, 0xb5, 0x6e, 0x96, 0x90, 0x74, 0x5d, 0x8a,
	0xa9, 0xb9, 0xfc, 0x29, 0x78, 0x3b, 0xfd, 0xef, 0x9a, 0x88, 0x77, 0xf9, 0x66, 0x55, 0x90, 0x71,
	0x23, 0x76, 0xdb, 0xb6, 0x5c, 0x74, 0xec, 0xbb, 0x9a, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0x45,
	0xab, 0x63, 0x55, 0x81, 0x03, 0x00, 0x00,
}

func (this *StringMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringMatcher)
	if !ok {
		that2, ok := that.(StringMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.MatchPattern == nil {
		if this.MatchPattern != nil {
			return false
		}
	} else if this.MatchPattern == nil {
		return false
	} else if !this.MatchPattern.Equal(that1.MatchPattern) {
		return false
	}
	if this.IgnoreCase != that1.IgnoreCase {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *StringMatcher_Exact) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringMatcher_Exact)
	if !ok {
		that2, ok := that.(StringMatcher_Exact)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Exact != that1.Exact {
		return false
	}
	return true
}
func (this *StringMatcher_Prefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringMatcher_Prefix)
	if !ok {
		that2, ok := that.(StringMatcher_Prefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	return true
}
func (this *StringMatcher_Suffix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringMatcher_Suffix)
	if !ok {
		that2, ok := that.(StringMatcher_Suffix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Suffix != that1.Suffix {
		return false
	}
	return true
}
func (this *StringMatcher_SafeRegex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringMatcher_SafeRegex)
	if !ok {
		that2, ok := that.(StringMatcher_SafeRegex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SafeRegex.Equal(that1.SafeRegex) {
		return false
	}
	return true
}
func (this *ListStringMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListStringMatcher)
	if !ok {
		that2, ok := that.(ListStringMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Patterns) != len(that1.Patterns) {
		return false
	}
	for i := range this.Patterns {
		if !this.Patterns[i].Equal(that1.Patterns[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
