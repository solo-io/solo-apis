// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/type/metadata/v3/metadata.proto

package v3

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *MetadataKey) Clone() proto.Message {
	var target *MetadataKey
	if m == nil {
		return target
	}
	target = &MetadataKey{}

	target.Key = m.GetKey()

	if m.GetPath() != nil {
		target.Path = make([]*MetadataKey_PathSegment, len(m.GetPath()))
		for idx, v := range m.GetPath() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Path[idx] = h.Clone().(*MetadataKey_PathSegment)
			} else {
				target.Path[idx] = proto.Clone(v).(*MetadataKey_PathSegment)
			}

		}
	}

	return target
}

// Clone function
func (m *MetadataKind) Clone() proto.Message {
	var target *MetadataKind
	if m == nil {
		return target
	}
	target = &MetadataKind{}

	switch m.Kind.(type) {

	case *MetadataKind_Request_:

		if h, ok := interface{}(m.GetRequest()).(clone.Cloner); ok {
			target.Kind = &MetadataKind_Request_{
				Request: h.Clone().(*MetadataKind_Request),
			}
		} else {
			target.Kind = &MetadataKind_Request_{
				Request: proto.Clone(m.GetRequest()).(*MetadataKind_Request),
			}
		}

	case *MetadataKind_Route_:

		if h, ok := interface{}(m.GetRoute()).(clone.Cloner); ok {
			target.Kind = &MetadataKind_Route_{
				Route: h.Clone().(*MetadataKind_Route),
			}
		} else {
			target.Kind = &MetadataKind_Route_{
				Route: proto.Clone(m.GetRoute()).(*MetadataKind_Route),
			}
		}

	case *MetadataKind_Cluster_:

		if h, ok := interface{}(m.GetCluster()).(clone.Cloner); ok {
			target.Kind = &MetadataKind_Cluster_{
				Cluster: h.Clone().(*MetadataKind_Cluster),
			}
		} else {
			target.Kind = &MetadataKind_Cluster_{
				Cluster: proto.Clone(m.GetCluster()).(*MetadataKind_Cluster),
			}
		}

	case *MetadataKind_Host_:

		if h, ok := interface{}(m.GetHost()).(clone.Cloner); ok {
			target.Kind = &MetadataKind_Host_{
				Host: h.Clone().(*MetadataKind_Host),
			}
		} else {
			target.Kind = &MetadataKind_Host_{
				Host: proto.Clone(m.GetHost()).(*MetadataKind_Host),
			}
		}

	}

	return target
}

// Clone function
func (m *MetadataKey_PathSegment) Clone() proto.Message {
	var target *MetadataKey_PathSegment
	if m == nil {
		return target
	}
	target = &MetadataKey_PathSegment{}

	switch m.Segment.(type) {

	case *MetadataKey_PathSegment_Key:

		target.Segment = &MetadataKey_PathSegment_Key{
			Key: m.GetKey(),
		}

	}

	return target
}

// Clone function
func (m *MetadataKind_Request) Clone() proto.Message {
	var target *MetadataKind_Request
	if m == nil {
		return target
	}
	target = &MetadataKind_Request{}

	return target
}

// Clone function
func (m *MetadataKind_Route) Clone() proto.Message {
	var target *MetadataKind_Route
	if m == nil {
		return target
	}
	target = &MetadataKind_Route{}

	return target
}

// Clone function
func (m *MetadataKind_Cluster) Clone() proto.Message {
	var target *MetadataKind_Cluster
	if m == nil {
		return target
	}
	target = &MetadataKind_Cluster{}

	return target
}

// Clone function
func (m *MetadataKind_Host) Clone() proto.Message {
	var target *MetadataKind_Host
	if m == nil {
		return target
	}
	target = &MetadataKind_Host{}

	return target
}
