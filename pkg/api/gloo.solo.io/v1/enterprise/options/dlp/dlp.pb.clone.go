// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gloo/v1/enterprise/options/dlp/dlp.proto

package dlp

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_extensions_transformation_ee "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/external/envoy/extensions/transformation_ee"

	github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_v1_core_matchers "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1/core/matchers"

	github_com_solo_io_solo_kit_pkg_api_external_envoy_type "github.com/solo-io/solo-kit/pkg/api/external/envoy/type"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *FilterConfig) Clone() proto.Message {
	var target *FilterConfig
	if m == nil {
		return target
	}
	target = &FilterConfig{}

	if m.GetDlpRules() != nil {
		target.DlpRules = make([]*DlpRule, len(m.GetDlpRules()))
		for idx, v := range m.GetDlpRules() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.DlpRules[idx] = h.Clone().(*DlpRule)
			} else {
				target.DlpRules[idx] = proto.Clone(v).(*DlpRule)
			}

		}
	}

	target.EnabledFor = m.GetEnabledFor()

	return target
}

// Clone function
func (m *DlpRule) Clone() proto.Message {
	var target *DlpRule
	if m == nil {
		return target
	}
	target = &DlpRule{}

	if h, ok := interface{}(m.GetMatcher()).(clone.Cloner); ok {
		target.Matcher = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_v1_core_matchers.Matcher)
	} else {
		target.Matcher = proto.Clone(m.GetMatcher()).(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_v1_core_matchers.Matcher)
	}

	if m.GetActions() != nil {
		target.Actions = make([]*Action, len(m.GetActions()))
		for idx, v := range m.GetActions() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Actions[idx] = h.Clone().(*Action)
			} else {
				target.Actions[idx] = proto.Clone(v).(*Action)
			}

		}
	}

	return target
}

// Clone function
func (m *Config) Clone() proto.Message {
	var target *Config
	if m == nil {
		return target
	}
	target = &Config{}

	if m.GetActions() != nil {
		target.Actions = make([]*Action, len(m.GetActions()))
		for idx, v := range m.GetActions() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Actions[idx] = h.Clone().(*Action)
			} else {
				target.Actions[idx] = proto.Clone(v).(*Action)
			}

		}
	}

	target.EnabledFor = m.GetEnabledFor()

	return target
}

// Clone function
func (m *Action) Clone() proto.Message {
	var target *Action
	if m == nil {
		return target
	}
	target = &Action{}

	target.ActionType = m.GetActionType()

	if h, ok := interface{}(m.GetCustomAction()).(clone.Cloner); ok {
		target.CustomAction = h.Clone().(*CustomAction)
	} else {
		target.CustomAction = proto.Clone(m.GetCustomAction()).(*CustomAction)
	}

	target.Shadow = m.GetShadow()

	return target
}

// Clone function
func (m *CustomAction) Clone() proto.Message {
	var target *CustomAction
	if m == nil {
		return target
	}
	target = &CustomAction{}

	target.Name = m.GetName()

	if m.GetRegex() != nil {
		target.Regex = make([]string, len(m.GetRegex()))
		for idx, v := range m.GetRegex() {

			target.Regex[idx] = v

		}
	}

	target.MaskChar = m.GetMaskChar()

	if h, ok := interface{}(m.GetPercent()).(clone.Cloner); ok {
		target.Percent = h.Clone().(*github_com_solo_io_solo_kit_pkg_api_external_envoy_type.Percent)
	} else {
		target.Percent = proto.Clone(m.GetPercent()).(*github_com_solo_io_solo_kit_pkg_api_external_envoy_type.Percent)
	}

	if m.GetRegexActions() != nil {
		target.RegexActions = make([]*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_extensions_transformation_ee.RegexAction, len(m.GetRegexActions()))
		for idx, v := range m.GetRegexActions() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.RegexActions[idx] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_extensions_transformation_ee.RegexAction)
			} else {
				target.RegexActions[idx] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_external_envoy_extensions_transformation_ee.RegexAction)
			}

		}
	}

	return target
}
