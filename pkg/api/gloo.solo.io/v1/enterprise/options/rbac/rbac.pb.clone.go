// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gloo/v1/enterprise/options/rbac/rbac.proto

package rbac

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *Settings) Clone() proto.Message {
	var target *Settings
	if m == nil {
		return target
	}
	target = &Settings{}

	target.RequireRbac = m.GetRequireRbac()

	return target
}

// Clone function
func (m *ExtensionSettings) Clone() proto.Message {
	var target *ExtensionSettings
	if m == nil {
		return target
	}
	target = &ExtensionSettings{}

	target.Disable = m.GetDisable()

	if m.GetPolicies() != nil {
		target.Policies = make(map[string]*Policy, len(m.GetPolicies()))
		for k, v := range m.GetPolicies() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Policies[k] = h.Clone().(*Policy)
			} else {
				target.Policies[k] = proto.Clone(v).(*Policy)
			}

		}
	}

	return target
}

// Clone function
func (m *Policy) Clone() proto.Message {
	var target *Policy
	if m == nil {
		return target
	}
	target = &Policy{}

	if m.GetPrincipals() != nil {
		target.Principals = make([]*Principal, len(m.GetPrincipals()))
		for idx, v := range m.GetPrincipals() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Principals[idx] = h.Clone().(*Principal)
			} else {
				target.Principals[idx] = proto.Clone(v).(*Principal)
			}

		}
	}

	if h, ok := interface{}(m.GetPermissions()).(clone.Cloner); ok {
		target.Permissions = h.Clone().(*Permissions)
	} else {
		target.Permissions = proto.Clone(m.GetPermissions()).(*Permissions)
	}

	target.NestedClaimDelimiter = m.GetNestedClaimDelimiter()

	return target
}

// Clone function
func (m *Principal) Clone() proto.Message {
	var target *Principal
	if m == nil {
		return target
	}
	target = &Principal{}

	if h, ok := interface{}(m.GetJwtPrincipal()).(clone.Cloner); ok {
		target.JwtPrincipal = h.Clone().(*JWTPrincipal)
	} else {
		target.JwtPrincipal = proto.Clone(m.GetJwtPrincipal()).(*JWTPrincipal)
	}

	return target
}

// Clone function
func (m *JWTPrincipal) Clone() proto.Message {
	var target *JWTPrincipal
	if m == nil {
		return target
	}
	target = &JWTPrincipal{}

	if m.GetClaims() != nil {
		target.Claims = make(map[string]string, len(m.GetClaims()))
		for k, v := range m.GetClaims() {

			target.Claims[k] = v

		}
	}

	target.Provider = m.GetProvider()

	target.Matcher = m.GetMatcher()

	return target
}

// Clone function
func (m *Permissions) Clone() proto.Message {
	var target *Permissions
	if m == nil {
		return target
	}
	target = &Permissions{}

	target.PathPrefix = m.GetPathPrefix()

	if m.GetMethods() != nil {
		target.Methods = make([]string, len(m.GetMethods()))
		for idx, v := range m.GetMethods() {

			target.Methods[idx] = v

		}
	}

	return target
}
