// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gloo/v1/upstream.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	cluster "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/external/envoy/api/v2/cluster"
	core "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/external/envoy/api/v2/core"
	aws "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1/options/aws"
	ec2 "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1/options/aws/ec2"
	azure "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1/options/azure"
	consul "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1/options/consul"
	kubernetes "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1/options/kubernetes"
	pipe "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1/options/pipe"
	static "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1/options/static"
	_ "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UpstreamStatus_State int32

const (
	// Pending status indicates the resource has not yet been validated
	UpstreamStatus_Pending UpstreamStatus_State = 0
	// Accepted indicates the resource has been validated
	UpstreamStatus_Accepted UpstreamStatus_State = 1
	// Rejected indicates an invalid configuration by the user
	// Rejected resources may be propagated to the xDS server depending on their severity
	UpstreamStatus_Rejected UpstreamStatus_State = 2
	// Warning indicates a partially invalid configuration by the user
	// Resources with Warnings may be partially accepted by a controller, depending on the implementation
	UpstreamStatus_Warning UpstreamStatus_State = 3
)

var UpstreamStatus_State_name = map[int32]string{
	0: "Pending",
	1: "Accepted",
	2: "Rejected",
	3: "Warning",
}

var UpstreamStatus_State_value = map[string]int32{
	"Pending":  0,
	"Accepted": 1,
	"Rejected": 2,
	"Warning":  3,
}

func (x UpstreamStatus_State) String() string {
	return proto.EnumName(UpstreamStatus_State_name, int32(x))
}

func (UpstreamStatus_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b862c53add601b7b, []int{2, 0}
}

//
// Upstreams represent destination for routing HTTP requests. Upstreams can be compared to
// [clusters](https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/cds.proto) in Envoy terminology.
// Each upstream in Gloo has a type. Supported types include `static`, `kubernetes`, `aws`, `consul`, and more.
// Each upstream type is handled by a corresponding Gloo plugin. (plugins currently need to be compiled into Gloo)
type UpstreamSpec struct {
	// Upstreams and their configuration can be automatically by Gloo Discovery
	// if this upstream is created or modified by Discovery, metadata about the operation will be placed here.
	DiscoveryMetadata *DiscoveryMetadata `protobuf:"bytes,3,opt,name=discovery_metadata,json=discoveryMetadata,proto3" json:"discovery_metadata,omitempty"`
	SslConfig         *UpstreamSslConfig `protobuf:"bytes,4,opt,name=ssl_config,json=sslConfig,proto3" json:"ssl_config,omitempty"`
	// Circuit breakers for this upstream. if not set, the defaults ones from the Gloo settings will be used.
	// if those are not set, [envoy's defaults](https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/cluster/circuit_breaker.proto#envoy-api-msg-cluster-circuitbreakers)
	// will be used.
	CircuitBreakers    *CircuitBreakerConfig     `protobuf:"bytes,5,opt,name=circuit_breakers,json=circuitBreakers,proto3" json:"circuit_breakers,omitempty"`
	LoadBalancerConfig *LoadBalancerConfig       `protobuf:"bytes,6,opt,name=load_balancer_config,json=loadBalancerConfig,proto3" json:"load_balancer_config,omitempty"`
	ConnectionConfig   *ConnectionConfig         `protobuf:"bytes,7,opt,name=connection_config,json=connectionConfig,proto3" json:"connection_config,omitempty"`
	HealthChecks       []*core.HealthCheck       `protobuf:"bytes,8,rep,name=health_checks,json=healthChecks,proto3" json:"health_checks,omitempty"`
	OutlierDetection   *cluster.OutlierDetection `protobuf:"bytes,9,opt,name=outlier_detection,json=outlierDetection,proto3" json:"outlier_detection,omitempty"`
	// Use http2 when communicating with this upstream
	// this field is evaluated `true` for upstreams
	// with a grpc service spec. otherwise defaults to `false`
	UseHttp2 *types.BoolValue `protobuf:"bytes,10,opt,name=use_http2,json=useHttp2,proto3" json:"use_http2,omitempty"`
	// Note to developers: new Upstream plugins must be added to this oneof field
	// to be usable by Gloo. (plugins currently need to be compiled into Gloo)
	//
	// Types that are valid to be assigned to UpstreamType:
	//	*UpstreamSpec_Kube
	//	*UpstreamSpec_Static
	//	*UpstreamSpec_Pipe
	//	*UpstreamSpec_Aws
	//	*UpstreamSpec_Azure
	//	*UpstreamSpec_Consul
	//	*UpstreamSpec_AwsEc2
	UpstreamType isUpstreamSpec_UpstreamType `protobuf_oneof:"upstream_type"`
	// Failover endpoints for this upstream. If omitted (the default) no failovers will be applied.
	Failover *Failover `protobuf:"bytes,18,opt,name=failover,proto3" json:"failover,omitempty"`
	// (UInt32Value) Initial stream-level flow-control window size.
	// Valid values range from 65535 (2^16 - 1, HTTP/2 default) to 2147483647 (2^31 - 1, HTTP/2 maximum)
	// and defaults to 268435456 (256 * 1024 * 1024).
	// NOTE: 65535 is the initial window size from HTTP/2 spec.
	// We only support increasing the default window size now, so itâ€™s also the minimum.
	// This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream
	// in the HTTP/2 codec buffers. Once the buffer reaches this pointer,
	// watermark callbacks will fire to stop the flow of data to the codec buffers.
	// Requires UseHttp2 to be true to be acknowledged.
	InitialStreamWindowSize *types.UInt32Value `protobuf:"bytes,19,opt,name=initial_stream_window_size,json=initialStreamWindowSize,proto3" json:"initial_stream_window_size,omitempty"`
	// (UInt32Value) Similar to initial_stream_window_size, but for connection-level flow-control window.
	// Currently, this has the same minimum/maximum/default as initial_stream_window_size.
	// Requires UseHttp2 to be true to be acknowledged.
	InitialConnectionWindowSize *types.UInt32Value `protobuf:"bytes,20,opt,name=initial_connection_window_size,json=initialConnectionWindowSize,proto3" json:"initial_connection_window_size,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}           `json:"-"`
	XXX_unrecognized            []byte             `json:"-"`
	XXX_sizecache               int32              `json:"-"`
}

func (m *UpstreamSpec) Reset()         { *m = UpstreamSpec{} }
func (m *UpstreamSpec) String() string { return proto.CompactTextString(m) }
func (*UpstreamSpec) ProtoMessage()    {}
func (*UpstreamSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b862c53add601b7b, []int{0}
}
func (m *UpstreamSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpstreamSpec.Unmarshal(m, b)
}
func (m *UpstreamSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpstreamSpec.Marshal(b, m, deterministic)
}
func (m *UpstreamSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamSpec.Merge(m, src)
}
func (m *UpstreamSpec) XXX_Size() int {
	return xxx_messageInfo_UpstreamSpec.Size(m)
}
func (m *UpstreamSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamSpec.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamSpec proto.InternalMessageInfo

type isUpstreamSpec_UpstreamType interface {
	isUpstreamSpec_UpstreamType()
	Equal(interface{}) bool
}

type UpstreamSpec_Kube struct {
	Kube *kubernetes.UpstreamSpec `protobuf:"bytes,11,opt,name=kube,proto3,oneof" json:"kube,omitempty"`
}
type UpstreamSpec_Static struct {
	Static *static.UpstreamSpec `protobuf:"bytes,12,opt,name=static,proto3,oneof" json:"static,omitempty"`
}
type UpstreamSpec_Pipe struct {
	Pipe *pipe.UpstreamSpec `protobuf:"bytes,13,opt,name=pipe,proto3,oneof" json:"pipe,omitempty"`
}
type UpstreamSpec_Aws struct {
	Aws *aws.UpstreamSpec `protobuf:"bytes,14,opt,name=aws,proto3,oneof" json:"aws,omitempty"`
}
type UpstreamSpec_Azure struct {
	Azure *azure.UpstreamSpec `protobuf:"bytes,15,opt,name=azure,proto3,oneof" json:"azure,omitempty"`
}
type UpstreamSpec_Consul struct {
	Consul *consul.UpstreamSpec `protobuf:"bytes,16,opt,name=consul,proto3,oneof" json:"consul,omitempty"`
}
type UpstreamSpec_AwsEc2 struct {
	AwsEc2 *ec2.UpstreamSpec `protobuf:"bytes,17,opt,name=aws_ec2,json=awsEc2,proto3,oneof" json:"aws_ec2,omitempty"`
}

func (*UpstreamSpec_Kube) isUpstreamSpec_UpstreamType()   {}
func (*UpstreamSpec_Static) isUpstreamSpec_UpstreamType() {}
func (*UpstreamSpec_Pipe) isUpstreamSpec_UpstreamType()   {}
func (*UpstreamSpec_Aws) isUpstreamSpec_UpstreamType()    {}
func (*UpstreamSpec_Azure) isUpstreamSpec_UpstreamType()  {}
func (*UpstreamSpec_Consul) isUpstreamSpec_UpstreamType() {}
func (*UpstreamSpec_AwsEc2) isUpstreamSpec_UpstreamType() {}

func (m *UpstreamSpec) GetUpstreamType() isUpstreamSpec_UpstreamType {
	if m != nil {
		return m.UpstreamType
	}
	return nil
}

func (m *UpstreamSpec) GetDiscoveryMetadata() *DiscoveryMetadata {
	if m != nil {
		return m.DiscoveryMetadata
	}
	return nil
}

func (m *UpstreamSpec) GetSslConfig() *UpstreamSslConfig {
	if m != nil {
		return m.SslConfig
	}
	return nil
}

func (m *UpstreamSpec) GetCircuitBreakers() *CircuitBreakerConfig {
	if m != nil {
		return m.CircuitBreakers
	}
	return nil
}

func (m *UpstreamSpec) GetLoadBalancerConfig() *LoadBalancerConfig {
	if m != nil {
		return m.LoadBalancerConfig
	}
	return nil
}

func (m *UpstreamSpec) GetConnectionConfig() *ConnectionConfig {
	if m != nil {
		return m.ConnectionConfig
	}
	return nil
}

func (m *UpstreamSpec) GetHealthChecks() []*core.HealthCheck {
	if m != nil {
		return m.HealthChecks
	}
	return nil
}

func (m *UpstreamSpec) GetOutlierDetection() *cluster.OutlierDetection {
	if m != nil {
		return m.OutlierDetection
	}
	return nil
}

func (m *UpstreamSpec) GetUseHttp2() *types.BoolValue {
	if m != nil {
		return m.UseHttp2
	}
	return nil
}

func (m *UpstreamSpec) GetKube() *kubernetes.UpstreamSpec {
	if x, ok := m.GetUpstreamType().(*UpstreamSpec_Kube); ok {
		return x.Kube
	}
	return nil
}

func (m *UpstreamSpec) GetStatic() *static.UpstreamSpec {
	if x, ok := m.GetUpstreamType().(*UpstreamSpec_Static); ok {
		return x.Static
	}
	return nil
}

func (m *UpstreamSpec) GetPipe() *pipe.UpstreamSpec {
	if x, ok := m.GetUpstreamType().(*UpstreamSpec_Pipe); ok {
		return x.Pipe
	}
	return nil
}

func (m *UpstreamSpec) GetAws() *aws.UpstreamSpec {
	if x, ok := m.GetUpstreamType().(*UpstreamSpec_Aws); ok {
		return x.Aws
	}
	return nil
}

func (m *UpstreamSpec) GetAzure() *azure.UpstreamSpec {
	if x, ok := m.GetUpstreamType().(*UpstreamSpec_Azure); ok {
		return x.Azure
	}
	return nil
}

func (m *UpstreamSpec) GetConsul() *consul.UpstreamSpec {
	if x, ok := m.GetUpstreamType().(*UpstreamSpec_Consul); ok {
		return x.Consul
	}
	return nil
}

func (m *UpstreamSpec) GetAwsEc2() *ec2.UpstreamSpec {
	if x, ok := m.GetUpstreamType().(*UpstreamSpec_AwsEc2); ok {
		return x.AwsEc2
	}
	return nil
}

func (m *UpstreamSpec) GetFailover() *Failover {
	if m != nil {
		return m.Failover
	}
	return nil
}

func (m *UpstreamSpec) GetInitialStreamWindowSize() *types.UInt32Value {
	if m != nil {
		return m.InitialStreamWindowSize
	}
	return nil
}

func (m *UpstreamSpec) GetInitialConnectionWindowSize() *types.UInt32Value {
	if m != nil {
		return m.InitialConnectionWindowSize
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpstreamSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpstreamSpec_Kube)(nil),
		(*UpstreamSpec_Static)(nil),
		(*UpstreamSpec_Pipe)(nil),
		(*UpstreamSpec_Aws)(nil),
		(*UpstreamSpec_Azure)(nil),
		(*UpstreamSpec_Consul)(nil),
		(*UpstreamSpec_AwsEc2)(nil),
	}
}

// created by discovery services
type DiscoveryMetadata struct {
	// Labels inherited from the original upstream (e.g. Kubernetes labels)
	Labels               map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DiscoveryMetadata) Reset()         { *m = DiscoveryMetadata{} }
func (m *DiscoveryMetadata) String() string { return proto.CompactTextString(m) }
func (*DiscoveryMetadata) ProtoMessage()    {}
func (*DiscoveryMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_b862c53add601b7b, []int{1}
}
func (m *DiscoveryMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscoveryMetadata.Unmarshal(m, b)
}
func (m *DiscoveryMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscoveryMetadata.Marshal(b, m, deterministic)
}
func (m *DiscoveryMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveryMetadata.Merge(m, src)
}
func (m *DiscoveryMetadata) XXX_Size() int {
	return xxx_messageInfo_DiscoveryMetadata.Size(m)
}
func (m *DiscoveryMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveryMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveryMetadata proto.InternalMessageInfo

func (m *DiscoveryMetadata) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type UpstreamStatus struct {
	// State is the enum indicating the state of the resource
	State UpstreamStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=gloo.solo.io.UpstreamStatus_State" json:"state,omitempty"`
	// Reason is a description of the error for Rejected resources. If the resource is pending or accepted, this field will be empty
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// Reference to the reporter who wrote this status
	ReportedBy string `protobuf:"bytes,3,opt,name=reported_by,json=reportedBy,proto3" json:"reported_by,omitempty"`
	// Reference to statuses (by resource-ref string: "Kind.Namespace.Name") of subresources of the parent resource
	SubresourceStatuses map[string]*UpstreamStatus `protobuf:"bytes,4,rep,name=subresource_statuses,json=subresourceStatuses,proto3" json:"subresource_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Opaque details about status results
	Details              *types.Struct `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UpstreamStatus) Reset()         { *m = UpstreamStatus{} }
func (m *UpstreamStatus) String() string { return proto.CompactTextString(m) }
func (*UpstreamStatus) ProtoMessage()    {}
func (*UpstreamStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b862c53add601b7b, []int{2}
}
func (m *UpstreamStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpstreamStatus.Unmarshal(m, b)
}
func (m *UpstreamStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpstreamStatus.Marshal(b, m, deterministic)
}
func (m *UpstreamStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamStatus.Merge(m, src)
}
func (m *UpstreamStatus) XXX_Size() int {
	return xxx_messageInfo_UpstreamStatus.Size(m)
}
func (m *UpstreamStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamStatus.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamStatus proto.InternalMessageInfo

func (m *UpstreamStatus) GetState() UpstreamStatus_State {
	if m != nil {
		return m.State
	}
	return UpstreamStatus_Pending
}

func (m *UpstreamStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *UpstreamStatus) GetReportedBy() string {
	if m != nil {
		return m.ReportedBy
	}
	return ""
}

func (m *UpstreamStatus) GetSubresourceStatuses() map[string]*UpstreamStatus {
	if m != nil {
		return m.SubresourceStatuses
	}
	return nil
}

func (m *UpstreamStatus) GetDetails() *types.Struct {
	if m != nil {
		return m.Details
	}
	return nil
}

func init() {
	proto.RegisterEnum("gloo.solo.io.UpstreamStatus_State", UpstreamStatus_State_name, UpstreamStatus_State_value)
	proto.RegisterType((*UpstreamSpec)(nil), "gloo.solo.io.UpstreamSpec")
	proto.RegisterType((*DiscoveryMetadata)(nil), "gloo.solo.io.DiscoveryMetadata")
	proto.RegisterMapType((map[string]string)(nil), "gloo.solo.io.DiscoveryMetadata.LabelsEntry")
	proto.RegisterType((*UpstreamStatus)(nil), "gloo.solo.io.UpstreamStatus")
	proto.RegisterMapType((map[string]*UpstreamStatus)(nil), "gloo.solo.io.UpstreamStatus.SubresourceStatusesEntry")
}

func init() {
	proto.RegisterFile("github.com/solo-io/solo-apis/api/gloo/gloo/v1/upstream.proto", fileDescriptor_b862c53add601b7b)
}

var fileDescriptor_b862c53add601b7b = []byte{
	// 1097 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xed, 0x6e, 0xdb, 0x36,
	0x17, 0xae, 0xe3, 0x7c, 0x32, 0x5f, 0x0e, 0x1b, 0xb4, 0x82, 0xdf, 0x22, 0x0d, 0x82, 0x17, 0x5b,
	0xba, 0xa2, 0xd4, 0xa2, 0x76, 0x5b, 0x56, 0xac, 0xc1, 0x66, 0x37, 0x43, 0x86, 0x35, 0xdb, 0x20,
	0xa3, 0x2b, 0xb6, 0x3f, 0x02, 0x4d, 0x9d, 0xd8, 0x9c, 0x15, 0x51, 0x10, 0x29, 0x3b, 0xce, 0x6d,
	0xec, 0x26, 0x76, 0x07, 0xdb, 0x0d, 0xec, 0x46, 0x76, 0x0f, 0xfb, 0x3f, 0x90, 0xa2, 0x1c, 0x7f,
	0x24, 0xae, 0xfa, 0x23, 0x12, 0x79, 0xf8, 0x3c, 0x0f, 0x4f, 0x0e, 0x79, 0x1e, 0x0b, 0x7d, 0xd5,
	0xe1, 0xaa, 0x9b, 0xb5, 0x09, 0x13, 0x97, 0xae, 0x14, 0x91, 0x78, 0xc6, 0x45, 0xfe, 0xa6, 0x09,
	0x97, 0x2e, 0x4d, 0xb8, 0xdb, 0x89, 0x84, 0xc8, 0x1f, 0xfd, 0x23, 0x37, 0x4b, 0xa4, 0x4a, 0x81,
	0x5e, 0x92, 0x24, 0x15, 0x4a, 0xe0, 0x0d, 0x1d, 0x27, 0x1a, 0x4f, 0xb8, 0xa8, 0x3f, 0xea, 0x08,
	0xd1, 0x89, 0xc0, 0x35, 0x6b, 0xed, 0xec, 0xc2, 0x95, 0x2a, 0xcd, 0x98, 0xca, 0xb1, 0xf5, 0xdd,
	0x8e, 0xe8, 0x08, 0x33, 0x74, 0xf5, 0xc8, 0x46, 0x31, 0x5c, 0xa9, 0x3c, 0x08, 0x57, 0x05, 0xf2,
	0xff, 0x73, 0x12, 0x90, 0x32, 0xb2, 0xa8, 0x4f, 0xe7, 0xa0, 0x18, 0x4f, 0x59, 0xc6, 0x55, 0xd0,
	0x4e, 0x81, 0xf6, 0x20, 0xb5, 0x0c, 0x32, 0x87, 0x11, 0x09, 0x1a, 0x06, 0x6d, 0x1a, 0xd1, 0x98,
	0x8d, 0xf0, 0x4f, 0xe7, 0xed, 0x20, 0xe2, 0x18, 0x98, 0xe2, 0x22, 0xb6, 0xe0, 0xd3, 0xbb, 0xc0,
	0x70, 0xa5, 0x20, 0x8d, 0x69, 0xe4, 0x42, 0xdc, 0x17, 0x43, 0xb3, 0xd8, 0xf7, 0x5c, 0x26, 0x52,
	0x70, 0xbb, 0x40, 0x23, 0xd5, 0x0d, 0x58, 0x17, 0x58, 0xcf, 0xca, 0x9c, 0x7f, 0xa0, 0x4c, 0x94,
	0x49, 0x05, 0xa9, 0x2b, 0x32, 0x15, 0x71, 0x48, 0x83, 0x10, 0xd4, 0x44, 0x56, 0x7b, 0x46, 0xae,
	0xc7, 0x55, 0x4e, 0x38, 0x72, 0x8b, 0xb9, 0x5d, 0xff, 0x7c, 0xce, 0xbf, 0x28, 0x12, 0x2d, 0x24,
	0x5d, 0xa9, 0xa8, 0xe2, 0xcc, 0xbe, 0x2c, 0xcf, 0x2b, 0xc1, 0x4b, 0x78, 0x02, 0xe6, 0x61, 0x39,
	0x27, 0x25, 0x38, 0xbd, 0xac, 0x0d, 0x69, 0x0c, 0x0a, 0xc6, 0x87, 0x25, 0x0e, 0xbc, 0xe0, 0xd3,
	0x81, 0xf9, 0xb3, 0x8c, 0x17, 0x65, 0x18, 0xd7, 0x59, 0x0a, 0xf9, 0xf3, 0x03, 0x6a, 0xc2, 0x44,
	0x2c, 0xb3, 0xc8, 0xbe, 0x2c, 0xef, 0xb8, 0x64, 0x7e, 0xc0, 0x3c, 0xfd, 0x0e, 0x80, 0x79, 0x96,
	0x79, 0xf8, 0x7e, 0xa6, 0x45, 0x3e, 0x99, 0x83, 0xbc, 0xa0, 0x3c, 0x12, 0xfd, 0xd1, 0xed, 0xdd,
	0x9b, 0xee, 0xc6, 0x41, 0x4a, 0x93, 0x04, 0x52, 0x2b, 0x75, 0xf0, 0x27, 0x42, 0x1b, 0x6f, 0x6d,
	0x3b, 0xb7, 0x12, 0x60, 0xf8, 0x07, 0x84, 0x43, 0x2e, 0x99, 0x96, 0x18, 0x06, 0x97, 0xa0, 0x68,
	0x48, 0x15, 0x75, 0xaa, 0xfb, 0x95, 0xc3, 0x75, 0xef, 0x31, 0x19, 0xef, 0x74, 0xf2, 0xba, 0xc0,
	0x9d, 0x5b, 0x98, 0xbf, 0x13, 0x4e, 0x87, 0xf0, 0x09, 0x42, 0x52, 0x46, 0x01, 0x13, 0xf1, 0x05,
	0xef, 0x38, 0x8b, 0xb7, 0xe9, 0x8c, 0xf6, 0x97, 0x51, 0xd3, 0xc0, 0xfc, 0x35, 0x59, 0x0c, 0xf1,
	0x39, 0xaa, 0x4d, 0xf5, 0xb1, 0x74, 0x96, 0x8c, 0xca, 0xc1, 0xa4, 0x4a, 0x33, 0x47, 0x35, 0x72,
	0x90, 0x15, 0xda, 0x66, 0x13, 0x51, 0x89, 0x7d, 0xb4, 0x3b, 0xd1, 0xe4, 0x45, 0x62, 0xcb, 0x46,
	0x72, 0x7f, 0x52, 0xf2, 0x8d, 0xa0, 0x61, 0xc3, 0x02, 0xad, 0x20, 0x8e, 0x66, 0x62, 0xf8, 0x7b,
	0xb4, 0x73, 0x63, 0x04, 0x85, 0xe0, 0x8a, 0x11, 0xdc, 0x9b, 0xca, 0x71, 0x04, 0xb3, 0x72, 0x35,
	0x36, 0x15, 0xc1, 0x4d, 0xb4, 0x39, 0x6e, 0x08, 0xd2, 0x59, 0xdd, 0xaf, 0x1a, 0x21, 0xd3, 0xf1,
	0x84, 0x26, 0x9c, 0xf4, 0x3d, 0xa2, 0x8d, 0x83, 0x9c, 0x19, 0x5c, 0x53, 0xc3, 0xfc, 0x8d, 0xee,
	0xcd, 0x44, 0xe2, 0x16, 0xda, 0x99, 0xf1, 0x02, 0x67, 0xcd, 0x64, 0xf4, 0xd1, 0x94, 0x50, 0x6e,
	0x1d, 0xe4, 0xc7, 0x1c, 0xfe, 0xba, 0x40, 0xfb, 0x35, 0x31, 0x15, 0xc1, 0x5f, 0xa0, 0xb5, 0x4c,
	0x42, 0xd0, 0x55, 0x2a, 0xf1, 0x1c, 0x64, 0xc4, 0xea, 0x24, 0xbf, 0x5e, 0xa4, 0xb8, 0x5e, 0xa4,
	0x21, 0x44, 0xf4, 0x33, 0x8d, 0x32, 0xf0, 0x57, 0x33, 0x09, 0x67, 0x1a, 0x8b, 0x9b, 0x68, 0x51,
	0xb7, 0xb1, 0xb3, 0x6e, 0x38, 0xcf, 0xc8, 0x58, 0x4f, 0x17, 0xf7, 0xfa, 0xf6, 0xfb, 0x90, 0x00,
	0x3b, 0xbb, 0xe7, 0x1b, 0x32, 0x6e, 0xa2, 0xe5, 0xdc, 0x7b, 0x9c, 0x0d, 0x23, 0xf3, 0x84, 0x58,
	0x2b, 0x2a, 0x23, 0x61, 0xa9, 0xf8, 0x15, 0x5a, 0xd4, 0x56, 0xe4, 0x6c, 0x1a, 0x89, 0x8f, 0x89,
	0xf1, 0xa5, 0x52, 0x39, 0x68, 0x24, 0x7e, 0x89, 0xaa, 0x74, 0x20, 0x9d, 0x2d, 0x5b, 0x48, 0x6d,
	0x31, 0x65, 0xc8, 0x9a, 0x84, 0xbf, 0x46, 0x4b, 0xc6, 0x5e, 0x9c, 0x6d, 0xc3, 0x3e, 0x24, 0xb9,
	0xd9, 0x94, 0xe1, 0xe7, 0x44, 0x5d, 0x81, 0xdc, 0x69, 0x9c, 0x9a, 0xad, 0x80, 0x35, 0x9e, 0x52,
	0x15, 0xc8, 0xb1, 0xf8, 0x14, 0xad, 0x58, 0xd7, 0x71, 0x76, 0x8c, 0xca, 0x27, 0xa4, 0x70, 0xa1,
	0x52, 0x32, 0x74, 0x20, 0x4f, 0x99, 0x87, 0x3d, 0xb4, 0x5a, 0x18, 0x8d, 0x83, 0x8d, 0xce, 0x83,
	0x49, 0xde, 0xb7, 0x76, 0xd5, 0x1f, 0xe1, 0xf0, 0x2f, 0xa8, 0xce, 0x63, 0xae, 0x38, 0x8d, 0x82,
	0x5c, 0x33, 0x18, 0xf0, 0x38, 0x14, 0x83, 0x40, 0xf2, 0x6b, 0x70, 0xee, 0x1b, 0x95, 0x47, 0x33,
	0x17, 0xea, 0xed, 0x77, 0xb1, 0x7a, 0xee, 0xe5, 0x57, 0xea, 0xa1, 0xe5, 0xb7, 0x0c, 0xfd, 0x9d,
	0x61, 0xb7, 0xf8, 0x35, 0x60, 0x8a, 0xf6, 0x0a, 0xe9, 0xb1, 0x4e, 0x1c, 0x97, 0xdf, 0x2d, 0x21,
	0xff, 0x3f, 0xab, 0x71, 0xd3, 0xa5, 0x37, 0x5b, 0x34, 0xb6, 0xd1, 0x66, 0xf1, 0xd9, 0x13, 0xa8,
	0x61, 0x02, 0x07, 0xbf, 0x57, 0xd0, 0xce, 0x8c, 0x03, 0xea, 0x43, 0x8a, 0x68, 0x1b, 0x22, 0xe9,
	0x54, 0x4c, 0xdf, 0x3e, 0x7d, 0x8f, 0x65, 0x92, 0x37, 0x06, 0x7d, 0x1a, 0xab, 0x74, 0xe8, 0x5b,
	0x6a, 0xfd, 0x4b, 0xb4, 0x3e, 0x16, 0xc6, 0x35, 0x54, 0xed, 0xc1, 0xd0, 0xa9, 0xec, 0x57, 0x0e,
	0xd7, 0x7c, 0x3d, 0xc4, 0xbb, 0x68, 0xa9, 0xaf, 0x53, 0x76, 0x16, 0x4c, 0x2c, 0x9f, 0xbc, 0x5c,
	0x38, 0xae, 0x1c, 0xfc, 0x5d, 0x45, 0x5b, 0xa3, 0x33, 0x53, 0x54, 0x65, 0x12, 0x1f, 0xa3, 0x25,
	0x7d, 0xfd, 0xc1, 0x08, 0x6c, 0x4d, 0xdb, 0xe6, 0x24, 0x98, 0xe8, 0x17, 0xf8, 0x39, 0x01, 0x3f,
	0x40, 0xcb, 0x29, 0x50, 0x29, 0x62, 0xbb, 0x8f, 0x9d, 0xe1, 0xc7, 0x68, 0x3d, 0x85, 0x44, 0xa4,
	0x0a, 0xc2, 0xa0, 0x3d, 0x34, 0x3f, 0x0e, 0x6b, 0x3e, 0x2a, 0x42, 0x8d, 0x21, 0xee, 0xa2, 0x5d,
	0x99, 0xb5, 0x53, 0x90, 0x22, 0x4b, 0x19, 0x04, 0xd2, 0x68, 0x83, 0x74, 0x16, 0x4d, 0x4d, 0x3e,
	0x9b, 0x9f, 0xc1, 0x0d, 0xb1, 0x65, 0x79, 0x79, 0x75, 0xee, 0xcb, 0xd9, 0x15, 0x7c, 0x84, 0x56,
	0x42, 0x50, 0x94, 0x47, 0xc5, 0xaf, 0xc2, 0xc3, 0x99, 0x23, 0x6e, 0x99, 0xef, 0x4f, 0xbf, 0xc0,
	0xd5, 0x43, 0xe4, 0xdc, 0xb5, 0xc7, 0x2d, 0xa5, 0xf6, 0xc6, 0x4b, 0x6d, 0x6e, 0xd0, 0xdd, 0xb9,
	0x8f, 0x1f, 0xc4, 0x2b, 0xb4, 0x64, 0x6a, 0x89, 0xd7, 0xd1, 0xca, 0x4f, 0x10, 0x87, 0x3c, 0xee,
	0xd4, 0xee, 0xe1, 0x0d, 0xb4, 0xfa, 0x0d, 0x63, 0x90, 0x28, 0x08, 0x6b, 0x15, 0x3d, 0xf3, 0xe1,
	0x37, 0x60, 0x7a, 0xb6, 0xa0, 0x81, 0xef, 0x68, 0x1a, 0x6b, 0x60, 0xb5, 0x71, 0xf2, 0xd7, 0xbf,
	0x8b, 0x95, 0x3f, 0xfe, 0xd9, 0xab, 0xfc, 0xfa, 0x62, 0xee, 0xb7, 0x79, 0xd2, 0xeb, 0x8c, 0xbe,
	0x01, 0x8a, 0xac, 0xdc, 0xfe, 0x51, 0x7b, 0xd9, 0xfc, 0xfb, 0xcf, 0xff, 0x0b, 0x00, 0x00, 0xff,
	0xff, 0x54, 0x17, 0x56, 0x9c, 0xda, 0x0b, 0x00, 0x00,
}

func (this *UpstreamSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec)
	if !ok {
		that2, ok := that.(UpstreamSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DiscoveryMetadata.Equal(that1.DiscoveryMetadata) {
		return false
	}
	if !this.SslConfig.Equal(that1.SslConfig) {
		return false
	}
	if !this.CircuitBreakers.Equal(that1.CircuitBreakers) {
		return false
	}
	if !this.LoadBalancerConfig.Equal(that1.LoadBalancerConfig) {
		return false
	}
	if !this.ConnectionConfig.Equal(that1.ConnectionConfig) {
		return false
	}
	if len(this.HealthChecks) != len(that1.HealthChecks) {
		return false
	}
	for i := range this.HealthChecks {
		if !this.HealthChecks[i].Equal(that1.HealthChecks[i]) {
			return false
		}
	}
	if !this.OutlierDetection.Equal(that1.OutlierDetection) {
		return false
	}
	if !this.UseHttp2.Equal(that1.UseHttp2) {
		return false
	}
	if that1.UpstreamType == nil {
		if this.UpstreamType != nil {
			return false
		}
	} else if this.UpstreamType == nil {
		return false
	} else if !this.UpstreamType.Equal(that1.UpstreamType) {
		return false
	}
	if !this.Failover.Equal(that1.Failover) {
		return false
	}
	if !this.InitialStreamWindowSize.Equal(that1.InitialStreamWindowSize) {
		return false
	}
	if !this.InitialConnectionWindowSize.Equal(that1.InitialConnectionWindowSize) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpstreamSpec_Kube) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec_Kube)
	if !ok {
		that2, ok := that.(UpstreamSpec_Kube)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Kube.Equal(that1.Kube) {
		return false
	}
	return true
}
func (this *UpstreamSpec_Static) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec_Static)
	if !ok {
		that2, ok := that.(UpstreamSpec_Static)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Static.Equal(that1.Static) {
		return false
	}
	return true
}
func (this *UpstreamSpec_Pipe) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec_Pipe)
	if !ok {
		that2, ok := that.(UpstreamSpec_Pipe)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pipe.Equal(that1.Pipe) {
		return false
	}
	return true
}
func (this *UpstreamSpec_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec_Aws)
	if !ok {
		that2, ok := that.(UpstreamSpec_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *UpstreamSpec_Azure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec_Azure)
	if !ok {
		that2, ok := that.(UpstreamSpec_Azure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Azure.Equal(that1.Azure) {
		return false
	}
	return true
}
func (this *UpstreamSpec_Consul) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec_Consul)
	if !ok {
		that2, ok := that.(UpstreamSpec_Consul)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Consul.Equal(that1.Consul) {
		return false
	}
	return true
}
func (this *UpstreamSpec_AwsEc2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec_AwsEc2)
	if !ok {
		that2, ok := that.(UpstreamSpec_AwsEc2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsEc2.Equal(that1.AwsEc2) {
		return false
	}
	return true
}
func (this *DiscoveryMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DiscoveryMetadata)
	if !ok {
		that2, ok := that.(DiscoveryMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpstreamStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamStatus)
	if !ok {
		that2, ok := that.(UpstreamStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.ReportedBy != that1.ReportedBy {
		return false
	}
	if len(this.SubresourceStatuses) != len(that1.SubresourceStatuses) {
		return false
	}
	for i := range this.SubresourceStatuses {
		if !this.SubresourceStatuses[i].Equal(that1.SubresourceStatuses[i]) {
			return false
		}
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
