// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gloo/v1/settings.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v1 "github.com/solo-io/solo-apis/pkg/api/enterprise.gloo.solo.io/v1"
	aws "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/external/envoy/extensions/aws"
	ratelimit "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1/enterprise/options/ratelimit"
	rbac "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1/enterprise/options/rbac"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Possible modes for running the function discovery service (FDS). FDS polls services in-cluster for Swagger
// and gRPC endpoints. This behavior can be controlled with the use of annotations.
// FdsMode specifies what policy FDS will use when determining which services to poll.
type SettingsSpec_DiscoveryOptions_FdsMode int32

const (
	// In BLACKLIST mode (default), FDS will poll all services in cluster except those services labeled with
	// `discovery.solo.io/function_discovery=disabled`. This label can also be used on namespaces to apply to
	// all services within a namespace **which are not explicitly whitelisted**.
	// Note that `kube-system` and `kube-public` namespaces must be explicitly whitelisted even in blacklist mode.
	SettingsSpec_DiscoveryOptions_BLACKLIST SettingsSpec_DiscoveryOptions_FdsMode = 0
	// In WHITELIST mode, FDS will poll only services in cluster labeled with
	// `discovery.solo.io/function_discovery=enabled`. This label can also be used on namespaces to apply to all
	// services **which are not explicitly blacklisted** within a namespace.
	SettingsSpec_DiscoveryOptions_WHITELIST SettingsSpec_DiscoveryOptions_FdsMode = 1
	// In DISABLED mode, FDS will not run.
	SettingsSpec_DiscoveryOptions_DISABLED SettingsSpec_DiscoveryOptions_FdsMode = 2
)

var SettingsSpec_DiscoveryOptions_FdsMode_name = map[int32]string{
	0: "BLACKLIST",
	1: "WHITELIST",
	2: "DISABLED",
}

var SettingsSpec_DiscoveryOptions_FdsMode_value = map[string]int32{
	"BLACKLIST": 0,
	"WHITELIST": 1,
	"DISABLED":  2,
}

func (x SettingsSpec_DiscoveryOptions_FdsMode) String() string {
	return proto.EnumName(SettingsSpec_DiscoveryOptions_FdsMode_name, int32(x))
}

func (SettingsSpec_DiscoveryOptions_FdsMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{0, 7, 0}
}

type SettingsStatus_State int32

const (
	// Pending status indicates the resource has not yet been validated
	SettingsStatus_Pending SettingsStatus_State = 0
	// Accepted indicates the resource has been validated
	SettingsStatus_Accepted SettingsStatus_State = 1
	// Rejected indicates an invalid configuration by the user
	// Rejected resources may be propagated to the xDS server depending on their severity
	SettingsStatus_Rejected SettingsStatus_State = 2
	// Warning indicates a partially invalid configuration by the user
	// Resources with Warnings may be partially accepted by a controller, depending on the implementation
	SettingsStatus_Warning SettingsStatus_State = 3
)

var SettingsStatus_State_name = map[int32]string{
	0: "Pending",
	1: "Accepted",
	2: "Rejected",
	3: "Warning",
}

var SettingsStatus_State_value = map[string]int32{
	"Pending":  0,
	"Accepted": 1,
	"Rejected": 2,
	"Warning":  3,
}

func (x SettingsStatus_State) String() string {
	return proto.EnumName(SettingsStatus_State_name, int32(x))
}

func (SettingsStatus_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{3, 0}
}

// Represents global settings for all the Gloo components.
type SettingsSpec struct {
	// This is the namespace to which Gloo controllers will write their own resources, e.g. discovered Upstreams or default Gateways.
	// If empty, this will default to "gloo-system".
	DiscoveryNamespace string `protobuf:"bytes,1,opt,name=discovery_namespace,json=discoveryNamespace,proto3" json:"discovery_namespace,omitempty"`
	// Use this setting to restrict the namespaces that Gloo controllers take into consideration when watching for resources.In a
	// usual production scenario, RBAC policies will limit the namespaces that Gloo has access to. If `watch_namespaces`
	// contains namespaces outside of this whitelist, Gloo will fail to start.
	//
	// If not set, this defaults to all available namespaces. Please note that, the `discovery_namespace` will always
	// be included in this list.
	WatchNamespaces []string `protobuf:"bytes,2,rep,name=watch_namespaces,json=watchNamespaces,proto3" json:"watch_namespaces,omitempty"`
	// This setting determines where Gloo controllers will store its resources
	//
	// Types that are valid to be assigned to ConfigSource:
	//	*SettingsSpec_KubernetesConfigSource
	//	*SettingsSpec_DirectoryConfigSource
	//	*SettingsSpec_ConsulKvSource
	ConfigSource isSettingsSpec_ConfigSource `protobuf_oneof:"config_source"`
	// Determines where Gloo will read/write secrets from/to.
	//
	// Types that are valid to be assigned to SecretSource:
	//	*SettingsSpec_KubernetesSecretSource
	//	*SettingsSpec_VaultSecretSource
	//	*SettingsSpec_DirectorySecretSource
	SecretSource isSettingsSpec_SecretSource `protobuf_oneof:"secret_source"`
	// Where to read artifacts from.
	//
	// Types that are valid to be assigned to ArtifactSource:
	//	*SettingsSpec_KubernetesArtifactSource
	//	*SettingsSpec_DirectoryArtifactSource
	//	*SettingsSpec_ConsulKvArtifactSource
	ArtifactSource isSettingsSpec_ArtifactSource `protobuf_oneof:"artifact_source"`
	// How frequently to resync watches, etc
	RefreshRate *types.Duration `protobuf:"bytes,12,opt,name=refresh_rate,json=refreshRate,proto3" json:"refresh_rate,omitempty"`
	// Enable serving debug data on port 9090
	DevMode bool `protobuf:"varint,13,opt,name=dev_mode,json=devMode,proto3" json:"dev_mode,omitempty"`
	// Enable automatic linkerd upstream header addition for easier routing to linkerd services
	Linkerd bool `protobuf:"varint,17,opt,name=linkerd,proto3" json:"linkerd,omitempty"`
	// Configuration options for the Clusteringress Controller (for Knative).
	Knative *SettingsSpec_KnativeOptions `protobuf:"bytes,18,opt,name=knative,proto3" json:"knative,omitempty"`
	// Options for configuring Gloo's Discovery service
	Discovery *SettingsSpec_DiscoveryOptions `protobuf:"bytes,19,opt,name=discovery,proto3" json:"discovery,omitempty"`
	// Options for configuring `gloo`, the core Gloo controller,
	// which serves dynamic configuration to Envoy
	Gloo *GlooOptions `protobuf:"bytes,24,opt,name=gloo,proto3" json:"gloo,omitempty"`
	// Options for configuring `gateway`, the Gateway Gloo controller,
	// which enables the VirtualService/Gateway API in Gloo
	Gateway *GatewayOptions `protobuf:"bytes,25,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// Options to configure Gloo's integration with [HashiCorp Consul](https://www.consul.io/).
	Consul          *SettingsSpec_ConsulConfiguration                  `protobuf:"bytes,20,opt,name=consul,proto3" json:"consul,omitempty"`
	ConsulDiscovery *SettingsSpec_ConsulUpstreamDiscoveryConfiguration `protobuf:"bytes,30,opt,name=consulDiscovery,proto3" json:"consulDiscovery,omitempty"`
	// Options to configure Gloo's integration with [Kubernetes](https://www.kubernetes.io/).
	Kubernetes *SettingsSpec_KubernetesConfiguration `protobuf:"bytes,22,opt,name=kubernetes,proto3" json:"kubernetes,omitempty"`
	// Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
	// underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
	//
	// Some sample use cases:
	// * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
	// * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
	// Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
	Extensions *Extensions `protobuf:"bytes,16,opt,name=extensions,proto3" json:"extensions,omitempty"`
	// Enterprise-only: Partial config for GlooE's rate-limiting service, based on Envoy's rate-limit service;
	// supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
	// Configure rate-limit *descriptors* here, which define the limits for requests based on their descriptors.
	// Configure rate-limits (composed of *actions*, which define how request characteristics get translated into
	// descriptors) on the VirtualHost or its routes
	Ratelimit *ratelimit.ServiceSettings `protobuf:"bytes,26,opt,name=ratelimit,proto3" json:"ratelimit,omitempty"`
	// Enterprise-only: Settings for the rate limiting server itself
	RatelimitServer *ratelimit.Settings `protobuf:"bytes,27,opt,name=ratelimit_server,json=ratelimitServer,proto3" json:"ratelimit_server,omitempty"`
	// Enterprise-only: Settings for RBAC across all Gloo resources (VirtualServices, Routes, etc.)
	Rbac *rbac.Settings `protobuf:"bytes,28,opt,name=rbac,proto3" json:"rbac,omitempty"`
	// Enterprise-only: External auth related settings
	Extauth              *v1.Settings `protobuf:"bytes,29,opt,name=extauth,proto3" json:"extauth,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SettingsSpec) Reset()         { *m = SettingsSpec{} }
func (m *SettingsSpec) String() string { return proto.CompactTextString(m) }
func (*SettingsSpec) ProtoMessage()    {}
func (*SettingsSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{0}
}
func (m *SettingsSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettingsSpec.Unmarshal(m, b)
}
func (m *SettingsSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettingsSpec.Marshal(b, m, deterministic)
}
func (m *SettingsSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingsSpec.Merge(m, src)
}
func (m *SettingsSpec) XXX_Size() int {
	return xxx_messageInfo_SettingsSpec.Size(m)
}
func (m *SettingsSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingsSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SettingsSpec proto.InternalMessageInfo

type isSettingsSpec_ConfigSource interface {
	isSettingsSpec_ConfigSource()
	Equal(interface{}) bool
}
type isSettingsSpec_SecretSource interface {
	isSettingsSpec_SecretSource()
	Equal(interface{}) bool
}
type isSettingsSpec_ArtifactSource interface {
	isSettingsSpec_ArtifactSource()
	Equal(interface{}) bool
}

type SettingsSpec_KubernetesConfigSource struct {
	KubernetesConfigSource *SettingsSpec_KubernetesCrds `protobuf:"bytes,4,opt,name=kubernetes_config_source,json=kubernetesConfigSource,proto3,oneof" json:"kubernetes_config_source,omitempty"`
}
type SettingsSpec_DirectoryConfigSource struct {
	DirectoryConfigSource *SettingsSpec_Directory `protobuf:"bytes,5,opt,name=directory_config_source,json=directoryConfigSource,proto3,oneof" json:"directory_config_source,omitempty"`
}
type SettingsSpec_ConsulKvSource struct {
	ConsulKvSource *SettingsSpec_ConsulKv `protobuf:"bytes,21,opt,name=consul_kv_source,json=consulKvSource,proto3,oneof" json:"consul_kv_source,omitempty"`
}
type SettingsSpec_KubernetesSecretSource struct {
	KubernetesSecretSource *SettingsSpec_KubernetesSecrets `protobuf:"bytes,6,opt,name=kubernetes_secret_source,json=kubernetesSecretSource,proto3,oneof" json:"kubernetes_secret_source,omitempty"`
}
type SettingsSpec_VaultSecretSource struct {
	VaultSecretSource *SettingsSpec_VaultSecrets `protobuf:"bytes,7,opt,name=vault_secret_source,json=vaultSecretSource,proto3,oneof" json:"vault_secret_source,omitempty"`
}
type SettingsSpec_DirectorySecretSource struct {
	DirectorySecretSource *SettingsSpec_Directory `protobuf:"bytes,8,opt,name=directory_secret_source,json=directorySecretSource,proto3,oneof" json:"directory_secret_source,omitempty"`
}
type SettingsSpec_KubernetesArtifactSource struct {
	KubernetesArtifactSource *SettingsSpec_KubernetesConfigmaps `protobuf:"bytes,9,opt,name=kubernetes_artifact_source,json=kubernetesArtifactSource,proto3,oneof" json:"kubernetes_artifact_source,omitempty"`
}
type SettingsSpec_DirectoryArtifactSource struct {
	DirectoryArtifactSource *SettingsSpec_Directory `protobuf:"bytes,10,opt,name=directory_artifact_source,json=directoryArtifactSource,proto3,oneof" json:"directory_artifact_source,omitempty"`
}
type SettingsSpec_ConsulKvArtifactSource struct {
	ConsulKvArtifactSource *SettingsSpec_ConsulKv `protobuf:"bytes,23,opt,name=consul_kv_artifact_source,json=consulKvArtifactSource,proto3,oneof" json:"consul_kv_artifact_source,omitempty"`
}

func (*SettingsSpec_KubernetesConfigSource) isSettingsSpec_ConfigSource()     {}
func (*SettingsSpec_DirectoryConfigSource) isSettingsSpec_ConfigSource()      {}
func (*SettingsSpec_ConsulKvSource) isSettingsSpec_ConfigSource()             {}
func (*SettingsSpec_KubernetesSecretSource) isSettingsSpec_SecretSource()     {}
func (*SettingsSpec_VaultSecretSource) isSettingsSpec_SecretSource()          {}
func (*SettingsSpec_DirectorySecretSource) isSettingsSpec_SecretSource()      {}
func (*SettingsSpec_KubernetesArtifactSource) isSettingsSpec_ArtifactSource() {}
func (*SettingsSpec_DirectoryArtifactSource) isSettingsSpec_ArtifactSource()  {}
func (*SettingsSpec_ConsulKvArtifactSource) isSettingsSpec_ArtifactSource()   {}

func (m *SettingsSpec) GetConfigSource() isSettingsSpec_ConfigSource {
	if m != nil {
		return m.ConfigSource
	}
	return nil
}
func (m *SettingsSpec) GetSecretSource() isSettingsSpec_SecretSource {
	if m != nil {
		return m.SecretSource
	}
	return nil
}
func (m *SettingsSpec) GetArtifactSource() isSettingsSpec_ArtifactSource {
	if m != nil {
		return m.ArtifactSource
	}
	return nil
}

func (m *SettingsSpec) GetDiscoveryNamespace() string {
	if m != nil {
		return m.DiscoveryNamespace
	}
	return ""
}

func (m *SettingsSpec) GetWatchNamespaces() []string {
	if m != nil {
		return m.WatchNamespaces
	}
	return nil
}

func (m *SettingsSpec) GetKubernetesConfigSource() *SettingsSpec_KubernetesCrds {
	if x, ok := m.GetConfigSource().(*SettingsSpec_KubernetesConfigSource); ok {
		return x.KubernetesConfigSource
	}
	return nil
}

func (m *SettingsSpec) GetDirectoryConfigSource() *SettingsSpec_Directory {
	if x, ok := m.GetConfigSource().(*SettingsSpec_DirectoryConfigSource); ok {
		return x.DirectoryConfigSource
	}
	return nil
}

func (m *SettingsSpec) GetConsulKvSource() *SettingsSpec_ConsulKv {
	if x, ok := m.GetConfigSource().(*SettingsSpec_ConsulKvSource); ok {
		return x.ConsulKvSource
	}
	return nil
}

func (m *SettingsSpec) GetKubernetesSecretSource() *SettingsSpec_KubernetesSecrets {
	if x, ok := m.GetSecretSource().(*SettingsSpec_KubernetesSecretSource); ok {
		return x.KubernetesSecretSource
	}
	return nil
}

func (m *SettingsSpec) GetVaultSecretSource() *SettingsSpec_VaultSecrets {
	if x, ok := m.GetSecretSource().(*SettingsSpec_VaultSecretSource); ok {
		return x.VaultSecretSource
	}
	return nil
}

func (m *SettingsSpec) GetDirectorySecretSource() *SettingsSpec_Directory {
	if x, ok := m.GetSecretSource().(*SettingsSpec_DirectorySecretSource); ok {
		return x.DirectorySecretSource
	}
	return nil
}

func (m *SettingsSpec) GetKubernetesArtifactSource() *SettingsSpec_KubernetesConfigmaps {
	if x, ok := m.GetArtifactSource().(*SettingsSpec_KubernetesArtifactSource); ok {
		return x.KubernetesArtifactSource
	}
	return nil
}

func (m *SettingsSpec) GetDirectoryArtifactSource() *SettingsSpec_Directory {
	if x, ok := m.GetArtifactSource().(*SettingsSpec_DirectoryArtifactSource); ok {
		return x.DirectoryArtifactSource
	}
	return nil
}

func (m *SettingsSpec) GetConsulKvArtifactSource() *SettingsSpec_ConsulKv {
	if x, ok := m.GetArtifactSource().(*SettingsSpec_ConsulKvArtifactSource); ok {
		return x.ConsulKvArtifactSource
	}
	return nil
}

func (m *SettingsSpec) GetRefreshRate() *types.Duration {
	if m != nil {
		return m.RefreshRate
	}
	return nil
}

func (m *SettingsSpec) GetDevMode() bool {
	if m != nil {
		return m.DevMode
	}
	return false
}

func (m *SettingsSpec) GetLinkerd() bool {
	if m != nil {
		return m.Linkerd
	}
	return false
}

func (m *SettingsSpec) GetKnative() *SettingsSpec_KnativeOptions {
	if m != nil {
		return m.Knative
	}
	return nil
}

func (m *SettingsSpec) GetDiscovery() *SettingsSpec_DiscoveryOptions {
	if m != nil {
		return m.Discovery
	}
	return nil
}

func (m *SettingsSpec) GetGloo() *GlooOptions {
	if m != nil {
		return m.Gloo
	}
	return nil
}

func (m *SettingsSpec) GetGateway() *GatewayOptions {
	if m != nil {
		return m.Gateway
	}
	return nil
}

func (m *SettingsSpec) GetConsul() *SettingsSpec_ConsulConfiguration {
	if m != nil {
		return m.Consul
	}
	return nil
}

func (m *SettingsSpec) GetConsulDiscovery() *SettingsSpec_ConsulUpstreamDiscoveryConfiguration {
	if m != nil {
		return m.ConsulDiscovery
	}
	return nil
}

func (m *SettingsSpec) GetKubernetes() *SettingsSpec_KubernetesConfiguration {
	if m != nil {
		return m.Kubernetes
	}
	return nil
}

func (m *SettingsSpec) GetExtensions() *Extensions {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *SettingsSpec) GetRatelimit() *ratelimit.ServiceSettings {
	if m != nil {
		return m.Ratelimit
	}
	return nil
}

func (m *SettingsSpec) GetRatelimitServer() *ratelimit.Settings {
	if m != nil {
		return m.RatelimitServer
	}
	return nil
}

func (m *SettingsSpec) GetRbac() *rbac.Settings {
	if m != nil {
		return m.Rbac
	}
	return nil
}

func (m *SettingsSpec) GetExtauth() *v1.Settings {
	if m != nil {
		return m.Extauth
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SettingsSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SettingsSpec_KubernetesConfigSource)(nil),
		(*SettingsSpec_DirectoryConfigSource)(nil),
		(*SettingsSpec_ConsulKvSource)(nil),
		(*SettingsSpec_KubernetesSecretSource)(nil),
		(*SettingsSpec_VaultSecretSource)(nil),
		(*SettingsSpec_DirectorySecretSource)(nil),
		(*SettingsSpec_KubernetesArtifactSource)(nil),
		(*SettingsSpec_DirectoryArtifactSource)(nil),
		(*SettingsSpec_ConsulKvArtifactSource)(nil),
	}
}

// Use Kubernetes CRDs as storage.
type SettingsSpec_KubernetesCrds struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettingsSpec_KubernetesCrds) Reset()         { *m = SettingsSpec_KubernetesCrds{} }
func (m *SettingsSpec_KubernetesCrds) String() string { return proto.CompactTextString(m) }
func (*SettingsSpec_KubernetesCrds) ProtoMessage()    {}
func (*SettingsSpec_KubernetesCrds) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{0, 0}
}
func (m *SettingsSpec_KubernetesCrds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettingsSpec_KubernetesCrds.Unmarshal(m, b)
}
func (m *SettingsSpec_KubernetesCrds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettingsSpec_KubernetesCrds.Marshal(b, m, deterministic)
}
func (m *SettingsSpec_KubernetesCrds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingsSpec_KubernetesCrds.Merge(m, src)
}
func (m *SettingsSpec_KubernetesCrds) XXX_Size() int {
	return xxx_messageInfo_SettingsSpec_KubernetesCrds.Size(m)
}
func (m *SettingsSpec_KubernetesCrds) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingsSpec_KubernetesCrds.DiscardUnknown(m)
}

var xxx_messageInfo_SettingsSpec_KubernetesCrds proto.InternalMessageInfo

// Use Kubernetes as storage for secret data.
type SettingsSpec_KubernetesSecrets struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettingsSpec_KubernetesSecrets) Reset()         { *m = SettingsSpec_KubernetesSecrets{} }
func (m *SettingsSpec_KubernetesSecrets) String() string { return proto.CompactTextString(m) }
func (*SettingsSpec_KubernetesSecrets) ProtoMessage()    {}
func (*SettingsSpec_KubernetesSecrets) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{0, 1}
}
func (m *SettingsSpec_KubernetesSecrets) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettingsSpec_KubernetesSecrets.Unmarshal(m, b)
}
func (m *SettingsSpec_KubernetesSecrets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettingsSpec_KubernetesSecrets.Marshal(b, m, deterministic)
}
func (m *SettingsSpec_KubernetesSecrets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingsSpec_KubernetesSecrets.Merge(m, src)
}
func (m *SettingsSpec_KubernetesSecrets) XXX_Size() int {
	return xxx_messageInfo_SettingsSpec_KubernetesSecrets.Size(m)
}
func (m *SettingsSpec_KubernetesSecrets) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingsSpec_KubernetesSecrets.DiscardUnknown(m)
}

var xxx_messageInfo_SettingsSpec_KubernetesSecrets proto.InternalMessageInfo

// Use [HashiCorp Vault](https://www.vaultproject.io/) as storage for secret data.
type SettingsSpec_VaultSecrets struct {
	// the Token used to authenticate to Vault
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// address is the address of the Vault server. This should be a complete
	// URL such as http://solo.io
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// caCert is the path to a PEM-encoded CA cert file to use to verify the
	// Vault server SSL certificate.
	CaCert string `protobuf:"bytes,3,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	// caPath is the path to a directory of PEM-encoded CA cert files to verify
	// the Vault server SSL certificate.
	CaPath string `protobuf:"bytes,4,opt,name=ca_path,json=caPath,proto3" json:"ca_path,omitempty"`
	// clientCert is the path to the certificate for Vault communication
	ClientCert string `protobuf:"bytes,5,opt,name=client_cert,json=clientCert,proto3" json:"client_cert,omitempty"`
	// clientKey is the path to the private key for Vault communication
	ClientKey string `protobuf:"bytes,6,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	// tlsServerName, if set, is used to set the SNI host when connecting via
	// TLS.
	TlsServerName string `protobuf:"bytes,7,opt,name=tls_server_name,json=tlsServerName,proto3" json:"tls_server_name,omitempty"`
	// Insecure enables or disables SSL verification
	Insecure *types.BoolValue `protobuf:"bytes,8,opt,name=insecure,proto3" json:"insecure,omitempty"`
	// all keys stored in Vault will begin with this Vault
	// this can be used to run multiple instances of Gloo against the same Consul cluster
	// defaults to `gloo`
	RootKey              string   `protobuf:"bytes,9,opt,name=root_key,json=rootKey,proto3" json:"root_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettingsSpec_VaultSecrets) Reset()         { *m = SettingsSpec_VaultSecrets{} }
func (m *SettingsSpec_VaultSecrets) String() string { return proto.CompactTextString(m) }
func (*SettingsSpec_VaultSecrets) ProtoMessage()    {}
func (*SettingsSpec_VaultSecrets) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{0, 2}
}
func (m *SettingsSpec_VaultSecrets) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettingsSpec_VaultSecrets.Unmarshal(m, b)
}
func (m *SettingsSpec_VaultSecrets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettingsSpec_VaultSecrets.Marshal(b, m, deterministic)
}
func (m *SettingsSpec_VaultSecrets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingsSpec_VaultSecrets.Merge(m, src)
}
func (m *SettingsSpec_VaultSecrets) XXX_Size() int {
	return xxx_messageInfo_SettingsSpec_VaultSecrets.Size(m)
}
func (m *SettingsSpec_VaultSecrets) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingsSpec_VaultSecrets.DiscardUnknown(m)
}

var xxx_messageInfo_SettingsSpec_VaultSecrets proto.InternalMessageInfo

func (m *SettingsSpec_VaultSecrets) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SettingsSpec_VaultSecrets) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SettingsSpec_VaultSecrets) GetCaCert() string {
	if m != nil {
		return m.CaCert
	}
	return ""
}

func (m *SettingsSpec_VaultSecrets) GetCaPath() string {
	if m != nil {
		return m.CaPath
	}
	return ""
}

func (m *SettingsSpec_VaultSecrets) GetClientCert() string {
	if m != nil {
		return m.ClientCert
	}
	return ""
}

func (m *SettingsSpec_VaultSecrets) GetClientKey() string {
	if m != nil {
		return m.ClientKey
	}
	return ""
}

func (m *SettingsSpec_VaultSecrets) GetTlsServerName() string {
	if m != nil {
		return m.TlsServerName
	}
	return ""
}

func (m *SettingsSpec_VaultSecrets) GetInsecure() *types.BoolValue {
	if m != nil {
		return m.Insecure
	}
	return nil
}

func (m *SettingsSpec_VaultSecrets) GetRootKey() string {
	if m != nil {
		return m.RootKey
	}
	return ""
}

// Use [HashiCorp Consul Key-Value](https://www.consul.io/api/kv.html/) as storage for config data.
// Configuration options for connecting to Consul can be configured in the Settings' root
// `consul` field
type SettingsSpec_ConsulKv struct {
	// all keys stored in Consul will begin with this prefix
	// this can be used to run multiple instances of Gloo against the same Consul cluster
	// defaults to `gloo`
	RootKey              string   `protobuf:"bytes,1,opt,name=root_key,json=rootKey,proto3" json:"root_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettingsSpec_ConsulKv) Reset()         { *m = SettingsSpec_ConsulKv{} }
func (m *SettingsSpec_ConsulKv) String() string { return proto.CompactTextString(m) }
func (*SettingsSpec_ConsulKv) ProtoMessage()    {}
func (*SettingsSpec_ConsulKv) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{0, 3}
}
func (m *SettingsSpec_ConsulKv) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettingsSpec_ConsulKv.Unmarshal(m, b)
}
func (m *SettingsSpec_ConsulKv) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettingsSpec_ConsulKv.Marshal(b, m, deterministic)
}
func (m *SettingsSpec_ConsulKv) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingsSpec_ConsulKv.Merge(m, src)
}
func (m *SettingsSpec_ConsulKv) XXX_Size() int {
	return xxx_messageInfo_SettingsSpec_ConsulKv.Size(m)
}
func (m *SettingsSpec_ConsulKv) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingsSpec_ConsulKv.DiscardUnknown(m)
}

var xxx_messageInfo_SettingsSpec_ConsulKv proto.InternalMessageInfo

func (m *SettingsSpec_ConsulKv) GetRootKey() string {
	if m != nil {
		return m.RootKey
	}
	return ""
}

// Use Kubernetes ConfigMaps as storage.
type SettingsSpec_KubernetesConfigmaps struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettingsSpec_KubernetesConfigmaps) Reset()         { *m = SettingsSpec_KubernetesConfigmaps{} }
func (m *SettingsSpec_KubernetesConfigmaps) String() string { return proto.CompactTextString(m) }
func (*SettingsSpec_KubernetesConfigmaps) ProtoMessage()    {}
func (*SettingsSpec_KubernetesConfigmaps) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{0, 4}
}
func (m *SettingsSpec_KubernetesConfigmaps) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettingsSpec_KubernetesConfigmaps.Unmarshal(m, b)
}
func (m *SettingsSpec_KubernetesConfigmaps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettingsSpec_KubernetesConfigmaps.Marshal(b, m, deterministic)
}
func (m *SettingsSpec_KubernetesConfigmaps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingsSpec_KubernetesConfigmaps.Merge(m, src)
}
func (m *SettingsSpec_KubernetesConfigmaps) XXX_Size() int {
	return xxx_messageInfo_SettingsSpec_KubernetesConfigmaps.Size(m)
}
func (m *SettingsSpec_KubernetesConfigmaps) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingsSpec_KubernetesConfigmaps.DiscardUnknown(m)
}

var xxx_messageInfo_SettingsSpec_KubernetesConfigmaps proto.InternalMessageInfo

// As an alternative to Kubernetes CRDs, Gloo is able to store resources in a local file system.
// This option determines the root of the directory tree used to this end.
type SettingsSpec_Directory struct {
	Directory            string   `protobuf:"bytes,1,opt,name=directory,proto3" json:"directory,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettingsSpec_Directory) Reset()         { *m = SettingsSpec_Directory{} }
func (m *SettingsSpec_Directory) String() string { return proto.CompactTextString(m) }
func (*SettingsSpec_Directory) ProtoMessage()    {}
func (*SettingsSpec_Directory) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{0, 5}
}
func (m *SettingsSpec_Directory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettingsSpec_Directory.Unmarshal(m, b)
}
func (m *SettingsSpec_Directory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettingsSpec_Directory.Marshal(b, m, deterministic)
}
func (m *SettingsSpec_Directory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingsSpec_Directory.Merge(m, src)
}
func (m *SettingsSpec_Directory) XXX_Size() int {
	return xxx_messageInfo_SettingsSpec_Directory.Size(m)
}
func (m *SettingsSpec_Directory) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingsSpec_Directory.DiscardUnknown(m)
}

var xxx_messageInfo_SettingsSpec_Directory proto.InternalMessageInfo

func (m *SettingsSpec_Directory) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

type SettingsSpec_KnativeOptions struct {
	// Address of the clusteringress proxy.
	// If empty, it will default to clusteringress-proxy.$POD_NAMESPACE.svc.cluster.local.
	// Use if running Knative Version 0.7.X or less
	ClusterIngressProxyAddress string `protobuf:"bytes,1,opt,name=cluster_ingress_proxy_address,json=clusterIngressProxyAddress,proto3" json:"cluster_ingress_proxy_address,omitempty"`
	// Address of the externally-facing knative proxy.
	// If empty, it will default to knative-external-proxy.$POD_NAMESPACE.svc.cluster.local.
	// Use if running Knative Version 0.8.X or higher
	KnativeExternalProxyAddress string `protobuf:"bytes,2,opt,name=knative_external_proxy_address,json=knativeExternalProxyAddress,proto3" json:"knative_external_proxy_address,omitempty"`
	// Address of the internally-facing knative proxy.
	// If empty, it will default to knative-internal-proxy.$POD_NAMESPACE.svc.cluster.local.
	// Use if running Knative Version 0.8.X or higher
	KnativeInternalProxyAddress string   `protobuf:"bytes,3,opt,name=knative_internal_proxy_address,json=knativeInternalProxyAddress,proto3" json:"knative_internal_proxy_address,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *SettingsSpec_KnativeOptions) Reset()         { *m = SettingsSpec_KnativeOptions{} }
func (m *SettingsSpec_KnativeOptions) String() string { return proto.CompactTextString(m) }
func (*SettingsSpec_KnativeOptions) ProtoMessage()    {}
func (*SettingsSpec_KnativeOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{0, 6}
}
func (m *SettingsSpec_KnativeOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettingsSpec_KnativeOptions.Unmarshal(m, b)
}
func (m *SettingsSpec_KnativeOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettingsSpec_KnativeOptions.Marshal(b, m, deterministic)
}
func (m *SettingsSpec_KnativeOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingsSpec_KnativeOptions.Merge(m, src)
}
func (m *SettingsSpec_KnativeOptions) XXX_Size() int {
	return xxx_messageInfo_SettingsSpec_KnativeOptions.Size(m)
}
func (m *SettingsSpec_KnativeOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingsSpec_KnativeOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SettingsSpec_KnativeOptions proto.InternalMessageInfo

func (m *SettingsSpec_KnativeOptions) GetClusterIngressProxyAddress() string {
	if m != nil {
		return m.ClusterIngressProxyAddress
	}
	return ""
}

func (m *SettingsSpec_KnativeOptions) GetKnativeExternalProxyAddress() string {
	if m != nil {
		return m.KnativeExternalProxyAddress
	}
	return ""
}

func (m *SettingsSpec_KnativeOptions) GetKnativeInternalProxyAddress() string {
	if m != nil {
		return m.KnativeInternalProxyAddress
	}
	return ""
}

type SettingsSpec_DiscoveryOptions struct {
	FdsMode              SettingsSpec_DiscoveryOptions_FdsMode `protobuf:"varint,1,opt,name=fds_mode,json=fdsMode,proto3,enum=gloo.solo.io.SettingsSpec_DiscoveryOptions_FdsMode" json:"fds_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *SettingsSpec_DiscoveryOptions) Reset()         { *m = SettingsSpec_DiscoveryOptions{} }
func (m *SettingsSpec_DiscoveryOptions) String() string { return proto.CompactTextString(m) }
func (*SettingsSpec_DiscoveryOptions) ProtoMessage()    {}
func (*SettingsSpec_DiscoveryOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{0, 7}
}
func (m *SettingsSpec_DiscoveryOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettingsSpec_DiscoveryOptions.Unmarshal(m, b)
}
func (m *SettingsSpec_DiscoveryOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettingsSpec_DiscoveryOptions.Marshal(b, m, deterministic)
}
func (m *SettingsSpec_DiscoveryOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingsSpec_DiscoveryOptions.Merge(m, src)
}
func (m *SettingsSpec_DiscoveryOptions) XXX_Size() int {
	return xxx_messageInfo_SettingsSpec_DiscoveryOptions.Size(m)
}
func (m *SettingsSpec_DiscoveryOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingsSpec_DiscoveryOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SettingsSpec_DiscoveryOptions proto.InternalMessageInfo

func (m *SettingsSpec_DiscoveryOptions) GetFdsMode() SettingsSpec_DiscoveryOptions_FdsMode {
	if m != nil {
		return m.FdsMode
	}
	return SettingsSpec_DiscoveryOptions_BLACKLIST
}

// Provides overrides for the default configuration parameters used to connect to Consul.
//
// Note: It is also possible to configure the Consul client Gloo uses via the environment variables
// described [here](https://www.consul.io/docs/commands/index.html#environment-variables). These
// need to be set on the Gloo container.
type SettingsSpec_ConsulConfiguration struct {
	// Deprecated: prefer http_address.
	// The address of the Consul HTTP server.
	// Used by service discovery and key-value storage (if-enabled).
	// Defaults to the value of the standard CONSUL_HTTP_ADDR env if set, otherwise to 127.0.0.1:8500.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // Deprecated: Do not use.
	// Datacenter to use. If not provided, the default agent datacenter is used.
	Datacenter string `protobuf:"bytes,2,opt,name=datacenter,proto3" json:"datacenter,omitempty"`
	// Username to use for HTTP Basic Authentication
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// Password to use for HTTP Basic Authentication
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// Token is used to provide a per-request ACL token
	// which overrides the agent's default token.
	Token string `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	// caFile is the optional path to the CA certificate used for Consul
	// communication, defaults to the system bundle if not specified.
	CaFile string `protobuf:"bytes,6,opt,name=ca_file,json=caFile,proto3" json:"ca_file,omitempty"`
	// caPath is the optional path to a directory of CA certificates to use for
	// Consul communication, defaults to the system bundle if not specified.
	CaPath string `protobuf:"bytes,7,opt,name=ca_path,json=caPath,proto3" json:"ca_path,omitempty"`
	// CertFile is the optional path to the certificate for Consul
	// communication. If this is set then you need to also set KeyFile.
	CertFile string `protobuf:"bytes,8,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty"`
	// KeyFile is the optional path to the private key for Consul communication.
	// If this is set then you need to also set CertFile.
	KeyFile string `protobuf:"bytes,9,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty"`
	// InsecureSkipVerify if set to true will disable TLS host verification.
	InsecureSkipVerify *types.BoolValue `protobuf:"bytes,10,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3" json:"insecure_skip_verify,omitempty"`
	// WaitTime limits how long a watches for Consul resources will block.
	// If not provided, the agent default values will be used.
	WaitTime *types.Duration `protobuf:"bytes,11,opt,name=wait_time,json=waitTime,proto3" json:"wait_time,omitempty"`
	// Enable Service Discovery via Consul with this field
	// set to empty struct `{}` to enable with defaults
	ServiceDiscovery *SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions `protobuf:"bytes,12,opt,name=service_discovery,json=serviceDiscovery,proto3" json:"service_discovery,omitempty"`
	// The address of the Consul HTTP server.
	// Used by service discovery and key-value storage (if-enabled).
	// Defaults to the value of the standard CONSUL_HTTP_ADDR env if set, otherwise to 127.0.0.1:8500.
	HttpAddress string `protobuf:"bytes,13,opt,name=http_address,json=httpAddress,proto3" json:"http_address,omitempty"`
	// The address of the DNS server used to resolve hostnames in the Consul service address.
	// Used by service discovery (required when Consul service instances are stored as DNS names).
	// Defaults to 127.0.0.1:8600. (the default Consul DNS server)
	DnsAddress string `protobuf:"bytes,14,opt,name=dns_address,json=dnsAddress,proto3" json:"dns_address,omitempty"`
	// The polling interval for the DNS server.
	// If there is a Consul service address with a hostname instead of an IP, Gloo will resolve the
	// hostname with the configured frequency to update endpoints with any changes to DNS resolution.
	// Defaults to 5s.
	DnsPollingInterval   *types.Duration `protobuf:"bytes,15,opt,name=dns_polling_interval,json=dnsPollingInterval,proto3" json:"dns_polling_interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SettingsSpec_ConsulConfiguration) Reset()         { *m = SettingsSpec_ConsulConfiguration{} }
func (m *SettingsSpec_ConsulConfiguration) String() string { return proto.CompactTextString(m) }
func (*SettingsSpec_ConsulConfiguration) ProtoMessage()    {}
func (*SettingsSpec_ConsulConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{0, 8}
}
func (m *SettingsSpec_ConsulConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettingsSpec_ConsulConfiguration.Unmarshal(m, b)
}
func (m *SettingsSpec_ConsulConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettingsSpec_ConsulConfiguration.Marshal(b, m, deterministic)
}
func (m *SettingsSpec_ConsulConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingsSpec_ConsulConfiguration.Merge(m, src)
}
func (m *SettingsSpec_ConsulConfiguration) XXX_Size() int {
	return xxx_messageInfo_SettingsSpec_ConsulConfiguration.Size(m)
}
func (m *SettingsSpec_ConsulConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingsSpec_ConsulConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_SettingsSpec_ConsulConfiguration proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *SettingsSpec_ConsulConfiguration) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SettingsSpec_ConsulConfiguration) GetDatacenter() string {
	if m != nil {
		return m.Datacenter
	}
	return ""
}

func (m *SettingsSpec_ConsulConfiguration) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SettingsSpec_ConsulConfiguration) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *SettingsSpec_ConsulConfiguration) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SettingsSpec_ConsulConfiguration) GetCaFile() string {
	if m != nil {
		return m.CaFile
	}
	return ""
}

func (m *SettingsSpec_ConsulConfiguration) GetCaPath() string {
	if m != nil {
		return m.CaPath
	}
	return ""
}

func (m *SettingsSpec_ConsulConfiguration) GetCertFile() string {
	if m != nil {
		return m.CertFile
	}
	return ""
}

func (m *SettingsSpec_ConsulConfiguration) GetKeyFile() string {
	if m != nil {
		return m.KeyFile
	}
	return ""
}

func (m *SettingsSpec_ConsulConfiguration) GetInsecureSkipVerify() *types.BoolValue {
	if m != nil {
		return m.InsecureSkipVerify
	}
	return nil
}

func (m *SettingsSpec_ConsulConfiguration) GetWaitTime() *types.Duration {
	if m != nil {
		return m.WaitTime
	}
	return nil
}

func (m *SettingsSpec_ConsulConfiguration) GetServiceDiscovery() *SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions {
	if m != nil {
		return m.ServiceDiscovery
	}
	return nil
}

func (m *SettingsSpec_ConsulConfiguration) GetHttpAddress() string {
	if m != nil {
		return m.HttpAddress
	}
	return ""
}

func (m *SettingsSpec_ConsulConfiguration) GetDnsAddress() string {
	if m != nil {
		return m.DnsAddress
	}
	return ""
}

func (m *SettingsSpec_ConsulConfiguration) GetDnsPollingInterval() *types.Duration {
	if m != nil {
		return m.DnsPollingInterval
	}
	return nil
}

// service discovery options for Consul
type SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions struct {
	// Use this parameter to restrict the data centers that will be considered when discovering and routing to
	// services. If not provided, Gloo will use all available data centers.
	DataCenters          []string `protobuf:"bytes,1,rep,name=data_centers,json=dataCenters,proto3" json:"data_centers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions) Reset() {
	*m = SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions{}
}
func (m *SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions) String() string {
	return proto.CompactTextString(m)
}
func (*SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions) ProtoMessage() {}
func (*SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{0, 8, 0}
}
func (m *SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions.Unmarshal(m, b)
}
func (m *SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions.Marshal(b, m, deterministic)
}
func (m *SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions.Merge(m, src)
}
func (m *SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions) XXX_Size() int {
	return xxx_messageInfo_SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions.Size(m)
}
func (m *SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions proto.InternalMessageInfo

func (m *SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions) GetDataCenters() []string {
	if m != nil {
		return m.DataCenters
	}
	return nil
}

// Settings related to gloo's behavior when discovering consul services and creating
// upstreams to connect to those services and their instances.
type SettingsSpec_ConsulUpstreamDiscoveryConfiguration struct {
	// If true, then gloo will add TLS to upstreams created for any consul service that has the tag specified by
	// tlsTagName. If splitTlsServices is true, then this tag is also used to identify serviceInstances that
	// should be tied to the TLS upstream. Requires rootCa to be set if true.
	UseTlsTagging bool `protobuf:"varint,16,opt,name=useTlsTagging,proto3" json:"useTlsTagging,omitempty"`
	// The tag that gloo should use to make TLS upstreams from consul services, and to partition consul
	// serviceInstances between TLS/non-TLS upstreams. Defaults to 'glooUseTls'
	TlsTagName string `protobuf:"bytes,17,opt,name=tlsTagName,proto3" json:"tlsTagName,omitempty"`
	// The reference for the root CA resource to be used by discovered consul TLS upstreams.
	RootCa *core.ResourceRef `protobuf:"bytes,18,opt,name=rootCa,proto3" json:"rootCa,omitempty"`
	// If true, then create two upstreams when the tlsTagName is found on a consul service,
	// one with tls and one without. This requires a consul service's serviceInstances
	// be individually tagged; servicesInstances with the tlsTagName tag are directed to the TLS upstream, while those
	// without the tlsTagName tag are sorted into the non-TLS upstream.
	SplitTlsServices     bool     `protobuf:"varint,19,opt,name=splitTlsServices,proto3" json:"splitTlsServices,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettingsSpec_ConsulUpstreamDiscoveryConfiguration) Reset() {
	*m = SettingsSpec_ConsulUpstreamDiscoveryConfiguration{}
}
func (m *SettingsSpec_ConsulUpstreamDiscoveryConfiguration) String() string {
	return proto.CompactTextString(m)
}
func (*SettingsSpec_ConsulUpstreamDiscoveryConfiguration) ProtoMessage() {}
func (*SettingsSpec_ConsulUpstreamDiscoveryConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{0, 9}
}
func (m *SettingsSpec_ConsulUpstreamDiscoveryConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettingsSpec_ConsulUpstreamDiscoveryConfiguration.Unmarshal(m, b)
}
func (m *SettingsSpec_ConsulUpstreamDiscoveryConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettingsSpec_ConsulUpstreamDiscoveryConfiguration.Marshal(b, m, deterministic)
}
func (m *SettingsSpec_ConsulUpstreamDiscoveryConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingsSpec_ConsulUpstreamDiscoveryConfiguration.Merge(m, src)
}
func (m *SettingsSpec_ConsulUpstreamDiscoveryConfiguration) XXX_Size() int {
	return xxx_messageInfo_SettingsSpec_ConsulUpstreamDiscoveryConfiguration.Size(m)
}
func (m *SettingsSpec_ConsulUpstreamDiscoveryConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingsSpec_ConsulUpstreamDiscoveryConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_SettingsSpec_ConsulUpstreamDiscoveryConfiguration proto.InternalMessageInfo

func (m *SettingsSpec_ConsulUpstreamDiscoveryConfiguration) GetUseTlsTagging() bool {
	if m != nil {
		return m.UseTlsTagging
	}
	return false
}

func (m *SettingsSpec_ConsulUpstreamDiscoveryConfiguration) GetTlsTagName() string {
	if m != nil {
		return m.TlsTagName
	}
	return ""
}

func (m *SettingsSpec_ConsulUpstreamDiscoveryConfiguration) GetRootCa() *core.ResourceRef {
	if m != nil {
		return m.RootCa
	}
	return nil
}

func (m *SettingsSpec_ConsulUpstreamDiscoveryConfiguration) GetSplitTlsServices() bool {
	if m != nil {
		return m.SplitTlsServices
	}
	return false
}

// Provides overrides for the default configuration parameters used to interact with Kubernetes.
type SettingsSpec_KubernetesConfiguration struct {
	// Rate limits for the kubernetes clients
	RateLimits           *SettingsSpec_KubernetesConfiguration_RateLimits `protobuf:"bytes,1,opt,name=rate_limits,json=rateLimits,proto3" json:"rate_limits,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *SettingsSpec_KubernetesConfiguration) Reset()         { *m = SettingsSpec_KubernetesConfiguration{} }
func (m *SettingsSpec_KubernetesConfiguration) String() string { return proto.CompactTextString(m) }
func (*SettingsSpec_KubernetesConfiguration) ProtoMessage()    {}
func (*SettingsSpec_KubernetesConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{0, 10}
}
func (m *SettingsSpec_KubernetesConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettingsSpec_KubernetesConfiguration.Unmarshal(m, b)
}
func (m *SettingsSpec_KubernetesConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettingsSpec_KubernetesConfiguration.Marshal(b, m, deterministic)
}
func (m *SettingsSpec_KubernetesConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingsSpec_KubernetesConfiguration.Merge(m, src)
}
func (m *SettingsSpec_KubernetesConfiguration) XXX_Size() int {
	return xxx_messageInfo_SettingsSpec_KubernetesConfiguration.Size(m)
}
func (m *SettingsSpec_KubernetesConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingsSpec_KubernetesConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_SettingsSpec_KubernetesConfiguration proto.InternalMessageInfo

func (m *SettingsSpec_KubernetesConfiguration) GetRateLimits() *SettingsSpec_KubernetesConfiguration_RateLimits {
	if m != nil {
		return m.RateLimits
	}
	return nil
}

type SettingsSpec_KubernetesConfiguration_RateLimits struct {
	// The maximum queries-per-second Gloo can make to the Kubernetes API Server.
	QPS float32 `protobuf:"fixed32,1,opt,name=QPS,proto3" json:"QPS,omitempty"`
	// Maximum burst for throttle. When a steady state of QPS requests per second,
	// this is an additional number of allowed, to allow for short bursts.
	Burst                uint32   `protobuf:"varint,2,opt,name=burst,proto3" json:"burst,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettingsSpec_KubernetesConfiguration_RateLimits) Reset() {
	*m = SettingsSpec_KubernetesConfiguration_RateLimits{}
}
func (m *SettingsSpec_KubernetesConfiguration_RateLimits) String() string {
	return proto.CompactTextString(m)
}
func (*SettingsSpec_KubernetesConfiguration_RateLimits) ProtoMessage() {}
func (*SettingsSpec_KubernetesConfiguration_RateLimits) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{0, 10, 0}
}
func (m *SettingsSpec_KubernetesConfiguration_RateLimits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettingsSpec_KubernetesConfiguration_RateLimits.Unmarshal(m, b)
}
func (m *SettingsSpec_KubernetesConfiguration_RateLimits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettingsSpec_KubernetesConfiguration_RateLimits.Marshal(b, m, deterministic)
}
func (m *SettingsSpec_KubernetesConfiguration_RateLimits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingsSpec_KubernetesConfiguration_RateLimits.Merge(m, src)
}
func (m *SettingsSpec_KubernetesConfiguration_RateLimits) XXX_Size() int {
	return xxx_messageInfo_SettingsSpec_KubernetesConfiguration_RateLimits.Size(m)
}
func (m *SettingsSpec_KubernetesConfiguration_RateLimits) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingsSpec_KubernetesConfiguration_RateLimits.DiscardUnknown(m)
}

var xxx_messageInfo_SettingsSpec_KubernetesConfiguration_RateLimits proto.InternalMessageInfo

func (m *SettingsSpec_KubernetesConfiguration_RateLimits) GetQPS() float32 {
	if m != nil {
		return m.QPS
	}
	return 0
}

func (m *SettingsSpec_KubernetesConfiguration_RateLimits) GetBurst() uint32 {
	if m != nil {
		return m.Burst
	}
	return 0
}

// Settings specific to the gloo (Envoy xDS server) controller
type GlooOptions struct {
	// Where the `gloo` xDS server should bind. Defaults to `0.0.0.0:9977`
	XdsBindAddr string `protobuf:"bytes,1,opt,name=xds_bind_addr,json=xdsBindAddr,proto3" json:"xds_bind_addr,omitempty"`
	// Where the `gloo` validation server should bind. Defaults to `0.0.0.0:9988`
	ValidationBindAddr string `protobuf:"bytes,2,opt,name=validation_bind_addr,json=validationBindAddr,proto3" json:"validation_bind_addr,omitempty"`
	// Default circuit breaker configuration to use for upstream requests,
	// when not provided by specific upstream.
	CircuitBreakers *CircuitBreakerConfig `protobuf:"bytes,3,opt,name=circuit_breakers,json=circuitBreakers,proto3" json:"circuit_breakers,omitempty"`
	// Timeout to get initial snapshot of resources. If set to zero, Gloo will not wait for initial
	// snapshot - if nonzero and gloo could not fetch it's initial snapshot before the timeout
	// reached, gloo will panic. If unset, Gloo defaults to 5 minutes.
	EndpointsWarmingTimeout *types.Duration         `protobuf:"bytes,4,opt,name=endpoints_warming_timeout,json=endpointsWarmingTimeout,proto3" json:"endpoints_warming_timeout,omitempty"`
	AwsOptions              *GlooOptions_AWSOptions `protobuf:"bytes,5,opt,name=aws_options,json=awsOptions,proto3" json:"aws_options,omitempty"`
	// set these options to fine-tune the way Gloo handles invalid user configuration
	InvalidConfigPolicy *GlooOptions_InvalidConfigPolicy `protobuf:"bytes,6,opt,name=invalid_config_policy,json=invalidConfigPolicy,proto3" json:"invalid_config_policy,omitempty"`
	// Gloo allows you to directly reference a Kubernetes service as a routing destination. To enable this feature,
	// Gloo scans the cluster for Kubernetes services and creates a special type of in-memory Upstream to represent them.
	// If the cluster contains a lot of services and you do not restrict the namespaces Gloo is watching, this can result
	// in significant overhead. If you do not plan on using this feature, you can use this flag to turn it off.
	DisableKubernetesDestinations bool `protobuf:"varint,7,opt,name=disable_kubernetes_destinations,json=disableKubernetesDestinations,proto3" json:"disable_kubernetes_destinations,omitempty"`
	// Default policy for grpc-web.
	// set to true if you do not wish grpc-web to be automatically enabled.
	// set to false if you wish grpc-web enabled unless disabled on the listener level.
	// If not specified, defaults to `false`.
	DisableGrpcWeb *types.BoolValue `protobuf:"bytes,8,opt,name=disable_grpc_web,json=disableGrpcWeb,proto3" json:"disable_grpc_web,omitempty"`
	// Set this option to determine the state of the envoy configuration when a virtual service is deleted, resulting in a
	// proxy with no configured routes.
	// set to true if you wish to keep envoy serving the routes from the latest valid configuration.
	// set to false if you wish to reset the envoy configuration to a clean slate with no routes.
	// If not specified, defaults to `false`.
	DisableProxyGarbageCollection *types.BoolValue `protobuf:"bytes,9,opt,name=disable_proxy_garbage_collection,json=disableProxyGarbageCollection,proto3" json:"disable_proxy_garbage_collection,omitempty"`
	// Set this option to specify the default max program size for regexes. If not specified,
	// defaults to 100.
	RegexMaxProgramSize *types.UInt32Value `protobuf:"bytes,10,opt,name=regex_max_program_size,json=regexMaxProgramSize,proto3" json:"regex_max_program_size,omitempty"`
	// (Enterprise Only): Where the `gloo` REST xDS server should bind. Used by Gloo Federation.
	// Defaults to `0.0.0.0:9976`
	RestXdsBindAddr      string   `protobuf:"bytes,11,opt,name=rest_xds_bind_addr,json=restXdsBindAddr,proto3" json:"rest_xds_bind_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GlooOptions) Reset()         { *m = GlooOptions{} }
func (m *GlooOptions) String() string { return proto.CompactTextString(m) }
func (*GlooOptions) ProtoMessage()    {}
func (*GlooOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{1}
}
func (m *GlooOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlooOptions.Unmarshal(m, b)
}
func (m *GlooOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlooOptions.Marshal(b, m, deterministic)
}
func (m *GlooOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlooOptions.Merge(m, src)
}
func (m *GlooOptions) XXX_Size() int {
	return xxx_messageInfo_GlooOptions.Size(m)
}
func (m *GlooOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_GlooOptions.DiscardUnknown(m)
}

var xxx_messageInfo_GlooOptions proto.InternalMessageInfo

func (m *GlooOptions) GetXdsBindAddr() string {
	if m != nil {
		return m.XdsBindAddr
	}
	return ""
}

func (m *GlooOptions) GetValidationBindAddr() string {
	if m != nil {
		return m.ValidationBindAddr
	}
	return ""
}

func (m *GlooOptions) GetCircuitBreakers() *CircuitBreakerConfig {
	if m != nil {
		return m.CircuitBreakers
	}
	return nil
}

func (m *GlooOptions) GetEndpointsWarmingTimeout() *types.Duration {
	if m != nil {
		return m.EndpointsWarmingTimeout
	}
	return nil
}

func (m *GlooOptions) GetAwsOptions() *GlooOptions_AWSOptions {
	if m != nil {
		return m.AwsOptions
	}
	return nil
}

func (m *GlooOptions) GetInvalidConfigPolicy() *GlooOptions_InvalidConfigPolicy {
	if m != nil {
		return m.InvalidConfigPolicy
	}
	return nil
}

func (m *GlooOptions) GetDisableKubernetesDestinations() bool {
	if m != nil {
		return m.DisableKubernetesDestinations
	}
	return false
}

func (m *GlooOptions) GetDisableGrpcWeb() *types.BoolValue {
	if m != nil {
		return m.DisableGrpcWeb
	}
	return nil
}

func (m *GlooOptions) GetDisableProxyGarbageCollection() *types.BoolValue {
	if m != nil {
		return m.DisableProxyGarbageCollection
	}
	return nil
}

func (m *GlooOptions) GetRegexMaxProgramSize() *types.UInt32Value {
	if m != nil {
		return m.RegexMaxProgramSize
	}
	return nil
}

func (m *GlooOptions) GetRestXdsBindAddr() string {
	if m != nil {
		return m.RestXdsBindAddr
	}
	return ""
}

type GlooOptions_AWSOptions struct {
	// Types that are valid to be assigned to CredentialsFetcher:
	//	*GlooOptions_AWSOptions_EnableCredentialsDiscovey
	//	*GlooOptions_AWSOptions_ServiceAccountCredentials
	CredentialsFetcher   isGlooOptions_AWSOptions_CredentialsFetcher `protobuf_oneof:"credentials_fetcher"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *GlooOptions_AWSOptions) Reset()         { *m = GlooOptions_AWSOptions{} }
func (m *GlooOptions_AWSOptions) String() string { return proto.CompactTextString(m) }
func (*GlooOptions_AWSOptions) ProtoMessage()    {}
func (*GlooOptions_AWSOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{1, 0}
}
func (m *GlooOptions_AWSOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlooOptions_AWSOptions.Unmarshal(m, b)
}
func (m *GlooOptions_AWSOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlooOptions_AWSOptions.Marshal(b, m, deterministic)
}
func (m *GlooOptions_AWSOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlooOptions_AWSOptions.Merge(m, src)
}
func (m *GlooOptions_AWSOptions) XXX_Size() int {
	return xxx_messageInfo_GlooOptions_AWSOptions.Size(m)
}
func (m *GlooOptions_AWSOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_GlooOptions_AWSOptions.DiscardUnknown(m)
}

var xxx_messageInfo_GlooOptions_AWSOptions proto.InternalMessageInfo

type isGlooOptions_AWSOptions_CredentialsFetcher interface {
	isGlooOptions_AWSOptions_CredentialsFetcher()
	Equal(interface{}) bool
}

type GlooOptions_AWSOptions_EnableCredentialsDiscovey struct {
	EnableCredentialsDiscovey bool `protobuf:"varint,1,opt,name=enable_credentials_discovey,json=enableCredentialsDiscovey,proto3,oneof" json:"enable_credentials_discovey,omitempty"`
}
type GlooOptions_AWSOptions_ServiceAccountCredentials struct {
	ServiceAccountCredentials *aws.AWSLambdaConfig_ServiceAccountCredentials `protobuf:"bytes,2,opt,name=service_account_credentials,json=serviceAccountCredentials,proto3,oneof" json:"service_account_credentials,omitempty"`
}

func (*GlooOptions_AWSOptions_EnableCredentialsDiscovey) isGlooOptions_AWSOptions_CredentialsFetcher() {
}
func (*GlooOptions_AWSOptions_ServiceAccountCredentials) isGlooOptions_AWSOptions_CredentialsFetcher() {
}

func (m *GlooOptions_AWSOptions) GetCredentialsFetcher() isGlooOptions_AWSOptions_CredentialsFetcher {
	if m != nil {
		return m.CredentialsFetcher
	}
	return nil
}

func (m *GlooOptions_AWSOptions) GetEnableCredentialsDiscovey() bool {
	if x, ok := m.GetCredentialsFetcher().(*GlooOptions_AWSOptions_EnableCredentialsDiscovey); ok {
		return x.EnableCredentialsDiscovey
	}
	return false
}

func (m *GlooOptions_AWSOptions) GetServiceAccountCredentials() *aws.AWSLambdaConfig_ServiceAccountCredentials {
	if x, ok := m.GetCredentialsFetcher().(*GlooOptions_AWSOptions_ServiceAccountCredentials); ok {
		return x.ServiceAccountCredentials
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlooOptions_AWSOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlooOptions_AWSOptions_EnableCredentialsDiscovey)(nil),
		(*GlooOptions_AWSOptions_ServiceAccountCredentials)(nil),
	}
}

// Policy for how Gloo should handle invalid config
type GlooOptions_InvalidConfigPolicy struct {
	// if set to `true`, Gloo removes any routes from the provided configuration
	// which point to a missing destination. Routes that are removed in this way
	// will instead return a configurable direct response to clients. When routes are replaced,
	// Gloo will configure Envoy with a special listener which serves direct responses.
	//
	// Note: enabling this option allows Gloo to accept partially valid proxy configurations.
	ReplaceInvalidRoutes bool `protobuf:"varint,1,opt,name=replace_invalid_routes,json=replaceInvalidRoutes,proto3" json:"replace_invalid_routes,omitempty"`
	// replaced routes reply to clients with this response code.
	// default is 404.
	InvalidRouteResponseCode uint32 `protobuf:"varint,2,opt,name=invalid_route_response_code,json=invalidRouteResponseCode,proto3" json:"invalid_route_response_code,omitempty"`
	// replaced routes reply to clients with this response body.
	// default is 'Gloo Gateway has invalid configuration. Administrators should run `glooctl check` to find and fix config errors.'
	InvalidRouteResponseBody string   `protobuf:"bytes,3,opt,name=invalid_route_response_body,json=invalidRouteResponseBody,proto3" json:"invalid_route_response_body,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *GlooOptions_InvalidConfigPolicy) Reset()         { *m = GlooOptions_InvalidConfigPolicy{} }
func (m *GlooOptions_InvalidConfigPolicy) String() string { return proto.CompactTextString(m) }
func (*GlooOptions_InvalidConfigPolicy) ProtoMessage()    {}
func (*GlooOptions_InvalidConfigPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{1, 1}
}
func (m *GlooOptions_InvalidConfigPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlooOptions_InvalidConfigPolicy.Unmarshal(m, b)
}
func (m *GlooOptions_InvalidConfigPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlooOptions_InvalidConfigPolicy.Marshal(b, m, deterministic)
}
func (m *GlooOptions_InvalidConfigPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlooOptions_InvalidConfigPolicy.Merge(m, src)
}
func (m *GlooOptions_InvalidConfigPolicy) XXX_Size() int {
	return xxx_messageInfo_GlooOptions_InvalidConfigPolicy.Size(m)
}
func (m *GlooOptions_InvalidConfigPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_GlooOptions_InvalidConfigPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_GlooOptions_InvalidConfigPolicy proto.InternalMessageInfo

func (m *GlooOptions_InvalidConfigPolicy) GetReplaceInvalidRoutes() bool {
	if m != nil {
		return m.ReplaceInvalidRoutes
	}
	return false
}

func (m *GlooOptions_InvalidConfigPolicy) GetInvalidRouteResponseCode() uint32 {
	if m != nil {
		return m.InvalidRouteResponseCode
	}
	return 0
}

func (m *GlooOptions_InvalidConfigPolicy) GetInvalidRouteResponseBody() string {
	if m != nil {
		return m.InvalidRouteResponseBody
	}
	return ""
}

// Settings specific to the Gateway controller
type GatewayOptions struct {
	// Address of the `gloo` config validation server. Defaults to `gloo:9988`.
	ValidationServerAddr string `protobuf:"bytes,1,opt,name=validation_server_addr,json=validationServerAddr,proto3" json:"validation_server_addr,omitempty"`
	// If provided, the Gateway will perform [Dynamic Admission Control](https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/)
	// of Gateways, Virtual Services, and Route Tables when running in Kubernetes.
	Validation *GatewayOptions_ValidationOptions `protobuf:"bytes,3,opt,name=validation,proto3" json:"validation,omitempty"`
	// When true, the Gateway controller will consume Gateway custom resources from all watch namespaces, rather
	// than just the Gateway CRDs in its own namespace.
	ReadGatewaysFromAllNamespaces bool `protobuf:"varint,4,opt,name=read_gateways_from_all_namespaces,json=readGatewaysFromAllNamespaces,proto3" json:"read_gateways_from_all_namespaces,omitempty"`
	// Deprecated.
	// This setting is ignored. Maintained for backwards compatibility with settings exposed on 1.2.x branch of Gloo.
	AlwaysSortRouteTableRoutes bool `protobuf:"varint,5,opt,name=always_sort_route_table_routes,json=alwaysSortRouteTableRoutes,proto3" json:"always_sort_route_table_routes,omitempty"` // Deprecated: Do not use.
	// If set, compresses proxy space. This can help make the Proxy CRD smaller to fit in etcd.
	// This is an advanced option. Use with care.
	CompressedProxySpec  bool     `protobuf:"varint,6,opt,name=compressed_proxy_spec,json=compressedProxySpec,proto3" json:"compressed_proxy_spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayOptions) Reset()         { *m = GatewayOptions{} }
func (m *GatewayOptions) String() string { return proto.CompactTextString(m) }
func (*GatewayOptions) ProtoMessage()    {}
func (*GatewayOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{2}
}
func (m *GatewayOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayOptions.Unmarshal(m, b)
}
func (m *GatewayOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayOptions.Marshal(b, m, deterministic)
}
func (m *GatewayOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayOptions.Merge(m, src)
}
func (m *GatewayOptions) XXX_Size() int {
	return xxx_messageInfo_GatewayOptions.Size(m)
}
func (m *GatewayOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayOptions.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayOptions proto.InternalMessageInfo

func (m *GatewayOptions) GetValidationServerAddr() string {
	if m != nil {
		return m.ValidationServerAddr
	}
	return ""
}

func (m *GatewayOptions) GetValidation() *GatewayOptions_ValidationOptions {
	if m != nil {
		return m.Validation
	}
	return nil
}

func (m *GatewayOptions) GetReadGatewaysFromAllNamespaces() bool {
	if m != nil {
		return m.ReadGatewaysFromAllNamespaces
	}
	return false
}

// Deprecated: Do not use.
func (m *GatewayOptions) GetAlwaysSortRouteTableRoutes() bool {
	if m != nil {
		return m.AlwaysSortRouteTableRoutes
	}
	return false
}

func (m *GatewayOptions) GetCompressedProxySpec() bool {
	if m != nil {
		return m.CompressedProxySpec
	}
	return false
}

// options for configuring admission control / validation
type GatewayOptions_ValidationOptions struct {
	// Address of the `gloo` proxy validation grpc server. Defaults to `gloo:9988`.
	// This field is required in order to enable fine-grained admission control.
	ProxyValidationServerAddr string `protobuf:"bytes,2,opt,name=proxy_validation_server_addr,json=proxyValidationServerAddr,proto3" json:"proxy_validation_server_addr,omitempty"`
	// Path to TLS Certificate for Kubernetes Validating webhook. Defaults to `/etc/gateway/validation-certs/tls.crt`.
	ValidationWebhookTlsCert string `protobuf:"bytes,3,opt,name=validation_webhook_tls_cert,json=validationWebhookTlsCert,proto3" json:"validation_webhook_tls_cert,omitempty"`
	// Path to TLS Private Key for Kubernetes Validating webhook. Defaults to `/etc/gateway/validation-certs/tls.key`.
	ValidationWebhookTlsKey string `protobuf:"bytes,4,opt,name=validation_webhook_tls_key,json=validationWebhookTlsKey,proto3" json:"validation_webhook_tls_key,omitempty"`
	// When Gateway cannot communicate with Gloo (e.g. Gloo is offline)
	// resources will be rejected by default.
	// Enable the `ignoreGlooValidationFailure` to prevent the Validation server from rejecting
	// resources due to network errors.
	IgnoreGlooValidationFailure bool `protobuf:"varint,5,opt,name=ignore_gloo_validation_failure,json=ignoreGlooValidationFailure,proto3" json:"ignore_gloo_validation_failure,omitempty"`
	// Always accept resources even if validation produced an error.
	// Validation will still log the error and increment the validation.gateway.solo.io/resources_rejected stat.
	// Currently defaults to true - must be set to `false` to prevent writing invalid resources to storage.
	AlwaysAccept *types.BoolValue `protobuf:"bytes,6,opt,name=always_accept,json=alwaysAccept,proto3" json:"always_accept,omitempty"`
	// Accept resources if validation produced a warning (defaults to true).
	// By settings to false, this means that validation will start rejecting resources that would result
	// in warnings, rather than just those that would result in errors.
	AllowWarnings        *types.BoolValue `protobuf:"bytes,7,opt,name=allow_warnings,json=allowWarnings,proto3" json:"allow_warnings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GatewayOptions_ValidationOptions) Reset()         { *m = GatewayOptions_ValidationOptions{} }
func (m *GatewayOptions_ValidationOptions) String() string { return proto.CompactTextString(m) }
func (*GatewayOptions_ValidationOptions) ProtoMessage()    {}
func (*GatewayOptions_ValidationOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{2, 0}
}
func (m *GatewayOptions_ValidationOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayOptions_ValidationOptions.Unmarshal(m, b)
}
func (m *GatewayOptions_ValidationOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayOptions_ValidationOptions.Marshal(b, m, deterministic)
}
func (m *GatewayOptions_ValidationOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayOptions_ValidationOptions.Merge(m, src)
}
func (m *GatewayOptions_ValidationOptions) XXX_Size() int {
	return xxx_messageInfo_GatewayOptions_ValidationOptions.Size(m)
}
func (m *GatewayOptions_ValidationOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayOptions_ValidationOptions.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayOptions_ValidationOptions proto.InternalMessageInfo

func (m *GatewayOptions_ValidationOptions) GetProxyValidationServerAddr() string {
	if m != nil {
		return m.ProxyValidationServerAddr
	}
	return ""
}

func (m *GatewayOptions_ValidationOptions) GetValidationWebhookTlsCert() string {
	if m != nil {
		return m.ValidationWebhookTlsCert
	}
	return ""
}

func (m *GatewayOptions_ValidationOptions) GetValidationWebhookTlsKey() string {
	if m != nil {
		return m.ValidationWebhookTlsKey
	}
	return ""
}

func (m *GatewayOptions_ValidationOptions) GetIgnoreGlooValidationFailure() bool {
	if m != nil {
		return m.IgnoreGlooValidationFailure
	}
	return false
}

func (m *GatewayOptions_ValidationOptions) GetAlwaysAccept() *types.BoolValue {
	if m != nil {
		return m.AlwaysAccept
	}
	return nil
}

func (m *GatewayOptions_ValidationOptions) GetAllowWarnings() *types.BoolValue {
	if m != nil {
		return m.AllowWarnings
	}
	return nil
}

type SettingsStatus struct {
	// State is the enum indicating the state of the resource
	State SettingsStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=gloo.solo.io.SettingsStatus_State" json:"state,omitempty"`
	// Reason is a description of the error for Rejected resources. If the resource is pending or accepted, this field will be empty
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// Reference to the reporter who wrote this status
	ReportedBy string `protobuf:"bytes,3,opt,name=reported_by,json=reportedBy,proto3" json:"reported_by,omitempty"`
	// Reference to statuses (by resource-ref string: "Kind.Namespace.Name") of subresources of the parent resource
	SubresourceStatuses map[string]*SettingsStatus `protobuf:"bytes,4,rep,name=subresource_statuses,json=subresourceStatuses,proto3" json:"subresource_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Opaque details about status results
	Details              *types.Struct `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SettingsStatus) Reset()         { *m = SettingsStatus{} }
func (m *SettingsStatus) String() string { return proto.CompactTextString(m) }
func (*SettingsStatus) ProtoMessage()    {}
func (*SettingsStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3cc1f00029ec6bc, []int{3}
}
func (m *SettingsStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettingsStatus.Unmarshal(m, b)
}
func (m *SettingsStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettingsStatus.Marshal(b, m, deterministic)
}
func (m *SettingsStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingsStatus.Merge(m, src)
}
func (m *SettingsStatus) XXX_Size() int {
	return xxx_messageInfo_SettingsStatus.Size(m)
}
func (m *SettingsStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingsStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SettingsStatus proto.InternalMessageInfo

func (m *SettingsStatus) GetState() SettingsStatus_State {
	if m != nil {
		return m.State
	}
	return SettingsStatus_Pending
}

func (m *SettingsStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *SettingsStatus) GetReportedBy() string {
	if m != nil {
		return m.ReportedBy
	}
	return ""
}

func (m *SettingsStatus) GetSubresourceStatuses() map[string]*SettingsStatus {
	if m != nil {
		return m.SubresourceStatuses
	}
	return nil
}

func (m *SettingsStatus) GetDetails() *types.Struct {
	if m != nil {
		return m.Details
	}
	return nil
}

func init() {
	proto.RegisterEnum("gloo.solo.io.SettingsSpec_DiscoveryOptions_FdsMode", SettingsSpec_DiscoveryOptions_FdsMode_name, SettingsSpec_DiscoveryOptions_FdsMode_value)
	proto.RegisterEnum("gloo.solo.io.SettingsStatus_State", SettingsStatus_State_name, SettingsStatus_State_value)
	proto.RegisterType((*SettingsSpec)(nil), "gloo.solo.io.SettingsSpec")
	proto.RegisterType((*SettingsSpec_KubernetesCrds)(nil), "gloo.solo.io.SettingsSpec.KubernetesCrds")
	proto.RegisterType((*SettingsSpec_KubernetesSecrets)(nil), "gloo.solo.io.SettingsSpec.KubernetesSecrets")
	proto.RegisterType((*SettingsSpec_VaultSecrets)(nil), "gloo.solo.io.SettingsSpec.VaultSecrets")
	proto.RegisterType((*SettingsSpec_ConsulKv)(nil), "gloo.solo.io.SettingsSpec.ConsulKv")
	proto.RegisterType((*SettingsSpec_KubernetesConfigmaps)(nil), "gloo.solo.io.SettingsSpec.KubernetesConfigmaps")
	proto.RegisterType((*SettingsSpec_Directory)(nil), "gloo.solo.io.SettingsSpec.Directory")
	proto.RegisterType((*SettingsSpec_KnativeOptions)(nil), "gloo.solo.io.SettingsSpec.KnativeOptions")
	proto.RegisterType((*SettingsSpec_DiscoveryOptions)(nil), "gloo.solo.io.SettingsSpec.DiscoveryOptions")
	proto.RegisterType((*SettingsSpec_ConsulConfiguration)(nil), "gloo.solo.io.SettingsSpec.ConsulConfiguration")
	proto.RegisterType((*SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions)(nil), "gloo.solo.io.SettingsSpec.ConsulConfiguration.ServiceDiscoveryOptions")
	proto.RegisterType((*SettingsSpec_ConsulUpstreamDiscoveryConfiguration)(nil), "gloo.solo.io.SettingsSpec.ConsulUpstreamDiscoveryConfiguration")
	proto.RegisterType((*SettingsSpec_KubernetesConfiguration)(nil), "gloo.solo.io.SettingsSpec.KubernetesConfiguration")
	proto.RegisterType((*SettingsSpec_KubernetesConfiguration_RateLimits)(nil), "gloo.solo.io.SettingsSpec.KubernetesConfiguration.RateLimits")
	proto.RegisterType((*GlooOptions)(nil), "gloo.solo.io.GlooOptions")
	proto.RegisterType((*GlooOptions_AWSOptions)(nil), "gloo.solo.io.GlooOptions.AWSOptions")
	proto.RegisterType((*GlooOptions_InvalidConfigPolicy)(nil), "gloo.solo.io.GlooOptions.InvalidConfigPolicy")
	proto.RegisterType((*GatewayOptions)(nil), "gloo.solo.io.GatewayOptions")
	proto.RegisterType((*GatewayOptions_ValidationOptions)(nil), "gloo.solo.io.GatewayOptions.ValidationOptions")
	proto.RegisterType((*SettingsStatus)(nil), "gloo.solo.io.SettingsStatus")
	proto.RegisterMapType((map[string]*SettingsStatus)(nil), "gloo.solo.io.SettingsStatus.SubresourceStatusesEntry")
}

func init() {
	proto.RegisterFile("github.com/solo-io/solo-apis/api/gloo/gloo/v1/settings.proto", fileDescriptor_d3cc1f00029ec6bc)
}

var fileDescriptor_d3cc1f00029ec6bc = []byte{
	// 2651 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x59, 0x4d, 0x73, 0x1b, 0xb7,
	0xf9, 0x37, 0x25, 0xcb, 0x22, 0x1f, 0xea, 0x85, 0x86, 0x64, 0x6b, 0xb5, 0x92, 0x15, 0x47, 0xff,
	0xfc, 0x5b, 0xa7, 0x69, 0xc8, 0x58, 0x79, 0x9d, 0x26, 0x6e, 0x2a, 0xd2, 0x96, 0xa5, 0xb1, 0x9d,
	0x28, 0x4b, 0xc5, 0x6e, 0x7b, 0xc8, 0x16, 0xdc, 0x05, 0x29, 0x94, 0xcb, 0xc5, 0x0e, 0x00, 0x52,
	0x62, 0xbe, 0x46, 0x4f, 0xf9, 0x06, 0x9d, 0xe9, 0xa1, 0xd7, 0x7e, 0x81, 0x1e, 0x3a, 0x3d, 0xf7,
	0xd8, 0x4b, 0xaf, 0xbd, 0xf4, 0xd2, 0x99, 0xce, 0xf4, 0xd2, 0xc1, 0xcb, 0xbe, 0x90, 0x92, 0x68,
	0xeb, 0x62, 0x2f, 0x80, 0xe7, 0xf7, 0x03, 0xf0, 0xe0, 0x79, 0xa5, 0xe0, 0x8b, 0x1e, 0x95, 0xa7,
	0xc3, 0x4e, 0x3d, 0x60, 0x83, 0x86, 0x60, 0x11, 0x7b, 0x9f, 0x32, 0xf3, 0x3f, 0x4e, 0xa8, 0x68,
	0xe0, 0x84, 0x36, 0x7a, 0x11, 0x63, 0xe6, 0x9f, 0xd1, 0xc3, 0x86, 0x20, 0x52, 0xd2, 0xb8, 0x27,
	0xea, 0x09, 0x67, 0x92, 0xa1, 0x25, 0x35, 0x5f, 0x57, 0xf2, 0x75, 0xca, 0xdc, 0xed, 0x1e, 0x63,
	0xbd, 0x88, 0x34, 0xf4, 0x5a, 0x67, 0xd8, 0x6d, 0x08, 0xc9, 0x87, 0x81, 0x34, 0xb2, 0xee, 0x7a,
	0x8f, 0xf5, 0x98, 0xfe, 0x6c, 0xa8, 0x2f, 0x3b, 0x8b, 0xc8, 0xb9, 0x34, 0x93, 0xe4, 0x3c, 0x95,
	0xdc, 0xd1, 0x07, 0xe8, 0x53, 0xa9, 0xf7, 0x57, 0xbb, 0xda, 0xb1, 0x5d, 0xdf, 0x9c, 0x5e, 0xe7,
	0xa4, 0x6b, 0x97, 0xde, 0x9b, 0x71, 0x76, 0x72, 0x2e, 0x49, 0x2c, 0x28, 0x8b, 0xed, 0xe9, 0xdd,
	0xa7, 0xb3, 0x84, 0x63, 0x49, 0x78, 0xc2, 0xa9, 0x20, 0x0d, 0x96, 0x48, 0x05, 0x6a, 0x70, 0x2c,
	0x49, 0x44, 0x07, 0x54, 0xe6, 0x5f, 0x96, 0xe8, 0xd3, 0x4b, 0x88, 0x72, 0x82, 0x7a, 0xca, 0x89,
	0x87, 0xf2, 0xd4, 0x0f, 0x58, 0xdc, 0xa5, 0x3d, 0x0b, 0x7c, 0x74, 0xcd, 0x13, 0x74, 0x70, 0xa0,
	0xff, 0xb1, 0xf0, 0x0f, 0x66, 0xc0, 0x03, 0xca, 0x83, 0x21, 0x95, 0x7e, 0x87, 0x13, 0xdc, 0x27,
	0xdc, 0x22, 0x9a, 0x57, 0x21, 0x94, 0x72, 0x78, 0x8c, 0xa3, 0x06, 0x89, 0x47, 0x6c, 0x5c, 0xd0,
	0x55, 0x03, 0x9f, 0x89, 0x46, 0x97, 0x46, 0x32, 0xe3, 0xd8, 0x99, 0x7e, 0xe6, 0x70, 0xc8, 0xb1,
	0x3a, 0xe0, 0x55, 0xeb, 0x67, 0x1c, 0x27, 0x09, 0xe1, 0x56, 0xed, 0xbb, 0xff, 0xdc, 0x81, 0xa5,
	0xb6, 0xb5, 0xa3, 0x76, 0x42, 0x02, 0xd4, 0x80, 0xb5, 0x90, 0x8a, 0x80, 0x8d, 0x08, 0x1f, 0xfb,
	0x31, 0x1e, 0x10, 0x91, 0xe0, 0x80, 0x38, 0xa5, 0xfb, 0xa5, 0x07, 0x15, 0x0f, 0x65, 0x4b, 0x5f,
	0xa5, 0x2b, 0xe8, 0x5d, 0xa8, 0x9d, 0x61, 0x19, 0x9c, 0xe6, 0xc2, 0xc2, 0x99, 0xbb, 0x3f, 0xff,
	0xa0, 0xe2, 0xad, 0xea, 0xf9, 0x4c, 0x52, 0x20, 0x02, 0x4e, 0x7f, 0xd8, 0x21, 0x3c, 0x26, 0x92,
	0x08, 0xab, 0x7c, 0x5f, 0xb0, 0x21, 0x0f, 0x88, 0x73, 0xf3, 0x7e, 0xe9, 0x41, 0x75, 0xef, 0xdd,
	0x7a, 0xd1, 0x88, 0xeb, 0xc5, 0x93, 0xd5, 0x9f, 0x65, 0xd0, 0x16, 0x0f, 0xc5, 0xe1, 0x0d, 0xef,
	0x6e, 0x4e, 0xd6, 0xd2, 0x5c, 0x6d, 0x4d, 0x85, 0xbe, 0x83, 0x8d, 0x90, 0x72, 0x12, 0x48, 0xc6,
	0xc7, 0x53, 0xbb, 0x2c, 0xe8, 0x5d, 0xde, 0x99, 0xb1, 0xcb, 0xe3, 0x14, 0x79, 0x78, 0xc3, 0xbb,
	0x93, 0xd1, 0x4c, 0xf0, 0x7f, 0x0d, 0xb5, 0x80, 0xc5, 0x62, 0x18, 0xf9, 0xfd, 0x51, 0x4a, 0x7c,
	0x47, 0x13, 0xff, 0xdf, 0x0c, 0xe2, 0x96, 0x86, 0x3c, 0x1b, 0x1d, 0xde, 0xf0, 0x56, 0x02, 0xfb,
	0x6d, 0x09, 0x4f, 0x27, 0xf4, 0x22, 0x48, 0xc0, 0x89, 0x4c, 0x89, 0x6f, 0x69, 0xe2, 0x9f, 0xbe,
	0x91, 0x5e, 0xda, 0x1a, 0x29, 0x0e, 0x4b, 0x45, 0xd5, 0x98, 0x49, 0xbb, 0xd3, 0xaf, 0x60, 0x6d,
	0x84, 0x87, 0x91, 0x9c, 0xda, 0x64, 0x51, 0x6f, 0xf2, 0xe3, 0x19, 0x9b, 0xbc, 0x54, 0xa8, 0x9c,
	0xff, 0xf6, 0x28, 0x1f, 0x5f, 0xa6, 0xf5, 0x49, 0xfa, 0xf2, 0x35, 0xb4, 0x5e, 0x2a, 0x68, 0x7d,
	0x82, 0x9f, 0x81, 0x5b, 0x50, 0x12, 0xe6, 0x92, 0x76, 0x71, 0x90, 0x6d, 0x51, 0xd1, 0x5b, 0x34,
	0xde, 0xcc, 0x7c, 0xf4, 0x63, 0x0e, 0x70, 0x22, 0x0e, 0xe7, 0xbc, 0x82, 0xe6, 0xf7, 0x2d, 0xa7,
	0xdd, 0xb0, 0x03, 0x9b, 0xf9, 0x85, 0xa6, 0xf7, 0x83, 0x6b, 0x5c, 0x69, 0xce, 0xcb, 0x35, 0x33,
	0xb5, 0xc7, 0x6f, 0x60, 0x33, 0x37, 0xa5, 0xe9, 0x3d, 0x36, 0xde, 0xdc, 0xa6, 0xe6, 0xbc, 0xbb,
	0xa9, 0x4d, 0x4d, 0xed, 0xf0, 0x05, 0x2c, 0x71, 0xd2, 0xe5, 0x44, 0x9c, 0xfa, 0x2a, 0x52, 0x3a,
	0x4b, 0x9a, 0x74, 0xb3, 0x6e, 0xe2, 0x42, 0x3d, 0x8d, 0x0b, 0xf5, 0xc7, 0x36, 0x6e, 0x78, 0x55,
	0x2b, 0xee, 0x61, 0x49, 0xd0, 0x26, 0x94, 0x43, 0x32, 0xf2, 0x07, 0x2c, 0x24, 0xce, 0xf2, 0xfd,
	0xd2, 0x83, 0xb2, 0xb7, 0x18, 0x92, 0xd1, 0x0b, 0x16, 0x12, 0xe4, 0xc0, 0x62, 0x44, 0xe3, 0x3e,
	0xe1, 0xa1, 0x73, 0xdb, 0xac, 0xd8, 0x21, 0x6a, 0xc1, 0x62, 0x3f, 0xc6, 0x92, 0x8e, 0x88, 0x83,
	0x5e, 0xef, 0xd5, 0x46, 0xf2, 0x6b, 0x13, 0x55, 0xbd, 0x14, 0x89, 0x8e, 0xa0, 0x92, 0x05, 0x1b,
	0x67, 0x4d, 0xd3, 0xbc, 0x37, 0x53, 0xdb, 0x56, 0x36, 0x25, 0xca, 0xd1, 0xe8, 0x7d, 0xb8, 0xa9,
	0x80, 0x8e, 0x93, 0x5e, 0xbd, 0xc8, 0xf2, 0x34, 0x62, 0x2c, 0xc5, 0x68, 0x31, 0xf4, 0x09, 0x2c,
	0xf6, 0xb0, 0x24, 0x67, 0x78, 0xec, 0x6c, 0x6a, 0xc4, 0xf6, 0x14, 0xc2, 0x2c, 0x66, 0x27, 0xb6,
	0xc2, 0xe8, 0x00, 0x6e, 0x99, 0x37, 0x70, 0xd6, 0x35, 0xac, 0xfe, 0xda, 0x87, 0x33, 0x86, 0x98,
	0x2a, 0xde, 0xa2, 0x11, 0x85, 0x55, 0xf3, 0x95, 0xdd, 0xc9, 0xd9, 0xd1, 0x84, 0x5f, 0xbe, 0x96,
	0xf0, 0xdb, 0x44, 0x48, 0x4e, 0xf0, 0x20, 0x43, 0x4e, 0xee, 0x30, 0xcd, 0x8b, 0x3c, 0x80, 0xdc,
	0xfc, 0x9d, 0xbb, 0x7a, 0x97, 0xbd, 0x6b, 0xf8, 0x50, 0x4a, 0x5c, 0x60, 0x41, 0x9f, 0x01, 0xe4,
	0x09, 0xcb, 0xa9, 0x69, 0x4e, 0x67, 0x92, 0xf3, 0x49, 0xb6, 0xee, 0x15, 0x64, 0xd1, 0x0b, 0xa8,
	0x64, 0xc9, 0xdc, 0x71, 0xad, 0x43, 0xe7, 0xe9, 0xdd, 0x26, 0xde, 0xe9, 0xe3, 0xf1, 0x11, 0x0d,
	0x48, 0x7a, 0x4a, 0x2f, 0x67, 0x40, 0x6d, 0xa8, 0x65, 0x03, 0x5f, 0x10, 0x3e, 0x22, 0xdc, 0xd9,
	0xd2, 0xac, 0x0f, 0x5e, 0xcf, 0x6a, 0xe9, 0x56, 0x33, 0xc1, 0xb6, 0x26, 0x40, 0x9f, 0xc2, 0x4d,
	0x95, 0xf3, 0x9d, 0x6d, 0xeb, 0x9b, 0xba, 0x00, 0x98, 0xcd, 0xa1, 0x01, 0xe8, 0x73, 0x58, 0x24,
	0xe7, 0x52, 0x55, 0x1d, 0xce, 0x3d, 0x8d, 0x7d, 0xbb, 0x3e, 0x55, 0x95, 0x5c, 0x44, 0xa6, 0x08,
	0xb7, 0x06, 0x2b, 0x93, 0xd9, 0xcf, 0x5d, 0x83, 0xdb, 0x17, 0xe2, 0xbe, 0xfb, 0x87, 0x39, 0x58,
	0x2a, 0x06, 0x6a, 0xb4, 0x0e, 0x0b, 0x92, 0xf5, 0x49, 0x6c, 0xd3, 0xb7, 0x19, 0x28, 0xcf, 0xc5,
	0x61, 0xc8, 0x89, 0x50, 0x89, 0x5a, 0xcd, 0xa7, 0x43, 0xb4, 0x01, 0x8b, 0x01, 0xf6, 0x03, 0xc2,
	0xa5, 0x33, 0xaf, 0x57, 0x6e, 0x05, 0xb8, 0x45, 0xb8, 0xb4, 0x0b, 0x09, 0x96, 0xa7, 0x3a, 0x51,
	0xeb, 0x85, 0x63, 0x2c, 0x4f, 0xd1, 0x5b, 0x50, 0x0d, 0x22, 0x4a, 0x62, 0x69, 0x50, 0x0b, 0x7a,
	0x11, 0xcc, 0x94, 0x46, 0xde, 0x03, 0x3b, 0xf2, 0xfb, 0x64, 0xac, 0xb3, 0x59, 0xc5, 0xab, 0x98,
	0x99, 0x67, 0x64, 0x8c, 0x7e, 0x04, 0xab, 0x32, 0x12, 0xf6, 0x79, 0x74, 0x09, 0xa1, 0x93, 0x51,
	0xc5, 0x5b, 0x96, 0x91, 0x30, 0x3a, 0x57, 0x05, 0x04, 0xfa, 0x04, 0xca, 0x34, 0x16, 0x24, 0x18,
	0xf2, 0x34, 0x9d, 0xb8, 0x17, 0x42, 0x58, 0x93, 0xb1, 0xe8, 0x25, 0x8e, 0x86, 0xc4, 0xcb, 0x64,
	0x55, 0x00, 0xe3, 0x8c, 0x99, 0xcd, 0x2b, 0xe6, 0xb2, 0x6a, 0xfc, 0x8c, 0x8c, 0xdd, 0xff, 0x87,
	0x72, 0x1a, 0x3f, 0x27, 0xc4, 0x4a, 0x93, 0x62, 0x77, 0x61, 0xfd, 0xb2, 0xd4, 0xe1, 0xbe, 0x0b,
	0x95, 0x2c, 0xc4, 0xa3, 0x6d, 0x15, 0xad, 0xec, 0xc0, 0x12, 0xe4, 0x13, 0xee, 0xdf, 0x4b, 0xb0,
	0x32, 0x19, 0xe7, 0xd0, 0x3e, 0xdc, 0x0b, 0xa2, 0xa1, 0x90, 0x84, 0xfb, 0x34, 0xee, 0x29, 0xe5,
	0xfb, 0x09, 0x67, 0xe7, 0x63, 0x3f, 0x7d, 0x19, 0x43, 0xe2, 0x5a, 0xa1, 0x23, 0x23, 0x73, 0xac,
	0x44, 0xf6, 0xed, 0x63, 0xb5, 0x60, 0xc7, 0x06, 0x4b, 0x3f, 0x2d, 0x18, 0xa7, 0x38, 0xcc, 0xeb,
	0x6e, 0x59, 0xa9, 0x27, 0x56, 0xe8, 0x2a, 0x12, 0x1a, 0x5f, 0x4a, 0x32, 0x3f, 0x41, 0x72, 0x14,
	0x5f, 0x24, 0x71, 0x7f, 0x28, 0x41, 0x6d, 0x3a, 0x00, 0xa3, 0xaf, 0xa0, 0xdc, 0x0d, 0x85, 0x49,
	0x1d, 0xea, 0x32, 0x2b, 0x7b, 0x1f, 0x5e, 0x23, 0x7e, 0xd7, 0x0f, 0x42, 0xa1, 0xd2, 0x8c, 0xb7,
	0xd8, 0x35, 0x1f, 0xbb, 0x1f, 0xc3, 0xa2, 0x9d, 0x43, 0xcb, 0x50, 0x69, 0x3e, 0xdf, 0x6f, 0x3d,
	0x7b, 0x7e, 0xd4, 0x3e, 0xa9, 0xdd, 0x50, 0xc3, 0x57, 0x87, 0x47, 0x27, 0x4f, 0xf4, 0xb0, 0x84,
	0x96, 0xa0, 0xfc, 0xf8, 0xa8, 0xbd, 0xdf, 0x7c, 0xfe, 0xe4, 0x71, 0x6d, 0xce, 0xfd, 0xdb, 0x02,
	0xac, 0x5d, 0x12, 0x6d, 0xd1, 0x76, 0xee, 0x04, 0x5a, 0xd5, 0xcd, 0x39, 0xa7, 0x94, 0x3b, 0xc2,
	0x0e, 0x40, 0x88, 0x25, 0x0e, 0xb4, 0x8b, 0x5a, 0x3d, 0x16, 0x66, 0x90, 0x0b, 0xe5, 0xa1, 0x50,
	0x8a, 0x18, 0x10, 0xab, 0xa0, 0x6c, 0xac, 0xd6, 0x12, 0x2c, 0xc4, 0x19, 0xe3, 0xa1, 0x75, 0x96,
	0x6c, 0x9c, 0x3b, 0xe4, 0x42, 0xd1, 0x21, 0x8d, 0x77, 0x75, 0x69, 0x44, 0xac, 0x83, 0xdc, 0x0a,
	0xf0, 0x01, 0x8d, 0x48, 0xd1, 0xed, 0x16, 0x27, 0xdc, 0x6e, 0x0b, 0x2a, 0xca, 0xdf, 0x0c, 0xa6,
	0x6c, 0x36, 0x51, 0x13, 0x1a, 0xb5, 0x09, 0xe5, 0x3e, 0x19, 0x9b, 0x35, 0x6b, 0xf3, 0x7d, 0x32,
	0xd6, 0x4b, 0xcf, 0x61, 0x3d, 0x75, 0x0d, 0x5f, 0xf4, 0x69, 0xe2, 0x8f, 0x08, 0xa7, 0xdd, 0xb1,
	0x2d, 0x67, 0x66, 0xb9, 0x14, 0x4a, 0x71, 0xed, 0x3e, 0x4d, 0x5e, 0x6a, 0x14, 0xfa, 0x04, 0x2a,
	0x67, 0x98, 0x4a, 0x5f, 0xd2, 0x01, 0x71, 0xaa, 0xaf, 0x2b, 0x2c, 0xca, 0x4a, 0xf6, 0x84, 0x0e,
	0x08, 0x12, 0x70, 0x5b, 0x98, 0xb8, 0xed, 0xe7, 0x39, 0xde, 0x14, 0x26, 0x07, 0xd7, 0x4b, 0x9a,
	0x69, 0xfc, 0xbf, 0x90, 0xfe, 0x6b, 0x62, 0x6a, 0x01, 0xbd, 0x0d, 0x4b, 0xa7, 0x52, 0x26, 0x99,
	0x5d, 0x2f, 0x6b, 0xcd, 0x54, 0xd5, 0x5c, 0xea, 0x0c, 0x6f, 0x41, 0x35, 0x8c, 0x45, 0x26, 0xb1,
	0x62, 0x9f, 0x3d, 0x16, 0xa9, 0xc0, 0x33, 0x58, 0x57, 0x02, 0x09, 0x8b, 0x22, 0x1a, 0xf7, 0x8c,
	0xc7, 0x8c, 0x70, 0xe4, 0xac, 0xbe, 0xee, 0xee, 0x28, 0x8c, 0xc5, 0xb1, 0x41, 0x1d, 0x59, 0x90,
	0xfb, 0x05, 0x6c, 0x5c, 0x71, 0x7a, 0x75, 0x56, 0x65, 0x6c, 0xbe, 0xb1, 0x36, 0x65, 0xa1, 0xaa,
	0x9f, 0xaa, 0xaa, 0xb9, 0x96, 0x99, 0x72, 0xff, 0x5a, 0x82, 0x77, 0xde, 0x24, 0xe9, 0xa3, 0x77,
	0x60, 0x79, 0x28, 0xc8, 0x49, 0x24, 0x4e, 0x70, 0xaf, 0x47, 0xe3, 0x9e, 0x4e, 0xc9, 0x65, 0x6f,
	0x72, 0x52, 0x19, 0xbc, 0xd4, 0x23, 0x15, 0x6d, 0x75, 0x41, 0x57, 0xf1, 0x0a, 0x33, 0xe8, 0x21,
	0xdc, 0x52, 0x01, 0xb1, 0x85, 0x6d, 0x49, 0xb7, 0x59, 0x0f, 0x18, 0x27, 0xd9, 0x3b, 0x79, 0xc4,
	0xd4, 0xac, 0x1e, 0xe9, 0x7a, 0x56, 0x10, 0xfd, 0x04, 0x6a, 0x22, 0x89, 0xa8, 0x3c, 0x31, 0x81,
	0x9c, 0xaa, 0xc6, 0x70, 0x4d, 0xef, 0x7d, 0x61, 0xde, 0xfd, 0x63, 0x09, 0x36, 0xae, 0x28, 0x2e,
	0xd0, 0x77, 0x50, 0x55, 0x59, 0xd8, 0xd7, 0x69, 0xd8, 0x78, 0x6b, 0x75, 0xef, 0xd1, 0xf5, 0xab,
	0x94, 0xba, 0xaa, 0x68, 0x9f, 0x6b, 0x12, 0x0f, 0x78, 0xf6, 0xed, 0x7e, 0x04, 0x90, 0xaf, 0xa0,
	0x1a, 0xcc, 0x7f, 0x73, 0xdc, 0xd6, 0xbb, 0xcc, 0x79, 0xea, 0x53, 0xf9, 0x6c, 0x67, 0xc8, 0x85,
	0xd4, 0x61, 0x60, 0xd9, 0x33, 0x83, 0xe6, 0x2a, 0x2c, 0x4f, 0xb4, 0x96, 0x6a, 0x62, 0xa2, 0xeb,
	0x69, 0xde, 0x86, 0xd5, 0xa9, 0x8a, 0x7e, 0xf7, 0x5f, 0x15, 0xa8, 0x16, 0x0a, 0x4e, 0xb4, 0x0b,
	0xcb, 0xe7, 0xa1, 0xf0, 0x3b, 0x34, 0x0e, 0xb5, 0xd5, 0xd9, 0xa8, 0x5f, 0x3d, 0x0f, 0x45, 0x93,
	0xc6, 0xa1, 0x32, 0x3b, 0xf4, 0x01, 0xac, 0x8f, 0x70, 0x44, 0x43, 0x7d, 0x87, 0x82, 0xa8, 0x09,
	0x4a, 0x28, 0x5f, 0xcb, 0x10, 0x2f, 0xa0, 0x36, 0xf5, 0x83, 0x83, 0x89, 0xe2, 0xd5, 0xbd, 0xdd,
	0x49, 0xad, 0xb5, 0x8c, 0x54, 0xd3, 0x08, 0x19, 0x65, 0x79, 0xab, 0xc1, 0xc4, 0xac, 0x40, 0xdf,
	0xc2, 0x26, 0x89, 0xc3, 0x84, 0xd1, 0x58, 0x0a, 0xff, 0x0c, 0xf3, 0x81, 0x32, 0x7d, 0xe5, 0xf2,
	0x6c, 0x28, 0x6d, 0xdb, 0x3e, 0xc3, 0xf2, 0x37, 0x32, 0xec, 0x2b, 0x03, 0x3d, 0x31, 0x48, 0xf4,
	0x04, 0xaa, 0xf8, 0x4c, 0xf8, 0xb6, 0x76, 0xba, 0xbc, 0x33, 0x2f, 0xe8, 0xaa, 0xbe, 0xff, 0xaa,
	0x9d, 0x3a, 0x37, 0xe0, 0x33, 0x91, 0xaa, 0x10, 0xc3, 0x1d, 0x1a, 0x6b, 0x25, 0xa4, 0xad, 0x7e,
	0xc2, 0x22, 0x1a, 0x8c, 0x6d, 0xe3, 0xfc, 0xfe, 0xd5, 0x84, 0x47, 0x06, 0x66, 0xae, 0x7d, 0xac,
	0x41, 0xde, 0x1a, 0xbd, 0x38, 0x89, 0x0e, 0xe0, 0xad, 0x90, 0x0a, 0xdc, 0x89, 0x88, 0x5f, 0xe8,
	0x40, 0x43, 0x22, 0x24, 0x8d, 0xb1, 0x39, 0xfd, 0xa2, 0xb6, 0xeb, 0x7b, 0x56, 0x2c, 0x37, 0xc0,
	0xc7, 0x05, 0x21, 0xf4, 0x18, 0x6a, 0x29, 0x4f, 0x8f, 0x27, 0x81, 0x7f, 0x46, 0x3a, 0x6f, 0x50,
	0xcb, 0xac, 0x58, 0xcc, 0x53, 0x9e, 0x04, 0xaf, 0x48, 0x07, 0x05, 0x70, 0x3f, 0x65, 0x31, 0x89,
	0xba, 0x87, 0x79, 0x07, 0xf7, 0x88, 0x1f, 0xb0, 0x28, 0x22, 0x81, 0xda, 0xca, 0x76, 0xc3, 0xb3,
	0x58, 0xd3, 0xa3, 0xea, 0x3c, 0xfe, 0xd4, 0x30, 0xb4, 0x32, 0x02, 0xf4, 0x0d, 0xdc, 0xe5, 0xa4,
	0x47, 0xce, 0xfd, 0x01, 0x3e, 0x57, 0xdb, 0xf4, 0x38, 0x1e, 0xf8, 0x82, 0x7e, 0x9f, 0x36, 0xbe,
	0xdb, 0x17, 0xa8, 0xbf, 0x3d, 0x8a, 0xe5, 0x87, 0x7b, 0x86, 0x7c, 0x4d, 0x63, 0x5f, 0xe0, 0xf3,
	0x63, 0x83, 0x6c, 0xd3, 0xef, 0x09, 0x7a, 0x0f, 0x10, 0x27, 0x42, 0xfa, 0x93, 0x06, 0x5f, 0xd5,
	0x56, 0xbc, 0xaa, 0x56, 0x7e, 0x99, 0x1b, 0xbd, 0xfb, 0xdf, 0x12, 0x40, 0xfe, 0xe0, 0xe8, 0x17,
	0xb0, 0x45, 0x62, 0x7d, 0xe5, 0x80, 0x93, 0x90, 0xc4, 0x92, 0xe2, 0x48, 0xa4, 0xb9, 0xc3, 0x14,
	0x5c, 0xe5, 0xc3, 0x1b, 0xde, 0xa6, 0x11, 0x6a, 0xe5, 0x32, 0x36, 0x26, 0x8e, 0xd1, 0xef, 0x4a,
	0xb0, 0x95, 0xe6, 0x1c, 0x1c, 0x04, 0x6c, 0xa8, 0x2a, 0xd6, 0x5c, 0x4e, 0x7b, 0x53, 0x75, 0xef,
	0x9b, 0xba, 0xfe, 0xc5, 0xad, 0x6e, 0x7f, 0x17, 0xb4, 0xbf, 0xb4, 0xa9, 0x14, 0x51, 0x57, 0xb6,
	0x1a, 0xe1, 0x41, 0x27, 0xc4, 0xf5, 0xd1, 0x9e, 0x32, 0xc6, 0xe7, 0x7a, 0x60, 0x0c, 0x25, 0x4d,
	0x43, 0xfb, 0x86, 0xb9, 0x70, 0x00, 0x75, 0x2a, 0x71, 0xd5, 0x62, 0xf3, 0x0e, 0xac, 0x15, 0x2f,
	0xd4, 0x25, 0x32, 0x38, 0x25, 0xdc, 0xfd, 0x4b, 0x09, 0xd6, 0x2e, 0xb1, 0x4e, 0xf4, 0x91, 0x7a,
	0x95, 0x24, 0xc2, 0x81, 0x2a, 0xd6, 0x8c, 0xcd, 0x73, 0x36, 0x54, 0xad, 0x9b, 0xd6, 0x80, 0xb7,
	0x6e, 0x57, 0x2d, 0xd6, 0xd3, 0x6b, 0xe8, 0x11, 0x6c, 0x4d, 0x48, 0xfb, 0x9c, 0x88, 0x84, 0xc5,
	0x42, 0x59, 0x4c, 0x48, 0x6c, 0x54, 0x73, 0x68, 0x01, 0xe3, 0x59, 0x81, 0x96, 0x2a, 0xb6, 0xae,
	0x86, 0x77, 0x58, 0x38, 0xb6, 0xd5, 0xcf, 0xa5, 0xf0, 0x26, 0x0b, 0xc7, 0xbb, 0xff, 0x59, 0x80,
	0x95, 0xc9, 0x8e, 0x59, 0x5d, 0xa3, 0x10, 0xd1, 0x6c, 0xe9, 0x5f, 0x08, 0x7f, 0x85, 0x78, 0x67,
	0x3a, 0x00, 0x1d, 0xd5, 0xbe, 0x02, 0xc8, 0xe7, 0x6d, 0x3c, 0xab, 0xcf, 0xea, 0xcc, 0xeb, 0x2f,
	0x33, 0xf1, 0x2c, 0x70, 0xe4, 0x0c, 0xe8, 0x10, 0xde, 0xe6, 0x04, 0x87, 0xbe, 0x6d, 0xdf, 0x85,
	0xdf, 0xe5, 0x6c, 0xe0, 0xe3, 0x28, 0x2a, 0xfe, 0x90, 0x79, 0xd3, 0xf8, 0xb5, 0x12, 0xb4, 0xe4,
	0xe2, 0x80, 0xb3, 0xc1, 0x7e, 0x14, 0x15, 0x7e, 0xd6, 0x3c, 0x80, 0x1d, 0x1c, 0x69, 0x0a, 0xc1,
	0xb8, 0xb4, 0x5a, 0x92, 0xda, 0x5c, 0xed, 0xf3, 0xa8, 0xe0, 0x56, 0xd6, 0x15, 0xa6, 0x6b, 0x24,
	0xdb, 0x8c, 0x4b, 0xad, 0xab, 0x13, 0x25, 0x66, 0x1f, 0x6a, 0x0f, 0xee, 0x04, 0x6c, 0x90, 0xa8,
	0x4a, 0x83, 0x84, 0xd6, 0xb9, 0x45, 0x42, 0x02, 0x1d, 0xca, 0xca, 0xde, 0x5a, 0xbe, 0xa8, 0xbd,
	0x56, 0xe5, 0x3a, 0xf7, 0x87, 0x79, 0xb8, 0x7d, 0xe1, 0x9e, 0xe8, 0x4b, 0xd8, 0x36, 0xf0, 0x2b,
	0xf4, 0x6c, 0x72, 0xc7, 0xa6, 0x96, 0x79, 0x79, 0x99, 0xb2, 0x1f, 0xc1, 0x56, 0x01, 0x7a, 0x46,
	0x3a, 0xa7, 0x8c, 0xf5, 0x7d, 0xd5, 0xa9, 0x15, 0x9a, 0x43, 0x27, 0x17, 0x79, 0x65, 0x24, 0x4e,
	0x22, 0xa1, 0x9b, 0xbe, 0xcf, 0xc1, 0xbd, 0x02, 0xae, 0x1a, 0x2c, 0x53, 0x14, 0x6f, 0x5c, 0x86,
	0x56, 0x2d, 0x61, 0x0b, 0x76, 0x68, 0x2f, 0x66, 0x9c, 0xf8, 0xea, 0x71, 0x8b, 0x57, 0xe8, 0x62,
	0x1a, 0xa9, 0x06, 0x50, 0xab, 0xd3, 0xdb, 0x32, 0x52, 0x2a, 0xa4, 0xe7, 0x77, 0x38, 0x30, 0x22,
	0xe8, 0x4b, 0x58, 0xb6, 0x6f, 0x82, 0x83, 0x80, 0x24, 0xd2, 0xa6, 0x83, 0x59, 0x21, 0x71, 0xc9,
	0x00, 0xf6, 0xb5, 0x3c, 0xda, 0x87, 0x15, 0x1c, 0x45, 0xec, 0x4c, 0x65, 0xbc, 0x58, 0x95, 0x16,
	0xf6, 0x47, 0xd2, 0x59, 0x0c, 0xcb, 0x1a, 0xf1, 0xca, 0x02, 0x76, 0xff, 0x3c, 0x0f, 0x2b, 0x59,
	0x61, 0x22, 0xb1, 0x1c, 0x0a, 0xf4, 0x19, 0x2c, 0x08, 0x89, 0x65, 0xda, 0x11, 0xed, 0x5e, 0x51,
	0xc5, 0x68, 0xe1, 0xba, 0xfa, 0x8f, 0x78, 0x06, 0x80, 0xee, 0xc2, 0x2d, 0x4e, 0xb0, 0x60, 0xb1,
	0x7d, 0x3c, 0x3b, 0x52, 0x35, 0x2b, 0x27, 0x09, 0xe3, 0x92, 0x84, 0x7e, 0x27, 0x75, 0x47, 0x48,
	0xa7, 0x9a, 0x63, 0x74, 0x0a, 0xeb, 0x62, 0xd8, 0xe1, 0xb6, 0x40, 0xf3, 0x85, 0xe6, 0xd6, 0xa6,
	0x3d, 0xff, 0xa0, 0xba, 0xf7, 0xf1, 0xec, 0x13, 0xe4, 0xc0, 0xb6, 0xc5, 0x3d, 0x89, 0x25, 0x1f,
	0x7b, 0x6b, 0xe2, 0xe2, 0x0a, 0x7a, 0x08, 0x8b, 0x21, 0x91, 0x98, 0x46, 0x69, 0x36, 0xdf, 0xb8,
	0xa0, 0xab, 0xb6, 0xfe, 0x23, 0x94, 0x97, 0xca, 0xb9, 0x21, 0x38, 0x57, 0xed, 0xa1, 0x2a, 0xb1,
	0xbc, 0x1d, 0x57, 0x9f, 0x68, 0x0f, 0x16, 0x46, 0x4a, 0xd1, 0x36, 0x5a, 0x6f, 0xcf, 0x3a, 0xbb,
	0x67, 0x44, 0x7f, 0x36, 0xf7, 0x59, 0x69, 0xf7, 0x11, 0x2c, 0x68, 0x5d, 0xa2, 0x2a, 0x2c, 0x1e,
	0x93, 0x38, 0xa4, 0x71, 0xaf, 0x76, 0x43, 0xf5, 0x89, 0xe6, 0xad, 0x49, 0x68, 0xba, 0x46, 0x8f,
	0xfc, 0x96, 0x04, 0x6a, 0x34, 0xa7, 0x04, 0xed, 0x33, 0xd6, 0xe6, 0x9b, 0x3f, 0xff, 0xd3, 0xbf,
	0x6f, 0x96, 0x7e, 0xff, 0x8f, 0x9d, 0xd2, 0xaf, 0x3f, 0x9a, 0xf9, 0x07, 0xba, 0xa4, 0xdf, 0xcb,
	0xfe, 0x90, 0x93, 0x9e, 0xaa, 0x31, 0x7a, 0xd8, 0xb9, 0xa5, 0xaf, 0xff, 0xe1, 0xff, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xae, 0x5d, 0x6b, 0x52, 0xdf, 0x1b, 0x00, 0x00,
}

func (this *SettingsSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec)
	if !ok {
		that2, ok := that.(SettingsSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DiscoveryNamespace != that1.DiscoveryNamespace {
		return false
	}
	if len(this.WatchNamespaces) != len(that1.WatchNamespaces) {
		return false
	}
	for i := range this.WatchNamespaces {
		if this.WatchNamespaces[i] != that1.WatchNamespaces[i] {
			return false
		}
	}
	if that1.ConfigSource == nil {
		if this.ConfigSource != nil {
			return false
		}
	} else if this.ConfigSource == nil {
		return false
	} else if !this.ConfigSource.Equal(that1.ConfigSource) {
		return false
	}
	if that1.SecretSource == nil {
		if this.SecretSource != nil {
			return false
		}
	} else if this.SecretSource == nil {
		return false
	} else if !this.SecretSource.Equal(that1.SecretSource) {
		return false
	}
	if that1.ArtifactSource == nil {
		if this.ArtifactSource != nil {
			return false
		}
	} else if this.ArtifactSource == nil {
		return false
	} else if !this.ArtifactSource.Equal(that1.ArtifactSource) {
		return false
	}
	if !this.RefreshRate.Equal(that1.RefreshRate) {
		return false
	}
	if this.DevMode != that1.DevMode {
		return false
	}
	if this.Linkerd != that1.Linkerd {
		return false
	}
	if !this.Knative.Equal(that1.Knative) {
		return false
	}
	if !this.Discovery.Equal(that1.Discovery) {
		return false
	}
	if !this.Gloo.Equal(that1.Gloo) {
		return false
	}
	if !this.Gateway.Equal(that1.Gateway) {
		return false
	}
	if !this.Consul.Equal(that1.Consul) {
		return false
	}
	if !this.ConsulDiscovery.Equal(that1.ConsulDiscovery) {
		return false
	}
	if !this.Kubernetes.Equal(that1.Kubernetes) {
		return false
	}
	if !this.Extensions.Equal(that1.Extensions) {
		return false
	}
	if !this.Ratelimit.Equal(that1.Ratelimit) {
		return false
	}
	if !this.RatelimitServer.Equal(that1.RatelimitServer) {
		return false
	}
	if !this.Rbac.Equal(that1.Rbac) {
		return false
	}
	if !this.Extauth.Equal(that1.Extauth) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SettingsSpec_KubernetesConfigSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_KubernetesConfigSource)
	if !ok {
		that2, ok := that.(SettingsSpec_KubernetesConfigSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.KubernetesConfigSource.Equal(that1.KubernetesConfigSource) {
		return false
	}
	return true
}
func (this *SettingsSpec_DirectoryConfigSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_DirectoryConfigSource)
	if !ok {
		that2, ok := that.(SettingsSpec_DirectoryConfigSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectoryConfigSource.Equal(that1.DirectoryConfigSource) {
		return false
	}
	return true
}
func (this *SettingsSpec_ConsulKvSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_ConsulKvSource)
	if !ok {
		that2, ok := that.(SettingsSpec_ConsulKvSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ConsulKvSource.Equal(that1.ConsulKvSource) {
		return false
	}
	return true
}
func (this *SettingsSpec_KubernetesSecretSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_KubernetesSecretSource)
	if !ok {
		that2, ok := that.(SettingsSpec_KubernetesSecretSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.KubernetesSecretSource.Equal(that1.KubernetesSecretSource) {
		return false
	}
	return true
}
func (this *SettingsSpec_VaultSecretSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_VaultSecretSource)
	if !ok {
		that2, ok := that.(SettingsSpec_VaultSecretSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VaultSecretSource.Equal(that1.VaultSecretSource) {
		return false
	}
	return true
}
func (this *SettingsSpec_DirectorySecretSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_DirectorySecretSource)
	if !ok {
		that2, ok := that.(SettingsSpec_DirectorySecretSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectorySecretSource.Equal(that1.DirectorySecretSource) {
		return false
	}
	return true
}
func (this *SettingsSpec_KubernetesArtifactSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_KubernetesArtifactSource)
	if !ok {
		that2, ok := that.(SettingsSpec_KubernetesArtifactSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.KubernetesArtifactSource.Equal(that1.KubernetesArtifactSource) {
		return false
	}
	return true
}
func (this *SettingsSpec_DirectoryArtifactSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_DirectoryArtifactSource)
	if !ok {
		that2, ok := that.(SettingsSpec_DirectoryArtifactSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectoryArtifactSource.Equal(that1.DirectoryArtifactSource) {
		return false
	}
	return true
}
func (this *SettingsSpec_ConsulKvArtifactSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_ConsulKvArtifactSource)
	if !ok {
		that2, ok := that.(SettingsSpec_ConsulKvArtifactSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ConsulKvArtifactSource.Equal(that1.ConsulKvArtifactSource) {
		return false
	}
	return true
}
func (this *SettingsSpec_KubernetesCrds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_KubernetesCrds)
	if !ok {
		that2, ok := that.(SettingsSpec_KubernetesCrds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SettingsSpec_KubernetesSecrets) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_KubernetesSecrets)
	if !ok {
		that2, ok := that.(SettingsSpec_KubernetesSecrets)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SettingsSpec_VaultSecrets) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_VaultSecrets)
	if !ok {
		that2, ok := that.(SettingsSpec_VaultSecrets)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.CaCert != that1.CaCert {
		return false
	}
	if this.CaPath != that1.CaPath {
		return false
	}
	if this.ClientCert != that1.ClientCert {
		return false
	}
	if this.ClientKey != that1.ClientKey {
		return false
	}
	if this.TlsServerName != that1.TlsServerName {
		return false
	}
	if !this.Insecure.Equal(that1.Insecure) {
		return false
	}
	if this.RootKey != that1.RootKey {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SettingsSpec_ConsulKv) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_ConsulKv)
	if !ok {
		that2, ok := that.(SettingsSpec_ConsulKv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RootKey != that1.RootKey {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SettingsSpec_KubernetesConfigmaps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_KubernetesConfigmaps)
	if !ok {
		that2, ok := that.(SettingsSpec_KubernetesConfigmaps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SettingsSpec_Directory) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_Directory)
	if !ok {
		that2, ok := that.(SettingsSpec_Directory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Directory != that1.Directory {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SettingsSpec_KnativeOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_KnativeOptions)
	if !ok {
		that2, ok := that.(SettingsSpec_KnativeOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClusterIngressProxyAddress != that1.ClusterIngressProxyAddress {
		return false
	}
	if this.KnativeExternalProxyAddress != that1.KnativeExternalProxyAddress {
		return false
	}
	if this.KnativeInternalProxyAddress != that1.KnativeInternalProxyAddress {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SettingsSpec_DiscoveryOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_DiscoveryOptions)
	if !ok {
		that2, ok := that.(SettingsSpec_DiscoveryOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FdsMode != that1.FdsMode {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SettingsSpec_ConsulConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_ConsulConfiguration)
	if !ok {
		that2, ok := that.(SettingsSpec_ConsulConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Datacenter != that1.Datacenter {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.CaFile != that1.CaFile {
		return false
	}
	if this.CaPath != that1.CaPath {
		return false
	}
	if this.CertFile != that1.CertFile {
		return false
	}
	if this.KeyFile != that1.KeyFile {
		return false
	}
	if !this.InsecureSkipVerify.Equal(that1.InsecureSkipVerify) {
		return false
	}
	if !this.WaitTime.Equal(that1.WaitTime) {
		return false
	}
	if !this.ServiceDiscovery.Equal(that1.ServiceDiscovery) {
		return false
	}
	if this.HttpAddress != that1.HttpAddress {
		return false
	}
	if this.DnsAddress != that1.DnsAddress {
		return false
	}
	if !this.DnsPollingInterval.Equal(that1.DnsPollingInterval) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions)
	if !ok {
		that2, ok := that.(SettingsSpec_ConsulConfiguration_ServiceDiscoveryOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DataCenters) != len(that1.DataCenters) {
		return false
	}
	for i := range this.DataCenters {
		if this.DataCenters[i] != that1.DataCenters[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SettingsSpec_ConsulUpstreamDiscoveryConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_ConsulUpstreamDiscoveryConfiguration)
	if !ok {
		that2, ok := that.(SettingsSpec_ConsulUpstreamDiscoveryConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UseTlsTagging != that1.UseTlsTagging {
		return false
	}
	if this.TlsTagName != that1.TlsTagName {
		return false
	}
	if !this.RootCa.Equal(that1.RootCa) {
		return false
	}
	if this.SplitTlsServices != that1.SplitTlsServices {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SettingsSpec_KubernetesConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_KubernetesConfiguration)
	if !ok {
		that2, ok := that.(SettingsSpec_KubernetesConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimits.Equal(that1.RateLimits) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SettingsSpec_KubernetesConfiguration_RateLimits) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec_KubernetesConfiguration_RateLimits)
	if !ok {
		that2, ok := that.(SettingsSpec_KubernetesConfiguration_RateLimits)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QPS != that1.QPS {
		return false
	}
	if this.Burst != that1.Burst {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GlooOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlooOptions)
	if !ok {
		that2, ok := that.(GlooOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.XdsBindAddr != that1.XdsBindAddr {
		return false
	}
	if this.ValidationBindAddr != that1.ValidationBindAddr {
		return false
	}
	if !this.CircuitBreakers.Equal(that1.CircuitBreakers) {
		return false
	}
	if !this.EndpointsWarmingTimeout.Equal(that1.EndpointsWarmingTimeout) {
		return false
	}
	if !this.AwsOptions.Equal(that1.AwsOptions) {
		return false
	}
	if !this.InvalidConfigPolicy.Equal(that1.InvalidConfigPolicy) {
		return false
	}
	if this.DisableKubernetesDestinations != that1.DisableKubernetesDestinations {
		return false
	}
	if !this.DisableGrpcWeb.Equal(that1.DisableGrpcWeb) {
		return false
	}
	if !this.DisableProxyGarbageCollection.Equal(that1.DisableProxyGarbageCollection) {
		return false
	}
	if !this.RegexMaxProgramSize.Equal(that1.RegexMaxProgramSize) {
		return false
	}
	if this.RestXdsBindAddr != that1.RestXdsBindAddr {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GlooOptions_AWSOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlooOptions_AWSOptions)
	if !ok {
		that2, ok := that.(GlooOptions_AWSOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.CredentialsFetcher == nil {
		if this.CredentialsFetcher != nil {
			return false
		}
	} else if this.CredentialsFetcher == nil {
		return false
	} else if !this.CredentialsFetcher.Equal(that1.CredentialsFetcher) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GlooOptions_AWSOptions_EnableCredentialsDiscovey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlooOptions_AWSOptions_EnableCredentialsDiscovey)
	if !ok {
		that2, ok := that.(GlooOptions_AWSOptions_EnableCredentialsDiscovey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EnableCredentialsDiscovey != that1.EnableCredentialsDiscovey {
		return false
	}
	return true
}
func (this *GlooOptions_AWSOptions_ServiceAccountCredentials) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlooOptions_AWSOptions_ServiceAccountCredentials)
	if !ok {
		that2, ok := that.(GlooOptions_AWSOptions_ServiceAccountCredentials)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServiceAccountCredentials.Equal(that1.ServiceAccountCredentials) {
		return false
	}
	return true
}
func (this *GlooOptions_InvalidConfigPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlooOptions_InvalidConfigPolicy)
	if !ok {
		that2, ok := that.(GlooOptions_InvalidConfigPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ReplaceInvalidRoutes != that1.ReplaceInvalidRoutes {
		return false
	}
	if this.InvalidRouteResponseCode != that1.InvalidRouteResponseCode {
		return false
	}
	if this.InvalidRouteResponseBody != that1.InvalidRouteResponseBody {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GatewayOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayOptions)
	if !ok {
		that2, ok := that.(GatewayOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ValidationServerAddr != that1.ValidationServerAddr {
		return false
	}
	if !this.Validation.Equal(that1.Validation) {
		return false
	}
	if this.ReadGatewaysFromAllNamespaces != that1.ReadGatewaysFromAllNamespaces {
		return false
	}
	if this.AlwaysSortRouteTableRoutes != that1.AlwaysSortRouteTableRoutes {
		return false
	}
	if this.CompressedProxySpec != that1.CompressedProxySpec {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GatewayOptions_ValidationOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayOptions_ValidationOptions)
	if !ok {
		that2, ok := that.(GatewayOptions_ValidationOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProxyValidationServerAddr != that1.ProxyValidationServerAddr {
		return false
	}
	if this.ValidationWebhookTlsCert != that1.ValidationWebhookTlsCert {
		return false
	}
	if this.ValidationWebhookTlsKey != that1.ValidationWebhookTlsKey {
		return false
	}
	if this.IgnoreGlooValidationFailure != that1.IgnoreGlooValidationFailure {
		return false
	}
	if !this.AlwaysAccept.Equal(that1.AlwaysAccept) {
		return false
	}
	if !this.AllowWarnings.Equal(that1.AllowWarnings) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SettingsStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsStatus)
	if !ok {
		that2, ok := that.(SettingsStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.ReportedBy != that1.ReportedBy {
		return false
	}
	if len(this.SubresourceStatuses) != len(that1.SubresourceStatuses) {
		return false
	}
	for i := range this.SubresourceStatuses {
		if !this.SubresourceStatuses[i].Equal(that1.SubresourceStatuses[i]) {
			return false
		}
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
