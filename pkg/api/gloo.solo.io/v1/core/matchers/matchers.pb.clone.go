// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gloo/v1/core/matchers/matchers.proto

package matchers

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_golang_protobuf_ptypes_wrappers "github.com/golang/protobuf/ptypes/wrappers"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *Matcher) Clone() proto.Message {
	var target *Matcher
	if m == nil {
		return target
	}
	target = &Matcher{}

	if h, ok := interface{}(m.GetCaseSensitive()).(clone.Cloner); ok {
		target.CaseSensitive = h.Clone().(*github_com_golang_protobuf_ptypes_wrappers.BoolValue)
	} else {
		target.CaseSensitive = proto.Clone(m.GetCaseSensitive()).(*github_com_golang_protobuf_ptypes_wrappers.BoolValue)
	}

	if m.GetHeaders() != nil {
		target.Headers = make([]*HeaderMatcher, len(m.GetHeaders()))
		for idx, v := range m.GetHeaders() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Headers[idx] = h.Clone().(*HeaderMatcher)
			} else {
				target.Headers[idx] = proto.Clone(v).(*HeaderMatcher)
			}

		}
	}

	if m.GetQueryParameters() != nil {
		target.QueryParameters = make([]*QueryParameterMatcher, len(m.GetQueryParameters()))
		for idx, v := range m.GetQueryParameters() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.QueryParameters[idx] = h.Clone().(*QueryParameterMatcher)
			} else {
				target.QueryParameters[idx] = proto.Clone(v).(*QueryParameterMatcher)
			}

		}
	}

	if m.GetMethods() != nil {
		target.Methods = make([]string, len(m.GetMethods()))
		for idx, v := range m.GetMethods() {

			target.Methods[idx] = v

		}
	}

	switch m.PathSpecifier.(type) {

	case *Matcher_Prefix:

		target.PathSpecifier = &Matcher_Prefix{
			Prefix: m.GetPrefix(),
		}

	case *Matcher_Exact:

		target.PathSpecifier = &Matcher_Exact{
			Exact: m.GetExact(),
		}

	case *Matcher_Regex:

		target.PathSpecifier = &Matcher_Regex{
			Regex: m.GetRegex(),
		}

	case *Matcher_ConnectMatcher_:

		if h, ok := interface{}(m.GetConnectMatcher()).(clone.Cloner); ok {
			target.PathSpecifier = &Matcher_ConnectMatcher_{
				ConnectMatcher: h.Clone().(*Matcher_ConnectMatcher),
			}
		} else {
			target.PathSpecifier = &Matcher_ConnectMatcher_{
				ConnectMatcher: proto.Clone(m.GetConnectMatcher()).(*Matcher_ConnectMatcher),
			}
		}

	}

	return target
}

// Clone function
func (m *HeaderMatcher) Clone() proto.Message {
	var target *HeaderMatcher
	if m == nil {
		return target
	}
	target = &HeaderMatcher{}

	target.Name = m.GetName()

	target.Value = m.GetValue()

	target.Regex = m.GetRegex()

	target.InvertMatch = m.GetInvertMatch()

	return target
}

// Clone function
func (m *QueryParameterMatcher) Clone() proto.Message {
	var target *QueryParameterMatcher
	if m == nil {
		return target
	}
	target = &QueryParameterMatcher{}

	target.Name = m.GetName()

	target.Value = m.GetValue()

	target.Regex = m.GetRegex()

	return target
}

// Clone function
func (m *Matcher_ConnectMatcher) Clone() proto.Message {
	var target *Matcher_ConnectMatcher
	if m == nil {
		return target
	}
	target = &Matcher_ConnectMatcher{}

	return target
}
