// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gloo/v1/options/tcp/tcp.proto

package tcp

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_golang_protobuf_ptypes_duration "github.com/golang/protobuf/ptypes/duration"

	github_com_golang_protobuf_ptypes_wrappers "github.com/golang/protobuf/ptypes/wrappers"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *TcpProxySettings) Clone() proto.Message {
	var target *TcpProxySettings
	if m == nil {
		return target
	}
	target = &TcpProxySettings{}

	if h, ok := interface{}(m.GetMaxConnectAttempts()).(clone.Cloner); ok {
		target.MaxConnectAttempts = h.Clone().(*github_com_golang_protobuf_ptypes_wrappers.UInt32Value)
	} else {
		target.MaxConnectAttempts = proto.Clone(m.GetMaxConnectAttempts()).(*github_com_golang_protobuf_ptypes_wrappers.UInt32Value)
	}

	if h, ok := interface{}(m.GetIdleTimeout()).(clone.Cloner); ok {
		target.IdleTimeout = h.Clone().(*github_com_golang_protobuf_ptypes_duration.Duration)
	} else {
		target.IdleTimeout = proto.Clone(m.GetIdleTimeout()).(*github_com_golang_protobuf_ptypes_duration.Duration)
	}

	if h, ok := interface{}(m.GetTunnelingConfig()).(clone.Cloner); ok {
		target.TunnelingConfig = h.Clone().(*TcpProxySettings_TunnelingConfig)
	} else {
		target.TunnelingConfig = proto.Clone(m.GetTunnelingConfig()).(*TcpProxySettings_TunnelingConfig)
	}

	return target
}

// Clone function
func (m *TcpProxySettings_TunnelingConfig) Clone() proto.Message {
	var target *TcpProxySettings_TunnelingConfig
	if m == nil {
		return target
	}
	target = &TcpProxySettings_TunnelingConfig{}

	target.Hostname = m.GetHostname()

	return target
}
