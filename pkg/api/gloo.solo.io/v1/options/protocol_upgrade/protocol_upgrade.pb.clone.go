// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gloo/v1/options/protocol_upgrade/protocol_upgrade.proto

package protocol_upgrade

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	google_golang_org_protobuf_types_known_wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *ProtocolUpgradeConfig) Clone() proto.Message {
	var target *ProtocolUpgradeConfig
	if m == nil {
		return target
	}
	target = &ProtocolUpgradeConfig{}

	switch m.UpgradeType.(type) {

	case *ProtocolUpgradeConfig_Websocket:

		if h, ok := interface{}(m.GetWebsocket()).(clone.Cloner); ok {
			target.UpgradeType = &ProtocolUpgradeConfig_Websocket{
				Websocket: h.Clone().(*ProtocolUpgradeConfig_ProtocolUpgradeSpec),
			}
		} else {
			target.UpgradeType = &ProtocolUpgradeConfig_Websocket{
				Websocket: proto.Clone(m.GetWebsocket()).(*ProtocolUpgradeConfig_ProtocolUpgradeSpec),
			}
		}

	case *ProtocolUpgradeConfig_Connect:

		if h, ok := interface{}(m.GetConnect()).(clone.Cloner); ok {
			target.UpgradeType = &ProtocolUpgradeConfig_Connect{
				Connect: h.Clone().(*ProtocolUpgradeConfig_ProtocolUpgradeSpec),
			}
		} else {
			target.UpgradeType = &ProtocolUpgradeConfig_Connect{
				Connect: proto.Clone(m.GetConnect()).(*ProtocolUpgradeConfig_ProtocolUpgradeSpec),
			}
		}

	}

	return target
}

// Clone function
func (m *ProtocolUpgradeConfig_ProtocolUpgradeSpec) Clone() proto.Message {
	var target *ProtocolUpgradeConfig_ProtocolUpgradeSpec
	if m == nil {
		return target
	}
	target = &ProtocolUpgradeConfig_ProtocolUpgradeSpec{}

	if h, ok := interface{}(m.GetEnabled()).(clone.Cloner); ok {
		target.Enabled = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.BoolValue)
	} else {
		target.Enabled = proto.Clone(m.GetEnabled()).(*google_golang_org_protobuf_types_known_wrapperspb.BoolValue)
	}

	return target
}
