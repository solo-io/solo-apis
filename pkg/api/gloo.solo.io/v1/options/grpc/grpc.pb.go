// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gloo/v1/options/grpc/grpc.proto

package grpc

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	transformation "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1/options/transformation"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Service spec describing GRPC upstreams. This will usually be filled
// automatically via function discovery (if the upstream supports reflection).
// If your upstream service is a GRPC service, use this service spec (an empty
// spec is fine), to make sure that traffic to it is routed with http2.
type ServiceSpec struct {
	// Descriptors that contain information of the services listed below.
	// this is a serialized google.protobuf.FileDescriptorSet
	Descriptors []byte `protobuf:"bytes,1,opt,name=descriptors,proto3" json:"descriptors,omitempty"`
	// List of services used by this upstream. For a grpc upstream where you don't
	// need to use Gloo's function routing, this can be an empty list. These
	// services must be present in the descriptors.
	GrpcServices         []*ServiceSpec_GrpcService `protobuf:"bytes,2,rep,name=grpc_services,json=grpcServices,proto3" json:"grpc_services,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ServiceSpec) Reset()         { *m = ServiceSpec{} }
func (m *ServiceSpec) String() string { return proto.CompactTextString(m) }
func (*ServiceSpec) ProtoMessage()    {}
func (*ServiceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_079cc0e3709d0aa0, []int{0}
}
func (m *ServiceSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceSpec.Unmarshal(m, b)
}
func (m *ServiceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceSpec.Marshal(b, m, deterministic)
}
func (m *ServiceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceSpec.Merge(m, src)
}
func (m *ServiceSpec) XXX_Size() int {
	return xxx_messageInfo_ServiceSpec.Size(m)
}
func (m *ServiceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceSpec proto.InternalMessageInfo

func (m *ServiceSpec) GetDescriptors() []byte {
	if m != nil {
		return m.Descriptors
	}
	return nil
}

func (m *ServiceSpec) GetGrpcServices() []*ServiceSpec_GrpcService {
	if m != nil {
		return m.GrpcServices
	}
	return nil
}

// Describes a grpc service
type ServiceSpec_GrpcService struct {
	// The package of this service.
	PackageName string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	// The service name of this service.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// The functions available in this service.
	FunctionNames        []string `protobuf:"bytes,3,rep,name=function_names,json=functionNames,proto3" json:"function_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceSpec_GrpcService) Reset()         { *m = ServiceSpec_GrpcService{} }
func (m *ServiceSpec_GrpcService) String() string { return proto.CompactTextString(m) }
func (*ServiceSpec_GrpcService) ProtoMessage()    {}
func (*ServiceSpec_GrpcService) Descriptor() ([]byte, []int) {
	return fileDescriptor_079cc0e3709d0aa0, []int{0, 0}
}
func (m *ServiceSpec_GrpcService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceSpec_GrpcService.Unmarshal(m, b)
}
func (m *ServiceSpec_GrpcService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceSpec_GrpcService.Marshal(b, m, deterministic)
}
func (m *ServiceSpec_GrpcService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceSpec_GrpcService.Merge(m, src)
}
func (m *ServiceSpec_GrpcService) XXX_Size() int {
	return xxx_messageInfo_ServiceSpec_GrpcService.Size(m)
}
func (m *ServiceSpec_GrpcService) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceSpec_GrpcService.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceSpec_GrpcService proto.InternalMessageInfo

func (m *ServiceSpec_GrpcService) GetPackageName() string {
	if m != nil {
		return m.PackageName
	}
	return ""
}

func (m *ServiceSpec_GrpcService) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ServiceSpec_GrpcService) GetFunctionNames() []string {
	if m != nil {
		return m.FunctionNames
	}
	return nil
}

// This is only for upstream with Grpc service spec.
type DestinationSpec struct {
	// The proto package of the function.
	Package string `protobuf:"bytes,1,opt,name=package,proto3" json:"package,omitempty"`
	// The name of the service of the function.
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	// The name of the function.
	Function string `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
	// Parameters describe how to extract the function parameters from the
	// request.
	Parameters           *transformation.Parameters `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *DestinationSpec) Reset()         { *m = DestinationSpec{} }
func (m *DestinationSpec) String() string { return proto.CompactTextString(m) }
func (*DestinationSpec) ProtoMessage()    {}
func (*DestinationSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_079cc0e3709d0aa0, []int{1}
}
func (m *DestinationSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DestinationSpec.Unmarshal(m, b)
}
func (m *DestinationSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DestinationSpec.Marshal(b, m, deterministic)
}
func (m *DestinationSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DestinationSpec.Merge(m, src)
}
func (m *DestinationSpec) XXX_Size() int {
	return xxx_messageInfo_DestinationSpec.Size(m)
}
func (m *DestinationSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DestinationSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DestinationSpec proto.InternalMessageInfo

func (m *DestinationSpec) GetPackage() string {
	if m != nil {
		return m.Package
	}
	return ""
}

func (m *DestinationSpec) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *DestinationSpec) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *DestinationSpec) GetParameters() *transformation.Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func init() {
	proto.RegisterType((*ServiceSpec)(nil), "grpc.options.gloo.solo.io.ServiceSpec")
	proto.RegisterType((*ServiceSpec_GrpcService)(nil), "grpc.options.gloo.solo.io.ServiceSpec.GrpcService")
	proto.RegisterType((*DestinationSpec)(nil), "grpc.options.gloo.solo.io.DestinationSpec")
}

func init() {
	proto.RegisterFile("github.com/solo-io/solo-apis/api/gloo/gloo/v1/options/grpc/grpc.proto", fileDescriptor_079cc0e3709d0aa0)
}

var fileDescriptor_079cc0e3709d0aa0 = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4f, 0x6b, 0xdb, 0x30,
	0x14, 0xc7, 0x71, 0xd8, 0x16, 0x39, 0xd9, 0xc0, 0xec, 0xe0, 0xf9, 0x30, 0xbc, 0xc0, 0xc0, 0x97,
	0x49, 0x2c, 0xfb, 0x04, 0x0b, 0x1b, 0x3b, 0x0c, 0xda, 0xe2, 0x1c, 0x0a, 0xbd, 0x04, 0x45, 0x55,
	0x54, 0x91, 0xd8, 0x12, 0x92, 0x12, 0x42, 0xcf, 0xfd, 0x30, 0x3d, 0xf7, 0xd4, 0xcf, 0xd3, 0xef,
	0xd0, 0x7b, 0xd1, 0x1f, 0x27, 0x6e, 0x69, 0x4b, 0x2f, 0xb2, 0x7e, 0xbf, 0xf7, 0x7b, 0xef, 0xf7,
	0xfc, 0xf4, 0xc0, 0x5f, 0xc6, 0xcd, 0xc5, 0x66, 0x01, 0x89, 0xa8, 0x91, 0x16, 0x6b, 0xf1, 0x83,
	0x0b, 0xff, 0xc5, 0x92, 0x6b, 0x84, 0x25, 0x47, 0x6c, 0x2d, 0x84, 0x3f, 0xb6, 0x3f, 0x91, 0x90,
	0x86, 0x8b, 0x46, 0x23, 0xa6, 0x24, 0x71, 0x07, 0x94, 0x4a, 0x18, 0x91, 0x7e, 0x71, 0xf7, 0x10,
	0x85, 0x56, 0x0d, 0x6d, 0x15, 0xc8, 0x45, 0xfe, 0x99, 0x09, 0x26, 0x9c, 0x0a, 0xd9, 0x9b, 0x4f,
	0xc8, 0x53, 0xba, 0x33, 0x9e, 0xa4, 0x3b, 0x13, 0xb8, 0xe9, 0x1b, 0x8c, 0x8d, 0xc2, 0x8d, 0x5e,
	0x0a, 0x55, 0x63, 0x8b, 0x91, 0xc4, 0x0a, 0xd7, 0xd4, 0x50, 0xa5, 0x7d, 0x8d, 0xf1, 0x55, 0x0f,
	0x24, 0x33, 0xaa, 0xb6, 0x9c, 0xd0, 0x99, 0xa4, 0x24, 0x2d, 0x40, 0x72, 0x4e, 0x35, 0x51, 0x5c,
	0x1a, 0xa1, 0x74, 0x16, 0x15, 0x51, 0x39, 0xac, 0xba, 0x54, 0x7a, 0x0a, 0x46, 0xb6, 0xf9, 0xb9,
	0xf6, 0x59, 0x3a, 0xeb, 0x15, 0x71, 0x99, 0x4c, 0x26, 0xf0, 0xc5, 0x5f, 0x82, 0x1d, 0x03, 0xf8,
	0x4f, 0x49, 0x12, 0x70, 0x35, 0x64, 0x07, 0xa0, 0xf3, 0x4b, 0x90, 0x74, 0x82, 0xe9, 0x37, 0x30,
	0x94, 0x98, 0xac, 0x30, 0xa3, 0xf3, 0x06, 0xd7, 0xd4, 0xb5, 0x32, 0xa8, 0x92, 0xc0, 0x1d, 0xe1,
	0xda, 0x49, 0x42, 0x17, 0x5e, 0xd2, 0xf3, 0x92, 0xc0, 0x39, 0xc9, 0x77, 0xf0, 0x71, 0xb9, 0x69,
	0x88, 0x6d, 0xca, 0x69, 0x74, 0x16, 0x17, 0x71, 0x39, 0xa8, 0x46, 0x2d, 0x6b, 0x55, 0x7a, 0x7c,
	0x13, 0x81, 0x4f, 0x7f, 0xa8, 0x36, 0xbc, 0x71, 0x73, 0x72, 0xa3, 0xc8, 0xc0, 0xfb, 0x60, 0x16,
	0xbc, 0x5b, 0x68, 0x23, 0xc1, 0x23, 0x58, 0xb6, 0x30, 0xcd, 0xc1, 0x87, 0xb6, 0x70, 0x16, 0xbb,
	0xd0, 0x1e, 0xa7, 0xc7, 0x00, 0x1c, 0xc6, 0x9f, 0xf5, 0x8b, 0xa8, 0x4c, 0x26, 0x08, 0x3e, 0x7e,
	0xa0, 0xe7, 0xe7, 0x77, 0xb2, 0x4f, 0xab, 0x3a, 0x25, 0xa6, 0xff, 0x6f, 0xef, 0xfb, 0xd1, 0xf5,
	0xdd, 0xd7, 0xe8, 0xec, 0xf7, 0xab, 0x5b, 0x29, 0x57, 0x6c, 0xbf, 0x20, 0x6d, 0xcd, 0xa7, 0xcb,
	0xb9, 0x78, 0xe7, 0xf6, 0xe1, 0xd7, 0x43, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x00, 0xae, 0x61,
	0xe1, 0x02, 0x00, 0x00,
}

func (this *ServiceSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSpec)
	if !ok {
		that2, ok := that.(ServiceSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Descriptors, that1.Descriptors) {
		return false
	}
	if len(this.GrpcServices) != len(that1.GrpcServices) {
		return false
	}
	for i := range this.GrpcServices {
		if !this.GrpcServices[i].Equal(that1.GrpcServices[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ServiceSpec_GrpcService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSpec_GrpcService)
	if !ok {
		that2, ok := that.(ServiceSpec_GrpcService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PackageName != that1.PackageName {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	if len(this.FunctionNames) != len(that1.FunctionNames) {
		return false
	}
	for i := range this.FunctionNames {
		if this.FunctionNames[i] != that1.FunctionNames[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DestinationSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec)
	if !ok {
		that2, ok := that.(DestinationSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Package != that1.Package {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.Function != that1.Function {
		return false
	}
	if !this.Parameters.Equal(that1.Parameters) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
