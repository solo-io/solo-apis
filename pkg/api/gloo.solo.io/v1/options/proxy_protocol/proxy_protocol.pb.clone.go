// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gloo/v1/options/proxy_protocol/proxy_protocol.proto

package proxy_protocol

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *ProxyProtocol) Clone() proto.Message {
	var target *ProxyProtocol
	if m == nil {
		return target
	}
	target = &ProxyProtocol{}

	if m.GetRules() != nil {
		target.Rules = make([]*ProxyProtocol_Rule, len(m.GetRules()))
		for idx, v := range m.GetRules() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Rules[idx] = h.Clone().(*ProxyProtocol_Rule)
			} else {
				target.Rules[idx] = proto.Clone(v).(*ProxyProtocol_Rule)
			}

		}
	}

	target.AllowRequestsWithoutProxyProtocol = m.GetAllowRequestsWithoutProxyProtocol()

	return target
}

// Clone function
func (m *ProxyProtocol_KeyValuePair) Clone() proto.Message {
	var target *ProxyProtocol_KeyValuePair
	if m == nil {
		return target
	}
	target = &ProxyProtocol_KeyValuePair{}

	target.MetadataNamespace = m.GetMetadataNamespace()

	target.Key = m.GetKey()

	return target
}

// Clone function
func (m *ProxyProtocol_Rule) Clone() proto.Message {
	var target *ProxyProtocol_Rule
	if m == nil {
		return target
	}
	target = &ProxyProtocol_Rule{}

	target.TlvType = m.GetTlvType()

	if h, ok := interface{}(m.GetOnTlvPresent()).(clone.Cloner); ok {
		target.OnTlvPresent = h.Clone().(*ProxyProtocol_KeyValuePair)
	} else {
		target.OnTlvPresent = proto.Clone(m.GetOnTlvPresent()).(*ProxyProtocol_KeyValuePair)
	}

	return target
}
