// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gloo/v1/options/service_spec.proto

package options

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_v1_options_graphql "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1/options/graphql"

	github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_v1_options_grpc "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1/options/grpc"

	github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_v1_options_rest "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1/options/rest"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *ServiceSpec) Clone() proto.Message {
	var target *ServiceSpec
	if m == nil {
		return target
	}
	target = &ServiceSpec{}

	switch m.PluginType.(type) {

	case *ServiceSpec_Rest:

		if h, ok := interface{}(m.GetRest()).(clone.Cloner); ok {
			target.PluginType = &ServiceSpec_Rest{
				Rest: h.Clone().(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_v1_options_rest.ServiceSpec),
			}
		} else {
			target.PluginType = &ServiceSpec_Rest{
				Rest: proto.Clone(m.GetRest()).(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_v1_options_rest.ServiceSpec),
			}
		}

	case *ServiceSpec_Grpc:

		if h, ok := interface{}(m.GetGrpc()).(clone.Cloner); ok {
			target.PluginType = &ServiceSpec_Grpc{
				Grpc: h.Clone().(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_v1_options_grpc.ServiceSpec),
			}
		} else {
			target.PluginType = &ServiceSpec_Grpc{
				Grpc: proto.Clone(m.GetGrpc()).(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_v1_options_grpc.ServiceSpec),
			}
		}

	case *ServiceSpec_Graphql:

		if h, ok := interface{}(m.GetGraphql()).(clone.Cloner); ok {
			target.PluginType = &ServiceSpec_Graphql{
				Graphql: h.Clone().(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_v1_options_graphql.ServiceSpec),
			}
		} else {
			target.PluginType = &ServiceSpec_Graphql{
				Graphql: proto.Clone(m.GetGraphql()).(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_v1_options_graphql.ServiceSpec),
			}
		}

	}

	return target
}
