// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gloo/v1/options/wasm/wasm.proto

package wasm

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	google_golang_org_protobuf_types_known_anypb "google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *PluginSource) Clone() proto.Message {
	var target *PluginSource
	if m == nil {
		return target
	}
	target = &PluginSource{}

	if m.GetFilters() != nil {
		target.Filters = make([]*WasmFilter, len(m.GetFilters()))
		for idx, v := range m.GetFilters() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Filters[idx] = h.Clone().(*WasmFilter)
			} else {
				target.Filters[idx] = proto.Clone(v).(*WasmFilter)
			}

		}
	}

	return target
}

// Clone function
func (m *WasmFilter) Clone() proto.Message {
	var target *WasmFilter
	if m == nil {
		return target
	}
	target = &WasmFilter{}

	if h, ok := interface{}(m.GetConfig()).(clone.Cloner); ok {
		target.Config = h.Clone().(*google_golang_org_protobuf_types_known_anypb.Any)
	} else {
		target.Config = proto.Clone(m.GetConfig()).(*google_golang_org_protobuf_types_known_anypb.Any)
	}

	if h, ok := interface{}(m.GetFilterStage()).(clone.Cloner); ok {
		target.FilterStage = h.Clone().(*FilterStage)
	} else {
		target.FilterStage = proto.Clone(m.GetFilterStage()).(*FilterStage)
	}

	target.Name = m.GetName()

	target.RootId = m.GetRootId()

	target.VmType = m.GetVmType()

	target.FailOpen = m.GetFailOpen()

	switch m.Src.(type) {

	case *WasmFilter_Image:

		target.Src = &WasmFilter_Image{
			Image: m.GetImage(),
		}

	case *WasmFilter_FilePath:

		target.Src = &WasmFilter_FilePath{
			FilePath: m.GetFilePath(),
		}

	}

	return target
}

// Clone function
func (m *FilterStage) Clone() proto.Message {
	var target *FilterStage
	if m == nil {
		return target
	}
	target = &FilterStage{}

	target.Stage = m.GetStage()

	target.Predicate = m.GetPredicate()

	return target
}
