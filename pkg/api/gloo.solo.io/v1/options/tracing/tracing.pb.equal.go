// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gloo/v1/options/tracing/tracing.proto

package tracing

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *ListenerTracingSettings) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListenerTracingSettings)
	if !ok {
		that2, ok := that.(ListenerTracingSettings)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetRequestHeadersForTags()) != len(target.GetRequestHeadersForTags()) {
		return false
	}
	for idx, v := range m.GetRequestHeadersForTags() {

		if strings.Compare(v, target.GetRequestHeadersForTags()[idx]) != 0 {
			return false
		}

	}

	if m.GetVerbose() != target.GetVerbose() {
		return false
	}

	if h, ok := interface{}(m.GetTracePercentages()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTracePercentages()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTracePercentages(), target.GetTracePercentages()) {
			return false
		}
	}

	switch m.ProviderConfig.(type) {

	case *ListenerTracingSettings_ZipkinConfig:

		if h, ok := interface{}(m.GetZipkinConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetZipkinConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetZipkinConfig(), target.GetZipkinConfig()) {
				return false
			}
		}

	case *ListenerTracingSettings_DatadogConfig:

		if h, ok := interface{}(m.GetDatadogConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetDatadogConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetDatadogConfig(), target.GetDatadogConfig()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *RouteTracingSettings) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteTracingSettings)
	if !ok {
		that2, ok := that.(RouteTracingSettings)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetRouteDescriptor(), target.GetRouteDescriptor()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetTracePercentages()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTracePercentages()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTracePercentages(), target.GetTracePercentages()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *TracePercentages) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*TracePercentages)
	if !ok {
		that2, ok := that.(TracePercentages)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetClientSamplePercentage()).(equality.Equalizer); ok {
		if !h.Equal(target.GetClientSamplePercentage()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetClientSamplePercentage(), target.GetClientSamplePercentage()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRandomSamplePercentage()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRandomSamplePercentage()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRandomSamplePercentage(), target.GetRandomSamplePercentage()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetOverallSamplePercentage()).(equality.Equalizer); ok {
		if !h.Equal(target.GetOverallSamplePercentage()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetOverallSamplePercentage(), target.GetOverallSamplePercentage()) {
			return false
		}
	}

	return true
}
