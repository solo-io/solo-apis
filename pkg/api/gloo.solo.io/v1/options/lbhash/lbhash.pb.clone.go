// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gloo/v1/options/lbhash/lbhash.proto

package lbhash

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	google_golang_org_protobuf_types_known_durationpb "google.golang.org/protobuf/types/known/durationpb"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *RouteActionHashConfig) Clone() proto.Message {
	var target *RouteActionHashConfig
	if m == nil {
		return target
	}
	target = &RouteActionHashConfig{}

	if m.GetHashPolicies() != nil {
		target.HashPolicies = make([]*HashPolicy, len(m.GetHashPolicies()))
		for idx, v := range m.GetHashPolicies() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.HashPolicies[idx] = h.Clone().(*HashPolicy)
			} else {
				target.HashPolicies[idx] = proto.Clone(v).(*HashPolicy)
			}

		}
	}

	return target
}

// Clone function
func (m *Cookie) Clone() proto.Message {
	var target *Cookie
	if m == nil {
		return target
	}
	target = &Cookie{}

	target.Name = m.GetName()

	if h, ok := interface{}(m.GetTtl()).(clone.Cloner); ok {
		target.Ttl = h.Clone().(*google_golang_org_protobuf_types_known_durationpb.Duration)
	} else {
		target.Ttl = proto.Clone(m.GetTtl()).(*google_golang_org_protobuf_types_known_durationpb.Duration)
	}

	target.Path = m.GetPath()

	return target
}

// Clone function
func (m *HashPolicy) Clone() proto.Message {
	var target *HashPolicy
	if m == nil {
		return target
	}
	target = &HashPolicy{}

	target.Terminal = m.GetTerminal()

	switch m.KeyType.(type) {

	case *HashPolicy_Header:

		target.KeyType = &HashPolicy_Header{
			Header: m.GetHeader(),
		}

	case *HashPolicy_Cookie:

		if h, ok := interface{}(m.GetCookie()).(clone.Cloner); ok {
			target.KeyType = &HashPolicy_Cookie{
				Cookie: h.Clone().(*Cookie),
			}
		} else {
			target.KeyType = &HashPolicy_Cookie{
				Cookie: proto.Clone(m.GetCookie()).(*Cookie),
			}
		}

	case *HashPolicy_SourceIp:

		target.KeyType = &HashPolicy_SourceIp{
			SourceIp: m.GetSourceIp(),
		}

	}

	return target
}
