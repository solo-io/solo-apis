// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gloo/v1/options/grpc_json/grpc_json.proto

package grpc_json

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_solo_kit_pkg_api_v1_resources_core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *GrpcJsonTranscoder) Clone() proto.Message {
	var target *GrpcJsonTranscoder
	if m == nil {
		return target
	}
	target = &GrpcJsonTranscoder{}

	if m.GetServices() != nil {
		target.Services = make([]string, len(m.GetServices()))
		for idx, v := range m.GetServices() {

			target.Services[idx] = v

		}
	}

	if h, ok := interface{}(m.GetPrintOptions()).(clone.Cloner); ok {
		target.PrintOptions = h.Clone().(*GrpcJsonTranscoder_PrintOptions)
	} else {
		target.PrintOptions = proto.Clone(m.GetPrintOptions()).(*GrpcJsonTranscoder_PrintOptions)
	}

	target.MatchIncomingRequestRoute = m.GetMatchIncomingRequestRoute()

	if m.GetIgnoredQueryParameters() != nil {
		target.IgnoredQueryParameters = make([]string, len(m.GetIgnoredQueryParameters()))
		for idx, v := range m.GetIgnoredQueryParameters() {

			target.IgnoredQueryParameters[idx] = v

		}
	}

	target.AutoMapping = m.GetAutoMapping()

	target.IgnoreUnknownQueryParameters = m.GetIgnoreUnknownQueryParameters()

	target.ConvertGrpcStatus = m.GetConvertGrpcStatus()

	switch m.DescriptorSet.(type) {

	case *GrpcJsonTranscoder_ProtoDescriptor:

		target.DescriptorSet = &GrpcJsonTranscoder_ProtoDescriptor{
			ProtoDescriptor: m.GetProtoDescriptor(),
		}

	case *GrpcJsonTranscoder_ProtoDescriptorBin:

		if m.GetProtoDescriptorBin() != nil {
			newArr := make([]byte, len(m.GetProtoDescriptorBin()))
			copy(newArr, m.GetProtoDescriptorBin())
			target.DescriptorSet = &GrpcJsonTranscoder_ProtoDescriptorBin{
				ProtoDescriptorBin: newArr,
			}
		} else {
			target.DescriptorSet = &GrpcJsonTranscoder_ProtoDescriptorBin{
				ProtoDescriptorBin: nil,
			}
		}

	case *GrpcJsonTranscoder_ProtoDescriptorConfigMap:

		if h, ok := interface{}(m.GetProtoDescriptorConfigMap()).(clone.Cloner); ok {
			target.DescriptorSet = &GrpcJsonTranscoder_ProtoDescriptorConfigMap{
				ProtoDescriptorConfigMap: h.Clone().(*GrpcJsonTranscoder_DescriptorConfigMap),
			}
		} else {
			target.DescriptorSet = &GrpcJsonTranscoder_ProtoDescriptorConfigMap{
				ProtoDescriptorConfigMap: proto.Clone(m.GetProtoDescriptorConfigMap()).(*GrpcJsonTranscoder_DescriptorConfigMap),
			}
		}

	}

	return target
}

// Clone function
func (m *GrpcJsonTranscoder_PrintOptions) Clone() proto.Message {
	var target *GrpcJsonTranscoder_PrintOptions
	if m == nil {
		return target
	}
	target = &GrpcJsonTranscoder_PrintOptions{}

	target.AddWhitespace = m.GetAddWhitespace()

	target.AlwaysPrintPrimitiveFields = m.GetAlwaysPrintPrimitiveFields()

	target.AlwaysPrintEnumsAsInts = m.GetAlwaysPrintEnumsAsInts()

	target.PreserveProtoFieldNames = m.GetPreserveProtoFieldNames()

	return target
}

// Clone function
func (m *GrpcJsonTranscoder_DescriptorConfigMap) Clone() proto.Message {
	var target *GrpcJsonTranscoder_DescriptorConfigMap
	if m == nil {
		return target
	}
	target = &GrpcJsonTranscoder_DescriptorConfigMap{}

	if h, ok := interface{}(m.GetConfigMapRef()).(clone.Cloner); ok {
		target.ConfigMapRef = h.Clone().(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.ResourceRef)
	} else {
		target.ConfigMapRef = proto.Clone(m.GetConfigMapRef()).(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.ResourceRef)
	}

	target.Key = m.GetKey()

	return target
}
