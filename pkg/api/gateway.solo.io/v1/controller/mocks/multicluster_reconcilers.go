// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	v1 "github.com/solo-io/solo-apis/pkg/api/gateway.solo.io/v1"
	controller "github.com/solo-io/solo-apis/pkg/api/gateway.solo.io/v1/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMulticlusterGatewayReconciler is a mock of MulticlusterGatewayReconciler interface.
type MockMulticlusterGatewayReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGatewayReconcilerMockRecorder
}

// MockMulticlusterGatewayReconcilerMockRecorder is the mock recorder for MockMulticlusterGatewayReconciler.
type MockMulticlusterGatewayReconcilerMockRecorder struct {
	mock *MockMulticlusterGatewayReconciler
}

// NewMockMulticlusterGatewayReconciler creates a new mock instance.
func NewMockMulticlusterGatewayReconciler(ctrl *gomock.Controller) *MockMulticlusterGatewayReconciler {
	mock := &MockMulticlusterGatewayReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGatewayReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGatewayReconciler) EXPECT() *MockMulticlusterGatewayReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGateway mocks base method.
func (m *MockMulticlusterGatewayReconciler) ReconcileGateway(clusterName string, obj *v1.Gateway) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGateway", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGateway indicates an expected call of ReconcileGateway.
func (mr *MockMulticlusterGatewayReconcilerMockRecorder) ReconcileGateway(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGateway", reflect.TypeOf((*MockMulticlusterGatewayReconciler)(nil).ReconcileGateway), clusterName, obj)
}

// MockMulticlusterGatewayDeletionReconciler is a mock of MulticlusterGatewayDeletionReconciler interface.
type MockMulticlusterGatewayDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGatewayDeletionReconcilerMockRecorder
}

// MockMulticlusterGatewayDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterGatewayDeletionReconciler.
type MockMulticlusterGatewayDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterGatewayDeletionReconciler
}

// NewMockMulticlusterGatewayDeletionReconciler creates a new mock instance.
func NewMockMulticlusterGatewayDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterGatewayDeletionReconciler {
	mock := &MockMulticlusterGatewayDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGatewayDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGatewayDeletionReconciler) EXPECT() *MockMulticlusterGatewayDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGatewayDeletion mocks base method.
func (m *MockMulticlusterGatewayDeletionReconciler) ReconcileGatewayDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGatewayDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGatewayDeletion indicates an expected call of ReconcileGatewayDeletion.
func (mr *MockMulticlusterGatewayDeletionReconcilerMockRecorder) ReconcileGatewayDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGatewayDeletion", reflect.TypeOf((*MockMulticlusterGatewayDeletionReconciler)(nil).ReconcileGatewayDeletion), clusterName, req)
}

// MockMulticlusterGatewayReconcileLoop is a mock of MulticlusterGatewayReconcileLoop interface.
type MockMulticlusterGatewayReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGatewayReconcileLoopMockRecorder
}

// MockMulticlusterGatewayReconcileLoopMockRecorder is the mock recorder for MockMulticlusterGatewayReconcileLoop.
type MockMulticlusterGatewayReconcileLoopMockRecorder struct {
	mock *MockMulticlusterGatewayReconcileLoop
}

// NewMockMulticlusterGatewayReconcileLoop creates a new mock instance.
func NewMockMulticlusterGatewayReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterGatewayReconcileLoop {
	mock := &MockMulticlusterGatewayReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGatewayReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGatewayReconcileLoop) EXPECT() *MockMulticlusterGatewayReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterGatewayReconciler mocks base method.
func (m *MockMulticlusterGatewayReconcileLoop) AddMulticlusterGatewayReconciler(ctx context.Context, rec controller.MulticlusterGatewayReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterGatewayReconciler", varargs...)
}

// AddMulticlusterGatewayReconciler indicates an expected call of AddMulticlusterGatewayReconciler.
func (mr *MockMulticlusterGatewayReconcileLoopMockRecorder) AddMulticlusterGatewayReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterGatewayReconciler", reflect.TypeOf((*MockMulticlusterGatewayReconcileLoop)(nil).AddMulticlusterGatewayReconciler), varargs...)
}

// MockMulticlusterMatchableHttpGatewayReconciler is a mock of MulticlusterMatchableHttpGatewayReconciler interface.
type MockMulticlusterMatchableHttpGatewayReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMatchableHttpGatewayReconcilerMockRecorder
}

// MockMulticlusterMatchableHttpGatewayReconcilerMockRecorder is the mock recorder for MockMulticlusterMatchableHttpGatewayReconciler.
type MockMulticlusterMatchableHttpGatewayReconcilerMockRecorder struct {
	mock *MockMulticlusterMatchableHttpGatewayReconciler
}

// NewMockMulticlusterMatchableHttpGatewayReconciler creates a new mock instance.
func NewMockMulticlusterMatchableHttpGatewayReconciler(ctrl *gomock.Controller) *MockMulticlusterMatchableHttpGatewayReconciler {
	mock := &MockMulticlusterMatchableHttpGatewayReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMatchableHttpGatewayReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterMatchableHttpGatewayReconciler) EXPECT() *MockMulticlusterMatchableHttpGatewayReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMatchableHttpGateway mocks base method.
func (m *MockMulticlusterMatchableHttpGatewayReconciler) ReconcileMatchableHttpGateway(clusterName string, obj *v1.MatchableHttpGateway) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMatchableHttpGateway", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileMatchableHttpGateway indicates an expected call of ReconcileMatchableHttpGateway.
func (mr *MockMulticlusterMatchableHttpGatewayReconcilerMockRecorder) ReconcileMatchableHttpGateway(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMatchableHttpGateway", reflect.TypeOf((*MockMulticlusterMatchableHttpGatewayReconciler)(nil).ReconcileMatchableHttpGateway), clusterName, obj)
}

// MockMulticlusterMatchableHttpGatewayDeletionReconciler is a mock of MulticlusterMatchableHttpGatewayDeletionReconciler interface.
type MockMulticlusterMatchableHttpGatewayDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMatchableHttpGatewayDeletionReconcilerMockRecorder
}

// MockMulticlusterMatchableHttpGatewayDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterMatchableHttpGatewayDeletionReconciler.
type MockMulticlusterMatchableHttpGatewayDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterMatchableHttpGatewayDeletionReconciler
}

// NewMockMulticlusterMatchableHttpGatewayDeletionReconciler creates a new mock instance.
func NewMockMulticlusterMatchableHttpGatewayDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterMatchableHttpGatewayDeletionReconciler {
	mock := &MockMulticlusterMatchableHttpGatewayDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMatchableHttpGatewayDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterMatchableHttpGatewayDeletionReconciler) EXPECT() *MockMulticlusterMatchableHttpGatewayDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMatchableHttpGatewayDeletion mocks base method.
func (m *MockMulticlusterMatchableHttpGatewayDeletionReconciler) ReconcileMatchableHttpGatewayDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMatchableHttpGatewayDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileMatchableHttpGatewayDeletion indicates an expected call of ReconcileMatchableHttpGatewayDeletion.
func (mr *MockMulticlusterMatchableHttpGatewayDeletionReconcilerMockRecorder) ReconcileMatchableHttpGatewayDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMatchableHttpGatewayDeletion", reflect.TypeOf((*MockMulticlusterMatchableHttpGatewayDeletionReconciler)(nil).ReconcileMatchableHttpGatewayDeletion), clusterName, req)
}

// MockMulticlusterMatchableHttpGatewayReconcileLoop is a mock of MulticlusterMatchableHttpGatewayReconcileLoop interface.
type MockMulticlusterMatchableHttpGatewayReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMatchableHttpGatewayReconcileLoopMockRecorder
}

// MockMulticlusterMatchableHttpGatewayReconcileLoopMockRecorder is the mock recorder for MockMulticlusterMatchableHttpGatewayReconcileLoop.
type MockMulticlusterMatchableHttpGatewayReconcileLoopMockRecorder struct {
	mock *MockMulticlusterMatchableHttpGatewayReconcileLoop
}

// NewMockMulticlusterMatchableHttpGatewayReconcileLoop creates a new mock instance.
func NewMockMulticlusterMatchableHttpGatewayReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterMatchableHttpGatewayReconcileLoop {
	mock := &MockMulticlusterMatchableHttpGatewayReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMatchableHttpGatewayReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterMatchableHttpGatewayReconcileLoop) EXPECT() *MockMulticlusterMatchableHttpGatewayReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterMatchableHttpGatewayReconciler mocks base method.
func (m *MockMulticlusterMatchableHttpGatewayReconcileLoop) AddMulticlusterMatchableHttpGatewayReconciler(ctx context.Context, rec controller.MulticlusterMatchableHttpGatewayReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterMatchableHttpGatewayReconciler", varargs...)
}

// AddMulticlusterMatchableHttpGatewayReconciler indicates an expected call of AddMulticlusterMatchableHttpGatewayReconciler.
func (mr *MockMulticlusterMatchableHttpGatewayReconcileLoopMockRecorder) AddMulticlusterMatchableHttpGatewayReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterMatchableHttpGatewayReconciler", reflect.TypeOf((*MockMulticlusterMatchableHttpGatewayReconcileLoop)(nil).AddMulticlusterMatchableHttpGatewayReconciler), varargs...)
}

// MockMulticlusterMatchableTcpGatewayReconciler is a mock of MulticlusterMatchableTcpGatewayReconciler interface.
type MockMulticlusterMatchableTcpGatewayReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMatchableTcpGatewayReconcilerMockRecorder
}

// MockMulticlusterMatchableTcpGatewayReconcilerMockRecorder is the mock recorder for MockMulticlusterMatchableTcpGatewayReconciler.
type MockMulticlusterMatchableTcpGatewayReconcilerMockRecorder struct {
	mock *MockMulticlusterMatchableTcpGatewayReconciler
}

// NewMockMulticlusterMatchableTcpGatewayReconciler creates a new mock instance.
func NewMockMulticlusterMatchableTcpGatewayReconciler(ctrl *gomock.Controller) *MockMulticlusterMatchableTcpGatewayReconciler {
	mock := &MockMulticlusterMatchableTcpGatewayReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMatchableTcpGatewayReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterMatchableTcpGatewayReconciler) EXPECT() *MockMulticlusterMatchableTcpGatewayReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMatchableTcpGateway mocks base method.
func (m *MockMulticlusterMatchableTcpGatewayReconciler) ReconcileMatchableTcpGateway(clusterName string, obj *v1.MatchableTcpGateway) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMatchableTcpGateway", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileMatchableTcpGateway indicates an expected call of ReconcileMatchableTcpGateway.
func (mr *MockMulticlusterMatchableTcpGatewayReconcilerMockRecorder) ReconcileMatchableTcpGateway(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMatchableTcpGateway", reflect.TypeOf((*MockMulticlusterMatchableTcpGatewayReconciler)(nil).ReconcileMatchableTcpGateway), clusterName, obj)
}

// MockMulticlusterMatchableTcpGatewayDeletionReconciler is a mock of MulticlusterMatchableTcpGatewayDeletionReconciler interface.
type MockMulticlusterMatchableTcpGatewayDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMatchableTcpGatewayDeletionReconcilerMockRecorder
}

// MockMulticlusterMatchableTcpGatewayDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterMatchableTcpGatewayDeletionReconciler.
type MockMulticlusterMatchableTcpGatewayDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterMatchableTcpGatewayDeletionReconciler
}

// NewMockMulticlusterMatchableTcpGatewayDeletionReconciler creates a new mock instance.
func NewMockMulticlusterMatchableTcpGatewayDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterMatchableTcpGatewayDeletionReconciler {
	mock := &MockMulticlusterMatchableTcpGatewayDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMatchableTcpGatewayDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterMatchableTcpGatewayDeletionReconciler) EXPECT() *MockMulticlusterMatchableTcpGatewayDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMatchableTcpGatewayDeletion mocks base method.
func (m *MockMulticlusterMatchableTcpGatewayDeletionReconciler) ReconcileMatchableTcpGatewayDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMatchableTcpGatewayDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileMatchableTcpGatewayDeletion indicates an expected call of ReconcileMatchableTcpGatewayDeletion.
func (mr *MockMulticlusterMatchableTcpGatewayDeletionReconcilerMockRecorder) ReconcileMatchableTcpGatewayDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMatchableTcpGatewayDeletion", reflect.TypeOf((*MockMulticlusterMatchableTcpGatewayDeletionReconciler)(nil).ReconcileMatchableTcpGatewayDeletion), clusterName, req)
}

// MockMulticlusterMatchableTcpGatewayReconcileLoop is a mock of MulticlusterMatchableTcpGatewayReconcileLoop interface.
type MockMulticlusterMatchableTcpGatewayReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMatchableTcpGatewayReconcileLoopMockRecorder
}

// MockMulticlusterMatchableTcpGatewayReconcileLoopMockRecorder is the mock recorder for MockMulticlusterMatchableTcpGatewayReconcileLoop.
type MockMulticlusterMatchableTcpGatewayReconcileLoopMockRecorder struct {
	mock *MockMulticlusterMatchableTcpGatewayReconcileLoop
}

// NewMockMulticlusterMatchableTcpGatewayReconcileLoop creates a new mock instance.
func NewMockMulticlusterMatchableTcpGatewayReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterMatchableTcpGatewayReconcileLoop {
	mock := &MockMulticlusterMatchableTcpGatewayReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMatchableTcpGatewayReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterMatchableTcpGatewayReconcileLoop) EXPECT() *MockMulticlusterMatchableTcpGatewayReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterMatchableTcpGatewayReconciler mocks base method.
func (m *MockMulticlusterMatchableTcpGatewayReconcileLoop) AddMulticlusterMatchableTcpGatewayReconciler(ctx context.Context, rec controller.MulticlusterMatchableTcpGatewayReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterMatchableTcpGatewayReconciler", varargs...)
}

// AddMulticlusterMatchableTcpGatewayReconciler indicates an expected call of AddMulticlusterMatchableTcpGatewayReconciler.
func (mr *MockMulticlusterMatchableTcpGatewayReconcileLoopMockRecorder) AddMulticlusterMatchableTcpGatewayReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterMatchableTcpGatewayReconciler", reflect.TypeOf((*MockMulticlusterMatchableTcpGatewayReconcileLoop)(nil).AddMulticlusterMatchableTcpGatewayReconciler), varargs...)
}

// MockMulticlusterRouteTableReconciler is a mock of MulticlusterRouteTableReconciler interface.
type MockMulticlusterRouteTableReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRouteTableReconcilerMockRecorder
}

// MockMulticlusterRouteTableReconcilerMockRecorder is the mock recorder for MockMulticlusterRouteTableReconciler.
type MockMulticlusterRouteTableReconcilerMockRecorder struct {
	mock *MockMulticlusterRouteTableReconciler
}

// NewMockMulticlusterRouteTableReconciler creates a new mock instance.
func NewMockMulticlusterRouteTableReconciler(ctrl *gomock.Controller) *MockMulticlusterRouteTableReconciler {
	mock := &MockMulticlusterRouteTableReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRouteTableReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRouteTableReconciler) EXPECT() *MockMulticlusterRouteTableReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRouteTable mocks base method.
func (m *MockMulticlusterRouteTableReconciler) ReconcileRouteTable(clusterName string, obj *v1.RouteTable) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRouteTable", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRouteTable indicates an expected call of ReconcileRouteTable.
func (mr *MockMulticlusterRouteTableReconcilerMockRecorder) ReconcileRouteTable(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRouteTable", reflect.TypeOf((*MockMulticlusterRouteTableReconciler)(nil).ReconcileRouteTable), clusterName, obj)
}

// MockMulticlusterRouteTableDeletionReconciler is a mock of MulticlusterRouteTableDeletionReconciler interface.
type MockMulticlusterRouteTableDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRouteTableDeletionReconcilerMockRecorder
}

// MockMulticlusterRouteTableDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterRouteTableDeletionReconciler.
type MockMulticlusterRouteTableDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterRouteTableDeletionReconciler
}

// NewMockMulticlusterRouteTableDeletionReconciler creates a new mock instance.
func NewMockMulticlusterRouteTableDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterRouteTableDeletionReconciler {
	mock := &MockMulticlusterRouteTableDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRouteTableDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRouteTableDeletionReconciler) EXPECT() *MockMulticlusterRouteTableDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRouteTableDeletion mocks base method.
func (m *MockMulticlusterRouteTableDeletionReconciler) ReconcileRouteTableDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRouteTableDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileRouteTableDeletion indicates an expected call of ReconcileRouteTableDeletion.
func (mr *MockMulticlusterRouteTableDeletionReconcilerMockRecorder) ReconcileRouteTableDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRouteTableDeletion", reflect.TypeOf((*MockMulticlusterRouteTableDeletionReconciler)(nil).ReconcileRouteTableDeletion), clusterName, req)
}

// MockMulticlusterRouteTableReconcileLoop is a mock of MulticlusterRouteTableReconcileLoop interface.
type MockMulticlusterRouteTableReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRouteTableReconcileLoopMockRecorder
}

// MockMulticlusterRouteTableReconcileLoopMockRecorder is the mock recorder for MockMulticlusterRouteTableReconcileLoop.
type MockMulticlusterRouteTableReconcileLoopMockRecorder struct {
	mock *MockMulticlusterRouteTableReconcileLoop
}

// NewMockMulticlusterRouteTableReconcileLoop creates a new mock instance.
func NewMockMulticlusterRouteTableReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterRouteTableReconcileLoop {
	mock := &MockMulticlusterRouteTableReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRouteTableReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRouteTableReconcileLoop) EXPECT() *MockMulticlusterRouteTableReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterRouteTableReconciler mocks base method.
func (m *MockMulticlusterRouteTableReconcileLoop) AddMulticlusterRouteTableReconciler(ctx context.Context, rec controller.MulticlusterRouteTableReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterRouteTableReconciler", varargs...)
}

// AddMulticlusterRouteTableReconciler indicates an expected call of AddMulticlusterRouteTableReconciler.
func (mr *MockMulticlusterRouteTableReconcileLoopMockRecorder) AddMulticlusterRouteTableReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterRouteTableReconciler", reflect.TypeOf((*MockMulticlusterRouteTableReconcileLoop)(nil).AddMulticlusterRouteTableReconciler), varargs...)
}

// MockMulticlusterVirtualServiceReconciler is a mock of MulticlusterVirtualServiceReconciler interface.
type MockMulticlusterVirtualServiceReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualServiceReconcilerMockRecorder
}

// MockMulticlusterVirtualServiceReconcilerMockRecorder is the mock recorder for MockMulticlusterVirtualServiceReconciler.
type MockMulticlusterVirtualServiceReconcilerMockRecorder struct {
	mock *MockMulticlusterVirtualServiceReconciler
}

// NewMockMulticlusterVirtualServiceReconciler creates a new mock instance.
func NewMockMulticlusterVirtualServiceReconciler(ctrl *gomock.Controller) *MockMulticlusterVirtualServiceReconciler {
	mock := &MockMulticlusterVirtualServiceReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualServiceReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterVirtualServiceReconciler) EXPECT() *MockMulticlusterVirtualServiceReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualService mocks base method.
func (m *MockMulticlusterVirtualServiceReconciler) ReconcileVirtualService(clusterName string, obj *v1.VirtualService) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualService", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualService indicates an expected call of ReconcileVirtualService.
func (mr *MockMulticlusterVirtualServiceReconcilerMockRecorder) ReconcileVirtualService(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualService", reflect.TypeOf((*MockMulticlusterVirtualServiceReconciler)(nil).ReconcileVirtualService), clusterName, obj)
}

// MockMulticlusterVirtualServiceDeletionReconciler is a mock of MulticlusterVirtualServiceDeletionReconciler interface.
type MockMulticlusterVirtualServiceDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualServiceDeletionReconcilerMockRecorder
}

// MockMulticlusterVirtualServiceDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterVirtualServiceDeletionReconciler.
type MockMulticlusterVirtualServiceDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterVirtualServiceDeletionReconciler
}

// NewMockMulticlusterVirtualServiceDeletionReconciler creates a new mock instance.
func NewMockMulticlusterVirtualServiceDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterVirtualServiceDeletionReconciler {
	mock := &MockMulticlusterVirtualServiceDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualServiceDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterVirtualServiceDeletionReconciler) EXPECT() *MockMulticlusterVirtualServiceDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualServiceDeletion mocks base method.
func (m *MockMulticlusterVirtualServiceDeletionReconciler) ReconcileVirtualServiceDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualServiceDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileVirtualServiceDeletion indicates an expected call of ReconcileVirtualServiceDeletion.
func (mr *MockMulticlusterVirtualServiceDeletionReconcilerMockRecorder) ReconcileVirtualServiceDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualServiceDeletion", reflect.TypeOf((*MockMulticlusterVirtualServiceDeletionReconciler)(nil).ReconcileVirtualServiceDeletion), clusterName, req)
}

// MockMulticlusterVirtualServiceReconcileLoop is a mock of MulticlusterVirtualServiceReconcileLoop interface.
type MockMulticlusterVirtualServiceReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualServiceReconcileLoopMockRecorder
}

// MockMulticlusterVirtualServiceReconcileLoopMockRecorder is the mock recorder for MockMulticlusterVirtualServiceReconcileLoop.
type MockMulticlusterVirtualServiceReconcileLoopMockRecorder struct {
	mock *MockMulticlusterVirtualServiceReconcileLoop
}

// NewMockMulticlusterVirtualServiceReconcileLoop creates a new mock instance.
func NewMockMulticlusterVirtualServiceReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterVirtualServiceReconcileLoop {
	mock := &MockMulticlusterVirtualServiceReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualServiceReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterVirtualServiceReconcileLoop) EXPECT() *MockMulticlusterVirtualServiceReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterVirtualServiceReconciler mocks base method.
func (m *MockMulticlusterVirtualServiceReconcileLoop) AddMulticlusterVirtualServiceReconciler(ctx context.Context, rec controller.MulticlusterVirtualServiceReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterVirtualServiceReconciler", varargs...)
}

// AddMulticlusterVirtualServiceReconciler indicates an expected call of AddMulticlusterVirtualServiceReconciler.
func (mr *MockMulticlusterVirtualServiceReconcileLoopMockRecorder) AddMulticlusterVirtualServiceReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterVirtualServiceReconciler", reflect.TypeOf((*MockMulticlusterVirtualServiceReconcileLoop)(nil).AddMulticlusterVirtualServiceReconciler), varargs...)
}

// MockMulticlusterVirtualHostOptionReconciler is a mock of MulticlusterVirtualHostOptionReconciler interface.
type MockMulticlusterVirtualHostOptionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualHostOptionReconcilerMockRecorder
}

// MockMulticlusterVirtualHostOptionReconcilerMockRecorder is the mock recorder for MockMulticlusterVirtualHostOptionReconciler.
type MockMulticlusterVirtualHostOptionReconcilerMockRecorder struct {
	mock *MockMulticlusterVirtualHostOptionReconciler
}

// NewMockMulticlusterVirtualHostOptionReconciler creates a new mock instance.
func NewMockMulticlusterVirtualHostOptionReconciler(ctrl *gomock.Controller) *MockMulticlusterVirtualHostOptionReconciler {
	mock := &MockMulticlusterVirtualHostOptionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualHostOptionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterVirtualHostOptionReconciler) EXPECT() *MockMulticlusterVirtualHostOptionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualHostOption mocks base method.
func (m *MockMulticlusterVirtualHostOptionReconciler) ReconcileVirtualHostOption(clusterName string, obj *v1.VirtualHostOption) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualHostOption", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualHostOption indicates an expected call of ReconcileVirtualHostOption.
func (mr *MockMulticlusterVirtualHostOptionReconcilerMockRecorder) ReconcileVirtualHostOption(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualHostOption", reflect.TypeOf((*MockMulticlusterVirtualHostOptionReconciler)(nil).ReconcileVirtualHostOption), clusterName, obj)
}

// MockMulticlusterVirtualHostOptionDeletionReconciler is a mock of MulticlusterVirtualHostOptionDeletionReconciler interface.
type MockMulticlusterVirtualHostOptionDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualHostOptionDeletionReconcilerMockRecorder
}

// MockMulticlusterVirtualHostOptionDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterVirtualHostOptionDeletionReconciler.
type MockMulticlusterVirtualHostOptionDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterVirtualHostOptionDeletionReconciler
}

// NewMockMulticlusterVirtualHostOptionDeletionReconciler creates a new mock instance.
func NewMockMulticlusterVirtualHostOptionDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterVirtualHostOptionDeletionReconciler {
	mock := &MockMulticlusterVirtualHostOptionDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualHostOptionDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterVirtualHostOptionDeletionReconciler) EXPECT() *MockMulticlusterVirtualHostOptionDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualHostOptionDeletion mocks base method.
func (m *MockMulticlusterVirtualHostOptionDeletionReconciler) ReconcileVirtualHostOptionDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualHostOptionDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileVirtualHostOptionDeletion indicates an expected call of ReconcileVirtualHostOptionDeletion.
func (mr *MockMulticlusterVirtualHostOptionDeletionReconcilerMockRecorder) ReconcileVirtualHostOptionDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualHostOptionDeletion", reflect.TypeOf((*MockMulticlusterVirtualHostOptionDeletionReconciler)(nil).ReconcileVirtualHostOptionDeletion), clusterName, req)
}

// MockMulticlusterVirtualHostOptionReconcileLoop is a mock of MulticlusterVirtualHostOptionReconcileLoop interface.
type MockMulticlusterVirtualHostOptionReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualHostOptionReconcileLoopMockRecorder
}

// MockMulticlusterVirtualHostOptionReconcileLoopMockRecorder is the mock recorder for MockMulticlusterVirtualHostOptionReconcileLoop.
type MockMulticlusterVirtualHostOptionReconcileLoopMockRecorder struct {
	mock *MockMulticlusterVirtualHostOptionReconcileLoop
}

// NewMockMulticlusterVirtualHostOptionReconcileLoop creates a new mock instance.
func NewMockMulticlusterVirtualHostOptionReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterVirtualHostOptionReconcileLoop {
	mock := &MockMulticlusterVirtualHostOptionReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualHostOptionReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterVirtualHostOptionReconcileLoop) EXPECT() *MockMulticlusterVirtualHostOptionReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterVirtualHostOptionReconciler mocks base method.
func (m *MockMulticlusterVirtualHostOptionReconcileLoop) AddMulticlusterVirtualHostOptionReconciler(ctx context.Context, rec controller.MulticlusterVirtualHostOptionReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterVirtualHostOptionReconciler", varargs...)
}

// AddMulticlusterVirtualHostOptionReconciler indicates an expected call of AddMulticlusterVirtualHostOptionReconciler.
func (mr *MockMulticlusterVirtualHostOptionReconcileLoopMockRecorder) AddMulticlusterVirtualHostOptionReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterVirtualHostOptionReconciler", reflect.TypeOf((*MockMulticlusterVirtualHostOptionReconcileLoop)(nil).AddMulticlusterVirtualHostOptionReconciler), varargs...)
}

// MockMulticlusterRouteOptionReconciler is a mock of MulticlusterRouteOptionReconciler interface.
type MockMulticlusterRouteOptionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRouteOptionReconcilerMockRecorder
}

// MockMulticlusterRouteOptionReconcilerMockRecorder is the mock recorder for MockMulticlusterRouteOptionReconciler.
type MockMulticlusterRouteOptionReconcilerMockRecorder struct {
	mock *MockMulticlusterRouteOptionReconciler
}

// NewMockMulticlusterRouteOptionReconciler creates a new mock instance.
func NewMockMulticlusterRouteOptionReconciler(ctrl *gomock.Controller) *MockMulticlusterRouteOptionReconciler {
	mock := &MockMulticlusterRouteOptionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRouteOptionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRouteOptionReconciler) EXPECT() *MockMulticlusterRouteOptionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRouteOption mocks base method.
func (m *MockMulticlusterRouteOptionReconciler) ReconcileRouteOption(clusterName string, obj *v1.RouteOption) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRouteOption", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRouteOption indicates an expected call of ReconcileRouteOption.
func (mr *MockMulticlusterRouteOptionReconcilerMockRecorder) ReconcileRouteOption(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRouteOption", reflect.TypeOf((*MockMulticlusterRouteOptionReconciler)(nil).ReconcileRouteOption), clusterName, obj)
}

// MockMulticlusterRouteOptionDeletionReconciler is a mock of MulticlusterRouteOptionDeletionReconciler interface.
type MockMulticlusterRouteOptionDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRouteOptionDeletionReconcilerMockRecorder
}

// MockMulticlusterRouteOptionDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterRouteOptionDeletionReconciler.
type MockMulticlusterRouteOptionDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterRouteOptionDeletionReconciler
}

// NewMockMulticlusterRouteOptionDeletionReconciler creates a new mock instance.
func NewMockMulticlusterRouteOptionDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterRouteOptionDeletionReconciler {
	mock := &MockMulticlusterRouteOptionDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRouteOptionDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRouteOptionDeletionReconciler) EXPECT() *MockMulticlusterRouteOptionDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRouteOptionDeletion mocks base method.
func (m *MockMulticlusterRouteOptionDeletionReconciler) ReconcileRouteOptionDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRouteOptionDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileRouteOptionDeletion indicates an expected call of ReconcileRouteOptionDeletion.
func (mr *MockMulticlusterRouteOptionDeletionReconcilerMockRecorder) ReconcileRouteOptionDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRouteOptionDeletion", reflect.TypeOf((*MockMulticlusterRouteOptionDeletionReconciler)(nil).ReconcileRouteOptionDeletion), clusterName, req)
}

// MockMulticlusterRouteOptionReconcileLoop is a mock of MulticlusterRouteOptionReconcileLoop interface.
type MockMulticlusterRouteOptionReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRouteOptionReconcileLoopMockRecorder
}

// MockMulticlusterRouteOptionReconcileLoopMockRecorder is the mock recorder for MockMulticlusterRouteOptionReconcileLoop.
type MockMulticlusterRouteOptionReconcileLoopMockRecorder struct {
	mock *MockMulticlusterRouteOptionReconcileLoop
}

// NewMockMulticlusterRouteOptionReconcileLoop creates a new mock instance.
func NewMockMulticlusterRouteOptionReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterRouteOptionReconcileLoop {
	mock := &MockMulticlusterRouteOptionReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRouteOptionReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRouteOptionReconcileLoop) EXPECT() *MockMulticlusterRouteOptionReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterRouteOptionReconciler mocks base method.
func (m *MockMulticlusterRouteOptionReconcileLoop) AddMulticlusterRouteOptionReconciler(ctx context.Context, rec controller.MulticlusterRouteOptionReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterRouteOptionReconciler", varargs...)
}

// AddMulticlusterRouteOptionReconciler indicates an expected call of AddMulticlusterRouteOptionReconciler.
func (mr *MockMulticlusterRouteOptionReconcileLoopMockRecorder) AddMulticlusterRouteOptionReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterRouteOptionReconciler", reflect.TypeOf((*MockMulticlusterRouteOptionReconcileLoop)(nil).AddMulticlusterRouteOptionReconciler), varargs...)
}
