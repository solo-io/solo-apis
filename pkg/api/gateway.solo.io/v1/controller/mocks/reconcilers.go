// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	v1 "github.com/solo-io/solo-apis/pkg/api/gateway.solo.io/v1"
	controller "github.com/solo-io/solo-apis/pkg/api/gateway.solo.io/v1/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockGatewayReconciler is a mock of GatewayReconciler interface.
type MockGatewayReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayReconcilerMockRecorder
}

// MockGatewayReconcilerMockRecorder is the mock recorder for MockGatewayReconciler.
type MockGatewayReconcilerMockRecorder struct {
	mock *MockGatewayReconciler
}

// NewMockGatewayReconciler creates a new mock instance.
func NewMockGatewayReconciler(ctrl *gomock.Controller) *MockGatewayReconciler {
	mock := &MockGatewayReconciler{ctrl: ctrl}
	mock.recorder = &MockGatewayReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayReconciler) EXPECT() *MockGatewayReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGateway mocks base method.
func (m *MockGatewayReconciler) ReconcileGateway(obj *v1.Gateway) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGateway", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGateway indicates an expected call of ReconcileGateway.
func (mr *MockGatewayReconcilerMockRecorder) ReconcileGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGateway", reflect.TypeOf((*MockGatewayReconciler)(nil).ReconcileGateway), obj)
}

// MockGatewayDeletionReconciler is a mock of GatewayDeletionReconciler interface.
type MockGatewayDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayDeletionReconcilerMockRecorder
}

// MockGatewayDeletionReconcilerMockRecorder is the mock recorder for MockGatewayDeletionReconciler.
type MockGatewayDeletionReconcilerMockRecorder struct {
	mock *MockGatewayDeletionReconciler
}

// NewMockGatewayDeletionReconciler creates a new mock instance.
func NewMockGatewayDeletionReconciler(ctrl *gomock.Controller) *MockGatewayDeletionReconciler {
	mock := &MockGatewayDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockGatewayDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayDeletionReconciler) EXPECT() *MockGatewayDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGatewayDeletion mocks base method.
func (m *MockGatewayDeletionReconciler) ReconcileGatewayDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGatewayDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGatewayDeletion indicates an expected call of ReconcileGatewayDeletion.
func (mr *MockGatewayDeletionReconcilerMockRecorder) ReconcileGatewayDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGatewayDeletion", reflect.TypeOf((*MockGatewayDeletionReconciler)(nil).ReconcileGatewayDeletion), req)
}

// MockGatewayFinalizer is a mock of GatewayFinalizer interface.
type MockGatewayFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayFinalizerMockRecorder
}

// MockGatewayFinalizerMockRecorder is the mock recorder for MockGatewayFinalizer.
type MockGatewayFinalizerMockRecorder struct {
	mock *MockGatewayFinalizer
}

// NewMockGatewayFinalizer creates a new mock instance.
func NewMockGatewayFinalizer(ctrl *gomock.Controller) *MockGatewayFinalizer {
	mock := &MockGatewayFinalizer{ctrl: ctrl}
	mock.recorder = &MockGatewayFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayFinalizer) EXPECT() *MockGatewayFinalizerMockRecorder {
	return m.recorder
}

// FinalizeGateway mocks base method.
func (m *MockGatewayFinalizer) FinalizeGateway(obj *v1.Gateway) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeGateway", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeGateway indicates an expected call of FinalizeGateway.
func (mr *MockGatewayFinalizerMockRecorder) FinalizeGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeGateway", reflect.TypeOf((*MockGatewayFinalizer)(nil).FinalizeGateway), obj)
}

// GatewayFinalizerName mocks base method.
func (m *MockGatewayFinalizer) GatewayFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GatewayFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GatewayFinalizerName indicates an expected call of GatewayFinalizerName.
func (mr *MockGatewayFinalizerMockRecorder) GatewayFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GatewayFinalizerName", reflect.TypeOf((*MockGatewayFinalizer)(nil).GatewayFinalizerName))
}

// ReconcileGateway mocks base method.
func (m *MockGatewayFinalizer) ReconcileGateway(obj *v1.Gateway) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGateway", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGateway indicates an expected call of ReconcileGateway.
func (mr *MockGatewayFinalizerMockRecorder) ReconcileGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGateway", reflect.TypeOf((*MockGatewayFinalizer)(nil).ReconcileGateway), obj)
}

// MockGatewayReconcileLoop is a mock of GatewayReconcileLoop interface.
type MockGatewayReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayReconcileLoopMockRecorder
}

// MockGatewayReconcileLoopMockRecorder is the mock recorder for MockGatewayReconcileLoop.
type MockGatewayReconcileLoopMockRecorder struct {
	mock *MockGatewayReconcileLoop
}

// NewMockGatewayReconcileLoop creates a new mock instance.
func NewMockGatewayReconcileLoop(ctrl *gomock.Controller) *MockGatewayReconcileLoop {
	mock := &MockGatewayReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockGatewayReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayReconcileLoop) EXPECT() *MockGatewayReconcileLoopMockRecorder {
	return m.recorder
}

// RunGatewayReconciler mocks base method.
func (m *MockGatewayReconcileLoop) RunGatewayReconciler(ctx context.Context, rec controller.GatewayReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunGatewayReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunGatewayReconciler indicates an expected call of RunGatewayReconciler.
func (mr *MockGatewayReconcileLoopMockRecorder) RunGatewayReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunGatewayReconciler", reflect.TypeOf((*MockGatewayReconcileLoop)(nil).RunGatewayReconciler), varargs...)
}

// MockMatchableHttpGatewayReconciler is a mock of MatchableHttpGatewayReconciler interface.
type MockMatchableHttpGatewayReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMatchableHttpGatewayReconcilerMockRecorder
}

// MockMatchableHttpGatewayReconcilerMockRecorder is the mock recorder for MockMatchableHttpGatewayReconciler.
type MockMatchableHttpGatewayReconcilerMockRecorder struct {
	mock *MockMatchableHttpGatewayReconciler
}

// NewMockMatchableHttpGatewayReconciler creates a new mock instance.
func NewMockMatchableHttpGatewayReconciler(ctrl *gomock.Controller) *MockMatchableHttpGatewayReconciler {
	mock := &MockMatchableHttpGatewayReconciler{ctrl: ctrl}
	mock.recorder = &MockMatchableHttpGatewayReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchableHttpGatewayReconciler) EXPECT() *MockMatchableHttpGatewayReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMatchableHttpGateway mocks base method.
func (m *MockMatchableHttpGatewayReconciler) ReconcileMatchableHttpGateway(obj *v1.MatchableHttpGateway) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMatchableHttpGateway", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileMatchableHttpGateway indicates an expected call of ReconcileMatchableHttpGateway.
func (mr *MockMatchableHttpGatewayReconcilerMockRecorder) ReconcileMatchableHttpGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMatchableHttpGateway", reflect.TypeOf((*MockMatchableHttpGatewayReconciler)(nil).ReconcileMatchableHttpGateway), obj)
}

// MockMatchableHttpGatewayDeletionReconciler is a mock of MatchableHttpGatewayDeletionReconciler interface.
type MockMatchableHttpGatewayDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMatchableHttpGatewayDeletionReconcilerMockRecorder
}

// MockMatchableHttpGatewayDeletionReconcilerMockRecorder is the mock recorder for MockMatchableHttpGatewayDeletionReconciler.
type MockMatchableHttpGatewayDeletionReconcilerMockRecorder struct {
	mock *MockMatchableHttpGatewayDeletionReconciler
}

// NewMockMatchableHttpGatewayDeletionReconciler creates a new mock instance.
func NewMockMatchableHttpGatewayDeletionReconciler(ctrl *gomock.Controller) *MockMatchableHttpGatewayDeletionReconciler {
	mock := &MockMatchableHttpGatewayDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMatchableHttpGatewayDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchableHttpGatewayDeletionReconciler) EXPECT() *MockMatchableHttpGatewayDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMatchableHttpGatewayDeletion mocks base method.
func (m *MockMatchableHttpGatewayDeletionReconciler) ReconcileMatchableHttpGatewayDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMatchableHttpGatewayDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileMatchableHttpGatewayDeletion indicates an expected call of ReconcileMatchableHttpGatewayDeletion.
func (mr *MockMatchableHttpGatewayDeletionReconcilerMockRecorder) ReconcileMatchableHttpGatewayDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMatchableHttpGatewayDeletion", reflect.TypeOf((*MockMatchableHttpGatewayDeletionReconciler)(nil).ReconcileMatchableHttpGatewayDeletion), req)
}

// MockMatchableHttpGatewayFinalizer is a mock of MatchableHttpGatewayFinalizer interface.
type MockMatchableHttpGatewayFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockMatchableHttpGatewayFinalizerMockRecorder
}

// MockMatchableHttpGatewayFinalizerMockRecorder is the mock recorder for MockMatchableHttpGatewayFinalizer.
type MockMatchableHttpGatewayFinalizerMockRecorder struct {
	mock *MockMatchableHttpGatewayFinalizer
}

// NewMockMatchableHttpGatewayFinalizer creates a new mock instance.
func NewMockMatchableHttpGatewayFinalizer(ctrl *gomock.Controller) *MockMatchableHttpGatewayFinalizer {
	mock := &MockMatchableHttpGatewayFinalizer{ctrl: ctrl}
	mock.recorder = &MockMatchableHttpGatewayFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchableHttpGatewayFinalizer) EXPECT() *MockMatchableHttpGatewayFinalizerMockRecorder {
	return m.recorder
}

// FinalizeMatchableHttpGateway mocks base method.
func (m *MockMatchableHttpGatewayFinalizer) FinalizeMatchableHttpGateway(obj *v1.MatchableHttpGateway) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeMatchableHttpGateway", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeMatchableHttpGateway indicates an expected call of FinalizeMatchableHttpGateway.
func (mr *MockMatchableHttpGatewayFinalizerMockRecorder) FinalizeMatchableHttpGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeMatchableHttpGateway", reflect.TypeOf((*MockMatchableHttpGatewayFinalizer)(nil).FinalizeMatchableHttpGateway), obj)
}

// MatchableHttpGatewayFinalizerName mocks base method.
func (m *MockMatchableHttpGatewayFinalizer) MatchableHttpGatewayFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchableHttpGatewayFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// MatchableHttpGatewayFinalizerName indicates an expected call of MatchableHttpGatewayFinalizerName.
func (mr *MockMatchableHttpGatewayFinalizerMockRecorder) MatchableHttpGatewayFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchableHttpGatewayFinalizerName", reflect.TypeOf((*MockMatchableHttpGatewayFinalizer)(nil).MatchableHttpGatewayFinalizerName))
}

// ReconcileMatchableHttpGateway mocks base method.
func (m *MockMatchableHttpGatewayFinalizer) ReconcileMatchableHttpGateway(obj *v1.MatchableHttpGateway) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMatchableHttpGateway", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileMatchableHttpGateway indicates an expected call of ReconcileMatchableHttpGateway.
func (mr *MockMatchableHttpGatewayFinalizerMockRecorder) ReconcileMatchableHttpGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMatchableHttpGateway", reflect.TypeOf((*MockMatchableHttpGatewayFinalizer)(nil).ReconcileMatchableHttpGateway), obj)
}

// MockMatchableHttpGatewayReconcileLoop is a mock of MatchableHttpGatewayReconcileLoop interface.
type MockMatchableHttpGatewayReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMatchableHttpGatewayReconcileLoopMockRecorder
}

// MockMatchableHttpGatewayReconcileLoopMockRecorder is the mock recorder for MockMatchableHttpGatewayReconcileLoop.
type MockMatchableHttpGatewayReconcileLoopMockRecorder struct {
	mock *MockMatchableHttpGatewayReconcileLoop
}

// NewMockMatchableHttpGatewayReconcileLoop creates a new mock instance.
func NewMockMatchableHttpGatewayReconcileLoop(ctrl *gomock.Controller) *MockMatchableHttpGatewayReconcileLoop {
	mock := &MockMatchableHttpGatewayReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMatchableHttpGatewayReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchableHttpGatewayReconcileLoop) EXPECT() *MockMatchableHttpGatewayReconcileLoopMockRecorder {
	return m.recorder
}

// RunMatchableHttpGatewayReconciler mocks base method.
func (m *MockMatchableHttpGatewayReconcileLoop) RunMatchableHttpGatewayReconciler(ctx context.Context, rec controller.MatchableHttpGatewayReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunMatchableHttpGatewayReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunMatchableHttpGatewayReconciler indicates an expected call of RunMatchableHttpGatewayReconciler.
func (mr *MockMatchableHttpGatewayReconcileLoopMockRecorder) RunMatchableHttpGatewayReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunMatchableHttpGatewayReconciler", reflect.TypeOf((*MockMatchableHttpGatewayReconcileLoop)(nil).RunMatchableHttpGatewayReconciler), varargs...)
}

// MockRouteTableReconciler is a mock of RouteTableReconciler interface.
type MockRouteTableReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableReconcilerMockRecorder
}

// MockRouteTableReconcilerMockRecorder is the mock recorder for MockRouteTableReconciler.
type MockRouteTableReconcilerMockRecorder struct {
	mock *MockRouteTableReconciler
}

// NewMockRouteTableReconciler creates a new mock instance.
func NewMockRouteTableReconciler(ctrl *gomock.Controller) *MockRouteTableReconciler {
	mock := &MockRouteTableReconciler{ctrl: ctrl}
	mock.recorder = &MockRouteTableReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteTableReconciler) EXPECT() *MockRouteTableReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRouteTable mocks base method.
func (m *MockRouteTableReconciler) ReconcileRouteTable(obj *v1.RouteTable) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRouteTable", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRouteTable indicates an expected call of ReconcileRouteTable.
func (mr *MockRouteTableReconcilerMockRecorder) ReconcileRouteTable(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRouteTable", reflect.TypeOf((*MockRouteTableReconciler)(nil).ReconcileRouteTable), obj)
}

// MockRouteTableDeletionReconciler is a mock of RouteTableDeletionReconciler interface.
type MockRouteTableDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableDeletionReconcilerMockRecorder
}

// MockRouteTableDeletionReconcilerMockRecorder is the mock recorder for MockRouteTableDeletionReconciler.
type MockRouteTableDeletionReconcilerMockRecorder struct {
	mock *MockRouteTableDeletionReconciler
}

// NewMockRouteTableDeletionReconciler creates a new mock instance.
func NewMockRouteTableDeletionReconciler(ctrl *gomock.Controller) *MockRouteTableDeletionReconciler {
	mock := &MockRouteTableDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockRouteTableDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteTableDeletionReconciler) EXPECT() *MockRouteTableDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRouteTableDeletion mocks base method.
func (m *MockRouteTableDeletionReconciler) ReconcileRouteTableDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRouteTableDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileRouteTableDeletion indicates an expected call of ReconcileRouteTableDeletion.
func (mr *MockRouteTableDeletionReconcilerMockRecorder) ReconcileRouteTableDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRouteTableDeletion", reflect.TypeOf((*MockRouteTableDeletionReconciler)(nil).ReconcileRouteTableDeletion), req)
}

// MockRouteTableFinalizer is a mock of RouteTableFinalizer interface.
type MockRouteTableFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableFinalizerMockRecorder
}

// MockRouteTableFinalizerMockRecorder is the mock recorder for MockRouteTableFinalizer.
type MockRouteTableFinalizerMockRecorder struct {
	mock *MockRouteTableFinalizer
}

// NewMockRouteTableFinalizer creates a new mock instance.
func NewMockRouteTableFinalizer(ctrl *gomock.Controller) *MockRouteTableFinalizer {
	mock := &MockRouteTableFinalizer{ctrl: ctrl}
	mock.recorder = &MockRouteTableFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteTableFinalizer) EXPECT() *MockRouteTableFinalizerMockRecorder {
	return m.recorder
}

// FinalizeRouteTable mocks base method.
func (m *MockRouteTableFinalizer) FinalizeRouteTable(obj *v1.RouteTable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeRouteTable", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeRouteTable indicates an expected call of FinalizeRouteTable.
func (mr *MockRouteTableFinalizerMockRecorder) FinalizeRouteTable(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeRouteTable", reflect.TypeOf((*MockRouteTableFinalizer)(nil).FinalizeRouteTable), obj)
}

// ReconcileRouteTable mocks base method.
func (m *MockRouteTableFinalizer) ReconcileRouteTable(obj *v1.RouteTable) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRouteTable", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRouteTable indicates an expected call of ReconcileRouteTable.
func (mr *MockRouteTableFinalizerMockRecorder) ReconcileRouteTable(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRouteTable", reflect.TypeOf((*MockRouteTableFinalizer)(nil).ReconcileRouteTable), obj)
}

// RouteTableFinalizerName mocks base method.
func (m *MockRouteTableFinalizer) RouteTableFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteTableFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// RouteTableFinalizerName indicates an expected call of RouteTableFinalizerName.
func (mr *MockRouteTableFinalizerMockRecorder) RouteTableFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteTableFinalizerName", reflect.TypeOf((*MockRouteTableFinalizer)(nil).RouteTableFinalizerName))
}

// MockRouteTableReconcileLoop is a mock of RouteTableReconcileLoop interface.
type MockRouteTableReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableReconcileLoopMockRecorder
}

// MockRouteTableReconcileLoopMockRecorder is the mock recorder for MockRouteTableReconcileLoop.
type MockRouteTableReconcileLoopMockRecorder struct {
	mock *MockRouteTableReconcileLoop
}

// NewMockRouteTableReconcileLoop creates a new mock instance.
func NewMockRouteTableReconcileLoop(ctrl *gomock.Controller) *MockRouteTableReconcileLoop {
	mock := &MockRouteTableReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockRouteTableReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteTableReconcileLoop) EXPECT() *MockRouteTableReconcileLoopMockRecorder {
	return m.recorder
}

// RunRouteTableReconciler mocks base method.
func (m *MockRouteTableReconcileLoop) RunRouteTableReconciler(ctx context.Context, rec controller.RouteTableReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunRouteTableReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunRouteTableReconciler indicates an expected call of RunRouteTableReconciler.
func (mr *MockRouteTableReconcileLoopMockRecorder) RunRouteTableReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunRouteTableReconciler", reflect.TypeOf((*MockRouteTableReconcileLoop)(nil).RunRouteTableReconciler), varargs...)
}

// MockVirtualServiceReconciler is a mock of VirtualServiceReconciler interface.
type MockVirtualServiceReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceReconcilerMockRecorder
}

// MockVirtualServiceReconcilerMockRecorder is the mock recorder for MockVirtualServiceReconciler.
type MockVirtualServiceReconcilerMockRecorder struct {
	mock *MockVirtualServiceReconciler
}

// NewMockVirtualServiceReconciler creates a new mock instance.
func NewMockVirtualServiceReconciler(ctrl *gomock.Controller) *MockVirtualServiceReconciler {
	mock := &MockVirtualServiceReconciler{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualServiceReconciler) EXPECT() *MockVirtualServiceReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualService mocks base method.
func (m *MockVirtualServiceReconciler) ReconcileVirtualService(obj *v1.VirtualService) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualService", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualService indicates an expected call of ReconcileVirtualService.
func (mr *MockVirtualServiceReconcilerMockRecorder) ReconcileVirtualService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualService", reflect.TypeOf((*MockVirtualServiceReconciler)(nil).ReconcileVirtualService), obj)
}

// MockVirtualServiceDeletionReconciler is a mock of VirtualServiceDeletionReconciler interface.
type MockVirtualServiceDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceDeletionReconcilerMockRecorder
}

// MockVirtualServiceDeletionReconcilerMockRecorder is the mock recorder for MockVirtualServiceDeletionReconciler.
type MockVirtualServiceDeletionReconcilerMockRecorder struct {
	mock *MockVirtualServiceDeletionReconciler
}

// NewMockVirtualServiceDeletionReconciler creates a new mock instance.
func NewMockVirtualServiceDeletionReconciler(ctrl *gomock.Controller) *MockVirtualServiceDeletionReconciler {
	mock := &MockVirtualServiceDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualServiceDeletionReconciler) EXPECT() *MockVirtualServiceDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualServiceDeletion mocks base method.
func (m *MockVirtualServiceDeletionReconciler) ReconcileVirtualServiceDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualServiceDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileVirtualServiceDeletion indicates an expected call of ReconcileVirtualServiceDeletion.
func (mr *MockVirtualServiceDeletionReconcilerMockRecorder) ReconcileVirtualServiceDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualServiceDeletion", reflect.TypeOf((*MockVirtualServiceDeletionReconciler)(nil).ReconcileVirtualServiceDeletion), req)
}

// MockVirtualServiceFinalizer is a mock of VirtualServiceFinalizer interface.
type MockVirtualServiceFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceFinalizerMockRecorder
}

// MockVirtualServiceFinalizerMockRecorder is the mock recorder for MockVirtualServiceFinalizer.
type MockVirtualServiceFinalizerMockRecorder struct {
	mock *MockVirtualServiceFinalizer
}

// NewMockVirtualServiceFinalizer creates a new mock instance.
func NewMockVirtualServiceFinalizer(ctrl *gomock.Controller) *MockVirtualServiceFinalizer {
	mock := &MockVirtualServiceFinalizer{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualServiceFinalizer) EXPECT() *MockVirtualServiceFinalizerMockRecorder {
	return m.recorder
}

// FinalizeVirtualService mocks base method.
func (m *MockVirtualServiceFinalizer) FinalizeVirtualService(obj *v1.VirtualService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeVirtualService", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeVirtualService indicates an expected call of FinalizeVirtualService.
func (mr *MockVirtualServiceFinalizerMockRecorder) FinalizeVirtualService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeVirtualService", reflect.TypeOf((*MockVirtualServiceFinalizer)(nil).FinalizeVirtualService), obj)
}

// ReconcileVirtualService mocks base method.
func (m *MockVirtualServiceFinalizer) ReconcileVirtualService(obj *v1.VirtualService) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualService", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualService indicates an expected call of ReconcileVirtualService.
func (mr *MockVirtualServiceFinalizerMockRecorder) ReconcileVirtualService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualService", reflect.TypeOf((*MockVirtualServiceFinalizer)(nil).ReconcileVirtualService), obj)
}

// VirtualServiceFinalizerName mocks base method.
func (m *MockVirtualServiceFinalizer) VirtualServiceFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualServiceFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// VirtualServiceFinalizerName indicates an expected call of VirtualServiceFinalizerName.
func (mr *MockVirtualServiceFinalizerMockRecorder) VirtualServiceFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualServiceFinalizerName", reflect.TypeOf((*MockVirtualServiceFinalizer)(nil).VirtualServiceFinalizerName))
}

// MockVirtualServiceReconcileLoop is a mock of VirtualServiceReconcileLoop interface.
type MockVirtualServiceReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceReconcileLoopMockRecorder
}

// MockVirtualServiceReconcileLoopMockRecorder is the mock recorder for MockVirtualServiceReconcileLoop.
type MockVirtualServiceReconcileLoopMockRecorder struct {
	mock *MockVirtualServiceReconcileLoop
}

// NewMockVirtualServiceReconcileLoop creates a new mock instance.
func NewMockVirtualServiceReconcileLoop(ctrl *gomock.Controller) *MockVirtualServiceReconcileLoop {
	mock := &MockVirtualServiceReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualServiceReconcileLoop) EXPECT() *MockVirtualServiceReconcileLoopMockRecorder {
	return m.recorder
}

// RunVirtualServiceReconciler mocks base method.
func (m *MockVirtualServiceReconcileLoop) RunVirtualServiceReconciler(ctx context.Context, rec controller.VirtualServiceReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunVirtualServiceReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunVirtualServiceReconciler indicates an expected call of RunVirtualServiceReconciler.
func (mr *MockVirtualServiceReconcileLoopMockRecorder) RunVirtualServiceReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunVirtualServiceReconciler", reflect.TypeOf((*MockVirtualServiceReconcileLoop)(nil).RunVirtualServiceReconciler), varargs...)
}

// MockVirtualHostOptionReconciler is a mock of VirtualHostOptionReconciler interface.
type MockVirtualHostOptionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualHostOptionReconcilerMockRecorder
}

// MockVirtualHostOptionReconcilerMockRecorder is the mock recorder for MockVirtualHostOptionReconciler.
type MockVirtualHostOptionReconcilerMockRecorder struct {
	mock *MockVirtualHostOptionReconciler
}

// NewMockVirtualHostOptionReconciler creates a new mock instance.
func NewMockVirtualHostOptionReconciler(ctrl *gomock.Controller) *MockVirtualHostOptionReconciler {
	mock := &MockVirtualHostOptionReconciler{ctrl: ctrl}
	mock.recorder = &MockVirtualHostOptionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualHostOptionReconciler) EXPECT() *MockVirtualHostOptionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualHostOption mocks base method.
func (m *MockVirtualHostOptionReconciler) ReconcileVirtualHostOption(obj *v1.VirtualHostOption) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualHostOption", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualHostOption indicates an expected call of ReconcileVirtualHostOption.
func (mr *MockVirtualHostOptionReconcilerMockRecorder) ReconcileVirtualHostOption(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualHostOption", reflect.TypeOf((*MockVirtualHostOptionReconciler)(nil).ReconcileVirtualHostOption), obj)
}

// MockVirtualHostOptionDeletionReconciler is a mock of VirtualHostOptionDeletionReconciler interface.
type MockVirtualHostOptionDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualHostOptionDeletionReconcilerMockRecorder
}

// MockVirtualHostOptionDeletionReconcilerMockRecorder is the mock recorder for MockVirtualHostOptionDeletionReconciler.
type MockVirtualHostOptionDeletionReconcilerMockRecorder struct {
	mock *MockVirtualHostOptionDeletionReconciler
}

// NewMockVirtualHostOptionDeletionReconciler creates a new mock instance.
func NewMockVirtualHostOptionDeletionReconciler(ctrl *gomock.Controller) *MockVirtualHostOptionDeletionReconciler {
	mock := &MockVirtualHostOptionDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockVirtualHostOptionDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualHostOptionDeletionReconciler) EXPECT() *MockVirtualHostOptionDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualHostOptionDeletion mocks base method.
func (m *MockVirtualHostOptionDeletionReconciler) ReconcileVirtualHostOptionDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualHostOptionDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileVirtualHostOptionDeletion indicates an expected call of ReconcileVirtualHostOptionDeletion.
func (mr *MockVirtualHostOptionDeletionReconcilerMockRecorder) ReconcileVirtualHostOptionDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualHostOptionDeletion", reflect.TypeOf((*MockVirtualHostOptionDeletionReconciler)(nil).ReconcileVirtualHostOptionDeletion), req)
}

// MockVirtualHostOptionFinalizer is a mock of VirtualHostOptionFinalizer interface.
type MockVirtualHostOptionFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualHostOptionFinalizerMockRecorder
}

// MockVirtualHostOptionFinalizerMockRecorder is the mock recorder for MockVirtualHostOptionFinalizer.
type MockVirtualHostOptionFinalizerMockRecorder struct {
	mock *MockVirtualHostOptionFinalizer
}

// NewMockVirtualHostOptionFinalizer creates a new mock instance.
func NewMockVirtualHostOptionFinalizer(ctrl *gomock.Controller) *MockVirtualHostOptionFinalizer {
	mock := &MockVirtualHostOptionFinalizer{ctrl: ctrl}
	mock.recorder = &MockVirtualHostOptionFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualHostOptionFinalizer) EXPECT() *MockVirtualHostOptionFinalizerMockRecorder {
	return m.recorder
}

// FinalizeVirtualHostOption mocks base method.
func (m *MockVirtualHostOptionFinalizer) FinalizeVirtualHostOption(obj *v1.VirtualHostOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeVirtualHostOption", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeVirtualHostOption indicates an expected call of FinalizeVirtualHostOption.
func (mr *MockVirtualHostOptionFinalizerMockRecorder) FinalizeVirtualHostOption(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeVirtualHostOption", reflect.TypeOf((*MockVirtualHostOptionFinalizer)(nil).FinalizeVirtualHostOption), obj)
}

// ReconcileVirtualHostOption mocks base method.
func (m *MockVirtualHostOptionFinalizer) ReconcileVirtualHostOption(obj *v1.VirtualHostOption) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualHostOption", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualHostOption indicates an expected call of ReconcileVirtualHostOption.
func (mr *MockVirtualHostOptionFinalizerMockRecorder) ReconcileVirtualHostOption(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualHostOption", reflect.TypeOf((*MockVirtualHostOptionFinalizer)(nil).ReconcileVirtualHostOption), obj)
}

// VirtualHostOptionFinalizerName mocks base method.
func (m *MockVirtualHostOptionFinalizer) VirtualHostOptionFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualHostOptionFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// VirtualHostOptionFinalizerName indicates an expected call of VirtualHostOptionFinalizerName.
func (mr *MockVirtualHostOptionFinalizerMockRecorder) VirtualHostOptionFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualHostOptionFinalizerName", reflect.TypeOf((*MockVirtualHostOptionFinalizer)(nil).VirtualHostOptionFinalizerName))
}

// MockVirtualHostOptionReconcileLoop is a mock of VirtualHostOptionReconcileLoop interface.
type MockVirtualHostOptionReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualHostOptionReconcileLoopMockRecorder
}

// MockVirtualHostOptionReconcileLoopMockRecorder is the mock recorder for MockVirtualHostOptionReconcileLoop.
type MockVirtualHostOptionReconcileLoopMockRecorder struct {
	mock *MockVirtualHostOptionReconcileLoop
}

// NewMockVirtualHostOptionReconcileLoop creates a new mock instance.
func NewMockVirtualHostOptionReconcileLoop(ctrl *gomock.Controller) *MockVirtualHostOptionReconcileLoop {
	mock := &MockVirtualHostOptionReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockVirtualHostOptionReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualHostOptionReconcileLoop) EXPECT() *MockVirtualHostOptionReconcileLoopMockRecorder {
	return m.recorder
}

// RunVirtualHostOptionReconciler mocks base method.
func (m *MockVirtualHostOptionReconcileLoop) RunVirtualHostOptionReconciler(ctx context.Context, rec controller.VirtualHostOptionReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunVirtualHostOptionReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunVirtualHostOptionReconciler indicates an expected call of RunVirtualHostOptionReconciler.
func (mr *MockVirtualHostOptionReconcileLoopMockRecorder) RunVirtualHostOptionReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunVirtualHostOptionReconciler", reflect.TypeOf((*MockVirtualHostOptionReconcileLoop)(nil).RunVirtualHostOptionReconciler), varargs...)
}

// MockRouteOptionReconciler is a mock of RouteOptionReconciler interface.
type MockRouteOptionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockRouteOptionReconcilerMockRecorder
}

// MockRouteOptionReconcilerMockRecorder is the mock recorder for MockRouteOptionReconciler.
type MockRouteOptionReconcilerMockRecorder struct {
	mock *MockRouteOptionReconciler
}

// NewMockRouteOptionReconciler creates a new mock instance.
func NewMockRouteOptionReconciler(ctrl *gomock.Controller) *MockRouteOptionReconciler {
	mock := &MockRouteOptionReconciler{ctrl: ctrl}
	mock.recorder = &MockRouteOptionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteOptionReconciler) EXPECT() *MockRouteOptionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRouteOption mocks base method.
func (m *MockRouteOptionReconciler) ReconcileRouteOption(obj *v1.RouteOption) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRouteOption", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRouteOption indicates an expected call of ReconcileRouteOption.
func (mr *MockRouteOptionReconcilerMockRecorder) ReconcileRouteOption(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRouteOption", reflect.TypeOf((*MockRouteOptionReconciler)(nil).ReconcileRouteOption), obj)
}

// MockRouteOptionDeletionReconciler is a mock of RouteOptionDeletionReconciler interface.
type MockRouteOptionDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockRouteOptionDeletionReconcilerMockRecorder
}

// MockRouteOptionDeletionReconcilerMockRecorder is the mock recorder for MockRouteOptionDeletionReconciler.
type MockRouteOptionDeletionReconcilerMockRecorder struct {
	mock *MockRouteOptionDeletionReconciler
}

// NewMockRouteOptionDeletionReconciler creates a new mock instance.
func NewMockRouteOptionDeletionReconciler(ctrl *gomock.Controller) *MockRouteOptionDeletionReconciler {
	mock := &MockRouteOptionDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockRouteOptionDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteOptionDeletionReconciler) EXPECT() *MockRouteOptionDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRouteOptionDeletion mocks base method.
func (m *MockRouteOptionDeletionReconciler) ReconcileRouteOptionDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRouteOptionDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileRouteOptionDeletion indicates an expected call of ReconcileRouteOptionDeletion.
func (mr *MockRouteOptionDeletionReconcilerMockRecorder) ReconcileRouteOptionDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRouteOptionDeletion", reflect.TypeOf((*MockRouteOptionDeletionReconciler)(nil).ReconcileRouteOptionDeletion), req)
}

// MockRouteOptionFinalizer is a mock of RouteOptionFinalizer interface.
type MockRouteOptionFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockRouteOptionFinalizerMockRecorder
}

// MockRouteOptionFinalizerMockRecorder is the mock recorder for MockRouteOptionFinalizer.
type MockRouteOptionFinalizerMockRecorder struct {
	mock *MockRouteOptionFinalizer
}

// NewMockRouteOptionFinalizer creates a new mock instance.
func NewMockRouteOptionFinalizer(ctrl *gomock.Controller) *MockRouteOptionFinalizer {
	mock := &MockRouteOptionFinalizer{ctrl: ctrl}
	mock.recorder = &MockRouteOptionFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteOptionFinalizer) EXPECT() *MockRouteOptionFinalizerMockRecorder {
	return m.recorder
}

// FinalizeRouteOption mocks base method.
func (m *MockRouteOptionFinalizer) FinalizeRouteOption(obj *v1.RouteOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeRouteOption", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeRouteOption indicates an expected call of FinalizeRouteOption.
func (mr *MockRouteOptionFinalizerMockRecorder) FinalizeRouteOption(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeRouteOption", reflect.TypeOf((*MockRouteOptionFinalizer)(nil).FinalizeRouteOption), obj)
}

// ReconcileRouteOption mocks base method.
func (m *MockRouteOptionFinalizer) ReconcileRouteOption(obj *v1.RouteOption) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRouteOption", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRouteOption indicates an expected call of ReconcileRouteOption.
func (mr *MockRouteOptionFinalizerMockRecorder) ReconcileRouteOption(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRouteOption", reflect.TypeOf((*MockRouteOptionFinalizer)(nil).ReconcileRouteOption), obj)
}

// RouteOptionFinalizerName mocks base method.
func (m *MockRouteOptionFinalizer) RouteOptionFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteOptionFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// RouteOptionFinalizerName indicates an expected call of RouteOptionFinalizerName.
func (mr *MockRouteOptionFinalizerMockRecorder) RouteOptionFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteOptionFinalizerName", reflect.TypeOf((*MockRouteOptionFinalizer)(nil).RouteOptionFinalizerName))
}

// MockRouteOptionReconcileLoop is a mock of RouteOptionReconcileLoop interface.
type MockRouteOptionReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockRouteOptionReconcileLoopMockRecorder
}

// MockRouteOptionReconcileLoopMockRecorder is the mock recorder for MockRouteOptionReconcileLoop.
type MockRouteOptionReconcileLoopMockRecorder struct {
	mock *MockRouteOptionReconcileLoop
}

// NewMockRouteOptionReconcileLoop creates a new mock instance.
func NewMockRouteOptionReconcileLoop(ctrl *gomock.Controller) *MockRouteOptionReconcileLoop {
	mock := &MockRouteOptionReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockRouteOptionReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteOptionReconcileLoop) EXPECT() *MockRouteOptionReconcileLoopMockRecorder {
	return m.recorder
}

// RunRouteOptionReconciler mocks base method.
func (m *MockRouteOptionReconcileLoop) RunRouteOptionReconciler(ctx context.Context, rec controller.RouteOptionReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunRouteOptionReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunRouteOptionReconciler indicates an expected call of RunRouteOptionReconciler.
func (mr *MockRouteOptionReconcileLoopMockRecorder) RunRouteOptionReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunRouteOptionReconciler", reflect.TypeOf((*MockRouteOptionReconcileLoop)(nil).RunRouteOptionReconciler), varargs...)
}
