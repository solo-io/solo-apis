// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gateway/v1/external_options.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_golang_protobuf_ptypes_struct "github.com/golang/protobuf/ptypes/struct"

	github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"

	github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_v1 "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *VirtualHostOptionSpec) Clone() proto.Message {
	var target *VirtualHostOptionSpec
	if m == nil {
		return target
	}
	target = &VirtualHostOptionSpec{}

	if h, ok := interface{}(m.GetOptions()).(clone.Cloner); ok {
		target.Options = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_v1.VirtualHostOptions)
	} else {
		target.Options = proto.Clone(m.GetOptions()).(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_v1.VirtualHostOptions)
	}

	if h, ok := interface{}(m.GetTargetRef()).(clone.Cloner); ok {
		target.TargetRef = h.Clone().(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.PolicyTargetReferenceWithSectionName)
	} else {
		target.TargetRef = proto.Clone(m.GetTargetRef()).(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.PolicyTargetReferenceWithSectionName)
	}

	return target
}

// Clone function
func (m *RouteOptionSpec) Clone() proto.Message {
	var target *RouteOptionSpec
	if m == nil {
		return target
	}
	target = &RouteOptionSpec{}

	if h, ok := interface{}(m.GetOptions()).(clone.Cloner); ok {
		target.Options = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_v1.RouteOptions)
	} else {
		target.Options = proto.Clone(m.GetOptions()).(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_v1.RouteOptions)
	}

	if h, ok := interface{}(m.GetTargetRef()).(clone.Cloner); ok {
		target.TargetRef = h.Clone().(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.PolicyTargetReference)
	} else {
		target.TargetRef = proto.Clone(m.GetTargetRef()).(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.PolicyTargetReference)
	}

	return target
}

// Clone function
func (m *ListenerOption) Clone() proto.Message {
	var target *ListenerOption
	if m == nil {
		return target
	}
	target = &ListenerOption{}

	if h, ok := interface{}(m.GetOptions()).(clone.Cloner); ok {
		target.Options = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_v1.ListenerOptions)
	} else {
		target.Options = proto.Clone(m.GetOptions()).(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_v1.ListenerOptions)
	}

	if m.GetTargetRefs() != nil {
		target.TargetRefs = make([]*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.PolicyTargetReferenceWithSectionName, len(m.GetTargetRefs()))
		for idx, v := range m.GetTargetRefs() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.TargetRefs[idx] = h.Clone().(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.PolicyTargetReferenceWithSectionName)
			} else {
				target.TargetRefs[idx] = proto.Clone(v).(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.PolicyTargetReferenceWithSectionName)
			}

		}
	}

	return target
}

// Clone function
func (m *HttpListenerOption) Clone() proto.Message {
	var target *HttpListenerOption
	if m == nil {
		return target
	}
	target = &HttpListenerOption{}

	if h, ok := interface{}(m.GetOptions()).(clone.Cloner); ok {
		target.Options = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_v1.HttpListenerOptions)
	} else {
		target.Options = proto.Clone(m.GetOptions()).(*github_com_solo_io_solo_apis_pkg_api_gloo_solo_io_v1.HttpListenerOptions)
	}

	if m.GetTargetRefs() != nil {
		target.TargetRefs = make([]*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.PolicyTargetReferenceWithSectionName, len(m.GetTargetRefs()))
		for idx, v := range m.GetTargetRefs() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.TargetRefs[idx] = h.Clone().(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.PolicyTargetReferenceWithSectionName)
			} else {
				target.TargetRefs[idx] = proto.Clone(v).(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.PolicyTargetReferenceWithSectionName)
			}

		}
	}

	return target
}

// Clone function
func (m *VirtualHostOptionStatus) Clone() proto.Message {
	var target *VirtualHostOptionStatus
	if m == nil {
		return target
	}
	target = &VirtualHostOptionStatus{}

	target.State = m.GetState()

	target.Reason = m.GetReason()

	target.ReportedBy = m.GetReportedBy()

	if m.GetSubresourceStatuses() != nil {
		target.SubresourceStatuses = make(map[string]*VirtualHostOptionStatus, len(m.GetSubresourceStatuses()))
		for k, v := range m.GetSubresourceStatuses() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SubresourceStatuses[k] = h.Clone().(*VirtualHostOptionStatus)
			} else {
				target.SubresourceStatuses[k] = proto.Clone(v).(*VirtualHostOptionStatus)
			}

		}
	}

	if h, ok := interface{}(m.GetDetails()).(clone.Cloner); ok {
		target.Details = h.Clone().(*github_com_golang_protobuf_ptypes_struct.Struct)
	} else {
		target.Details = proto.Clone(m.GetDetails()).(*github_com_golang_protobuf_ptypes_struct.Struct)
	}

	return target
}

// Clone function
func (m *VirtualHostOptionNamespacedStatuses) Clone() proto.Message {
	var target *VirtualHostOptionNamespacedStatuses
	if m == nil {
		return target
	}
	target = &VirtualHostOptionNamespacedStatuses{}

	if m.GetStatuses() != nil {
		target.Statuses = make(map[string]*VirtualHostOptionStatus, len(m.GetStatuses()))
		for k, v := range m.GetStatuses() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Statuses[k] = h.Clone().(*VirtualHostOptionStatus)
			} else {
				target.Statuses[k] = proto.Clone(v).(*VirtualHostOptionStatus)
			}

		}
	}

	return target
}

// Clone function
func (m *RouteOptionStatus) Clone() proto.Message {
	var target *RouteOptionStatus
	if m == nil {
		return target
	}
	target = &RouteOptionStatus{}

	target.State = m.GetState()

	target.Reason = m.GetReason()

	target.ReportedBy = m.GetReportedBy()

	if m.GetSubresourceStatuses() != nil {
		target.SubresourceStatuses = make(map[string]*RouteOptionStatus, len(m.GetSubresourceStatuses()))
		for k, v := range m.GetSubresourceStatuses() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SubresourceStatuses[k] = h.Clone().(*RouteOptionStatus)
			} else {
				target.SubresourceStatuses[k] = proto.Clone(v).(*RouteOptionStatus)
			}

		}
	}

	if h, ok := interface{}(m.GetDetails()).(clone.Cloner); ok {
		target.Details = h.Clone().(*github_com_golang_protobuf_ptypes_struct.Struct)
	} else {
		target.Details = proto.Clone(m.GetDetails()).(*github_com_golang_protobuf_ptypes_struct.Struct)
	}

	return target
}

// Clone function
func (m *RouteOptionNamespacedStatuses) Clone() proto.Message {
	var target *RouteOptionNamespacedStatuses
	if m == nil {
		return target
	}
	target = &RouteOptionNamespacedStatuses{}

	if m.GetStatuses() != nil {
		target.Statuses = make(map[string]*RouteOptionStatus, len(m.GetStatuses()))
		for k, v := range m.GetStatuses() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Statuses[k] = h.Clone().(*RouteOptionStatus)
			} else {
				target.Statuses[k] = proto.Clone(v).(*RouteOptionStatus)
			}

		}
	}

	return target
}
