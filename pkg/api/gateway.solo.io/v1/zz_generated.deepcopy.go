// Code generated by skv2. DO NOT EDIT.

// This file contains generated Deepcopy methods for gateway.solo.io/v1 resources

package v1

import (
    runtime "k8s.io/apimachinery/pkg/runtime"
)

// Generated Deepcopy methods for Gateway

func (in *Gateway) DeepCopyInto(out *Gateway) {
    out.TypeMeta = in.TypeMeta
    in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)

    // deepcopy spec
    in.Spec.DeepCopyInto(&out.Spec)
    // deepcopy status
    in.Status.DeepCopyInto(&out.Status)

    return
}

func (in *Gateway) DeepCopy() *Gateway {
    if in == nil {
        return nil
    }
    out := new(Gateway)
    in.DeepCopyInto(out)
    return out
}

func (in *Gateway) DeepCopyObject() runtime.Object {
    if c := in.DeepCopy(); c != nil {
        return c
    }
    return nil
}

func (in *GatewayList) DeepCopyInto(out *GatewayList) {
    *out = *in
    out.TypeMeta = in.TypeMeta
    in.ListMeta.DeepCopyInto(&out.ListMeta)
    if in.Items != nil {
        in, out := &in.Items, &out.Items
        *out = make([]Gateway, len(*in))
        for i := range *in {
            (*in)[i].DeepCopyInto(&(*out)[i])
        }
    }
    return
}

func (in *GatewayList) DeepCopy() *GatewayList {
    if in == nil {
        return nil
    }
    out := new(GatewayList)
    in.DeepCopyInto(out)
    return out
}

func (in *GatewayList) DeepCopyObject() runtime.Object {
    if c := in.DeepCopy(); c != nil {
        return c
    }
    return nil
}

// Generated Deepcopy methods for RouteTable

func (in *RouteTable) DeepCopyInto(out *RouteTable) {
    out.TypeMeta = in.TypeMeta
    in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)

    // deepcopy spec
    in.Spec.DeepCopyInto(&out.Spec)
    // deepcopy status
    in.Status.DeepCopyInto(&out.Status)

    return
}

func (in *RouteTable) DeepCopy() *RouteTable {
    if in == nil {
        return nil
    }
    out := new(RouteTable)
    in.DeepCopyInto(out)
    return out
}

func (in *RouteTable) DeepCopyObject() runtime.Object {
    if c := in.DeepCopy(); c != nil {
        return c
    }
    return nil
}

func (in *RouteTableList) DeepCopyInto(out *RouteTableList) {
    *out = *in
    out.TypeMeta = in.TypeMeta
    in.ListMeta.DeepCopyInto(&out.ListMeta)
    if in.Items != nil {
        in, out := &in.Items, &out.Items
        *out = make([]RouteTable, len(*in))
        for i := range *in {
            (*in)[i].DeepCopyInto(&(*out)[i])
        }
    }
    return
}

func (in *RouteTableList) DeepCopy() *RouteTableList {
    if in == nil {
        return nil
    }
    out := new(RouteTableList)
    in.DeepCopyInto(out)
    return out
}

func (in *RouteTableList) DeepCopyObject() runtime.Object {
    if c := in.DeepCopy(); c != nil {
        return c
    }
    return nil
}

// Generated Deepcopy methods for VirtualService

func (in *VirtualService) DeepCopyInto(out *VirtualService) {
    out.TypeMeta = in.TypeMeta
    in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)

    // deepcopy spec
    in.Spec.DeepCopyInto(&out.Spec)
    // deepcopy status
    in.Status.DeepCopyInto(&out.Status)

    return
}

func (in *VirtualService) DeepCopy() *VirtualService {
    if in == nil {
        return nil
    }
    out := new(VirtualService)
    in.DeepCopyInto(out)
    return out
}

func (in *VirtualService) DeepCopyObject() runtime.Object {
    if c := in.DeepCopy(); c != nil {
        return c
    }
    return nil
}

func (in *VirtualServiceList) DeepCopyInto(out *VirtualServiceList) {
    *out = *in
    out.TypeMeta = in.TypeMeta
    in.ListMeta.DeepCopyInto(&out.ListMeta)
    if in.Items != nil {
        in, out := &in.Items, &out.Items
        *out = make([]VirtualService, len(*in))
        for i := range *in {
            (*in)[i].DeepCopyInto(&(*out)[i])
        }
    }
    return
}

func (in *VirtualServiceList) DeepCopy() *VirtualServiceList {
    if in == nil {
        return nil
    }
    out := new(VirtualServiceList)
    in.DeepCopyInto(out)
    return out
}

func (in *VirtualServiceList) DeepCopyObject() runtime.Object {
    if c := in.DeepCopy(); c != nil {
        return c
    }
    return nil
}

// Generated Deepcopy methods for VirtualHostOption

func (in *VirtualHostOption) DeepCopyInto(out *VirtualHostOption) {
    out.TypeMeta = in.TypeMeta
    in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)

    // deepcopy spec
    in.Spec.DeepCopyInto(&out.Spec)
    // deepcopy status
    in.Status.DeepCopyInto(&out.Status)

    return
}

func (in *VirtualHostOption) DeepCopy() *VirtualHostOption {
    if in == nil {
        return nil
    }
    out := new(VirtualHostOption)
    in.DeepCopyInto(out)
    return out
}

func (in *VirtualHostOption) DeepCopyObject() runtime.Object {
    if c := in.DeepCopy(); c != nil {
        return c
    }
    return nil
}

func (in *VirtualHostOptionList) DeepCopyInto(out *VirtualHostOptionList) {
    *out = *in
    out.TypeMeta = in.TypeMeta
    in.ListMeta.DeepCopyInto(&out.ListMeta)
    if in.Items != nil {
        in, out := &in.Items, &out.Items
        *out = make([]VirtualHostOption, len(*in))
        for i := range *in {
            (*in)[i].DeepCopyInto(&(*out)[i])
        }
    }
    return
}

func (in *VirtualHostOptionList) DeepCopy() *VirtualHostOptionList {
    if in == nil {
        return nil
    }
    out := new(VirtualHostOptionList)
    in.DeepCopyInto(out)
    return out
}

func (in *VirtualHostOptionList) DeepCopyObject() runtime.Object {
    if c := in.DeepCopy(); c != nil {
        return c
    }
    return nil
}

// Generated Deepcopy methods for RouteOption

func (in *RouteOption) DeepCopyInto(out *RouteOption) {
    out.TypeMeta = in.TypeMeta
    in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)

    // deepcopy spec
    in.Spec.DeepCopyInto(&out.Spec)
    // deepcopy status
    in.Status.DeepCopyInto(&out.Status)

    return
}

func (in *RouteOption) DeepCopy() *RouteOption {
    if in == nil {
        return nil
    }
    out := new(RouteOption)
    in.DeepCopyInto(out)
    return out
}

func (in *RouteOption) DeepCopyObject() runtime.Object {
    if c := in.DeepCopy(); c != nil {
        return c
    }
    return nil
}

func (in *RouteOptionList) DeepCopyInto(out *RouteOptionList) {
    *out = *in
    out.TypeMeta = in.TypeMeta
    in.ListMeta.DeepCopyInto(&out.ListMeta)
    if in.Items != nil {
        in, out := &in.Items, &out.Items
        *out = make([]RouteOption, len(*in))
        for i := range *in {
            (*in)[i].DeepCopyInto(&(*out)[i])
        }
    }
    return
}

func (in *RouteOptionList) DeepCopy() *RouteOptionList {
    if in == nil {
        return nil
    }
    out := new(RouteOptionList)
    in.DeepCopyInto(out)
    return out
}

func (in *RouteOptionList) DeepCopyObject() runtime.Object {
    if c := in.DeepCopy(); c != nil {
        return c
    }
    return nil
}

