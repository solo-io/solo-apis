// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/solo-apis/pkg/api/gateway.solo.io/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterClientset) Cluster(cluster string) (v1.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// Gateways mocks base method
func (m *MockClientset) Gateways() v1.GatewayClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gateways")
	ret0, _ := ret[0].(v1.GatewayClient)
	return ret0
}

// Gateways indicates an expected call of Gateways
func (mr *MockClientsetMockRecorder) Gateways() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gateways", reflect.TypeOf((*MockClientset)(nil).Gateways))
}

// MatchableHttpGateways mocks base method
func (m *MockClientset) MatchableHttpGateways() v1.MatchableHttpGatewayClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchableHttpGateways")
	ret0, _ := ret[0].(v1.MatchableHttpGatewayClient)
	return ret0
}

// MatchableHttpGateways indicates an expected call of MatchableHttpGateways
func (mr *MockClientsetMockRecorder) MatchableHttpGateways() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchableHttpGateways", reflect.TypeOf((*MockClientset)(nil).MatchableHttpGateways))
}

// MatchableTcpGateways mocks base method
func (m *MockClientset) MatchableTcpGateways() v1.MatchableTcpGatewayClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchableTcpGateways")
	ret0, _ := ret[0].(v1.MatchableTcpGatewayClient)
	return ret0
}

// MatchableTcpGateways indicates an expected call of MatchableTcpGateways
func (mr *MockClientsetMockRecorder) MatchableTcpGateways() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchableTcpGateways", reflect.TypeOf((*MockClientset)(nil).MatchableTcpGateways))
}

// RouteTables mocks base method
func (m *MockClientset) RouteTables() v1.RouteTableClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteTables")
	ret0, _ := ret[0].(v1.RouteTableClient)
	return ret0
}

// RouteTables indicates an expected call of RouteTables
func (mr *MockClientsetMockRecorder) RouteTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteTables", reflect.TypeOf((*MockClientset)(nil).RouteTables))
}

// VirtualServices mocks base method
func (m *MockClientset) VirtualServices() v1.VirtualServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualServices")
	ret0, _ := ret[0].(v1.VirtualServiceClient)
	return ret0
}

// VirtualServices indicates an expected call of VirtualServices
func (mr *MockClientsetMockRecorder) VirtualServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualServices", reflect.TypeOf((*MockClientset)(nil).VirtualServices))
}

// VirtualHostOptions mocks base method
func (m *MockClientset) VirtualHostOptions() v1.VirtualHostOptionClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualHostOptions")
	ret0, _ := ret[0].(v1.VirtualHostOptionClient)
	return ret0
}

// VirtualHostOptions indicates an expected call of VirtualHostOptions
func (mr *MockClientsetMockRecorder) VirtualHostOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualHostOptions", reflect.TypeOf((*MockClientset)(nil).VirtualHostOptions))
}

// RouteOptions mocks base method
func (m *MockClientset) RouteOptions() v1.RouteOptionClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteOptions")
	ret0, _ := ret[0].(v1.RouteOptionClient)
	return ret0
}

// RouteOptions indicates an expected call of RouteOptions
func (mr *MockClientsetMockRecorder) RouteOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteOptions", reflect.TypeOf((*MockClientset)(nil).RouteOptions))
}

// MockGatewayReader is a mock of GatewayReader interface
type MockGatewayReader struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayReaderMockRecorder
}

// MockGatewayReaderMockRecorder is the mock recorder for MockGatewayReader
type MockGatewayReaderMockRecorder struct {
	mock *MockGatewayReader
}

// NewMockGatewayReader creates a new mock instance
func NewMockGatewayReader(ctrl *gomock.Controller) *MockGatewayReader {
	mock := &MockGatewayReader{ctrl: ctrl}
	mock.recorder = &MockGatewayReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGatewayReader) EXPECT() *MockGatewayReaderMockRecorder {
	return m.recorder
}

// GetGateway mocks base method
func (m *MockGatewayReader) GetGateway(ctx context.Context, key client.ObjectKey) (*v1.Gateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGateway", ctx, key)
	ret0, _ := ret[0].(*v1.Gateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGateway indicates an expected call of GetGateway
func (mr *MockGatewayReaderMockRecorder) GetGateway(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGateway", reflect.TypeOf((*MockGatewayReader)(nil).GetGateway), ctx, key)
}

// ListGateway mocks base method
func (m *MockGatewayReader) ListGateway(ctx context.Context, opts ...client.ListOption) (*v1.GatewayList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGateway", varargs...)
	ret0, _ := ret[0].(*v1.GatewayList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGateway indicates an expected call of ListGateway
func (mr *MockGatewayReaderMockRecorder) ListGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGateway", reflect.TypeOf((*MockGatewayReader)(nil).ListGateway), varargs...)
}

// MockGatewayWriter is a mock of GatewayWriter interface
type MockGatewayWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayWriterMockRecorder
}

// MockGatewayWriterMockRecorder is the mock recorder for MockGatewayWriter
type MockGatewayWriterMockRecorder struct {
	mock *MockGatewayWriter
}

// NewMockGatewayWriter creates a new mock instance
func NewMockGatewayWriter(ctrl *gomock.Controller) *MockGatewayWriter {
	mock := &MockGatewayWriter{ctrl: ctrl}
	mock.recorder = &MockGatewayWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGatewayWriter) EXPECT() *MockGatewayWriterMockRecorder {
	return m.recorder
}

// CreateGateway mocks base method
func (m *MockGatewayWriter) CreateGateway(ctx context.Context, obj *v1.Gateway, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGateway indicates an expected call of CreateGateway
func (mr *MockGatewayWriterMockRecorder) CreateGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGateway", reflect.TypeOf((*MockGatewayWriter)(nil).CreateGateway), varargs...)
}

// DeleteGateway mocks base method
func (m *MockGatewayWriter) DeleteGateway(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGateway indicates an expected call of DeleteGateway
func (mr *MockGatewayWriterMockRecorder) DeleteGateway(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGateway", reflect.TypeOf((*MockGatewayWriter)(nil).DeleteGateway), varargs...)
}

// UpdateGateway mocks base method
func (m *MockGatewayWriter) UpdateGateway(ctx context.Context, obj *v1.Gateway, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGateway indicates an expected call of UpdateGateway
func (mr *MockGatewayWriterMockRecorder) UpdateGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGateway", reflect.TypeOf((*MockGatewayWriter)(nil).UpdateGateway), varargs...)
}

// PatchGateway mocks base method
func (m *MockGatewayWriter) PatchGateway(ctx context.Context, obj *v1.Gateway, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGateway indicates an expected call of PatchGateway
func (mr *MockGatewayWriterMockRecorder) PatchGateway(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGateway", reflect.TypeOf((*MockGatewayWriter)(nil).PatchGateway), varargs...)
}

// DeleteAllOfGateway mocks base method
func (m *MockGatewayWriter) DeleteAllOfGateway(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfGateway indicates an expected call of DeleteAllOfGateway
func (mr *MockGatewayWriterMockRecorder) DeleteAllOfGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfGateway", reflect.TypeOf((*MockGatewayWriter)(nil).DeleteAllOfGateway), varargs...)
}

// UpsertGateway mocks base method
func (m *MockGatewayWriter) UpsertGateway(ctx context.Context, obj *v1.Gateway, transitionFuncs ...v1.GatewayTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertGateway indicates an expected call of UpsertGateway
func (mr *MockGatewayWriterMockRecorder) UpsertGateway(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGateway", reflect.TypeOf((*MockGatewayWriter)(nil).UpsertGateway), varargs...)
}

// MockGatewayStatusWriter is a mock of GatewayStatusWriter interface
type MockGatewayStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayStatusWriterMockRecorder
}

// MockGatewayStatusWriterMockRecorder is the mock recorder for MockGatewayStatusWriter
type MockGatewayStatusWriterMockRecorder struct {
	mock *MockGatewayStatusWriter
}

// NewMockGatewayStatusWriter creates a new mock instance
func NewMockGatewayStatusWriter(ctrl *gomock.Controller) *MockGatewayStatusWriter {
	mock := &MockGatewayStatusWriter{ctrl: ctrl}
	mock.recorder = &MockGatewayStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGatewayStatusWriter) EXPECT() *MockGatewayStatusWriterMockRecorder {
	return m.recorder
}

// UpdateGatewayStatus mocks base method
func (m *MockGatewayStatusWriter) UpdateGatewayStatus(ctx context.Context, obj *v1.Gateway, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGatewayStatus indicates an expected call of UpdateGatewayStatus
func (mr *MockGatewayStatusWriterMockRecorder) UpdateGatewayStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGatewayStatus", reflect.TypeOf((*MockGatewayStatusWriter)(nil).UpdateGatewayStatus), varargs...)
}

// PatchGatewayStatus mocks base method
func (m *MockGatewayStatusWriter) PatchGatewayStatus(ctx context.Context, obj *v1.Gateway, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGatewayStatus indicates an expected call of PatchGatewayStatus
func (mr *MockGatewayStatusWriterMockRecorder) PatchGatewayStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGatewayStatus", reflect.TypeOf((*MockGatewayStatusWriter)(nil).PatchGatewayStatus), varargs...)
}

// MockGatewayClient is a mock of GatewayClient interface
type MockGatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayClientMockRecorder
}

// MockGatewayClientMockRecorder is the mock recorder for MockGatewayClient
type MockGatewayClientMockRecorder struct {
	mock *MockGatewayClient
}

// NewMockGatewayClient creates a new mock instance
func NewMockGatewayClient(ctrl *gomock.Controller) *MockGatewayClient {
	mock := &MockGatewayClient{ctrl: ctrl}
	mock.recorder = &MockGatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGatewayClient) EXPECT() *MockGatewayClientMockRecorder {
	return m.recorder
}

// GetGateway mocks base method
func (m *MockGatewayClient) GetGateway(ctx context.Context, key client.ObjectKey) (*v1.Gateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGateway", ctx, key)
	ret0, _ := ret[0].(*v1.Gateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGateway indicates an expected call of GetGateway
func (mr *MockGatewayClientMockRecorder) GetGateway(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGateway", reflect.TypeOf((*MockGatewayClient)(nil).GetGateway), ctx, key)
}

// ListGateway mocks base method
func (m *MockGatewayClient) ListGateway(ctx context.Context, opts ...client.ListOption) (*v1.GatewayList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGateway", varargs...)
	ret0, _ := ret[0].(*v1.GatewayList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGateway indicates an expected call of ListGateway
func (mr *MockGatewayClientMockRecorder) ListGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGateway", reflect.TypeOf((*MockGatewayClient)(nil).ListGateway), varargs...)
}

// CreateGateway mocks base method
func (m *MockGatewayClient) CreateGateway(ctx context.Context, obj *v1.Gateway, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGateway indicates an expected call of CreateGateway
func (mr *MockGatewayClientMockRecorder) CreateGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGateway", reflect.TypeOf((*MockGatewayClient)(nil).CreateGateway), varargs...)
}

// DeleteGateway mocks base method
func (m *MockGatewayClient) DeleteGateway(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGateway indicates an expected call of DeleteGateway
func (mr *MockGatewayClientMockRecorder) DeleteGateway(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGateway", reflect.TypeOf((*MockGatewayClient)(nil).DeleteGateway), varargs...)
}

// UpdateGateway mocks base method
func (m *MockGatewayClient) UpdateGateway(ctx context.Context, obj *v1.Gateway, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGateway indicates an expected call of UpdateGateway
func (mr *MockGatewayClientMockRecorder) UpdateGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGateway", reflect.TypeOf((*MockGatewayClient)(nil).UpdateGateway), varargs...)
}

// PatchGateway mocks base method
func (m *MockGatewayClient) PatchGateway(ctx context.Context, obj *v1.Gateway, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGateway indicates an expected call of PatchGateway
func (mr *MockGatewayClientMockRecorder) PatchGateway(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGateway", reflect.TypeOf((*MockGatewayClient)(nil).PatchGateway), varargs...)
}

// DeleteAllOfGateway mocks base method
func (m *MockGatewayClient) DeleteAllOfGateway(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfGateway indicates an expected call of DeleteAllOfGateway
func (mr *MockGatewayClientMockRecorder) DeleteAllOfGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfGateway", reflect.TypeOf((*MockGatewayClient)(nil).DeleteAllOfGateway), varargs...)
}

// UpsertGateway mocks base method
func (m *MockGatewayClient) UpsertGateway(ctx context.Context, obj *v1.Gateway, transitionFuncs ...v1.GatewayTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertGateway indicates an expected call of UpsertGateway
func (mr *MockGatewayClientMockRecorder) UpsertGateway(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGateway", reflect.TypeOf((*MockGatewayClient)(nil).UpsertGateway), varargs...)
}

// UpdateGatewayStatus mocks base method
func (m *MockGatewayClient) UpdateGatewayStatus(ctx context.Context, obj *v1.Gateway, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGatewayStatus indicates an expected call of UpdateGatewayStatus
func (mr *MockGatewayClientMockRecorder) UpdateGatewayStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGatewayStatus", reflect.TypeOf((*MockGatewayClient)(nil).UpdateGatewayStatus), varargs...)
}

// PatchGatewayStatus mocks base method
func (m *MockGatewayClient) PatchGatewayStatus(ctx context.Context, obj *v1.Gateway, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGatewayStatus indicates an expected call of PatchGatewayStatus
func (mr *MockGatewayClientMockRecorder) PatchGatewayStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGatewayStatus", reflect.TypeOf((*MockGatewayClient)(nil).PatchGatewayStatus), varargs...)
}

// MockMulticlusterGatewayClient is a mock of MulticlusterGatewayClient interface
type MockMulticlusterGatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGatewayClientMockRecorder
}

// MockMulticlusterGatewayClientMockRecorder is the mock recorder for MockMulticlusterGatewayClient
type MockMulticlusterGatewayClientMockRecorder struct {
	mock *MockMulticlusterGatewayClient
}

// NewMockMulticlusterGatewayClient creates a new mock instance
func NewMockMulticlusterGatewayClient(ctrl *gomock.Controller) *MockMulticlusterGatewayClient {
	mock := &MockMulticlusterGatewayClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterGatewayClient) EXPECT() *MockMulticlusterGatewayClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterGatewayClient) Cluster(cluster string) (v1.GatewayClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1.GatewayClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterGatewayClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterGatewayClient)(nil).Cluster), cluster)
}

// MockMatchableHttpGatewayReader is a mock of MatchableHttpGatewayReader interface
type MockMatchableHttpGatewayReader struct {
	ctrl     *gomock.Controller
	recorder *MockMatchableHttpGatewayReaderMockRecorder
}

// MockMatchableHttpGatewayReaderMockRecorder is the mock recorder for MockMatchableHttpGatewayReader
type MockMatchableHttpGatewayReaderMockRecorder struct {
	mock *MockMatchableHttpGatewayReader
}

// NewMockMatchableHttpGatewayReader creates a new mock instance
func NewMockMatchableHttpGatewayReader(ctrl *gomock.Controller) *MockMatchableHttpGatewayReader {
	mock := &MockMatchableHttpGatewayReader{ctrl: ctrl}
	mock.recorder = &MockMatchableHttpGatewayReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatchableHttpGatewayReader) EXPECT() *MockMatchableHttpGatewayReaderMockRecorder {
	return m.recorder
}

// GetMatchableHttpGateway mocks base method
func (m *MockMatchableHttpGatewayReader) GetMatchableHttpGateway(ctx context.Context, key client.ObjectKey) (*v1.MatchableHttpGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchableHttpGateway", ctx, key)
	ret0, _ := ret[0].(*v1.MatchableHttpGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchableHttpGateway indicates an expected call of GetMatchableHttpGateway
func (mr *MockMatchableHttpGatewayReaderMockRecorder) GetMatchableHttpGateway(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchableHttpGateway", reflect.TypeOf((*MockMatchableHttpGatewayReader)(nil).GetMatchableHttpGateway), ctx, key)
}

// ListMatchableHttpGateway mocks base method
func (m *MockMatchableHttpGatewayReader) ListMatchableHttpGateway(ctx context.Context, opts ...client.ListOption) (*v1.MatchableHttpGatewayList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMatchableHttpGateway", varargs...)
	ret0, _ := ret[0].(*v1.MatchableHttpGatewayList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMatchableHttpGateway indicates an expected call of ListMatchableHttpGateway
func (mr *MockMatchableHttpGatewayReaderMockRecorder) ListMatchableHttpGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchableHttpGateway", reflect.TypeOf((*MockMatchableHttpGatewayReader)(nil).ListMatchableHttpGateway), varargs...)
}

// MockMatchableHttpGatewayWriter is a mock of MatchableHttpGatewayWriter interface
type MockMatchableHttpGatewayWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMatchableHttpGatewayWriterMockRecorder
}

// MockMatchableHttpGatewayWriterMockRecorder is the mock recorder for MockMatchableHttpGatewayWriter
type MockMatchableHttpGatewayWriterMockRecorder struct {
	mock *MockMatchableHttpGatewayWriter
}

// NewMockMatchableHttpGatewayWriter creates a new mock instance
func NewMockMatchableHttpGatewayWriter(ctrl *gomock.Controller) *MockMatchableHttpGatewayWriter {
	mock := &MockMatchableHttpGatewayWriter{ctrl: ctrl}
	mock.recorder = &MockMatchableHttpGatewayWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatchableHttpGatewayWriter) EXPECT() *MockMatchableHttpGatewayWriterMockRecorder {
	return m.recorder
}

// CreateMatchableHttpGateway mocks base method
func (m *MockMatchableHttpGatewayWriter) CreateMatchableHttpGateway(ctx context.Context, obj *v1.MatchableHttpGateway, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMatchableHttpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMatchableHttpGateway indicates an expected call of CreateMatchableHttpGateway
func (mr *MockMatchableHttpGatewayWriterMockRecorder) CreateMatchableHttpGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatchableHttpGateway", reflect.TypeOf((*MockMatchableHttpGatewayWriter)(nil).CreateMatchableHttpGateway), varargs...)
}

// DeleteMatchableHttpGateway mocks base method
func (m *MockMatchableHttpGatewayWriter) DeleteMatchableHttpGateway(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMatchableHttpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMatchableHttpGateway indicates an expected call of DeleteMatchableHttpGateway
func (mr *MockMatchableHttpGatewayWriterMockRecorder) DeleteMatchableHttpGateway(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMatchableHttpGateway", reflect.TypeOf((*MockMatchableHttpGatewayWriter)(nil).DeleteMatchableHttpGateway), varargs...)
}

// UpdateMatchableHttpGateway mocks base method
func (m *MockMatchableHttpGatewayWriter) UpdateMatchableHttpGateway(ctx context.Context, obj *v1.MatchableHttpGateway, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMatchableHttpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMatchableHttpGateway indicates an expected call of UpdateMatchableHttpGateway
func (mr *MockMatchableHttpGatewayWriterMockRecorder) UpdateMatchableHttpGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatchableHttpGateway", reflect.TypeOf((*MockMatchableHttpGatewayWriter)(nil).UpdateMatchableHttpGateway), varargs...)
}

// PatchMatchableHttpGateway mocks base method
func (m *MockMatchableHttpGatewayWriter) PatchMatchableHttpGateway(ctx context.Context, obj *v1.MatchableHttpGateway, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMatchableHttpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMatchableHttpGateway indicates an expected call of PatchMatchableHttpGateway
func (mr *MockMatchableHttpGatewayWriterMockRecorder) PatchMatchableHttpGateway(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMatchableHttpGateway", reflect.TypeOf((*MockMatchableHttpGatewayWriter)(nil).PatchMatchableHttpGateway), varargs...)
}

// DeleteAllOfMatchableHttpGateway mocks base method
func (m *MockMatchableHttpGatewayWriter) DeleteAllOfMatchableHttpGateway(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMatchableHttpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMatchableHttpGateway indicates an expected call of DeleteAllOfMatchableHttpGateway
func (mr *MockMatchableHttpGatewayWriterMockRecorder) DeleteAllOfMatchableHttpGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMatchableHttpGateway", reflect.TypeOf((*MockMatchableHttpGatewayWriter)(nil).DeleteAllOfMatchableHttpGateway), varargs...)
}

// UpsertMatchableHttpGateway mocks base method
func (m *MockMatchableHttpGatewayWriter) UpsertMatchableHttpGateway(ctx context.Context, obj *v1.MatchableHttpGateway, transitionFuncs ...v1.MatchableHttpGatewayTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMatchableHttpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMatchableHttpGateway indicates an expected call of UpsertMatchableHttpGateway
func (mr *MockMatchableHttpGatewayWriterMockRecorder) UpsertMatchableHttpGateway(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMatchableHttpGateway", reflect.TypeOf((*MockMatchableHttpGatewayWriter)(nil).UpsertMatchableHttpGateway), varargs...)
}

// MockMatchableHttpGatewayStatusWriter is a mock of MatchableHttpGatewayStatusWriter interface
type MockMatchableHttpGatewayStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMatchableHttpGatewayStatusWriterMockRecorder
}

// MockMatchableHttpGatewayStatusWriterMockRecorder is the mock recorder for MockMatchableHttpGatewayStatusWriter
type MockMatchableHttpGatewayStatusWriterMockRecorder struct {
	mock *MockMatchableHttpGatewayStatusWriter
}

// NewMockMatchableHttpGatewayStatusWriter creates a new mock instance
func NewMockMatchableHttpGatewayStatusWriter(ctrl *gomock.Controller) *MockMatchableHttpGatewayStatusWriter {
	mock := &MockMatchableHttpGatewayStatusWriter{ctrl: ctrl}
	mock.recorder = &MockMatchableHttpGatewayStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatchableHttpGatewayStatusWriter) EXPECT() *MockMatchableHttpGatewayStatusWriterMockRecorder {
	return m.recorder
}

// UpdateMatchableHttpGatewayStatus mocks base method
func (m *MockMatchableHttpGatewayStatusWriter) UpdateMatchableHttpGatewayStatus(ctx context.Context, obj *v1.MatchableHttpGateway, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMatchableHttpGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMatchableHttpGatewayStatus indicates an expected call of UpdateMatchableHttpGatewayStatus
func (mr *MockMatchableHttpGatewayStatusWriterMockRecorder) UpdateMatchableHttpGatewayStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatchableHttpGatewayStatus", reflect.TypeOf((*MockMatchableHttpGatewayStatusWriter)(nil).UpdateMatchableHttpGatewayStatus), varargs...)
}

// PatchMatchableHttpGatewayStatus mocks base method
func (m *MockMatchableHttpGatewayStatusWriter) PatchMatchableHttpGatewayStatus(ctx context.Context, obj *v1.MatchableHttpGateway, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMatchableHttpGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMatchableHttpGatewayStatus indicates an expected call of PatchMatchableHttpGatewayStatus
func (mr *MockMatchableHttpGatewayStatusWriterMockRecorder) PatchMatchableHttpGatewayStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMatchableHttpGatewayStatus", reflect.TypeOf((*MockMatchableHttpGatewayStatusWriter)(nil).PatchMatchableHttpGatewayStatus), varargs...)
}

// MockMatchableHttpGatewayClient is a mock of MatchableHttpGatewayClient interface
type MockMatchableHttpGatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockMatchableHttpGatewayClientMockRecorder
}

// MockMatchableHttpGatewayClientMockRecorder is the mock recorder for MockMatchableHttpGatewayClient
type MockMatchableHttpGatewayClientMockRecorder struct {
	mock *MockMatchableHttpGatewayClient
}

// NewMockMatchableHttpGatewayClient creates a new mock instance
func NewMockMatchableHttpGatewayClient(ctrl *gomock.Controller) *MockMatchableHttpGatewayClient {
	mock := &MockMatchableHttpGatewayClient{ctrl: ctrl}
	mock.recorder = &MockMatchableHttpGatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatchableHttpGatewayClient) EXPECT() *MockMatchableHttpGatewayClientMockRecorder {
	return m.recorder
}

// GetMatchableHttpGateway mocks base method
func (m *MockMatchableHttpGatewayClient) GetMatchableHttpGateway(ctx context.Context, key client.ObjectKey) (*v1.MatchableHttpGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchableHttpGateway", ctx, key)
	ret0, _ := ret[0].(*v1.MatchableHttpGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchableHttpGateway indicates an expected call of GetMatchableHttpGateway
func (mr *MockMatchableHttpGatewayClientMockRecorder) GetMatchableHttpGateway(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchableHttpGateway", reflect.TypeOf((*MockMatchableHttpGatewayClient)(nil).GetMatchableHttpGateway), ctx, key)
}

// ListMatchableHttpGateway mocks base method
func (m *MockMatchableHttpGatewayClient) ListMatchableHttpGateway(ctx context.Context, opts ...client.ListOption) (*v1.MatchableHttpGatewayList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMatchableHttpGateway", varargs...)
	ret0, _ := ret[0].(*v1.MatchableHttpGatewayList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMatchableHttpGateway indicates an expected call of ListMatchableHttpGateway
func (mr *MockMatchableHttpGatewayClientMockRecorder) ListMatchableHttpGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchableHttpGateway", reflect.TypeOf((*MockMatchableHttpGatewayClient)(nil).ListMatchableHttpGateway), varargs...)
}

// CreateMatchableHttpGateway mocks base method
func (m *MockMatchableHttpGatewayClient) CreateMatchableHttpGateway(ctx context.Context, obj *v1.MatchableHttpGateway, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMatchableHttpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMatchableHttpGateway indicates an expected call of CreateMatchableHttpGateway
func (mr *MockMatchableHttpGatewayClientMockRecorder) CreateMatchableHttpGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatchableHttpGateway", reflect.TypeOf((*MockMatchableHttpGatewayClient)(nil).CreateMatchableHttpGateway), varargs...)
}

// DeleteMatchableHttpGateway mocks base method
func (m *MockMatchableHttpGatewayClient) DeleteMatchableHttpGateway(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMatchableHttpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMatchableHttpGateway indicates an expected call of DeleteMatchableHttpGateway
func (mr *MockMatchableHttpGatewayClientMockRecorder) DeleteMatchableHttpGateway(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMatchableHttpGateway", reflect.TypeOf((*MockMatchableHttpGatewayClient)(nil).DeleteMatchableHttpGateway), varargs...)
}

// UpdateMatchableHttpGateway mocks base method
func (m *MockMatchableHttpGatewayClient) UpdateMatchableHttpGateway(ctx context.Context, obj *v1.MatchableHttpGateway, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMatchableHttpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMatchableHttpGateway indicates an expected call of UpdateMatchableHttpGateway
func (mr *MockMatchableHttpGatewayClientMockRecorder) UpdateMatchableHttpGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatchableHttpGateway", reflect.TypeOf((*MockMatchableHttpGatewayClient)(nil).UpdateMatchableHttpGateway), varargs...)
}

// PatchMatchableHttpGateway mocks base method
func (m *MockMatchableHttpGatewayClient) PatchMatchableHttpGateway(ctx context.Context, obj *v1.MatchableHttpGateway, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMatchableHttpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMatchableHttpGateway indicates an expected call of PatchMatchableHttpGateway
func (mr *MockMatchableHttpGatewayClientMockRecorder) PatchMatchableHttpGateway(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMatchableHttpGateway", reflect.TypeOf((*MockMatchableHttpGatewayClient)(nil).PatchMatchableHttpGateway), varargs...)
}

// DeleteAllOfMatchableHttpGateway mocks base method
func (m *MockMatchableHttpGatewayClient) DeleteAllOfMatchableHttpGateway(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMatchableHttpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMatchableHttpGateway indicates an expected call of DeleteAllOfMatchableHttpGateway
func (mr *MockMatchableHttpGatewayClientMockRecorder) DeleteAllOfMatchableHttpGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMatchableHttpGateway", reflect.TypeOf((*MockMatchableHttpGatewayClient)(nil).DeleteAllOfMatchableHttpGateway), varargs...)
}

// UpsertMatchableHttpGateway mocks base method
func (m *MockMatchableHttpGatewayClient) UpsertMatchableHttpGateway(ctx context.Context, obj *v1.MatchableHttpGateway, transitionFuncs ...v1.MatchableHttpGatewayTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMatchableHttpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMatchableHttpGateway indicates an expected call of UpsertMatchableHttpGateway
func (mr *MockMatchableHttpGatewayClientMockRecorder) UpsertMatchableHttpGateway(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMatchableHttpGateway", reflect.TypeOf((*MockMatchableHttpGatewayClient)(nil).UpsertMatchableHttpGateway), varargs...)
}

// UpdateMatchableHttpGatewayStatus mocks base method
func (m *MockMatchableHttpGatewayClient) UpdateMatchableHttpGatewayStatus(ctx context.Context, obj *v1.MatchableHttpGateway, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMatchableHttpGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMatchableHttpGatewayStatus indicates an expected call of UpdateMatchableHttpGatewayStatus
func (mr *MockMatchableHttpGatewayClientMockRecorder) UpdateMatchableHttpGatewayStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatchableHttpGatewayStatus", reflect.TypeOf((*MockMatchableHttpGatewayClient)(nil).UpdateMatchableHttpGatewayStatus), varargs...)
}

// PatchMatchableHttpGatewayStatus mocks base method
func (m *MockMatchableHttpGatewayClient) PatchMatchableHttpGatewayStatus(ctx context.Context, obj *v1.MatchableHttpGateway, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMatchableHttpGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMatchableHttpGatewayStatus indicates an expected call of PatchMatchableHttpGatewayStatus
func (mr *MockMatchableHttpGatewayClientMockRecorder) PatchMatchableHttpGatewayStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMatchableHttpGatewayStatus", reflect.TypeOf((*MockMatchableHttpGatewayClient)(nil).PatchMatchableHttpGatewayStatus), varargs...)
}

// MockMulticlusterMatchableHttpGatewayClient is a mock of MulticlusterMatchableHttpGatewayClient interface
type MockMulticlusterMatchableHttpGatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMatchableHttpGatewayClientMockRecorder
}

// MockMulticlusterMatchableHttpGatewayClientMockRecorder is the mock recorder for MockMulticlusterMatchableHttpGatewayClient
type MockMulticlusterMatchableHttpGatewayClientMockRecorder struct {
	mock *MockMulticlusterMatchableHttpGatewayClient
}

// NewMockMulticlusterMatchableHttpGatewayClient creates a new mock instance
func NewMockMulticlusterMatchableHttpGatewayClient(ctrl *gomock.Controller) *MockMulticlusterMatchableHttpGatewayClient {
	mock := &MockMulticlusterMatchableHttpGatewayClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMatchableHttpGatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterMatchableHttpGatewayClient) EXPECT() *MockMulticlusterMatchableHttpGatewayClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterMatchableHttpGatewayClient) Cluster(cluster string) (v1.MatchableHttpGatewayClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1.MatchableHttpGatewayClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterMatchableHttpGatewayClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterMatchableHttpGatewayClient)(nil).Cluster), cluster)
}

// MockMatchableTcpGatewayReader is a mock of MatchableTcpGatewayReader interface
type MockMatchableTcpGatewayReader struct {
	ctrl     *gomock.Controller
	recorder *MockMatchableTcpGatewayReaderMockRecorder
}

// MockMatchableTcpGatewayReaderMockRecorder is the mock recorder for MockMatchableTcpGatewayReader
type MockMatchableTcpGatewayReaderMockRecorder struct {
	mock *MockMatchableTcpGatewayReader
}

// NewMockMatchableTcpGatewayReader creates a new mock instance
func NewMockMatchableTcpGatewayReader(ctrl *gomock.Controller) *MockMatchableTcpGatewayReader {
	mock := &MockMatchableTcpGatewayReader{ctrl: ctrl}
	mock.recorder = &MockMatchableTcpGatewayReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatchableTcpGatewayReader) EXPECT() *MockMatchableTcpGatewayReaderMockRecorder {
	return m.recorder
}

// GetMatchableTcpGateway mocks base method
func (m *MockMatchableTcpGatewayReader) GetMatchableTcpGateway(ctx context.Context, key client.ObjectKey) (*v1.MatchableTcpGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchableTcpGateway", ctx, key)
	ret0, _ := ret[0].(*v1.MatchableTcpGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchableTcpGateway indicates an expected call of GetMatchableTcpGateway
func (mr *MockMatchableTcpGatewayReaderMockRecorder) GetMatchableTcpGateway(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchableTcpGateway", reflect.TypeOf((*MockMatchableTcpGatewayReader)(nil).GetMatchableTcpGateway), ctx, key)
}

// ListMatchableTcpGateway mocks base method
func (m *MockMatchableTcpGatewayReader) ListMatchableTcpGateway(ctx context.Context, opts ...client.ListOption) (*v1.MatchableTcpGatewayList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMatchableTcpGateway", varargs...)
	ret0, _ := ret[0].(*v1.MatchableTcpGatewayList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMatchableTcpGateway indicates an expected call of ListMatchableTcpGateway
func (mr *MockMatchableTcpGatewayReaderMockRecorder) ListMatchableTcpGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchableTcpGateway", reflect.TypeOf((*MockMatchableTcpGatewayReader)(nil).ListMatchableTcpGateway), varargs...)
}

// MockMatchableTcpGatewayWriter is a mock of MatchableTcpGatewayWriter interface
type MockMatchableTcpGatewayWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMatchableTcpGatewayWriterMockRecorder
}

// MockMatchableTcpGatewayWriterMockRecorder is the mock recorder for MockMatchableTcpGatewayWriter
type MockMatchableTcpGatewayWriterMockRecorder struct {
	mock *MockMatchableTcpGatewayWriter
}

// NewMockMatchableTcpGatewayWriter creates a new mock instance
func NewMockMatchableTcpGatewayWriter(ctrl *gomock.Controller) *MockMatchableTcpGatewayWriter {
	mock := &MockMatchableTcpGatewayWriter{ctrl: ctrl}
	mock.recorder = &MockMatchableTcpGatewayWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatchableTcpGatewayWriter) EXPECT() *MockMatchableTcpGatewayWriterMockRecorder {
	return m.recorder
}

// CreateMatchableTcpGateway mocks base method
func (m *MockMatchableTcpGatewayWriter) CreateMatchableTcpGateway(ctx context.Context, obj *v1.MatchableTcpGateway, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMatchableTcpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMatchableTcpGateway indicates an expected call of CreateMatchableTcpGateway
func (mr *MockMatchableTcpGatewayWriterMockRecorder) CreateMatchableTcpGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatchableTcpGateway", reflect.TypeOf((*MockMatchableTcpGatewayWriter)(nil).CreateMatchableTcpGateway), varargs...)
}

// DeleteMatchableTcpGateway mocks base method
func (m *MockMatchableTcpGatewayWriter) DeleteMatchableTcpGateway(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMatchableTcpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMatchableTcpGateway indicates an expected call of DeleteMatchableTcpGateway
func (mr *MockMatchableTcpGatewayWriterMockRecorder) DeleteMatchableTcpGateway(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMatchableTcpGateway", reflect.TypeOf((*MockMatchableTcpGatewayWriter)(nil).DeleteMatchableTcpGateway), varargs...)
}

// UpdateMatchableTcpGateway mocks base method
func (m *MockMatchableTcpGatewayWriter) UpdateMatchableTcpGateway(ctx context.Context, obj *v1.MatchableTcpGateway, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMatchableTcpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMatchableTcpGateway indicates an expected call of UpdateMatchableTcpGateway
func (mr *MockMatchableTcpGatewayWriterMockRecorder) UpdateMatchableTcpGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatchableTcpGateway", reflect.TypeOf((*MockMatchableTcpGatewayWriter)(nil).UpdateMatchableTcpGateway), varargs...)
}

// PatchMatchableTcpGateway mocks base method
func (m *MockMatchableTcpGatewayWriter) PatchMatchableTcpGateway(ctx context.Context, obj *v1.MatchableTcpGateway, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMatchableTcpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMatchableTcpGateway indicates an expected call of PatchMatchableTcpGateway
func (mr *MockMatchableTcpGatewayWriterMockRecorder) PatchMatchableTcpGateway(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMatchableTcpGateway", reflect.TypeOf((*MockMatchableTcpGatewayWriter)(nil).PatchMatchableTcpGateway), varargs...)
}

// DeleteAllOfMatchableTcpGateway mocks base method
func (m *MockMatchableTcpGatewayWriter) DeleteAllOfMatchableTcpGateway(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMatchableTcpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMatchableTcpGateway indicates an expected call of DeleteAllOfMatchableTcpGateway
func (mr *MockMatchableTcpGatewayWriterMockRecorder) DeleteAllOfMatchableTcpGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMatchableTcpGateway", reflect.TypeOf((*MockMatchableTcpGatewayWriter)(nil).DeleteAllOfMatchableTcpGateway), varargs...)
}

// UpsertMatchableTcpGateway mocks base method
func (m *MockMatchableTcpGatewayWriter) UpsertMatchableTcpGateway(ctx context.Context, obj *v1.MatchableTcpGateway, transitionFuncs ...v1.MatchableTcpGatewayTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMatchableTcpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMatchableTcpGateway indicates an expected call of UpsertMatchableTcpGateway
func (mr *MockMatchableTcpGatewayWriterMockRecorder) UpsertMatchableTcpGateway(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMatchableTcpGateway", reflect.TypeOf((*MockMatchableTcpGatewayWriter)(nil).UpsertMatchableTcpGateway), varargs...)
}

// MockMatchableTcpGatewayStatusWriter is a mock of MatchableTcpGatewayStatusWriter interface
type MockMatchableTcpGatewayStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMatchableTcpGatewayStatusWriterMockRecorder
}

// MockMatchableTcpGatewayStatusWriterMockRecorder is the mock recorder for MockMatchableTcpGatewayStatusWriter
type MockMatchableTcpGatewayStatusWriterMockRecorder struct {
	mock *MockMatchableTcpGatewayStatusWriter
}

// NewMockMatchableTcpGatewayStatusWriter creates a new mock instance
func NewMockMatchableTcpGatewayStatusWriter(ctrl *gomock.Controller) *MockMatchableTcpGatewayStatusWriter {
	mock := &MockMatchableTcpGatewayStatusWriter{ctrl: ctrl}
	mock.recorder = &MockMatchableTcpGatewayStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatchableTcpGatewayStatusWriter) EXPECT() *MockMatchableTcpGatewayStatusWriterMockRecorder {
	return m.recorder
}

// UpdateMatchableTcpGatewayStatus mocks base method
func (m *MockMatchableTcpGatewayStatusWriter) UpdateMatchableTcpGatewayStatus(ctx context.Context, obj *v1.MatchableTcpGateway, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMatchableTcpGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMatchableTcpGatewayStatus indicates an expected call of UpdateMatchableTcpGatewayStatus
func (mr *MockMatchableTcpGatewayStatusWriterMockRecorder) UpdateMatchableTcpGatewayStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatchableTcpGatewayStatus", reflect.TypeOf((*MockMatchableTcpGatewayStatusWriter)(nil).UpdateMatchableTcpGatewayStatus), varargs...)
}

// PatchMatchableTcpGatewayStatus mocks base method
func (m *MockMatchableTcpGatewayStatusWriter) PatchMatchableTcpGatewayStatus(ctx context.Context, obj *v1.MatchableTcpGateway, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMatchableTcpGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMatchableTcpGatewayStatus indicates an expected call of PatchMatchableTcpGatewayStatus
func (mr *MockMatchableTcpGatewayStatusWriterMockRecorder) PatchMatchableTcpGatewayStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMatchableTcpGatewayStatus", reflect.TypeOf((*MockMatchableTcpGatewayStatusWriter)(nil).PatchMatchableTcpGatewayStatus), varargs...)
}

// MockMatchableTcpGatewayClient is a mock of MatchableTcpGatewayClient interface
type MockMatchableTcpGatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockMatchableTcpGatewayClientMockRecorder
}

// MockMatchableTcpGatewayClientMockRecorder is the mock recorder for MockMatchableTcpGatewayClient
type MockMatchableTcpGatewayClientMockRecorder struct {
	mock *MockMatchableTcpGatewayClient
}

// NewMockMatchableTcpGatewayClient creates a new mock instance
func NewMockMatchableTcpGatewayClient(ctrl *gomock.Controller) *MockMatchableTcpGatewayClient {
	mock := &MockMatchableTcpGatewayClient{ctrl: ctrl}
	mock.recorder = &MockMatchableTcpGatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatchableTcpGatewayClient) EXPECT() *MockMatchableTcpGatewayClientMockRecorder {
	return m.recorder
}

// GetMatchableTcpGateway mocks base method
func (m *MockMatchableTcpGatewayClient) GetMatchableTcpGateway(ctx context.Context, key client.ObjectKey) (*v1.MatchableTcpGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchableTcpGateway", ctx, key)
	ret0, _ := ret[0].(*v1.MatchableTcpGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchableTcpGateway indicates an expected call of GetMatchableTcpGateway
func (mr *MockMatchableTcpGatewayClientMockRecorder) GetMatchableTcpGateway(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchableTcpGateway", reflect.TypeOf((*MockMatchableTcpGatewayClient)(nil).GetMatchableTcpGateway), ctx, key)
}

// ListMatchableTcpGateway mocks base method
func (m *MockMatchableTcpGatewayClient) ListMatchableTcpGateway(ctx context.Context, opts ...client.ListOption) (*v1.MatchableTcpGatewayList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMatchableTcpGateway", varargs...)
	ret0, _ := ret[0].(*v1.MatchableTcpGatewayList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMatchableTcpGateway indicates an expected call of ListMatchableTcpGateway
func (mr *MockMatchableTcpGatewayClientMockRecorder) ListMatchableTcpGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchableTcpGateway", reflect.TypeOf((*MockMatchableTcpGatewayClient)(nil).ListMatchableTcpGateway), varargs...)
}

// CreateMatchableTcpGateway mocks base method
func (m *MockMatchableTcpGatewayClient) CreateMatchableTcpGateway(ctx context.Context, obj *v1.MatchableTcpGateway, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMatchableTcpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMatchableTcpGateway indicates an expected call of CreateMatchableTcpGateway
func (mr *MockMatchableTcpGatewayClientMockRecorder) CreateMatchableTcpGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatchableTcpGateway", reflect.TypeOf((*MockMatchableTcpGatewayClient)(nil).CreateMatchableTcpGateway), varargs...)
}

// DeleteMatchableTcpGateway mocks base method
func (m *MockMatchableTcpGatewayClient) DeleteMatchableTcpGateway(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMatchableTcpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMatchableTcpGateway indicates an expected call of DeleteMatchableTcpGateway
func (mr *MockMatchableTcpGatewayClientMockRecorder) DeleteMatchableTcpGateway(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMatchableTcpGateway", reflect.TypeOf((*MockMatchableTcpGatewayClient)(nil).DeleteMatchableTcpGateway), varargs...)
}

// UpdateMatchableTcpGateway mocks base method
func (m *MockMatchableTcpGatewayClient) UpdateMatchableTcpGateway(ctx context.Context, obj *v1.MatchableTcpGateway, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMatchableTcpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMatchableTcpGateway indicates an expected call of UpdateMatchableTcpGateway
func (mr *MockMatchableTcpGatewayClientMockRecorder) UpdateMatchableTcpGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatchableTcpGateway", reflect.TypeOf((*MockMatchableTcpGatewayClient)(nil).UpdateMatchableTcpGateway), varargs...)
}

// PatchMatchableTcpGateway mocks base method
func (m *MockMatchableTcpGatewayClient) PatchMatchableTcpGateway(ctx context.Context, obj *v1.MatchableTcpGateway, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMatchableTcpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMatchableTcpGateway indicates an expected call of PatchMatchableTcpGateway
func (mr *MockMatchableTcpGatewayClientMockRecorder) PatchMatchableTcpGateway(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMatchableTcpGateway", reflect.TypeOf((*MockMatchableTcpGatewayClient)(nil).PatchMatchableTcpGateway), varargs...)
}

// DeleteAllOfMatchableTcpGateway mocks base method
func (m *MockMatchableTcpGatewayClient) DeleteAllOfMatchableTcpGateway(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMatchableTcpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMatchableTcpGateway indicates an expected call of DeleteAllOfMatchableTcpGateway
func (mr *MockMatchableTcpGatewayClientMockRecorder) DeleteAllOfMatchableTcpGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMatchableTcpGateway", reflect.TypeOf((*MockMatchableTcpGatewayClient)(nil).DeleteAllOfMatchableTcpGateway), varargs...)
}

// UpsertMatchableTcpGateway mocks base method
func (m *MockMatchableTcpGatewayClient) UpsertMatchableTcpGateway(ctx context.Context, obj *v1.MatchableTcpGateway, transitionFuncs ...v1.MatchableTcpGatewayTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMatchableTcpGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMatchableTcpGateway indicates an expected call of UpsertMatchableTcpGateway
func (mr *MockMatchableTcpGatewayClientMockRecorder) UpsertMatchableTcpGateway(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMatchableTcpGateway", reflect.TypeOf((*MockMatchableTcpGatewayClient)(nil).UpsertMatchableTcpGateway), varargs...)
}

// UpdateMatchableTcpGatewayStatus mocks base method
func (m *MockMatchableTcpGatewayClient) UpdateMatchableTcpGatewayStatus(ctx context.Context, obj *v1.MatchableTcpGateway, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMatchableTcpGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMatchableTcpGatewayStatus indicates an expected call of UpdateMatchableTcpGatewayStatus
func (mr *MockMatchableTcpGatewayClientMockRecorder) UpdateMatchableTcpGatewayStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatchableTcpGatewayStatus", reflect.TypeOf((*MockMatchableTcpGatewayClient)(nil).UpdateMatchableTcpGatewayStatus), varargs...)
}

// PatchMatchableTcpGatewayStatus mocks base method
func (m *MockMatchableTcpGatewayClient) PatchMatchableTcpGatewayStatus(ctx context.Context, obj *v1.MatchableTcpGateway, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMatchableTcpGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMatchableTcpGatewayStatus indicates an expected call of PatchMatchableTcpGatewayStatus
func (mr *MockMatchableTcpGatewayClientMockRecorder) PatchMatchableTcpGatewayStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMatchableTcpGatewayStatus", reflect.TypeOf((*MockMatchableTcpGatewayClient)(nil).PatchMatchableTcpGatewayStatus), varargs...)
}

// MockMulticlusterMatchableTcpGatewayClient is a mock of MulticlusterMatchableTcpGatewayClient interface
type MockMulticlusterMatchableTcpGatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMatchableTcpGatewayClientMockRecorder
}

// MockMulticlusterMatchableTcpGatewayClientMockRecorder is the mock recorder for MockMulticlusterMatchableTcpGatewayClient
type MockMulticlusterMatchableTcpGatewayClientMockRecorder struct {
	mock *MockMulticlusterMatchableTcpGatewayClient
}

// NewMockMulticlusterMatchableTcpGatewayClient creates a new mock instance
func NewMockMulticlusterMatchableTcpGatewayClient(ctrl *gomock.Controller) *MockMulticlusterMatchableTcpGatewayClient {
	mock := &MockMulticlusterMatchableTcpGatewayClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMatchableTcpGatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterMatchableTcpGatewayClient) EXPECT() *MockMulticlusterMatchableTcpGatewayClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterMatchableTcpGatewayClient) Cluster(cluster string) (v1.MatchableTcpGatewayClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1.MatchableTcpGatewayClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterMatchableTcpGatewayClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterMatchableTcpGatewayClient)(nil).Cluster), cluster)
}

// MockRouteTableReader is a mock of RouteTableReader interface
type MockRouteTableReader struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableReaderMockRecorder
}

// MockRouteTableReaderMockRecorder is the mock recorder for MockRouteTableReader
type MockRouteTableReaderMockRecorder struct {
	mock *MockRouteTableReader
}

// NewMockRouteTableReader creates a new mock instance
func NewMockRouteTableReader(ctrl *gomock.Controller) *MockRouteTableReader {
	mock := &MockRouteTableReader{ctrl: ctrl}
	mock.recorder = &MockRouteTableReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteTableReader) EXPECT() *MockRouteTableReaderMockRecorder {
	return m.recorder
}

// GetRouteTable mocks base method
func (m *MockRouteTableReader) GetRouteTable(ctx context.Context, key client.ObjectKey) (*v1.RouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteTable", ctx, key)
	ret0, _ := ret[0].(*v1.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteTable indicates an expected call of GetRouteTable
func (mr *MockRouteTableReaderMockRecorder) GetRouteTable(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteTable", reflect.TypeOf((*MockRouteTableReader)(nil).GetRouteTable), ctx, key)
}

// ListRouteTable mocks base method
func (m *MockRouteTableReader) ListRouteTable(ctx context.Context, opts ...client.ListOption) (*v1.RouteTableList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRouteTable", varargs...)
	ret0, _ := ret[0].(*v1.RouteTableList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouteTable indicates an expected call of ListRouteTable
func (mr *MockRouteTableReaderMockRecorder) ListRouteTable(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouteTable", reflect.TypeOf((*MockRouteTableReader)(nil).ListRouteTable), varargs...)
}

// MockRouteTableWriter is a mock of RouteTableWriter interface
type MockRouteTableWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableWriterMockRecorder
}

// MockRouteTableWriterMockRecorder is the mock recorder for MockRouteTableWriter
type MockRouteTableWriterMockRecorder struct {
	mock *MockRouteTableWriter
}

// NewMockRouteTableWriter creates a new mock instance
func NewMockRouteTableWriter(ctrl *gomock.Controller) *MockRouteTableWriter {
	mock := &MockRouteTableWriter{ctrl: ctrl}
	mock.recorder = &MockRouteTableWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteTableWriter) EXPECT() *MockRouteTableWriterMockRecorder {
	return m.recorder
}

// CreateRouteTable mocks base method
func (m *MockRouteTableWriter) CreateRouteTable(ctx context.Context, obj *v1.RouteTable, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRouteTable indicates an expected call of CreateRouteTable
func (mr *MockRouteTableWriterMockRecorder) CreateRouteTable(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteTable", reflect.TypeOf((*MockRouteTableWriter)(nil).CreateRouteTable), varargs...)
}

// DeleteRouteTable mocks base method
func (m *MockRouteTableWriter) DeleteRouteTable(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouteTable indicates an expected call of DeleteRouteTable
func (mr *MockRouteTableWriterMockRecorder) DeleteRouteTable(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteTable", reflect.TypeOf((*MockRouteTableWriter)(nil).DeleteRouteTable), varargs...)
}

// UpdateRouteTable mocks base method
func (m *MockRouteTableWriter) UpdateRouteTable(ctx context.Context, obj *v1.RouteTable, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRouteTable indicates an expected call of UpdateRouteTable
func (mr *MockRouteTableWriterMockRecorder) UpdateRouteTable(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteTable", reflect.TypeOf((*MockRouteTableWriter)(nil).UpdateRouteTable), varargs...)
}

// PatchRouteTable mocks base method
func (m *MockRouteTableWriter) PatchRouteTable(ctx context.Context, obj *v1.RouteTable, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRouteTable indicates an expected call of PatchRouteTable
func (mr *MockRouteTableWriterMockRecorder) PatchRouteTable(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRouteTable", reflect.TypeOf((*MockRouteTableWriter)(nil).PatchRouteTable), varargs...)
}

// DeleteAllOfRouteTable mocks base method
func (m *MockRouteTableWriter) DeleteAllOfRouteTable(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfRouteTable indicates an expected call of DeleteAllOfRouteTable
func (mr *MockRouteTableWriterMockRecorder) DeleteAllOfRouteTable(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfRouteTable", reflect.TypeOf((*MockRouteTableWriter)(nil).DeleteAllOfRouteTable), varargs...)
}

// UpsertRouteTable mocks base method
func (m *MockRouteTableWriter) UpsertRouteTable(ctx context.Context, obj *v1.RouteTable, transitionFuncs ...v1.RouteTableTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRouteTable indicates an expected call of UpsertRouteTable
func (mr *MockRouteTableWriterMockRecorder) UpsertRouteTable(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRouteTable", reflect.TypeOf((*MockRouteTableWriter)(nil).UpsertRouteTable), varargs...)
}

// MockRouteTableStatusWriter is a mock of RouteTableStatusWriter interface
type MockRouteTableStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableStatusWriterMockRecorder
}

// MockRouteTableStatusWriterMockRecorder is the mock recorder for MockRouteTableStatusWriter
type MockRouteTableStatusWriterMockRecorder struct {
	mock *MockRouteTableStatusWriter
}

// NewMockRouteTableStatusWriter creates a new mock instance
func NewMockRouteTableStatusWriter(ctrl *gomock.Controller) *MockRouteTableStatusWriter {
	mock := &MockRouteTableStatusWriter{ctrl: ctrl}
	mock.recorder = &MockRouteTableStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteTableStatusWriter) EXPECT() *MockRouteTableStatusWriterMockRecorder {
	return m.recorder
}

// UpdateRouteTableStatus mocks base method
func (m *MockRouteTableStatusWriter) UpdateRouteTableStatus(ctx context.Context, obj *v1.RouteTable, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRouteTableStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRouteTableStatus indicates an expected call of UpdateRouteTableStatus
func (mr *MockRouteTableStatusWriterMockRecorder) UpdateRouteTableStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteTableStatus", reflect.TypeOf((*MockRouteTableStatusWriter)(nil).UpdateRouteTableStatus), varargs...)
}

// PatchRouteTableStatus mocks base method
func (m *MockRouteTableStatusWriter) PatchRouteTableStatus(ctx context.Context, obj *v1.RouteTable, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRouteTableStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRouteTableStatus indicates an expected call of PatchRouteTableStatus
func (mr *MockRouteTableStatusWriterMockRecorder) PatchRouteTableStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRouteTableStatus", reflect.TypeOf((*MockRouteTableStatusWriter)(nil).PatchRouteTableStatus), varargs...)
}

// MockRouteTableClient is a mock of RouteTableClient interface
type MockRouteTableClient struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableClientMockRecorder
}

// MockRouteTableClientMockRecorder is the mock recorder for MockRouteTableClient
type MockRouteTableClientMockRecorder struct {
	mock *MockRouteTableClient
}

// NewMockRouteTableClient creates a new mock instance
func NewMockRouteTableClient(ctrl *gomock.Controller) *MockRouteTableClient {
	mock := &MockRouteTableClient{ctrl: ctrl}
	mock.recorder = &MockRouteTableClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteTableClient) EXPECT() *MockRouteTableClientMockRecorder {
	return m.recorder
}

// GetRouteTable mocks base method
func (m *MockRouteTableClient) GetRouteTable(ctx context.Context, key client.ObjectKey) (*v1.RouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteTable", ctx, key)
	ret0, _ := ret[0].(*v1.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteTable indicates an expected call of GetRouteTable
func (mr *MockRouteTableClientMockRecorder) GetRouteTable(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).GetRouteTable), ctx, key)
}

// ListRouteTable mocks base method
func (m *MockRouteTableClient) ListRouteTable(ctx context.Context, opts ...client.ListOption) (*v1.RouteTableList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRouteTable", varargs...)
	ret0, _ := ret[0].(*v1.RouteTableList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouteTable indicates an expected call of ListRouteTable
func (mr *MockRouteTableClientMockRecorder) ListRouteTable(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).ListRouteTable), varargs...)
}

// CreateRouteTable mocks base method
func (m *MockRouteTableClient) CreateRouteTable(ctx context.Context, obj *v1.RouteTable, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRouteTable indicates an expected call of CreateRouteTable
func (mr *MockRouteTableClientMockRecorder) CreateRouteTable(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).CreateRouteTable), varargs...)
}

// DeleteRouteTable mocks base method
func (m *MockRouteTableClient) DeleteRouteTable(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouteTable indicates an expected call of DeleteRouteTable
func (mr *MockRouteTableClientMockRecorder) DeleteRouteTable(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).DeleteRouteTable), varargs...)
}

// UpdateRouteTable mocks base method
func (m *MockRouteTableClient) UpdateRouteTable(ctx context.Context, obj *v1.RouteTable, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRouteTable indicates an expected call of UpdateRouteTable
func (mr *MockRouteTableClientMockRecorder) UpdateRouteTable(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).UpdateRouteTable), varargs...)
}

// PatchRouteTable mocks base method
func (m *MockRouteTableClient) PatchRouteTable(ctx context.Context, obj *v1.RouteTable, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRouteTable indicates an expected call of PatchRouteTable
func (mr *MockRouteTableClientMockRecorder) PatchRouteTable(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).PatchRouteTable), varargs...)
}

// DeleteAllOfRouteTable mocks base method
func (m *MockRouteTableClient) DeleteAllOfRouteTable(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfRouteTable indicates an expected call of DeleteAllOfRouteTable
func (mr *MockRouteTableClientMockRecorder) DeleteAllOfRouteTable(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).DeleteAllOfRouteTable), varargs...)
}

// UpsertRouteTable mocks base method
func (m *MockRouteTableClient) UpsertRouteTable(ctx context.Context, obj *v1.RouteTable, transitionFuncs ...v1.RouteTableTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRouteTable indicates an expected call of UpsertRouteTable
func (mr *MockRouteTableClientMockRecorder) UpsertRouteTable(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).UpsertRouteTable), varargs...)
}

// UpdateRouteTableStatus mocks base method
func (m *MockRouteTableClient) UpdateRouteTableStatus(ctx context.Context, obj *v1.RouteTable, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRouteTableStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRouteTableStatus indicates an expected call of UpdateRouteTableStatus
func (mr *MockRouteTableClientMockRecorder) UpdateRouteTableStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteTableStatus", reflect.TypeOf((*MockRouteTableClient)(nil).UpdateRouteTableStatus), varargs...)
}

// PatchRouteTableStatus mocks base method
func (m *MockRouteTableClient) PatchRouteTableStatus(ctx context.Context, obj *v1.RouteTable, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRouteTableStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRouteTableStatus indicates an expected call of PatchRouteTableStatus
func (mr *MockRouteTableClientMockRecorder) PatchRouteTableStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRouteTableStatus", reflect.TypeOf((*MockRouteTableClient)(nil).PatchRouteTableStatus), varargs...)
}

// MockMulticlusterRouteTableClient is a mock of MulticlusterRouteTableClient interface
type MockMulticlusterRouteTableClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRouteTableClientMockRecorder
}

// MockMulticlusterRouteTableClientMockRecorder is the mock recorder for MockMulticlusterRouteTableClient
type MockMulticlusterRouteTableClientMockRecorder struct {
	mock *MockMulticlusterRouteTableClient
}

// NewMockMulticlusterRouteTableClient creates a new mock instance
func NewMockMulticlusterRouteTableClient(ctrl *gomock.Controller) *MockMulticlusterRouteTableClient {
	mock := &MockMulticlusterRouteTableClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRouteTableClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterRouteTableClient) EXPECT() *MockMulticlusterRouteTableClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterRouteTableClient) Cluster(cluster string) (v1.RouteTableClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1.RouteTableClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterRouteTableClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterRouteTableClient)(nil).Cluster), cluster)
}

// MockVirtualServiceReader is a mock of VirtualServiceReader interface
type MockVirtualServiceReader struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceReaderMockRecorder
}

// MockVirtualServiceReaderMockRecorder is the mock recorder for MockVirtualServiceReader
type MockVirtualServiceReaderMockRecorder struct {
	mock *MockVirtualServiceReader
}

// NewMockVirtualServiceReader creates a new mock instance
func NewMockVirtualServiceReader(ctrl *gomock.Controller) *MockVirtualServiceReader {
	mock := &MockVirtualServiceReader{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualServiceReader) EXPECT() *MockVirtualServiceReaderMockRecorder {
	return m.recorder
}

// GetVirtualService mocks base method
func (m *MockVirtualServiceReader) GetVirtualService(ctx context.Context, key client.ObjectKey) (*v1.VirtualService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualService", ctx, key)
	ret0, _ := ret[0].(*v1.VirtualService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualService indicates an expected call of GetVirtualService
func (mr *MockVirtualServiceReaderMockRecorder) GetVirtualService(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualService", reflect.TypeOf((*MockVirtualServiceReader)(nil).GetVirtualService), ctx, key)
}

// ListVirtualService mocks base method
func (m *MockVirtualServiceReader) ListVirtualService(ctx context.Context, opts ...client.ListOption) (*v1.VirtualServiceList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualService", varargs...)
	ret0, _ := ret[0].(*v1.VirtualServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualService indicates an expected call of ListVirtualService
func (mr *MockVirtualServiceReaderMockRecorder) ListVirtualService(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualService", reflect.TypeOf((*MockVirtualServiceReader)(nil).ListVirtualService), varargs...)
}

// MockVirtualServiceWriter is a mock of VirtualServiceWriter interface
type MockVirtualServiceWriter struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceWriterMockRecorder
}

// MockVirtualServiceWriterMockRecorder is the mock recorder for MockVirtualServiceWriter
type MockVirtualServiceWriterMockRecorder struct {
	mock *MockVirtualServiceWriter
}

// NewMockVirtualServiceWriter creates a new mock instance
func NewMockVirtualServiceWriter(ctrl *gomock.Controller) *MockVirtualServiceWriter {
	mock := &MockVirtualServiceWriter{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualServiceWriter) EXPECT() *MockVirtualServiceWriterMockRecorder {
	return m.recorder
}

// CreateVirtualService mocks base method
func (m *MockVirtualServiceWriter) CreateVirtualService(ctx context.Context, obj *v1.VirtualService, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualService indicates an expected call of CreateVirtualService
func (mr *MockVirtualServiceWriterMockRecorder) CreateVirtualService(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualService", reflect.TypeOf((*MockVirtualServiceWriter)(nil).CreateVirtualService), varargs...)
}

// DeleteVirtualService mocks base method
func (m *MockVirtualServiceWriter) DeleteVirtualService(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualService indicates an expected call of DeleteVirtualService
func (mr *MockVirtualServiceWriterMockRecorder) DeleteVirtualService(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualService", reflect.TypeOf((*MockVirtualServiceWriter)(nil).DeleteVirtualService), varargs...)
}

// UpdateVirtualService mocks base method
func (m *MockVirtualServiceWriter) UpdateVirtualService(ctx context.Context, obj *v1.VirtualService, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualService indicates an expected call of UpdateVirtualService
func (mr *MockVirtualServiceWriterMockRecorder) UpdateVirtualService(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualService", reflect.TypeOf((*MockVirtualServiceWriter)(nil).UpdateVirtualService), varargs...)
}

// PatchVirtualService mocks base method
func (m *MockVirtualServiceWriter) PatchVirtualService(ctx context.Context, obj *v1.VirtualService, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualService indicates an expected call of PatchVirtualService
func (mr *MockVirtualServiceWriterMockRecorder) PatchVirtualService(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualService", reflect.TypeOf((*MockVirtualServiceWriter)(nil).PatchVirtualService), varargs...)
}

// DeleteAllOfVirtualService mocks base method
func (m *MockVirtualServiceWriter) DeleteAllOfVirtualService(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfVirtualService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfVirtualService indicates an expected call of DeleteAllOfVirtualService
func (mr *MockVirtualServiceWriterMockRecorder) DeleteAllOfVirtualService(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfVirtualService", reflect.TypeOf((*MockVirtualServiceWriter)(nil).DeleteAllOfVirtualService), varargs...)
}

// UpsertVirtualService mocks base method
func (m *MockVirtualServiceWriter) UpsertVirtualService(ctx context.Context, obj *v1.VirtualService, transitionFuncs ...v1.VirtualServiceTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertVirtualService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVirtualService indicates an expected call of UpsertVirtualService
func (mr *MockVirtualServiceWriterMockRecorder) UpsertVirtualService(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVirtualService", reflect.TypeOf((*MockVirtualServiceWriter)(nil).UpsertVirtualService), varargs...)
}

// MockVirtualServiceStatusWriter is a mock of VirtualServiceStatusWriter interface
type MockVirtualServiceStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceStatusWriterMockRecorder
}

// MockVirtualServiceStatusWriterMockRecorder is the mock recorder for MockVirtualServiceStatusWriter
type MockVirtualServiceStatusWriterMockRecorder struct {
	mock *MockVirtualServiceStatusWriter
}

// NewMockVirtualServiceStatusWriter creates a new mock instance
func NewMockVirtualServiceStatusWriter(ctrl *gomock.Controller) *MockVirtualServiceStatusWriter {
	mock := &MockVirtualServiceStatusWriter{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualServiceStatusWriter) EXPECT() *MockVirtualServiceStatusWriterMockRecorder {
	return m.recorder
}

// UpdateVirtualServiceStatus mocks base method
func (m *MockVirtualServiceStatusWriter) UpdateVirtualServiceStatus(ctx context.Context, obj *v1.VirtualService, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualServiceStatus indicates an expected call of UpdateVirtualServiceStatus
func (mr *MockVirtualServiceStatusWriterMockRecorder) UpdateVirtualServiceStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualServiceStatus", reflect.TypeOf((*MockVirtualServiceStatusWriter)(nil).UpdateVirtualServiceStatus), varargs...)
}

// PatchVirtualServiceStatus mocks base method
func (m *MockVirtualServiceStatusWriter) PatchVirtualServiceStatus(ctx context.Context, obj *v1.VirtualService, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualServiceStatus indicates an expected call of PatchVirtualServiceStatus
func (mr *MockVirtualServiceStatusWriterMockRecorder) PatchVirtualServiceStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualServiceStatus", reflect.TypeOf((*MockVirtualServiceStatusWriter)(nil).PatchVirtualServiceStatus), varargs...)
}

// MockVirtualServiceClient is a mock of VirtualServiceClient interface
type MockVirtualServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceClientMockRecorder
}

// MockVirtualServiceClientMockRecorder is the mock recorder for MockVirtualServiceClient
type MockVirtualServiceClientMockRecorder struct {
	mock *MockVirtualServiceClient
}

// NewMockVirtualServiceClient creates a new mock instance
func NewMockVirtualServiceClient(ctrl *gomock.Controller) *MockVirtualServiceClient {
	mock := &MockVirtualServiceClient{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualServiceClient) EXPECT() *MockVirtualServiceClientMockRecorder {
	return m.recorder
}

// GetVirtualService mocks base method
func (m *MockVirtualServiceClient) GetVirtualService(ctx context.Context, key client.ObjectKey) (*v1.VirtualService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualService", ctx, key)
	ret0, _ := ret[0].(*v1.VirtualService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualService indicates an expected call of GetVirtualService
func (mr *MockVirtualServiceClientMockRecorder) GetVirtualService(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualService", reflect.TypeOf((*MockVirtualServiceClient)(nil).GetVirtualService), ctx, key)
}

// ListVirtualService mocks base method
func (m *MockVirtualServiceClient) ListVirtualService(ctx context.Context, opts ...client.ListOption) (*v1.VirtualServiceList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualService", varargs...)
	ret0, _ := ret[0].(*v1.VirtualServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualService indicates an expected call of ListVirtualService
func (mr *MockVirtualServiceClientMockRecorder) ListVirtualService(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualService", reflect.TypeOf((*MockVirtualServiceClient)(nil).ListVirtualService), varargs...)
}

// CreateVirtualService mocks base method
func (m *MockVirtualServiceClient) CreateVirtualService(ctx context.Context, obj *v1.VirtualService, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualService indicates an expected call of CreateVirtualService
func (mr *MockVirtualServiceClientMockRecorder) CreateVirtualService(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualService", reflect.TypeOf((*MockVirtualServiceClient)(nil).CreateVirtualService), varargs...)
}

// DeleteVirtualService mocks base method
func (m *MockVirtualServiceClient) DeleteVirtualService(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualService indicates an expected call of DeleteVirtualService
func (mr *MockVirtualServiceClientMockRecorder) DeleteVirtualService(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualService", reflect.TypeOf((*MockVirtualServiceClient)(nil).DeleteVirtualService), varargs...)
}

// UpdateVirtualService mocks base method
func (m *MockVirtualServiceClient) UpdateVirtualService(ctx context.Context, obj *v1.VirtualService, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualService indicates an expected call of UpdateVirtualService
func (mr *MockVirtualServiceClientMockRecorder) UpdateVirtualService(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualService", reflect.TypeOf((*MockVirtualServiceClient)(nil).UpdateVirtualService), varargs...)
}

// PatchVirtualService mocks base method
func (m *MockVirtualServiceClient) PatchVirtualService(ctx context.Context, obj *v1.VirtualService, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualService indicates an expected call of PatchVirtualService
func (mr *MockVirtualServiceClientMockRecorder) PatchVirtualService(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualService", reflect.TypeOf((*MockVirtualServiceClient)(nil).PatchVirtualService), varargs...)
}

// DeleteAllOfVirtualService mocks base method
func (m *MockVirtualServiceClient) DeleteAllOfVirtualService(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfVirtualService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfVirtualService indicates an expected call of DeleteAllOfVirtualService
func (mr *MockVirtualServiceClientMockRecorder) DeleteAllOfVirtualService(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfVirtualService", reflect.TypeOf((*MockVirtualServiceClient)(nil).DeleteAllOfVirtualService), varargs...)
}

// UpsertVirtualService mocks base method
func (m *MockVirtualServiceClient) UpsertVirtualService(ctx context.Context, obj *v1.VirtualService, transitionFuncs ...v1.VirtualServiceTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertVirtualService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVirtualService indicates an expected call of UpsertVirtualService
func (mr *MockVirtualServiceClientMockRecorder) UpsertVirtualService(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVirtualService", reflect.TypeOf((*MockVirtualServiceClient)(nil).UpsertVirtualService), varargs...)
}

// UpdateVirtualServiceStatus mocks base method
func (m *MockVirtualServiceClient) UpdateVirtualServiceStatus(ctx context.Context, obj *v1.VirtualService, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualServiceStatus indicates an expected call of UpdateVirtualServiceStatus
func (mr *MockVirtualServiceClientMockRecorder) UpdateVirtualServiceStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualServiceStatus", reflect.TypeOf((*MockVirtualServiceClient)(nil).UpdateVirtualServiceStatus), varargs...)
}

// PatchVirtualServiceStatus mocks base method
func (m *MockVirtualServiceClient) PatchVirtualServiceStatus(ctx context.Context, obj *v1.VirtualService, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualServiceStatus indicates an expected call of PatchVirtualServiceStatus
func (mr *MockVirtualServiceClientMockRecorder) PatchVirtualServiceStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualServiceStatus", reflect.TypeOf((*MockVirtualServiceClient)(nil).PatchVirtualServiceStatus), varargs...)
}

// MockMulticlusterVirtualServiceClient is a mock of MulticlusterVirtualServiceClient interface
type MockMulticlusterVirtualServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualServiceClientMockRecorder
}

// MockMulticlusterVirtualServiceClientMockRecorder is the mock recorder for MockMulticlusterVirtualServiceClient
type MockMulticlusterVirtualServiceClientMockRecorder struct {
	mock *MockMulticlusterVirtualServiceClient
}

// NewMockMulticlusterVirtualServiceClient creates a new mock instance
func NewMockMulticlusterVirtualServiceClient(ctrl *gomock.Controller) *MockMulticlusterVirtualServiceClient {
	mock := &MockMulticlusterVirtualServiceClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterVirtualServiceClient) EXPECT() *MockMulticlusterVirtualServiceClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterVirtualServiceClient) Cluster(cluster string) (v1.VirtualServiceClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1.VirtualServiceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterVirtualServiceClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterVirtualServiceClient)(nil).Cluster), cluster)
}

// MockVirtualHostOptionReader is a mock of VirtualHostOptionReader interface
type MockVirtualHostOptionReader struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualHostOptionReaderMockRecorder
}

// MockVirtualHostOptionReaderMockRecorder is the mock recorder for MockVirtualHostOptionReader
type MockVirtualHostOptionReaderMockRecorder struct {
	mock *MockVirtualHostOptionReader
}

// NewMockVirtualHostOptionReader creates a new mock instance
func NewMockVirtualHostOptionReader(ctrl *gomock.Controller) *MockVirtualHostOptionReader {
	mock := &MockVirtualHostOptionReader{ctrl: ctrl}
	mock.recorder = &MockVirtualHostOptionReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualHostOptionReader) EXPECT() *MockVirtualHostOptionReaderMockRecorder {
	return m.recorder
}

// GetVirtualHostOption mocks base method
func (m *MockVirtualHostOptionReader) GetVirtualHostOption(ctx context.Context, key client.ObjectKey) (*v1.VirtualHostOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualHostOption", ctx, key)
	ret0, _ := ret[0].(*v1.VirtualHostOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualHostOption indicates an expected call of GetVirtualHostOption
func (mr *MockVirtualHostOptionReaderMockRecorder) GetVirtualHostOption(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualHostOption", reflect.TypeOf((*MockVirtualHostOptionReader)(nil).GetVirtualHostOption), ctx, key)
}

// ListVirtualHostOption mocks base method
func (m *MockVirtualHostOptionReader) ListVirtualHostOption(ctx context.Context, opts ...client.ListOption) (*v1.VirtualHostOptionList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualHostOption", varargs...)
	ret0, _ := ret[0].(*v1.VirtualHostOptionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualHostOption indicates an expected call of ListVirtualHostOption
func (mr *MockVirtualHostOptionReaderMockRecorder) ListVirtualHostOption(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualHostOption", reflect.TypeOf((*MockVirtualHostOptionReader)(nil).ListVirtualHostOption), varargs...)
}

// MockVirtualHostOptionWriter is a mock of VirtualHostOptionWriter interface
type MockVirtualHostOptionWriter struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualHostOptionWriterMockRecorder
}

// MockVirtualHostOptionWriterMockRecorder is the mock recorder for MockVirtualHostOptionWriter
type MockVirtualHostOptionWriterMockRecorder struct {
	mock *MockVirtualHostOptionWriter
}

// NewMockVirtualHostOptionWriter creates a new mock instance
func NewMockVirtualHostOptionWriter(ctrl *gomock.Controller) *MockVirtualHostOptionWriter {
	mock := &MockVirtualHostOptionWriter{ctrl: ctrl}
	mock.recorder = &MockVirtualHostOptionWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualHostOptionWriter) EXPECT() *MockVirtualHostOptionWriterMockRecorder {
	return m.recorder
}

// CreateVirtualHostOption mocks base method
func (m *MockVirtualHostOptionWriter) CreateVirtualHostOption(ctx context.Context, obj *v1.VirtualHostOption, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualHostOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualHostOption indicates an expected call of CreateVirtualHostOption
func (mr *MockVirtualHostOptionWriterMockRecorder) CreateVirtualHostOption(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualHostOption", reflect.TypeOf((*MockVirtualHostOptionWriter)(nil).CreateVirtualHostOption), varargs...)
}

// DeleteVirtualHostOption mocks base method
func (m *MockVirtualHostOptionWriter) DeleteVirtualHostOption(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualHostOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualHostOption indicates an expected call of DeleteVirtualHostOption
func (mr *MockVirtualHostOptionWriterMockRecorder) DeleteVirtualHostOption(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualHostOption", reflect.TypeOf((*MockVirtualHostOptionWriter)(nil).DeleteVirtualHostOption), varargs...)
}

// UpdateVirtualHostOption mocks base method
func (m *MockVirtualHostOptionWriter) UpdateVirtualHostOption(ctx context.Context, obj *v1.VirtualHostOption, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualHostOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualHostOption indicates an expected call of UpdateVirtualHostOption
func (mr *MockVirtualHostOptionWriterMockRecorder) UpdateVirtualHostOption(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualHostOption", reflect.TypeOf((*MockVirtualHostOptionWriter)(nil).UpdateVirtualHostOption), varargs...)
}

// PatchVirtualHostOption mocks base method
func (m *MockVirtualHostOptionWriter) PatchVirtualHostOption(ctx context.Context, obj *v1.VirtualHostOption, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualHostOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualHostOption indicates an expected call of PatchVirtualHostOption
func (mr *MockVirtualHostOptionWriterMockRecorder) PatchVirtualHostOption(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualHostOption", reflect.TypeOf((*MockVirtualHostOptionWriter)(nil).PatchVirtualHostOption), varargs...)
}

// DeleteAllOfVirtualHostOption mocks base method
func (m *MockVirtualHostOptionWriter) DeleteAllOfVirtualHostOption(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfVirtualHostOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfVirtualHostOption indicates an expected call of DeleteAllOfVirtualHostOption
func (mr *MockVirtualHostOptionWriterMockRecorder) DeleteAllOfVirtualHostOption(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfVirtualHostOption", reflect.TypeOf((*MockVirtualHostOptionWriter)(nil).DeleteAllOfVirtualHostOption), varargs...)
}

// UpsertVirtualHostOption mocks base method
func (m *MockVirtualHostOptionWriter) UpsertVirtualHostOption(ctx context.Context, obj *v1.VirtualHostOption, transitionFuncs ...v1.VirtualHostOptionTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertVirtualHostOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVirtualHostOption indicates an expected call of UpsertVirtualHostOption
func (mr *MockVirtualHostOptionWriterMockRecorder) UpsertVirtualHostOption(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVirtualHostOption", reflect.TypeOf((*MockVirtualHostOptionWriter)(nil).UpsertVirtualHostOption), varargs...)
}

// MockVirtualHostOptionStatusWriter is a mock of VirtualHostOptionStatusWriter interface
type MockVirtualHostOptionStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualHostOptionStatusWriterMockRecorder
}

// MockVirtualHostOptionStatusWriterMockRecorder is the mock recorder for MockVirtualHostOptionStatusWriter
type MockVirtualHostOptionStatusWriterMockRecorder struct {
	mock *MockVirtualHostOptionStatusWriter
}

// NewMockVirtualHostOptionStatusWriter creates a new mock instance
func NewMockVirtualHostOptionStatusWriter(ctrl *gomock.Controller) *MockVirtualHostOptionStatusWriter {
	mock := &MockVirtualHostOptionStatusWriter{ctrl: ctrl}
	mock.recorder = &MockVirtualHostOptionStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualHostOptionStatusWriter) EXPECT() *MockVirtualHostOptionStatusWriterMockRecorder {
	return m.recorder
}

// UpdateVirtualHostOptionStatus mocks base method
func (m *MockVirtualHostOptionStatusWriter) UpdateVirtualHostOptionStatus(ctx context.Context, obj *v1.VirtualHostOption, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualHostOptionStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualHostOptionStatus indicates an expected call of UpdateVirtualHostOptionStatus
func (mr *MockVirtualHostOptionStatusWriterMockRecorder) UpdateVirtualHostOptionStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualHostOptionStatus", reflect.TypeOf((*MockVirtualHostOptionStatusWriter)(nil).UpdateVirtualHostOptionStatus), varargs...)
}

// PatchVirtualHostOptionStatus mocks base method
func (m *MockVirtualHostOptionStatusWriter) PatchVirtualHostOptionStatus(ctx context.Context, obj *v1.VirtualHostOption, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualHostOptionStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualHostOptionStatus indicates an expected call of PatchVirtualHostOptionStatus
func (mr *MockVirtualHostOptionStatusWriterMockRecorder) PatchVirtualHostOptionStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualHostOptionStatus", reflect.TypeOf((*MockVirtualHostOptionStatusWriter)(nil).PatchVirtualHostOptionStatus), varargs...)
}

// MockVirtualHostOptionClient is a mock of VirtualHostOptionClient interface
type MockVirtualHostOptionClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualHostOptionClientMockRecorder
}

// MockVirtualHostOptionClientMockRecorder is the mock recorder for MockVirtualHostOptionClient
type MockVirtualHostOptionClientMockRecorder struct {
	mock *MockVirtualHostOptionClient
}

// NewMockVirtualHostOptionClient creates a new mock instance
func NewMockVirtualHostOptionClient(ctrl *gomock.Controller) *MockVirtualHostOptionClient {
	mock := &MockVirtualHostOptionClient{ctrl: ctrl}
	mock.recorder = &MockVirtualHostOptionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualHostOptionClient) EXPECT() *MockVirtualHostOptionClientMockRecorder {
	return m.recorder
}

// GetVirtualHostOption mocks base method
func (m *MockVirtualHostOptionClient) GetVirtualHostOption(ctx context.Context, key client.ObjectKey) (*v1.VirtualHostOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualHostOption", ctx, key)
	ret0, _ := ret[0].(*v1.VirtualHostOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualHostOption indicates an expected call of GetVirtualHostOption
func (mr *MockVirtualHostOptionClientMockRecorder) GetVirtualHostOption(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualHostOption", reflect.TypeOf((*MockVirtualHostOptionClient)(nil).GetVirtualHostOption), ctx, key)
}

// ListVirtualHostOption mocks base method
func (m *MockVirtualHostOptionClient) ListVirtualHostOption(ctx context.Context, opts ...client.ListOption) (*v1.VirtualHostOptionList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualHostOption", varargs...)
	ret0, _ := ret[0].(*v1.VirtualHostOptionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualHostOption indicates an expected call of ListVirtualHostOption
func (mr *MockVirtualHostOptionClientMockRecorder) ListVirtualHostOption(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualHostOption", reflect.TypeOf((*MockVirtualHostOptionClient)(nil).ListVirtualHostOption), varargs...)
}

// CreateVirtualHostOption mocks base method
func (m *MockVirtualHostOptionClient) CreateVirtualHostOption(ctx context.Context, obj *v1.VirtualHostOption, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualHostOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualHostOption indicates an expected call of CreateVirtualHostOption
func (mr *MockVirtualHostOptionClientMockRecorder) CreateVirtualHostOption(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualHostOption", reflect.TypeOf((*MockVirtualHostOptionClient)(nil).CreateVirtualHostOption), varargs...)
}

// DeleteVirtualHostOption mocks base method
func (m *MockVirtualHostOptionClient) DeleteVirtualHostOption(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualHostOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualHostOption indicates an expected call of DeleteVirtualHostOption
func (mr *MockVirtualHostOptionClientMockRecorder) DeleteVirtualHostOption(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualHostOption", reflect.TypeOf((*MockVirtualHostOptionClient)(nil).DeleteVirtualHostOption), varargs...)
}

// UpdateVirtualHostOption mocks base method
func (m *MockVirtualHostOptionClient) UpdateVirtualHostOption(ctx context.Context, obj *v1.VirtualHostOption, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualHostOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualHostOption indicates an expected call of UpdateVirtualHostOption
func (mr *MockVirtualHostOptionClientMockRecorder) UpdateVirtualHostOption(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualHostOption", reflect.TypeOf((*MockVirtualHostOptionClient)(nil).UpdateVirtualHostOption), varargs...)
}

// PatchVirtualHostOption mocks base method
func (m *MockVirtualHostOptionClient) PatchVirtualHostOption(ctx context.Context, obj *v1.VirtualHostOption, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualHostOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualHostOption indicates an expected call of PatchVirtualHostOption
func (mr *MockVirtualHostOptionClientMockRecorder) PatchVirtualHostOption(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualHostOption", reflect.TypeOf((*MockVirtualHostOptionClient)(nil).PatchVirtualHostOption), varargs...)
}

// DeleteAllOfVirtualHostOption mocks base method
func (m *MockVirtualHostOptionClient) DeleteAllOfVirtualHostOption(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfVirtualHostOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfVirtualHostOption indicates an expected call of DeleteAllOfVirtualHostOption
func (mr *MockVirtualHostOptionClientMockRecorder) DeleteAllOfVirtualHostOption(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfVirtualHostOption", reflect.TypeOf((*MockVirtualHostOptionClient)(nil).DeleteAllOfVirtualHostOption), varargs...)
}

// UpsertVirtualHostOption mocks base method
func (m *MockVirtualHostOptionClient) UpsertVirtualHostOption(ctx context.Context, obj *v1.VirtualHostOption, transitionFuncs ...v1.VirtualHostOptionTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertVirtualHostOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVirtualHostOption indicates an expected call of UpsertVirtualHostOption
func (mr *MockVirtualHostOptionClientMockRecorder) UpsertVirtualHostOption(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVirtualHostOption", reflect.TypeOf((*MockVirtualHostOptionClient)(nil).UpsertVirtualHostOption), varargs...)
}

// UpdateVirtualHostOptionStatus mocks base method
func (m *MockVirtualHostOptionClient) UpdateVirtualHostOptionStatus(ctx context.Context, obj *v1.VirtualHostOption, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualHostOptionStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualHostOptionStatus indicates an expected call of UpdateVirtualHostOptionStatus
func (mr *MockVirtualHostOptionClientMockRecorder) UpdateVirtualHostOptionStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualHostOptionStatus", reflect.TypeOf((*MockVirtualHostOptionClient)(nil).UpdateVirtualHostOptionStatus), varargs...)
}

// PatchVirtualHostOptionStatus mocks base method
func (m *MockVirtualHostOptionClient) PatchVirtualHostOptionStatus(ctx context.Context, obj *v1.VirtualHostOption, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualHostOptionStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualHostOptionStatus indicates an expected call of PatchVirtualHostOptionStatus
func (mr *MockVirtualHostOptionClientMockRecorder) PatchVirtualHostOptionStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualHostOptionStatus", reflect.TypeOf((*MockVirtualHostOptionClient)(nil).PatchVirtualHostOptionStatus), varargs...)
}

// MockMulticlusterVirtualHostOptionClient is a mock of MulticlusterVirtualHostOptionClient interface
type MockMulticlusterVirtualHostOptionClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualHostOptionClientMockRecorder
}

// MockMulticlusterVirtualHostOptionClientMockRecorder is the mock recorder for MockMulticlusterVirtualHostOptionClient
type MockMulticlusterVirtualHostOptionClientMockRecorder struct {
	mock *MockMulticlusterVirtualHostOptionClient
}

// NewMockMulticlusterVirtualHostOptionClient creates a new mock instance
func NewMockMulticlusterVirtualHostOptionClient(ctrl *gomock.Controller) *MockMulticlusterVirtualHostOptionClient {
	mock := &MockMulticlusterVirtualHostOptionClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualHostOptionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterVirtualHostOptionClient) EXPECT() *MockMulticlusterVirtualHostOptionClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterVirtualHostOptionClient) Cluster(cluster string) (v1.VirtualHostOptionClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1.VirtualHostOptionClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterVirtualHostOptionClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterVirtualHostOptionClient)(nil).Cluster), cluster)
}

// MockRouteOptionReader is a mock of RouteOptionReader interface
type MockRouteOptionReader struct {
	ctrl     *gomock.Controller
	recorder *MockRouteOptionReaderMockRecorder
}

// MockRouteOptionReaderMockRecorder is the mock recorder for MockRouteOptionReader
type MockRouteOptionReaderMockRecorder struct {
	mock *MockRouteOptionReader
}

// NewMockRouteOptionReader creates a new mock instance
func NewMockRouteOptionReader(ctrl *gomock.Controller) *MockRouteOptionReader {
	mock := &MockRouteOptionReader{ctrl: ctrl}
	mock.recorder = &MockRouteOptionReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteOptionReader) EXPECT() *MockRouteOptionReaderMockRecorder {
	return m.recorder
}

// GetRouteOption mocks base method
func (m *MockRouteOptionReader) GetRouteOption(ctx context.Context, key client.ObjectKey) (*v1.RouteOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteOption", ctx, key)
	ret0, _ := ret[0].(*v1.RouteOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteOption indicates an expected call of GetRouteOption
func (mr *MockRouteOptionReaderMockRecorder) GetRouteOption(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteOption", reflect.TypeOf((*MockRouteOptionReader)(nil).GetRouteOption), ctx, key)
}

// ListRouteOption mocks base method
func (m *MockRouteOptionReader) ListRouteOption(ctx context.Context, opts ...client.ListOption) (*v1.RouteOptionList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRouteOption", varargs...)
	ret0, _ := ret[0].(*v1.RouteOptionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouteOption indicates an expected call of ListRouteOption
func (mr *MockRouteOptionReaderMockRecorder) ListRouteOption(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouteOption", reflect.TypeOf((*MockRouteOptionReader)(nil).ListRouteOption), varargs...)
}

// MockRouteOptionWriter is a mock of RouteOptionWriter interface
type MockRouteOptionWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteOptionWriterMockRecorder
}

// MockRouteOptionWriterMockRecorder is the mock recorder for MockRouteOptionWriter
type MockRouteOptionWriterMockRecorder struct {
	mock *MockRouteOptionWriter
}

// NewMockRouteOptionWriter creates a new mock instance
func NewMockRouteOptionWriter(ctrl *gomock.Controller) *MockRouteOptionWriter {
	mock := &MockRouteOptionWriter{ctrl: ctrl}
	mock.recorder = &MockRouteOptionWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteOptionWriter) EXPECT() *MockRouteOptionWriterMockRecorder {
	return m.recorder
}

// CreateRouteOption mocks base method
func (m *MockRouteOptionWriter) CreateRouteOption(ctx context.Context, obj *v1.RouteOption, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRouteOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRouteOption indicates an expected call of CreateRouteOption
func (mr *MockRouteOptionWriterMockRecorder) CreateRouteOption(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteOption", reflect.TypeOf((*MockRouteOptionWriter)(nil).CreateRouteOption), varargs...)
}

// DeleteRouteOption mocks base method
func (m *MockRouteOptionWriter) DeleteRouteOption(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRouteOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouteOption indicates an expected call of DeleteRouteOption
func (mr *MockRouteOptionWriterMockRecorder) DeleteRouteOption(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteOption", reflect.TypeOf((*MockRouteOptionWriter)(nil).DeleteRouteOption), varargs...)
}

// UpdateRouteOption mocks base method
func (m *MockRouteOptionWriter) UpdateRouteOption(ctx context.Context, obj *v1.RouteOption, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRouteOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRouteOption indicates an expected call of UpdateRouteOption
func (mr *MockRouteOptionWriterMockRecorder) UpdateRouteOption(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteOption", reflect.TypeOf((*MockRouteOptionWriter)(nil).UpdateRouteOption), varargs...)
}

// PatchRouteOption mocks base method
func (m *MockRouteOptionWriter) PatchRouteOption(ctx context.Context, obj *v1.RouteOption, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRouteOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRouteOption indicates an expected call of PatchRouteOption
func (mr *MockRouteOptionWriterMockRecorder) PatchRouteOption(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRouteOption", reflect.TypeOf((*MockRouteOptionWriter)(nil).PatchRouteOption), varargs...)
}

// DeleteAllOfRouteOption mocks base method
func (m *MockRouteOptionWriter) DeleteAllOfRouteOption(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfRouteOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfRouteOption indicates an expected call of DeleteAllOfRouteOption
func (mr *MockRouteOptionWriterMockRecorder) DeleteAllOfRouteOption(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfRouteOption", reflect.TypeOf((*MockRouteOptionWriter)(nil).DeleteAllOfRouteOption), varargs...)
}

// UpsertRouteOption mocks base method
func (m *MockRouteOptionWriter) UpsertRouteOption(ctx context.Context, obj *v1.RouteOption, transitionFuncs ...v1.RouteOptionTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertRouteOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRouteOption indicates an expected call of UpsertRouteOption
func (mr *MockRouteOptionWriterMockRecorder) UpsertRouteOption(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRouteOption", reflect.TypeOf((*MockRouteOptionWriter)(nil).UpsertRouteOption), varargs...)
}

// MockRouteOptionStatusWriter is a mock of RouteOptionStatusWriter interface
type MockRouteOptionStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteOptionStatusWriterMockRecorder
}

// MockRouteOptionStatusWriterMockRecorder is the mock recorder for MockRouteOptionStatusWriter
type MockRouteOptionStatusWriterMockRecorder struct {
	mock *MockRouteOptionStatusWriter
}

// NewMockRouteOptionStatusWriter creates a new mock instance
func NewMockRouteOptionStatusWriter(ctrl *gomock.Controller) *MockRouteOptionStatusWriter {
	mock := &MockRouteOptionStatusWriter{ctrl: ctrl}
	mock.recorder = &MockRouteOptionStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteOptionStatusWriter) EXPECT() *MockRouteOptionStatusWriterMockRecorder {
	return m.recorder
}

// UpdateRouteOptionStatus mocks base method
func (m *MockRouteOptionStatusWriter) UpdateRouteOptionStatus(ctx context.Context, obj *v1.RouteOption, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRouteOptionStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRouteOptionStatus indicates an expected call of UpdateRouteOptionStatus
func (mr *MockRouteOptionStatusWriterMockRecorder) UpdateRouteOptionStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteOptionStatus", reflect.TypeOf((*MockRouteOptionStatusWriter)(nil).UpdateRouteOptionStatus), varargs...)
}

// PatchRouteOptionStatus mocks base method
func (m *MockRouteOptionStatusWriter) PatchRouteOptionStatus(ctx context.Context, obj *v1.RouteOption, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRouteOptionStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRouteOptionStatus indicates an expected call of PatchRouteOptionStatus
func (mr *MockRouteOptionStatusWriterMockRecorder) PatchRouteOptionStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRouteOptionStatus", reflect.TypeOf((*MockRouteOptionStatusWriter)(nil).PatchRouteOptionStatus), varargs...)
}

// MockRouteOptionClient is a mock of RouteOptionClient interface
type MockRouteOptionClient struct {
	ctrl     *gomock.Controller
	recorder *MockRouteOptionClientMockRecorder
}

// MockRouteOptionClientMockRecorder is the mock recorder for MockRouteOptionClient
type MockRouteOptionClientMockRecorder struct {
	mock *MockRouteOptionClient
}

// NewMockRouteOptionClient creates a new mock instance
func NewMockRouteOptionClient(ctrl *gomock.Controller) *MockRouteOptionClient {
	mock := &MockRouteOptionClient{ctrl: ctrl}
	mock.recorder = &MockRouteOptionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteOptionClient) EXPECT() *MockRouteOptionClientMockRecorder {
	return m.recorder
}

// GetRouteOption mocks base method
func (m *MockRouteOptionClient) GetRouteOption(ctx context.Context, key client.ObjectKey) (*v1.RouteOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteOption", ctx, key)
	ret0, _ := ret[0].(*v1.RouteOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteOption indicates an expected call of GetRouteOption
func (mr *MockRouteOptionClientMockRecorder) GetRouteOption(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteOption", reflect.TypeOf((*MockRouteOptionClient)(nil).GetRouteOption), ctx, key)
}

// ListRouteOption mocks base method
func (m *MockRouteOptionClient) ListRouteOption(ctx context.Context, opts ...client.ListOption) (*v1.RouteOptionList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRouteOption", varargs...)
	ret0, _ := ret[0].(*v1.RouteOptionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouteOption indicates an expected call of ListRouteOption
func (mr *MockRouteOptionClientMockRecorder) ListRouteOption(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouteOption", reflect.TypeOf((*MockRouteOptionClient)(nil).ListRouteOption), varargs...)
}

// CreateRouteOption mocks base method
func (m *MockRouteOptionClient) CreateRouteOption(ctx context.Context, obj *v1.RouteOption, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRouteOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRouteOption indicates an expected call of CreateRouteOption
func (mr *MockRouteOptionClientMockRecorder) CreateRouteOption(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteOption", reflect.TypeOf((*MockRouteOptionClient)(nil).CreateRouteOption), varargs...)
}

// DeleteRouteOption mocks base method
func (m *MockRouteOptionClient) DeleteRouteOption(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRouteOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouteOption indicates an expected call of DeleteRouteOption
func (mr *MockRouteOptionClientMockRecorder) DeleteRouteOption(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteOption", reflect.TypeOf((*MockRouteOptionClient)(nil).DeleteRouteOption), varargs...)
}

// UpdateRouteOption mocks base method
func (m *MockRouteOptionClient) UpdateRouteOption(ctx context.Context, obj *v1.RouteOption, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRouteOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRouteOption indicates an expected call of UpdateRouteOption
func (mr *MockRouteOptionClientMockRecorder) UpdateRouteOption(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteOption", reflect.TypeOf((*MockRouteOptionClient)(nil).UpdateRouteOption), varargs...)
}

// PatchRouteOption mocks base method
func (m *MockRouteOptionClient) PatchRouteOption(ctx context.Context, obj *v1.RouteOption, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRouteOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRouteOption indicates an expected call of PatchRouteOption
func (mr *MockRouteOptionClientMockRecorder) PatchRouteOption(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRouteOption", reflect.TypeOf((*MockRouteOptionClient)(nil).PatchRouteOption), varargs...)
}

// DeleteAllOfRouteOption mocks base method
func (m *MockRouteOptionClient) DeleteAllOfRouteOption(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfRouteOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfRouteOption indicates an expected call of DeleteAllOfRouteOption
func (mr *MockRouteOptionClientMockRecorder) DeleteAllOfRouteOption(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfRouteOption", reflect.TypeOf((*MockRouteOptionClient)(nil).DeleteAllOfRouteOption), varargs...)
}

// UpsertRouteOption mocks base method
func (m *MockRouteOptionClient) UpsertRouteOption(ctx context.Context, obj *v1.RouteOption, transitionFuncs ...v1.RouteOptionTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertRouteOption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRouteOption indicates an expected call of UpsertRouteOption
func (mr *MockRouteOptionClientMockRecorder) UpsertRouteOption(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRouteOption", reflect.TypeOf((*MockRouteOptionClient)(nil).UpsertRouteOption), varargs...)
}

// UpdateRouteOptionStatus mocks base method
func (m *MockRouteOptionClient) UpdateRouteOptionStatus(ctx context.Context, obj *v1.RouteOption, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRouteOptionStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRouteOptionStatus indicates an expected call of UpdateRouteOptionStatus
func (mr *MockRouteOptionClientMockRecorder) UpdateRouteOptionStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteOptionStatus", reflect.TypeOf((*MockRouteOptionClient)(nil).UpdateRouteOptionStatus), varargs...)
}

// PatchRouteOptionStatus mocks base method
func (m *MockRouteOptionClient) PatchRouteOptionStatus(ctx context.Context, obj *v1.RouteOption, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRouteOptionStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRouteOptionStatus indicates an expected call of PatchRouteOptionStatus
func (mr *MockRouteOptionClientMockRecorder) PatchRouteOptionStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRouteOptionStatus", reflect.TypeOf((*MockRouteOptionClient)(nil).PatchRouteOptionStatus), varargs...)
}

// MockMulticlusterRouteOptionClient is a mock of MulticlusterRouteOptionClient interface
type MockMulticlusterRouteOptionClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRouteOptionClientMockRecorder
}

// MockMulticlusterRouteOptionClientMockRecorder is the mock recorder for MockMulticlusterRouteOptionClient
type MockMulticlusterRouteOptionClientMockRecorder struct {
	mock *MockMulticlusterRouteOptionClient
}

// NewMockMulticlusterRouteOptionClient creates a new mock instance
func NewMockMulticlusterRouteOptionClient(ctrl *gomock.Controller) *MockMulticlusterRouteOptionClient {
	mock := &MockMulticlusterRouteOptionClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRouteOptionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterRouteOptionClient) EXPECT() *MockMulticlusterRouteOptionClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterRouteOptionClient) Cluster(cluster string) (v1.RouteOptionClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1.RouteOptionClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterRouteOptionClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterRouteOptionClient)(nil).Cluster), cluster)
}
