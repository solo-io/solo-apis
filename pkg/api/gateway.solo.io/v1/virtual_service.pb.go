// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gateway/v1/virtual_service.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v1 "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1"
	matchers "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1/core/matchers"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Route Table Selector expression operator, while the set-based syntax differs from Kubernetes (kubernetes: `key: !mylabel`, gloo: `key: mylabel, operator: "!"` | kubernetes: `key: mylabel`, gloo: `key: mylabel, operator: exists`), the functionality remains the same.
type RouteTableSelector_Expression_Operator int32

const (
	// =
	RouteTableSelector_Expression_Equals RouteTableSelector_Expression_Operator = 0
	// ==
	RouteTableSelector_Expression_DoubleEquals RouteTableSelector_Expression_Operator = 1
	// !=
	RouteTableSelector_Expression_NotEquals RouteTableSelector_Expression_Operator = 2
	// in
	RouteTableSelector_Expression_In RouteTableSelector_Expression_Operator = 3
	// notin
	RouteTableSelector_Expression_NotIn RouteTableSelector_Expression_Operator = 4
	// exists
	RouteTableSelector_Expression_Exists RouteTableSelector_Expression_Operator = 5
	// !
	RouteTableSelector_Expression_DoesNotExist RouteTableSelector_Expression_Operator = 6
	// gt
	RouteTableSelector_Expression_GreaterThan RouteTableSelector_Expression_Operator = 7
	// lt
	RouteTableSelector_Expression_LessThan RouteTableSelector_Expression_Operator = 8
)

var RouteTableSelector_Expression_Operator_name = map[int32]string{
	0: "Equals",
	1: "DoubleEquals",
	2: "NotEquals",
	3: "In",
	4: "NotIn",
	5: "Exists",
	6: "DoesNotExist",
	7: "GreaterThan",
	8: "LessThan",
}

var RouteTableSelector_Expression_Operator_value = map[string]int32{
	"Equals":       0,
	"DoubleEquals": 1,
	"NotEquals":    2,
	"In":           3,
	"NotIn":        4,
	"Exists":       5,
	"DoesNotExist": 6,
	"GreaterThan":  7,
	"LessThan":     8,
}

func (x RouteTableSelector_Expression_Operator) String() string {
	return proto.EnumName(RouteTableSelector_Expression_Operator_name, int32(x))
}

func (RouteTableSelector_Expression_Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c7c584cb5e4b2e8b, []int{4, 1, 0}
}

type VirtualServiceStatus_State int32

const (
	// Pending status indicates the resource has not yet been validated
	VirtualServiceStatus_Pending VirtualServiceStatus_State = 0
	// Accepted indicates the resource has been validated
	VirtualServiceStatus_Accepted VirtualServiceStatus_State = 1
	// Rejected indicates an invalid configuration by the user
	// Rejected resources may be propagated to the xDS server depending on their severity
	VirtualServiceStatus_Rejected VirtualServiceStatus_State = 2
	// Warning indicates a partially invalid configuration by the user
	// Resources with Warnings may be partially accepted by a controller, depending on the implementation
	VirtualServiceStatus_Warning VirtualServiceStatus_State = 3
)

var VirtualServiceStatus_State_name = map[int32]string{
	0: "Pending",
	1: "Accepted",
	2: "Rejected",
	3: "Warning",
}

var VirtualServiceStatus_State_value = map[string]int32{
	"Pending":  0,
	"Accepted": 1,
	"Rejected": 2,
	"Warning":  3,
}

func (x VirtualServiceStatus_State) String() string {
	return proto.EnumName(VirtualServiceStatus_State_name, int32(x))
}

func (VirtualServiceStatus_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c7c584cb5e4b2e8b, []int{5, 0}
}

//
//
// The **VirtualService** is the root routing object for the Gloo Gateway.
// A virtual service describes the set of routes to match for a set of domains.
//
// It defines:
// - a set of domains
// - the root set of routes for those domains
// - an optional SSL configuration for server TLS Termination
// - VirtualHostOptions that will apply configuration to all routes that live on the VirtualService.
//
// Domains must be unique across all virtual services within a gateway (i.e. no overlap between sets).
//
// VirtualServices can delegate routing behavior to the RouteTable resource by using the `delegateAction` on routes.
//
// An example configuration using two VirtualServices (one with TLS termination and one without) which share
// a RouteTable looks as follows:
//
// ```yaml
// # HTTP VirtualService:
// apiVersion: gateway.solo.io/v1
// kind: VirtualService
// metadata:
//   name: 'http'
//   namespace: 'usernamespace'
// spec:
//   virtualHost:
//     domains:
//     - '*.mydomain.com'
//     - 'mydomain.com'
//     routes:
//     - matchers:
//       - prefix: '/'
//       # delegate all traffic to the `shared-routes` RouteTable
//       delegateAction:
//         ref:
//           name: 'shared-routes'
//           namespace: 'usernamespace'
//
// ```
//
// ```yaml
// # HTTPS VirtualService:
// apiVersion: gateway.solo.io/v1
// kind: VirtualService
// metadata:
//   name: 'https'
//   namespace: 'usernamespace'
// spec:
//   virtualHost:
//     domains:
//     - '*.mydomain.com'
//     - 'mydomain.com'
//     routes:
//     - matchers:
//       - prefix: '/'
//       # delegate all traffic to the `shared-routes` RouteTable
//       delegateAction:
//         ref:
//           name: 'shared-routes'
//           namespace: 'usernamespace'
//   sslConfig:
//     secretRef:
//       name: gateway-tls
//       namespace: gloo-system
//
// ```
//
// ```yaml
// # the RouteTable shared by both VirtualServices:
// apiVersion: gateway.solo.io/v1
// kind: RouteTable
// metadata:
//   name: 'shared-routes'
//   namespace: 'usernamespace'
// spec:
//   routes:
//     - matchers:
//       - prefix: '/some-route'
//       routeAction:
//         single:
//           upstream:
//             name: 'some-upstream'
//      ...
// ```
//
// **Delegated Routes** are routes that use the `delegateAction` routing action. Delegated Routes obey the following
// constraints:
//
// - delegate routes must use `prefix` path matchers
// - delegated routes cannot specify header, query, or methods portion of the normal route matcher.
// - `routeOptions` configuration will be inherited from parent routes, but can be overridden by the child
//
type VirtualServiceSpec struct {
	// The VirtualHost contains the
	// The list of HTTP routes define routing actions to be taken
	// for incoming HTTP requests whose host header matches
	// this virtual host. If the request matches more than one route in the list, the first route matched will be selected.
	// If the list of routes is empty, the virtual host will be ignored by Gloo.
	VirtualHost *VirtualHost `protobuf:"bytes,1,opt,name=virtual_host,json=virtualHost,proto3" json:"virtual_host,omitempty"`
	// If provided, the Gateway will serve TLS/SSL traffic for this set of routes
	SslConfig *v1.SslConfig `protobuf:"bytes,2,opt,name=ssl_config,json=sslConfig,proto3" json:"ssl_config,omitempty"`
	// Display only, optional descriptive name.
	// Unlike metadata.name, DisplayName can be any string
	// and can be changed after creating the resource.
	DisplayName          string   `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VirtualServiceSpec) Reset()         { *m = VirtualServiceSpec{} }
func (m *VirtualServiceSpec) String() string { return proto.CompactTextString(m) }
func (*VirtualServiceSpec) ProtoMessage()    {}
func (*VirtualServiceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7c584cb5e4b2e8b, []int{0}
}
func (m *VirtualServiceSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualServiceSpec.Unmarshal(m, b)
}
func (m *VirtualServiceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualServiceSpec.Marshal(b, m, deterministic)
}
func (m *VirtualServiceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualServiceSpec.Merge(m, src)
}
func (m *VirtualServiceSpec) XXX_Size() int {
	return xxx_messageInfo_VirtualServiceSpec.Size(m)
}
func (m *VirtualServiceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualServiceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualServiceSpec proto.InternalMessageInfo

func (m *VirtualServiceSpec) GetVirtualHost() *VirtualHost {
	if m != nil {
		return m.VirtualHost
	}
	return nil
}

func (m *VirtualServiceSpec) GetSslConfig() *v1.SslConfig {
	if m != nil {
		return m.SslConfig
	}
	return nil
}

func (m *VirtualServiceSpec) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

//
//Virtual Hosts serve an ordered list of routes for a set of domains.
//
//An HTTP request is first matched to a virtual host based on its host header, then to a route within the virtual host.
//
//If a request is not matched to any virtual host or a route therein, the target proxy will reply with a 404.
//
//Unlike the [Gloo Virtual Host]({{< ref "/reference/api/github.com/solo-io/solo-apis/api/gloo/gloo/v1/proxy.proto.sk.md" >}}/#virtualhost),
//Gateway* Virtual Hosts can **delegate** their routes to `RouteTables`.
//
type VirtualHost struct {
	// The list of domains (i.e.: matching the `Host` header of a request) that belong to this virtual host.
	// Note that the wildcard will not match the empty string. e.g. “*-bar.foo.com” will match “baz-bar.foo.com”
	// but not “-bar.foo.com”. Additionally, a special entry “*” is allowed which will match any host/authority header.
	// Only a single virtual host on a gateway can match on “*”. A domain must be unique across all
	// virtual hosts on a gateway or the config will be invalidated by Gloo
	// Domains on virtual hosts obey the same rules as [Envoy Virtual Hosts](https://github.com/envoyproxy/envoy/blob/master/api/envoy/api/v2/route/route.proto)
	Domains []string `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
	// The list of HTTP routes define routing actions to be taken for incoming HTTP requests whose host header matches
	// this virtual host. If the request matches more than one route in the list, the first route matched will be selected.
	// If the list of routes is empty, the virtual host will be ignored by Gloo.
	Routes []*Route `protobuf:"bytes,3,rep,name=routes,proto3" json:"routes,omitempty"`
	// Virtual host options contain additional configuration to be applied to all traffic served by the Virtual Host.
	// Some configuration here can be overridden by Route Options.
	Options              *v1.VirtualHostOptions `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *VirtualHost) Reset()         { *m = VirtualHost{} }
func (m *VirtualHost) String() string { return proto.CompactTextString(m) }
func (*VirtualHost) ProtoMessage()    {}
func (*VirtualHost) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7c584cb5e4b2e8b, []int{1}
}
func (m *VirtualHost) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualHost.Unmarshal(m, b)
}
func (m *VirtualHost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualHost.Marshal(b, m, deterministic)
}
func (m *VirtualHost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualHost.Merge(m, src)
}
func (m *VirtualHost) XXX_Size() int {
	return xxx_messageInfo_VirtualHost.Size(m)
}
func (m *VirtualHost) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualHost.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualHost proto.InternalMessageInfo

func (m *VirtualHost) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *VirtualHost) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *VirtualHost) GetOptions() *v1.VirtualHostOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

//
// A route specifies how to match a request and what action to take when the request is matched.
//
// When a request matches on a route, the route can perform one of the following actions:
// - *Route* the request to a destination
// - Reply with a *Direct Response*
// - Send a *Redirect* response to the client
// - *Delegate* the action for the request to one or more top-level [`RouteTable`]({{< ref "/reference/api/github.com/solo-io/solo-apis/api/gloo/gateway/v1/route_table.proto.sk.md" >}}) resources
// DelegateActions can be used to delegate the behavior for a set out routes with a given *prefix* to
// top-level `RouteTable` resources.
type Route struct {
	// Matchers contain parameters for matching requests (i.e., based on HTTP path, headers, etc.)
	// If empty, the route will match all requests (i.e, a single "/" path prefix matcher)
	// For delegated routes, the matcher must contain only a `prefix` path matcher and no other config
	Matchers []*matchers.Matcher `protobuf:"bytes,1,rep,name=matchers,proto3" json:"matchers,omitempty"`
	// The Route Action Defines what action the proxy should take when a request matches the route.
	//
	// Types that are valid to be assigned to Action:
	//	*Route_RouteAction
	//	*Route_RedirectAction
	//	*Route_DirectResponseAction
	//	*Route_DelegateAction
	Action isRoute_Action `protobuf_oneof:"action"`
	// Route Options extend the behavior of routes.
	// Route options include configuration such as retries, rate limiting, and request/response transformation.
	// RouteOption behavior will be inherited by delegated routes which do not specify their own `options`
	Options *v1.RouteOptions `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	// The name provides a convenience for users to be able to refer to a route by name.
	Name                 string   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7c584cb5e4b2e8b, []int{2}
}
func (m *Route) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route.Unmarshal(m, b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route.Marshal(b, m, deterministic)
}
func (m *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(m, src)
}
func (m *Route) XXX_Size() int {
	return xxx_messageInfo_Route.Size(m)
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

type isRoute_Action interface {
	isRoute_Action()
	Equal(interface{}) bool
}

type Route_RouteAction struct {
	RouteAction *v1.RouteAction `protobuf:"bytes,2,opt,name=route_action,json=routeAction,proto3,oneof" json:"route_action,omitempty"`
}
type Route_RedirectAction struct {
	RedirectAction *v1.RedirectAction `protobuf:"bytes,3,opt,name=redirect_action,json=redirectAction,proto3,oneof" json:"redirect_action,omitempty"`
}
type Route_DirectResponseAction struct {
	DirectResponseAction *v1.DirectResponseAction `protobuf:"bytes,4,opt,name=direct_response_action,json=directResponseAction,proto3,oneof" json:"direct_response_action,omitempty"`
}
type Route_DelegateAction struct {
	DelegateAction *DelegateAction `protobuf:"bytes,5,opt,name=delegate_action,json=delegateAction,proto3,oneof" json:"delegate_action,omitempty"`
}

func (*Route_RouteAction) isRoute_Action()          {}
func (*Route_RedirectAction) isRoute_Action()       {}
func (*Route_DirectResponseAction) isRoute_Action() {}
func (*Route_DelegateAction) isRoute_Action()       {}

func (m *Route) GetAction() isRoute_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *Route) GetMatchers() []*matchers.Matcher {
	if m != nil {
		return m.Matchers
	}
	return nil
}

func (m *Route) GetRouteAction() *v1.RouteAction {
	if x, ok := m.GetAction().(*Route_RouteAction); ok {
		return x.RouteAction
	}
	return nil
}

func (m *Route) GetRedirectAction() *v1.RedirectAction {
	if x, ok := m.GetAction().(*Route_RedirectAction); ok {
		return x.RedirectAction
	}
	return nil
}

func (m *Route) GetDirectResponseAction() *v1.DirectResponseAction {
	if x, ok := m.GetAction().(*Route_DirectResponseAction); ok {
		return x.DirectResponseAction
	}
	return nil
}

func (m *Route) GetDelegateAction() *DelegateAction {
	if x, ok := m.GetAction().(*Route_DelegateAction); ok {
		return x.DelegateAction
	}
	return nil
}

func (m *Route) GetOptions() *v1.RouteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *Route) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Route) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Route_RouteAction)(nil),
		(*Route_RedirectAction)(nil),
		(*Route_DirectResponseAction)(nil),
		(*Route_DelegateAction)(nil),
	}
}

// DelegateActions are used to delegate routing decisions to Route Tables.
type DelegateAction struct {
	// The name of the Route Table to delegate to.
	// Deprecated: these fields have been added for backwards-compatibility. Please use the `single` field. If `name`
	// and/or `namespace` have been specified, Gloo will ignore `single` and `selector`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Deprecated: Do not use.
	// The namespace of the Route Table to delegate to.
	// Deprecated: these fields have been added for backwards-compatibility. Please use the `single` field. If `name`
	// and/or `namespace` have been specified, Gloo will ignore `single` and `selector`.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"` // Deprecated: Do not use.
	// Types that are valid to be assigned to DelegationType:
	//	*DelegateAction_Ref
	//	*DelegateAction_Selector
	DelegationType       isDelegateAction_DelegationType `protobuf_oneof:"delegation_type"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *DelegateAction) Reset()         { *m = DelegateAction{} }
func (m *DelegateAction) String() string { return proto.CompactTextString(m) }
func (*DelegateAction) ProtoMessage()    {}
func (*DelegateAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7c584cb5e4b2e8b, []int{3}
}
func (m *DelegateAction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DelegateAction.Unmarshal(m, b)
}
func (m *DelegateAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DelegateAction.Marshal(b, m, deterministic)
}
func (m *DelegateAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegateAction.Merge(m, src)
}
func (m *DelegateAction) XXX_Size() int {
	return xxx_messageInfo_DelegateAction.Size(m)
}
func (m *DelegateAction) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegateAction.DiscardUnknown(m)
}

var xxx_messageInfo_DelegateAction proto.InternalMessageInfo

type isDelegateAction_DelegationType interface {
	isDelegateAction_DelegationType()
	Equal(interface{}) bool
}

type DelegateAction_Ref struct {
	Ref *core.ResourceRef `protobuf:"bytes,3,opt,name=ref,proto3,oneof" json:"ref,omitempty"`
}
type DelegateAction_Selector struct {
	Selector *RouteTableSelector `protobuf:"bytes,4,opt,name=selector,proto3,oneof" json:"selector,omitempty"`
}

func (*DelegateAction_Ref) isDelegateAction_DelegationType()      {}
func (*DelegateAction_Selector) isDelegateAction_DelegationType() {}

func (m *DelegateAction) GetDelegationType() isDelegateAction_DelegationType {
	if m != nil {
		return m.DelegationType
	}
	return nil
}

// Deprecated: Do not use.
func (m *DelegateAction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Deprecated: Do not use.
func (m *DelegateAction) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DelegateAction) GetRef() *core.ResourceRef {
	if x, ok := m.GetDelegationType().(*DelegateAction_Ref); ok {
		return x.Ref
	}
	return nil
}

func (m *DelegateAction) GetSelector() *RouteTableSelector {
	if x, ok := m.GetDelegationType().(*DelegateAction_Selector); ok {
		return x.Selector
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DelegateAction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DelegateAction_Ref)(nil),
		(*DelegateAction_Selector)(nil),
	}
}

// Select route tables for delegation by namespace, labels, or both.
type RouteTableSelector struct {
	// Delegate to Route Tables in these namespaces. If omitted, Gloo will only select Route Tables in the same namespace
	// as the resource (Virtual Service or Route Table) that owns this selector. The reserved value "*" can be used to
	// select Route Tables in all namespaces watched by Gloo.
	Namespaces []string `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// Delegate to Route Tables whose labels match the ones specified here.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Expressions allow for more flexible Route Tables label matching, such as equality-based requirements, set-based requirements, or a combination of both.
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#equality-based-requirement
	Expressions          []*RouteTableSelector_Expression `protobuf:"bytes,3,rep,name=expressions,proto3" json:"expressions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *RouteTableSelector) Reset()         { *m = RouteTableSelector{} }
func (m *RouteTableSelector) String() string { return proto.CompactTextString(m) }
func (*RouteTableSelector) ProtoMessage()    {}
func (*RouteTableSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7c584cb5e4b2e8b, []int{4}
}
func (m *RouteTableSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableSelector.Unmarshal(m, b)
}
func (m *RouteTableSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableSelector.Marshal(b, m, deterministic)
}
func (m *RouteTableSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableSelector.Merge(m, src)
}
func (m *RouteTableSelector) XXX_Size() int {
	return xxx_messageInfo_RouteTableSelector.Size(m)
}
func (m *RouteTableSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableSelector.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableSelector proto.InternalMessageInfo

func (m *RouteTableSelector) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *RouteTableSelector) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *RouteTableSelector) GetExpressions() []*RouteTableSelector_Expression {
	if m != nil {
		return m.Expressions
	}
	return nil
}

type RouteTableSelector_Expression struct {
	// Kubernetes label key, must conform to Kubernetes syntax requirements
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The operator can only be in, notin, =, ==, !=, exists, ! (DoesNotExist), gt (GreaterThan), lt (LessThan).
	Operator             RouteTableSelector_Expression_Operator `protobuf:"varint,2,opt,name=operator,proto3,enum=gateway.solo.io.RouteTableSelector_Expression_Operator" json:"operator,omitempty"`
	Values               []string                               `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *RouteTableSelector_Expression) Reset()         { *m = RouteTableSelector_Expression{} }
func (m *RouteTableSelector_Expression) String() string { return proto.CompactTextString(m) }
func (*RouteTableSelector_Expression) ProtoMessage()    {}
func (*RouteTableSelector_Expression) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7c584cb5e4b2e8b, []int{4, 1}
}
func (m *RouteTableSelector_Expression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableSelector_Expression.Unmarshal(m, b)
}
func (m *RouteTableSelector_Expression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableSelector_Expression.Marshal(b, m, deterministic)
}
func (m *RouteTableSelector_Expression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableSelector_Expression.Merge(m, src)
}
func (m *RouteTableSelector_Expression) XXX_Size() int {
	return xxx_messageInfo_RouteTableSelector_Expression.Size(m)
}
func (m *RouteTableSelector_Expression) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableSelector_Expression.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableSelector_Expression proto.InternalMessageInfo

func (m *RouteTableSelector_Expression) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RouteTableSelector_Expression) GetOperator() RouteTableSelector_Expression_Operator {
	if m != nil {
		return m.Operator
	}
	return RouteTableSelector_Expression_Equals
}

func (m *RouteTableSelector_Expression) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type VirtualServiceStatus struct {
	// State is the enum indicating the state of the resource
	State VirtualServiceStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=gateway.solo.io.VirtualServiceStatus_State" json:"state,omitempty"`
	// Reason is a description of the error for Rejected resources. If the resource is pending or accepted, this field will be empty
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// Reference to the reporter who wrote this status
	ReportedBy string `protobuf:"bytes,3,opt,name=reported_by,json=reportedBy,proto3" json:"reported_by,omitempty"`
	// Reference to statuses (by resource-ref string: "Kind.Namespace.Name") of subresources of the parent resource
	SubresourceStatuses map[string]*VirtualServiceStatus `protobuf:"bytes,4,rep,name=subresource_statuses,json=subresourceStatuses,proto3" json:"subresource_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Opaque details about status results
	Details              *types.Struct `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *VirtualServiceStatus) Reset()         { *m = VirtualServiceStatus{} }
func (m *VirtualServiceStatus) String() string { return proto.CompactTextString(m) }
func (*VirtualServiceStatus) ProtoMessage()    {}
func (*VirtualServiceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7c584cb5e4b2e8b, []int{5}
}
func (m *VirtualServiceStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualServiceStatus.Unmarshal(m, b)
}
func (m *VirtualServiceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualServiceStatus.Marshal(b, m, deterministic)
}
func (m *VirtualServiceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualServiceStatus.Merge(m, src)
}
func (m *VirtualServiceStatus) XXX_Size() int {
	return xxx_messageInfo_VirtualServiceStatus.Size(m)
}
func (m *VirtualServiceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualServiceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualServiceStatus proto.InternalMessageInfo

func (m *VirtualServiceStatus) GetState() VirtualServiceStatus_State {
	if m != nil {
		return m.State
	}
	return VirtualServiceStatus_Pending
}

func (m *VirtualServiceStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *VirtualServiceStatus) GetReportedBy() string {
	if m != nil {
		return m.ReportedBy
	}
	return ""
}

func (m *VirtualServiceStatus) GetSubresourceStatuses() map[string]*VirtualServiceStatus {
	if m != nil {
		return m.SubresourceStatuses
	}
	return nil
}

func (m *VirtualServiceStatus) GetDetails() *types.Struct {
	if m != nil {
		return m.Details
	}
	return nil
}

func init() {
	proto.RegisterEnum("gateway.solo.io.RouteTableSelector_Expression_Operator", RouteTableSelector_Expression_Operator_name, RouteTableSelector_Expression_Operator_value)
	proto.RegisterEnum("gateway.solo.io.VirtualServiceStatus_State", VirtualServiceStatus_State_name, VirtualServiceStatus_State_value)
	proto.RegisterType((*VirtualServiceSpec)(nil), "gateway.solo.io.VirtualServiceSpec")
	proto.RegisterType((*VirtualHost)(nil), "gateway.solo.io.VirtualHost")
	proto.RegisterType((*Route)(nil), "gateway.solo.io.Route")
	proto.RegisterType((*DelegateAction)(nil), "gateway.solo.io.DelegateAction")
	proto.RegisterType((*RouteTableSelector)(nil), "gateway.solo.io.RouteTableSelector")
	proto.RegisterMapType((map[string]string)(nil), "gateway.solo.io.RouteTableSelector.LabelsEntry")
	proto.RegisterType((*RouteTableSelector_Expression)(nil), "gateway.solo.io.RouteTableSelector.Expression")
	proto.RegisterType((*VirtualServiceStatus)(nil), "gateway.solo.io.VirtualServiceStatus")
	proto.RegisterMapType((map[string]*VirtualServiceStatus)(nil), "gateway.solo.io.VirtualServiceStatus.SubresourceStatusesEntry")
}

func init() {
	proto.RegisterFile("github.com/solo-io/solo-apis/api/gloo/gateway/v1/virtual_service.proto", fileDescriptor_c7c584cb5e4b2e8b)
}

var fileDescriptor_c7c584cb5e4b2e8b = []byte{
	// 1084 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x6e, 0x1b, 0xc5,
	0x17, 0xcf, 0xda, 0xf1, 0xd7, 0xd9, 0xfc, 0x13, 0xff, 0x87, 0x28, 0x75, 0xad, 0xaa, 0xb5, 0x5c,
	0x3e, 0x22, 0xa1, 0xee, 0x2a, 0x06, 0x51, 0x28, 0xa2, 0x55, 0x42, 0x4b, 0x53, 0x54, 0xda, 0x6a,
	0x5c, 0x81, 0xd4, 0x1b, 0x6b, 0xbc, 0x3e, 0x71, 0x96, 0xae, 0x77, 0xb6, 0x33, 0x63, 0x13, 0x3f,
	0x01, 0x0f, 0x80, 0x78, 0x01, 0xae, 0x78, 0x02, 0xc4, 0x4b, 0x20, 0xde, 0x81, 0x0b, 0xde, 0x80,
	0x7b, 0x34, 0x1f, 0xbb, 0xb6, 0x13, 0x37, 0x0a, 0x37, 0xf6, 0x9c, 0x73, 0x7e, 0xbf, 0xdf, 0x9c,
	0x39, 0xe7, 0xec, 0xee, 0xc0, 0x57, 0xe3, 0x58, 0x9d, 0x4e, 0x87, 0x41, 0xc4, 0x27, 0xa1, 0xe4,
	0x09, 0xbf, 0x13, 0x73, 0xfb, 0xcf, 0xb2, 0x58, 0x86, 0x2c, 0x8b, 0xc3, 0x71, 0xc2, 0x79, 0x38,
	0x66, 0x0a, 0x7f, 0x60, 0xf3, 0x70, 0x76, 0x10, 0xce, 0x62, 0xa1, 0xa6, 0x2c, 0x19, 0x48, 0x14,
	0xb3, 0x38, 0xc2, 0x20, 0x13, 0x5c, 0x71, 0xb2, 0xe3, 0x10, 0x81, 0x26, 0x07, 0x31, 0x6f, 0xdf,
	0x18, 0x73, 0x3e, 0x4e, 0x30, 0x34, 0xe1, 0xe1, 0xf4, 0x24, 0x94, 0x4a, 0x4c, 0x23, 0x65, 0xe1,
	0xed, 0xdd, 0x31, 0x1f, 0x73, 0xb3, 0x0c, 0xf5, 0xca, 0x79, 0x09, 0x9e, 0x29, 0xeb, 0xc4, 0xb3,
	0x1c, 0x79, 0xdd, 0x64, 0xf3, 0x3a, 0x56, 0x26, 0x99, 0xd9, 0x41, 0x28, 0xf0, 0xc4, 0x85, 0x6e,
	0x9e, 0x0f, 0xe5, 0xb6, 0x8b, 0xbf, 0xbb, 0xee, 0x20, 0xfa, 0x47, 0x43, 0x65, 0xe2, 0x50, 0xef,
	0x5f, 0x82, 0xca, 0x04, 0x3f, 0x9b, 0x3b, 0xdc, 0xfe, 0x25, 0x38, 0x9e, 0xa9, 0x98, 0xa7, 0xd2,
	0x21, 0xef, 0x5e, 0x82, 0x8c, 0xb8, 0xc0, 0x70, 0xc2, 0x54, 0x74, 0x8a, 0x42, 0x16, 0x0b, 0x4b,
	0xec, 0xfe, 0xe6, 0x01, 0xf9, 0xd6, 0x96, 0xb7, 0x6f, 0xab, 0xdb, 0xcf, 0x30, 0x22, 0x0f, 0x60,
	0x2b, 0x2f, 0xfa, 0x29, 0x97, 0xaa, 0xe5, 0x75, 0xbc, 0x7d, 0xbf, 0x77, 0x23, 0x38, 0x57, 0xf2,
	0xc0, 0x51, 0x8f, 0xb9, 0x54, 0xd4, 0x9f, 0x2d, 0x0c, 0xf2, 0x09, 0x80, 0x94, 0xc9, 0x20, 0xe2,
	0xe9, 0x49, 0x3c, 0x6e, 0x95, 0x0c, 0xfd, 0x5a, 0xa0, 0x53, 0x2a, 0xb8, 0x7d, 0x99, 0x7c, 0x69,
	0xc2, 0xb4, 0x21, 0xf3, 0x25, 0xf9, 0x00, 0xb6, 0x46, 0xb1, 0xcc, 0x12, 0x36, 0x1f, 0xa4, 0x6c,
	0x82, 0xad, 0x72, 0xc7, 0xdb, 0x6f, 0x1c, 0x6d, 0xfe, 0xfe, 0xcf, 0xa6, 0x47, 0x7d, 0x17, 0x79,
	0xc6, 0x26, 0xd8, 0xfd, 0xc9, 0x03, 0x7f, 0x69, 0x77, 0xd2, 0x82, 0xda, 0x88, 0x4f, 0x58, 0x9c,
	0xca, 0x56, 0xa9, 0x53, 0xde, 0x6f, 0xd0, 0xdc, 0x24, 0x01, 0x54, 0x05, 0x9f, 0x2a, 0x94, 0xad,
	0x72, 0xa7, 0xbc, 0xef, 0xf7, 0xf6, 0x2e, 0x9c, 0x82, 0xea, 0x30, 0x75, 0x28, 0x72, 0x0f, 0x6a,
	0xae, 0xb8, 0xad, 0x4d, 0x93, 0x77, 0x67, 0x35, 0xef, 0xa5, 0x5d, 0x9f, 0x5b, 0x1c, 0xcd, 0x09,
	0xdd, 0x3f, 0xca, 0x50, 0x31, 0x6a, 0xe4, 0x01, 0xd4, 0xf3, 0x52, 0xb7, 0x3c, 0xb3, 0xef, 0xed,
	0xa0, 0xa8, 0xbd, 0x6e, 0xc9, 0xaa, 0xe8, 0x37, 0x36, 0x44, 0x0b, 0x12, 0xb9, 0x0f, 0x5b, 0x26,
	0xa1, 0x01, 0x8b, 0xb4, 0xb6, 0xab, 0xe1, 0xf5, 0x55, 0x9a, 0xd9, 0xeb, 0xd0, 0x00, 0x8e, 0x37,
	0xa8, 0x2f, 0x16, 0x26, 0x79, 0x0c, 0x3b, 0x02, 0x47, 0xb1, 0xc0, 0x48, 0xe5, 0x12, 0xe5, 0xbc,
	0x8b, 0x2b, 0x12, 0x0e, 0x54, 0xa8, 0x6c, 0x8b, 0x15, 0x0f, 0x79, 0x05, 0x7b, 0x4e, 0x46, 0xa0,
	0xcc, 0x78, 0x2a, 0x8b, 0x94, 0x6c, 0x79, 0xba, 0xab, 0x7a, 0x0f, 0x0d, 0x96, 0x3a, 0x68, 0xa1,
	0xba, 0x3b, 0x5a, 0xe3, 0x27, 0x5f, 0xc3, 0xce, 0x08, 0x13, 0xd4, 0x0d, 0xc9, 0x45, 0x2b, 0x46,
	0xf4, 0xd6, 0x85, 0x26, 0x3d, 0x74, 0xb8, 0x45, 0x9e, 0xa3, 0x15, 0x0f, 0xf9, 0x78, 0xd1, 0xb7,
	0xaa, 0xd1, 0x68, 0xaf, 0xa9, 0xd5, 0xf9, 0x8e, 0x11, 0x02, 0x9b, 0x66, 0xd0, 0x6a, 0x7a, 0xd0,
	0xa8, 0x59, 0x1f, 0xd5, 0xa1, 0x6a, 0x93, 0xe9, 0xfe, 0xe9, 0xc1, 0xf6, 0xea, 0xc6, 0x64, 0xcf,
	0x11, 0x3c, 0x33, 0x99, 0xa5, 0x96, 0x67, 0x49, 0xa4, 0x03, 0x0d, 0xfd, 0x2f, 0x33, 0x16, 0xa1,
	0x69, 0x96, 0x0d, 0x2e, 0x9c, 0xe4, 0x0e, 0x94, 0x05, 0x9e, 0xb8, 0x2e, 0x5c, 0xb7, 0x43, 0xb0,
	0xe8, 0x82, 0xe4, 0x53, 0x11, 0x21, 0xc5, 0x93, 0xe3, 0x0d, 0xaa, 0x71, 0xe4, 0x10, 0xea, 0x12,
	0x13, 0x8c, 0x14, 0x17, 0xae, 0xd2, 0xb7, 0xd7, 0x4f, 0xee, 0x4b, 0x36, 0x4c, 0xb0, 0xef, 0xa0,
	0xc7, 0x1b, 0xb4, 0xa0, 0x1d, 0xfd, 0xbf, 0x28, 0x6f, 0xcc, 0xd3, 0x81, 0x9a, 0x67, 0xd8, 0xfd,
	0x65, 0x13, 0xc8, 0x45, 0x16, 0xb9, 0x09, 0x50, 0x24, 0x6a, 0x07, 0xb6, 0x41, 0x97, 0x3c, 0xe4,
	0x31, 0x54, 0x13, 0x36, 0xc4, 0xc4, 0x3e, 0x5d, 0x7e, 0x2f, 0xbc, 0x42, 0x2a, 0xc1, 0x53, 0xc3,
	0x78, 0x94, 0x2a, 0x31, 0xa7, 0x8e, 0x4e, 0x5e, 0x80, 0x8f, 0x67, 0x99, 0x40, 0x29, 0x4d, 0xa7,
	0xec, 0x23, 0x19, 0x5c, 0x45, 0xed, 0x51, 0x41, 0xa3, 0xcb, 0x12, 0xed, 0xcf, 0xc0, 0x5f, 0xda,
	0x88, 0x34, 0xa1, 0xfc, 0x1a, 0xe7, 0xb6, 0x3d, 0x54, 0x2f, 0xc9, 0x2e, 0x54, 0x66, 0x2c, 0x99,
	0xba, 0xae, 0x50, 0x6b, 0xdc, 0x2b, 0x7d, 0xea, 0xb5, 0x7f, 0x2e, 0x01, 0x2c, 0x64, 0xd7, 0x50,
	0xfb, 0x50, 0xe7, 0x19, 0x0a, 0xa6, 0x7b, 0xa0, 0xd9, 0xdb, 0xbd, 0xbb, 0xff, 0x2d, 0xd5, 0xe0,
	0xb9, 0xa3, 0xd3, 0x42, 0x88, 0xec, 0x41, 0xd5, 0xa4, 0x60, 0x4f, 0xdf, 0xa0, 0xce, 0xea, 0xfe,
	0xe8, 0x41, 0x3d, 0x87, 0x13, 0x80, 0xea, 0xa3, 0x37, 0x53, 0x96, 0xc8, 0xe6, 0x06, 0x69, 0xc2,
	0xd6, 0x43, 0x3e, 0x1d, 0x26, 0xe8, 0x3c, 0x1e, 0xf9, 0x1f, 0x34, 0x9e, 0x71, 0xe5, 0xcc, 0x12,
	0xa9, 0x42, 0xe9, 0x49, 0xda, 0x2c, 0x93, 0x06, 0x54, 0x9e, 0x71, 0xf5, 0x24, 0x6d, 0x6e, 0x1a,
	0xfe, 0x59, 0x2c, 0x95, 0x6c, 0x56, 0x2c, 0x1f, 0xa5, 0x66, 0x68, 0x57, 0xb3, 0x4a, 0x76, 0xc0,
	0x7f, 0x2c, 0x90, 0x29, 0x14, 0x2f, 0x4f, 0x59, 0xda, 0xac, 0x91, 0x2d, 0xa8, 0x3f, 0x45, 0x29,
	0x8d, 0x55, 0xef, 0xfe, 0x5d, 0x86, 0xdd, 0x73, 0x5f, 0x05, 0xc5, 0xd4, 0x54, 0x92, 0x43, 0xa8,
	0x48, 0xc5, 0x94, 0x9d, 0xfe, 0xed, 0xde, 0x87, 0x6f, 0xfb, 0x20, 0xac, 0xb0, 0x02, 0xfd, 0x87,
	0xd4, 0x32, 0xf5, 0xe9, 0x05, 0x32, 0xe9, 0xde, 0x68, 0x0d, 0xea, 0x2c, 0x72, 0x0b, 0x7c, 0x81,
	0x19, 0x17, 0x0a, 0x47, 0x83, 0xe1, 0xdc, 0xbe, 0xf8, 0x29, 0xe4, 0xae, 0xa3, 0x39, 0x79, 0x03,
	0xbb, 0x72, 0x3a, 0x14, 0xee, 0x41, 0x19, 0x48, 0xa3, 0x8d, 0xfa, 0x25, 0xad, 0x47, 0xe8, 0xfe,
	0x15, 0x53, 0x59, 0x28, 0xf4, 0x9d, 0x80, 0x9d, 0xcf, 0x77, 0xe4, 0xc5, 0x08, 0x39, 0x80, 0xda,
	0x08, 0x15, 0x8b, 0x13, 0xe9, 0x5e, 0x4b, 0xd7, 0x02, 0x7b, 0xc7, 0x08, 0xf2, 0x3b, 0x46, 0xd0,
	0x37, 0x77, 0x0c, 0x9a, 0xe3, 0xda, 0x13, 0x68, 0xbd, 0x6d, 0x8f, 0x35, 0xf3, 0xf5, 0xf9, 0xf2,
	0x68, 0xfa, 0xbd, 0xf7, 0xae, 0x74, 0x88, 0xa5, 0x09, 0xee, 0x7e, 0x01, 0x15, 0x53, 0x5d, 0xe2,
	0x43, 0xed, 0x05, 0xa6, 0xa3, 0x38, 0x1d, 0x37, 0x37, 0x74, 0x37, 0x0f, 0xa3, 0x08, 0x33, 0x85,
	0xa3, 0xa6, 0xa7, 0x2d, 0x8a, 0xdf, 0x63, 0xa4, 0xad, 0x92, 0x06, 0x7e, 0xc7, 0x44, 0xaa, 0x81,
	0xe5, 0xa3, 0x43, 0xfd, 0x61, 0xfd, 0xf5, 0xaf, 0x9b, 0xde, 0xab, 0xbb, 0x97, 0xde, 0xca, 0xb2,
	0xd7, 0x63, 0x7b, 0xb1, 0x58, 0x4d, 0x2f, 0x9c, 0x1d, 0x0c, 0xab, 0xa6, 0x14, 0x1f, 0xfd, 0x1b,
	0x00, 0x00, 0xff, 0xff, 0x05, 0x23, 0x52, 0xc9, 0xd7, 0x09, 0x00, 0x00,
}

func (this *VirtualServiceSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualServiceSpec)
	if !ok {
		that2, ok := that.(VirtualServiceSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualHost.Equal(that1.VirtualHost) {
		return false
	}
	if !this.SslConfig.Equal(that1.SslConfig) {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VirtualHost) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualHost)
	if !ok {
		that2, ok := that.(VirtualHost)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.Options.Equal(that1.Options) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Route) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route)
	if !ok {
		that2, ok := that.(Route)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Matchers) != len(that1.Matchers) {
		return false
	}
	for i := range this.Matchers {
		if !this.Matchers[i].Equal(that1.Matchers[i]) {
			return false
		}
	}
	if that1.Action == nil {
		if this.Action != nil {
			return false
		}
	} else if this.Action == nil {
		return false
	} else if !this.Action.Equal(that1.Action) {
		return false
	}
	if !this.Options.Equal(that1.Options) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Route_RouteAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route_RouteAction)
	if !ok {
		that2, ok := that.(Route_RouteAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RouteAction.Equal(that1.RouteAction) {
		return false
	}
	return true
}
func (this *Route_RedirectAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route_RedirectAction)
	if !ok {
		that2, ok := that.(Route_RedirectAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RedirectAction.Equal(that1.RedirectAction) {
		return false
	}
	return true
}
func (this *Route_DirectResponseAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route_DirectResponseAction)
	if !ok {
		that2, ok := that.(Route_DirectResponseAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectResponseAction.Equal(that1.DirectResponseAction) {
		return false
	}
	return true
}
func (this *Route_DelegateAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route_DelegateAction)
	if !ok {
		that2, ok := that.(Route_DelegateAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DelegateAction.Equal(that1.DelegateAction) {
		return false
	}
	return true
}
func (this *DelegateAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DelegateAction)
	if !ok {
		that2, ok := that.(DelegateAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if that1.DelegationType == nil {
		if this.DelegationType != nil {
			return false
		}
	} else if this.DelegationType == nil {
		return false
	} else if !this.DelegationType.Equal(that1.DelegationType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DelegateAction_Ref) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DelegateAction_Ref)
	if !ok {
		that2, ok := that.(DelegateAction_Ref)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ref.Equal(that1.Ref) {
		return false
	}
	return true
}
func (this *DelegateAction_Selector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DelegateAction_Selector)
	if !ok {
		that2, ok := that.(DelegateAction_Selector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Selector.Equal(that1.Selector) {
		return false
	}
	return true
}
func (this *RouteTableSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTableSelector)
	if !ok {
		that2, ok := that.(RouteTableSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if this.Namespaces[i] != that1.Namespaces[i] {
			return false
		}
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.Expressions) != len(that1.Expressions) {
		return false
	}
	for i := range this.Expressions {
		if !this.Expressions[i].Equal(that1.Expressions[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RouteTableSelector_Expression) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTableSelector_Expression)
	if !ok {
		that2, ok := that.(RouteTableSelector_Expression)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Operator != that1.Operator {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VirtualServiceStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualServiceStatus)
	if !ok {
		that2, ok := that.(VirtualServiceStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.ReportedBy != that1.ReportedBy {
		return false
	}
	if len(this.SubresourceStatuses) != len(that1.SubresourceStatuses) {
		return false
	}
	for i := range this.SubresourceStatuses {
		if !this.SubresourceStatuses[i].Equal(that1.SubresourceStatuses[i]) {
			return false
		}
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
