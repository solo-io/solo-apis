// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo/gateway/v1/route_table.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	_ "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RouteTableStatus_State int32

const (
	// Pending status indicates the resource has not yet been validated
	RouteTableStatus_Pending RouteTableStatus_State = 0
	// Accepted indicates the resource has been validated
	RouteTableStatus_Accepted RouteTableStatus_State = 1
	// Rejected indicates an invalid configuration by the user
	// Rejected resources may be propagated to the xDS server depending on their severity
	RouteTableStatus_Rejected RouteTableStatus_State = 2
	// Warning indicates a partially invalid configuration by the user
	// Resources with Warnings may be partially accepted by a controller, depending on the implementation
	RouteTableStatus_Warning RouteTableStatus_State = 3
)

var RouteTableStatus_State_name = map[int32]string{
	0: "Pending",
	1: "Accepted",
	2: "Rejected",
	3: "Warning",
}

var RouteTableStatus_State_value = map[string]int32{
	"Pending":  0,
	"Accepted": 1,
	"Rejected": 2,
	"Warning":  3,
}

func (x RouteTableStatus_State) String() string {
	return proto.EnumName(RouteTableStatus_State_name, int32(x))
}

func (RouteTableStatus_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c9f6513704586a61, []int{1, 0}
}

//
//
// The **RouteTable** is a child routing object for the Gloo Gateway.
//
// A **RouteTable** gets built into the complete routing configuration when it is referenced by a `delegateAction`,
// either in a parent VirtualService or another RouteTable.
//
// Routes specified in a RouteTable must have their paths start with the prefix provided in the parent's matcher.
//
// For example, the following configuration:
//
// ```
// virtualService: mydomain.com
// match: /a
// delegate: a-routes
// ---
// routeTable: a-routes
// match: /1
//
// ```
//
// would *not be valid*, while
//
// ```
// virtualService: mydomain.com
// match: /a
// delegate: a-routes
// ---
// routeTable: a-routes
// match: /a/1
//
// ```
//
// *would* be valid.
//
//
// A complete configuration might look as follows:
//
// ```yaml
// apiVersion: gateway.solo.io/v1
// kind: VirtualService
// metadata:
//   name: 'any'
//   namespace: 'any'
// spec:
//   virtualHost:
//     domains:
//     - 'any.com'
//     routes:
//     - matchers:
//       - prefix: '/a' # delegate ownership of routes for `any.com/a`
//       delegateAction:
//         ref:
//           name: 'a-routes'
//           namespace: 'a'
//     - matchers:
//       - prefix: '/b' # delegate ownership of routes for `any.com/b`
//       delegateAction:
//         ref:
//           name: 'b-routes'
//           namespace: 'b'
// ```
//
// * A root-level **VirtualService** which delegates routing to to the `a-routes` and `b-routes` **RouteTables**.
// * Routes with `delegateActions` can only use a `prefix` matcher.
//
// ```yaml
// apiVersion: gateway.solo.io/v1
// kind: RouteTable
// metadata:
//   name: 'a-routes'
//   namespace: 'a'
// spec:
//   routes:
//     - matchers:
//       # the path matchers in this RouteTable must begin with the prefix `/a/`
//       - prefix: '/a/1'
//       routeAction:
//         single:
//           upstream:
//             name: 'foo-upstream'
//
//     - matchers:
//       - prefix: '/a/2'
//       routeAction:
//         single:
//           upstream:
//             name: 'bar-upstream'
// ```
//
// * A **RouteTable** which defines two routes.
//
// ```yaml
// apiVersion: gateway.solo.io/v1
// kind: RouteTable
// metadata:
//   name: 'b-routes'
//   namespace: 'b'
// spec:
//   routes:
//     - matchers:
//       # the path matchers in this RouteTable must begin with the prefix `/b/`
//       - regex: '/b/3'
//       routeAction:
//         single:
//           upstream:
//             name: 'bar-upstream'
//     - matchers:
//       - prefix: '/b/c/'
//       # routes in the RouteTable can perform any action, including a delegateAction
//       delegateAction:
//         ref:
//           name: 'c-routes'
//           namespace: 'c'
//
// ```
//
// * A **RouteTable** which both *defines a route* and *delegates to* another **RouteTable**.
//
//
// ```yaml
// apiVersion: gateway.solo.io/v1
// kind: RouteTable
// metadata:
//   name: 'c-routes'
//   namespace: 'c'
// spec:
//   routes:
//     - matchers:
//       - exact: '/b/c/4'
//       routeAction:
//         single:
//           upstream:
//             name: 'qux-upstream'
// ```
//
// * A RouteTable which is a child of another route table.
//
//
// Would produce the following route config for `mydomain.com`:
//
// ```
// /a/1 -> foo-upstream
// /a/2 -> bar-upstream
// /b/3 -> baz-upstream
// /b/c/4 -> qux-upstream
// ```
//
type RouteTableSpec struct {
	// The list of routes for the route table
	Routes []*Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	// When a delegated route defines a `RouteTableSelector` that matches multiple route tables, Gloo will inspect this
	// field to determine the order in which the route tables are to be evaluated. This determines the order in which
	// the routes will appear on the final `Proxy` resource. The field is optional; if no value is specified, the weight
	// defaults to 0 (zero).
	//
	// Gloo will process the route tables matched by a selector in ascending order by weight and collect the routes of
	// each route table in the order they are defined. If multiple route tables define the same weight, Gloo will sort the
	// routes which belong to those tables to avoid short-circuiting (e.g. making sure `/foo/bar` comes before `/foo`).
	// In this scenario, Gloo will also alert the user by adding a warning to the status of the parent resource
	// (the one that specifies the `RouteTableSelector`).
	Weight               *types.Int32Value `protobuf:"bytes,2,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RouteTableSpec) Reset()         { *m = RouteTableSpec{} }
func (m *RouteTableSpec) String() string { return proto.CompactTextString(m) }
func (*RouteTableSpec) ProtoMessage()    {}
func (*RouteTableSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9f6513704586a61, []int{0}
}
func (m *RouteTableSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableSpec.Unmarshal(m, b)
}
func (m *RouteTableSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableSpec.Marshal(b, m, deterministic)
}
func (m *RouteTableSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableSpec.Merge(m, src)
}
func (m *RouteTableSpec) XXX_Size() int {
	return xxx_messageInfo_RouteTableSpec.Size(m)
}
func (m *RouteTableSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableSpec proto.InternalMessageInfo

func (m *RouteTableSpec) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *RouteTableSpec) GetWeight() *types.Int32Value {
	if m != nil {
		return m.Weight
	}
	return nil
}

type RouteTableStatus struct {
	// State is the enum indicating the state of the resource
	State RouteTableStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=gateway.solo.io.RouteTableStatus_State" json:"state,omitempty"`
	// Reason is a description of the error for Rejected resources. If the resource is pending or accepted, this field will be empty
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// Reference to the reporter who wrote this status
	ReportedBy string `protobuf:"bytes,3,opt,name=reported_by,json=reportedBy,proto3" json:"reported_by,omitempty"`
	// Reference to statuses (by resource-ref string: "Kind.Namespace.Name") of subresources of the parent resource
	SubresourceStatuses map[string]*RouteTableStatus `protobuf:"bytes,4,rep,name=subresource_statuses,json=subresourceStatuses,proto3" json:"subresource_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Opaque details about status results
	Details              *types.Struct `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RouteTableStatus) Reset()         { *m = RouteTableStatus{} }
func (m *RouteTableStatus) String() string { return proto.CompactTextString(m) }
func (*RouteTableStatus) ProtoMessage()    {}
func (*RouteTableStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9f6513704586a61, []int{1}
}
func (m *RouteTableStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableStatus.Unmarshal(m, b)
}
func (m *RouteTableStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableStatus.Marshal(b, m, deterministic)
}
func (m *RouteTableStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableStatus.Merge(m, src)
}
func (m *RouteTableStatus) XXX_Size() int {
	return xxx_messageInfo_RouteTableStatus.Size(m)
}
func (m *RouteTableStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableStatus.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableStatus proto.InternalMessageInfo

func (m *RouteTableStatus) GetState() RouteTableStatus_State {
	if m != nil {
		return m.State
	}
	return RouteTableStatus_Pending
}

func (m *RouteTableStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *RouteTableStatus) GetReportedBy() string {
	if m != nil {
		return m.ReportedBy
	}
	return ""
}

func (m *RouteTableStatus) GetSubresourceStatuses() map[string]*RouteTableStatus {
	if m != nil {
		return m.SubresourceStatuses
	}
	return nil
}

func (m *RouteTableStatus) GetDetails() *types.Struct {
	if m != nil {
		return m.Details
	}
	return nil
}

func init() {
	proto.RegisterEnum("gateway.solo.io.RouteTableStatus_State", RouteTableStatus_State_name, RouteTableStatus_State_value)
	proto.RegisterType((*RouteTableSpec)(nil), "gateway.solo.io.RouteTableSpec")
	proto.RegisterType((*RouteTableStatus)(nil), "gateway.solo.io.RouteTableStatus")
	proto.RegisterMapType((map[string]*RouteTableStatus)(nil), "gateway.solo.io.RouteTableStatus.SubresourceStatusesEntry")
}

func init() {
	proto.RegisterFile("github.com/solo-io/solo-apis/api/gloo/gateway/v1/route_table.proto", fileDescriptor_c9f6513704586a61)
}

var fileDescriptor_c9f6513704586a61 = []byte{
	// 496 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x25, 0xeb, 0xda, 0x31, 0x17, 0x8d, 0xca, 0x4c, 0x23, 0x2a, 0x68, 0x94, 0xbe, 0xd0, 0x17,
	0x6c, 0xb5, 0x7d, 0x18, 0x9a, 0xb4, 0x87, 0x55, 0xe2, 0x81, 0x37, 0x94, 0x22, 0x90, 0x78, 0xa9,
	0x9c, 0xf4, 0x92, 0x99, 0x66, 0x71, 0x64, 0x5f, 0xa7, 0xcb, 0x1f, 0xf1, 0x09, 0x7c, 0x09, 0x1f,
	0xc0, 0x3f, 0xf0, 0x8e, 0xec, 0x24, 0x62, 0x6c, 0x30, 0x78, 0xb2, 0xaf, 0xcf, 0x39, 0xbe, 0xf7,
	0x9c, 0x38, 0x64, 0x91, 0x4a, 0xbc, 0xb0, 0x31, 0x4b, 0xd4, 0x25, 0x37, 0x2a, 0x53, 0x2f, 0xa5,
	0xaa, 0x57, 0x51, 0x48, 0xc3, 0x45, 0x21, 0x79, 0x9a, 0x29, 0xc5, 0x53, 0x81, 0xb0, 0x15, 0x15,
	0x2f, 0xa7, 0x5c, 0x2b, 0x8b, 0xb0, 0x42, 0x11, 0x67, 0xc0, 0x0a, 0xad, 0x50, 0xd1, 0x87, 0x0d,
	0xca, 0x9c, 0x90, 0x49, 0x35, 0x7c, 0x9a, 0x2a, 0x95, 0x66, 0xc0, 0x3d, 0x1c, 0xdb, 0x4f, 0xdc,
	0xa0, 0xb6, 0x09, 0xd6, 0xf4, 0xe1, 0x61, 0xaa, 0x52, 0xe5, 0xb7, 0xdc, 0xed, 0x9a, 0x53, 0x0a,
	0x57, 0x58, 0x1f, 0xc2, 0x55, 0xcb, 0x3c, 0xbe, 0x79, 0xcf, 0x56, 0x8b, 0xa2, 0x00, 0x6d, 0x5a,
	0xdc, 0x4f, 0xba, 0x91, 0xe8, 0x07, 0x2d, 0xa7, 0xbc, 0xad, 0x1b, 0x7c, 0x7e, 0xb7, 0x93, 0x52,
	0x6a, 0xb4, 0x22, 0x5b, 0x19, 0xd0, 0xa5, 0x4c, 0x1a, 0x37, 0x63, 0x4b, 0x0e, 0x22, 0x67, 0xf1,
	0x9d, 0x73, 0xb8, 0x2c, 0x20, 0xa1, 0x8c, 0xf4, 0xbc, 0x69, 0x13, 0x06, 0xa3, 0xce, 0xa4, 0x3f,
	0x3b, 0x62, 0x37, 0x0c, 0x33, 0x2f, 0x88, 0x1a, 0x16, 0x9d, 0x93, 0xde, 0x16, 0x64, 0x7a, 0x81,
	0xe1, 0xce, 0x28, 0x98, 0xf4, 0x67, 0x4f, 0x58, 0xed, 0x83, 0xb5, 0x3e, 0xd8, 0x9b, 0x1c, 0xe7,
	0xb3, 0xf7, 0x22, 0xb3, 0x10, 0x35, 0xd4, 0xf1, 0xb7, 0x0e, 0x19, 0x5c, 0xeb, 0x8b, 0x02, 0xad,
	0xa1, 0x67, 0xa4, 0x6b, 0x50, 0x20, 0x84, 0xc1, 0x28, 0x98, 0x1c, 0xcc, 0x5e, 0xfc, 0xb9, 0xf1,
	0x35, 0x05, 0x73, 0x0b, 0x44, 0xb5, 0x8a, 0x1e, 0x91, 0x9e, 0x06, 0x61, 0x54, 0xee, 0x07, 0xd9,
	0x8f, 0x9a, 0x8a, 0x3e, 0x23, 0x7d, 0x0d, 0x85, 0xd2, 0x08, 0xeb, 0x55, 0x5c, 0x85, 0x1d, 0x0f,
	0x92, 0xf6, 0x68, 0x51, 0xd1, 0x4b, 0x72, 0x68, 0x6c, 0xac, 0xc1, 0x28, 0xab, 0x13, 0x58, 0x19,
	0x7f, 0x37, 0x98, 0x70, 0xd7, 0xfb, 0x3f, 0xfd, 0x8f, 0x31, 0x7e, 0xa9, 0x97, 0x8d, 0xf8, 0x75,
	0x8e, 0xba, 0x8a, 0x1e, 0x99, 0xdb, 0x08, 0x9d, 0x92, 0xbd, 0x35, 0xa0, 0x90, 0x99, 0x09, 0xbb,
	0x3e, 0xb1, 0xc7, 0xb7, 0x12, 0x5b, 0xfa, 0x17, 0x14, 0xb5, 0xbc, 0xa1, 0x24, 0xe1, 0xdf, 0x7a,
	0xd0, 0x01, 0xe9, 0x6c, 0xa0, 0xf2, 0x99, 0xed, 0x47, 0x6e, 0x4b, 0x4f, 0x48, 0xb7, 0x74, 0x69,
	0x37, 0x1f, 0xe4, 0xf9, 0x3f, 0x0d, 0x44, 0x35, 0xff, 0x74, 0xe7, 0x55, 0x30, 0x3e, 0x23, 0x5d,
	0x9f, 0x2a, 0xed, 0x93, 0xbd, 0xb7, 0x90, 0xaf, 0x65, 0x9e, 0x0e, 0xee, 0xd1, 0x07, 0xe4, 0xfe,
	0x79, 0x92, 0x40, 0x81, 0xb0, 0x1e, 0x04, 0xae, 0x8a, 0xe0, 0x33, 0x24, 0xae, 0xda, 0x71, 0xc4,
	0x0f, 0x42, 0xe7, 0x8e, 0xd8, 0x59, 0x9c, 0x7f, 0xfd, 0xb1, 0x1b, 0x7c, 0xf9, 0x7e, 0x1c, 0x7c,
	0x3c, 0xb9, 0xf3, 0x5f, 0x2b, 0x36, 0x69, 0xfd, 0x4a, 0x7f, 0x1f, 0x8d, 0x97, 0xd3, 0xb8, 0xe7,
	0x63, 0x98, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x37, 0x3f, 0x60, 0x94, 0xad, 0x03, 0x00, 0x00,
}

func (this *RouteTableSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTableSpec)
	if !ok {
		that2, ok := that.(RouteTableSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.Weight.Equal(that1.Weight) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RouteTableStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTableStatus)
	if !ok {
		that2, ok := that.(RouteTableStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.ReportedBy != that1.ReportedBy {
		return false
	}
	if len(this.SubresourceStatuses) != len(that1.SubresourceStatuses) {
		return false
	}
	for i := range this.SubresourceStatuses {
		if !this.SubresourceStatuses[i].Equal(that1.SubresourceStatuses[i]) {
			return false
		}
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
