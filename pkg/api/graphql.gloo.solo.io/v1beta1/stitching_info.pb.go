// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: github.com/solo-io/solo-apis/api/gloo/gloo/v1/enterprise/options/graphql/v1beta1/stitching_info.proto

package v1beta1

import (
	reflect "reflect"
	sync "sync"

	v2 "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/external/envoy/extensions/filters/http/graphql/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ------------- Graphql Tools JS Input -------------
// This is not user-facing and is only used to pass to the graphql-tools js script
// This is the message which the graphql-tools js script will consume
type GraphQLToolsStitchingInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subschemas []*GraphQLToolsStitchingInput_Schema `protobuf:"bytes,1,rep,name=subschemas,proto3" json:"subschemas,omitempty"`
}

func (x *GraphQLToolsStitchingInput) Reset() {
	*x = GraphQLToolsStitchingInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLToolsStitchingInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLToolsStitchingInput) ProtoMessage() {}

func (x *GraphQLToolsStitchingInput) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLToolsStitchingInput.ProtoReflect.Descriptor instead.
func (*GraphQLToolsStitchingInput) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_rawDescGZIP(), []int{0}
}

func (x *GraphQLToolsStitchingInput) GetSubschemas() []*GraphQLToolsStitchingInput_Schema {
	if x != nil {
		return x.Subschemas
	}
	return nil
}

// ------------- Graphql Tools JS Out ------------------
// This is not user-facing and is only used to pass data back from the graphql-tools js script
// The message that is the output of the graphql tools stitching info script
type GraphQlToolsStitchingOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldNodesByType  map[string]*v2.FieldNodes       `protobuf:"bytes,1,rep,name=field_nodes_by_type,json=fieldNodesByType,proto3" json:"field_nodes_by_type,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FieldNodesByField map[string]*v2.FieldNodeMap     `protobuf:"bytes,2,rep,name=field_nodes_by_field,json=fieldNodesByField,proto3" json:"field_nodes_by_field,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MergedTypes       map[string]*v2.MergedTypeConfig `protobuf:"bytes,3,rep,name=merged_types,json=mergedTypes,proto3" json:"merged_types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StitchedSchema    string                          `protobuf:"bytes,4,opt,name=stitched_schema,json=stitchedSchema,proto3" json:"stitched_schema,omitempty"`
}

func (x *GraphQlToolsStitchingOutput) Reset() {
	*x = GraphQlToolsStitchingOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQlToolsStitchingOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQlToolsStitchingOutput) ProtoMessage() {}

func (x *GraphQlToolsStitchingOutput) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQlToolsStitchingOutput.ProtoReflect.Descriptor instead.
func (*GraphQlToolsStitchingOutput) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_rawDescGZIP(), []int{1}
}

func (x *GraphQlToolsStitchingOutput) GetFieldNodesByType() map[string]*v2.FieldNodes {
	if x != nil {
		return x.FieldNodesByType
	}
	return nil
}

func (x *GraphQlToolsStitchingOutput) GetFieldNodesByField() map[string]*v2.FieldNodeMap {
	if x != nil {
		return x.FieldNodesByField
	}
	return nil
}

func (x *GraphQlToolsStitchingOutput) GetMergedTypes() map[string]*v2.MergedTypeConfig {
	if x != nil {
		return x.MergedTypes
	}
	return nil
}

func (x *GraphQlToolsStitchingOutput) GetStitchedSchema() string {
	if x != nil {
		return x.StitchedSchema
	}
	return ""
}

type GraphQLToolsStitchingInput_Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the subschema, arbitrary name but must be unique in a gateway schema.
	// generally generated from the graphql schema ref
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// GraphQL schema SDL for the subschema
	Schema string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	// Type merge config that the graphql-tools stitching script
	// needs to generate stitching info for the data plane
	TypeMergeConfig map[string]*GraphQLToolsStitchingInput_Schema_TypeMergeConfig `protobuf:"bytes,3,rep,name=type_merge_config,json=typeMergeConfig,proto3" json:"type_merge_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GraphQLToolsStitchingInput_Schema) Reset() {
	*x = GraphQLToolsStitchingInput_Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLToolsStitchingInput_Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLToolsStitchingInput_Schema) ProtoMessage() {}

func (x *GraphQLToolsStitchingInput_Schema) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLToolsStitchingInput_Schema.ProtoReflect.Descriptor instead.
func (*GraphQLToolsStitchingInput_Schema) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_rawDescGZIP(), []int{0, 0}
}

func (x *GraphQLToolsStitchingInput_Schema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GraphQLToolsStitchingInput_Schema) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *GraphQLToolsStitchingInput_Schema) GetTypeMergeConfig() map[string]*GraphQLToolsStitchingInput_Schema_TypeMergeConfig {
	if x != nil {
		return x.TypeMergeConfig
	}
	return nil
}

type GraphQLToolsStitchingInput_Schema_TypeMergeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectionSet string            `protobuf:"bytes,1,opt,name=selection_set,json=selectionSet,proto3" json:"selection_set,omitempty"`
	FieldName    string            `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Args         map[string]string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GraphQLToolsStitchingInput_Schema_TypeMergeConfig) Reset() {
	*x = GraphQLToolsStitchingInput_Schema_TypeMergeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLToolsStitchingInput_Schema_TypeMergeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLToolsStitchingInput_Schema_TypeMergeConfig) ProtoMessage() {}

func (x *GraphQLToolsStitchingInput_Schema_TypeMergeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLToolsStitchingInput_Schema_TypeMergeConfig.ProtoReflect.Descriptor instead.
func (*GraphQLToolsStitchingInput_Schema_TypeMergeConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *GraphQLToolsStitchingInput_Schema_TypeMergeConfig) GetSelectionSet() string {
	if x != nil {
		return x.SelectionSet
	}
	return ""
}

func (x *GraphQLToolsStitchingInput_Schema_TypeMergeConfig) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *GraphQLToolsStitchingInput_Schema_TypeMergeConfig) GetArgs() map[string]string {
	if x != nil {
		return x.Args
	}
	return nil
}

var File_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto protoreflect.FileDescriptor

var file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_rawDesc = []byte{
	0x0a, 0x65, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x1a, 0x5c, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69,
	0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2f, 0x73, 0x74, 0x69, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x05, 0x0a, 0x1a,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x74, 0x69, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x57, 0x0a, 0x0a, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x54, 0x6f, 0x6f,
	0x6c, 0x73, 0x53, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x1a, 0xb4, 0x04, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x78, 0x0a, 0x11, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x51, 0x4c, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0xf5, 0x01, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x65, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x71, 0x6c, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x74,
	0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x8b, 0x01, 0x0a,
	0x14, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x51, 0x4c, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x74, 0x69, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x06, 0x0a, 0x1b, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x51, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x74, 0x69, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x76, 0x0a, 0x13, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71,
	0x6c, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x51, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x74, 0x69, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x79, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x6c, 0x54,
	0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x65, 0x0a,
	0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x51, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x74, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x73, 0x0a,
	0x15, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e,
	0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x76, 0x0a, 0x16, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x46,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x74, 0x0a, 0x10, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x43, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_rawDescOnce sync.Once
	file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_rawDescData = file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_rawDesc
)

func file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_rawDescData)
	})
	return file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_rawDescData
}

var file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_goTypes = []interface{}{
	(*GraphQLToolsStitchingInput)(nil),                        // 0: graphql.gloo.solo.io.GraphQLToolsStitchingInput
	(*GraphQlToolsStitchingOutput)(nil),                       // 1: graphql.gloo.solo.io.GraphQlToolsStitchingOutput
	(*GraphQLToolsStitchingInput_Schema)(nil),                 // 2: graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema
	(*GraphQLToolsStitchingInput_Schema_TypeMergeConfig)(nil), // 3: graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig
	nil,                         // 4: graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfigEntry
	nil,                         // 5: graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.ArgsEntry
	nil,                         // 6: graphql.gloo.solo.io.GraphQlToolsStitchingOutput.FieldNodesByTypeEntry
	nil,                         // 7: graphql.gloo.solo.io.GraphQlToolsStitchingOutput.FieldNodesByFieldEntry
	nil,                         // 8: graphql.gloo.solo.io.GraphQlToolsStitchingOutput.MergedTypesEntry
	(*v2.FieldNodes)(nil),       // 9: envoy.config.resolver.stitching.v2.FieldNodes
	(*v2.FieldNodeMap)(nil),     // 10: envoy.config.resolver.stitching.v2.FieldNodeMap
	(*v2.MergedTypeConfig)(nil), // 11: envoy.config.resolver.stitching.v2.MergedTypeConfig
}
var file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_depIdxs = []int32{
	2,  // 0: graphql.gloo.solo.io.GraphQLToolsStitchingInput.subschemas:type_name -> graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema
	6,  // 1: graphql.gloo.solo.io.GraphQlToolsStitchingOutput.field_nodes_by_type:type_name -> graphql.gloo.solo.io.GraphQlToolsStitchingOutput.FieldNodesByTypeEntry
	7,  // 2: graphql.gloo.solo.io.GraphQlToolsStitchingOutput.field_nodes_by_field:type_name -> graphql.gloo.solo.io.GraphQlToolsStitchingOutput.FieldNodesByFieldEntry
	8,  // 3: graphql.gloo.solo.io.GraphQlToolsStitchingOutput.merged_types:type_name -> graphql.gloo.solo.io.GraphQlToolsStitchingOutput.MergedTypesEntry
	4,  // 4: graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.type_merge_config:type_name -> graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfigEntry
	5,  // 5: graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.args:type_name -> graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.ArgsEntry
	3,  // 6: graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfigEntry.value:type_name -> graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig
	9,  // 7: graphql.gloo.solo.io.GraphQlToolsStitchingOutput.FieldNodesByTypeEntry.value:type_name -> envoy.config.resolver.stitching.v2.FieldNodes
	10, // 8: graphql.gloo.solo.io.GraphQlToolsStitchingOutput.FieldNodesByFieldEntry.value:type_name -> envoy.config.resolver.stitching.v2.FieldNodeMap
	11, // 9: graphql.gloo.solo.io.GraphQlToolsStitchingOutput.MergedTypesEntry.value:type_name -> envoy.config.resolver.stitching.v2.MergedTypeConfig
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_init()
}
func file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_init() {
	if File_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLToolsStitchingInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQlToolsStitchingOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLToolsStitchingInput_Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLToolsStitchingInput_Schema_TypeMergeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto = out.File
	file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_rawDesc = nil
	file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_goTypes = nil
	file_github_com_solo_io_solo_apis_api_gloo_gloo_v1_enterprise_options_graphql_v1beta1_stitching_info_proto_depIdxs = nil
}
