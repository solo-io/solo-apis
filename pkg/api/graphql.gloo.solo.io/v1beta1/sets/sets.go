// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1beta1sets

import (
	graphql_gloo_solo_io_v1beta1 "github.com/solo-io/solo-apis/pkg/api/graphql.gloo.solo.io/v1beta1"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type GraphQLApiSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*graphql_gloo_solo_io_v1beta1.GraphQLApi) bool) []*graphql_gloo_solo_io_v1beta1.GraphQLApi
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*graphql_gloo_solo_io_v1beta1.GraphQLApi) bool) []*graphql_gloo_solo_io_v1beta1.GraphQLApi
	// Return the Set as a map of key to resource.
	Map() map[string]*graphql_gloo_solo_io_v1beta1.GraphQLApi
	// Insert a resource into the set.
	Insert(graphQlapi ...*graphql_gloo_solo_io_v1beta1.GraphQLApi)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(graphQlapiSet GraphQLApiSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(graphQlapi ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(graphQlapi ezkube.ResourceId)
	// Return the union with the provided set
	Union(set GraphQLApiSet) GraphQLApiSet
	// Return the difference with the provided set
	Difference(set GraphQLApiSet) GraphQLApiSet
	// Return the intersection with the provided set
	Intersection(set GraphQLApiSet) GraphQLApiSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*graphql_gloo_solo_io_v1beta1.GraphQLApi, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another GraphQLApiSet
	Delta(newSet GraphQLApiSet) sksets.ResourceDelta
	// Create a deep copy of the current GraphQLApiSet
	Clone() GraphQLApiSet
}

func makeGenericGraphQLApiSet(graphQlapiList []*graphql_gloo_solo_io_v1beta1.GraphQLApi) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range graphQlapiList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type graphQlapiSet struct {
	set sksets.ResourceSet
}

func NewGraphQLApiSet(graphQlapiList ...*graphql_gloo_solo_io_v1beta1.GraphQLApi) GraphQLApiSet {
	return &graphQlapiSet{set: makeGenericGraphQLApiSet(graphQlapiList)}
}

func NewGraphQLApiSetFromList(graphQlapiList *graphql_gloo_solo_io_v1beta1.GraphQLApiList) GraphQLApiSet {
	list := make([]*graphql_gloo_solo_io_v1beta1.GraphQLApi, 0, len(graphQlapiList.Items))
	for idx := range graphQlapiList.Items {
		list = append(list, &graphQlapiList.Items[idx])
	}
	return &graphQlapiSet{set: makeGenericGraphQLApiSet(list)}
}

func (s *graphQlapiSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *graphQlapiSet) List(filterResource ...func(*graphql_gloo_solo_io_v1beta1.GraphQLApi) bool) []*graphql_gloo_solo_io_v1beta1.GraphQLApi {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*graphql_gloo_solo_io_v1beta1.GraphQLApi))
		})
	}

	objs := s.Generic().List(genericFilters...)
	graphQlapiList := make([]*graphql_gloo_solo_io_v1beta1.GraphQLApi, 0, len(objs))
	for _, obj := range objs {
		graphQlapiList = append(graphQlapiList, obj.(*graphql_gloo_solo_io_v1beta1.GraphQLApi))
	}
	return graphQlapiList
}

func (s *graphQlapiSet) UnsortedList(filterResource ...func(*graphql_gloo_solo_io_v1beta1.GraphQLApi) bool) []*graphql_gloo_solo_io_v1beta1.GraphQLApi {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*graphql_gloo_solo_io_v1beta1.GraphQLApi))
		})
	}

	var graphQlapiList []*graphql_gloo_solo_io_v1beta1.GraphQLApi
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		graphQlapiList = append(graphQlapiList, obj.(*graphql_gloo_solo_io_v1beta1.GraphQLApi))
	}
	return graphQlapiList
}

func (s *graphQlapiSet) Map() map[string]*graphql_gloo_solo_io_v1beta1.GraphQLApi {
	if s == nil {
		return nil
	}

	newMap := map[string]*graphql_gloo_solo_io_v1beta1.GraphQLApi{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*graphql_gloo_solo_io_v1beta1.GraphQLApi)
	}
	return newMap
}

func (s *graphQlapiSet) Insert(
	graphQlapiList ...*graphql_gloo_solo_io_v1beta1.GraphQLApi,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range graphQlapiList {
		s.Generic().Insert(obj)
	}
}

func (s *graphQlapiSet) Has(graphQlapi ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(graphQlapi)
}

func (s *graphQlapiSet) Equal(
	graphQlapiSet GraphQLApiSet,
) bool {
	if s == nil {
		return graphQlapiSet == nil
	}
	return s.Generic().Equal(graphQlapiSet.Generic())
}

func (s *graphQlapiSet) Delete(GraphQLApi ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(GraphQLApi)
}

func (s *graphQlapiSet) Union(set GraphQLApiSet) GraphQLApiSet {
	if s == nil {
		return set
	}
	return NewGraphQLApiSet(append(s.List(), set.List()...)...)
}

func (s *graphQlapiSet) Difference(set GraphQLApiSet) GraphQLApiSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &graphQlapiSet{set: newSet}
}

func (s *graphQlapiSet) Intersection(set GraphQLApiSet) GraphQLApiSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var graphQlapiList []*graphql_gloo_solo_io_v1beta1.GraphQLApi
	for _, obj := range newSet.List() {
		graphQlapiList = append(graphQlapiList, obj.(*graphql_gloo_solo_io_v1beta1.GraphQLApi))
	}
	return NewGraphQLApiSet(graphQlapiList...)
}

func (s *graphQlapiSet) Find(id ezkube.ResourceId) (*graphql_gloo_solo_io_v1beta1.GraphQLApi, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find GraphQLApi %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&graphql_gloo_solo_io_v1beta1.GraphQLApi{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*graphql_gloo_solo_io_v1beta1.GraphQLApi), nil
}

func (s *graphQlapiSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *graphQlapiSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *graphQlapiSet) Delta(newSet GraphQLApiSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *graphQlapiSet) Clone() GraphQLApiSet {
	if s == nil {
		return nil
	}
	return &graphQlapiSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}
