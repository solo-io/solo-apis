// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	graphql_gloo_solo_io_v1alpha1 "github.com/solo-io/solo-apis/pkg/api/graphql.gloo.solo.io/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the GraphQLApi Resource across clusters.
// implemented by the user
type MulticlusterGraphQLApiReconciler interface {
	ReconcileGraphQLApi(clusterName string, obj *graphql_gloo_solo_io_v1alpha1.GraphQLApi) (reconcile.Result, error)
}

// Reconcile deletion events for the GraphQLApi Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterGraphQLApiDeletionReconciler interface {
	ReconcileGraphQLApiDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterGraphQLApiReconcilerFuncs struct {
	OnReconcileGraphQLApi         func(clusterName string, obj *graphql_gloo_solo_io_v1alpha1.GraphQLApi) (reconcile.Result, error)
	OnReconcileGraphQLApiDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterGraphQLApiReconcilerFuncs) ReconcileGraphQLApi(clusterName string, obj *graphql_gloo_solo_io_v1alpha1.GraphQLApi) (reconcile.Result, error) {
	if f.OnReconcileGraphQLApi == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileGraphQLApi(clusterName, obj)
}

func (f *MulticlusterGraphQLApiReconcilerFuncs) ReconcileGraphQLApiDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileGraphQLApiDeletion == nil {
		return nil
	}
	return f.OnReconcileGraphQLApiDeletion(clusterName, req)
}

type MulticlusterGraphQLApiReconcileLoop interface {
	// AddMulticlusterGraphQLApiReconciler adds a MulticlusterGraphQLApiReconciler to the MulticlusterGraphQLApiReconcileLoop.
	AddMulticlusterGraphQLApiReconciler(ctx context.Context, rec MulticlusterGraphQLApiReconciler, predicates ...predicate.Predicate)
}

type multiclusterGraphQLApiReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterGraphQLApiReconcileLoop) AddMulticlusterGraphQLApiReconciler(ctx context.Context, rec MulticlusterGraphQLApiReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericGraphQLApiMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterGraphQLApiReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterGraphQLApiReconcileLoop {
	return &multiclusterGraphQLApiReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &graphql_gloo_solo_io_v1alpha1.GraphQLApi{}, options)}
}

type genericGraphQLApiMulticlusterReconciler struct {
	reconciler MulticlusterGraphQLApiReconciler
}

func (g genericGraphQLApiMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterGraphQLApiDeletionReconciler); ok {
		return deletionReconciler.ReconcileGraphQLApiDeletion(cluster, req)
	}
	return nil
}

func (g genericGraphQLApiMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*graphql_gloo_solo_io_v1alpha1.GraphQLApi)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: GraphQLApi handler received event for %T", object)
	}
	return g.reconciler.ReconcileGraphQLApi(cluster, obj)
}
