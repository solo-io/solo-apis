// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v1alpha1 is a generated GoMock package.
package mock_v1alpha1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/solo-apis/pkg/api/graphql.gloo.solo.io/v1alpha1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v1alpha1.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// GraphQLSchemas mocks base method.
func (m *MockClientset) GraphQLSchemas() v1alpha1.GraphQLSchemaClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphQLSchemas")
	ret0, _ := ret[0].(v1alpha1.GraphQLSchemaClient)
	return ret0
}

// GraphQLSchemas indicates an expected call of GraphQLSchemas.
func (mr *MockClientsetMockRecorder) GraphQLSchemas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphQLSchemas", reflect.TypeOf((*MockClientset)(nil).GraphQLSchemas))
}

// MockGraphQLSchemaReader is a mock of GraphQLSchemaReader interface.
type MockGraphQLSchemaReader struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaReaderMockRecorder
}

// MockGraphQLSchemaReaderMockRecorder is the mock recorder for MockGraphQLSchemaReader.
type MockGraphQLSchemaReaderMockRecorder struct {
	mock *MockGraphQLSchemaReader
}

// NewMockGraphQLSchemaReader creates a new mock instance.
func NewMockGraphQLSchemaReader(ctrl *gomock.Controller) *MockGraphQLSchemaReader {
	mock := &MockGraphQLSchemaReader{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaReader) EXPECT() *MockGraphQLSchemaReaderMockRecorder {
	return m.recorder
}

// GetGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaReader) GetGraphQLSchema(ctx context.Context, key client.ObjectKey) (*v1alpha1.GraphQLSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGraphQLSchema", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.GraphQLSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGraphQLSchema indicates an expected call of GetGraphQLSchema.
func (mr *MockGraphQLSchemaReaderMockRecorder) GetGraphQLSchema(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaReader)(nil).GetGraphQLSchema), ctx, key)
}

// ListGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaReader) ListGraphQLSchema(ctx context.Context, opts ...client.ListOption) (*v1alpha1.GraphQLSchemaList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGraphQLSchema", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GraphQLSchemaList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGraphQLSchema indicates an expected call of ListGraphQLSchema.
func (mr *MockGraphQLSchemaReaderMockRecorder) ListGraphQLSchema(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaReader)(nil).ListGraphQLSchema), varargs...)
}

// MockGraphQLSchemaWriter is a mock of GraphQLSchemaWriter interface.
type MockGraphQLSchemaWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaWriterMockRecorder
}

// MockGraphQLSchemaWriterMockRecorder is the mock recorder for MockGraphQLSchemaWriter.
type MockGraphQLSchemaWriterMockRecorder struct {
	mock *MockGraphQLSchemaWriter
}

// NewMockGraphQLSchemaWriter creates a new mock instance.
func NewMockGraphQLSchemaWriter(ctrl *gomock.Controller) *MockGraphQLSchemaWriter {
	mock := &MockGraphQLSchemaWriter{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaWriter) EXPECT() *MockGraphQLSchemaWriterMockRecorder {
	return m.recorder
}

// CreateGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaWriter) CreateGraphQLSchema(ctx context.Context, obj *v1alpha1.GraphQLSchema, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGraphQLSchema indicates an expected call of CreateGraphQLSchema.
func (mr *MockGraphQLSchemaWriterMockRecorder) CreateGraphQLSchema(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaWriter)(nil).CreateGraphQLSchema), varargs...)
}

// DeleteAllOfGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaWriter) DeleteAllOfGraphQLSchema(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfGraphQLSchema indicates an expected call of DeleteAllOfGraphQLSchema.
func (mr *MockGraphQLSchemaWriterMockRecorder) DeleteAllOfGraphQLSchema(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaWriter)(nil).DeleteAllOfGraphQLSchema), varargs...)
}

// DeleteGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaWriter) DeleteGraphQLSchema(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGraphQLSchema indicates an expected call of DeleteGraphQLSchema.
func (mr *MockGraphQLSchemaWriterMockRecorder) DeleteGraphQLSchema(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaWriter)(nil).DeleteGraphQLSchema), varargs...)
}

// PatchGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaWriter) PatchGraphQLSchema(ctx context.Context, obj *v1alpha1.GraphQLSchema, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGraphQLSchema indicates an expected call of PatchGraphQLSchema.
func (mr *MockGraphQLSchemaWriterMockRecorder) PatchGraphQLSchema(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaWriter)(nil).PatchGraphQLSchema), varargs...)
}

// UpdateGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaWriter) UpdateGraphQLSchema(ctx context.Context, obj *v1alpha1.GraphQLSchema, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLSchema indicates an expected call of UpdateGraphQLSchema.
func (mr *MockGraphQLSchemaWriterMockRecorder) UpdateGraphQLSchema(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaWriter)(nil).UpdateGraphQLSchema), varargs...)
}

// UpsertGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaWriter) UpsertGraphQLSchema(ctx context.Context, obj *v1alpha1.GraphQLSchema, transitionFuncs ...v1alpha1.GraphQLSchemaTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertGraphQLSchema indicates an expected call of UpsertGraphQLSchema.
func (mr *MockGraphQLSchemaWriterMockRecorder) UpsertGraphQLSchema(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaWriter)(nil).UpsertGraphQLSchema), varargs...)
}

// MockGraphQLSchemaStatusWriter is a mock of GraphQLSchemaStatusWriter interface.
type MockGraphQLSchemaStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaStatusWriterMockRecorder
}

// MockGraphQLSchemaStatusWriterMockRecorder is the mock recorder for MockGraphQLSchemaStatusWriter.
type MockGraphQLSchemaStatusWriterMockRecorder struct {
	mock *MockGraphQLSchemaStatusWriter
}

// NewMockGraphQLSchemaStatusWriter creates a new mock instance.
func NewMockGraphQLSchemaStatusWriter(ctrl *gomock.Controller) *MockGraphQLSchemaStatusWriter {
	mock := &MockGraphQLSchemaStatusWriter{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaStatusWriter) EXPECT() *MockGraphQLSchemaStatusWriterMockRecorder {
	return m.recorder
}

// PatchGraphQLSchemaStatus mocks base method.
func (m *MockGraphQLSchemaStatusWriter) PatchGraphQLSchemaStatus(ctx context.Context, obj *v1alpha1.GraphQLSchema, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGraphQLSchemaStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGraphQLSchemaStatus indicates an expected call of PatchGraphQLSchemaStatus.
func (mr *MockGraphQLSchemaStatusWriterMockRecorder) PatchGraphQLSchemaStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGraphQLSchemaStatus", reflect.TypeOf((*MockGraphQLSchemaStatusWriter)(nil).PatchGraphQLSchemaStatus), varargs...)
}

// UpdateGraphQLSchemaStatus mocks base method.
func (m *MockGraphQLSchemaStatusWriter) UpdateGraphQLSchemaStatus(ctx context.Context, obj *v1alpha1.GraphQLSchema, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGraphQLSchemaStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLSchemaStatus indicates an expected call of UpdateGraphQLSchemaStatus.
func (mr *MockGraphQLSchemaStatusWriterMockRecorder) UpdateGraphQLSchemaStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLSchemaStatus", reflect.TypeOf((*MockGraphQLSchemaStatusWriter)(nil).UpdateGraphQLSchemaStatus), varargs...)
}

// MockGraphQLSchemaClient is a mock of GraphQLSchemaClient interface.
type MockGraphQLSchemaClient struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLSchemaClientMockRecorder
}

// MockGraphQLSchemaClientMockRecorder is the mock recorder for MockGraphQLSchemaClient.
type MockGraphQLSchemaClientMockRecorder struct {
	mock *MockGraphQLSchemaClient
}

// NewMockGraphQLSchemaClient creates a new mock instance.
func NewMockGraphQLSchemaClient(ctrl *gomock.Controller) *MockGraphQLSchemaClient {
	mock := &MockGraphQLSchemaClient{ctrl: ctrl}
	mock.recorder = &MockGraphQLSchemaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQLSchemaClient) EXPECT() *MockGraphQLSchemaClientMockRecorder {
	return m.recorder
}

// CreateGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaClient) CreateGraphQLSchema(ctx context.Context, obj *v1alpha1.GraphQLSchema, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGraphQLSchema indicates an expected call of CreateGraphQLSchema.
func (mr *MockGraphQLSchemaClientMockRecorder) CreateGraphQLSchema(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaClient)(nil).CreateGraphQLSchema), varargs...)
}

// DeleteAllOfGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaClient) DeleteAllOfGraphQLSchema(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfGraphQLSchema indicates an expected call of DeleteAllOfGraphQLSchema.
func (mr *MockGraphQLSchemaClientMockRecorder) DeleteAllOfGraphQLSchema(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaClient)(nil).DeleteAllOfGraphQLSchema), varargs...)
}

// DeleteGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaClient) DeleteGraphQLSchema(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGraphQLSchema indicates an expected call of DeleteGraphQLSchema.
func (mr *MockGraphQLSchemaClientMockRecorder) DeleteGraphQLSchema(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaClient)(nil).DeleteGraphQLSchema), varargs...)
}

// GetGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaClient) GetGraphQLSchema(ctx context.Context, key client.ObjectKey) (*v1alpha1.GraphQLSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGraphQLSchema", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.GraphQLSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGraphQLSchema indicates an expected call of GetGraphQLSchema.
func (mr *MockGraphQLSchemaClientMockRecorder) GetGraphQLSchema(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaClient)(nil).GetGraphQLSchema), ctx, key)
}

// ListGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaClient) ListGraphQLSchema(ctx context.Context, opts ...client.ListOption) (*v1alpha1.GraphQLSchemaList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGraphQLSchema", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GraphQLSchemaList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGraphQLSchema indicates an expected call of ListGraphQLSchema.
func (mr *MockGraphQLSchemaClientMockRecorder) ListGraphQLSchema(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaClient)(nil).ListGraphQLSchema), varargs...)
}

// PatchGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaClient) PatchGraphQLSchema(ctx context.Context, obj *v1alpha1.GraphQLSchema, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGraphQLSchema indicates an expected call of PatchGraphQLSchema.
func (mr *MockGraphQLSchemaClientMockRecorder) PatchGraphQLSchema(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaClient)(nil).PatchGraphQLSchema), varargs...)
}

// PatchGraphQLSchemaStatus mocks base method.
func (m *MockGraphQLSchemaClient) PatchGraphQLSchemaStatus(ctx context.Context, obj *v1alpha1.GraphQLSchema, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGraphQLSchemaStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGraphQLSchemaStatus indicates an expected call of PatchGraphQLSchemaStatus.
func (mr *MockGraphQLSchemaClientMockRecorder) PatchGraphQLSchemaStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGraphQLSchemaStatus", reflect.TypeOf((*MockGraphQLSchemaClient)(nil).PatchGraphQLSchemaStatus), varargs...)
}

// UpdateGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaClient) UpdateGraphQLSchema(ctx context.Context, obj *v1alpha1.GraphQLSchema, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLSchema indicates an expected call of UpdateGraphQLSchema.
func (mr *MockGraphQLSchemaClientMockRecorder) UpdateGraphQLSchema(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaClient)(nil).UpdateGraphQLSchema), varargs...)
}

// UpdateGraphQLSchemaStatus mocks base method.
func (m *MockGraphQLSchemaClient) UpdateGraphQLSchemaStatus(ctx context.Context, obj *v1alpha1.GraphQLSchema, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGraphQLSchemaStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGraphQLSchemaStatus indicates an expected call of UpdateGraphQLSchemaStatus.
func (mr *MockGraphQLSchemaClientMockRecorder) UpdateGraphQLSchemaStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphQLSchemaStatus", reflect.TypeOf((*MockGraphQLSchemaClient)(nil).UpdateGraphQLSchemaStatus), varargs...)
}

// UpsertGraphQLSchema mocks base method.
func (m *MockGraphQLSchemaClient) UpsertGraphQLSchema(ctx context.Context, obj *v1alpha1.GraphQLSchema, transitionFuncs ...v1alpha1.GraphQLSchemaTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertGraphQLSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertGraphQLSchema indicates an expected call of UpsertGraphQLSchema.
func (mr *MockGraphQLSchemaClientMockRecorder) UpsertGraphQLSchema(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGraphQLSchema", reflect.TypeOf((*MockGraphQLSchemaClient)(nil).UpsertGraphQLSchema), varargs...)
}

// MockMulticlusterGraphQLSchemaClient is a mock of MulticlusterGraphQLSchemaClient interface.
type MockMulticlusterGraphQLSchemaClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGraphQLSchemaClientMockRecorder
}

// MockMulticlusterGraphQLSchemaClientMockRecorder is the mock recorder for MockMulticlusterGraphQLSchemaClient.
type MockMulticlusterGraphQLSchemaClientMockRecorder struct {
	mock *MockMulticlusterGraphQLSchemaClient
}

// NewMockMulticlusterGraphQLSchemaClient creates a new mock instance.
func NewMockMulticlusterGraphQLSchemaClient(ctrl *gomock.Controller) *MockMulticlusterGraphQLSchemaClient {
	mock := &MockMulticlusterGraphQLSchemaClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGraphQLSchemaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGraphQLSchemaClient) EXPECT() *MockMulticlusterGraphQLSchemaClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterGraphQLSchemaClient) Cluster(cluster string) (v1alpha1.GraphQLSchemaClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.GraphQLSchemaClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterGraphQLSchemaClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterGraphQLSchemaClient)(nil).Cluster), cluster)
}
