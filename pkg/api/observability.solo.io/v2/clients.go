// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v2

import (
	"context"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the observability.solo.io/v2 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the observability.solo.io/v2 APIs
type Clientset interface {
	// clienset for the observability.solo.io/v2/v2 APIs
	AccessLogPolicies() AccessLogPolicyClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the observability.solo.io/v2/v2 APIs
func (c *clientSet) AccessLogPolicies() AccessLogPolicyClient {
	return NewAccessLogPolicyClient(c.client)
}

// Reader knows how to read and list AccessLogPolicys.
type AccessLogPolicyReader interface {
	// Get retrieves a AccessLogPolicy for the given object key
	GetAccessLogPolicy(ctx context.Context, key client.ObjectKey) (*AccessLogPolicy, error)

	// List retrieves list of AccessLogPolicys for a given namespace and list options.
	ListAccessLogPolicy(ctx context.Context, opts ...client.ListOption) (*AccessLogPolicyList, error)
}

// AccessLogPolicyTransitionFunction instructs the AccessLogPolicyWriter how to transition between an existing
// AccessLogPolicy object and a desired on an Upsert
type AccessLogPolicyTransitionFunction func(existing, desired *AccessLogPolicy) error

// Writer knows how to create, delete, and update AccessLogPolicys.
type AccessLogPolicyWriter interface {
	// Create saves the AccessLogPolicy object.
	CreateAccessLogPolicy(ctx context.Context, obj *AccessLogPolicy, opts ...client.CreateOption) error

	// Delete deletes the AccessLogPolicy object.
	DeleteAccessLogPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given AccessLogPolicy object.
	UpdateAccessLogPolicy(ctx context.Context, obj *AccessLogPolicy, opts ...client.UpdateOption) error

	// Patch patches the given AccessLogPolicy object.
	PatchAccessLogPolicy(ctx context.Context, obj *AccessLogPolicy, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all AccessLogPolicy objects matching the given options.
	DeleteAllOfAccessLogPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the AccessLogPolicy object.
	UpsertAccessLogPolicy(ctx context.Context, obj *AccessLogPolicy, transitionFuncs ...AccessLogPolicyTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a AccessLogPolicy object.
type AccessLogPolicyStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given AccessLogPolicy object.
	UpdateAccessLogPolicyStatus(ctx context.Context, obj *AccessLogPolicy, opts ...client.UpdateOption) error

	// Patch patches the given AccessLogPolicy object's subresource.
	PatchAccessLogPolicyStatus(ctx context.Context, obj *AccessLogPolicy, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on AccessLogPolicys.
type AccessLogPolicyClient interface {
	AccessLogPolicyReader
	AccessLogPolicyWriter
	AccessLogPolicyStatusWriter
}

type accessLogPolicyClient struct {
	client client.Client
}

func NewAccessLogPolicyClient(client client.Client) *accessLogPolicyClient {
	return &accessLogPolicyClient{client: client}
}

func (c *accessLogPolicyClient) GetAccessLogPolicy(ctx context.Context, key client.ObjectKey) (*AccessLogPolicy, error) {
	obj := &AccessLogPolicy{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *accessLogPolicyClient) ListAccessLogPolicy(ctx context.Context, opts ...client.ListOption) (*AccessLogPolicyList, error) {
	list := &AccessLogPolicyList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *accessLogPolicyClient) CreateAccessLogPolicy(ctx context.Context, obj *AccessLogPolicy, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *accessLogPolicyClient) DeleteAccessLogPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &AccessLogPolicy{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *accessLogPolicyClient) UpdateAccessLogPolicy(ctx context.Context, obj *AccessLogPolicy, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *accessLogPolicyClient) PatchAccessLogPolicy(ctx context.Context, obj *AccessLogPolicy, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *accessLogPolicyClient) DeleteAllOfAccessLogPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &AccessLogPolicy{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *accessLogPolicyClient) UpsertAccessLogPolicy(ctx context.Context, obj *AccessLogPolicy, transitionFuncs ...AccessLogPolicyTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*AccessLogPolicy), desired.(*AccessLogPolicy)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *accessLogPolicyClient) UpdateAccessLogPolicyStatus(ctx context.Context, obj *AccessLogPolicy, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *accessLogPolicyClient) PatchAccessLogPolicyStatus(ctx context.Context, obj *AccessLogPolicy, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides AccessLogPolicyClients for multiple clusters.
type MulticlusterAccessLogPolicyClient interface {
	// Cluster returns a AccessLogPolicyClient for the given cluster
	Cluster(cluster string) (AccessLogPolicyClient, error)
}

type multiclusterAccessLogPolicyClient struct {
	client multicluster.Client
}

func NewMulticlusterAccessLogPolicyClient(client multicluster.Client) MulticlusterAccessLogPolicyClient {
	return &multiclusterAccessLogPolicyClient{client: client}
}

func (m *multiclusterAccessLogPolicyClient) Cluster(cluster string) (AccessLogPolicyClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewAccessLogPolicyClient(client), nil
}
