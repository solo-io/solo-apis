// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	observability_solo_io_v2 "github.com/solo-io/solo-apis/pkg/api/observability.solo.io/v2"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the AccessLogPolicy Resource
// DEPRECATED: Prefer reconciler pattern.
type AccessLogPolicyEventHandler interface {
	CreateAccessLogPolicy(obj *observability_solo_io_v2.AccessLogPolicy) error
	UpdateAccessLogPolicy(old, new *observability_solo_io_v2.AccessLogPolicy) error
	DeleteAccessLogPolicy(obj *observability_solo_io_v2.AccessLogPolicy) error
	GenericAccessLogPolicy(obj *observability_solo_io_v2.AccessLogPolicy) error
}

type AccessLogPolicyEventHandlerFuncs struct {
	OnCreate  func(obj *observability_solo_io_v2.AccessLogPolicy) error
	OnUpdate  func(old, new *observability_solo_io_v2.AccessLogPolicy) error
	OnDelete  func(obj *observability_solo_io_v2.AccessLogPolicy) error
	OnGeneric func(obj *observability_solo_io_v2.AccessLogPolicy) error
}

func (f *AccessLogPolicyEventHandlerFuncs) CreateAccessLogPolicy(obj *observability_solo_io_v2.AccessLogPolicy) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *AccessLogPolicyEventHandlerFuncs) DeleteAccessLogPolicy(obj *observability_solo_io_v2.AccessLogPolicy) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *AccessLogPolicyEventHandlerFuncs) UpdateAccessLogPolicy(objOld, objNew *observability_solo_io_v2.AccessLogPolicy) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *AccessLogPolicyEventHandlerFuncs) GenericAccessLogPolicy(obj *observability_solo_io_v2.AccessLogPolicy) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type AccessLogPolicyEventWatcher interface {
	AddEventHandler(ctx context.Context, h AccessLogPolicyEventHandler, predicates ...predicate.Predicate) error
}

type accessLogPolicyEventWatcher struct {
	watcher events.EventWatcher
}

func NewAccessLogPolicyEventWatcher(name string, mgr manager.Manager) AccessLogPolicyEventWatcher {
	return &accessLogPolicyEventWatcher{
		watcher: events.NewWatcher(name, mgr, &observability_solo_io_v2.AccessLogPolicy{}),
	}
}

func (c *accessLogPolicyEventWatcher) AddEventHandler(ctx context.Context, h AccessLogPolicyEventHandler, predicates ...predicate.Predicate) error {
	handler := genericAccessLogPolicyHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericAccessLogPolicyHandler implements a generic events.EventHandler
type genericAccessLogPolicyHandler struct {
	handler AccessLogPolicyEventHandler
}

func (h genericAccessLogPolicyHandler) Create(object client.Object) error {
	obj, ok := object.(*observability_solo_io_v2.AccessLogPolicy)
	if !ok {
		return errors.Errorf("internal error: AccessLogPolicy handler received event for %T", object)
	}
	return h.handler.CreateAccessLogPolicy(obj)
}

func (h genericAccessLogPolicyHandler) Delete(object client.Object) error {
	obj, ok := object.(*observability_solo_io_v2.AccessLogPolicy)
	if !ok {
		return errors.Errorf("internal error: AccessLogPolicy handler received event for %T", object)
	}
	return h.handler.DeleteAccessLogPolicy(obj)
}

func (h genericAccessLogPolicyHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*observability_solo_io_v2.AccessLogPolicy)
	if !ok {
		return errors.Errorf("internal error: AccessLogPolicy handler received event for %T", old)
	}
	objNew, ok := new.(*observability_solo_io_v2.AccessLogPolicy)
	if !ok {
		return errors.Errorf("internal error: AccessLogPolicy handler received event for %T", new)
	}
	return h.handler.UpdateAccessLogPolicy(objOld, objNew)
}

func (h genericAccessLogPolicyHandler) Generic(object client.Object) error {
	obj, ok := object.(*observability_solo_io_v2.AccessLogPolicy)
	if !ok {
		return errors.Errorf("internal error: AccessLogPolicy handler received event for %T", object)
	}
	return h.handler.GenericAccessLogPolicy(obj)
}
