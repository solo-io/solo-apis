// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	observability_solo_io_v2 "github.com/solo-io/solo-apis/pkg/api/observability.solo.io/v2"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the AccessLogPolicy Resource.
// implemented by the user
type AccessLogPolicyReconciler interface {
	ReconcileAccessLogPolicy(obj *observability_solo_io_v2.AccessLogPolicy) (reconcile.Result, error)
}

// Reconcile deletion events for the AccessLogPolicy Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type AccessLogPolicyDeletionReconciler interface {
	ReconcileAccessLogPolicyDeletion(req reconcile.Request) error
}

type AccessLogPolicyReconcilerFuncs struct {
	OnReconcileAccessLogPolicy         func(obj *observability_solo_io_v2.AccessLogPolicy) (reconcile.Result, error)
	OnReconcileAccessLogPolicyDeletion func(req reconcile.Request) error
}

func (f *AccessLogPolicyReconcilerFuncs) ReconcileAccessLogPolicy(obj *observability_solo_io_v2.AccessLogPolicy) (reconcile.Result, error) {
	if f.OnReconcileAccessLogPolicy == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileAccessLogPolicy(obj)
}

func (f *AccessLogPolicyReconcilerFuncs) ReconcileAccessLogPolicyDeletion(req reconcile.Request) error {
	if f.OnReconcileAccessLogPolicyDeletion == nil {
		return nil
	}
	return f.OnReconcileAccessLogPolicyDeletion(req)
}

// Reconcile and finalize the AccessLogPolicy Resource
// implemented by the user
type AccessLogPolicyFinalizer interface {
	AccessLogPolicyReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	AccessLogPolicyFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeAccessLogPolicy(obj *observability_solo_io_v2.AccessLogPolicy) error
}

type AccessLogPolicyReconcileLoop interface {
	RunAccessLogPolicyReconciler(ctx context.Context, rec AccessLogPolicyReconciler, predicates ...predicate.Predicate) error
}

type accessLogPolicyReconcileLoop struct {
	loop reconcile.Loop
}

func NewAccessLogPolicyReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) AccessLogPolicyReconcileLoop {
	return &accessLogPolicyReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &observability_solo_io_v2.AccessLogPolicy{}, options),
	}
}

func (c *accessLogPolicyReconcileLoop) RunAccessLogPolicyReconciler(ctx context.Context, reconciler AccessLogPolicyReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericAccessLogPolicyReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(AccessLogPolicyFinalizer); ok {
		reconcilerWrapper = genericAccessLogPolicyFinalizer{
			genericAccessLogPolicyReconciler: genericReconciler,
			finalizingReconciler:             finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericAccessLogPolicyHandler implements a generic reconcile.Reconciler
type genericAccessLogPolicyReconciler struct {
	reconciler AccessLogPolicyReconciler
}

func (r genericAccessLogPolicyReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*observability_solo_io_v2.AccessLogPolicy)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: AccessLogPolicy handler received event for %T", object)
	}
	return r.reconciler.ReconcileAccessLogPolicy(obj)
}

func (r genericAccessLogPolicyReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(AccessLogPolicyDeletionReconciler); ok {
		return deletionReconciler.ReconcileAccessLogPolicyDeletion(request)
	}
	return nil
}

// genericAccessLogPolicyFinalizer implements a generic reconcile.FinalizingReconciler
type genericAccessLogPolicyFinalizer struct {
	genericAccessLogPolicyReconciler
	finalizingReconciler AccessLogPolicyFinalizer
}

func (r genericAccessLogPolicyFinalizer) FinalizerName() string {
	return r.finalizingReconciler.AccessLogPolicyFinalizerName()
}

func (r genericAccessLogPolicyFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*observability_solo_io_v2.AccessLogPolicy)
	if !ok {
		return errors.Errorf("internal error: AccessLogPolicy handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeAccessLogPolicy(obj)
}
