// Code generated by skv2. DO NOT EDIT.

package v1



import (
    fed_gloo_solo_io_v1 "github.com/solo-io/solo-apis/pkg/api/fed.gloo.solo.io/v1"

    "k8s.io/client-go/rest"
    "sigs.k8s.io/controller-runtime/pkg/client"
)

/*
  The intention of these providers are to be used for Mocking.
  They expose the Clients as interfaces, as well as factories to provide mocked versions
  of the clients when they require building within a component.

  See package `github.com/solo-io/skv2/pkg/multicluster/register` for example
*/

// Provider for FederatedSettingsClient from Clientset
func FederatedSettingsClientFromClientsetProvider(clients fed_gloo_solo_io_v1.Clientset) fed_gloo_solo_io_v1.FederatedSettingsClient {
    return clients.FederatedSettings()
}

// Provider for FederatedSettings Client from Client
func FederatedSettingsClientProvider(client client.Client) fed_gloo_solo_io_v1.FederatedSettingsClient {
    return fed_gloo_solo_io_v1.NewFederatedSettingsClient(client)
}

type FederatedSettingsClientFactory func(client client.Client) fed_gloo_solo_io_v1.FederatedSettingsClient

func FederatedSettingsClientFactoryProvider() FederatedSettingsClientFactory {
    return FederatedSettingsClientProvider
}

type FederatedSettingsClientFromConfigFactory func(cfg *rest.Config) (fed_gloo_solo_io_v1.FederatedSettingsClient, error)

func FederatedSettingsClientFromConfigFactoryProvider() FederatedSettingsClientFromConfigFactory {
    return func(cfg *rest.Config) (fed_gloo_solo_io_v1.FederatedSettingsClient, error) {
        clients, err := fed_gloo_solo_io_v1.NewClientsetFromConfig(cfg)
        if err != nil {
            return nil, err
        }
        return clients.FederatedSettings(), nil
    }
}

// Provider for FederatedUpstreamClient from Clientset
func FederatedUpstreamClientFromClientsetProvider(clients fed_gloo_solo_io_v1.Clientset) fed_gloo_solo_io_v1.FederatedUpstreamClient {
    return clients.FederatedUpstreams()
}

// Provider for FederatedUpstream Client from Client
func FederatedUpstreamClientProvider(client client.Client) fed_gloo_solo_io_v1.FederatedUpstreamClient {
    return fed_gloo_solo_io_v1.NewFederatedUpstreamClient(client)
}

type FederatedUpstreamClientFactory func(client client.Client) fed_gloo_solo_io_v1.FederatedUpstreamClient

func FederatedUpstreamClientFactoryProvider() FederatedUpstreamClientFactory {
    return FederatedUpstreamClientProvider
}

type FederatedUpstreamClientFromConfigFactory func(cfg *rest.Config) (fed_gloo_solo_io_v1.FederatedUpstreamClient, error)

func FederatedUpstreamClientFromConfigFactoryProvider() FederatedUpstreamClientFromConfigFactory {
    return func(cfg *rest.Config) (fed_gloo_solo_io_v1.FederatedUpstreamClient, error) {
        clients, err := fed_gloo_solo_io_v1.NewClientsetFromConfig(cfg)
        if err != nil {
            return nil, err
        }
        return clients.FederatedUpstreams(), nil
    }
}

// Provider for FederatedUpstreamGroupClient from Clientset
func FederatedUpstreamGroupClientFromClientsetProvider(clients fed_gloo_solo_io_v1.Clientset) fed_gloo_solo_io_v1.FederatedUpstreamGroupClient {
    return clients.FederatedUpstreamGroups()
}

// Provider for FederatedUpstreamGroup Client from Client
func FederatedUpstreamGroupClientProvider(client client.Client) fed_gloo_solo_io_v1.FederatedUpstreamGroupClient {
    return fed_gloo_solo_io_v1.NewFederatedUpstreamGroupClient(client)
}

type FederatedUpstreamGroupClientFactory func(client client.Client) fed_gloo_solo_io_v1.FederatedUpstreamGroupClient

func FederatedUpstreamGroupClientFactoryProvider() FederatedUpstreamGroupClientFactory {
    return FederatedUpstreamGroupClientProvider
}

type FederatedUpstreamGroupClientFromConfigFactory func(cfg *rest.Config) (fed_gloo_solo_io_v1.FederatedUpstreamGroupClient, error)

func FederatedUpstreamGroupClientFromConfigFactoryProvider() FederatedUpstreamGroupClientFromConfigFactory {
    return func(cfg *rest.Config) (fed_gloo_solo_io_v1.FederatedUpstreamGroupClient, error) {
        clients, err := fed_gloo_solo_io_v1.NewClientsetFromConfig(cfg)
        if err != nil {
            return nil, err
        }
        return clients.FederatedUpstreamGroups(), nil
    }
}