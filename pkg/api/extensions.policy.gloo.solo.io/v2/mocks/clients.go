// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v2 is a generated GoMock package.
package mock_v2

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v2 "github.com/solo-io/solo-apis/pkg/api/extensions.policy.gloo.solo.io/v2"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterClientset) Cluster(cluster string) (v2.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// WasmDeploymentPolicies mocks base method
func (m *MockClientset) WasmDeploymentPolicies() v2.WasmDeploymentPolicyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WasmDeploymentPolicies")
	ret0, _ := ret[0].(v2.WasmDeploymentPolicyClient)
	return ret0
}

// WasmDeploymentPolicies indicates an expected call of WasmDeploymentPolicies
func (mr *MockClientsetMockRecorder) WasmDeploymentPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WasmDeploymentPolicies", reflect.TypeOf((*MockClientset)(nil).WasmDeploymentPolicies))
}

// MockWasmDeploymentPolicyReader is a mock of WasmDeploymentPolicyReader interface
type MockWasmDeploymentPolicyReader struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentPolicyReaderMockRecorder
}

// MockWasmDeploymentPolicyReaderMockRecorder is the mock recorder for MockWasmDeploymentPolicyReader
type MockWasmDeploymentPolicyReaderMockRecorder struct {
	mock *MockWasmDeploymentPolicyReader
}

// NewMockWasmDeploymentPolicyReader creates a new mock instance
func NewMockWasmDeploymentPolicyReader(ctrl *gomock.Controller) *MockWasmDeploymentPolicyReader {
	mock := &MockWasmDeploymentPolicyReader{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentPolicyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWasmDeploymentPolicyReader) EXPECT() *MockWasmDeploymentPolicyReaderMockRecorder {
	return m.recorder
}

// GetWasmDeploymentPolicy mocks base method
func (m *MockWasmDeploymentPolicyReader) GetWasmDeploymentPolicy(ctx context.Context, key client.ObjectKey) (*v2.WasmDeploymentPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWasmDeploymentPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.WasmDeploymentPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWasmDeploymentPolicy indicates an expected call of GetWasmDeploymentPolicy
func (mr *MockWasmDeploymentPolicyReaderMockRecorder) GetWasmDeploymentPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWasmDeploymentPolicy", reflect.TypeOf((*MockWasmDeploymentPolicyReader)(nil).GetWasmDeploymentPolicy), ctx, key)
}

// ListWasmDeploymentPolicy mocks base method
func (m *MockWasmDeploymentPolicyReader) ListWasmDeploymentPolicy(ctx context.Context, opts ...client.ListOption) (*v2.WasmDeploymentPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWasmDeploymentPolicy", varargs...)
	ret0, _ := ret[0].(*v2.WasmDeploymentPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWasmDeploymentPolicy indicates an expected call of ListWasmDeploymentPolicy
func (mr *MockWasmDeploymentPolicyReaderMockRecorder) ListWasmDeploymentPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWasmDeploymentPolicy", reflect.TypeOf((*MockWasmDeploymentPolicyReader)(nil).ListWasmDeploymentPolicy), varargs...)
}

// MockWasmDeploymentPolicyWriter is a mock of WasmDeploymentPolicyWriter interface
type MockWasmDeploymentPolicyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentPolicyWriterMockRecorder
}

// MockWasmDeploymentPolicyWriterMockRecorder is the mock recorder for MockWasmDeploymentPolicyWriter
type MockWasmDeploymentPolicyWriterMockRecorder struct {
	mock *MockWasmDeploymentPolicyWriter
}

// NewMockWasmDeploymentPolicyWriter creates a new mock instance
func NewMockWasmDeploymentPolicyWriter(ctrl *gomock.Controller) *MockWasmDeploymentPolicyWriter {
	mock := &MockWasmDeploymentPolicyWriter{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentPolicyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWasmDeploymentPolicyWriter) EXPECT() *MockWasmDeploymentPolicyWriterMockRecorder {
	return m.recorder
}

// CreateWasmDeploymentPolicy mocks base method
func (m *MockWasmDeploymentPolicyWriter) CreateWasmDeploymentPolicy(ctx context.Context, obj *v2.WasmDeploymentPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWasmDeploymentPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWasmDeploymentPolicy indicates an expected call of CreateWasmDeploymentPolicy
func (mr *MockWasmDeploymentPolicyWriterMockRecorder) CreateWasmDeploymentPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWasmDeploymentPolicy", reflect.TypeOf((*MockWasmDeploymentPolicyWriter)(nil).CreateWasmDeploymentPolicy), varargs...)
}

// DeleteWasmDeploymentPolicy mocks base method
func (m *MockWasmDeploymentPolicyWriter) DeleteWasmDeploymentPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWasmDeploymentPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWasmDeploymentPolicy indicates an expected call of DeleteWasmDeploymentPolicy
func (mr *MockWasmDeploymentPolicyWriterMockRecorder) DeleteWasmDeploymentPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWasmDeploymentPolicy", reflect.TypeOf((*MockWasmDeploymentPolicyWriter)(nil).DeleteWasmDeploymentPolicy), varargs...)
}

// UpdateWasmDeploymentPolicy mocks base method
func (m *MockWasmDeploymentPolicyWriter) UpdateWasmDeploymentPolicy(ctx context.Context, obj *v2.WasmDeploymentPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWasmDeploymentPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWasmDeploymentPolicy indicates an expected call of UpdateWasmDeploymentPolicy
func (mr *MockWasmDeploymentPolicyWriterMockRecorder) UpdateWasmDeploymentPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWasmDeploymentPolicy", reflect.TypeOf((*MockWasmDeploymentPolicyWriter)(nil).UpdateWasmDeploymentPolicy), varargs...)
}

// PatchWasmDeploymentPolicy mocks base method
func (m *MockWasmDeploymentPolicyWriter) PatchWasmDeploymentPolicy(ctx context.Context, obj *v2.WasmDeploymentPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWasmDeploymentPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWasmDeploymentPolicy indicates an expected call of PatchWasmDeploymentPolicy
func (mr *MockWasmDeploymentPolicyWriterMockRecorder) PatchWasmDeploymentPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWasmDeploymentPolicy", reflect.TypeOf((*MockWasmDeploymentPolicyWriter)(nil).PatchWasmDeploymentPolicy), varargs...)
}

// DeleteAllOfWasmDeploymentPolicy mocks base method
func (m *MockWasmDeploymentPolicyWriter) DeleteAllOfWasmDeploymentPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfWasmDeploymentPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfWasmDeploymentPolicy indicates an expected call of DeleteAllOfWasmDeploymentPolicy
func (mr *MockWasmDeploymentPolicyWriterMockRecorder) DeleteAllOfWasmDeploymentPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfWasmDeploymentPolicy", reflect.TypeOf((*MockWasmDeploymentPolicyWriter)(nil).DeleteAllOfWasmDeploymentPolicy), varargs...)
}

// UpsertWasmDeploymentPolicy mocks base method
func (m *MockWasmDeploymentPolicyWriter) UpsertWasmDeploymentPolicy(ctx context.Context, obj *v2.WasmDeploymentPolicy, transitionFuncs ...v2.WasmDeploymentPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertWasmDeploymentPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertWasmDeploymentPolicy indicates an expected call of UpsertWasmDeploymentPolicy
func (mr *MockWasmDeploymentPolicyWriterMockRecorder) UpsertWasmDeploymentPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertWasmDeploymentPolicy", reflect.TypeOf((*MockWasmDeploymentPolicyWriter)(nil).UpsertWasmDeploymentPolicy), varargs...)
}

// MockWasmDeploymentPolicyStatusWriter is a mock of WasmDeploymentPolicyStatusWriter interface
type MockWasmDeploymentPolicyStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentPolicyStatusWriterMockRecorder
}

// MockWasmDeploymentPolicyStatusWriterMockRecorder is the mock recorder for MockWasmDeploymentPolicyStatusWriter
type MockWasmDeploymentPolicyStatusWriterMockRecorder struct {
	mock *MockWasmDeploymentPolicyStatusWriter
}

// NewMockWasmDeploymentPolicyStatusWriter creates a new mock instance
func NewMockWasmDeploymentPolicyStatusWriter(ctrl *gomock.Controller) *MockWasmDeploymentPolicyStatusWriter {
	mock := &MockWasmDeploymentPolicyStatusWriter{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentPolicyStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWasmDeploymentPolicyStatusWriter) EXPECT() *MockWasmDeploymentPolicyStatusWriterMockRecorder {
	return m.recorder
}

// UpdateWasmDeploymentPolicyStatus mocks base method
func (m *MockWasmDeploymentPolicyStatusWriter) UpdateWasmDeploymentPolicyStatus(ctx context.Context, obj *v2.WasmDeploymentPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWasmDeploymentPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWasmDeploymentPolicyStatus indicates an expected call of UpdateWasmDeploymentPolicyStatus
func (mr *MockWasmDeploymentPolicyStatusWriterMockRecorder) UpdateWasmDeploymentPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWasmDeploymentPolicyStatus", reflect.TypeOf((*MockWasmDeploymentPolicyStatusWriter)(nil).UpdateWasmDeploymentPolicyStatus), varargs...)
}

// PatchWasmDeploymentPolicyStatus mocks base method
func (m *MockWasmDeploymentPolicyStatusWriter) PatchWasmDeploymentPolicyStatus(ctx context.Context, obj *v2.WasmDeploymentPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWasmDeploymentPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWasmDeploymentPolicyStatus indicates an expected call of PatchWasmDeploymentPolicyStatus
func (mr *MockWasmDeploymentPolicyStatusWriterMockRecorder) PatchWasmDeploymentPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWasmDeploymentPolicyStatus", reflect.TypeOf((*MockWasmDeploymentPolicyStatusWriter)(nil).PatchWasmDeploymentPolicyStatus), varargs...)
}

// MockWasmDeploymentPolicyClient is a mock of WasmDeploymentPolicyClient interface
type MockWasmDeploymentPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentPolicyClientMockRecorder
}

// MockWasmDeploymentPolicyClientMockRecorder is the mock recorder for MockWasmDeploymentPolicyClient
type MockWasmDeploymentPolicyClientMockRecorder struct {
	mock *MockWasmDeploymentPolicyClient
}

// NewMockWasmDeploymentPolicyClient creates a new mock instance
func NewMockWasmDeploymentPolicyClient(ctrl *gomock.Controller) *MockWasmDeploymentPolicyClient {
	mock := &MockWasmDeploymentPolicyClient{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWasmDeploymentPolicyClient) EXPECT() *MockWasmDeploymentPolicyClientMockRecorder {
	return m.recorder
}

// GetWasmDeploymentPolicy mocks base method
func (m *MockWasmDeploymentPolicyClient) GetWasmDeploymentPolicy(ctx context.Context, key client.ObjectKey) (*v2.WasmDeploymentPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWasmDeploymentPolicy", ctx, key)
	ret0, _ := ret[0].(*v2.WasmDeploymentPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWasmDeploymentPolicy indicates an expected call of GetWasmDeploymentPolicy
func (mr *MockWasmDeploymentPolicyClientMockRecorder) GetWasmDeploymentPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWasmDeploymentPolicy", reflect.TypeOf((*MockWasmDeploymentPolicyClient)(nil).GetWasmDeploymentPolicy), ctx, key)
}

// ListWasmDeploymentPolicy mocks base method
func (m *MockWasmDeploymentPolicyClient) ListWasmDeploymentPolicy(ctx context.Context, opts ...client.ListOption) (*v2.WasmDeploymentPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWasmDeploymentPolicy", varargs...)
	ret0, _ := ret[0].(*v2.WasmDeploymentPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWasmDeploymentPolicy indicates an expected call of ListWasmDeploymentPolicy
func (mr *MockWasmDeploymentPolicyClientMockRecorder) ListWasmDeploymentPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWasmDeploymentPolicy", reflect.TypeOf((*MockWasmDeploymentPolicyClient)(nil).ListWasmDeploymentPolicy), varargs...)
}

// CreateWasmDeploymentPolicy mocks base method
func (m *MockWasmDeploymentPolicyClient) CreateWasmDeploymentPolicy(ctx context.Context, obj *v2.WasmDeploymentPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWasmDeploymentPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWasmDeploymentPolicy indicates an expected call of CreateWasmDeploymentPolicy
func (mr *MockWasmDeploymentPolicyClientMockRecorder) CreateWasmDeploymentPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWasmDeploymentPolicy", reflect.TypeOf((*MockWasmDeploymentPolicyClient)(nil).CreateWasmDeploymentPolicy), varargs...)
}

// DeleteWasmDeploymentPolicy mocks base method
func (m *MockWasmDeploymentPolicyClient) DeleteWasmDeploymentPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWasmDeploymentPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWasmDeploymentPolicy indicates an expected call of DeleteWasmDeploymentPolicy
func (mr *MockWasmDeploymentPolicyClientMockRecorder) DeleteWasmDeploymentPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWasmDeploymentPolicy", reflect.TypeOf((*MockWasmDeploymentPolicyClient)(nil).DeleteWasmDeploymentPolicy), varargs...)
}

// UpdateWasmDeploymentPolicy mocks base method
func (m *MockWasmDeploymentPolicyClient) UpdateWasmDeploymentPolicy(ctx context.Context, obj *v2.WasmDeploymentPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWasmDeploymentPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWasmDeploymentPolicy indicates an expected call of UpdateWasmDeploymentPolicy
func (mr *MockWasmDeploymentPolicyClientMockRecorder) UpdateWasmDeploymentPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWasmDeploymentPolicy", reflect.TypeOf((*MockWasmDeploymentPolicyClient)(nil).UpdateWasmDeploymentPolicy), varargs...)
}

// PatchWasmDeploymentPolicy mocks base method
func (m *MockWasmDeploymentPolicyClient) PatchWasmDeploymentPolicy(ctx context.Context, obj *v2.WasmDeploymentPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWasmDeploymentPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWasmDeploymentPolicy indicates an expected call of PatchWasmDeploymentPolicy
func (mr *MockWasmDeploymentPolicyClientMockRecorder) PatchWasmDeploymentPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWasmDeploymentPolicy", reflect.TypeOf((*MockWasmDeploymentPolicyClient)(nil).PatchWasmDeploymentPolicy), varargs...)
}

// DeleteAllOfWasmDeploymentPolicy mocks base method
func (m *MockWasmDeploymentPolicyClient) DeleteAllOfWasmDeploymentPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfWasmDeploymentPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfWasmDeploymentPolicy indicates an expected call of DeleteAllOfWasmDeploymentPolicy
func (mr *MockWasmDeploymentPolicyClientMockRecorder) DeleteAllOfWasmDeploymentPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfWasmDeploymentPolicy", reflect.TypeOf((*MockWasmDeploymentPolicyClient)(nil).DeleteAllOfWasmDeploymentPolicy), varargs...)
}

// UpsertWasmDeploymentPolicy mocks base method
func (m *MockWasmDeploymentPolicyClient) UpsertWasmDeploymentPolicy(ctx context.Context, obj *v2.WasmDeploymentPolicy, transitionFuncs ...v2.WasmDeploymentPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertWasmDeploymentPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertWasmDeploymentPolicy indicates an expected call of UpsertWasmDeploymentPolicy
func (mr *MockWasmDeploymentPolicyClientMockRecorder) UpsertWasmDeploymentPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertWasmDeploymentPolicy", reflect.TypeOf((*MockWasmDeploymentPolicyClient)(nil).UpsertWasmDeploymentPolicy), varargs...)
}

// UpdateWasmDeploymentPolicyStatus mocks base method
func (m *MockWasmDeploymentPolicyClient) UpdateWasmDeploymentPolicyStatus(ctx context.Context, obj *v2.WasmDeploymentPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWasmDeploymentPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWasmDeploymentPolicyStatus indicates an expected call of UpdateWasmDeploymentPolicyStatus
func (mr *MockWasmDeploymentPolicyClientMockRecorder) UpdateWasmDeploymentPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWasmDeploymentPolicyStatus", reflect.TypeOf((*MockWasmDeploymentPolicyClient)(nil).UpdateWasmDeploymentPolicyStatus), varargs...)
}

// PatchWasmDeploymentPolicyStatus mocks base method
func (m *MockWasmDeploymentPolicyClient) PatchWasmDeploymentPolicyStatus(ctx context.Context, obj *v2.WasmDeploymentPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWasmDeploymentPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWasmDeploymentPolicyStatus indicates an expected call of PatchWasmDeploymentPolicyStatus
func (mr *MockWasmDeploymentPolicyClientMockRecorder) PatchWasmDeploymentPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWasmDeploymentPolicyStatus", reflect.TypeOf((*MockWasmDeploymentPolicyClient)(nil).PatchWasmDeploymentPolicyStatus), varargs...)
}

// MockMulticlusterWasmDeploymentPolicyClient is a mock of MulticlusterWasmDeploymentPolicyClient interface
type MockMulticlusterWasmDeploymentPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWasmDeploymentPolicyClientMockRecorder
}

// MockMulticlusterWasmDeploymentPolicyClientMockRecorder is the mock recorder for MockMulticlusterWasmDeploymentPolicyClient
type MockMulticlusterWasmDeploymentPolicyClientMockRecorder struct {
	mock *MockMulticlusterWasmDeploymentPolicyClient
}

// NewMockMulticlusterWasmDeploymentPolicyClient creates a new mock instance
func NewMockMulticlusterWasmDeploymentPolicyClient(ctrl *gomock.Controller) *MockMulticlusterWasmDeploymentPolicyClient {
	mock := &MockMulticlusterWasmDeploymentPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWasmDeploymentPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterWasmDeploymentPolicyClient) EXPECT() *MockMulticlusterWasmDeploymentPolicyClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterWasmDeploymentPolicyClient) Cluster(cluster string) (v2.WasmDeploymentPolicyClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2.WasmDeploymentPolicyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterWasmDeploymentPolicyClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterWasmDeploymentPolicyClient)(nil).Cluster), cluster)
}
