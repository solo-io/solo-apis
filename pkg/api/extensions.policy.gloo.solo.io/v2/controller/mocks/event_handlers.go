// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v2 "github.com/solo-io/solo-apis/pkg/api/extensions.policy.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/pkg/api/extensions.policy.gloo.solo.io/v2/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockWasmDeploymentPolicyEventHandler is a mock of WasmDeploymentPolicyEventHandler interface.
type MockWasmDeploymentPolicyEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentPolicyEventHandlerMockRecorder
}

// MockWasmDeploymentPolicyEventHandlerMockRecorder is the mock recorder for MockWasmDeploymentPolicyEventHandler.
type MockWasmDeploymentPolicyEventHandlerMockRecorder struct {
	mock *MockWasmDeploymentPolicyEventHandler
}

// NewMockWasmDeploymentPolicyEventHandler creates a new mock instance.
func NewMockWasmDeploymentPolicyEventHandler(ctrl *gomock.Controller) *MockWasmDeploymentPolicyEventHandler {
	mock := &MockWasmDeploymentPolicyEventHandler{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentPolicyEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmDeploymentPolicyEventHandler) EXPECT() *MockWasmDeploymentPolicyEventHandlerMockRecorder {
	return m.recorder
}

// CreateWasmDeploymentPolicy mocks base method.
func (m *MockWasmDeploymentPolicyEventHandler) CreateWasmDeploymentPolicy(obj *v2.WasmDeploymentPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWasmDeploymentPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWasmDeploymentPolicy indicates an expected call of CreateWasmDeploymentPolicy.
func (mr *MockWasmDeploymentPolicyEventHandlerMockRecorder) CreateWasmDeploymentPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWasmDeploymentPolicy", reflect.TypeOf((*MockWasmDeploymentPolicyEventHandler)(nil).CreateWasmDeploymentPolicy), obj)
}

// DeleteWasmDeploymentPolicy mocks base method.
func (m *MockWasmDeploymentPolicyEventHandler) DeleteWasmDeploymentPolicy(obj *v2.WasmDeploymentPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWasmDeploymentPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWasmDeploymentPolicy indicates an expected call of DeleteWasmDeploymentPolicy.
func (mr *MockWasmDeploymentPolicyEventHandlerMockRecorder) DeleteWasmDeploymentPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWasmDeploymentPolicy", reflect.TypeOf((*MockWasmDeploymentPolicyEventHandler)(nil).DeleteWasmDeploymentPolicy), obj)
}

// GenericWasmDeploymentPolicy mocks base method.
func (m *MockWasmDeploymentPolicyEventHandler) GenericWasmDeploymentPolicy(obj *v2.WasmDeploymentPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericWasmDeploymentPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericWasmDeploymentPolicy indicates an expected call of GenericWasmDeploymentPolicy.
func (mr *MockWasmDeploymentPolicyEventHandlerMockRecorder) GenericWasmDeploymentPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericWasmDeploymentPolicy", reflect.TypeOf((*MockWasmDeploymentPolicyEventHandler)(nil).GenericWasmDeploymentPolicy), obj)
}

// UpdateWasmDeploymentPolicy mocks base method.
func (m *MockWasmDeploymentPolicyEventHandler) UpdateWasmDeploymentPolicy(old, new *v2.WasmDeploymentPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWasmDeploymentPolicy", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWasmDeploymentPolicy indicates an expected call of UpdateWasmDeploymentPolicy.
func (mr *MockWasmDeploymentPolicyEventHandlerMockRecorder) UpdateWasmDeploymentPolicy(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWasmDeploymentPolicy", reflect.TypeOf((*MockWasmDeploymentPolicyEventHandler)(nil).UpdateWasmDeploymentPolicy), old, new)
}

// MockWasmDeploymentPolicyEventWatcher is a mock of WasmDeploymentPolicyEventWatcher interface.
type MockWasmDeploymentPolicyEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentPolicyEventWatcherMockRecorder
}

// MockWasmDeploymentPolicyEventWatcherMockRecorder is the mock recorder for MockWasmDeploymentPolicyEventWatcher.
type MockWasmDeploymentPolicyEventWatcherMockRecorder struct {
	mock *MockWasmDeploymentPolicyEventWatcher
}

// NewMockWasmDeploymentPolicyEventWatcher creates a new mock instance.
func NewMockWasmDeploymentPolicyEventWatcher(ctrl *gomock.Controller) *MockWasmDeploymentPolicyEventWatcher {
	mock := &MockWasmDeploymentPolicyEventWatcher{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentPolicyEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmDeploymentPolicyEventWatcher) EXPECT() *MockWasmDeploymentPolicyEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockWasmDeploymentPolicyEventWatcher) AddEventHandler(ctx context.Context, h controller.WasmDeploymentPolicyEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockWasmDeploymentPolicyEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockWasmDeploymentPolicyEventWatcher)(nil).AddEventHandler), varargs...)
}
