// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	extensions_policy_gloo_solo_io_v2 "github.com/solo-io/solo-apis/pkg/api/extensions.policy.gloo.solo.io/v2"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the WasmDeploymentPolicy Resource.
// implemented by the user
type WasmDeploymentPolicyReconciler interface {
	ReconcileWasmDeploymentPolicy(obj *extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy) (reconcile.Result, error)
}

// Reconcile deletion events for the WasmDeploymentPolicy Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type WasmDeploymentPolicyDeletionReconciler interface {
	ReconcileWasmDeploymentPolicyDeletion(req reconcile.Request) error
}

type WasmDeploymentPolicyReconcilerFuncs struct {
	OnReconcileWasmDeploymentPolicy         func(obj *extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy) (reconcile.Result, error)
	OnReconcileWasmDeploymentPolicyDeletion func(req reconcile.Request) error
}

func (f *WasmDeploymentPolicyReconcilerFuncs) ReconcileWasmDeploymentPolicy(obj *extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy) (reconcile.Result, error) {
	if f.OnReconcileWasmDeploymentPolicy == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileWasmDeploymentPolicy(obj)
}

func (f *WasmDeploymentPolicyReconcilerFuncs) ReconcileWasmDeploymentPolicyDeletion(req reconcile.Request) error {
	if f.OnReconcileWasmDeploymentPolicyDeletion == nil {
		return nil
	}
	return f.OnReconcileWasmDeploymentPolicyDeletion(req)
}

// Reconcile and finalize the WasmDeploymentPolicy Resource
// implemented by the user
type WasmDeploymentPolicyFinalizer interface {
	WasmDeploymentPolicyReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	WasmDeploymentPolicyFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeWasmDeploymentPolicy(obj *extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy) error
}

type WasmDeploymentPolicyReconcileLoop interface {
	RunWasmDeploymentPolicyReconciler(ctx context.Context, rec WasmDeploymentPolicyReconciler, predicates ...predicate.Predicate) error
}

type wasmDeploymentPolicyReconcileLoop struct {
	loop reconcile.Loop
}

func NewWasmDeploymentPolicyReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) WasmDeploymentPolicyReconcileLoop {
	return &wasmDeploymentPolicyReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy{}, options),
	}
}

func (c *wasmDeploymentPolicyReconcileLoop) RunWasmDeploymentPolicyReconciler(ctx context.Context, reconciler WasmDeploymentPolicyReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericWasmDeploymentPolicyReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(WasmDeploymentPolicyFinalizer); ok {
		reconcilerWrapper = genericWasmDeploymentPolicyFinalizer{
			genericWasmDeploymentPolicyReconciler: genericReconciler,
			finalizingReconciler:                  finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericWasmDeploymentPolicyHandler implements a generic reconcile.Reconciler
type genericWasmDeploymentPolicyReconciler struct {
	reconciler WasmDeploymentPolicyReconciler
}

func (r genericWasmDeploymentPolicyReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: WasmDeploymentPolicy handler received event for %T", object)
	}
	return r.reconciler.ReconcileWasmDeploymentPolicy(obj)
}

func (r genericWasmDeploymentPolicyReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(WasmDeploymentPolicyDeletionReconciler); ok {
		return deletionReconciler.ReconcileWasmDeploymentPolicyDeletion(request)
	}
	return nil
}

// genericWasmDeploymentPolicyFinalizer implements a generic reconcile.FinalizingReconciler
type genericWasmDeploymentPolicyFinalizer struct {
	genericWasmDeploymentPolicyReconciler
	finalizingReconciler WasmDeploymentPolicyFinalizer
}

func (r genericWasmDeploymentPolicyFinalizer) FinalizerName() string {
	return r.finalizingReconciler.WasmDeploymentPolicyFinalizerName()
}

func (r genericWasmDeploymentPolicyFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*extensions_policy_gloo_solo_io_v2.WasmDeploymentPolicy)
	if !ok {
		return errors.Errorf("internal error: WasmDeploymentPolicy handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeWasmDeploymentPolicy(obj)
}
