// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/admin/v2/ratelimit_server_config.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *RateLimitServerConfigSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RateLimitServerConfigSpec)
	if !ok {
		that2, ok := that.(RateLimitServerConfigSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetDestinationServers()) != len(target.GetDestinationServers()) {
		return false
	}
	for idx, v := range m.GetDestinationServers() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetDestinationServers()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetDestinationServers()[idx]) {
				return false
			}
		}

	}

	switch m.ConfigType.(type) {

	case *RateLimitServerConfigSpec_Raw_:
		if _, ok := target.ConfigType.(*RateLimitServerConfigSpec_Raw_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetRaw()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRaw()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRaw(), target.GetRaw()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.ConfigType != target.ConfigType {
			return false
		}
	}

	return true
}

// Equal function
func (m *RateLimitServerConfigStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RateLimitServerConfigStatus)
	if !ok {
		that2, ok := that.(RateLimitServerConfigStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetObservedGeneration() != target.GetObservedGeneration() {
		return false
	}

	if m.GetState() != target.GetState() {
		return false
	}

	return true
}

// Equal function
func (m *RateLimitServerConfigSpec_Raw) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RateLimitServerConfigSpec_Raw)
	if !ok {
		that2, ok := that.(RateLimitServerConfigSpec_Raw)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetDescriptors()) != len(target.GetDescriptors()) {
		return false
	}
	for idx, v := range m.GetDescriptors() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetDescriptors()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetDescriptors()[idx]) {
				return false
			}
		}

	}

	if len(m.GetSetDescriptors()) != len(target.GetSetDescriptors()) {
		return false
	}
	for idx, v := range m.GetSetDescriptors() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetSetDescriptors()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetSetDescriptors()[idx]) {
				return false
			}
		}

	}

	return true
}
