// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	v2 "github.com/solo-io/solo-apis/pkg/api/admin.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/pkg/api/admin.gloo.solo.io/v2/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockWorkspaceReconciler is a mock of WorkspaceReconciler interface
type MockWorkspaceReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceReconcilerMockRecorder
}

// MockWorkspaceReconcilerMockRecorder is the mock recorder for MockWorkspaceReconciler
type MockWorkspaceReconcilerMockRecorder struct {
	mock *MockWorkspaceReconciler
}

// NewMockWorkspaceReconciler creates a new mock instance
func NewMockWorkspaceReconciler(ctrl *gomock.Controller) *MockWorkspaceReconciler {
	mock := &MockWorkspaceReconciler{ctrl: ctrl}
	mock.recorder = &MockWorkspaceReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkspaceReconciler) EXPECT() *MockWorkspaceReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWorkspace mocks base method
func (m *MockWorkspaceReconciler) ReconcileWorkspace(obj *v2.Workspace) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWorkspace", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileWorkspace indicates an expected call of ReconcileWorkspace
func (mr *MockWorkspaceReconcilerMockRecorder) ReconcileWorkspace(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWorkspace", reflect.TypeOf((*MockWorkspaceReconciler)(nil).ReconcileWorkspace), obj)
}

// MockWorkspaceDeletionReconciler is a mock of WorkspaceDeletionReconciler interface
type MockWorkspaceDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceDeletionReconcilerMockRecorder
}

// MockWorkspaceDeletionReconcilerMockRecorder is the mock recorder for MockWorkspaceDeletionReconciler
type MockWorkspaceDeletionReconcilerMockRecorder struct {
	mock *MockWorkspaceDeletionReconciler
}

// NewMockWorkspaceDeletionReconciler creates a new mock instance
func NewMockWorkspaceDeletionReconciler(ctrl *gomock.Controller) *MockWorkspaceDeletionReconciler {
	mock := &MockWorkspaceDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockWorkspaceDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkspaceDeletionReconciler) EXPECT() *MockWorkspaceDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWorkspaceDeletion mocks base method
func (m *MockWorkspaceDeletionReconciler) ReconcileWorkspaceDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWorkspaceDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileWorkspaceDeletion indicates an expected call of ReconcileWorkspaceDeletion
func (mr *MockWorkspaceDeletionReconcilerMockRecorder) ReconcileWorkspaceDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWorkspaceDeletion", reflect.TypeOf((*MockWorkspaceDeletionReconciler)(nil).ReconcileWorkspaceDeletion), req)
}

// MockWorkspaceFinalizer is a mock of WorkspaceFinalizer interface
type MockWorkspaceFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceFinalizerMockRecorder
}

// MockWorkspaceFinalizerMockRecorder is the mock recorder for MockWorkspaceFinalizer
type MockWorkspaceFinalizerMockRecorder struct {
	mock *MockWorkspaceFinalizer
}

// NewMockWorkspaceFinalizer creates a new mock instance
func NewMockWorkspaceFinalizer(ctrl *gomock.Controller) *MockWorkspaceFinalizer {
	mock := &MockWorkspaceFinalizer{ctrl: ctrl}
	mock.recorder = &MockWorkspaceFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkspaceFinalizer) EXPECT() *MockWorkspaceFinalizerMockRecorder {
	return m.recorder
}

// ReconcileWorkspace mocks base method
func (m *MockWorkspaceFinalizer) ReconcileWorkspace(obj *v2.Workspace) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWorkspace", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileWorkspace indicates an expected call of ReconcileWorkspace
func (mr *MockWorkspaceFinalizerMockRecorder) ReconcileWorkspace(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWorkspace", reflect.TypeOf((*MockWorkspaceFinalizer)(nil).ReconcileWorkspace), obj)
}

// WorkspaceFinalizerName mocks base method
func (m *MockWorkspaceFinalizer) WorkspaceFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkspaceFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// WorkspaceFinalizerName indicates an expected call of WorkspaceFinalizerName
func (mr *MockWorkspaceFinalizerMockRecorder) WorkspaceFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkspaceFinalizerName", reflect.TypeOf((*MockWorkspaceFinalizer)(nil).WorkspaceFinalizerName))
}

// FinalizeWorkspace mocks base method
func (m *MockWorkspaceFinalizer) FinalizeWorkspace(obj *v2.Workspace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeWorkspace", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeWorkspace indicates an expected call of FinalizeWorkspace
func (mr *MockWorkspaceFinalizerMockRecorder) FinalizeWorkspace(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeWorkspace", reflect.TypeOf((*MockWorkspaceFinalizer)(nil).FinalizeWorkspace), obj)
}

// MockWorkspaceReconcileLoop is a mock of WorkspaceReconcileLoop interface
type MockWorkspaceReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceReconcileLoopMockRecorder
}

// MockWorkspaceReconcileLoopMockRecorder is the mock recorder for MockWorkspaceReconcileLoop
type MockWorkspaceReconcileLoopMockRecorder struct {
	mock *MockWorkspaceReconcileLoop
}

// NewMockWorkspaceReconcileLoop creates a new mock instance
func NewMockWorkspaceReconcileLoop(ctrl *gomock.Controller) *MockWorkspaceReconcileLoop {
	mock := &MockWorkspaceReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockWorkspaceReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkspaceReconcileLoop) EXPECT() *MockWorkspaceReconcileLoopMockRecorder {
	return m.recorder
}

// RunWorkspaceReconciler mocks base method
func (m *MockWorkspaceReconcileLoop) RunWorkspaceReconciler(ctx context.Context, rec controller.WorkspaceReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunWorkspaceReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWorkspaceReconciler indicates an expected call of RunWorkspaceReconciler
func (mr *MockWorkspaceReconcileLoopMockRecorder) RunWorkspaceReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWorkspaceReconciler", reflect.TypeOf((*MockWorkspaceReconcileLoop)(nil).RunWorkspaceReconciler), varargs...)
}

// MockWorkspaceSettingsReconciler is a mock of WorkspaceSettingsReconciler interface
type MockWorkspaceSettingsReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceSettingsReconcilerMockRecorder
}

// MockWorkspaceSettingsReconcilerMockRecorder is the mock recorder for MockWorkspaceSettingsReconciler
type MockWorkspaceSettingsReconcilerMockRecorder struct {
	mock *MockWorkspaceSettingsReconciler
}

// NewMockWorkspaceSettingsReconciler creates a new mock instance
func NewMockWorkspaceSettingsReconciler(ctrl *gomock.Controller) *MockWorkspaceSettingsReconciler {
	mock := &MockWorkspaceSettingsReconciler{ctrl: ctrl}
	mock.recorder = &MockWorkspaceSettingsReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkspaceSettingsReconciler) EXPECT() *MockWorkspaceSettingsReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWorkspaceSettings mocks base method
func (m *MockWorkspaceSettingsReconciler) ReconcileWorkspaceSettings(obj *v2.WorkspaceSettings) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWorkspaceSettings", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileWorkspaceSettings indicates an expected call of ReconcileWorkspaceSettings
func (mr *MockWorkspaceSettingsReconcilerMockRecorder) ReconcileWorkspaceSettings(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWorkspaceSettings", reflect.TypeOf((*MockWorkspaceSettingsReconciler)(nil).ReconcileWorkspaceSettings), obj)
}

// MockWorkspaceSettingsDeletionReconciler is a mock of WorkspaceSettingsDeletionReconciler interface
type MockWorkspaceSettingsDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceSettingsDeletionReconcilerMockRecorder
}

// MockWorkspaceSettingsDeletionReconcilerMockRecorder is the mock recorder for MockWorkspaceSettingsDeletionReconciler
type MockWorkspaceSettingsDeletionReconcilerMockRecorder struct {
	mock *MockWorkspaceSettingsDeletionReconciler
}

// NewMockWorkspaceSettingsDeletionReconciler creates a new mock instance
func NewMockWorkspaceSettingsDeletionReconciler(ctrl *gomock.Controller) *MockWorkspaceSettingsDeletionReconciler {
	mock := &MockWorkspaceSettingsDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockWorkspaceSettingsDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkspaceSettingsDeletionReconciler) EXPECT() *MockWorkspaceSettingsDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWorkspaceSettingsDeletion mocks base method
func (m *MockWorkspaceSettingsDeletionReconciler) ReconcileWorkspaceSettingsDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWorkspaceSettingsDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileWorkspaceSettingsDeletion indicates an expected call of ReconcileWorkspaceSettingsDeletion
func (mr *MockWorkspaceSettingsDeletionReconcilerMockRecorder) ReconcileWorkspaceSettingsDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWorkspaceSettingsDeletion", reflect.TypeOf((*MockWorkspaceSettingsDeletionReconciler)(nil).ReconcileWorkspaceSettingsDeletion), req)
}

// MockWorkspaceSettingsFinalizer is a mock of WorkspaceSettingsFinalizer interface
type MockWorkspaceSettingsFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceSettingsFinalizerMockRecorder
}

// MockWorkspaceSettingsFinalizerMockRecorder is the mock recorder for MockWorkspaceSettingsFinalizer
type MockWorkspaceSettingsFinalizerMockRecorder struct {
	mock *MockWorkspaceSettingsFinalizer
}

// NewMockWorkspaceSettingsFinalizer creates a new mock instance
func NewMockWorkspaceSettingsFinalizer(ctrl *gomock.Controller) *MockWorkspaceSettingsFinalizer {
	mock := &MockWorkspaceSettingsFinalizer{ctrl: ctrl}
	mock.recorder = &MockWorkspaceSettingsFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkspaceSettingsFinalizer) EXPECT() *MockWorkspaceSettingsFinalizerMockRecorder {
	return m.recorder
}

// ReconcileWorkspaceSettings mocks base method
func (m *MockWorkspaceSettingsFinalizer) ReconcileWorkspaceSettings(obj *v2.WorkspaceSettings) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWorkspaceSettings", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileWorkspaceSettings indicates an expected call of ReconcileWorkspaceSettings
func (mr *MockWorkspaceSettingsFinalizerMockRecorder) ReconcileWorkspaceSettings(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWorkspaceSettings", reflect.TypeOf((*MockWorkspaceSettingsFinalizer)(nil).ReconcileWorkspaceSettings), obj)
}

// WorkspaceSettingsFinalizerName mocks base method
func (m *MockWorkspaceSettingsFinalizer) WorkspaceSettingsFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkspaceSettingsFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// WorkspaceSettingsFinalizerName indicates an expected call of WorkspaceSettingsFinalizerName
func (mr *MockWorkspaceSettingsFinalizerMockRecorder) WorkspaceSettingsFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkspaceSettingsFinalizerName", reflect.TypeOf((*MockWorkspaceSettingsFinalizer)(nil).WorkspaceSettingsFinalizerName))
}

// FinalizeWorkspaceSettings mocks base method
func (m *MockWorkspaceSettingsFinalizer) FinalizeWorkspaceSettings(obj *v2.WorkspaceSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeWorkspaceSettings", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeWorkspaceSettings indicates an expected call of FinalizeWorkspaceSettings
func (mr *MockWorkspaceSettingsFinalizerMockRecorder) FinalizeWorkspaceSettings(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeWorkspaceSettings", reflect.TypeOf((*MockWorkspaceSettingsFinalizer)(nil).FinalizeWorkspaceSettings), obj)
}

// MockWorkspaceSettingsReconcileLoop is a mock of WorkspaceSettingsReconcileLoop interface
type MockWorkspaceSettingsReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceSettingsReconcileLoopMockRecorder
}

// MockWorkspaceSettingsReconcileLoopMockRecorder is the mock recorder for MockWorkspaceSettingsReconcileLoop
type MockWorkspaceSettingsReconcileLoopMockRecorder struct {
	mock *MockWorkspaceSettingsReconcileLoop
}

// NewMockWorkspaceSettingsReconcileLoop creates a new mock instance
func NewMockWorkspaceSettingsReconcileLoop(ctrl *gomock.Controller) *MockWorkspaceSettingsReconcileLoop {
	mock := &MockWorkspaceSettingsReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockWorkspaceSettingsReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkspaceSettingsReconcileLoop) EXPECT() *MockWorkspaceSettingsReconcileLoopMockRecorder {
	return m.recorder
}

// RunWorkspaceSettingsReconciler mocks base method
func (m *MockWorkspaceSettingsReconcileLoop) RunWorkspaceSettingsReconciler(ctx context.Context, rec controller.WorkspaceSettingsReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunWorkspaceSettingsReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWorkspaceSettingsReconciler indicates an expected call of RunWorkspaceSettingsReconciler
func (mr *MockWorkspaceSettingsReconcileLoopMockRecorder) RunWorkspaceSettingsReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWorkspaceSettingsReconciler", reflect.TypeOf((*MockWorkspaceSettingsReconcileLoop)(nil).RunWorkspaceSettingsReconciler), varargs...)
}

// MockKubernetesClusterReconciler is a mock of KubernetesClusterReconciler interface
type MockKubernetesClusterReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesClusterReconcilerMockRecorder
}

// MockKubernetesClusterReconcilerMockRecorder is the mock recorder for MockKubernetesClusterReconciler
type MockKubernetesClusterReconcilerMockRecorder struct {
	mock *MockKubernetesClusterReconciler
}

// NewMockKubernetesClusterReconciler creates a new mock instance
func NewMockKubernetesClusterReconciler(ctrl *gomock.Controller) *MockKubernetesClusterReconciler {
	mock := &MockKubernetesClusterReconciler{ctrl: ctrl}
	mock.recorder = &MockKubernetesClusterReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubernetesClusterReconciler) EXPECT() *MockKubernetesClusterReconcilerMockRecorder {
	return m.recorder
}

// ReconcileKubernetesCluster mocks base method
func (m *MockKubernetesClusterReconciler) ReconcileKubernetesCluster(obj *v2.KubernetesCluster) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileKubernetesCluster", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileKubernetesCluster indicates an expected call of ReconcileKubernetesCluster
func (mr *MockKubernetesClusterReconcilerMockRecorder) ReconcileKubernetesCluster(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterReconciler)(nil).ReconcileKubernetesCluster), obj)
}

// MockKubernetesClusterDeletionReconciler is a mock of KubernetesClusterDeletionReconciler interface
type MockKubernetesClusterDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesClusterDeletionReconcilerMockRecorder
}

// MockKubernetesClusterDeletionReconcilerMockRecorder is the mock recorder for MockKubernetesClusterDeletionReconciler
type MockKubernetesClusterDeletionReconcilerMockRecorder struct {
	mock *MockKubernetesClusterDeletionReconciler
}

// NewMockKubernetesClusterDeletionReconciler creates a new mock instance
func NewMockKubernetesClusterDeletionReconciler(ctrl *gomock.Controller) *MockKubernetesClusterDeletionReconciler {
	mock := &MockKubernetesClusterDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockKubernetesClusterDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubernetesClusterDeletionReconciler) EXPECT() *MockKubernetesClusterDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileKubernetesClusterDeletion mocks base method
func (m *MockKubernetesClusterDeletionReconciler) ReconcileKubernetesClusterDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileKubernetesClusterDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileKubernetesClusterDeletion indicates an expected call of ReconcileKubernetesClusterDeletion
func (mr *MockKubernetesClusterDeletionReconcilerMockRecorder) ReconcileKubernetesClusterDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileKubernetesClusterDeletion", reflect.TypeOf((*MockKubernetesClusterDeletionReconciler)(nil).ReconcileKubernetesClusterDeletion), req)
}

// MockKubernetesClusterFinalizer is a mock of KubernetesClusterFinalizer interface
type MockKubernetesClusterFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesClusterFinalizerMockRecorder
}

// MockKubernetesClusterFinalizerMockRecorder is the mock recorder for MockKubernetesClusterFinalizer
type MockKubernetesClusterFinalizerMockRecorder struct {
	mock *MockKubernetesClusterFinalizer
}

// NewMockKubernetesClusterFinalizer creates a new mock instance
func NewMockKubernetesClusterFinalizer(ctrl *gomock.Controller) *MockKubernetesClusterFinalizer {
	mock := &MockKubernetesClusterFinalizer{ctrl: ctrl}
	mock.recorder = &MockKubernetesClusterFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubernetesClusterFinalizer) EXPECT() *MockKubernetesClusterFinalizerMockRecorder {
	return m.recorder
}

// ReconcileKubernetesCluster mocks base method
func (m *MockKubernetesClusterFinalizer) ReconcileKubernetesCluster(obj *v2.KubernetesCluster) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileKubernetesCluster", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileKubernetesCluster indicates an expected call of ReconcileKubernetesCluster
func (mr *MockKubernetesClusterFinalizerMockRecorder) ReconcileKubernetesCluster(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterFinalizer)(nil).ReconcileKubernetesCluster), obj)
}

// KubernetesClusterFinalizerName mocks base method
func (m *MockKubernetesClusterFinalizer) KubernetesClusterFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubernetesClusterFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// KubernetesClusterFinalizerName indicates an expected call of KubernetesClusterFinalizerName
func (mr *MockKubernetesClusterFinalizerMockRecorder) KubernetesClusterFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubernetesClusterFinalizerName", reflect.TypeOf((*MockKubernetesClusterFinalizer)(nil).KubernetesClusterFinalizerName))
}

// FinalizeKubernetesCluster mocks base method
func (m *MockKubernetesClusterFinalizer) FinalizeKubernetesCluster(obj *v2.KubernetesCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeKubernetesCluster", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeKubernetesCluster indicates an expected call of FinalizeKubernetesCluster
func (mr *MockKubernetesClusterFinalizerMockRecorder) FinalizeKubernetesCluster(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterFinalizer)(nil).FinalizeKubernetesCluster), obj)
}

// MockKubernetesClusterReconcileLoop is a mock of KubernetesClusterReconcileLoop interface
type MockKubernetesClusterReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesClusterReconcileLoopMockRecorder
}

// MockKubernetesClusterReconcileLoopMockRecorder is the mock recorder for MockKubernetesClusterReconcileLoop
type MockKubernetesClusterReconcileLoopMockRecorder struct {
	mock *MockKubernetesClusterReconcileLoop
}

// NewMockKubernetesClusterReconcileLoop creates a new mock instance
func NewMockKubernetesClusterReconcileLoop(ctrl *gomock.Controller) *MockKubernetesClusterReconcileLoop {
	mock := &MockKubernetesClusterReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockKubernetesClusterReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubernetesClusterReconcileLoop) EXPECT() *MockKubernetesClusterReconcileLoopMockRecorder {
	return m.recorder
}

// RunKubernetesClusterReconciler mocks base method
func (m *MockKubernetesClusterReconcileLoop) RunKubernetesClusterReconciler(ctx context.Context, rec controller.KubernetesClusterReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunKubernetesClusterReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunKubernetesClusterReconciler indicates an expected call of RunKubernetesClusterReconciler
func (mr *MockKubernetesClusterReconcileLoopMockRecorder) RunKubernetesClusterReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunKubernetesClusterReconciler", reflect.TypeOf((*MockKubernetesClusterReconcileLoop)(nil).RunKubernetesClusterReconciler), varargs...)
}

// MockRootTrustPolicyReconciler is a mock of RootTrustPolicyReconciler interface
type MockRootTrustPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockRootTrustPolicyReconcilerMockRecorder
}

// MockRootTrustPolicyReconcilerMockRecorder is the mock recorder for MockRootTrustPolicyReconciler
type MockRootTrustPolicyReconcilerMockRecorder struct {
	mock *MockRootTrustPolicyReconciler
}

// NewMockRootTrustPolicyReconciler creates a new mock instance
func NewMockRootTrustPolicyReconciler(ctrl *gomock.Controller) *MockRootTrustPolicyReconciler {
	mock := &MockRootTrustPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockRootTrustPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRootTrustPolicyReconciler) EXPECT() *MockRootTrustPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRootTrustPolicy mocks base method
func (m *MockRootTrustPolicyReconciler) ReconcileRootTrustPolicy(obj *v2.RootTrustPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRootTrustPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRootTrustPolicy indicates an expected call of ReconcileRootTrustPolicy
func (mr *MockRootTrustPolicyReconcilerMockRecorder) ReconcileRootTrustPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRootTrustPolicy", reflect.TypeOf((*MockRootTrustPolicyReconciler)(nil).ReconcileRootTrustPolicy), obj)
}

// MockRootTrustPolicyDeletionReconciler is a mock of RootTrustPolicyDeletionReconciler interface
type MockRootTrustPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockRootTrustPolicyDeletionReconcilerMockRecorder
}

// MockRootTrustPolicyDeletionReconcilerMockRecorder is the mock recorder for MockRootTrustPolicyDeletionReconciler
type MockRootTrustPolicyDeletionReconcilerMockRecorder struct {
	mock *MockRootTrustPolicyDeletionReconciler
}

// NewMockRootTrustPolicyDeletionReconciler creates a new mock instance
func NewMockRootTrustPolicyDeletionReconciler(ctrl *gomock.Controller) *MockRootTrustPolicyDeletionReconciler {
	mock := &MockRootTrustPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockRootTrustPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRootTrustPolicyDeletionReconciler) EXPECT() *MockRootTrustPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRootTrustPolicyDeletion mocks base method
func (m *MockRootTrustPolicyDeletionReconciler) ReconcileRootTrustPolicyDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRootTrustPolicyDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileRootTrustPolicyDeletion indicates an expected call of ReconcileRootTrustPolicyDeletion
func (mr *MockRootTrustPolicyDeletionReconcilerMockRecorder) ReconcileRootTrustPolicyDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRootTrustPolicyDeletion", reflect.TypeOf((*MockRootTrustPolicyDeletionReconciler)(nil).ReconcileRootTrustPolicyDeletion), req)
}

// MockRootTrustPolicyFinalizer is a mock of RootTrustPolicyFinalizer interface
type MockRootTrustPolicyFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockRootTrustPolicyFinalizerMockRecorder
}

// MockRootTrustPolicyFinalizerMockRecorder is the mock recorder for MockRootTrustPolicyFinalizer
type MockRootTrustPolicyFinalizerMockRecorder struct {
	mock *MockRootTrustPolicyFinalizer
}

// NewMockRootTrustPolicyFinalizer creates a new mock instance
func NewMockRootTrustPolicyFinalizer(ctrl *gomock.Controller) *MockRootTrustPolicyFinalizer {
	mock := &MockRootTrustPolicyFinalizer{ctrl: ctrl}
	mock.recorder = &MockRootTrustPolicyFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRootTrustPolicyFinalizer) EXPECT() *MockRootTrustPolicyFinalizerMockRecorder {
	return m.recorder
}

// ReconcileRootTrustPolicy mocks base method
func (m *MockRootTrustPolicyFinalizer) ReconcileRootTrustPolicy(obj *v2.RootTrustPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRootTrustPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRootTrustPolicy indicates an expected call of ReconcileRootTrustPolicy
func (mr *MockRootTrustPolicyFinalizerMockRecorder) ReconcileRootTrustPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRootTrustPolicy", reflect.TypeOf((*MockRootTrustPolicyFinalizer)(nil).ReconcileRootTrustPolicy), obj)
}

// RootTrustPolicyFinalizerName mocks base method
func (m *MockRootTrustPolicyFinalizer) RootTrustPolicyFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RootTrustPolicyFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// RootTrustPolicyFinalizerName indicates an expected call of RootTrustPolicyFinalizerName
func (mr *MockRootTrustPolicyFinalizerMockRecorder) RootTrustPolicyFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RootTrustPolicyFinalizerName", reflect.TypeOf((*MockRootTrustPolicyFinalizer)(nil).RootTrustPolicyFinalizerName))
}

// FinalizeRootTrustPolicy mocks base method
func (m *MockRootTrustPolicyFinalizer) FinalizeRootTrustPolicy(obj *v2.RootTrustPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeRootTrustPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeRootTrustPolicy indicates an expected call of FinalizeRootTrustPolicy
func (mr *MockRootTrustPolicyFinalizerMockRecorder) FinalizeRootTrustPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeRootTrustPolicy", reflect.TypeOf((*MockRootTrustPolicyFinalizer)(nil).FinalizeRootTrustPolicy), obj)
}

// MockRootTrustPolicyReconcileLoop is a mock of RootTrustPolicyReconcileLoop interface
type MockRootTrustPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockRootTrustPolicyReconcileLoopMockRecorder
}

// MockRootTrustPolicyReconcileLoopMockRecorder is the mock recorder for MockRootTrustPolicyReconcileLoop
type MockRootTrustPolicyReconcileLoopMockRecorder struct {
	mock *MockRootTrustPolicyReconcileLoop
}

// NewMockRootTrustPolicyReconcileLoop creates a new mock instance
func NewMockRootTrustPolicyReconcileLoop(ctrl *gomock.Controller) *MockRootTrustPolicyReconcileLoop {
	mock := &MockRootTrustPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockRootTrustPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRootTrustPolicyReconcileLoop) EXPECT() *MockRootTrustPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// RunRootTrustPolicyReconciler mocks base method
func (m *MockRootTrustPolicyReconcileLoop) RunRootTrustPolicyReconciler(ctx context.Context, rec controller.RootTrustPolicyReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunRootTrustPolicyReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunRootTrustPolicyReconciler indicates an expected call of RunRootTrustPolicyReconciler
func (mr *MockRootTrustPolicyReconcileLoopMockRecorder) RunRootTrustPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunRootTrustPolicyReconciler", reflect.TypeOf((*MockRootTrustPolicyReconcileLoop)(nil).RunRootTrustPolicyReconciler), varargs...)
}

// MockExtAuthServerReconciler is a mock of ExtAuthServerReconciler interface
type MockExtAuthServerReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthServerReconcilerMockRecorder
}

// MockExtAuthServerReconcilerMockRecorder is the mock recorder for MockExtAuthServerReconciler
type MockExtAuthServerReconcilerMockRecorder struct {
	mock *MockExtAuthServerReconciler
}

// NewMockExtAuthServerReconciler creates a new mock instance
func NewMockExtAuthServerReconciler(ctrl *gomock.Controller) *MockExtAuthServerReconciler {
	mock := &MockExtAuthServerReconciler{ctrl: ctrl}
	mock.recorder = &MockExtAuthServerReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExtAuthServerReconciler) EXPECT() *MockExtAuthServerReconcilerMockRecorder {
	return m.recorder
}

// ReconcileExtAuthServer mocks base method
func (m *MockExtAuthServerReconciler) ReconcileExtAuthServer(obj *v2.ExtAuthServer) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileExtAuthServer", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileExtAuthServer indicates an expected call of ReconcileExtAuthServer
func (mr *MockExtAuthServerReconcilerMockRecorder) ReconcileExtAuthServer(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileExtAuthServer", reflect.TypeOf((*MockExtAuthServerReconciler)(nil).ReconcileExtAuthServer), obj)
}

// MockExtAuthServerDeletionReconciler is a mock of ExtAuthServerDeletionReconciler interface
type MockExtAuthServerDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthServerDeletionReconcilerMockRecorder
}

// MockExtAuthServerDeletionReconcilerMockRecorder is the mock recorder for MockExtAuthServerDeletionReconciler
type MockExtAuthServerDeletionReconcilerMockRecorder struct {
	mock *MockExtAuthServerDeletionReconciler
}

// NewMockExtAuthServerDeletionReconciler creates a new mock instance
func NewMockExtAuthServerDeletionReconciler(ctrl *gomock.Controller) *MockExtAuthServerDeletionReconciler {
	mock := &MockExtAuthServerDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockExtAuthServerDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExtAuthServerDeletionReconciler) EXPECT() *MockExtAuthServerDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileExtAuthServerDeletion mocks base method
func (m *MockExtAuthServerDeletionReconciler) ReconcileExtAuthServerDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileExtAuthServerDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileExtAuthServerDeletion indicates an expected call of ReconcileExtAuthServerDeletion
func (mr *MockExtAuthServerDeletionReconcilerMockRecorder) ReconcileExtAuthServerDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileExtAuthServerDeletion", reflect.TypeOf((*MockExtAuthServerDeletionReconciler)(nil).ReconcileExtAuthServerDeletion), req)
}

// MockExtAuthServerFinalizer is a mock of ExtAuthServerFinalizer interface
type MockExtAuthServerFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthServerFinalizerMockRecorder
}

// MockExtAuthServerFinalizerMockRecorder is the mock recorder for MockExtAuthServerFinalizer
type MockExtAuthServerFinalizerMockRecorder struct {
	mock *MockExtAuthServerFinalizer
}

// NewMockExtAuthServerFinalizer creates a new mock instance
func NewMockExtAuthServerFinalizer(ctrl *gomock.Controller) *MockExtAuthServerFinalizer {
	mock := &MockExtAuthServerFinalizer{ctrl: ctrl}
	mock.recorder = &MockExtAuthServerFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExtAuthServerFinalizer) EXPECT() *MockExtAuthServerFinalizerMockRecorder {
	return m.recorder
}

// ReconcileExtAuthServer mocks base method
func (m *MockExtAuthServerFinalizer) ReconcileExtAuthServer(obj *v2.ExtAuthServer) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileExtAuthServer", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileExtAuthServer indicates an expected call of ReconcileExtAuthServer
func (mr *MockExtAuthServerFinalizerMockRecorder) ReconcileExtAuthServer(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileExtAuthServer", reflect.TypeOf((*MockExtAuthServerFinalizer)(nil).ReconcileExtAuthServer), obj)
}

// ExtAuthServerFinalizerName mocks base method
func (m *MockExtAuthServerFinalizer) ExtAuthServerFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtAuthServerFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ExtAuthServerFinalizerName indicates an expected call of ExtAuthServerFinalizerName
func (mr *MockExtAuthServerFinalizerMockRecorder) ExtAuthServerFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtAuthServerFinalizerName", reflect.TypeOf((*MockExtAuthServerFinalizer)(nil).ExtAuthServerFinalizerName))
}

// FinalizeExtAuthServer mocks base method
func (m *MockExtAuthServerFinalizer) FinalizeExtAuthServer(obj *v2.ExtAuthServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeExtAuthServer", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeExtAuthServer indicates an expected call of FinalizeExtAuthServer
func (mr *MockExtAuthServerFinalizerMockRecorder) FinalizeExtAuthServer(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeExtAuthServer", reflect.TypeOf((*MockExtAuthServerFinalizer)(nil).FinalizeExtAuthServer), obj)
}

// MockExtAuthServerReconcileLoop is a mock of ExtAuthServerReconcileLoop interface
type MockExtAuthServerReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthServerReconcileLoopMockRecorder
}

// MockExtAuthServerReconcileLoopMockRecorder is the mock recorder for MockExtAuthServerReconcileLoop
type MockExtAuthServerReconcileLoopMockRecorder struct {
	mock *MockExtAuthServerReconcileLoop
}

// NewMockExtAuthServerReconcileLoop creates a new mock instance
func NewMockExtAuthServerReconcileLoop(ctrl *gomock.Controller) *MockExtAuthServerReconcileLoop {
	mock := &MockExtAuthServerReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockExtAuthServerReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExtAuthServerReconcileLoop) EXPECT() *MockExtAuthServerReconcileLoopMockRecorder {
	return m.recorder
}

// RunExtAuthServerReconciler mocks base method
func (m *MockExtAuthServerReconcileLoop) RunExtAuthServerReconciler(ctx context.Context, rec controller.ExtAuthServerReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunExtAuthServerReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunExtAuthServerReconciler indicates an expected call of RunExtAuthServerReconciler
func (mr *MockExtAuthServerReconcileLoopMockRecorder) RunExtAuthServerReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunExtAuthServerReconciler", reflect.TypeOf((*MockExtAuthServerReconcileLoop)(nil).RunExtAuthServerReconciler), varargs...)
}

// MockRateLimitServerSettingsReconciler is a mock of RateLimitServerSettingsReconciler interface
type MockRateLimitServerSettingsReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitServerSettingsReconcilerMockRecorder
}

// MockRateLimitServerSettingsReconcilerMockRecorder is the mock recorder for MockRateLimitServerSettingsReconciler
type MockRateLimitServerSettingsReconcilerMockRecorder struct {
	mock *MockRateLimitServerSettingsReconciler
}

// NewMockRateLimitServerSettingsReconciler creates a new mock instance
func NewMockRateLimitServerSettingsReconciler(ctrl *gomock.Controller) *MockRateLimitServerSettingsReconciler {
	mock := &MockRateLimitServerSettingsReconciler{ctrl: ctrl}
	mock.recorder = &MockRateLimitServerSettingsReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRateLimitServerSettingsReconciler) EXPECT() *MockRateLimitServerSettingsReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRateLimitServerSettings mocks base method
func (m *MockRateLimitServerSettingsReconciler) ReconcileRateLimitServerSettings(obj *v2.RateLimitServerSettings) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRateLimitServerSettings", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRateLimitServerSettings indicates an expected call of ReconcileRateLimitServerSettings
func (mr *MockRateLimitServerSettingsReconcilerMockRecorder) ReconcileRateLimitServerSettings(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRateLimitServerSettings", reflect.TypeOf((*MockRateLimitServerSettingsReconciler)(nil).ReconcileRateLimitServerSettings), obj)
}

// MockRateLimitServerSettingsDeletionReconciler is a mock of RateLimitServerSettingsDeletionReconciler interface
type MockRateLimitServerSettingsDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitServerSettingsDeletionReconcilerMockRecorder
}

// MockRateLimitServerSettingsDeletionReconcilerMockRecorder is the mock recorder for MockRateLimitServerSettingsDeletionReconciler
type MockRateLimitServerSettingsDeletionReconcilerMockRecorder struct {
	mock *MockRateLimitServerSettingsDeletionReconciler
}

// NewMockRateLimitServerSettingsDeletionReconciler creates a new mock instance
func NewMockRateLimitServerSettingsDeletionReconciler(ctrl *gomock.Controller) *MockRateLimitServerSettingsDeletionReconciler {
	mock := &MockRateLimitServerSettingsDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockRateLimitServerSettingsDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRateLimitServerSettingsDeletionReconciler) EXPECT() *MockRateLimitServerSettingsDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRateLimitServerSettingsDeletion mocks base method
func (m *MockRateLimitServerSettingsDeletionReconciler) ReconcileRateLimitServerSettingsDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRateLimitServerSettingsDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileRateLimitServerSettingsDeletion indicates an expected call of ReconcileRateLimitServerSettingsDeletion
func (mr *MockRateLimitServerSettingsDeletionReconcilerMockRecorder) ReconcileRateLimitServerSettingsDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRateLimitServerSettingsDeletion", reflect.TypeOf((*MockRateLimitServerSettingsDeletionReconciler)(nil).ReconcileRateLimitServerSettingsDeletion), req)
}

// MockRateLimitServerSettingsFinalizer is a mock of RateLimitServerSettingsFinalizer interface
type MockRateLimitServerSettingsFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitServerSettingsFinalizerMockRecorder
}

// MockRateLimitServerSettingsFinalizerMockRecorder is the mock recorder for MockRateLimitServerSettingsFinalizer
type MockRateLimitServerSettingsFinalizerMockRecorder struct {
	mock *MockRateLimitServerSettingsFinalizer
}

// NewMockRateLimitServerSettingsFinalizer creates a new mock instance
func NewMockRateLimitServerSettingsFinalizer(ctrl *gomock.Controller) *MockRateLimitServerSettingsFinalizer {
	mock := &MockRateLimitServerSettingsFinalizer{ctrl: ctrl}
	mock.recorder = &MockRateLimitServerSettingsFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRateLimitServerSettingsFinalizer) EXPECT() *MockRateLimitServerSettingsFinalizerMockRecorder {
	return m.recorder
}

// ReconcileRateLimitServerSettings mocks base method
func (m *MockRateLimitServerSettingsFinalizer) ReconcileRateLimitServerSettings(obj *v2.RateLimitServerSettings) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRateLimitServerSettings", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRateLimitServerSettings indicates an expected call of ReconcileRateLimitServerSettings
func (mr *MockRateLimitServerSettingsFinalizerMockRecorder) ReconcileRateLimitServerSettings(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRateLimitServerSettings", reflect.TypeOf((*MockRateLimitServerSettingsFinalizer)(nil).ReconcileRateLimitServerSettings), obj)
}

// RateLimitServerSettingsFinalizerName mocks base method
func (m *MockRateLimitServerSettingsFinalizer) RateLimitServerSettingsFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RateLimitServerSettingsFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// RateLimitServerSettingsFinalizerName indicates an expected call of RateLimitServerSettingsFinalizerName
func (mr *MockRateLimitServerSettingsFinalizerMockRecorder) RateLimitServerSettingsFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RateLimitServerSettingsFinalizerName", reflect.TypeOf((*MockRateLimitServerSettingsFinalizer)(nil).RateLimitServerSettingsFinalizerName))
}

// FinalizeRateLimitServerSettings mocks base method
func (m *MockRateLimitServerSettingsFinalizer) FinalizeRateLimitServerSettings(obj *v2.RateLimitServerSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeRateLimitServerSettings", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeRateLimitServerSettings indicates an expected call of FinalizeRateLimitServerSettings
func (mr *MockRateLimitServerSettingsFinalizerMockRecorder) FinalizeRateLimitServerSettings(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeRateLimitServerSettings", reflect.TypeOf((*MockRateLimitServerSettingsFinalizer)(nil).FinalizeRateLimitServerSettings), obj)
}

// MockRateLimitServerSettingsReconcileLoop is a mock of RateLimitServerSettingsReconcileLoop interface
type MockRateLimitServerSettingsReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitServerSettingsReconcileLoopMockRecorder
}

// MockRateLimitServerSettingsReconcileLoopMockRecorder is the mock recorder for MockRateLimitServerSettingsReconcileLoop
type MockRateLimitServerSettingsReconcileLoopMockRecorder struct {
	mock *MockRateLimitServerSettingsReconcileLoop
}

// NewMockRateLimitServerSettingsReconcileLoop creates a new mock instance
func NewMockRateLimitServerSettingsReconcileLoop(ctrl *gomock.Controller) *MockRateLimitServerSettingsReconcileLoop {
	mock := &MockRateLimitServerSettingsReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockRateLimitServerSettingsReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRateLimitServerSettingsReconcileLoop) EXPECT() *MockRateLimitServerSettingsReconcileLoopMockRecorder {
	return m.recorder
}

// RunRateLimitServerSettingsReconciler mocks base method
func (m *MockRateLimitServerSettingsReconcileLoop) RunRateLimitServerSettingsReconciler(ctx context.Context, rec controller.RateLimitServerSettingsReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunRateLimitServerSettingsReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunRateLimitServerSettingsReconciler indicates an expected call of RunRateLimitServerSettingsReconciler
func (mr *MockRateLimitServerSettingsReconcileLoopMockRecorder) RunRateLimitServerSettingsReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunRateLimitServerSettingsReconciler", reflect.TypeOf((*MockRateLimitServerSettingsReconcileLoop)(nil).RunRateLimitServerSettingsReconciler), varargs...)
}

// MockRateLimitServerConfigReconciler is a mock of RateLimitServerConfigReconciler interface
type MockRateLimitServerConfigReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitServerConfigReconcilerMockRecorder
}

// MockRateLimitServerConfigReconcilerMockRecorder is the mock recorder for MockRateLimitServerConfigReconciler
type MockRateLimitServerConfigReconcilerMockRecorder struct {
	mock *MockRateLimitServerConfigReconciler
}

// NewMockRateLimitServerConfigReconciler creates a new mock instance
func NewMockRateLimitServerConfigReconciler(ctrl *gomock.Controller) *MockRateLimitServerConfigReconciler {
	mock := &MockRateLimitServerConfigReconciler{ctrl: ctrl}
	mock.recorder = &MockRateLimitServerConfigReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRateLimitServerConfigReconciler) EXPECT() *MockRateLimitServerConfigReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRateLimitServerConfig mocks base method
func (m *MockRateLimitServerConfigReconciler) ReconcileRateLimitServerConfig(obj *v2.RateLimitServerConfig) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRateLimitServerConfig", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRateLimitServerConfig indicates an expected call of ReconcileRateLimitServerConfig
func (mr *MockRateLimitServerConfigReconcilerMockRecorder) ReconcileRateLimitServerConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRateLimitServerConfig", reflect.TypeOf((*MockRateLimitServerConfigReconciler)(nil).ReconcileRateLimitServerConfig), obj)
}

// MockRateLimitServerConfigDeletionReconciler is a mock of RateLimitServerConfigDeletionReconciler interface
type MockRateLimitServerConfigDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitServerConfigDeletionReconcilerMockRecorder
}

// MockRateLimitServerConfigDeletionReconcilerMockRecorder is the mock recorder for MockRateLimitServerConfigDeletionReconciler
type MockRateLimitServerConfigDeletionReconcilerMockRecorder struct {
	mock *MockRateLimitServerConfigDeletionReconciler
}

// NewMockRateLimitServerConfigDeletionReconciler creates a new mock instance
func NewMockRateLimitServerConfigDeletionReconciler(ctrl *gomock.Controller) *MockRateLimitServerConfigDeletionReconciler {
	mock := &MockRateLimitServerConfigDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockRateLimitServerConfigDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRateLimitServerConfigDeletionReconciler) EXPECT() *MockRateLimitServerConfigDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRateLimitServerConfigDeletion mocks base method
func (m *MockRateLimitServerConfigDeletionReconciler) ReconcileRateLimitServerConfigDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRateLimitServerConfigDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileRateLimitServerConfigDeletion indicates an expected call of ReconcileRateLimitServerConfigDeletion
func (mr *MockRateLimitServerConfigDeletionReconcilerMockRecorder) ReconcileRateLimitServerConfigDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRateLimitServerConfigDeletion", reflect.TypeOf((*MockRateLimitServerConfigDeletionReconciler)(nil).ReconcileRateLimitServerConfigDeletion), req)
}

// MockRateLimitServerConfigFinalizer is a mock of RateLimitServerConfigFinalizer interface
type MockRateLimitServerConfigFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitServerConfigFinalizerMockRecorder
}

// MockRateLimitServerConfigFinalizerMockRecorder is the mock recorder for MockRateLimitServerConfigFinalizer
type MockRateLimitServerConfigFinalizerMockRecorder struct {
	mock *MockRateLimitServerConfigFinalizer
}

// NewMockRateLimitServerConfigFinalizer creates a new mock instance
func NewMockRateLimitServerConfigFinalizer(ctrl *gomock.Controller) *MockRateLimitServerConfigFinalizer {
	mock := &MockRateLimitServerConfigFinalizer{ctrl: ctrl}
	mock.recorder = &MockRateLimitServerConfigFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRateLimitServerConfigFinalizer) EXPECT() *MockRateLimitServerConfigFinalizerMockRecorder {
	return m.recorder
}

// ReconcileRateLimitServerConfig mocks base method
func (m *MockRateLimitServerConfigFinalizer) ReconcileRateLimitServerConfig(obj *v2.RateLimitServerConfig) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRateLimitServerConfig", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRateLimitServerConfig indicates an expected call of ReconcileRateLimitServerConfig
func (mr *MockRateLimitServerConfigFinalizerMockRecorder) ReconcileRateLimitServerConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRateLimitServerConfig", reflect.TypeOf((*MockRateLimitServerConfigFinalizer)(nil).ReconcileRateLimitServerConfig), obj)
}

// RateLimitServerConfigFinalizerName mocks base method
func (m *MockRateLimitServerConfigFinalizer) RateLimitServerConfigFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RateLimitServerConfigFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// RateLimitServerConfigFinalizerName indicates an expected call of RateLimitServerConfigFinalizerName
func (mr *MockRateLimitServerConfigFinalizerMockRecorder) RateLimitServerConfigFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RateLimitServerConfigFinalizerName", reflect.TypeOf((*MockRateLimitServerConfigFinalizer)(nil).RateLimitServerConfigFinalizerName))
}

// FinalizeRateLimitServerConfig mocks base method
func (m *MockRateLimitServerConfigFinalizer) FinalizeRateLimitServerConfig(obj *v2.RateLimitServerConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeRateLimitServerConfig", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeRateLimitServerConfig indicates an expected call of FinalizeRateLimitServerConfig
func (mr *MockRateLimitServerConfigFinalizerMockRecorder) FinalizeRateLimitServerConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeRateLimitServerConfig", reflect.TypeOf((*MockRateLimitServerConfigFinalizer)(nil).FinalizeRateLimitServerConfig), obj)
}

// MockRateLimitServerConfigReconcileLoop is a mock of RateLimitServerConfigReconcileLoop interface
type MockRateLimitServerConfigReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitServerConfigReconcileLoopMockRecorder
}

// MockRateLimitServerConfigReconcileLoopMockRecorder is the mock recorder for MockRateLimitServerConfigReconcileLoop
type MockRateLimitServerConfigReconcileLoopMockRecorder struct {
	mock *MockRateLimitServerConfigReconcileLoop
}

// NewMockRateLimitServerConfigReconcileLoop creates a new mock instance
func NewMockRateLimitServerConfigReconcileLoop(ctrl *gomock.Controller) *MockRateLimitServerConfigReconcileLoop {
	mock := &MockRateLimitServerConfigReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockRateLimitServerConfigReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRateLimitServerConfigReconcileLoop) EXPECT() *MockRateLimitServerConfigReconcileLoopMockRecorder {
	return m.recorder
}

// RunRateLimitServerConfigReconciler mocks base method
func (m *MockRateLimitServerConfigReconcileLoop) RunRateLimitServerConfigReconciler(ctx context.Context, rec controller.RateLimitServerConfigReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunRateLimitServerConfigReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunRateLimitServerConfigReconciler indicates an expected call of RunRateLimitServerConfigReconciler
func (mr *MockRateLimitServerConfigReconcileLoopMockRecorder) RunRateLimitServerConfigReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunRateLimitServerConfigReconciler", reflect.TypeOf((*MockRateLimitServerConfigReconcileLoop)(nil).RunRateLimitServerConfigReconciler), varargs...)
}

// MockDashboardReconciler is a mock of DashboardReconciler interface
type MockDashboardReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockDashboardReconcilerMockRecorder
}

// MockDashboardReconcilerMockRecorder is the mock recorder for MockDashboardReconciler
type MockDashboardReconcilerMockRecorder struct {
	mock *MockDashboardReconciler
}

// NewMockDashboardReconciler creates a new mock instance
func NewMockDashboardReconciler(ctrl *gomock.Controller) *MockDashboardReconciler {
	mock := &MockDashboardReconciler{ctrl: ctrl}
	mock.recorder = &MockDashboardReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDashboardReconciler) EXPECT() *MockDashboardReconcilerMockRecorder {
	return m.recorder
}

// ReconcileDashboard mocks base method
func (m *MockDashboardReconciler) ReconcileDashboard(obj *v2.Dashboard) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDashboard", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileDashboard indicates an expected call of ReconcileDashboard
func (mr *MockDashboardReconcilerMockRecorder) ReconcileDashboard(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDashboard", reflect.TypeOf((*MockDashboardReconciler)(nil).ReconcileDashboard), obj)
}

// MockDashboardDeletionReconciler is a mock of DashboardDeletionReconciler interface
type MockDashboardDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockDashboardDeletionReconcilerMockRecorder
}

// MockDashboardDeletionReconcilerMockRecorder is the mock recorder for MockDashboardDeletionReconciler
type MockDashboardDeletionReconcilerMockRecorder struct {
	mock *MockDashboardDeletionReconciler
}

// NewMockDashboardDeletionReconciler creates a new mock instance
func NewMockDashboardDeletionReconciler(ctrl *gomock.Controller) *MockDashboardDeletionReconciler {
	mock := &MockDashboardDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockDashboardDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDashboardDeletionReconciler) EXPECT() *MockDashboardDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileDashboardDeletion mocks base method
func (m *MockDashboardDeletionReconciler) ReconcileDashboardDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDashboardDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileDashboardDeletion indicates an expected call of ReconcileDashboardDeletion
func (mr *MockDashboardDeletionReconcilerMockRecorder) ReconcileDashboardDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDashboardDeletion", reflect.TypeOf((*MockDashboardDeletionReconciler)(nil).ReconcileDashboardDeletion), req)
}

// MockDashboardFinalizer is a mock of DashboardFinalizer interface
type MockDashboardFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockDashboardFinalizerMockRecorder
}

// MockDashboardFinalizerMockRecorder is the mock recorder for MockDashboardFinalizer
type MockDashboardFinalizerMockRecorder struct {
	mock *MockDashboardFinalizer
}

// NewMockDashboardFinalizer creates a new mock instance
func NewMockDashboardFinalizer(ctrl *gomock.Controller) *MockDashboardFinalizer {
	mock := &MockDashboardFinalizer{ctrl: ctrl}
	mock.recorder = &MockDashboardFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDashboardFinalizer) EXPECT() *MockDashboardFinalizerMockRecorder {
	return m.recorder
}

// ReconcileDashboard mocks base method
func (m *MockDashboardFinalizer) ReconcileDashboard(obj *v2.Dashboard) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDashboard", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileDashboard indicates an expected call of ReconcileDashboard
func (mr *MockDashboardFinalizerMockRecorder) ReconcileDashboard(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDashboard", reflect.TypeOf((*MockDashboardFinalizer)(nil).ReconcileDashboard), obj)
}

// DashboardFinalizerName mocks base method
func (m *MockDashboardFinalizer) DashboardFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashboardFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DashboardFinalizerName indicates an expected call of DashboardFinalizerName
func (mr *MockDashboardFinalizerMockRecorder) DashboardFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardFinalizerName", reflect.TypeOf((*MockDashboardFinalizer)(nil).DashboardFinalizerName))
}

// FinalizeDashboard mocks base method
func (m *MockDashboardFinalizer) FinalizeDashboard(obj *v2.Dashboard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeDashboard", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeDashboard indicates an expected call of FinalizeDashboard
func (mr *MockDashboardFinalizerMockRecorder) FinalizeDashboard(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeDashboard", reflect.TypeOf((*MockDashboardFinalizer)(nil).FinalizeDashboard), obj)
}

// MockDashboardReconcileLoop is a mock of DashboardReconcileLoop interface
type MockDashboardReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockDashboardReconcileLoopMockRecorder
}

// MockDashboardReconcileLoopMockRecorder is the mock recorder for MockDashboardReconcileLoop
type MockDashboardReconcileLoopMockRecorder struct {
	mock *MockDashboardReconcileLoop
}

// NewMockDashboardReconcileLoop creates a new mock instance
func NewMockDashboardReconcileLoop(ctrl *gomock.Controller) *MockDashboardReconcileLoop {
	mock := &MockDashboardReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockDashboardReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDashboardReconcileLoop) EXPECT() *MockDashboardReconcileLoopMockRecorder {
	return m.recorder
}

// RunDashboardReconciler mocks base method
func (m *MockDashboardReconcileLoop) RunDashboardReconciler(ctx context.Context, rec controller.DashboardReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunDashboardReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunDashboardReconciler indicates an expected call of RunDashboardReconciler
func (mr *MockDashboardReconcileLoopMockRecorder) RunDashboardReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunDashboardReconciler", reflect.TypeOf((*MockDashboardReconcileLoop)(nil).RunDashboardReconciler), varargs...)
}
