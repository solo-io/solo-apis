// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/admin/v2/istio_lifecycle_manager.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_golang_protobuf_ptypes_struct "github.com/golang/protobuf/ptypes/struct"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *IstioLifecycleManagerSpec) Clone() proto.Message {
	var target *IstioLifecycleManagerSpec
	if m == nil {
		return target
	}
	target = &IstioLifecycleManagerSpec{}

	if m.GetClusters() != nil {
		target.Clusters = make([]*IstioLifecycleManagerSpec_Cluster, len(m.GetClusters()))
		for idx, v := range m.GetClusters() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Clusters[idx] = h.Clone().(*IstioLifecycleManagerSpec_Cluster)
			} else {
				target.Clusters[idx] = proto.Clone(v).(*IstioLifecycleManagerSpec_Cluster)
			}

		}
	}

	if m.GetInstallations() != nil {
		target.Installations = make([]*IstioInstallation, len(m.GetInstallations()))
		for idx, v := range m.GetInstallations() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Installations[idx] = h.Clone().(*IstioInstallation)
			} else {
				target.Installations[idx] = proto.Clone(v).(*IstioInstallation)
			}

		}
	}

	if h, ok := interface{}(m.GetUpgradeStrategy()).(clone.Cloner); ok {
		target.UpgradeStrategy = h.Clone().(*IstioLifecycleManagerSpec_UpgradeStrategy)
	} else {
		target.UpgradeStrategy = proto.Clone(m.GetUpgradeStrategy()).(*IstioLifecycleManagerSpec_UpgradeStrategy)
	}

	if m.GetUninstallRevisions() != nil {
		target.UninstallRevisions = make([]string, len(m.GetUninstallRevisions()))
		for idx, v := range m.GetUninstallRevisions() {

			target.UninstallRevisions[idx] = v

		}
	}

	return target
}

// Clone function
func (m *IstioLifecycleManagerStatus) Clone() proto.Message {
	var target *IstioLifecycleManagerStatus
	if m == nil {
		return target
	}
	target = &IstioLifecycleManagerStatus{}

	if m.GetClusters() != nil {
		target.Clusters = make(map[string]*IstioLifecycleManagerStatus_ClusterStatuses, len(m.GetClusters()))
		for k, v := range m.GetClusters() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Clusters[k] = h.Clone().(*IstioLifecycleManagerStatus_ClusterStatuses)
			} else {
				target.Clusters[k] = proto.Clone(v).(*IstioLifecycleManagerStatus_ClusterStatuses)
			}

		}
	}

	return target
}

// Clone function
func (m *IstioInstallation) Clone() proto.Message {
	var target *IstioInstallation
	if m == nil {
		return target
	}
	target = &IstioInstallation{}

	target.Name = m.GetName()

	if h, ok := interface{}(m.GetIstioOperatorSpec()).(clone.Cloner); ok {
		target.IstioOperatorSpec = h.Clone().(*github_com_golang_protobuf_ptypes_struct.Struct)
	} else {
		target.IstioOperatorSpec = proto.Clone(m.GetIstioOperatorSpec()).(*github_com_golang_protobuf_ptypes_struct.Struct)
	}

	return target
}

// Clone function
func (m *IstioLifecycleManagerSpec_Cluster) Clone() proto.Message {
	var target *IstioLifecycleManagerSpec_Cluster
	if m == nil {
		return target
	}
	target = &IstioLifecycleManagerSpec_Cluster{}

	target.Name = m.GetName()

	target.TrustDomain = m.GetTrustDomain()

	return target
}

// Clone function
func (m *IstioLifecycleManagerSpec_UpgradeStrategy) Clone() proto.Message {
	var target *IstioLifecycleManagerSpec_UpgradeStrategy
	if m == nil {
		return target
	}
	target = &IstioLifecycleManagerSpec_UpgradeStrategy{}

	target.AlwaysUseCanaryUpgrade = m.GetAlwaysUseCanaryUpgrade()

	return target
}

// Clone function
func (m *IstioLifecycleManagerStatus_ClusterStatuses) Clone() proto.Message {
	var target *IstioLifecycleManagerStatus_ClusterStatuses
	if m == nil {
		return target
	}
	target = &IstioLifecycleManagerStatus_ClusterStatuses{}

	if h, ok := interface{}(m.GetActive()).(clone.Cloner); ok {
		target.Active = h.Clone().(*IstioLifecycleManagerStatus_ClusterStatuses_InstallationStatus)
	} else {
		target.Active = proto.Clone(m.GetActive()).(*IstioLifecycleManagerStatus_ClusterStatuses_InstallationStatus)
	}

	if h, ok := interface{}(m.GetCanary()).(clone.Cloner); ok {
		target.Canary = h.Clone().(*IstioLifecycleManagerStatus_ClusterStatuses_InstallationStatus)
	} else {
		target.Canary = proto.Clone(m.GetCanary()).(*IstioLifecycleManagerStatus_ClusterStatuses_InstallationStatus)
	}

	return target
}

// Clone function
func (m *IstioLifecycleManagerStatus_ClusterStatuses_InstallationStatus) Clone() proto.Message {
	var target *IstioLifecycleManagerStatus_ClusterStatuses_InstallationStatus
	if m == nil {
		return target
	}
	target = &IstioLifecycleManagerStatus_ClusterStatuses_InstallationStatus{}

	target.State = m.GetState()

	target.Message = m.GetMessage()

	target.GeneratedRevision = m.GetGeneratedRevision()

	if m.GetLastObservedInstallations() != nil {
		target.LastObservedInstallations = make([]*IstioInstallation, len(m.GetLastObservedInstallations()))
		for idx, v := range m.GetLastObservedInstallations() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.LastObservedInstallations[idx] = h.Clone().(*IstioInstallation)
			} else {
				target.LastObservedInstallations[idx] = proto.Clone(v).(*IstioInstallation)
			}

		}
	}

	return target
}
