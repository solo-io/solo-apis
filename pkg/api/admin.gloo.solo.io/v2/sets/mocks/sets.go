// Code generated by MockGen. DO NOT EDIT.
// Source: ./sets.go

// Package mock_v2sets is a generated GoMock package.
package mock_v2sets

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sets "github.com/solo-io/skv2/contrib/pkg/sets"
	ezkube "github.com/solo-io/skv2/pkg/ezkube"
	v2 "github.com/solo-io/solo-apis/pkg/api/admin.gloo.solo.io/v2"
	v2sets "github.com/solo-io/solo-apis/pkg/api/admin.gloo.solo.io/v2/sets"
	sets0 "k8s.io/apimachinery/pkg/util/sets"
)

// MockWorkspaceSet is a mock of WorkspaceSet interface.
type MockWorkspaceSet struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceSetMockRecorder
}

// MockWorkspaceSetMockRecorder is the mock recorder for MockWorkspaceSet.
type MockWorkspaceSetMockRecorder struct {
	mock *MockWorkspaceSet
}

// NewMockWorkspaceSet creates a new mock instance.
func NewMockWorkspaceSet(ctrl *gomock.Controller) *MockWorkspaceSet {
	mock := &MockWorkspaceSet{ctrl: ctrl}
	mock.recorder = &MockWorkspaceSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceSet) EXPECT() *MockWorkspaceSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockWorkspaceSet) Clone() v2sets.WorkspaceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.WorkspaceSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockWorkspaceSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockWorkspaceSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockWorkspaceSet) Delete(workspace ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", workspace)
}

// Delete indicates an expected call of Delete.
func (mr *MockWorkspaceSetMockRecorder) Delete(workspace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWorkspaceSet)(nil).Delete), workspace)
}

// Delta mocks base method.
func (m *MockWorkspaceSet) Delta(newSet v2sets.WorkspaceSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockWorkspaceSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockWorkspaceSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockWorkspaceSet) Difference(set v2sets.WorkspaceSet) v2sets.WorkspaceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.WorkspaceSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockWorkspaceSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockWorkspaceSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockWorkspaceSet) Equal(workspaceSet v2sets.WorkspaceSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", workspaceSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockWorkspaceSetMockRecorder) Equal(workspaceSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockWorkspaceSet)(nil).Equal), workspaceSet)
}

// Find mocks base method.
func (m *MockWorkspaceSet) Find(id ezkube.ResourceId) (*v2.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockWorkspaceSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockWorkspaceSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockWorkspaceSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockWorkspaceSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockWorkspaceSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockWorkspaceSet) Has(workspace ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", workspace)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockWorkspaceSetMockRecorder) Has(workspace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockWorkspaceSet)(nil).Has), workspace)
}

// Insert mocks base method.
func (m *MockWorkspaceSet) Insert(workspace ...*v2.Workspace) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range workspace {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockWorkspaceSetMockRecorder) Insert(workspace ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockWorkspaceSet)(nil).Insert), workspace...)
}

// Intersection mocks base method.
func (m *MockWorkspaceSet) Intersection(set v2sets.WorkspaceSet) v2sets.WorkspaceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.WorkspaceSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockWorkspaceSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockWorkspaceSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockWorkspaceSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockWorkspaceSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockWorkspaceSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockWorkspaceSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockWorkspaceSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockWorkspaceSet)(nil).Length))
}

// List mocks base method.
func (m *MockWorkspaceSet) List(filterResource ...func(*v2.Workspace) bool) []*v2.Workspace {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.Workspace)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockWorkspaceSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWorkspaceSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockWorkspaceSet) Map() map[string]*v2.Workspace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.Workspace)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockWorkspaceSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockWorkspaceSet)(nil).Map))
}

// Union mocks base method.
func (m *MockWorkspaceSet) Union(set v2sets.WorkspaceSet) v2sets.WorkspaceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.WorkspaceSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockWorkspaceSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockWorkspaceSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockWorkspaceSet) UnsortedList(filterResource ...func(*v2.Workspace) bool) []*v2.Workspace {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.Workspace)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockWorkspaceSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockWorkspaceSet)(nil).UnsortedList), filterResource...)
}

// MockWorkspaceSettingsSet is a mock of WorkspaceSettingsSet interface.
type MockWorkspaceSettingsSet struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceSettingsSetMockRecorder
}

// MockWorkspaceSettingsSetMockRecorder is the mock recorder for MockWorkspaceSettingsSet.
type MockWorkspaceSettingsSetMockRecorder struct {
	mock *MockWorkspaceSettingsSet
}

// NewMockWorkspaceSettingsSet creates a new mock instance.
func NewMockWorkspaceSettingsSet(ctrl *gomock.Controller) *MockWorkspaceSettingsSet {
	mock := &MockWorkspaceSettingsSet{ctrl: ctrl}
	mock.recorder = &MockWorkspaceSettingsSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceSettingsSet) EXPECT() *MockWorkspaceSettingsSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockWorkspaceSettingsSet) Clone() v2sets.WorkspaceSettingsSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.WorkspaceSettingsSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockWorkspaceSettingsSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockWorkspaceSettingsSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockWorkspaceSettingsSet) Delete(workspaceSettings ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", workspaceSettings)
}

// Delete indicates an expected call of Delete.
func (mr *MockWorkspaceSettingsSetMockRecorder) Delete(workspaceSettings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWorkspaceSettingsSet)(nil).Delete), workspaceSettings)
}

// Delta mocks base method.
func (m *MockWorkspaceSettingsSet) Delta(newSet v2sets.WorkspaceSettingsSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockWorkspaceSettingsSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockWorkspaceSettingsSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockWorkspaceSettingsSet) Difference(set v2sets.WorkspaceSettingsSet) v2sets.WorkspaceSettingsSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.WorkspaceSettingsSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockWorkspaceSettingsSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockWorkspaceSettingsSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockWorkspaceSettingsSet) Equal(workspaceSettingsSet v2sets.WorkspaceSettingsSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", workspaceSettingsSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockWorkspaceSettingsSetMockRecorder) Equal(workspaceSettingsSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockWorkspaceSettingsSet)(nil).Equal), workspaceSettingsSet)
}

// Find mocks base method.
func (m *MockWorkspaceSettingsSet) Find(id ezkube.ResourceId) (*v2.WorkspaceSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.WorkspaceSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockWorkspaceSettingsSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockWorkspaceSettingsSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockWorkspaceSettingsSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockWorkspaceSettingsSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockWorkspaceSettingsSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockWorkspaceSettingsSet) Has(workspaceSettings ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", workspaceSettings)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockWorkspaceSettingsSetMockRecorder) Has(workspaceSettings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockWorkspaceSettingsSet)(nil).Has), workspaceSettings)
}

// Insert mocks base method.
func (m *MockWorkspaceSettingsSet) Insert(workspaceSettings ...*v2.WorkspaceSettings) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range workspaceSettings {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockWorkspaceSettingsSetMockRecorder) Insert(workspaceSettings ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockWorkspaceSettingsSet)(nil).Insert), workspaceSettings...)
}

// Intersection mocks base method.
func (m *MockWorkspaceSettingsSet) Intersection(set v2sets.WorkspaceSettingsSet) v2sets.WorkspaceSettingsSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.WorkspaceSettingsSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockWorkspaceSettingsSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockWorkspaceSettingsSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockWorkspaceSettingsSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockWorkspaceSettingsSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockWorkspaceSettingsSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockWorkspaceSettingsSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockWorkspaceSettingsSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockWorkspaceSettingsSet)(nil).Length))
}

// List mocks base method.
func (m *MockWorkspaceSettingsSet) List(filterResource ...func(*v2.WorkspaceSettings) bool) []*v2.WorkspaceSettings {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.WorkspaceSettings)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockWorkspaceSettingsSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWorkspaceSettingsSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockWorkspaceSettingsSet) Map() map[string]*v2.WorkspaceSettings {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.WorkspaceSettings)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockWorkspaceSettingsSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockWorkspaceSettingsSet)(nil).Map))
}

// Union mocks base method.
func (m *MockWorkspaceSettingsSet) Union(set v2sets.WorkspaceSettingsSet) v2sets.WorkspaceSettingsSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.WorkspaceSettingsSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockWorkspaceSettingsSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockWorkspaceSettingsSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockWorkspaceSettingsSet) UnsortedList(filterResource ...func(*v2.WorkspaceSettings) bool) []*v2.WorkspaceSettings {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.WorkspaceSettings)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockWorkspaceSettingsSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockWorkspaceSettingsSet)(nil).UnsortedList), filterResource...)
}

// MockKubernetesClusterSet is a mock of KubernetesClusterSet interface.
type MockKubernetesClusterSet struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesClusterSetMockRecorder
}

// MockKubernetesClusterSetMockRecorder is the mock recorder for MockKubernetesClusterSet.
type MockKubernetesClusterSetMockRecorder struct {
	mock *MockKubernetesClusterSet
}

// NewMockKubernetesClusterSet creates a new mock instance.
func NewMockKubernetesClusterSet(ctrl *gomock.Controller) *MockKubernetesClusterSet {
	mock := &MockKubernetesClusterSet{ctrl: ctrl}
	mock.recorder = &MockKubernetesClusterSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetesClusterSet) EXPECT() *MockKubernetesClusterSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockKubernetesClusterSet) Clone() v2sets.KubernetesClusterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.KubernetesClusterSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockKubernetesClusterSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockKubernetesClusterSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockKubernetesClusterSet) Delete(kubernetesCluster ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", kubernetesCluster)
}

// Delete indicates an expected call of Delete.
func (mr *MockKubernetesClusterSetMockRecorder) Delete(kubernetesCluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKubernetesClusterSet)(nil).Delete), kubernetesCluster)
}

// Delta mocks base method.
func (m *MockKubernetesClusterSet) Delta(newSet v2sets.KubernetesClusterSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockKubernetesClusterSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockKubernetesClusterSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockKubernetesClusterSet) Difference(set v2sets.KubernetesClusterSet) v2sets.KubernetesClusterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.KubernetesClusterSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockKubernetesClusterSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockKubernetesClusterSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockKubernetesClusterSet) Equal(kubernetesClusterSet v2sets.KubernetesClusterSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", kubernetesClusterSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockKubernetesClusterSetMockRecorder) Equal(kubernetesClusterSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockKubernetesClusterSet)(nil).Equal), kubernetesClusterSet)
}

// Find mocks base method.
func (m *MockKubernetesClusterSet) Find(id ezkube.ResourceId) (*v2.KubernetesCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.KubernetesCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockKubernetesClusterSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockKubernetesClusterSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockKubernetesClusterSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockKubernetesClusterSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockKubernetesClusterSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockKubernetesClusterSet) Has(kubernetesCluster ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", kubernetesCluster)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockKubernetesClusterSetMockRecorder) Has(kubernetesCluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockKubernetesClusterSet)(nil).Has), kubernetesCluster)
}

// Insert mocks base method.
func (m *MockKubernetesClusterSet) Insert(kubernetesCluster ...*v2.KubernetesCluster) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range kubernetesCluster {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockKubernetesClusterSetMockRecorder) Insert(kubernetesCluster ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockKubernetesClusterSet)(nil).Insert), kubernetesCluster...)
}

// Intersection mocks base method.
func (m *MockKubernetesClusterSet) Intersection(set v2sets.KubernetesClusterSet) v2sets.KubernetesClusterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.KubernetesClusterSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockKubernetesClusterSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockKubernetesClusterSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockKubernetesClusterSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockKubernetesClusterSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockKubernetesClusterSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockKubernetesClusterSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockKubernetesClusterSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockKubernetesClusterSet)(nil).Length))
}

// List mocks base method.
func (m *MockKubernetesClusterSet) List(filterResource ...func(*v2.KubernetesCluster) bool) []*v2.KubernetesCluster {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.KubernetesCluster)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockKubernetesClusterSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockKubernetesClusterSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockKubernetesClusterSet) Map() map[string]*v2.KubernetesCluster {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.KubernetesCluster)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockKubernetesClusterSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockKubernetesClusterSet)(nil).Map))
}

// Union mocks base method.
func (m *MockKubernetesClusterSet) Union(set v2sets.KubernetesClusterSet) v2sets.KubernetesClusterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.KubernetesClusterSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockKubernetesClusterSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockKubernetesClusterSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockKubernetesClusterSet) UnsortedList(filterResource ...func(*v2.KubernetesCluster) bool) []*v2.KubernetesCluster {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.KubernetesCluster)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockKubernetesClusterSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockKubernetesClusterSet)(nil).UnsortedList), filterResource...)
}

// MockRootTrustPolicySet is a mock of RootTrustPolicySet interface.
type MockRootTrustPolicySet struct {
	ctrl     *gomock.Controller
	recorder *MockRootTrustPolicySetMockRecorder
}

// MockRootTrustPolicySetMockRecorder is the mock recorder for MockRootTrustPolicySet.
type MockRootTrustPolicySetMockRecorder struct {
	mock *MockRootTrustPolicySet
}

// NewMockRootTrustPolicySet creates a new mock instance.
func NewMockRootTrustPolicySet(ctrl *gomock.Controller) *MockRootTrustPolicySet {
	mock := &MockRootTrustPolicySet{ctrl: ctrl}
	mock.recorder = &MockRootTrustPolicySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRootTrustPolicySet) EXPECT() *MockRootTrustPolicySetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockRootTrustPolicySet) Clone() v2sets.RootTrustPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.RootTrustPolicySet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockRootTrustPolicySetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockRootTrustPolicySet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockRootTrustPolicySet) Delete(rootTrustPolicy ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", rootTrustPolicy)
}

// Delete indicates an expected call of Delete.
func (mr *MockRootTrustPolicySetMockRecorder) Delete(rootTrustPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRootTrustPolicySet)(nil).Delete), rootTrustPolicy)
}

// Delta mocks base method.
func (m *MockRootTrustPolicySet) Delta(newSet v2sets.RootTrustPolicySet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockRootTrustPolicySetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockRootTrustPolicySet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockRootTrustPolicySet) Difference(set v2sets.RootTrustPolicySet) v2sets.RootTrustPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.RootTrustPolicySet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockRootTrustPolicySetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockRootTrustPolicySet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockRootTrustPolicySet) Equal(rootTrustPolicySet v2sets.RootTrustPolicySet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", rootTrustPolicySet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockRootTrustPolicySetMockRecorder) Equal(rootTrustPolicySet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockRootTrustPolicySet)(nil).Equal), rootTrustPolicySet)
}

// Find mocks base method.
func (m *MockRootTrustPolicySet) Find(id ezkube.ResourceId) (*v2.RootTrustPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.RootTrustPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRootTrustPolicySetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRootTrustPolicySet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockRootTrustPolicySet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockRootTrustPolicySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockRootTrustPolicySet)(nil).Generic))
}

// Has mocks base method.
func (m *MockRootTrustPolicySet) Has(rootTrustPolicy ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", rootTrustPolicy)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockRootTrustPolicySetMockRecorder) Has(rootTrustPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockRootTrustPolicySet)(nil).Has), rootTrustPolicy)
}

// Insert mocks base method.
func (m *MockRootTrustPolicySet) Insert(rootTrustPolicy ...*v2.RootTrustPolicy) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range rootTrustPolicy {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockRootTrustPolicySetMockRecorder) Insert(rootTrustPolicy ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRootTrustPolicySet)(nil).Insert), rootTrustPolicy...)
}

// Intersection mocks base method.
func (m *MockRootTrustPolicySet) Intersection(set v2sets.RootTrustPolicySet) v2sets.RootTrustPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.RootTrustPolicySet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockRootTrustPolicySetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockRootTrustPolicySet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockRootTrustPolicySet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockRootTrustPolicySetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockRootTrustPolicySet)(nil).Keys))
}

// Length mocks base method.
func (m *MockRootTrustPolicySet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockRootTrustPolicySetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockRootTrustPolicySet)(nil).Length))
}

// List mocks base method.
func (m *MockRootTrustPolicySet) List(filterResource ...func(*v2.RootTrustPolicy) bool) []*v2.RootTrustPolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.RootTrustPolicy)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockRootTrustPolicySetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRootTrustPolicySet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockRootTrustPolicySet) Map() map[string]*v2.RootTrustPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.RootTrustPolicy)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockRootTrustPolicySetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockRootTrustPolicySet)(nil).Map))
}

// Union mocks base method.
func (m *MockRootTrustPolicySet) Union(set v2sets.RootTrustPolicySet) v2sets.RootTrustPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.RootTrustPolicySet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockRootTrustPolicySetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockRootTrustPolicySet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockRootTrustPolicySet) UnsortedList(filterResource ...func(*v2.RootTrustPolicy) bool) []*v2.RootTrustPolicy {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.RootTrustPolicy)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockRootTrustPolicySetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockRootTrustPolicySet)(nil).UnsortedList), filterResource...)
}

// MockExtAuthServerSet is a mock of ExtAuthServerSet interface.
type MockExtAuthServerSet struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthServerSetMockRecorder
}

// MockExtAuthServerSetMockRecorder is the mock recorder for MockExtAuthServerSet.
type MockExtAuthServerSetMockRecorder struct {
	mock *MockExtAuthServerSet
}

// NewMockExtAuthServerSet creates a new mock instance.
func NewMockExtAuthServerSet(ctrl *gomock.Controller) *MockExtAuthServerSet {
	mock := &MockExtAuthServerSet{ctrl: ctrl}
	mock.recorder = &MockExtAuthServerSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtAuthServerSet) EXPECT() *MockExtAuthServerSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockExtAuthServerSet) Clone() v2sets.ExtAuthServerSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.ExtAuthServerSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockExtAuthServerSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockExtAuthServerSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockExtAuthServerSet) Delete(extAuthServer ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", extAuthServer)
}

// Delete indicates an expected call of Delete.
func (mr *MockExtAuthServerSetMockRecorder) Delete(extAuthServer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExtAuthServerSet)(nil).Delete), extAuthServer)
}

// Delta mocks base method.
func (m *MockExtAuthServerSet) Delta(newSet v2sets.ExtAuthServerSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockExtAuthServerSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockExtAuthServerSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockExtAuthServerSet) Difference(set v2sets.ExtAuthServerSet) v2sets.ExtAuthServerSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.ExtAuthServerSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockExtAuthServerSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockExtAuthServerSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockExtAuthServerSet) Equal(extAuthServerSet v2sets.ExtAuthServerSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", extAuthServerSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockExtAuthServerSetMockRecorder) Equal(extAuthServerSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockExtAuthServerSet)(nil).Equal), extAuthServerSet)
}

// Find mocks base method.
func (m *MockExtAuthServerSet) Find(id ezkube.ResourceId) (*v2.ExtAuthServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.ExtAuthServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockExtAuthServerSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockExtAuthServerSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockExtAuthServerSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockExtAuthServerSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockExtAuthServerSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockExtAuthServerSet) Has(extAuthServer ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", extAuthServer)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockExtAuthServerSetMockRecorder) Has(extAuthServer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockExtAuthServerSet)(nil).Has), extAuthServer)
}

// Insert mocks base method.
func (m *MockExtAuthServerSet) Insert(extAuthServer ...*v2.ExtAuthServer) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range extAuthServer {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockExtAuthServerSetMockRecorder) Insert(extAuthServer ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockExtAuthServerSet)(nil).Insert), extAuthServer...)
}

// Intersection mocks base method.
func (m *MockExtAuthServerSet) Intersection(set v2sets.ExtAuthServerSet) v2sets.ExtAuthServerSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.ExtAuthServerSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockExtAuthServerSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockExtAuthServerSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockExtAuthServerSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockExtAuthServerSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockExtAuthServerSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockExtAuthServerSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockExtAuthServerSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockExtAuthServerSet)(nil).Length))
}

// List mocks base method.
func (m *MockExtAuthServerSet) List(filterResource ...func(*v2.ExtAuthServer) bool) []*v2.ExtAuthServer {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.ExtAuthServer)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockExtAuthServerSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExtAuthServerSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockExtAuthServerSet) Map() map[string]*v2.ExtAuthServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.ExtAuthServer)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockExtAuthServerSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockExtAuthServerSet)(nil).Map))
}

// Union mocks base method.
func (m *MockExtAuthServerSet) Union(set v2sets.ExtAuthServerSet) v2sets.ExtAuthServerSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.ExtAuthServerSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockExtAuthServerSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockExtAuthServerSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockExtAuthServerSet) UnsortedList(filterResource ...func(*v2.ExtAuthServer) bool) []*v2.ExtAuthServer {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.ExtAuthServer)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockExtAuthServerSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockExtAuthServerSet)(nil).UnsortedList), filterResource...)
}

// MockRateLimitServerSettingsSet is a mock of RateLimitServerSettingsSet interface.
type MockRateLimitServerSettingsSet struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitServerSettingsSetMockRecorder
}

// MockRateLimitServerSettingsSetMockRecorder is the mock recorder for MockRateLimitServerSettingsSet.
type MockRateLimitServerSettingsSetMockRecorder struct {
	mock *MockRateLimitServerSettingsSet
}

// NewMockRateLimitServerSettingsSet creates a new mock instance.
func NewMockRateLimitServerSettingsSet(ctrl *gomock.Controller) *MockRateLimitServerSettingsSet {
	mock := &MockRateLimitServerSettingsSet{ctrl: ctrl}
	mock.recorder = &MockRateLimitServerSettingsSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimitServerSettingsSet) EXPECT() *MockRateLimitServerSettingsSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockRateLimitServerSettingsSet) Clone() v2sets.RateLimitServerSettingsSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.RateLimitServerSettingsSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockRateLimitServerSettingsSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockRateLimitServerSettingsSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockRateLimitServerSettingsSet) Delete(rateLimitServerSettings ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", rateLimitServerSettings)
}

// Delete indicates an expected call of Delete.
func (mr *MockRateLimitServerSettingsSetMockRecorder) Delete(rateLimitServerSettings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRateLimitServerSettingsSet)(nil).Delete), rateLimitServerSettings)
}

// Delta mocks base method.
func (m *MockRateLimitServerSettingsSet) Delta(newSet v2sets.RateLimitServerSettingsSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockRateLimitServerSettingsSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockRateLimitServerSettingsSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockRateLimitServerSettingsSet) Difference(set v2sets.RateLimitServerSettingsSet) v2sets.RateLimitServerSettingsSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.RateLimitServerSettingsSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockRateLimitServerSettingsSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockRateLimitServerSettingsSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockRateLimitServerSettingsSet) Equal(rateLimitServerSettingsSet v2sets.RateLimitServerSettingsSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", rateLimitServerSettingsSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockRateLimitServerSettingsSetMockRecorder) Equal(rateLimitServerSettingsSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockRateLimitServerSettingsSet)(nil).Equal), rateLimitServerSettingsSet)
}

// Find mocks base method.
func (m *MockRateLimitServerSettingsSet) Find(id ezkube.ResourceId) (*v2.RateLimitServerSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.RateLimitServerSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRateLimitServerSettingsSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRateLimitServerSettingsSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockRateLimitServerSettingsSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockRateLimitServerSettingsSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockRateLimitServerSettingsSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockRateLimitServerSettingsSet) Has(rateLimitServerSettings ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", rateLimitServerSettings)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockRateLimitServerSettingsSetMockRecorder) Has(rateLimitServerSettings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockRateLimitServerSettingsSet)(nil).Has), rateLimitServerSettings)
}

// Insert mocks base method.
func (m *MockRateLimitServerSettingsSet) Insert(rateLimitServerSettings ...*v2.RateLimitServerSettings) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range rateLimitServerSettings {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockRateLimitServerSettingsSetMockRecorder) Insert(rateLimitServerSettings ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRateLimitServerSettingsSet)(nil).Insert), rateLimitServerSettings...)
}

// Intersection mocks base method.
func (m *MockRateLimitServerSettingsSet) Intersection(set v2sets.RateLimitServerSettingsSet) v2sets.RateLimitServerSettingsSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.RateLimitServerSettingsSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockRateLimitServerSettingsSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockRateLimitServerSettingsSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockRateLimitServerSettingsSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockRateLimitServerSettingsSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockRateLimitServerSettingsSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockRateLimitServerSettingsSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockRateLimitServerSettingsSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockRateLimitServerSettingsSet)(nil).Length))
}

// List mocks base method.
func (m *MockRateLimitServerSettingsSet) List(filterResource ...func(*v2.RateLimitServerSettings) bool) []*v2.RateLimitServerSettings {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.RateLimitServerSettings)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockRateLimitServerSettingsSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRateLimitServerSettingsSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockRateLimitServerSettingsSet) Map() map[string]*v2.RateLimitServerSettings {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.RateLimitServerSettings)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockRateLimitServerSettingsSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockRateLimitServerSettingsSet)(nil).Map))
}

// Union mocks base method.
func (m *MockRateLimitServerSettingsSet) Union(set v2sets.RateLimitServerSettingsSet) v2sets.RateLimitServerSettingsSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.RateLimitServerSettingsSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockRateLimitServerSettingsSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockRateLimitServerSettingsSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockRateLimitServerSettingsSet) UnsortedList(filterResource ...func(*v2.RateLimitServerSettings) bool) []*v2.RateLimitServerSettings {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.RateLimitServerSettings)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockRateLimitServerSettingsSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockRateLimitServerSettingsSet)(nil).UnsortedList), filterResource...)
}

// MockRateLimitServerConfigSet is a mock of RateLimitServerConfigSet interface.
type MockRateLimitServerConfigSet struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitServerConfigSetMockRecorder
}

// MockRateLimitServerConfigSetMockRecorder is the mock recorder for MockRateLimitServerConfigSet.
type MockRateLimitServerConfigSetMockRecorder struct {
	mock *MockRateLimitServerConfigSet
}

// NewMockRateLimitServerConfigSet creates a new mock instance.
func NewMockRateLimitServerConfigSet(ctrl *gomock.Controller) *MockRateLimitServerConfigSet {
	mock := &MockRateLimitServerConfigSet{ctrl: ctrl}
	mock.recorder = &MockRateLimitServerConfigSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimitServerConfigSet) EXPECT() *MockRateLimitServerConfigSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockRateLimitServerConfigSet) Clone() v2sets.RateLimitServerConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.RateLimitServerConfigSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockRateLimitServerConfigSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockRateLimitServerConfigSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockRateLimitServerConfigSet) Delete(rateLimitServerConfig ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", rateLimitServerConfig)
}

// Delete indicates an expected call of Delete.
func (mr *MockRateLimitServerConfigSetMockRecorder) Delete(rateLimitServerConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRateLimitServerConfigSet)(nil).Delete), rateLimitServerConfig)
}

// Delta mocks base method.
func (m *MockRateLimitServerConfigSet) Delta(newSet v2sets.RateLimitServerConfigSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockRateLimitServerConfigSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockRateLimitServerConfigSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockRateLimitServerConfigSet) Difference(set v2sets.RateLimitServerConfigSet) v2sets.RateLimitServerConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.RateLimitServerConfigSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockRateLimitServerConfigSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockRateLimitServerConfigSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockRateLimitServerConfigSet) Equal(rateLimitServerConfigSet v2sets.RateLimitServerConfigSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", rateLimitServerConfigSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockRateLimitServerConfigSetMockRecorder) Equal(rateLimitServerConfigSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockRateLimitServerConfigSet)(nil).Equal), rateLimitServerConfigSet)
}

// Find mocks base method.
func (m *MockRateLimitServerConfigSet) Find(id ezkube.ResourceId) (*v2.RateLimitServerConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.RateLimitServerConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRateLimitServerConfigSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRateLimitServerConfigSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockRateLimitServerConfigSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockRateLimitServerConfigSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockRateLimitServerConfigSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockRateLimitServerConfigSet) Has(rateLimitServerConfig ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", rateLimitServerConfig)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockRateLimitServerConfigSetMockRecorder) Has(rateLimitServerConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockRateLimitServerConfigSet)(nil).Has), rateLimitServerConfig)
}

// Insert mocks base method.
func (m *MockRateLimitServerConfigSet) Insert(rateLimitServerConfig ...*v2.RateLimitServerConfig) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range rateLimitServerConfig {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockRateLimitServerConfigSetMockRecorder) Insert(rateLimitServerConfig ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRateLimitServerConfigSet)(nil).Insert), rateLimitServerConfig...)
}

// Intersection mocks base method.
func (m *MockRateLimitServerConfigSet) Intersection(set v2sets.RateLimitServerConfigSet) v2sets.RateLimitServerConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.RateLimitServerConfigSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockRateLimitServerConfigSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockRateLimitServerConfigSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockRateLimitServerConfigSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockRateLimitServerConfigSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockRateLimitServerConfigSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockRateLimitServerConfigSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockRateLimitServerConfigSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockRateLimitServerConfigSet)(nil).Length))
}

// List mocks base method.
func (m *MockRateLimitServerConfigSet) List(filterResource ...func(*v2.RateLimitServerConfig) bool) []*v2.RateLimitServerConfig {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.RateLimitServerConfig)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockRateLimitServerConfigSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRateLimitServerConfigSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockRateLimitServerConfigSet) Map() map[string]*v2.RateLimitServerConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.RateLimitServerConfig)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockRateLimitServerConfigSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockRateLimitServerConfigSet)(nil).Map))
}

// Union mocks base method.
func (m *MockRateLimitServerConfigSet) Union(set v2sets.RateLimitServerConfigSet) v2sets.RateLimitServerConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.RateLimitServerConfigSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockRateLimitServerConfigSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockRateLimitServerConfigSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockRateLimitServerConfigSet) UnsortedList(filterResource ...func(*v2.RateLimitServerConfig) bool) []*v2.RateLimitServerConfig {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.RateLimitServerConfig)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockRateLimitServerConfigSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockRateLimitServerConfigSet)(nil).UnsortedList), filterResource...)
}

// MockDashboardSet is a mock of DashboardSet interface.
type MockDashboardSet struct {
	ctrl     *gomock.Controller
	recorder *MockDashboardSetMockRecorder
}

// MockDashboardSetMockRecorder is the mock recorder for MockDashboardSet.
type MockDashboardSetMockRecorder struct {
	mock *MockDashboardSet
}

// NewMockDashboardSet creates a new mock instance.
func NewMockDashboardSet(ctrl *gomock.Controller) *MockDashboardSet {
	mock := &MockDashboardSet{ctrl: ctrl}
	mock.recorder = &MockDashboardSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDashboardSet) EXPECT() *MockDashboardSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockDashboardSet) Clone() v2sets.DashboardSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.DashboardSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockDashboardSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockDashboardSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockDashboardSet) Delete(dashboard ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", dashboard)
}

// Delete indicates an expected call of Delete.
func (mr *MockDashboardSetMockRecorder) Delete(dashboard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDashboardSet)(nil).Delete), dashboard)
}

// Delta mocks base method.
func (m *MockDashboardSet) Delta(newSet v2sets.DashboardSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockDashboardSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockDashboardSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockDashboardSet) Difference(set v2sets.DashboardSet) v2sets.DashboardSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.DashboardSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockDashboardSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockDashboardSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockDashboardSet) Equal(dashboardSet v2sets.DashboardSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", dashboardSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockDashboardSetMockRecorder) Equal(dashboardSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockDashboardSet)(nil).Equal), dashboardSet)
}

// Find mocks base method.
func (m *MockDashboardSet) Find(id ezkube.ResourceId) (*v2.Dashboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.Dashboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockDashboardSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDashboardSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockDashboardSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockDashboardSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockDashboardSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockDashboardSet) Has(dashboard ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", dashboard)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockDashboardSetMockRecorder) Has(dashboard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockDashboardSet)(nil).Has), dashboard)
}

// Insert mocks base method.
func (m *MockDashboardSet) Insert(dashboard ...*v2.Dashboard) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dashboard {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockDashboardSetMockRecorder) Insert(dashboard ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDashboardSet)(nil).Insert), dashboard...)
}

// Intersection mocks base method.
func (m *MockDashboardSet) Intersection(set v2sets.DashboardSet) v2sets.DashboardSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.DashboardSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockDashboardSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockDashboardSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockDashboardSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockDashboardSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockDashboardSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockDashboardSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockDashboardSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockDashboardSet)(nil).Length))
}

// List mocks base method.
func (m *MockDashboardSet) List(filterResource ...func(*v2.Dashboard) bool) []*v2.Dashboard {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.Dashboard)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockDashboardSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDashboardSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockDashboardSet) Map() map[string]*v2.Dashboard {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.Dashboard)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockDashboardSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockDashboardSet)(nil).Map))
}

// Union mocks base method.
func (m *MockDashboardSet) Union(set v2sets.DashboardSet) v2sets.DashboardSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.DashboardSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockDashboardSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockDashboardSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockDashboardSet) UnsortedList(filterResource ...func(*v2.Dashboard) bool) []*v2.Dashboard {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.Dashboard)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockDashboardSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockDashboardSet)(nil).UnsortedList), filterResource...)
}

// MockIstioLifecycleManagerSet is a mock of IstioLifecycleManagerSet interface.
type MockIstioLifecycleManagerSet struct {
	ctrl     *gomock.Controller
	recorder *MockIstioLifecycleManagerSetMockRecorder
}

// MockIstioLifecycleManagerSetMockRecorder is the mock recorder for MockIstioLifecycleManagerSet.
type MockIstioLifecycleManagerSetMockRecorder struct {
	mock *MockIstioLifecycleManagerSet
}

// NewMockIstioLifecycleManagerSet creates a new mock instance.
func NewMockIstioLifecycleManagerSet(ctrl *gomock.Controller) *MockIstioLifecycleManagerSet {
	mock := &MockIstioLifecycleManagerSet{ctrl: ctrl}
	mock.recorder = &MockIstioLifecycleManagerSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIstioLifecycleManagerSet) EXPECT() *MockIstioLifecycleManagerSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockIstioLifecycleManagerSet) Clone() v2sets.IstioLifecycleManagerSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.IstioLifecycleManagerSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockIstioLifecycleManagerSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockIstioLifecycleManagerSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockIstioLifecycleManagerSet) Delete(istioLifecycleManager ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", istioLifecycleManager)
}

// Delete indicates an expected call of Delete.
func (mr *MockIstioLifecycleManagerSetMockRecorder) Delete(istioLifecycleManager interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIstioLifecycleManagerSet)(nil).Delete), istioLifecycleManager)
}

// Delta mocks base method.
func (m *MockIstioLifecycleManagerSet) Delta(newSet v2sets.IstioLifecycleManagerSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockIstioLifecycleManagerSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockIstioLifecycleManagerSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockIstioLifecycleManagerSet) Difference(set v2sets.IstioLifecycleManagerSet) v2sets.IstioLifecycleManagerSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.IstioLifecycleManagerSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockIstioLifecycleManagerSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockIstioLifecycleManagerSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockIstioLifecycleManagerSet) Equal(istioLifecycleManagerSet v2sets.IstioLifecycleManagerSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", istioLifecycleManagerSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockIstioLifecycleManagerSetMockRecorder) Equal(istioLifecycleManagerSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockIstioLifecycleManagerSet)(nil).Equal), istioLifecycleManagerSet)
}

// Find mocks base method.
func (m *MockIstioLifecycleManagerSet) Find(id ezkube.ResourceId) (*v2.IstioLifecycleManager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.IstioLifecycleManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIstioLifecycleManagerSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIstioLifecycleManagerSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockIstioLifecycleManagerSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockIstioLifecycleManagerSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockIstioLifecycleManagerSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockIstioLifecycleManagerSet) Has(istioLifecycleManager ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", istioLifecycleManager)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockIstioLifecycleManagerSetMockRecorder) Has(istioLifecycleManager interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockIstioLifecycleManagerSet)(nil).Has), istioLifecycleManager)
}

// Insert mocks base method.
func (m *MockIstioLifecycleManagerSet) Insert(istioLifecycleManager ...*v2.IstioLifecycleManager) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range istioLifecycleManager {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockIstioLifecycleManagerSetMockRecorder) Insert(istioLifecycleManager ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIstioLifecycleManagerSet)(nil).Insert), istioLifecycleManager...)
}

// Intersection mocks base method.
func (m *MockIstioLifecycleManagerSet) Intersection(set v2sets.IstioLifecycleManagerSet) v2sets.IstioLifecycleManagerSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.IstioLifecycleManagerSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockIstioLifecycleManagerSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockIstioLifecycleManagerSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockIstioLifecycleManagerSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockIstioLifecycleManagerSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockIstioLifecycleManagerSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockIstioLifecycleManagerSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockIstioLifecycleManagerSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockIstioLifecycleManagerSet)(nil).Length))
}

// List mocks base method.
func (m *MockIstioLifecycleManagerSet) List(filterResource ...func(*v2.IstioLifecycleManager) bool) []*v2.IstioLifecycleManager {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.IstioLifecycleManager)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockIstioLifecycleManagerSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIstioLifecycleManagerSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockIstioLifecycleManagerSet) Map() map[string]*v2.IstioLifecycleManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.IstioLifecycleManager)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockIstioLifecycleManagerSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockIstioLifecycleManagerSet)(nil).Map))
}

// Union mocks base method.
func (m *MockIstioLifecycleManagerSet) Union(set v2sets.IstioLifecycleManagerSet) v2sets.IstioLifecycleManagerSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.IstioLifecycleManagerSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockIstioLifecycleManagerSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockIstioLifecycleManagerSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockIstioLifecycleManagerSet) UnsortedList(filterResource ...func(*v2.IstioLifecycleManager) bool) []*v2.IstioLifecycleManager {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.IstioLifecycleManager)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockIstioLifecycleManagerSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockIstioLifecycleManagerSet)(nil).UnsortedList), filterResource...)
}
