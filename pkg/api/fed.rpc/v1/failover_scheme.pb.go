// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-fed/fed.rpc/v1/failover_scheme.proto

package v1

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	types "github.com/solo-io/solo-apis/pkg/api/fed.solo.io/v1/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FailoverScheme struct {
	Metadata             *ObjectMeta                 `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec                 *types.FailoverSchemeSpec   `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status               *types.FailoverSchemeStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *FailoverScheme) Reset()         { *m = FailoverScheme{} }
func (m *FailoverScheme) String() string { return proto.CompactTextString(m) }
func (*FailoverScheme) ProtoMessage()    {}
func (*FailoverScheme) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fd63fc6cbed0f10, []int{0}
}
func (m *FailoverScheme) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FailoverScheme.Unmarshal(m, b)
}
func (m *FailoverScheme) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FailoverScheme.Marshal(b, m, deterministic)
}
func (m *FailoverScheme) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailoverScheme.Merge(m, src)
}
func (m *FailoverScheme) XXX_Size() int {
	return xxx_messageInfo_FailoverScheme.Size(m)
}
func (m *FailoverScheme) XXX_DiscardUnknown() {
	xxx_messageInfo_FailoverScheme.DiscardUnknown(m)
}

var xxx_messageInfo_FailoverScheme proto.InternalMessageInfo

func (m *FailoverScheme) GetMetadata() *ObjectMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *FailoverScheme) GetSpec() *types.FailoverSchemeSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *FailoverScheme) GetStatus() *types.FailoverSchemeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type GetFailoverSchemeRequest struct {
	UpstreamRef          *v1.ClusterObjectRef `protobuf:"bytes,1,opt,name=upstream_ref,json=upstreamRef,proto3" json:"upstream_ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetFailoverSchemeRequest) Reset()         { *m = GetFailoverSchemeRequest{} }
func (m *GetFailoverSchemeRequest) String() string { return proto.CompactTextString(m) }
func (*GetFailoverSchemeRequest) ProtoMessage()    {}
func (*GetFailoverSchemeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fd63fc6cbed0f10, []int{1}
}
func (m *GetFailoverSchemeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFailoverSchemeRequest.Unmarshal(m, b)
}
func (m *GetFailoverSchemeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFailoverSchemeRequest.Marshal(b, m, deterministic)
}
func (m *GetFailoverSchemeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFailoverSchemeRequest.Merge(m, src)
}
func (m *GetFailoverSchemeRequest) XXX_Size() int {
	return xxx_messageInfo_GetFailoverSchemeRequest.Size(m)
}
func (m *GetFailoverSchemeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFailoverSchemeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFailoverSchemeRequest proto.InternalMessageInfo

func (m *GetFailoverSchemeRequest) GetUpstreamRef() *v1.ClusterObjectRef {
	if m != nil {
		return m.UpstreamRef
	}
	return nil
}

type GetFailoverSchemeResponse struct {
	FailoverScheme       *FailoverScheme `protobuf:"bytes,1,opt,name=failover_scheme,json=failoverScheme,proto3" json:"failover_scheme,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetFailoverSchemeResponse) Reset()         { *m = GetFailoverSchemeResponse{} }
func (m *GetFailoverSchemeResponse) String() string { return proto.CompactTextString(m) }
func (*GetFailoverSchemeResponse) ProtoMessage()    {}
func (*GetFailoverSchemeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fd63fc6cbed0f10, []int{2}
}
func (m *GetFailoverSchemeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFailoverSchemeResponse.Unmarshal(m, b)
}
func (m *GetFailoverSchemeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFailoverSchemeResponse.Marshal(b, m, deterministic)
}
func (m *GetFailoverSchemeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFailoverSchemeResponse.Merge(m, src)
}
func (m *GetFailoverSchemeResponse) XXX_Size() int {
	return xxx_messageInfo_GetFailoverSchemeResponse.Size(m)
}
func (m *GetFailoverSchemeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFailoverSchemeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFailoverSchemeResponse proto.InternalMessageInfo

func (m *GetFailoverSchemeResponse) GetFailoverScheme() *FailoverScheme {
	if m != nil {
		return m.FailoverScheme
	}
	return nil
}

type GetFailoverSchemeYamlRequest struct {
	FailoverSchemeRef    *v1.ObjectRef `protobuf:"bytes,1,opt,name=failover_scheme_ref,json=failoverSchemeRef,proto3" json:"failover_scheme_ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetFailoverSchemeYamlRequest) Reset()         { *m = GetFailoverSchemeYamlRequest{} }
func (m *GetFailoverSchemeYamlRequest) String() string { return proto.CompactTextString(m) }
func (*GetFailoverSchemeYamlRequest) ProtoMessage()    {}
func (*GetFailoverSchemeYamlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fd63fc6cbed0f10, []int{3}
}
func (m *GetFailoverSchemeYamlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFailoverSchemeYamlRequest.Unmarshal(m, b)
}
func (m *GetFailoverSchemeYamlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFailoverSchemeYamlRequest.Marshal(b, m, deterministic)
}
func (m *GetFailoverSchemeYamlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFailoverSchemeYamlRequest.Merge(m, src)
}
func (m *GetFailoverSchemeYamlRequest) XXX_Size() int {
	return xxx_messageInfo_GetFailoverSchemeYamlRequest.Size(m)
}
func (m *GetFailoverSchemeYamlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFailoverSchemeYamlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFailoverSchemeYamlRequest proto.InternalMessageInfo

func (m *GetFailoverSchemeYamlRequest) GetFailoverSchemeRef() *v1.ObjectRef {
	if m != nil {
		return m.FailoverSchemeRef
	}
	return nil
}

type GetFailoverSchemeYamlResponse struct {
	YamlData             *ResourceYaml `protobuf:"bytes,1,opt,name=yaml_data,json=yamlData,proto3" json:"yaml_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetFailoverSchemeYamlResponse) Reset()         { *m = GetFailoverSchemeYamlResponse{} }
func (m *GetFailoverSchemeYamlResponse) String() string { return proto.CompactTextString(m) }
func (*GetFailoverSchemeYamlResponse) ProtoMessage()    {}
func (*GetFailoverSchemeYamlResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fd63fc6cbed0f10, []int{4}
}
func (m *GetFailoverSchemeYamlResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFailoverSchemeYamlResponse.Unmarshal(m, b)
}
func (m *GetFailoverSchemeYamlResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFailoverSchemeYamlResponse.Marshal(b, m, deterministic)
}
func (m *GetFailoverSchemeYamlResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFailoverSchemeYamlResponse.Merge(m, src)
}
func (m *GetFailoverSchemeYamlResponse) XXX_Size() int {
	return xxx_messageInfo_GetFailoverSchemeYamlResponse.Size(m)
}
func (m *GetFailoverSchemeYamlResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFailoverSchemeYamlResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFailoverSchemeYamlResponse proto.InternalMessageInfo

func (m *GetFailoverSchemeYamlResponse) GetYamlData() *ResourceYaml {
	if m != nil {
		return m.YamlData
	}
	return nil
}

func init() {
	proto.RegisterType((*FailoverScheme)(nil), "fed.rpc.solo.io.FailoverScheme")
	proto.RegisterType((*GetFailoverSchemeRequest)(nil), "fed.rpc.solo.io.GetFailoverSchemeRequest")
	proto.RegisterType((*GetFailoverSchemeResponse)(nil), "fed.rpc.solo.io.GetFailoverSchemeResponse")
	proto.RegisterType((*GetFailoverSchemeYamlRequest)(nil), "fed.rpc.solo.io.GetFailoverSchemeYamlRequest")
	proto.RegisterType((*GetFailoverSchemeYamlResponse)(nil), "fed.rpc.solo.io.GetFailoverSchemeYamlResponse")
}

func init() {
	proto.RegisterFile("github.com/solo-io/solo-apis/api/gloo-fed/fed.rpc/v1/failover_scheme.proto", fileDescriptor_4fd63fc6cbed0f10)
}

var fileDescriptor_4fd63fc6cbed0f10 = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x09, 0x4c, 0xd3, 0xf0, 0xd0, 0xa6, 0x1a, 0x90, 0x4a, 0xb7, 0x31, 0x08, 0x37, 0x80,
	0xa8, 0x23, 0xba, 0x0b, 0x34, 0xee, 0xf8, 0xa3, 0x81, 0x10, 0x08, 0x29, 0xbb, 0x02, 0x2e, 0x2a,
	0xd7, 0x3d, 0xce, 0xc2, 0xe2, 0x1d, 0x63, 0x3b, 0x55, 0x79, 0x23, 0x1e, 0x01, 0x5e, 0x87, 0x77,
	0xe0, 0x8a, 0x9b, 0xa9, 0x8e, 0xbb, 0xb5, 0x49, 0xbb, 0xed, 0xaa, 0x8d, 0xfd, 0x7d, 0xe7, 0x3b,
	0x3f, 0xc7, 0x27, 0xe4, 0x43, 0x96, 0xbb, 0xa3, 0x72, 0xc0, 0x04, 0xaa, 0xc4, 0x62, 0x81, 0xdd,
	0x1c, 0xab, 0x5f, 0xae, 0x73, 0x9b, 0x70, 0x9d, 0x27, 0x59, 0x81, 0xd8, 0x95, 0x30, 0x4c, 0x24,
	0x0c, 0x99, 0xd1, 0x22, 0x19, 0x3d, 0x4f, 0x24, 0xcf, 0x0b, 0x1c, 0x81, 0xe9, 0x5b, 0x71, 0x04,
	0x0a, 0x98, 0x36, 0xe8, 0x90, 0x6e, 0x06, 0x05, 0x9b, 0x14, 0x60, 0x39, 0x76, 0xee, 0x64, 0x98,
	0xa1, 0xdf, 0x4b, 0x26, 0xff, 0x2a, 0x59, 0x87, 0xc2, 0xd8, 0x55, 0x8b, 0x30, 0x76, 0x61, 0xed,
	0xd9, 0xf2, 0xcc, 0xd9, 0xbc, 0xa0, 0x66, 0x97, 0x77, 0x28, 0x50, 0x29, 0x3c, 0x09, 0xfa, 0x2d,
	0x7b, 0x3c, 0xea, 0x79, 0xa9, 0x40, 0x03, 0xd5, 0xb6, 0x09, 0x5d, 0xc7, 0x7f, 0x22, 0xb2, 0x71,
	0x10, 0xea, 0x1f, 0x7a, 0x1c, 0xfa, 0x82, 0xac, 0x29, 0x70, 0x7c, 0xc8, 0x1d, 0x6f, 0x47, 0x0f,
	0xa2, 0xc7, 0xeb, 0xbd, 0x2d, 0x56, 0x63, 0x63, 0x9f, 0x07, 0xdf, 0x41, 0xb8, 0x4f, 0xe0, 0x78,
	0x7a, 0x26, 0xa6, 0x7b, 0x64, 0xc5, 0x6a, 0x10, 0xed, 0xeb, 0xde, 0xb4, 0xeb, 0x4d, 0x53, 0xc3,
	0x7c, 0xc6, 0xa1, 0x06, 0x91, 0x7a, 0x31, 0xdd, 0x27, 0xab, 0xd6, 0x71, 0x57, 0xda, 0xf6, 0x0d,
	0x6f, 0x7b, 0x78, 0x91, 0xcd, 0x0b, 0xd3, 0x60, 0x88, 0x07, 0xa4, 0xfd, 0x0e, 0xdc, 0xbc, 0x24,
	0x85, 0x1f, 0x25, 0x58, 0x47, 0x0f, 0xc8, 0xad, 0x52, 0x5b, 0x67, 0x80, 0xab, 0xbe, 0x01, 0x19,
	0x40, 0x1e, 0x31, 0x8f, 0x3e, 0x39, 0x90, 0xb3, 0x88, 0x37, 0x45, 0x69, 0x1d, 0x98, 0x8a, 0x28,
	0x05, 0x99, 0xae, 0x4f, 0x8d, 0x29, 0xc8, 0x18, 0xc8, 0xbd, 0x05, 0x19, 0x56, 0xe3, 0x89, 0x05,
	0xfa, 0x9e, 0x6c, 0xd6, 0xee, 0x42, 0xc8, 0xd9, 0x6d, 0x1c, 0x58, 0xad, 0xc2, 0x86, 0x9c, 0x7b,
	0x8e, 0x0b, 0xb2, 0xdd, 0x88, 0xf9, 0xc2, 0x55, 0x31, 0xc5, 0xf9, 0x48, 0x6e, 0xd7, 0x92, 0x66,
	0xa8, 0xb6, 0x17, 0x50, 0x9d, 0xe3, 0xb4, 0x64, 0xad, 0x79, 0x19, 0x7f, 0x23, 0x3b, 0x4b, 0xd2,
	0x02, 0xd8, 0x4b, 0x72, 0xf3, 0x27, 0x57, 0x45, 0x7f, 0xe6, 0x0e, 0xec, 0x34, 0x90, 0x52, 0xb0,
	0x58, 0x1a, 0x51, 0x39, 0xd7, 0x26, 0xfa, 0xb7, 0xdc, 0xf1, 0xde, 0xff, 0x88, 0xb4, 0xe6, 0x4b,
	0xbf, 0xd2, 0x39, 0x2d, 0x48, 0xab, 0x11, 0x49, 0x9f, 0x34, 0x6a, 0x2e, 0x7b, 0x9f, 0x9d, 0xa7,
	0x57, 0x91, 0x56, 0xdd, 0xc7, 0xd7, 0xe8, 0x98, 0xdc, 0x5d, 0x08, 0x48, 0xbb, 0x97, 0x97, 0x99,
	0x39, 0xf6, 0x0e, 0xbb, 0xaa, 0x7c, 0x9a, 0xfc, 0x7a, 0xff, 0xf7, 0xbf, 0x95, 0xe8, 0xd7, 0xdf,
	0xfb, 0xd1, 0xd7, 0xe4, 0xc2, 0x6f, 0x8b, 0x3e, 0xce, 0xfc, 0x48, 0x9e, 0x0f, 0xed, 0x60, 0xd5,
	0x4f, 0xe4, 0xde, 0x69, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x25, 0x25, 0xfd, 0x95, 0x04, 0x00,
	0x00,
}

func (this *FailoverScheme) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FailoverScheme)
	if !ok {
		that2, ok := that.(FailoverScheme)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetFailoverSchemeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFailoverSchemeRequest)
	if !ok {
		that2, ok := that.(GetFailoverSchemeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpstreamRef.Equal(that1.UpstreamRef) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetFailoverSchemeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFailoverSchemeResponse)
	if !ok {
		that2, ok := that.(GetFailoverSchemeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FailoverScheme.Equal(that1.FailoverScheme) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetFailoverSchemeYamlRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFailoverSchemeYamlRequest)
	if !ok {
		that2, ok := that.(GetFailoverSchemeYamlRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FailoverSchemeRef.Equal(that1.FailoverSchemeRef) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetFailoverSchemeYamlResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFailoverSchemeYamlResponse)
	if !ok {
		that2, ok := that.(GetFailoverSchemeYamlResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.YamlData.Equal(that1.YamlData) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FailoverSchemeApiClient is the client API for FailoverSchemeApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FailoverSchemeApiClient interface {
	GetFailoverScheme(ctx context.Context, in *GetFailoverSchemeRequest, opts ...grpc.CallOption) (*GetFailoverSchemeResponse, error)
	GetFailoverSchemeYaml(ctx context.Context, in *GetFailoverSchemeYamlRequest, opts ...grpc.CallOption) (*GetFailoverSchemeYamlResponse, error)
}

type failoverSchemeApiClient struct {
	cc *grpc.ClientConn
}

func NewFailoverSchemeApiClient(cc *grpc.ClientConn) FailoverSchemeApiClient {
	return &failoverSchemeApiClient{cc}
}

func (c *failoverSchemeApiClient) GetFailoverScheme(ctx context.Context, in *GetFailoverSchemeRequest, opts ...grpc.CallOption) (*GetFailoverSchemeResponse, error) {
	out := new(GetFailoverSchemeResponse)
	err := c.cc.Invoke(ctx, "/fed.rpc.solo.io.FailoverSchemeApi/GetFailoverScheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *failoverSchemeApiClient) GetFailoverSchemeYaml(ctx context.Context, in *GetFailoverSchemeYamlRequest, opts ...grpc.CallOption) (*GetFailoverSchemeYamlResponse, error) {
	out := new(GetFailoverSchemeYamlResponse)
	err := c.cc.Invoke(ctx, "/fed.rpc.solo.io.FailoverSchemeApi/GetFailoverSchemeYaml", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FailoverSchemeApiServer is the server API for FailoverSchemeApi service.
type FailoverSchemeApiServer interface {
	GetFailoverScheme(context.Context, *GetFailoverSchemeRequest) (*GetFailoverSchemeResponse, error)
	GetFailoverSchemeYaml(context.Context, *GetFailoverSchemeYamlRequest) (*GetFailoverSchemeYamlResponse, error)
}

// UnimplementedFailoverSchemeApiServer can be embedded to have forward compatible implementations.
type UnimplementedFailoverSchemeApiServer struct {
}

func (*UnimplementedFailoverSchemeApiServer) GetFailoverScheme(ctx context.Context, req *GetFailoverSchemeRequest) (*GetFailoverSchemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFailoverScheme not implemented")
}
func (*UnimplementedFailoverSchemeApiServer) GetFailoverSchemeYaml(ctx context.Context, req *GetFailoverSchemeYamlRequest) (*GetFailoverSchemeYamlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFailoverSchemeYaml not implemented")
}

func RegisterFailoverSchemeApiServer(s *grpc.Server, srv FailoverSchemeApiServer) {
	s.RegisterService(&_FailoverSchemeApi_serviceDesc, srv)
}

func _FailoverSchemeApi_GetFailoverScheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFailoverSchemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FailoverSchemeApiServer).GetFailoverScheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fed.rpc.solo.io.FailoverSchemeApi/GetFailoverScheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FailoverSchemeApiServer).GetFailoverScheme(ctx, req.(*GetFailoverSchemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FailoverSchemeApi_GetFailoverSchemeYaml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFailoverSchemeYamlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FailoverSchemeApiServer).GetFailoverSchemeYaml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fed.rpc.solo.io.FailoverSchemeApi/GetFailoverSchemeYaml",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FailoverSchemeApiServer).GetFailoverSchemeYaml(ctx, req.(*GetFailoverSchemeYamlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FailoverSchemeApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fed.rpc.solo.io.FailoverSchemeApi",
	HandlerType: (*FailoverSchemeApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFailoverScheme",
			Handler:    _FailoverSchemeApi_GetFailoverScheme_Handler,
		},
		{
			MethodName: "GetFailoverSchemeYaml",
			Handler:    _FailoverSchemeApi_GetFailoverSchemeYaml_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/solo-io/solo-apis/api/gloo-fed/fed.rpc/v1/failover_scheme.proto",
}
