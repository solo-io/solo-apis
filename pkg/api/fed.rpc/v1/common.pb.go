// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-fed/fed.rpc/v1/common.proto

// defines common types shared across DevPortal component APIs

package v1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
// This is a boiled-down version of Kubernetes ObjectMeta which can be found at:
// https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/generated.proto
type ObjectMeta struct {
	// Name must be unique within a namespace. Is required when creating resources, although
	// some resources may allow a client to request the generation of an appropriate name
	// automatically. Name is primarily intended for creation idempotence and configuration
	// definition.
	// Cannot be updated.
	// More info: http://kubernetes.io/docs/user-guide/identifiers#names
	// +optional
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace defines the space within each name must be unique. An empty namespace is
	// equivalent to the "default" namespace, but "default" is the canonical representation.
	// Not all objects are required to be scoped to a namespace - the value of this field for
	// those objects will be empty.
	//
	// Must be a DNS_LABEL.
	// Cannot be updated.
	// More info: http://kubernetes.io/docs/user-guide/namespaces
	// +optional
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// UID is the unique in time and space value for this object. It is typically generated by
	// the server on successful creation of a resource and is not allowed to change on PUT
	// operations.
	//
	// Populated by the system.
	// Read-only.
	// More info: http://kubernetes.io/docs/user-guide/identifiers#uids
	// +optional
	Uid string `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`
	// An opaque value that represents the internal version of this object that can
	// be used by clients to determine when objects have changed. May be used for optimistic
	// concurrency, change detection, and the watch operation on a resource or set of resources.
	// Clients must treat these values as opaque and passed unmodified back to the server.
	// They may only be valid for a particular resource or set of resources.
	//
	// Populated by the system.
	// Read-only.
	// Value must be treated as opaque by clients and .
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	// +optional
	ResourceVersion string `protobuf:"bytes,6,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	// CreationTimestamp is a timestamp representing the server time when this object was
	// created. It is not guaranteed to be set in happens-before order across separate operations.
	// Clients may not set this value. It is represented in RFC3339 form and is in UTC.
	//
	// Populated by the system.
	// Read-only.
	// Null for lists.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	CreationTimestamp *Time `protobuf:"bytes,8,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and services.
	// More info: http://kubernetes.io/docs/user-guide/labels
	// +optional
	Labels map[string]string `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	// More info: http://kubernetes.io/docs/user-guide/annotations
	// +optional
	Annotations map[string]string `protobuf:"bytes,12,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The name of the cluster which the object belongs to.
	// This is used to distinguish resources with same name and namespace in different clusters.
	// This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
	// +optional
	ClusterName          string   `protobuf:"bytes,13,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObjectMeta) Reset()         { *m = ObjectMeta{} }
func (m *ObjectMeta) String() string { return proto.CompactTextString(m) }
func (*ObjectMeta) ProtoMessage()    {}
func (*ObjectMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_3db2481ebf04ecc4, []int{0}
}
func (m *ObjectMeta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectMeta.Unmarshal(m, b)
}
func (m *ObjectMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectMeta.Marshal(b, m, deterministic)
}
func (m *ObjectMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectMeta.Merge(m, src)
}
func (m *ObjectMeta) XXX_Size() int {
	return xxx_messageInfo_ObjectMeta.Size(m)
}
func (m *ObjectMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectMeta.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectMeta proto.InternalMessageInfo

func (m *ObjectMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ObjectMeta) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ObjectMeta) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *ObjectMeta) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *ObjectMeta) GetCreationTimestamp() *Time {
	if m != nil {
		return m.CreationTimestamp
	}
	return nil
}

func (m *ObjectMeta) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ObjectMeta) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ObjectMeta) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

// Time is a wrapper around time.Time which supports correct
// marshaling to YAML and JSON.  Wrappers are provided for many
// of the factory methods that the time package offers.
//
// +protobuf.options.marshal=false
// +protobuf.as=Timestamp
// +protobuf.options.(gogoproto.goproto_stringer)=false
type Time struct {
	// Represents seconds of UTC time since Unix epoch
	// 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
	// 9999-12-31T23:59:59Z inclusive.
	Seconds int64 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// Non-negative fractions of a second at nanosecond resolution. Negative
	// second values with fractions must still have non-negative nanos values
	// that count forward in time. Must be from 0 to 999,999,999
	// inclusive. This field may be limited in precision depending on context.
	Nanos                int32    `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Time) Reset()         { *m = Time{} }
func (m *Time) String() string { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()    {}
func (*Time) Descriptor() ([]byte, []int) {
	return fileDescriptor_3db2481ebf04ecc4, []int{1}
}
func (m *Time) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Time.Unmarshal(m, b)
}
func (m *Time) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Time.Marshal(b, m, deterministic)
}
func (m *Time) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Time.Merge(m, src)
}
func (m *Time) XXX_Size() int {
	return xxx_messageInfo_Time.Size(m)
}
func (m *Time) XXX_DiscardUnknown() {
	xxx_messageInfo_Time.DiscardUnknown(m)
}

var xxx_messageInfo_Time proto.InternalMessageInfo

func (m *Time) GetSeconds() int64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *Time) GetNanos() int32 {
	if m != nil {
		return m.Nanos
	}
	return 0
}

type ResourceYaml struct {
	Yaml                 string   `protobuf:"bytes,1,opt,name=yaml,proto3" json:"yaml,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceYaml) Reset()         { *m = ResourceYaml{} }
func (m *ResourceYaml) String() string { return proto.CompactTextString(m) }
func (*ResourceYaml) ProtoMessage()    {}
func (*ResourceYaml) Descriptor() ([]byte, []int) {
	return fileDescriptor_3db2481ebf04ecc4, []int{2}
}
func (m *ResourceYaml) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceYaml.Unmarshal(m, b)
}
func (m *ResourceYaml) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceYaml.Marshal(b, m, deterministic)
}
func (m *ResourceYaml) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceYaml.Merge(m, src)
}
func (m *ResourceYaml) XXX_Size() int {
	return xxx_messageInfo_ResourceYaml.Size(m)
}
func (m *ResourceYaml) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceYaml.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceYaml proto.InternalMessageInfo

func (m *ResourceYaml) GetYaml() string {
	if m != nil {
		return m.Yaml
	}
	return ""
}

func init() {
	proto.RegisterType((*ObjectMeta)(nil), "fed.rpc.solo.io.ObjectMeta")
	proto.RegisterMapType((map[string]string)(nil), "fed.rpc.solo.io.ObjectMeta.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "fed.rpc.solo.io.ObjectMeta.LabelsEntry")
	proto.RegisterType((*Time)(nil), "fed.rpc.solo.io.Time")
	proto.RegisterType((*ResourceYaml)(nil), "fed.rpc.solo.io.ResourceYaml")
}

func init() {
	proto.RegisterFile("github.com/solo-io/solo-apis/api/gloo-fed/fed.rpc/v1/common.proto", fileDescriptor_3db2481ebf04ecc4)
}

var fileDescriptor_3db2481ebf04ecc4 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x51, 0x6b, 0x13, 0x4d,
	0x14, 0x65, 0xbb, 0x49, 0xbe, 0xaf, 0x77, 0x23, 0x8d, 0x43, 0x85, 0x21, 0x88, 0xc4, 0xbc, 0x18,
	0xc1, 0xee, 0x62, 0x05, 0xb1, 0x3e, 0x28, 0x15, 0x7d, 0xd3, 0x0a, 0x4b, 0x11, 0xf4, 0x25, 0x4c,
	0x26, 0xb7, 0xeb, 0xd8, 0x9d, 0xb9, 0xcb, 0xce, 0x6c, 0x68, 0xfe, 0x91, 0x3f, 0xc1, 0xdf, 0xe3,
	0x2f, 0xf0, 0xc5, 0x77, 0x99, 0xd9, 0x5d, 0x52, 0x2a, 0x14, 0x7c, 0x9a, 0x73, 0xcf, 0xbd, 0xe7,
	0x24, 0xf7, 0xee, 0x81, 0xd3, 0x42, 0xb9, 0xaf, 0xcd, 0x2a, 0x95, 0xa4, 0x33, 0x4b, 0x25, 0x1d,
	0x29, 0x6a, 0x5f, 0x51, 0x29, 0x9b, 0x89, 0x4a, 0x65, 0x45, 0x49, 0x74, 0x74, 0x81, 0xeb, 0xec,
	0x02, 0xd7, 0x69, 0x5d, 0xc9, 0x6c, 0xf3, 0x34, 0x93, 0xa4, 0x35, 0x99, 0xb4, 0xaa, 0xc9, 0x11,
	0x3b, 0xe8, 0x1a, 0xa9, 0xd7, 0xa5, 0x8a, 0xa6, 0x87, 0x05, 0x15, 0x14, 0x7a, 0x99, 0x47, 0xed,
	0xd8, 0x94, 0xe1, 0x95, 0x6b, 0x49, 0xbc, 0x72, 0x2d, 0x37, 0xff, 0x15, 0x03, 0x7c, 0x5c, 0x7d,
	0x43, 0xe9, 0x3e, 0xa0, 0x13, 0x8c, 0xc1, 0xc0, 0x08, 0x8d, 0x3c, 0x9a, 0x45, 0x8b, 0xfd, 0x3c,
	0x60, 0x76, 0x1f, 0xf6, 0xfd, 0x6b, 0x2b, 0x21, 0x91, 0xc7, 0xa1, 0xb1, 0x23, 0xd8, 0x04, 0xe2,
	0x46, 0xad, 0xf9, 0x30, 0xf0, 0x1e, 0xb2, 0xc7, 0x30, 0xa9, 0xd1, 0x52, 0x53, 0x4b, 0x5c, 0x6e,
	0xb0, 0xb6, 0x8a, 0x0c, 0x1f, 0x85, 0xf6, 0x41, 0xcf, 0x7f, 0x6a, 0x69, 0xf6, 0x16, 0x98, 0xac,
	0x51, 0x38, 0x45, 0x66, 0xe9, 0x94, 0x46, 0xeb, 0x84, 0xae, 0xf8, 0xff, 0xb3, 0x68, 0x91, 0x1c,
	0xdf, 0x4b, 0x6f, 0x6c, 0x95, 0x9e, 0x2b, 0x8d, 0xf9, 0xdd, 0x5e, 0x70, 0xde, 0xcf, 0xb3, 0xd7,
	0x30, 0x2a, 0xc5, 0x0a, 0x4b, 0xcb, 0x93, 0x59, 0xbc, 0x48, 0x8e, 0x1f, 0xfd, 0xa5, 0xdc, 0x6d,
	0x98, 0xbe, 0x0f, 0x93, 0xef, 0x8c, 0xab, 0xb7, 0x79, 0x27, 0x63, 0x67, 0x90, 0x08, 0x63, 0xc8,
	0x05, 0x5f, 0xcb, 0xc7, 0xc1, 0xe5, 0xc9, 0x6d, 0x2e, 0xa7, 0xbb, 0xf1, 0xd6, 0xea, 0xba, 0x01,
	0x7b, 0x08, 0x63, 0x59, 0x36, 0xd6, 0x61, 0xbd, 0x0c, 0xd7, 0xbc, 0x13, 0xb6, 0x4f, 0x3a, 0xee,
	0x4c, 0x68, 0x9c, 0x9e, 0x40, 0x72, 0xed, 0x9f, 0xf8, 0x2b, 0x5e, 0xe2, 0xb6, 0x3b, 0xbb, 0x87,
	0xec, 0x10, 0x86, 0x1b, 0x51, 0x36, 0xc8, 0xf7, 0x02, 0xd7, 0x16, 0x2f, 0xf7, 0x5e, 0x44, 0xd3,
	0x57, 0x30, 0xb9, 0xf9, 0xf3, 0xff, 0xa2, 0x9f, 0x3f, 0x87, 0x81, 0xbf, 0x1d, 0xe3, 0xf0, 0x9f,
	0x45, 0x49, 0x66, 0x6d, 0x83, 0x2e, 0xce, 0xfb, 0xd2, 0x6b, 0x8d, 0x30, 0x64, 0x83, 0x76, 0x98,
	0xb7, 0xc5, 0x7c, 0x0e, 0xe3, 0xbc, 0xfb, 0x7e, 0x9f, 0x85, 0x2e, 0x7d, 0x56, 0xb6, 0x42, 0x97,
	0x7d, 0x56, 0x3c, 0x7e, 0x73, 0xf2, 0xe3, 0xf7, 0x20, 0xfa, 0xfe, 0xf3, 0x41, 0xf4, 0x25, 0xbb,
	0x35, 0xd6, 0xd5, 0x65, 0x11, 0xa2, 0xbd, 0x4b, 0xf4, 0x6a, 0x14, 0x02, 0xf9, 0xec, 0x4f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x28, 0x98, 0xf5, 0x1d, 0x10, 0x03, 0x00, 0x00,
}

func (this *ObjectMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectMeta)
	if !ok {
		that2, ok := that.(ObjectMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.ResourceVersion != that1.ResourceVersion {
		return false
	}
	if !this.CreationTimestamp.Equal(that1.CreationTimestamp) {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.Annotations) != len(that1.Annotations) {
		return false
	}
	for i := range this.Annotations {
		if this.Annotations[i] != that1.Annotations[i] {
			return false
		}
	}
	if this.ClusterName != that1.ClusterName {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Time) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Time)
	if !ok {
		that2, ok := that.(Time)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seconds != that1.Seconds {
		return false
	}
	if this.Nanos != that1.Nanos {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ResourceYaml) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResourceYaml)
	if !ok {
		that2, ok := that.(ResourceYaml)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Yaml != that1.Yaml {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
