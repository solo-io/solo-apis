// Code generated by skv2. DO NOT EDIT.

// This file contains generated Deepcopy methods for proto-based Spec and Status fields

package types

import (
    proto "github.com/golang/protobuf/proto"
	"github.com/solo-io/protoc-gen-ext/pkg/clone"
)
// DeepCopyInto for the FederatedGateway.Spec
func (in *FederatedGatewaySpec) DeepCopyInto(out *FederatedGatewaySpec) {
    var p *FederatedGatewaySpec
    if h, ok := interface{}(in).(clone.Cloner); ok {
        p = h.Clone().(*FederatedGatewaySpec)
    } else {
        p = proto.Clone(in).(*FederatedGatewaySpec)
    }
    *out = *p
}
// DeepCopyInto for the FederatedGateway.Status
func (in *FederatedGatewayStatus) DeepCopyInto(out *FederatedGatewayStatus) {
    var p *FederatedGatewayStatus
    if h, ok := interface{}(in).(clone.Cloner); ok {
        p = h.Clone().(*FederatedGatewayStatus)
    } else {
        p = proto.Clone(in).(*FederatedGatewayStatus)
    }
    *out = *p
}
// DeepCopyInto for the FederatedMatchableHttpGateway.Spec
func (in *FederatedMatchableHttpGatewaySpec) DeepCopyInto(out *FederatedMatchableHttpGatewaySpec) {
    var p *FederatedMatchableHttpGatewaySpec
    if h, ok := interface{}(in).(clone.Cloner); ok {
        p = h.Clone().(*FederatedMatchableHttpGatewaySpec)
    } else {
        p = proto.Clone(in).(*FederatedMatchableHttpGatewaySpec)
    }
    *out = *p
}
// DeepCopyInto for the FederatedMatchableHttpGateway.Status
func (in *FederatedMatchableHttpGatewayStatus) DeepCopyInto(out *FederatedMatchableHttpGatewayStatus) {
    var p *FederatedMatchableHttpGatewayStatus
    if h, ok := interface{}(in).(clone.Cloner); ok {
        p = h.Clone().(*FederatedMatchableHttpGatewayStatus)
    } else {
        p = proto.Clone(in).(*FederatedMatchableHttpGatewayStatus)
    }
    *out = *p
}
// DeepCopyInto for the FederatedMatchableTcpGateway.Spec
func (in *FederatedMatchableTcpGatewaySpec) DeepCopyInto(out *FederatedMatchableTcpGatewaySpec) {
    var p *FederatedMatchableTcpGatewaySpec
    if h, ok := interface{}(in).(clone.Cloner); ok {
        p = h.Clone().(*FederatedMatchableTcpGatewaySpec)
    } else {
        p = proto.Clone(in).(*FederatedMatchableTcpGatewaySpec)
    }
    *out = *p
}
// DeepCopyInto for the FederatedMatchableTcpGateway.Status
func (in *FederatedMatchableTcpGatewayStatus) DeepCopyInto(out *FederatedMatchableTcpGatewayStatus) {
    var p *FederatedMatchableTcpGatewayStatus
    if h, ok := interface{}(in).(clone.Cloner); ok {
        p = h.Clone().(*FederatedMatchableTcpGatewayStatus)
    } else {
        p = proto.Clone(in).(*FederatedMatchableTcpGatewayStatus)
    }
    *out = *p
}
// DeepCopyInto for the FederatedRouteTable.Spec
func (in *FederatedRouteTableSpec) DeepCopyInto(out *FederatedRouteTableSpec) {
    var p *FederatedRouteTableSpec
    if h, ok := interface{}(in).(clone.Cloner); ok {
        p = h.Clone().(*FederatedRouteTableSpec)
    } else {
        p = proto.Clone(in).(*FederatedRouteTableSpec)
    }
    *out = *p
}
// DeepCopyInto for the FederatedRouteTable.Status
func (in *FederatedRouteTableStatus) DeepCopyInto(out *FederatedRouteTableStatus) {
    var p *FederatedRouteTableStatus
    if h, ok := interface{}(in).(clone.Cloner); ok {
        p = h.Clone().(*FederatedRouteTableStatus)
    } else {
        p = proto.Clone(in).(*FederatedRouteTableStatus)
    }
    *out = *p
}
// DeepCopyInto for the FederatedVirtualService.Spec
func (in *FederatedVirtualServiceSpec) DeepCopyInto(out *FederatedVirtualServiceSpec) {
    var p *FederatedVirtualServiceSpec
    if h, ok := interface{}(in).(clone.Cloner); ok {
        p = h.Clone().(*FederatedVirtualServiceSpec)
    } else {
        p = proto.Clone(in).(*FederatedVirtualServiceSpec)
    }
    *out = *p
}
// DeepCopyInto for the FederatedVirtualService.Status
func (in *FederatedVirtualServiceStatus) DeepCopyInto(out *FederatedVirtualServiceStatus) {
    var p *FederatedVirtualServiceStatus
    if h, ok := interface{}(in).(clone.Cloner); ok {
        p = h.Clone().(*FederatedVirtualServiceStatus)
    } else {
        p = proto.Clone(in).(*FederatedVirtualServiceStatus)
    }
    *out = *p
}
