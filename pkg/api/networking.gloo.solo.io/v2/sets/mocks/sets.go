// Code generated by MockGen. DO NOT EDIT.
// Source: ./sets.go

// Package mock_v2sets is a generated GoMock package.
package mock_v2sets

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sets "github.com/solo-io/skv2/contrib/pkg/sets"
	ezkube "github.com/solo-io/skv2/pkg/ezkube"
	v2 "github.com/solo-io/solo-apis/pkg/api/networking.gloo.solo.io/v2"
	v2sets "github.com/solo-io/solo-apis/pkg/api/networking.gloo.solo.io/v2/sets"
	sets0 "k8s.io/apimachinery/pkg/util/sets"
)

// MockExternalServiceSet is a mock of ExternalServiceSet interface
type MockExternalServiceSet struct {
	ctrl     *gomock.Controller
	recorder *MockExternalServiceSetMockRecorder
}

// MockExternalServiceSetMockRecorder is the mock recorder for MockExternalServiceSet
type MockExternalServiceSetMockRecorder struct {
	mock *MockExternalServiceSet
}

// NewMockExternalServiceSet creates a new mock instance
func NewMockExternalServiceSet(ctrl *gomock.Controller) *MockExternalServiceSet {
	mock := &MockExternalServiceSet{ctrl: ctrl}
	mock.recorder = &MockExternalServiceSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExternalServiceSet) EXPECT() *MockExternalServiceSetMockRecorder {
	return m.recorder
}

// Keys mocks base method
func (m *MockExternalServiceSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys
func (mr *MockExternalServiceSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockExternalServiceSet)(nil).Keys))
}

// List mocks base method
func (m *MockExternalServiceSet) List(filterResource ...func(*v2.ExternalService) bool) []*v2.ExternalService {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.ExternalService)
	return ret0
}

// List indicates an expected call of List
func (mr *MockExternalServiceSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExternalServiceSet)(nil).List), filterResource...)
}

// UnsortedList mocks base method
func (m *MockExternalServiceSet) UnsortedList(filterResource ...func(*v2.ExternalService) bool) []*v2.ExternalService {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.ExternalService)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList
func (mr *MockExternalServiceSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockExternalServiceSet)(nil).UnsortedList), filterResource...)
}

// Map mocks base method
func (m *MockExternalServiceSet) Map() map[string]*v2.ExternalService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.ExternalService)
	return ret0
}

// Map indicates an expected call of Map
func (mr *MockExternalServiceSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockExternalServiceSet)(nil).Map))
}

// Insert mocks base method
func (m *MockExternalServiceSet) Insert(externalService ...*v2.ExternalService) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range externalService {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert
func (mr *MockExternalServiceSetMockRecorder) Insert(externalService ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockExternalServiceSet)(nil).Insert), externalService...)
}

// Equal mocks base method
func (m *MockExternalServiceSet) Equal(externalServiceSet v2sets.ExternalServiceSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", externalServiceSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockExternalServiceSetMockRecorder) Equal(externalServiceSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockExternalServiceSet)(nil).Equal), externalServiceSet)
}

// Has mocks base method
func (m *MockExternalServiceSet) Has(externalService ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", externalService)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockExternalServiceSetMockRecorder) Has(externalService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockExternalServiceSet)(nil).Has), externalService)
}

// Delete mocks base method
func (m *MockExternalServiceSet) Delete(externalService ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", externalService)
}

// Delete indicates an expected call of Delete
func (mr *MockExternalServiceSetMockRecorder) Delete(externalService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExternalServiceSet)(nil).Delete), externalService)
}

// Union mocks base method
func (m *MockExternalServiceSet) Union(set v2sets.ExternalServiceSet) v2sets.ExternalServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.ExternalServiceSet)
	return ret0
}

// Union indicates an expected call of Union
func (mr *MockExternalServiceSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockExternalServiceSet)(nil).Union), set)
}

// Difference mocks base method
func (m *MockExternalServiceSet) Difference(set v2sets.ExternalServiceSet) v2sets.ExternalServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.ExternalServiceSet)
	return ret0
}

// Difference indicates an expected call of Difference
func (mr *MockExternalServiceSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockExternalServiceSet)(nil).Difference), set)
}

// Intersection mocks base method
func (m *MockExternalServiceSet) Intersection(set v2sets.ExternalServiceSet) v2sets.ExternalServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.ExternalServiceSet)
	return ret0
}

// Intersection indicates an expected call of Intersection
func (mr *MockExternalServiceSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockExternalServiceSet)(nil).Intersection), set)
}

// Find mocks base method
func (m *MockExternalServiceSet) Find(id ezkube.ResourceId) (*v2.ExternalService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.ExternalService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockExternalServiceSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockExternalServiceSet)(nil).Find), id)
}

// Length mocks base method
func (m *MockExternalServiceSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length
func (mr *MockExternalServiceSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockExternalServiceSet)(nil).Length))
}

// Generic mocks base method
func (m *MockExternalServiceSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockExternalServiceSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockExternalServiceSet)(nil).Generic))
}

// Delta mocks base method
func (m *MockExternalServiceSet) Delta(newSet v2sets.ExternalServiceSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta
func (mr *MockExternalServiceSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockExternalServiceSet)(nil).Delta), newSet)
}

// Clone mocks base method
func (m *MockExternalServiceSet) Clone() v2sets.ExternalServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.ExternalServiceSet)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockExternalServiceSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockExternalServiceSet)(nil).Clone))
}

// MockExternalEndpointSet is a mock of ExternalEndpointSet interface
type MockExternalEndpointSet struct {
	ctrl     *gomock.Controller
	recorder *MockExternalEndpointSetMockRecorder
}

// MockExternalEndpointSetMockRecorder is the mock recorder for MockExternalEndpointSet
type MockExternalEndpointSetMockRecorder struct {
	mock *MockExternalEndpointSet
}

// NewMockExternalEndpointSet creates a new mock instance
func NewMockExternalEndpointSet(ctrl *gomock.Controller) *MockExternalEndpointSet {
	mock := &MockExternalEndpointSet{ctrl: ctrl}
	mock.recorder = &MockExternalEndpointSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExternalEndpointSet) EXPECT() *MockExternalEndpointSetMockRecorder {
	return m.recorder
}

// Keys mocks base method
func (m *MockExternalEndpointSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys
func (mr *MockExternalEndpointSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockExternalEndpointSet)(nil).Keys))
}

// List mocks base method
func (m *MockExternalEndpointSet) List(filterResource ...func(*v2.ExternalEndpoint) bool) []*v2.ExternalEndpoint {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.ExternalEndpoint)
	return ret0
}

// List indicates an expected call of List
func (mr *MockExternalEndpointSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExternalEndpointSet)(nil).List), filterResource...)
}

// UnsortedList mocks base method
func (m *MockExternalEndpointSet) UnsortedList(filterResource ...func(*v2.ExternalEndpoint) bool) []*v2.ExternalEndpoint {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.ExternalEndpoint)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList
func (mr *MockExternalEndpointSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockExternalEndpointSet)(nil).UnsortedList), filterResource...)
}

// Map mocks base method
func (m *MockExternalEndpointSet) Map() map[string]*v2.ExternalEndpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.ExternalEndpoint)
	return ret0
}

// Map indicates an expected call of Map
func (mr *MockExternalEndpointSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockExternalEndpointSet)(nil).Map))
}

// Insert mocks base method
func (m *MockExternalEndpointSet) Insert(externalEndpoint ...*v2.ExternalEndpoint) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range externalEndpoint {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert
func (mr *MockExternalEndpointSetMockRecorder) Insert(externalEndpoint ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockExternalEndpointSet)(nil).Insert), externalEndpoint...)
}

// Equal mocks base method
func (m *MockExternalEndpointSet) Equal(externalEndpointSet v2sets.ExternalEndpointSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", externalEndpointSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockExternalEndpointSetMockRecorder) Equal(externalEndpointSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockExternalEndpointSet)(nil).Equal), externalEndpointSet)
}

// Has mocks base method
func (m *MockExternalEndpointSet) Has(externalEndpoint ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", externalEndpoint)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockExternalEndpointSetMockRecorder) Has(externalEndpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockExternalEndpointSet)(nil).Has), externalEndpoint)
}

// Delete mocks base method
func (m *MockExternalEndpointSet) Delete(externalEndpoint ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", externalEndpoint)
}

// Delete indicates an expected call of Delete
func (mr *MockExternalEndpointSetMockRecorder) Delete(externalEndpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExternalEndpointSet)(nil).Delete), externalEndpoint)
}

// Union mocks base method
func (m *MockExternalEndpointSet) Union(set v2sets.ExternalEndpointSet) v2sets.ExternalEndpointSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.ExternalEndpointSet)
	return ret0
}

// Union indicates an expected call of Union
func (mr *MockExternalEndpointSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockExternalEndpointSet)(nil).Union), set)
}

// Difference mocks base method
func (m *MockExternalEndpointSet) Difference(set v2sets.ExternalEndpointSet) v2sets.ExternalEndpointSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.ExternalEndpointSet)
	return ret0
}

// Difference indicates an expected call of Difference
func (mr *MockExternalEndpointSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockExternalEndpointSet)(nil).Difference), set)
}

// Intersection mocks base method
func (m *MockExternalEndpointSet) Intersection(set v2sets.ExternalEndpointSet) v2sets.ExternalEndpointSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.ExternalEndpointSet)
	return ret0
}

// Intersection indicates an expected call of Intersection
func (mr *MockExternalEndpointSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockExternalEndpointSet)(nil).Intersection), set)
}

// Find mocks base method
func (m *MockExternalEndpointSet) Find(id ezkube.ResourceId) (*v2.ExternalEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.ExternalEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockExternalEndpointSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockExternalEndpointSet)(nil).Find), id)
}

// Length mocks base method
func (m *MockExternalEndpointSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length
func (mr *MockExternalEndpointSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockExternalEndpointSet)(nil).Length))
}

// Generic mocks base method
func (m *MockExternalEndpointSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockExternalEndpointSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockExternalEndpointSet)(nil).Generic))
}

// Delta mocks base method
func (m *MockExternalEndpointSet) Delta(newSet v2sets.ExternalEndpointSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta
func (mr *MockExternalEndpointSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockExternalEndpointSet)(nil).Delta), newSet)
}

// Clone mocks base method
func (m *MockExternalEndpointSet) Clone() v2sets.ExternalEndpointSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.ExternalEndpointSet)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockExternalEndpointSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockExternalEndpointSet)(nil).Clone))
}

// MockRouteTableSet is a mock of RouteTableSet interface
type MockRouteTableSet struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableSetMockRecorder
}

// MockRouteTableSetMockRecorder is the mock recorder for MockRouteTableSet
type MockRouteTableSetMockRecorder struct {
	mock *MockRouteTableSet
}

// NewMockRouteTableSet creates a new mock instance
func NewMockRouteTableSet(ctrl *gomock.Controller) *MockRouteTableSet {
	mock := &MockRouteTableSet{ctrl: ctrl}
	mock.recorder = &MockRouteTableSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteTableSet) EXPECT() *MockRouteTableSetMockRecorder {
	return m.recorder
}

// Keys mocks base method
func (m *MockRouteTableSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys
func (mr *MockRouteTableSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockRouteTableSet)(nil).Keys))
}

// List mocks base method
func (m *MockRouteTableSet) List(filterResource ...func(*v2.RouteTable) bool) []*v2.RouteTable {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.RouteTable)
	return ret0
}

// List indicates an expected call of List
func (mr *MockRouteTableSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRouteTableSet)(nil).List), filterResource...)
}

// UnsortedList mocks base method
func (m *MockRouteTableSet) UnsortedList(filterResource ...func(*v2.RouteTable) bool) []*v2.RouteTable {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.RouteTable)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList
func (mr *MockRouteTableSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockRouteTableSet)(nil).UnsortedList), filterResource...)
}

// Map mocks base method
func (m *MockRouteTableSet) Map() map[string]*v2.RouteTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.RouteTable)
	return ret0
}

// Map indicates an expected call of Map
func (mr *MockRouteTableSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockRouteTableSet)(nil).Map))
}

// Insert mocks base method
func (m *MockRouteTableSet) Insert(routeTable ...*v2.RouteTable) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range routeTable {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert
func (mr *MockRouteTableSetMockRecorder) Insert(routeTable ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRouteTableSet)(nil).Insert), routeTable...)
}

// Equal mocks base method
func (m *MockRouteTableSet) Equal(routeTableSet v2sets.RouteTableSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", routeTableSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockRouteTableSetMockRecorder) Equal(routeTableSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockRouteTableSet)(nil).Equal), routeTableSet)
}

// Has mocks base method
func (m *MockRouteTableSet) Has(routeTable ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", routeTable)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockRouteTableSetMockRecorder) Has(routeTable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockRouteTableSet)(nil).Has), routeTable)
}

// Delete mocks base method
func (m *MockRouteTableSet) Delete(routeTable ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", routeTable)
}

// Delete indicates an expected call of Delete
func (mr *MockRouteTableSetMockRecorder) Delete(routeTable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRouteTableSet)(nil).Delete), routeTable)
}

// Union mocks base method
func (m *MockRouteTableSet) Union(set v2sets.RouteTableSet) v2sets.RouteTableSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.RouteTableSet)
	return ret0
}

// Union indicates an expected call of Union
func (mr *MockRouteTableSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockRouteTableSet)(nil).Union), set)
}

// Difference mocks base method
func (m *MockRouteTableSet) Difference(set v2sets.RouteTableSet) v2sets.RouteTableSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.RouteTableSet)
	return ret0
}

// Difference indicates an expected call of Difference
func (mr *MockRouteTableSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockRouteTableSet)(nil).Difference), set)
}

// Intersection mocks base method
func (m *MockRouteTableSet) Intersection(set v2sets.RouteTableSet) v2sets.RouteTableSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.RouteTableSet)
	return ret0
}

// Intersection indicates an expected call of Intersection
func (mr *MockRouteTableSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockRouteTableSet)(nil).Intersection), set)
}

// Find mocks base method
func (m *MockRouteTableSet) Find(id ezkube.ResourceId) (*v2.RouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockRouteTableSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRouteTableSet)(nil).Find), id)
}

// Length mocks base method
func (m *MockRouteTableSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length
func (mr *MockRouteTableSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockRouteTableSet)(nil).Length))
}

// Generic mocks base method
func (m *MockRouteTableSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockRouteTableSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockRouteTableSet)(nil).Generic))
}

// Delta mocks base method
func (m *MockRouteTableSet) Delta(newSet v2sets.RouteTableSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta
func (mr *MockRouteTableSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockRouteTableSet)(nil).Delta), newSet)
}

// Clone mocks base method
func (m *MockRouteTableSet) Clone() v2sets.RouteTableSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.RouteTableSet)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockRouteTableSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockRouteTableSet)(nil).Clone))
}

// MockVirtualDestinationSet is a mock of VirtualDestinationSet interface
type MockVirtualDestinationSet struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualDestinationSetMockRecorder
}

// MockVirtualDestinationSetMockRecorder is the mock recorder for MockVirtualDestinationSet
type MockVirtualDestinationSetMockRecorder struct {
	mock *MockVirtualDestinationSet
}

// NewMockVirtualDestinationSet creates a new mock instance
func NewMockVirtualDestinationSet(ctrl *gomock.Controller) *MockVirtualDestinationSet {
	mock := &MockVirtualDestinationSet{ctrl: ctrl}
	mock.recorder = &MockVirtualDestinationSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualDestinationSet) EXPECT() *MockVirtualDestinationSetMockRecorder {
	return m.recorder
}

// Keys mocks base method
func (m *MockVirtualDestinationSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys
func (mr *MockVirtualDestinationSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Keys))
}

// List mocks base method
func (m *MockVirtualDestinationSet) List(filterResource ...func(*v2.VirtualDestination) bool) []*v2.VirtualDestination {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.VirtualDestination)
	return ret0
}

// List indicates an expected call of List
func (mr *MockVirtualDestinationSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualDestinationSet)(nil).List), filterResource...)
}

// UnsortedList mocks base method
func (m *MockVirtualDestinationSet) UnsortedList(filterResource ...func(*v2.VirtualDestination) bool) []*v2.VirtualDestination {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.VirtualDestination)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList
func (mr *MockVirtualDestinationSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockVirtualDestinationSet)(nil).UnsortedList), filterResource...)
}

// Map mocks base method
func (m *MockVirtualDestinationSet) Map() map[string]*v2.VirtualDestination {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.VirtualDestination)
	return ret0
}

// Map indicates an expected call of Map
func (mr *MockVirtualDestinationSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Map))
}

// Insert mocks base method
func (m *MockVirtualDestinationSet) Insert(virtualDestination ...*v2.VirtualDestination) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range virtualDestination {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert
func (mr *MockVirtualDestinationSetMockRecorder) Insert(virtualDestination ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Insert), virtualDestination...)
}

// Equal mocks base method
func (m *MockVirtualDestinationSet) Equal(virtualDestinationSet v2sets.VirtualDestinationSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", virtualDestinationSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockVirtualDestinationSetMockRecorder) Equal(virtualDestinationSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Equal), virtualDestinationSet)
}

// Has mocks base method
func (m *MockVirtualDestinationSet) Has(virtualDestination ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", virtualDestination)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockVirtualDestinationSetMockRecorder) Has(virtualDestination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Has), virtualDestination)
}

// Delete mocks base method
func (m *MockVirtualDestinationSet) Delete(virtualDestination ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", virtualDestination)
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualDestinationSetMockRecorder) Delete(virtualDestination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Delete), virtualDestination)
}

// Union mocks base method
func (m *MockVirtualDestinationSet) Union(set v2sets.VirtualDestinationSet) v2sets.VirtualDestinationSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.VirtualDestinationSet)
	return ret0
}

// Union indicates an expected call of Union
func (mr *MockVirtualDestinationSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Union), set)
}

// Difference mocks base method
func (m *MockVirtualDestinationSet) Difference(set v2sets.VirtualDestinationSet) v2sets.VirtualDestinationSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.VirtualDestinationSet)
	return ret0
}

// Difference indicates an expected call of Difference
func (mr *MockVirtualDestinationSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Difference), set)
}

// Intersection mocks base method
func (m *MockVirtualDestinationSet) Intersection(set v2sets.VirtualDestinationSet) v2sets.VirtualDestinationSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.VirtualDestinationSet)
	return ret0
}

// Intersection indicates an expected call of Intersection
func (mr *MockVirtualDestinationSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Intersection), set)
}

// Find mocks base method
func (m *MockVirtualDestinationSet) Find(id ezkube.ResourceId) (*v2.VirtualDestination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.VirtualDestination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockVirtualDestinationSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Find), id)
}

// Length mocks base method
func (m *MockVirtualDestinationSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length
func (mr *MockVirtualDestinationSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Length))
}

// Generic mocks base method
func (m *MockVirtualDestinationSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockVirtualDestinationSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Generic))
}

// Delta mocks base method
func (m *MockVirtualDestinationSet) Delta(newSet v2sets.VirtualDestinationSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta
func (mr *MockVirtualDestinationSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Delta), newSet)
}

// Clone mocks base method
func (m *MockVirtualDestinationSet) Clone() v2sets.VirtualDestinationSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.VirtualDestinationSet)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockVirtualDestinationSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Clone))
}

// MockVirtualGatewaySet is a mock of VirtualGatewaySet interface
type MockVirtualGatewaySet struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualGatewaySetMockRecorder
}

// MockVirtualGatewaySetMockRecorder is the mock recorder for MockVirtualGatewaySet
type MockVirtualGatewaySetMockRecorder struct {
	mock *MockVirtualGatewaySet
}

// NewMockVirtualGatewaySet creates a new mock instance
func NewMockVirtualGatewaySet(ctrl *gomock.Controller) *MockVirtualGatewaySet {
	mock := &MockVirtualGatewaySet{ctrl: ctrl}
	mock.recorder = &MockVirtualGatewaySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualGatewaySet) EXPECT() *MockVirtualGatewaySetMockRecorder {
	return m.recorder
}

// Keys mocks base method
func (m *MockVirtualGatewaySet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys
func (mr *MockVirtualGatewaySetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Keys))
}

// List mocks base method
func (m *MockVirtualGatewaySet) List(filterResource ...func(*v2.VirtualGateway) bool) []*v2.VirtualGateway {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v2.VirtualGateway)
	return ret0
}

// List indicates an expected call of List
func (mr *MockVirtualGatewaySetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualGatewaySet)(nil).List), filterResource...)
}

// UnsortedList mocks base method
func (m *MockVirtualGatewaySet) UnsortedList(filterResource ...func(*v2.VirtualGateway) bool) []*v2.VirtualGateway {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v2.VirtualGateway)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList
func (mr *MockVirtualGatewaySetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockVirtualGatewaySet)(nil).UnsortedList), filterResource...)
}

// Map mocks base method
func (m *MockVirtualGatewaySet) Map() map[string]*v2.VirtualGateway {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v2.VirtualGateway)
	return ret0
}

// Map indicates an expected call of Map
func (mr *MockVirtualGatewaySetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Map))
}

// Insert mocks base method
func (m *MockVirtualGatewaySet) Insert(virtualGateway ...*v2.VirtualGateway) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range virtualGateway {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert
func (mr *MockVirtualGatewaySetMockRecorder) Insert(virtualGateway ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Insert), virtualGateway...)
}

// Equal mocks base method
func (m *MockVirtualGatewaySet) Equal(virtualGatewaySet v2sets.VirtualGatewaySet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", virtualGatewaySet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockVirtualGatewaySetMockRecorder) Equal(virtualGatewaySet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Equal), virtualGatewaySet)
}

// Has mocks base method
func (m *MockVirtualGatewaySet) Has(virtualGateway ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", virtualGateway)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockVirtualGatewaySetMockRecorder) Has(virtualGateway interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Has), virtualGateway)
}

// Delete mocks base method
func (m *MockVirtualGatewaySet) Delete(virtualGateway ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", virtualGateway)
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualGatewaySetMockRecorder) Delete(virtualGateway interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Delete), virtualGateway)
}

// Union mocks base method
func (m *MockVirtualGatewaySet) Union(set v2sets.VirtualGatewaySet) v2sets.VirtualGatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v2sets.VirtualGatewaySet)
	return ret0
}

// Union indicates an expected call of Union
func (mr *MockVirtualGatewaySetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Union), set)
}

// Difference mocks base method
func (m *MockVirtualGatewaySet) Difference(set v2sets.VirtualGatewaySet) v2sets.VirtualGatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v2sets.VirtualGatewaySet)
	return ret0
}

// Difference indicates an expected call of Difference
func (mr *MockVirtualGatewaySetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Difference), set)
}

// Intersection mocks base method
func (m *MockVirtualGatewaySet) Intersection(set v2sets.VirtualGatewaySet) v2sets.VirtualGatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v2sets.VirtualGatewaySet)
	return ret0
}

// Intersection indicates an expected call of Intersection
func (mr *MockVirtualGatewaySetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Intersection), set)
}

// Find mocks base method
func (m *MockVirtualGatewaySet) Find(id ezkube.ResourceId) (*v2.VirtualGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v2.VirtualGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockVirtualGatewaySetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Find), id)
}

// Length mocks base method
func (m *MockVirtualGatewaySet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length
func (mr *MockVirtualGatewaySetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Length))
}

// Generic mocks base method
func (m *MockVirtualGatewaySet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockVirtualGatewaySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Generic))
}

// Delta mocks base method
func (m *MockVirtualGatewaySet) Delta(newSet v2sets.VirtualGatewaySet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta
func (mr *MockVirtualGatewaySetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Delta), newSet)
}

// Clone mocks base method
func (m *MockVirtualGatewaySet) Clone() v2sets.VirtualGatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v2sets.VirtualGatewaySet)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockVirtualGatewaySetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Clone))
}
