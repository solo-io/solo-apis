// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/networking/v2/cloud_resources.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/pkg/api/common.gloo.solo.io/v2"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *CloudResourcesSpec) Clone() proto.Message {
	var target *CloudResourcesSpec
	if m == nil {
		return target
	}
	target = &CloudResourcesSpec{}

	target.Provider = m.GetProvider()

	if m.GetLambda() != nil {
		target.Lambda = make([]*LambdaSpec, len(m.GetLambda()))
		for idx, v := range m.GetLambda() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Lambda[idx] = h.Clone().(*LambdaSpec)
			} else {
				target.Lambda[idx] = proto.Clone(v).(*LambdaSpec)
			}

		}
	}

	return target
}

// Clone function
func (m *LambdaSpec) Clone() proto.Message {
	var target *LambdaSpec
	if m == nil {
		return target
	}
	target = &LambdaSpec{}

	target.LogicalName = m.GetLogicalName()

	target.LambdaFunctionName = m.GetLambdaFunctionName()

	target.Qualifier = m.GetQualifier()

	return target
}

// Clone function
func (m *CloudResourcesStatus) Clone() proto.Message {
	var target *CloudResourcesStatus
	if m == nil {
		return target
	}
	target = &CloudResourcesStatus{}

	if h, ok := interface{}(m.GetGlobal()).(clone.Cloner); ok {
		target.Global = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.GenericGlobalStatus)
	} else {
		target.Global = proto.Clone(m.GetGlobal()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.GenericGlobalStatus)
	}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus)
			}

		}
	}

	return target
}

// Clone function
func (m *CloudResourcesNewStatus) Clone() proto.Message {
	var target *CloudResourcesNewStatus
	if m == nil {
		return target
	}
	target = &CloudResourcesNewStatus{}

	if h, ok := interface{}(m.GetCommon()).(clone.Cloner); ok {
		target.Common = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.Status)
	} else {
		target.Common = proto.Clone(m.GetCommon()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.Status)
	}

	return target
}

// Clone function
func (m *CloudResourcesReport) Clone() proto.Message {
	var target *CloudResourcesReport
	if m == nil {
		return target
	}
	target = &CloudResourcesReport{}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.Report, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.Report)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.Report)
			}

		}
	}

	return target
}
