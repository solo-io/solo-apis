// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/networking/v2/route_table.proto

package v2

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v2 "github.com/solo-io/solo-apis/pkg/api/common.gloo.solo.io/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RedirectAction_RedirectResponseCode int32

const (
	// Moved Permanently HTTP Status Code - 301.
	RedirectAction_MOVED_PERMANENTLY RedirectAction_RedirectResponseCode = 0
	// Found HTTP Status Code - 302.
	RedirectAction_FOUND RedirectAction_RedirectResponseCode = 1
	// See Other HTTP Status Code - 303.
	RedirectAction_SEE_OTHER RedirectAction_RedirectResponseCode = 2
	// Temporary Redirect HTTP Status Code - 307.
	RedirectAction_TEMPORARY_REDIRECT RedirectAction_RedirectResponseCode = 3
	// Permanent Redirect HTTP Status Code - 308.
	RedirectAction_PERMANENT_REDIRECT RedirectAction_RedirectResponseCode = 4
)

// Enum value maps for RedirectAction_RedirectResponseCode.
var (
	RedirectAction_RedirectResponseCode_name = map[int32]string{
		0: "MOVED_PERMANENTLY",
		1: "FOUND",
		2: "SEE_OTHER",
		3: "TEMPORARY_REDIRECT",
		4: "PERMANENT_REDIRECT",
	}
	RedirectAction_RedirectResponseCode_value = map[string]int32{
		"MOVED_PERMANENTLY":  0,
		"FOUND":              1,
		"SEE_OTHER":          2,
		"TEMPORARY_REDIRECT": 3,
		"PERMANENT_REDIRECT": 4,
	}
)

func (x RedirectAction_RedirectResponseCode) Enum() *RedirectAction_RedirectResponseCode {
	p := new(RedirectAction_RedirectResponseCode)
	*p = x
	return p
}

func (x RedirectAction_RedirectResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedirectAction_RedirectResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_enumTypes[0].Descriptor()
}

func (RedirectAction_RedirectResponseCode) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_enumTypes[0]
}

func (x RedirectAction_RedirectResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedirectAction_RedirectResponseCode.Descriptor instead.
func (RedirectAction_RedirectResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_rawDescGZIP(), []int{3, 0}
}

type DelegateAction_SortMethod int32

const (
	// Routes are kept in the order that they appear relative to their tables, but tables are sorted by weight.
	// Tables that have the same weight will stay in the same order that they are listed in, which is the list
	// order when given as a reference and by creation timestamp when selected.
	DelegateAction_TABLE_WEIGHT DelegateAction_SortMethod = 0
	// After processing all routes, including additional route tables delegated to, the resulting routes are sorted
	// by specificity to reduce the chance that a more specific route will be short-circuited by a general route.
	// Matchers with exact path matchers are considered more specific than regex path patchers, which are more
	// specific than prefix path matchers. Matchers of the same type are sorted by length of the path in descending
	// order. Only the most specific matcher on each route is used.
	DelegateAction_ROUTE_SPECIFICITY DelegateAction_SortMethod = 1
)

// Enum value maps for DelegateAction_SortMethod.
var (
	DelegateAction_SortMethod_name = map[int32]string{
		0: "TABLE_WEIGHT",
		1: "ROUTE_SPECIFICITY",
	}
	DelegateAction_SortMethod_value = map[string]int32{
		"TABLE_WEIGHT":      0,
		"ROUTE_SPECIFICITY": 1,
	}
)

func (x DelegateAction_SortMethod) Enum() *DelegateAction_SortMethod {
	p := new(DelegateAction_SortMethod)
	*p = x
	return p
}

func (x DelegateAction_SortMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DelegateAction_SortMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_enumTypes[1].Descriptor()
}

func (DelegateAction_SortMethod) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_enumTypes[1]
}

func (x DelegateAction_SortMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DelegateAction_SortMethod.Descriptor instead.
func (DelegateAction_SortMethod) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_rawDescGZIP(), []int{5, 0}
}

// `RouteTables` defines one or more hosts and a set of traffic route rules to handle traffic for these hosts.
// The traffic route rules can be delegated to other RouteTable based on one or more given hosts or specific paths.
//
// You may deploy a RouteTable resource in any namespace within your workspace. In order for the RouteTable to be used
// outside of your workspace, you must deploy the RouteTable resource in the root config of your workspace and label it
// with `workspace.solo.io/exported: "true"`. If your RouteTable delegates some traffic rules to another RouteTable,
// the delegated RouteTable may reside in the same workspace or different workspace from your RouteTable. If they are
// in different workspaces, the delegated RouteTable must reside in the root config of their
// workspaces and labelled with `workspace.solo.io/exported: "true"`.
//
// RouteTable can be used to match traffic originating from a gateway as well as from sidecars within the mesh,
// depends on the configuration of the `virtualGateways` field.
//
// The following example defines route configuration for the 'uk.bookinfo.com' and 'eu.bookinfo.com' hosts,
// when traffic arriving at the `my-gateway` virtual gateway which is declared in the `my-gateway-ws` workspace.
// When the cookie in the header matches to 'user=dev-123', traffic is forwarded to the port 7777 of the
// `v1` of `reviews.qa`. When the path matches exactly to `/reviews/`, 80% traffic is forwarded to the port 9080
// of `reviews.prod` and 20% traffic is forwarded to the port 9080 of `reviews.qa`. All other traffic is sent
// to the default destination, which is the port 9080 of `reviews.prod` service in the `bookinfo` workspace.
// apiVersion: networking.gloo.solo.io/v2
// kind: RouteTable
// metadata:
//   name: bookinfo-root-routes
//   namespace: bookinfo
// spec:
//   hosts:
//     - 'uk.bookinfo.com'
//     - 'eu.bookinfo.com'
//   virtualGateways:
//     - name: my-gateway
//       namespace: my-gateway-ws
//   defaultDestination:
//     ref:
//       name: reviews
//       namespace: prod
//     port:
//       number: 9080
//   http:
//     - name: reviews-qa
//       matchers:
//         - headers:
//             - name: cookie
//               value: 'user=dev-123'
//       forwardTo:
//         destinations:
//           - ref:
//               name: reviews
//               namespace: qa
//             subset:
//               version: v1
//             port:
//               number: 7777
//     - name: reviews
//       matchers:
//         - name: review-prefix
//           uri:
//             exact: /reviews/
//       forwardTo:
//         destinations:
//           - weight: 80
//           - ref:
//               name: reviews
//               namespace: qa
//             port:
//               number: 9080
//             weight: 20
type RouteTableSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional: One or more hosts for which this route table will route traffic.
	// Supports wildcards. To avoid potential misconfigurations, it is recommended to always use fully
	// qualified domain names over short names.
	// *Note*: It must be empty for a delegated RouteTable.
	Hosts []string `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// Optional: A list of references to the virtual gateways which should serve this route table.
	// Only valid for route tables which define at least one host.
	// *Note*: Ignored on delegated (non-root) route tables.
	//
	// When not specified, the route table applies to either all the sidecars in the workspace
	// or only sidecars for selected workloads (via the `workloadSelectors` field) in the workspace where
	// the route table is deployed or imported.
	// The following applies to sidecars of all the workloads for the workspace where the route table is
	// deployed or imported.
	//
	// virtualGateways: null
	// workloadSelectors: []
	//
	// The following applies to the `my-gateway` virtual gateway in the `gateway` workspace and
	// no sidecars.
	//
	// virtualGateways:
	//   - name: my-gateway
	//     namespace: gateway
	// workloadSelectors: []
	//
	// The following applies to the `my-gateway` virtual gateway in the `gateway` workspace and
	// sidecars of all the workloads for the workspace where the route table is
	// deployed or imported.
	//
	// virtualGateways:
	//   - name: my-gateway
	//     namespace: gateway
	// workloadSelectors:
	//   - selector: {}
	//
	// The following applies to sidecars of all the `app: foo` workloads for the workspace where the route table
	// is deployed or imported.
	//
	// virtualGateways: null
	// workloadSelectors:
	//   - selector:
	//       labels:
	//         app: foo
	//
	// The following applies to the `my-gateway` virtual gateway in the `gateway` workspace and
	// sidecars of all the `app: foo` workloads for the workspace where the route table is deployed or imported.
	//
	// virtualGateways:
	//   - name: my-gateway
	//     namespace: gateway
	// workloadSelectors:
	//   - selector:
	//       labels:
	//         app: foo
	//
	// *Note*: This field must be empty for a delegated RouteTable.
	VirtualGateways []*v2.ObjectReference `protobuf:"bytes,5,rep,name=virtual_gateways,json=virtualGateways,proto3" json:"virtual_gateways,omitempty"`
	// Optional: Selectors for source workloads (with sidecars) which will route traffic by this route table.
	// Only valid for route tables which define at least one host.
	// If no workloadSelectors or virtualGateways are specified, all workloads in the workspace will automatically be selected.
	// If VirtualGateways are specified, set `workloadSelectors: - {}` to select all workloads in the workspace.
	// *Note*: This field must be empty for a delegated RouteTable.
	// *Note*: Selection of external workloads (VMs) is currently not supported.
	WorkloadSelectors []*v2.WorkloadSelector `protobuf:"bytes,6,rep,name=workload_selectors,json=workloadSelectors,proto3" json:"workload_selectors,omitempty"`
	// Optional: Routes that do not specify a destination will forward traffic to this destination.
	DefaultDestination *v2.DestinationReference `protobuf:"bytes,2,opt,name=default_destination,json=defaultDestination,proto3" json:"default_destination,omitempty"`
	// The set of HTTP routes this route table will serve. If no routes are matched in the route table, the client will get a 404.
	Http []*HTTPRoute `protobuf:"bytes,3,rep,name=http,proto3" json:"http,omitempty"`
	// Weight is used when sorting route tables in delegate action or routes when sorted by specificity.
	// Higher integer values are considered higher priority. The default value is 0.
	Weight int32 `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *RouteTableSpec) Reset() {
	*x = RouteTableSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteTableSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteTableSpec) ProtoMessage() {}

func (x *RouteTableSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteTableSpec.ProtoReflect.Descriptor instead.
func (*RouteTableSpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_rawDescGZIP(), []int{0}
}

func (x *RouteTableSpec) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *RouteTableSpec) GetVirtualGateways() []*v2.ObjectReference {
	if x != nil {
		return x.VirtualGateways
	}
	return nil
}

func (x *RouteTableSpec) GetWorkloadSelectors() []*v2.WorkloadSelector {
	if x != nil {
		return x.WorkloadSelectors
	}
	return nil
}

func (x *RouteTableSpec) GetDefaultDestination() *v2.DestinationReference {
	if x != nil {
		return x.DefaultDestination
	}
	return nil
}

func (x *RouteTableSpec) GetHttp() []*HTTPRoute {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *RouteTableSpec) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// an HTTP route pairs a set of HTTP Request Matchers with an action to take when a request is matched. HTTP Routes can be named and labeled for the purpose of metrics and applying policies.
type HTTPRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique name of the route (within the route table). used to identify the route for metrics
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// labels for the route. used to apply policies which implement routeSelectors.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// the set of request matchers which this route will match on. if none are specified, this route will match any HTTP traffic.
	Matchers []*v2.HTTPRequestMatcher `protobuf:"bytes,3,rep,name=matchers,proto3" json:"matchers,omitempty"`
	// the type of action determines what this route will with a request when it is matched.
	//
	// Types that are assignable to ActionType:
	//	*HTTPRoute_ForwardTo
	//	*HTTPRoute_Delegate
	//	*HTTPRoute_Redirect
	//	*HTTPRoute_DirectResponse
	ActionType isHTTPRoute_ActionType `protobuf_oneof:"action_type"`
}

func (x *HTTPRoute) Reset() {
	*x = HTTPRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRoute) ProtoMessage() {}

func (x *HTTPRoute) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRoute.ProtoReflect.Descriptor instead.
func (*HTTPRoute) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_rawDescGZIP(), []int{1}
}

func (x *HTTPRoute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HTTPRoute) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *HTTPRoute) GetMatchers() []*v2.HTTPRequestMatcher {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (m *HTTPRoute) GetActionType() isHTTPRoute_ActionType {
	if m != nil {
		return m.ActionType
	}
	return nil
}

func (x *HTTPRoute) GetForwardTo() *ForwardToAction {
	if x, ok := x.GetActionType().(*HTTPRoute_ForwardTo); ok {
		return x.ForwardTo
	}
	return nil
}

func (x *HTTPRoute) GetDelegate() *DelegateAction {
	if x, ok := x.GetActionType().(*HTTPRoute_Delegate); ok {
		return x.Delegate
	}
	return nil
}

func (x *HTTPRoute) GetRedirect() *RedirectAction {
	if x, ok := x.GetActionType().(*HTTPRoute_Redirect); ok {
		return x.Redirect
	}
	return nil
}

func (x *HTTPRoute) GetDirectResponse() *DirectResponseAction {
	if x, ok := x.GetActionType().(*HTTPRoute_DirectResponse); ok {
		return x.DirectResponse
	}
	return nil
}

type isHTTPRoute_ActionType interface {
	isHTTPRoute_ActionType()
}

type HTTPRoute_ForwardTo struct {
	// forward traffic to one or more destination services.
	ForwardTo *ForwardToAction `protobuf:"bytes,4,opt,name=forward_to,json=forwardTo,proto3,oneof"`
}

type HTTPRoute_Delegate struct {
	// delegate the handling of traffic to one or more HTTP Route Tables. This can be used to
	// delegate a subset of the route table's traffic to another route table, which may live
	// in an imported workspace, or to separate routing concerns between objects.
	Delegate *DelegateAction `protobuf:"bytes,5,opt,name=delegate,proto3,oneof"`
}

type HTTPRoute_Redirect struct {
	// return a redirect response to the downstream client.
	Redirect *RedirectAction `protobuf:"bytes,6,opt,name=redirect,proto3,oneof"`
}

type HTTPRoute_DirectResponse struct {
	// respond directly to the client from the proxy.
	DirectResponse *DirectResponseAction `protobuf:"bytes,7,opt,name=direct_response,json=directResponse,proto3,oneof"`
}

func (*HTTPRoute_ForwardTo) isHTTPRoute_ActionType() {}

func (*HTTPRoute_Delegate) isHTTPRoute_ActionType() {}

func (*HTTPRoute_Redirect) isHTTPRoute_ActionType() {}

func (*HTTPRoute_DirectResponse) isHTTPRoute_ActionType() {}

// when a route is matched, forward the request to the destinations specified in this action
type ForwardToAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines the destination upstream for routing
	// Some destinations require additional configuration for the route (e.g. AWS upstreams require a function name
	// to be specified).
	Destinations []*v2.DestinationReference `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty"`
	// Replace the path specified in the matcher with this value before passing upstream.
	// When a prefix matcher is used, only the prefix portion of the path is rewritten.
	// When an exact matcher is used, the whole path is replaced.
	// Rewriting the path when a regex matcher is used is currently unsupported.
	PathRewrite string `protobuf:"bytes,2,opt,name=path_rewrite,json=pathRewrite,proto3" json:"path_rewrite,omitempty"`
}

func (x *ForwardToAction) Reset() {
	*x = ForwardToAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardToAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardToAction) ProtoMessage() {}

func (x *ForwardToAction) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardToAction.ProtoReflect.Descriptor instead.
func (*ForwardToAction) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_rawDescGZIP(), []int{2}
}

func (x *ForwardToAction) GetDestinations() []*v2.DestinationReference {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *ForwardToAction) GetPathRewrite() string {
	if x != nil {
		return x.PathRewrite
	}
	return ""
}

// Note: This message needs to be at this level (rather than nested) due to cue restrictions.
// Notice: RedirectAction is copied directly from https://github.com/solo-io/solo-apis/api/gloo-mesh/external/envoyproxy/envoy/blob/master/api/envoy/api/v2/route/route.proto
type RedirectAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host portion of the URL will be swapped with this value.
	HostRedirect string `protobuf:"bytes,1,opt,name=host_redirect,json=hostRedirect,proto3" json:"host_redirect,omitempty"`
	// Defines whether and how the path portion of the URL will be modified.
	//
	// Types that are assignable to PathRewriteSpecifier:
	//	*RedirectAction_PathRedirect
	PathRewriteSpecifier isRedirectAction_PathRewriteSpecifier `protobuf_oneof:"path_rewrite_specifier"`
	// The HTTP status code to use in the redirect response. The default response
	// code is MOVED_PERMANENTLY (301).
	ResponseCode RedirectAction_RedirectResponseCode `protobuf:"varint,4,opt,name=response_code,json=responseCode,proto3,enum=networking.gloo.solo.io.RedirectAction_RedirectResponseCode" json:"response_code,omitempty"`
}

func (x *RedirectAction) Reset() {
	*x = RedirectAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirectAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectAction) ProtoMessage() {}

func (x *RedirectAction) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectAction.ProtoReflect.Descriptor instead.
func (*RedirectAction) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_rawDescGZIP(), []int{3}
}

func (x *RedirectAction) GetHostRedirect() string {
	if x != nil {
		return x.HostRedirect
	}
	return ""
}

func (m *RedirectAction) GetPathRewriteSpecifier() isRedirectAction_PathRewriteSpecifier {
	if m != nil {
		return m.PathRewriteSpecifier
	}
	return nil
}

func (x *RedirectAction) GetPathRedirect() string {
	if x, ok := x.GetPathRewriteSpecifier().(*RedirectAction_PathRedirect); ok {
		return x.PathRedirect
	}
	return ""
}

func (x *RedirectAction) GetResponseCode() RedirectAction_RedirectResponseCode {
	if x != nil {
		return x.ResponseCode
	}
	return RedirectAction_MOVED_PERMANENTLY
}

type isRedirectAction_PathRewriteSpecifier interface {
	isRedirectAction_PathRewriteSpecifier()
}

type RedirectAction_PathRedirect struct {
	// The entire path portion of the URL will be overwritten with this value.
	PathRedirect string `protobuf:"bytes,2,opt,name=path_redirect,json=pathRedirect,proto3,oneof"`
}

func (*RedirectAction_PathRedirect) isRedirectAction_PathRewriteSpecifier() {}

// Note: This message needs to be at this level (rather than nested) due to cue restrictions.
// DirectResponseAction is copied directly from https://github.com/solo-io/solo-apis/api/gloo-mesh/external/envoyproxy/envoy/blob/master/api/envoy/api/v2/route/route.proto
type DirectResponseAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the HTTP response status to be returned.
	Status uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Specifies the content of the response body. If this setting is omitted,
	// no body is included in the generated response.
	//
	// Note: Headers can be specified using the Header Modification feature in the enclosing
	// Route, ConnectionHandler, or Gateway options.
	Body string `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *DirectResponseAction) Reset() {
	*x = DirectResponseAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectResponseAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectResponseAction) ProtoMessage() {}

func (x *DirectResponseAction) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectResponseAction.ProtoReflect.Descriptor instead.
func (*DirectResponseAction) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_rawDescGZIP(), []int{4}
}

func (x *DirectResponseAction) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DirectResponseAction) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

// Note: This message needs to be at this level (rather than nested) due to cue restrictions.
// DelegateActions are used to delegate routing decisions to other resources, for example RouteTables.
type DelegateAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Delegate to the RouteTables that match the given selectors.
	// Selected route tables are ordered by creation time stamp in ascending order to guarantee consistent ordering.
	// Route tables will be selected from the pool of route tables defined within the current workspace, as well as any imported into the workspace.
	RouteTables []*v2.ObjectSelector `protobuf:"bytes,2,rep,name=route_tables,json=routeTables,proto3" json:"route_tables,omitempty"`
	// How routes should be sorted
	SortMethod DelegateAction_SortMethod `protobuf:"varint,3,opt,name=sort_method,json=sortMethod,proto3,enum=networking.gloo.solo.io.DelegateAction_SortMethod" json:"sort_method,omitempty"`
}

func (x *DelegateAction) Reset() {
	*x = DelegateAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegateAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegateAction) ProtoMessage() {}

func (x *DelegateAction) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegateAction.ProtoReflect.Descriptor instead.
func (*DelegateAction) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_rawDescGZIP(), []int{5}
}

func (x *DelegateAction) GetRouteTables() []*v2.ObjectSelector {
	if x != nil {
		return x.RouteTables
	}
	return nil
}

func (x *DelegateAction) GetSortMethod() DelegateAction_SortMethod {
	if x != nil {
		return x.SortMethod
	}
	return DelegateAction_TABLE_WEIGHT
}

// reflects the status of the RouteTable
type RouteTableStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Global *v2.GenericGlobalStatus `protobuf:"bytes,1,opt,name=global,proto3" json:"global,omitempty"`
	// The status of the resource in each workspace that it exists in.
	Workspaces map[string]*v2.WorkspaceStatus `protobuf:"bytes,2,rep,name=workspaces,proto3" json:"workspaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Map of policy GVK to policy references for all policies applied on this
	// resource.
	AppliedRoutePolicies map[string]*v2.AppliedRoutePolicies `protobuf:"bytes,3,rep,name=applied_route_policies,json=appliedRoutePolicies,proto3" json:"applied_route_policies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The parents of this route table, if it is a delegated route table.
	ParentRouteTables []*v2.ObjectReference `protobuf:"bytes,4,rep,name=parent_route_tables,json=parentRouteTables,proto3" json:"parent_route_tables,omitempty"`
	// Name of Workspace that owns the route table
	OwnerWorkspace *v2.OwnerWorkspace `protobuf:"bytes,5,opt,name=owner_workspace,json=ownerWorkspace,proto3" json:"owner_workspace,omitempty"`
	// list of allowed VirtualGateways this RouteTable can select
	AllowedVirtualGateways []*v2.ObjectReference `protobuf:"bytes,6,rep,name=allowed_virtual_gateways,json=allowedVirtualGateways,proto3" json:"allowed_virtual_gateways,omitempty"`
}

func (x *RouteTableStatus) Reset() {
	*x = RouteTableStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteTableStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteTableStatus) ProtoMessage() {}

func (x *RouteTableStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteTableStatus.ProtoReflect.Descriptor instead.
func (*RouteTableStatus) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_rawDescGZIP(), []int{6}
}

func (x *RouteTableStatus) GetGlobal() *v2.GenericGlobalStatus {
	if x != nil {
		return x.Global
	}
	return nil
}

func (x *RouteTableStatus) GetWorkspaces() map[string]*v2.WorkspaceStatus {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

func (x *RouteTableStatus) GetAppliedRoutePolicies() map[string]*v2.AppliedRoutePolicies {
	if x != nil {
		return x.AppliedRoutePolicies
	}
	return nil
}

func (x *RouteTableStatus) GetParentRouteTables() []*v2.ObjectReference {
	if x != nil {
		return x.ParentRouteTables
	}
	return nil
}

func (x *RouteTableStatus) GetOwnerWorkspace() *v2.OwnerWorkspace {
	if x != nil {
		return x.OwnerWorkspace
	}
	return nil
}

func (x *RouteTableStatus) GetAllowedVirtualGateways() []*v2.ObjectReference {
	if x != nil {
		return x.AllowedVirtualGateways
	}
	return nil
}

var File_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto protoreflect.FileDescriptor

var file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_rawDesc = []byte{
	0x0a, 0x57, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x1a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f,
	0x6c, 0x6f, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6c, 0x6f, 0x6f,
	0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f,
	0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x65, 0x78,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf9, 0x02, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0x54, 0x0a, 0x12, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x11, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x5a, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x04,
	0x68, 0x74, 0x74, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x04,
	0x68, 0x74, 0x74, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xa9, 0x04, 0x0a,
	0x09, 0x48, 0x54, 0x54, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x12, 0x45, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a,
	0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x12, 0x58, 0x0a, 0x0f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x0f, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0c,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x22, 0xd2,
	0x02, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0c, 0x70, 0x61, 0x74, 0x68, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x61, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x77, 0x0a, 0x14, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x56, 0x45,
	0x44, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x41, 0x4e, 0x45, 0x4e, 0x54, 0x4c, 0x59, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45,
	0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x4d,
	0x50, 0x4f, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x45, 0x52, 0x4d, 0x41, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x52,
	0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x04, 0x42, 0x18, 0x0a, 0x16, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x22, 0x42, 0x0a, 0x14, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xe4, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x53, 0x0a, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0a, 0x73, 0x6f, 0x72,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x35, 0x0a, 0x0a, 0x53, 0x6f, 0x72, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x57,
	0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x49, 0x54, 0x59, 0x10, 0x01, 0x22, 0x87,
	0x06, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x59, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x79, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x13, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x5e, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x1a,
	0x63, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x72, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x4d, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73,
	0x6f, 0x6c, 0x6f, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x32, 0xc0, 0xf5, 0x04, 0x01, 0xb8,
	0xf5, 0x04, 0x01, 0xd0, 0xf5, 0x04, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_rawDescOnce sync.Once
	file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_rawDescData = file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_rawDesc
)

func file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_rawDescData)
	})
	return file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_rawDescData
}

var file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_goTypes = []interface{}{
	(RedirectAction_RedirectResponseCode)(0), // 0: networking.gloo.solo.io.RedirectAction.RedirectResponseCode
	(DelegateAction_SortMethod)(0),           // 1: networking.gloo.solo.io.DelegateAction.SortMethod
	(*RouteTableSpec)(nil),                   // 2: networking.gloo.solo.io.RouteTableSpec
	(*HTTPRoute)(nil),                        // 3: networking.gloo.solo.io.HTTPRoute
	(*ForwardToAction)(nil),                  // 4: networking.gloo.solo.io.ForwardToAction
	(*RedirectAction)(nil),                   // 5: networking.gloo.solo.io.RedirectAction
	(*DirectResponseAction)(nil),             // 6: networking.gloo.solo.io.DirectResponseAction
	(*DelegateAction)(nil),                   // 7: networking.gloo.solo.io.DelegateAction
	(*RouteTableStatus)(nil),                 // 8: networking.gloo.solo.io.RouteTableStatus
	nil,                                      // 9: networking.gloo.solo.io.HTTPRoute.LabelsEntry
	nil,                                      // 10: networking.gloo.solo.io.RouteTableStatus.WorkspacesEntry
	nil,                                      // 11: networking.gloo.solo.io.RouteTableStatus.AppliedRoutePoliciesEntry
	(*v2.ObjectReference)(nil),               // 12: common.gloo.solo.io.ObjectReference
	(*v2.WorkloadSelector)(nil),              // 13: common.gloo.solo.io.WorkloadSelector
	(*v2.DestinationReference)(nil),          // 14: common.gloo.solo.io.DestinationReference
	(*v2.HTTPRequestMatcher)(nil),            // 15: common.gloo.solo.io.HTTPRequestMatcher
	(*v2.ObjectSelector)(nil),                // 16: common.gloo.solo.io.ObjectSelector
	(*v2.GenericGlobalStatus)(nil),           // 17: common.gloo.solo.io.GenericGlobalStatus
	(*v2.OwnerWorkspace)(nil),                // 18: common.gloo.solo.io.OwnerWorkspace
	(*v2.WorkspaceStatus)(nil),               // 19: common.gloo.solo.io.WorkspaceStatus
	(*v2.AppliedRoutePolicies)(nil),          // 20: common.gloo.solo.io.AppliedRoutePolicies
}
var file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_depIdxs = []int32{
	12, // 0: networking.gloo.solo.io.RouteTableSpec.virtual_gateways:type_name -> common.gloo.solo.io.ObjectReference
	13, // 1: networking.gloo.solo.io.RouteTableSpec.workload_selectors:type_name -> common.gloo.solo.io.WorkloadSelector
	14, // 2: networking.gloo.solo.io.RouteTableSpec.default_destination:type_name -> common.gloo.solo.io.DestinationReference
	3,  // 3: networking.gloo.solo.io.RouteTableSpec.http:type_name -> networking.gloo.solo.io.HTTPRoute
	9,  // 4: networking.gloo.solo.io.HTTPRoute.labels:type_name -> networking.gloo.solo.io.HTTPRoute.LabelsEntry
	15, // 5: networking.gloo.solo.io.HTTPRoute.matchers:type_name -> common.gloo.solo.io.HTTPRequestMatcher
	4,  // 6: networking.gloo.solo.io.HTTPRoute.forward_to:type_name -> networking.gloo.solo.io.ForwardToAction
	7,  // 7: networking.gloo.solo.io.HTTPRoute.delegate:type_name -> networking.gloo.solo.io.DelegateAction
	5,  // 8: networking.gloo.solo.io.HTTPRoute.redirect:type_name -> networking.gloo.solo.io.RedirectAction
	6,  // 9: networking.gloo.solo.io.HTTPRoute.direct_response:type_name -> networking.gloo.solo.io.DirectResponseAction
	14, // 10: networking.gloo.solo.io.ForwardToAction.destinations:type_name -> common.gloo.solo.io.DestinationReference
	0,  // 11: networking.gloo.solo.io.RedirectAction.response_code:type_name -> networking.gloo.solo.io.RedirectAction.RedirectResponseCode
	16, // 12: networking.gloo.solo.io.DelegateAction.route_tables:type_name -> common.gloo.solo.io.ObjectSelector
	1,  // 13: networking.gloo.solo.io.DelegateAction.sort_method:type_name -> networking.gloo.solo.io.DelegateAction.SortMethod
	17, // 14: networking.gloo.solo.io.RouteTableStatus.global:type_name -> common.gloo.solo.io.GenericGlobalStatus
	10, // 15: networking.gloo.solo.io.RouteTableStatus.workspaces:type_name -> networking.gloo.solo.io.RouteTableStatus.WorkspacesEntry
	11, // 16: networking.gloo.solo.io.RouteTableStatus.applied_route_policies:type_name -> networking.gloo.solo.io.RouteTableStatus.AppliedRoutePoliciesEntry
	12, // 17: networking.gloo.solo.io.RouteTableStatus.parent_route_tables:type_name -> common.gloo.solo.io.ObjectReference
	18, // 18: networking.gloo.solo.io.RouteTableStatus.owner_workspace:type_name -> common.gloo.solo.io.OwnerWorkspace
	12, // 19: networking.gloo.solo.io.RouteTableStatus.allowed_virtual_gateways:type_name -> common.gloo.solo.io.ObjectReference
	19, // 20: networking.gloo.solo.io.RouteTableStatus.WorkspacesEntry.value:type_name -> common.gloo.solo.io.WorkspaceStatus
	20, // 21: networking.gloo.solo.io.RouteTableStatus.AppliedRoutePoliciesEntry.value:type_name -> common.gloo.solo.io.AppliedRoutePolicies
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_init()
}
func file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_init() {
	if File_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteTableSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardToAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirectAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectResponseAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegateAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteTableStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*HTTPRoute_ForwardTo)(nil),
		(*HTTPRoute_Delegate)(nil),
		(*HTTPRoute_Redirect)(nil),
		(*HTTPRoute_DirectResponse)(nil),
	}
	file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*RedirectAction_PathRedirect)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto = out.File
	file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_rawDesc = nil
	file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_goTypes = nil
	file_github_com_solo_io_solo_apis_api_gloo_mesh_gloo_solo_io_networking_v2_route_table_proto_depIdxs = nil
}
