// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo-mesh/gloo.solo.io/networking/v2/virtual_destination.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2 "github.com/solo-io/solo-apis/pkg/api/common.gloo.solo.io/v2"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *VirtualDestinationSpec) Clone() proto.Message {
	var target *VirtualDestinationSpec
	if m == nil {
		return target
	}
	target = &VirtualDestinationSpec{}

	if m.GetHosts() != nil {
		target.Hosts = make([]string, len(m.GetHosts()))
		for idx, v := range m.GetHosts() {

			target.Hosts[idx] = v

		}
	}

	if m.GetServices() != nil {
		target.Services = make([]*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.ObjectSelector, len(m.GetServices()))
		for idx, v := range m.GetServices() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Services[idx] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.ObjectSelector)
			} else {
				target.Services[idx] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.ObjectSelector)
			}

		}
	}

	if m.GetExternalServices() != nil {
		target.ExternalServices = make([]*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.ObjectSelector, len(m.GetExternalServices()))
		for idx, v := range m.GetExternalServices() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ExternalServices[idx] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.ObjectSelector)
			} else {
				target.ExternalServices[idx] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.ObjectSelector)
			}

		}
	}

	if m.GetPorts() != nil {
		target.Ports = make([]*VirtualDestinationSpec_PortMapping, len(m.GetPorts()))
		for idx, v := range m.GetPorts() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Ports[idx] = h.Clone().(*VirtualDestinationSpec_PortMapping)
			} else {
				target.Ports[idx] = proto.Clone(v).(*VirtualDestinationSpec_PortMapping)
			}

		}
	}

	return target
}

// Clone function
func (m *VirtualDestinationStatus) Clone() proto.Message {
	var target *VirtualDestinationStatus
	if m == nil {
		return target
	}
	target = &VirtualDestinationStatus{}

	if h, ok := interface{}(m.GetGlobal()).(clone.Cloner); ok {
		target.Global = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.GenericGlobalStatus)
	} else {
		target.Global = proto.Clone(m.GetGlobal()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.GenericGlobalStatus)
	}

	if m.GetWorkspaces() != nil {
		target.Workspaces = make(map[string]*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus, len(m.GetWorkspaces()))
		for k, v := range m.GetWorkspaces() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Workspaces[k] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus)
			} else {
				target.Workspaces[k] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.WorkspaceStatus)
			}

		}
	}

	if m.GetAppliedDestinationPolicies() != nil {
		target.AppliedDestinationPolicies = make(map[string]*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.AppliedDestinationPortPolicies, len(m.GetAppliedDestinationPolicies()))
		for k, v := range m.GetAppliedDestinationPolicies() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.AppliedDestinationPolicies[k] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.AppliedDestinationPortPolicies)
			} else {
				target.AppliedDestinationPolicies[k] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.AppliedDestinationPortPolicies)
			}

		}
	}

	if m.GetSelectedBackingServices() != nil {
		target.SelectedBackingServices = make([]*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.DestinationReference, len(m.GetSelectedBackingServices()))
		for idx, v := range m.GetSelectedBackingServices() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SelectedBackingServices[idx] = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.DestinationReference)
			} else {
				target.SelectedBackingServices[idx] = proto.Clone(v).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.DestinationReference)
			}

		}
	}

	if h, ok := interface{}(m.GetOwnerWorkspace()).(clone.Cloner); ok {
		target.OwnerWorkspace = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.OwnerWorkspace)
	} else {
		target.OwnerWorkspace = proto.Clone(m.GetOwnerWorkspace()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.OwnerWorkspace)
	}

	return target
}

// Clone function
func (m *VirtualDestinationSpec_PortMapping) Clone() proto.Message {
	var target *VirtualDestinationSpec_PortMapping
	if m == nil {
		return target
	}
	target = &VirtualDestinationSpec_PortMapping{}

	target.Number = m.GetNumber()

	target.Protocol = m.GetProtocol()

	if h, ok := interface{}(m.GetTargetPort()).(clone.Cloner); ok {
		target.TargetPort = h.Clone().(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.PortSelector)
	} else {
		target.TargetPort = proto.Clone(m.GetTargetPort()).(*github_com_solo_io_solo_apis_pkg_api_common_gloo_solo_io_v2.PortSelector)
	}

	return target
}
