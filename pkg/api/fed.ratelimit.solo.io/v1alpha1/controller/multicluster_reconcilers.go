// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	fed_ratelimit_solo_io_v1alpha1 "github.com/solo-io/solo-apis/pkg/api/fed.ratelimit.solo.io/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the FederatedRateLimitConfig Resource across clusters.
// implemented by the user
type MulticlusterFederatedRateLimitConfigReconciler interface {
	ReconcileFederatedRateLimitConfig(clusterName string, obj *fed_ratelimit_solo_io_v1alpha1.FederatedRateLimitConfig) (reconcile.Result, error)
}

// Reconcile deletion events for the FederatedRateLimitConfig Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterFederatedRateLimitConfigDeletionReconciler interface {
	ReconcileFederatedRateLimitConfigDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterFederatedRateLimitConfigReconcilerFuncs struct {
	OnReconcileFederatedRateLimitConfig         func(clusterName string, obj *fed_ratelimit_solo_io_v1alpha1.FederatedRateLimitConfig) (reconcile.Result, error)
	OnReconcileFederatedRateLimitConfigDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterFederatedRateLimitConfigReconcilerFuncs) ReconcileFederatedRateLimitConfig(clusterName string, obj *fed_ratelimit_solo_io_v1alpha1.FederatedRateLimitConfig) (reconcile.Result, error) {
	if f.OnReconcileFederatedRateLimitConfig == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileFederatedRateLimitConfig(clusterName, obj)
}

func (f *MulticlusterFederatedRateLimitConfigReconcilerFuncs) ReconcileFederatedRateLimitConfigDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileFederatedRateLimitConfigDeletion == nil {
		return nil
	}
	return f.OnReconcileFederatedRateLimitConfigDeletion(clusterName, req)
}

type MulticlusterFederatedRateLimitConfigReconcileLoop interface {
	// AddMulticlusterFederatedRateLimitConfigReconciler adds a MulticlusterFederatedRateLimitConfigReconciler to the MulticlusterFederatedRateLimitConfigReconcileLoop.
	AddMulticlusterFederatedRateLimitConfigReconciler(ctx context.Context, rec MulticlusterFederatedRateLimitConfigReconciler, predicates ...predicate.Predicate)
}

type multiclusterFederatedRateLimitConfigReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterFederatedRateLimitConfigReconcileLoop) AddMulticlusterFederatedRateLimitConfigReconciler(ctx context.Context, rec MulticlusterFederatedRateLimitConfigReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericFederatedRateLimitConfigMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterFederatedRateLimitConfigReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterFederatedRateLimitConfigReconcileLoop {
	return &multiclusterFederatedRateLimitConfigReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &fed_ratelimit_solo_io_v1alpha1.FederatedRateLimitConfig{}, options)}
}

type genericFederatedRateLimitConfigMulticlusterReconciler struct {
	reconciler MulticlusterFederatedRateLimitConfigReconciler
}

func (g genericFederatedRateLimitConfigMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterFederatedRateLimitConfigDeletionReconciler); ok {
		return deletionReconciler.ReconcileFederatedRateLimitConfigDeletion(cluster, req)
	}
	return nil
}

func (g genericFederatedRateLimitConfigMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*fed_ratelimit_solo_io_v1alpha1.FederatedRateLimitConfig)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: FederatedRateLimitConfig handler received event for %T", object)
	}
	return g.reconciler.ReconcileFederatedRateLimitConfig(cluster, obj)
}
