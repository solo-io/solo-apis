// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go
//
// Generated by this command:
//
//	mockgen -source ./event_handlers.go -destination mocks/event_handlers.go
//
// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/solo-io/solo-apis/pkg/api/fed.ratelimit.solo.io/v1alpha1"
	controller "github.com/solo-io/solo-apis/pkg/api/fed.ratelimit.solo.io/v1alpha1/controller"
	gomock "go.uber.org/mock/gomock"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockFederatedRateLimitConfigEventHandler is a mock of FederatedRateLimitConfigEventHandler interface.
type MockFederatedRateLimitConfigEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFederatedRateLimitConfigEventHandlerMockRecorder
}

// MockFederatedRateLimitConfigEventHandlerMockRecorder is the mock recorder for MockFederatedRateLimitConfigEventHandler.
type MockFederatedRateLimitConfigEventHandlerMockRecorder struct {
	mock *MockFederatedRateLimitConfigEventHandler
}

// NewMockFederatedRateLimitConfigEventHandler creates a new mock instance.
func NewMockFederatedRateLimitConfigEventHandler(ctrl *gomock.Controller) *MockFederatedRateLimitConfigEventHandler {
	mock := &MockFederatedRateLimitConfigEventHandler{ctrl: ctrl}
	mock.recorder = &MockFederatedRateLimitConfigEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFederatedRateLimitConfigEventHandler) EXPECT() *MockFederatedRateLimitConfigEventHandlerMockRecorder {
	return m.recorder
}

// CreateFederatedRateLimitConfig mocks base method.
func (m *MockFederatedRateLimitConfigEventHandler) CreateFederatedRateLimitConfig(obj *v1alpha1.FederatedRateLimitConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFederatedRateLimitConfig", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFederatedRateLimitConfig indicates an expected call of CreateFederatedRateLimitConfig.
func (mr *MockFederatedRateLimitConfigEventHandlerMockRecorder) CreateFederatedRateLimitConfig(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFederatedRateLimitConfig", reflect.TypeOf((*MockFederatedRateLimitConfigEventHandler)(nil).CreateFederatedRateLimitConfig), obj)
}

// DeleteFederatedRateLimitConfig mocks base method.
func (m *MockFederatedRateLimitConfigEventHandler) DeleteFederatedRateLimitConfig(obj *v1alpha1.FederatedRateLimitConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFederatedRateLimitConfig", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFederatedRateLimitConfig indicates an expected call of DeleteFederatedRateLimitConfig.
func (mr *MockFederatedRateLimitConfigEventHandlerMockRecorder) DeleteFederatedRateLimitConfig(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFederatedRateLimitConfig", reflect.TypeOf((*MockFederatedRateLimitConfigEventHandler)(nil).DeleteFederatedRateLimitConfig), obj)
}

// GenericFederatedRateLimitConfig mocks base method.
func (m *MockFederatedRateLimitConfigEventHandler) GenericFederatedRateLimitConfig(obj *v1alpha1.FederatedRateLimitConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericFederatedRateLimitConfig", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericFederatedRateLimitConfig indicates an expected call of GenericFederatedRateLimitConfig.
func (mr *MockFederatedRateLimitConfigEventHandlerMockRecorder) GenericFederatedRateLimitConfig(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericFederatedRateLimitConfig", reflect.TypeOf((*MockFederatedRateLimitConfigEventHandler)(nil).GenericFederatedRateLimitConfig), obj)
}

// UpdateFederatedRateLimitConfig mocks base method.
func (m *MockFederatedRateLimitConfigEventHandler) UpdateFederatedRateLimitConfig(old, new *v1alpha1.FederatedRateLimitConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFederatedRateLimitConfig", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFederatedRateLimitConfig indicates an expected call of UpdateFederatedRateLimitConfig.
func (mr *MockFederatedRateLimitConfigEventHandlerMockRecorder) UpdateFederatedRateLimitConfig(old, new any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFederatedRateLimitConfig", reflect.TypeOf((*MockFederatedRateLimitConfigEventHandler)(nil).UpdateFederatedRateLimitConfig), old, new)
}

// MockFederatedRateLimitConfigEventWatcher is a mock of FederatedRateLimitConfigEventWatcher interface.
type MockFederatedRateLimitConfigEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockFederatedRateLimitConfigEventWatcherMockRecorder
}

// MockFederatedRateLimitConfigEventWatcherMockRecorder is the mock recorder for MockFederatedRateLimitConfigEventWatcher.
type MockFederatedRateLimitConfigEventWatcherMockRecorder struct {
	mock *MockFederatedRateLimitConfigEventWatcher
}

// NewMockFederatedRateLimitConfigEventWatcher creates a new mock instance.
func NewMockFederatedRateLimitConfigEventWatcher(ctrl *gomock.Controller) *MockFederatedRateLimitConfigEventWatcher {
	mock := &MockFederatedRateLimitConfigEventWatcher{ctrl: ctrl}
	mock.recorder = &MockFederatedRateLimitConfigEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFederatedRateLimitConfigEventWatcher) EXPECT() *MockFederatedRateLimitConfigEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockFederatedRateLimitConfigEventWatcher) AddEventHandler(ctx context.Context, h controller.FederatedRateLimitConfigEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockFederatedRateLimitConfigEventWatcherMockRecorder) AddEventHandler(ctx, h any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockFederatedRateLimitConfigEventWatcher)(nil).AddEventHandler), varargs...)
}
