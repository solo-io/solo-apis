// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller



import (
	"context"

    fed_ratelimit_solo_io_v1alpha1 "github.com/solo-io/solo-apis/pkg/api/fed.ratelimit.solo.io/v1alpha1"

    "github.com/pkg/errors"
    "github.com/solo-io/skv2/pkg/ezkube"
    "github.com/solo-io/skv2/pkg/reconcile"
    "sigs.k8s.io/controller-runtime/pkg/manager"
    "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the FederatedRateLimitConfig Resource.
// implemented by the user
type FederatedRateLimitConfigReconciler interface {
    ReconcileFederatedRateLimitConfig(obj *fed_ratelimit_solo_io_v1alpha1.FederatedRateLimitConfig) (reconcile.Result, error)
}

// Reconcile deletion events for the FederatedRateLimitConfig Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type FederatedRateLimitConfigDeletionReconciler interface {
    ReconcileFederatedRateLimitConfigDeletion(req reconcile.Request) error
}

type FederatedRateLimitConfigReconcilerFuncs struct {
    OnReconcileFederatedRateLimitConfig func(obj *fed_ratelimit_solo_io_v1alpha1.FederatedRateLimitConfig) (reconcile.Result, error)
    OnReconcileFederatedRateLimitConfigDeletion func(req reconcile.Request) error
}

func (f *FederatedRateLimitConfigReconcilerFuncs) ReconcileFederatedRateLimitConfig(obj *fed_ratelimit_solo_io_v1alpha1.FederatedRateLimitConfig) (reconcile.Result, error) {
    if f.OnReconcileFederatedRateLimitConfig == nil {
        return reconcile.Result{}, nil
    }
    return f.OnReconcileFederatedRateLimitConfig(obj)
}

func (f *FederatedRateLimitConfigReconcilerFuncs) ReconcileFederatedRateLimitConfigDeletion(req reconcile.Request) error {
    if f.OnReconcileFederatedRateLimitConfigDeletion == nil {
        return nil
    }
    return f.OnReconcileFederatedRateLimitConfigDeletion(req)
}

// Reconcile and finalize the FederatedRateLimitConfig Resource
// implemented by the user
type FederatedRateLimitConfigFinalizer interface {
    FederatedRateLimitConfigReconciler

    // name of the finalizer used by this handler.
    // finalizer names should be unique for a single task
    FederatedRateLimitConfigFinalizerName() string

    // finalize the object before it is deleted.
    // Watchers created with a finalizing handler will a
    FinalizeFederatedRateLimitConfig(obj *fed_ratelimit_solo_io_v1alpha1.FederatedRateLimitConfig) error
}

type FederatedRateLimitConfigReconcileLoop interface {
    RunFederatedRateLimitConfigReconciler(ctx context.Context, rec FederatedRateLimitConfigReconciler, predicates ...predicate.Predicate) error
}

type federatedRateLimitConfigReconcileLoop struct {
    loop reconcile.Loop
}

func NewFederatedRateLimitConfigReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) FederatedRateLimitConfigReconcileLoop {
    return &federatedRateLimitConfigReconcileLoop{
    	// empty cluster indicates this reconciler is built for the local cluster
        loop: reconcile.NewLoop(name, "", mgr, &fed_ratelimit_solo_io_v1alpha1.FederatedRateLimitConfig{}, options),
    }
}

func (c *federatedRateLimitConfigReconcileLoop) RunFederatedRateLimitConfigReconciler(ctx context.Context, reconciler FederatedRateLimitConfigReconciler, predicates ...predicate.Predicate) error {
    genericReconciler := genericFederatedRateLimitConfigReconciler{
        reconciler: reconciler,
    }

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(FederatedRateLimitConfigFinalizer); ok {
        reconcilerWrapper = genericFederatedRateLimitConfigFinalizer{
            genericFederatedRateLimitConfigReconciler: genericReconciler,
            finalizingReconciler: finalizingReconciler,
        }
    } else {
        reconcilerWrapper = genericReconciler
    }
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericFederatedRateLimitConfigHandler implements a generic reconcile.Reconciler
type genericFederatedRateLimitConfigReconciler struct {
    reconciler FederatedRateLimitConfigReconciler
}

func (r genericFederatedRateLimitConfigReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
    obj, ok := object.(*fed_ratelimit_solo_io_v1alpha1.FederatedRateLimitConfig)
    if !ok {
        return reconcile.Result{}, errors.Errorf("internal error: FederatedRateLimitConfig handler received event for %T", object)
    }
    return r.reconciler.ReconcileFederatedRateLimitConfig(obj)
}

func (r genericFederatedRateLimitConfigReconciler) ReconcileDeletion(request reconcile.Request) error {
    if deletionReconciler, ok := r.reconciler.(FederatedRateLimitConfigDeletionReconciler); ok {
        return deletionReconciler.ReconcileFederatedRateLimitConfigDeletion(request)
    }
    return nil
}

// genericFederatedRateLimitConfigFinalizer implements a generic reconcile.FinalizingReconciler
type genericFederatedRateLimitConfigFinalizer struct {
    genericFederatedRateLimitConfigReconciler
    finalizingReconciler FederatedRateLimitConfigFinalizer
}


func (r genericFederatedRateLimitConfigFinalizer) FinalizerName() string {
    return r.finalizingReconciler.FederatedRateLimitConfigFinalizerName()
}

func (r genericFederatedRateLimitConfigFinalizer) Finalize(object ezkube.Object) error {
    obj, ok := object.(*fed_ratelimit_solo_io_v1alpha1.FederatedRateLimitConfig)
    if !ok {
        return errors.Errorf("internal error: FederatedRateLimitConfig handler received event for %T", object)
    }
    return r.finalizingReconciler.FinalizeFederatedRateLimitConfig(obj)
}
