// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v1alpha1




import (
    "context"

    "github.com/solo-io/skv2/pkg/controllerutils"
    "github.com/solo-io/skv2/pkg/multicluster"
    "k8s.io/apimachinery/pkg/runtime"
    "k8s.io/client-go/kubernetes/scheme"
    "k8s.io/client-go/rest"
    "sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the fed.ratelimit.solo.io/v1alpha1 APIs
type MulticlusterClientset interface {
    // Cluster returns a Clientset for the given cluster
    Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
    client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
    return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
    client, err := m.client.Cluster(cluster)
    if err != nil {
        return nil, err
    }
    return NewClientset(client), nil
}

// clienset for the fed.ratelimit.solo.io/v1alpha1 APIs
type Clientset interface {
    // clienset for the fed.ratelimit.solo.io/v1alpha1/v1alpha1 APIs
    FederatedRateLimitConfigs() FederatedRateLimitConfigClient
}

type clientSet struct {
    client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
    scheme := scheme.Scheme
    if err := SchemeBuilder.AddToScheme(scheme); err != nil{
        return nil, err
    }
    client, err := client.New(cfg, client.Options{
        Scheme: scheme,
    })
    if err != nil {
        return nil, err
    }
    return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
    return &clientSet{client: client}
}

// clienset for the fed.ratelimit.solo.io/v1alpha1/v1alpha1 APIs
func (c *clientSet) FederatedRateLimitConfigs() FederatedRateLimitConfigClient {
    return NewFederatedRateLimitConfigClient(c.client)
}

// Reader knows how to read and list FederatedRateLimitConfigs.
type FederatedRateLimitConfigReader interface {
    // Get retrieves a FederatedRateLimitConfig for the given object key
    GetFederatedRateLimitConfig(ctx context.Context, key client.ObjectKey) (*FederatedRateLimitConfig, error)

    // List retrieves list of FederatedRateLimitConfigs for a given namespace and list options.
    ListFederatedRateLimitConfig(ctx context.Context, opts ...client.ListOption) (*FederatedRateLimitConfigList, error)
}

// FederatedRateLimitConfigTransitionFunction instructs the FederatedRateLimitConfigWriter how to transition between an existing
// FederatedRateLimitConfig object and a desired on an Upsert
type FederatedRateLimitConfigTransitionFunction func(existing, desired *FederatedRateLimitConfig) error

// Writer knows how to create, delete, and update FederatedRateLimitConfigs.
type FederatedRateLimitConfigWriter interface {
    // Create saves the FederatedRateLimitConfig object.
    CreateFederatedRateLimitConfig(ctx context.Context, obj *FederatedRateLimitConfig, opts ...client.CreateOption) error

    // Delete deletes the FederatedRateLimitConfig object.
    DeleteFederatedRateLimitConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

    // Update updates the given FederatedRateLimitConfig object.
    UpdateFederatedRateLimitConfig(ctx context.Context, obj *FederatedRateLimitConfig, opts ...client.UpdateOption) error

    // Patch patches the given FederatedRateLimitConfig object.
    PatchFederatedRateLimitConfig(ctx context.Context, obj *FederatedRateLimitConfig, patch client.Patch, opts ...client.PatchOption) error

    // DeleteAllOf deletes all FederatedRateLimitConfig objects matching the given options.
    DeleteAllOfFederatedRateLimitConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error

    // Create or Update the FederatedRateLimitConfig object.
    UpsertFederatedRateLimitConfig(ctx context.Context, obj *FederatedRateLimitConfig, transitionFuncs ...FederatedRateLimitConfigTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a FederatedRateLimitConfig object.
type FederatedRateLimitConfigStatusWriter interface {
    // Update updates the fields corresponding to the status subresource for the
    // given FederatedRateLimitConfig object.
    UpdateFederatedRateLimitConfigStatus(ctx context.Context, obj *FederatedRateLimitConfig, opts ...client.UpdateOption) error

    // Patch patches the given FederatedRateLimitConfig object's subresource.
    PatchFederatedRateLimitConfigStatus(ctx context.Context, obj *FederatedRateLimitConfig, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on FederatedRateLimitConfigs.
type FederatedRateLimitConfigClient interface {
    FederatedRateLimitConfigReader
    FederatedRateLimitConfigWriter
    FederatedRateLimitConfigStatusWriter
}

type federatedRateLimitConfigClient struct {
    client client.Client
}

func NewFederatedRateLimitConfigClient(client client.Client) *federatedRateLimitConfigClient {
    return &federatedRateLimitConfigClient{client: client}
}


func (c *federatedRateLimitConfigClient) GetFederatedRateLimitConfig(ctx context.Context, key client.ObjectKey) (*FederatedRateLimitConfig, error) {
    obj := &FederatedRateLimitConfig{}
    if err := c.client.Get(ctx, key, obj); err != nil {
        return nil, err
    }
    return obj, nil
}

func (c *federatedRateLimitConfigClient) ListFederatedRateLimitConfig(ctx context.Context, opts ...client.ListOption) (*FederatedRateLimitConfigList, error) {
    list := &FederatedRateLimitConfigList{}
    if err := c.client.List(ctx, list, opts...); err != nil {
        return nil, err
    }
    return list, nil
}

func (c *federatedRateLimitConfigClient) CreateFederatedRateLimitConfig(ctx context.Context, obj *FederatedRateLimitConfig, opts ...client.CreateOption) error {
    return c.client.Create(ctx, obj, opts...)
}


func (c *federatedRateLimitConfigClient) DeleteFederatedRateLimitConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
    obj := &FederatedRateLimitConfig{}
    obj.SetName(key.Name)
    obj.SetNamespace(key.Namespace)
    return c.client.Delete(ctx, obj, opts...)
}

func (c *federatedRateLimitConfigClient) UpdateFederatedRateLimitConfig(ctx context.Context, obj *FederatedRateLimitConfig, opts ...client.UpdateOption) error {
    return c.client.Update(ctx, obj, opts...)
}

func (c *federatedRateLimitConfigClient) PatchFederatedRateLimitConfig(ctx context.Context, obj *FederatedRateLimitConfig, patch client.Patch, opts ...client.PatchOption) error {
    return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *federatedRateLimitConfigClient) DeleteAllOfFederatedRateLimitConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error {
    obj := &FederatedRateLimitConfig{}
    return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *federatedRateLimitConfigClient) UpsertFederatedRateLimitConfig(ctx context.Context, obj *FederatedRateLimitConfig, transitionFuncs ...FederatedRateLimitConfigTransitionFunction) error {
    genericTxFunc := func(existing, desired runtime.Object) error {
        for _, txFunc := range transitionFuncs {
            if err := txFunc(existing.(*FederatedRateLimitConfig), desired.(*FederatedRateLimitConfig)); err != nil {
                return err
            }
        }
        return nil
    }
    _, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
    return err
}

func (c *federatedRateLimitConfigClient) UpdateFederatedRateLimitConfigStatus(ctx context.Context, obj *FederatedRateLimitConfig, opts ...client.UpdateOption) error {
    return c.client.Status().Update(ctx, obj, opts...)
}

func (c *federatedRateLimitConfigClient) PatchFederatedRateLimitConfigStatus(ctx context.Context, obj *FederatedRateLimitConfig, patch client.Patch, opts ...client.PatchOption) error {
    return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides FederatedRateLimitConfigClients for multiple clusters.
type MulticlusterFederatedRateLimitConfigClient interface {
    // Cluster returns a FederatedRateLimitConfigClient for the given cluster
    Cluster(cluster string) (FederatedRateLimitConfigClient, error)
}

type multiclusterFederatedRateLimitConfigClient struct {
    client multicluster.Client
}

func NewMulticlusterFederatedRateLimitConfigClient(client multicluster.Client) MulticlusterFederatedRateLimitConfigClient {
    return &multiclusterFederatedRateLimitConfigClient{client: client}
}

func (m *multiclusterFederatedRateLimitConfigClient) Cluster(cluster string) (FederatedRateLimitConfigClient, error) {
    client, err := m.client.Cluster(cluster)
    if err != nil {
        return nil, err
    }
    return  NewFederatedRateLimitConfigClient(client), nil
}