// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	v2 "github.com/solo-io/solo-apis/pkg/api/resilience.policy.gloo.solo.io/v2"
	controller "github.com/solo-io/solo-apis/pkg/api/resilience.policy.gloo.solo.io/v2/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockFailoverPolicyReconciler is a mock of FailoverPolicyReconciler interface.
type MockFailoverPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockFailoverPolicyReconcilerMockRecorder
}

// MockFailoverPolicyReconcilerMockRecorder is the mock recorder for MockFailoverPolicyReconciler.
type MockFailoverPolicyReconcilerMockRecorder struct {
	mock *MockFailoverPolicyReconciler
}

// NewMockFailoverPolicyReconciler creates a new mock instance.
func NewMockFailoverPolicyReconciler(ctrl *gomock.Controller) *MockFailoverPolicyReconciler {
	mock := &MockFailoverPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockFailoverPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailoverPolicyReconciler) EXPECT() *MockFailoverPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileFailoverPolicy mocks base method.
func (m *MockFailoverPolicyReconciler) ReconcileFailoverPolicy(obj *v2.FailoverPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileFailoverPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileFailoverPolicy indicates an expected call of ReconcileFailoverPolicy.
func (mr *MockFailoverPolicyReconcilerMockRecorder) ReconcileFailoverPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileFailoverPolicy", reflect.TypeOf((*MockFailoverPolicyReconciler)(nil).ReconcileFailoverPolicy), obj)
}

// MockFailoverPolicyDeletionReconciler is a mock of FailoverPolicyDeletionReconciler interface.
type MockFailoverPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockFailoverPolicyDeletionReconcilerMockRecorder
}

// MockFailoverPolicyDeletionReconcilerMockRecorder is the mock recorder for MockFailoverPolicyDeletionReconciler.
type MockFailoverPolicyDeletionReconcilerMockRecorder struct {
	mock *MockFailoverPolicyDeletionReconciler
}

// NewMockFailoverPolicyDeletionReconciler creates a new mock instance.
func NewMockFailoverPolicyDeletionReconciler(ctrl *gomock.Controller) *MockFailoverPolicyDeletionReconciler {
	mock := &MockFailoverPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockFailoverPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailoverPolicyDeletionReconciler) EXPECT() *MockFailoverPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileFailoverPolicyDeletion mocks base method.
func (m *MockFailoverPolicyDeletionReconciler) ReconcileFailoverPolicyDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileFailoverPolicyDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileFailoverPolicyDeletion indicates an expected call of ReconcileFailoverPolicyDeletion.
func (mr *MockFailoverPolicyDeletionReconcilerMockRecorder) ReconcileFailoverPolicyDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileFailoverPolicyDeletion", reflect.TypeOf((*MockFailoverPolicyDeletionReconciler)(nil).ReconcileFailoverPolicyDeletion), req)
}

// MockFailoverPolicyFinalizer is a mock of FailoverPolicyFinalizer interface.
type MockFailoverPolicyFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockFailoverPolicyFinalizerMockRecorder
}

// MockFailoverPolicyFinalizerMockRecorder is the mock recorder for MockFailoverPolicyFinalizer.
type MockFailoverPolicyFinalizerMockRecorder struct {
	mock *MockFailoverPolicyFinalizer
}

// NewMockFailoverPolicyFinalizer creates a new mock instance.
func NewMockFailoverPolicyFinalizer(ctrl *gomock.Controller) *MockFailoverPolicyFinalizer {
	mock := &MockFailoverPolicyFinalizer{ctrl: ctrl}
	mock.recorder = &MockFailoverPolicyFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailoverPolicyFinalizer) EXPECT() *MockFailoverPolicyFinalizerMockRecorder {
	return m.recorder
}

// FailoverPolicyFinalizerName mocks base method.
func (m *MockFailoverPolicyFinalizer) FailoverPolicyFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailoverPolicyFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FailoverPolicyFinalizerName indicates an expected call of FailoverPolicyFinalizerName.
func (mr *MockFailoverPolicyFinalizerMockRecorder) FailoverPolicyFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailoverPolicyFinalizerName", reflect.TypeOf((*MockFailoverPolicyFinalizer)(nil).FailoverPolicyFinalizerName))
}

// FinalizeFailoverPolicy mocks base method.
func (m *MockFailoverPolicyFinalizer) FinalizeFailoverPolicy(obj *v2.FailoverPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeFailoverPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeFailoverPolicy indicates an expected call of FinalizeFailoverPolicy.
func (mr *MockFailoverPolicyFinalizerMockRecorder) FinalizeFailoverPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeFailoverPolicy", reflect.TypeOf((*MockFailoverPolicyFinalizer)(nil).FinalizeFailoverPolicy), obj)
}

// ReconcileFailoverPolicy mocks base method.
func (m *MockFailoverPolicyFinalizer) ReconcileFailoverPolicy(obj *v2.FailoverPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileFailoverPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileFailoverPolicy indicates an expected call of ReconcileFailoverPolicy.
func (mr *MockFailoverPolicyFinalizerMockRecorder) ReconcileFailoverPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileFailoverPolicy", reflect.TypeOf((*MockFailoverPolicyFinalizer)(nil).ReconcileFailoverPolicy), obj)
}

// MockFailoverPolicyReconcileLoop is a mock of FailoverPolicyReconcileLoop interface.
type MockFailoverPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockFailoverPolicyReconcileLoopMockRecorder
}

// MockFailoverPolicyReconcileLoopMockRecorder is the mock recorder for MockFailoverPolicyReconcileLoop.
type MockFailoverPolicyReconcileLoopMockRecorder struct {
	mock *MockFailoverPolicyReconcileLoop
}

// NewMockFailoverPolicyReconcileLoop creates a new mock instance.
func NewMockFailoverPolicyReconcileLoop(ctrl *gomock.Controller) *MockFailoverPolicyReconcileLoop {
	mock := &MockFailoverPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockFailoverPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailoverPolicyReconcileLoop) EXPECT() *MockFailoverPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// RunFailoverPolicyReconciler mocks base method.
func (m *MockFailoverPolicyReconcileLoop) RunFailoverPolicyReconciler(ctx context.Context, rec controller.FailoverPolicyReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunFailoverPolicyReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunFailoverPolicyReconciler indicates an expected call of RunFailoverPolicyReconciler.
func (mr *MockFailoverPolicyReconcileLoopMockRecorder) RunFailoverPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunFailoverPolicyReconciler", reflect.TypeOf((*MockFailoverPolicyReconcileLoop)(nil).RunFailoverPolicyReconciler), varargs...)
}

// MockOutlierDetectionPolicyReconciler is a mock of OutlierDetectionPolicyReconciler interface.
type MockOutlierDetectionPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockOutlierDetectionPolicyReconcilerMockRecorder
}

// MockOutlierDetectionPolicyReconcilerMockRecorder is the mock recorder for MockOutlierDetectionPolicyReconciler.
type MockOutlierDetectionPolicyReconcilerMockRecorder struct {
	mock *MockOutlierDetectionPolicyReconciler
}

// NewMockOutlierDetectionPolicyReconciler creates a new mock instance.
func NewMockOutlierDetectionPolicyReconciler(ctrl *gomock.Controller) *MockOutlierDetectionPolicyReconciler {
	mock := &MockOutlierDetectionPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockOutlierDetectionPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutlierDetectionPolicyReconciler) EXPECT() *MockOutlierDetectionPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileOutlierDetectionPolicy mocks base method.
func (m *MockOutlierDetectionPolicyReconciler) ReconcileOutlierDetectionPolicy(obj *v2.OutlierDetectionPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileOutlierDetectionPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileOutlierDetectionPolicy indicates an expected call of ReconcileOutlierDetectionPolicy.
func (mr *MockOutlierDetectionPolicyReconcilerMockRecorder) ReconcileOutlierDetectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileOutlierDetectionPolicy", reflect.TypeOf((*MockOutlierDetectionPolicyReconciler)(nil).ReconcileOutlierDetectionPolicy), obj)
}

// MockOutlierDetectionPolicyDeletionReconciler is a mock of OutlierDetectionPolicyDeletionReconciler interface.
type MockOutlierDetectionPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockOutlierDetectionPolicyDeletionReconcilerMockRecorder
}

// MockOutlierDetectionPolicyDeletionReconcilerMockRecorder is the mock recorder for MockOutlierDetectionPolicyDeletionReconciler.
type MockOutlierDetectionPolicyDeletionReconcilerMockRecorder struct {
	mock *MockOutlierDetectionPolicyDeletionReconciler
}

// NewMockOutlierDetectionPolicyDeletionReconciler creates a new mock instance.
func NewMockOutlierDetectionPolicyDeletionReconciler(ctrl *gomock.Controller) *MockOutlierDetectionPolicyDeletionReconciler {
	mock := &MockOutlierDetectionPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockOutlierDetectionPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutlierDetectionPolicyDeletionReconciler) EXPECT() *MockOutlierDetectionPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileOutlierDetectionPolicyDeletion mocks base method.
func (m *MockOutlierDetectionPolicyDeletionReconciler) ReconcileOutlierDetectionPolicyDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileOutlierDetectionPolicyDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileOutlierDetectionPolicyDeletion indicates an expected call of ReconcileOutlierDetectionPolicyDeletion.
func (mr *MockOutlierDetectionPolicyDeletionReconcilerMockRecorder) ReconcileOutlierDetectionPolicyDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileOutlierDetectionPolicyDeletion", reflect.TypeOf((*MockOutlierDetectionPolicyDeletionReconciler)(nil).ReconcileOutlierDetectionPolicyDeletion), req)
}

// MockOutlierDetectionPolicyFinalizer is a mock of OutlierDetectionPolicyFinalizer interface.
type MockOutlierDetectionPolicyFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockOutlierDetectionPolicyFinalizerMockRecorder
}

// MockOutlierDetectionPolicyFinalizerMockRecorder is the mock recorder for MockOutlierDetectionPolicyFinalizer.
type MockOutlierDetectionPolicyFinalizerMockRecorder struct {
	mock *MockOutlierDetectionPolicyFinalizer
}

// NewMockOutlierDetectionPolicyFinalizer creates a new mock instance.
func NewMockOutlierDetectionPolicyFinalizer(ctrl *gomock.Controller) *MockOutlierDetectionPolicyFinalizer {
	mock := &MockOutlierDetectionPolicyFinalizer{ctrl: ctrl}
	mock.recorder = &MockOutlierDetectionPolicyFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutlierDetectionPolicyFinalizer) EXPECT() *MockOutlierDetectionPolicyFinalizerMockRecorder {
	return m.recorder
}

// FinalizeOutlierDetectionPolicy mocks base method.
func (m *MockOutlierDetectionPolicyFinalizer) FinalizeOutlierDetectionPolicy(obj *v2.OutlierDetectionPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeOutlierDetectionPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeOutlierDetectionPolicy indicates an expected call of FinalizeOutlierDetectionPolicy.
func (mr *MockOutlierDetectionPolicyFinalizerMockRecorder) FinalizeOutlierDetectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeOutlierDetectionPolicy", reflect.TypeOf((*MockOutlierDetectionPolicyFinalizer)(nil).FinalizeOutlierDetectionPolicy), obj)
}

// OutlierDetectionPolicyFinalizerName mocks base method.
func (m *MockOutlierDetectionPolicyFinalizer) OutlierDetectionPolicyFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutlierDetectionPolicyFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// OutlierDetectionPolicyFinalizerName indicates an expected call of OutlierDetectionPolicyFinalizerName.
func (mr *MockOutlierDetectionPolicyFinalizerMockRecorder) OutlierDetectionPolicyFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutlierDetectionPolicyFinalizerName", reflect.TypeOf((*MockOutlierDetectionPolicyFinalizer)(nil).OutlierDetectionPolicyFinalizerName))
}

// ReconcileOutlierDetectionPolicy mocks base method.
func (m *MockOutlierDetectionPolicyFinalizer) ReconcileOutlierDetectionPolicy(obj *v2.OutlierDetectionPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileOutlierDetectionPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileOutlierDetectionPolicy indicates an expected call of ReconcileOutlierDetectionPolicy.
func (mr *MockOutlierDetectionPolicyFinalizerMockRecorder) ReconcileOutlierDetectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileOutlierDetectionPolicy", reflect.TypeOf((*MockOutlierDetectionPolicyFinalizer)(nil).ReconcileOutlierDetectionPolicy), obj)
}

// MockOutlierDetectionPolicyReconcileLoop is a mock of OutlierDetectionPolicyReconcileLoop interface.
type MockOutlierDetectionPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockOutlierDetectionPolicyReconcileLoopMockRecorder
}

// MockOutlierDetectionPolicyReconcileLoopMockRecorder is the mock recorder for MockOutlierDetectionPolicyReconcileLoop.
type MockOutlierDetectionPolicyReconcileLoopMockRecorder struct {
	mock *MockOutlierDetectionPolicyReconcileLoop
}

// NewMockOutlierDetectionPolicyReconcileLoop creates a new mock instance.
func NewMockOutlierDetectionPolicyReconcileLoop(ctrl *gomock.Controller) *MockOutlierDetectionPolicyReconcileLoop {
	mock := &MockOutlierDetectionPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockOutlierDetectionPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutlierDetectionPolicyReconcileLoop) EXPECT() *MockOutlierDetectionPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// RunOutlierDetectionPolicyReconciler mocks base method.
func (m *MockOutlierDetectionPolicyReconcileLoop) RunOutlierDetectionPolicyReconciler(ctx context.Context, rec controller.OutlierDetectionPolicyReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunOutlierDetectionPolicyReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunOutlierDetectionPolicyReconciler indicates an expected call of RunOutlierDetectionPolicyReconciler.
func (mr *MockOutlierDetectionPolicyReconcileLoopMockRecorder) RunOutlierDetectionPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunOutlierDetectionPolicyReconciler", reflect.TypeOf((*MockOutlierDetectionPolicyReconcileLoop)(nil).RunOutlierDetectionPolicyReconciler), varargs...)
}

// MockFaultInjectionPolicyReconciler is a mock of FaultInjectionPolicyReconciler interface.
type MockFaultInjectionPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockFaultInjectionPolicyReconcilerMockRecorder
}

// MockFaultInjectionPolicyReconcilerMockRecorder is the mock recorder for MockFaultInjectionPolicyReconciler.
type MockFaultInjectionPolicyReconcilerMockRecorder struct {
	mock *MockFaultInjectionPolicyReconciler
}

// NewMockFaultInjectionPolicyReconciler creates a new mock instance.
func NewMockFaultInjectionPolicyReconciler(ctrl *gomock.Controller) *MockFaultInjectionPolicyReconciler {
	mock := &MockFaultInjectionPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockFaultInjectionPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFaultInjectionPolicyReconciler) EXPECT() *MockFaultInjectionPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileFaultInjectionPolicy mocks base method.
func (m *MockFaultInjectionPolicyReconciler) ReconcileFaultInjectionPolicy(obj *v2.FaultInjectionPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileFaultInjectionPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileFaultInjectionPolicy indicates an expected call of ReconcileFaultInjectionPolicy.
func (mr *MockFaultInjectionPolicyReconcilerMockRecorder) ReconcileFaultInjectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileFaultInjectionPolicy", reflect.TypeOf((*MockFaultInjectionPolicyReconciler)(nil).ReconcileFaultInjectionPolicy), obj)
}

// MockFaultInjectionPolicyDeletionReconciler is a mock of FaultInjectionPolicyDeletionReconciler interface.
type MockFaultInjectionPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockFaultInjectionPolicyDeletionReconcilerMockRecorder
}

// MockFaultInjectionPolicyDeletionReconcilerMockRecorder is the mock recorder for MockFaultInjectionPolicyDeletionReconciler.
type MockFaultInjectionPolicyDeletionReconcilerMockRecorder struct {
	mock *MockFaultInjectionPolicyDeletionReconciler
}

// NewMockFaultInjectionPolicyDeletionReconciler creates a new mock instance.
func NewMockFaultInjectionPolicyDeletionReconciler(ctrl *gomock.Controller) *MockFaultInjectionPolicyDeletionReconciler {
	mock := &MockFaultInjectionPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockFaultInjectionPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFaultInjectionPolicyDeletionReconciler) EXPECT() *MockFaultInjectionPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileFaultInjectionPolicyDeletion mocks base method.
func (m *MockFaultInjectionPolicyDeletionReconciler) ReconcileFaultInjectionPolicyDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileFaultInjectionPolicyDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileFaultInjectionPolicyDeletion indicates an expected call of ReconcileFaultInjectionPolicyDeletion.
func (mr *MockFaultInjectionPolicyDeletionReconcilerMockRecorder) ReconcileFaultInjectionPolicyDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileFaultInjectionPolicyDeletion", reflect.TypeOf((*MockFaultInjectionPolicyDeletionReconciler)(nil).ReconcileFaultInjectionPolicyDeletion), req)
}

// MockFaultInjectionPolicyFinalizer is a mock of FaultInjectionPolicyFinalizer interface.
type MockFaultInjectionPolicyFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockFaultInjectionPolicyFinalizerMockRecorder
}

// MockFaultInjectionPolicyFinalizerMockRecorder is the mock recorder for MockFaultInjectionPolicyFinalizer.
type MockFaultInjectionPolicyFinalizerMockRecorder struct {
	mock *MockFaultInjectionPolicyFinalizer
}

// NewMockFaultInjectionPolicyFinalizer creates a new mock instance.
func NewMockFaultInjectionPolicyFinalizer(ctrl *gomock.Controller) *MockFaultInjectionPolicyFinalizer {
	mock := &MockFaultInjectionPolicyFinalizer{ctrl: ctrl}
	mock.recorder = &MockFaultInjectionPolicyFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFaultInjectionPolicyFinalizer) EXPECT() *MockFaultInjectionPolicyFinalizerMockRecorder {
	return m.recorder
}

// FaultInjectionPolicyFinalizerName mocks base method.
func (m *MockFaultInjectionPolicyFinalizer) FaultInjectionPolicyFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FaultInjectionPolicyFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FaultInjectionPolicyFinalizerName indicates an expected call of FaultInjectionPolicyFinalizerName.
func (mr *MockFaultInjectionPolicyFinalizerMockRecorder) FaultInjectionPolicyFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FaultInjectionPolicyFinalizerName", reflect.TypeOf((*MockFaultInjectionPolicyFinalizer)(nil).FaultInjectionPolicyFinalizerName))
}

// FinalizeFaultInjectionPolicy mocks base method.
func (m *MockFaultInjectionPolicyFinalizer) FinalizeFaultInjectionPolicy(obj *v2.FaultInjectionPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeFaultInjectionPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeFaultInjectionPolicy indicates an expected call of FinalizeFaultInjectionPolicy.
func (mr *MockFaultInjectionPolicyFinalizerMockRecorder) FinalizeFaultInjectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeFaultInjectionPolicy", reflect.TypeOf((*MockFaultInjectionPolicyFinalizer)(nil).FinalizeFaultInjectionPolicy), obj)
}

// ReconcileFaultInjectionPolicy mocks base method.
func (m *MockFaultInjectionPolicyFinalizer) ReconcileFaultInjectionPolicy(obj *v2.FaultInjectionPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileFaultInjectionPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileFaultInjectionPolicy indicates an expected call of ReconcileFaultInjectionPolicy.
func (mr *MockFaultInjectionPolicyFinalizerMockRecorder) ReconcileFaultInjectionPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileFaultInjectionPolicy", reflect.TypeOf((*MockFaultInjectionPolicyFinalizer)(nil).ReconcileFaultInjectionPolicy), obj)
}

// MockFaultInjectionPolicyReconcileLoop is a mock of FaultInjectionPolicyReconcileLoop interface.
type MockFaultInjectionPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockFaultInjectionPolicyReconcileLoopMockRecorder
}

// MockFaultInjectionPolicyReconcileLoopMockRecorder is the mock recorder for MockFaultInjectionPolicyReconcileLoop.
type MockFaultInjectionPolicyReconcileLoopMockRecorder struct {
	mock *MockFaultInjectionPolicyReconcileLoop
}

// NewMockFaultInjectionPolicyReconcileLoop creates a new mock instance.
func NewMockFaultInjectionPolicyReconcileLoop(ctrl *gomock.Controller) *MockFaultInjectionPolicyReconcileLoop {
	mock := &MockFaultInjectionPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockFaultInjectionPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFaultInjectionPolicyReconcileLoop) EXPECT() *MockFaultInjectionPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// RunFaultInjectionPolicyReconciler mocks base method.
func (m *MockFaultInjectionPolicyReconcileLoop) RunFaultInjectionPolicyReconciler(ctx context.Context, rec controller.FaultInjectionPolicyReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunFaultInjectionPolicyReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunFaultInjectionPolicyReconciler indicates an expected call of RunFaultInjectionPolicyReconciler.
func (mr *MockFaultInjectionPolicyReconcileLoopMockRecorder) RunFaultInjectionPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunFaultInjectionPolicyReconciler", reflect.TypeOf((*MockFaultInjectionPolicyReconcileLoop)(nil).RunFaultInjectionPolicyReconciler), varargs...)
}

// MockRetryTimeoutPolicyReconciler is a mock of RetryTimeoutPolicyReconciler interface.
type MockRetryTimeoutPolicyReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockRetryTimeoutPolicyReconcilerMockRecorder
}

// MockRetryTimeoutPolicyReconcilerMockRecorder is the mock recorder for MockRetryTimeoutPolicyReconciler.
type MockRetryTimeoutPolicyReconcilerMockRecorder struct {
	mock *MockRetryTimeoutPolicyReconciler
}

// NewMockRetryTimeoutPolicyReconciler creates a new mock instance.
func NewMockRetryTimeoutPolicyReconciler(ctrl *gomock.Controller) *MockRetryTimeoutPolicyReconciler {
	mock := &MockRetryTimeoutPolicyReconciler{ctrl: ctrl}
	mock.recorder = &MockRetryTimeoutPolicyReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryTimeoutPolicyReconciler) EXPECT() *MockRetryTimeoutPolicyReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRetryTimeoutPolicy mocks base method.
func (m *MockRetryTimeoutPolicyReconciler) ReconcileRetryTimeoutPolicy(obj *v2.RetryTimeoutPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRetryTimeoutPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRetryTimeoutPolicy indicates an expected call of ReconcileRetryTimeoutPolicy.
func (mr *MockRetryTimeoutPolicyReconcilerMockRecorder) ReconcileRetryTimeoutPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRetryTimeoutPolicy", reflect.TypeOf((*MockRetryTimeoutPolicyReconciler)(nil).ReconcileRetryTimeoutPolicy), obj)
}

// MockRetryTimeoutPolicyDeletionReconciler is a mock of RetryTimeoutPolicyDeletionReconciler interface.
type MockRetryTimeoutPolicyDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockRetryTimeoutPolicyDeletionReconcilerMockRecorder
}

// MockRetryTimeoutPolicyDeletionReconcilerMockRecorder is the mock recorder for MockRetryTimeoutPolicyDeletionReconciler.
type MockRetryTimeoutPolicyDeletionReconcilerMockRecorder struct {
	mock *MockRetryTimeoutPolicyDeletionReconciler
}

// NewMockRetryTimeoutPolicyDeletionReconciler creates a new mock instance.
func NewMockRetryTimeoutPolicyDeletionReconciler(ctrl *gomock.Controller) *MockRetryTimeoutPolicyDeletionReconciler {
	mock := &MockRetryTimeoutPolicyDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockRetryTimeoutPolicyDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryTimeoutPolicyDeletionReconciler) EXPECT() *MockRetryTimeoutPolicyDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRetryTimeoutPolicyDeletion mocks base method.
func (m *MockRetryTimeoutPolicyDeletionReconciler) ReconcileRetryTimeoutPolicyDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRetryTimeoutPolicyDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileRetryTimeoutPolicyDeletion indicates an expected call of ReconcileRetryTimeoutPolicyDeletion.
func (mr *MockRetryTimeoutPolicyDeletionReconcilerMockRecorder) ReconcileRetryTimeoutPolicyDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRetryTimeoutPolicyDeletion", reflect.TypeOf((*MockRetryTimeoutPolicyDeletionReconciler)(nil).ReconcileRetryTimeoutPolicyDeletion), req)
}

// MockRetryTimeoutPolicyFinalizer is a mock of RetryTimeoutPolicyFinalizer interface.
type MockRetryTimeoutPolicyFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockRetryTimeoutPolicyFinalizerMockRecorder
}

// MockRetryTimeoutPolicyFinalizerMockRecorder is the mock recorder for MockRetryTimeoutPolicyFinalizer.
type MockRetryTimeoutPolicyFinalizerMockRecorder struct {
	mock *MockRetryTimeoutPolicyFinalizer
}

// NewMockRetryTimeoutPolicyFinalizer creates a new mock instance.
func NewMockRetryTimeoutPolicyFinalizer(ctrl *gomock.Controller) *MockRetryTimeoutPolicyFinalizer {
	mock := &MockRetryTimeoutPolicyFinalizer{ctrl: ctrl}
	mock.recorder = &MockRetryTimeoutPolicyFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryTimeoutPolicyFinalizer) EXPECT() *MockRetryTimeoutPolicyFinalizerMockRecorder {
	return m.recorder
}

// FinalizeRetryTimeoutPolicy mocks base method.
func (m *MockRetryTimeoutPolicyFinalizer) FinalizeRetryTimeoutPolicy(obj *v2.RetryTimeoutPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeRetryTimeoutPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeRetryTimeoutPolicy indicates an expected call of FinalizeRetryTimeoutPolicy.
func (mr *MockRetryTimeoutPolicyFinalizerMockRecorder) FinalizeRetryTimeoutPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeRetryTimeoutPolicy", reflect.TypeOf((*MockRetryTimeoutPolicyFinalizer)(nil).FinalizeRetryTimeoutPolicy), obj)
}

// ReconcileRetryTimeoutPolicy mocks base method.
func (m *MockRetryTimeoutPolicyFinalizer) ReconcileRetryTimeoutPolicy(obj *v2.RetryTimeoutPolicy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRetryTimeoutPolicy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRetryTimeoutPolicy indicates an expected call of ReconcileRetryTimeoutPolicy.
func (mr *MockRetryTimeoutPolicyFinalizerMockRecorder) ReconcileRetryTimeoutPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRetryTimeoutPolicy", reflect.TypeOf((*MockRetryTimeoutPolicyFinalizer)(nil).ReconcileRetryTimeoutPolicy), obj)
}

// RetryTimeoutPolicyFinalizerName mocks base method.
func (m *MockRetryTimeoutPolicyFinalizer) RetryTimeoutPolicyFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryTimeoutPolicyFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// RetryTimeoutPolicyFinalizerName indicates an expected call of RetryTimeoutPolicyFinalizerName.
func (mr *MockRetryTimeoutPolicyFinalizerMockRecorder) RetryTimeoutPolicyFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryTimeoutPolicyFinalizerName", reflect.TypeOf((*MockRetryTimeoutPolicyFinalizer)(nil).RetryTimeoutPolicyFinalizerName))
}

// MockRetryTimeoutPolicyReconcileLoop is a mock of RetryTimeoutPolicyReconcileLoop interface.
type MockRetryTimeoutPolicyReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockRetryTimeoutPolicyReconcileLoopMockRecorder
}

// MockRetryTimeoutPolicyReconcileLoopMockRecorder is the mock recorder for MockRetryTimeoutPolicyReconcileLoop.
type MockRetryTimeoutPolicyReconcileLoopMockRecorder struct {
	mock *MockRetryTimeoutPolicyReconcileLoop
}

// NewMockRetryTimeoutPolicyReconcileLoop creates a new mock instance.
func NewMockRetryTimeoutPolicyReconcileLoop(ctrl *gomock.Controller) *MockRetryTimeoutPolicyReconcileLoop {
	mock := &MockRetryTimeoutPolicyReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockRetryTimeoutPolicyReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryTimeoutPolicyReconcileLoop) EXPECT() *MockRetryTimeoutPolicyReconcileLoopMockRecorder {
	return m.recorder
}

// RunRetryTimeoutPolicyReconciler mocks base method.
func (m *MockRetryTimeoutPolicyReconcileLoop) RunRetryTimeoutPolicyReconciler(ctx context.Context, rec controller.RetryTimeoutPolicyReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunRetryTimeoutPolicyReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunRetryTimeoutPolicyReconciler indicates an expected call of RunRetryTimeoutPolicyReconciler.
func (mr *MockRetryTimeoutPolicyReconcileLoopMockRecorder) RunRetryTimeoutPolicyReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunRetryTimeoutPolicyReconciler", reflect.TypeOf((*MockRetryTimeoutPolicyReconcileLoop)(nil).RunRetryTimeoutPolicyReconciler), varargs...)
}
