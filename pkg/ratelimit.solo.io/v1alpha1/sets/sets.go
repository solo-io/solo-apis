// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1alpha1sets

import (
	ratelimit_solo_io_v1alpha1 "github.com/solo-io/solo-apis/pkg/ratelimit.solo.io/v1alpha1"

	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/sets"
)

type RateLimitConfigSet interface {
	Keys() sets.String
	List() []*ratelimit_solo_io_v1alpha1.RateLimitConfig
	Map() map[string]*ratelimit_solo_io_v1alpha1.RateLimitConfig
	Insert(rateLimitConfig ...*ratelimit_solo_io_v1alpha1.RateLimitConfig)
	Equal(rateLimitConfigSet RateLimitConfigSet) bool
	Has(rateLimitConfig *ratelimit_solo_io_v1alpha1.RateLimitConfig) bool
	Delete(rateLimitConfig *ratelimit_solo_io_v1alpha1.RateLimitConfig)
	Union(set RateLimitConfigSet) RateLimitConfigSet
	Difference(set RateLimitConfigSet) RateLimitConfigSet
	Intersection(set RateLimitConfigSet) RateLimitConfigSet
}

func makeGenericRateLimitConfigSet(rateLimitConfigList []*ratelimit_solo_io_v1alpha1.RateLimitConfig) sksets.ResourceSet {
	var genericResources []metav1.Object
	for _, obj := range rateLimitConfigList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type rateLimitConfigSet struct {
	set sksets.ResourceSet
}

func NewRateLimitConfigSet(rateLimitConfigList ...*ratelimit_solo_io_v1alpha1.RateLimitConfig) RateLimitConfigSet {
	return &rateLimitConfigSet{set: makeGenericRateLimitConfigSet(rateLimitConfigList)}
}

func (s rateLimitConfigSet) Keys() sets.String {
	return s.set.Keys()
}

func (s rateLimitConfigSet) List() []*ratelimit_solo_io_v1alpha1.RateLimitConfig {
	var rateLimitConfigList []*ratelimit_solo_io_v1alpha1.RateLimitConfig
	for _, obj := range s.set.List() {
		rateLimitConfigList = append(rateLimitConfigList, obj.(*ratelimit_solo_io_v1alpha1.RateLimitConfig))
	}
	return rateLimitConfigList
}

func (s rateLimitConfigSet) Map() map[string]*ratelimit_solo_io_v1alpha1.RateLimitConfig {
	newMap := map[string]*ratelimit_solo_io_v1alpha1.RateLimitConfig{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*ratelimit_solo_io_v1alpha1.RateLimitConfig)
	}
	return newMap
}

func (s rateLimitConfigSet) Insert(
	rateLimitConfigList ...*ratelimit_solo_io_v1alpha1.RateLimitConfig,
) {
	for _, obj := range rateLimitConfigList {
		s.set.Insert(obj)
	}
}

func (s rateLimitConfigSet) Has(rateLimitConfig *ratelimit_solo_io_v1alpha1.RateLimitConfig) bool {
	return s.set.Has(rateLimitConfig)
}

func (s rateLimitConfigSet) Equal(
	rateLimitConfigSet RateLimitConfigSet,
) bool {
	return s.set.Equal(makeGenericRateLimitConfigSet(rateLimitConfigSet.List()))
}

func (s rateLimitConfigSet) Delete(RateLimitConfig *ratelimit_solo_io_v1alpha1.RateLimitConfig) {
	s.set.Delete(RateLimitConfig)
}

func (s rateLimitConfigSet) Union(set RateLimitConfigSet) RateLimitConfigSet {
	return NewRateLimitConfigSet(append(s.List(), set.List()...)...)
}

func (s rateLimitConfigSet) Difference(set RateLimitConfigSet) RateLimitConfigSet {
	newSet := s.set.Difference(makeGenericRateLimitConfigSet(set.List()))
	return rateLimitConfigSet{set: newSet}
}

func (s rateLimitConfigSet) Intersection(set RateLimitConfigSet) RateLimitConfigSet {
	newSet := s.set.Intersection(makeGenericRateLimitConfigSet(set.List()))
	var rateLimitConfigList []*ratelimit_solo_io_v1alpha1.RateLimitConfig
	for _, obj := range newSet.List() {
		rateLimitConfigList = append(rateLimitConfigList, obj.(*ratelimit_solo_io_v1alpha1.RateLimitConfig))
	}
	return NewRateLimitConfigSet(rateLimitConfigList...)
}
